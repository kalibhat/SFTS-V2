
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ad4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086ad4  00086ad4  0000ead4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086adc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005e0  20070c6c  00087748  00010c6c  2**2
                  ALLOC
  4 .stack        00002004  2007124c  00087d28  00010c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014b06  00000000  00000000  00010cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002de8  00000000  00000000  000257f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000745a  00000000  00000000  000285de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d80  00000000  00000000  0002fa38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be0  00000000  00000000  000307b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009464  00000000  00000000  00031398  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016685  00000000  00000000  0003a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00061bc5  00000000  00000000  00050e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000042c4  00000000  00000000  000b2a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073250 	.word	0x20073250
   80004:	00083329 	.word	0x00083329
   80008:	00083321 	.word	0x00083321
   8000c:	00083321 	.word	0x00083321
   80010:	00083321 	.word	0x00083321
   80014:	00083321 	.word	0x00083321
   80018:	00083321 	.word	0x00083321
	...
   8002c:	00083321 	.word	0x00083321
   80030:	00083321 	.word	0x00083321
   80034:	00000000 	.word	0x00000000
   80038:	00083321 	.word	0x00083321
   8003c:	00083321 	.word	0x00083321
   80040:	00083321 	.word	0x00083321
   80044:	00083321 	.word	0x00083321
   80048:	00083321 	.word	0x00083321
   8004c:	00083321 	.word	0x00083321
   80050:	00083321 	.word	0x00083321
   80054:	00083321 	.word	0x00083321
   80058:	00083321 	.word	0x00083321
   8005c:	00083321 	.word	0x00083321
   80060:	00081d1d 	.word	0x00081d1d
   80064:	00083321 	.word	0x00083321
   80068:	00000000 	.word	0x00000000
   8006c:	00082f91 	.word	0x00082f91
   80070:	00082fa9 	.word	0x00082fa9
   80074:	00082fc1 	.word	0x00082fc1
   80078:	00082fd9 	.word	0x00082fd9
	...
   80084:	00083321 	.word	0x00083321
   80088:	00083321 	.word	0x00083321
   8008c:	00083321 	.word	0x00083321
   80090:	00083321 	.word	0x00083321
   80094:	00083321 	.word	0x00083321
   80098:	00083321 	.word	0x00083321
   8009c:	00083321 	.word	0x00083321
   800a0:	00083321 	.word	0x00083321
   800a4:	00000000 	.word	0x00000000
   800a8:	00083321 	.word	0x00083321
   800ac:	00080a55 	.word	0x00080a55
   800b0:	00080b2d 	.word	0x00080b2d
   800b4:	00080c05 	.word	0x00080c05
   800b8:	00080c39 	.word	0x00080c39
   800bc:	00080c51 	.word	0x00080c51
   800c0:	00083321 	.word	0x00083321
   800c4:	00080c71 	.word	0x00080c71
   800c8:	00083321 	.word	0x00083321
   800cc:	00083321 	.word	0x00083321
   800d0:	00083321 	.word	0x00083321
   800d4:	00083321 	.word	0x00083321
   800d8:	00083321 	.word	0x00083321
   800dc:	00083321 	.word	0x00083321
   800e0:	00083321 	.word	0x00083321
   800e4:	00083321 	.word	0x00083321
   800e8:	00083321 	.word	0x00083321
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083321 	.word	0x00083321

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086adc 	.word	0x00086adc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	00086adc 	.word	0x00086adc
   80144:	20070c70 	.word	0x20070c70
   80148:	00086adc 	.word	0x00086adc
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bd80      	pop	{r7, pc}
   80172:	bf00      	nop
   80174:	000829cd 	.word	0x000829cd
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	370c      	adds	r7, #12
   801a8:	46bd      	mov	sp, r7
   801aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	3708      	adds	r7, #8
   801fa:	46bd      	mov	sp, r7
   801fc:	bd80      	pop	{r7, pc}
   801fe:	bf00      	nop
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dd0 	.word	0x20070dd0
   80208:	00080439 	.word	0x00080439
   8020c:	00080215 	.word	0x00080215
   80210:	20070c98 	.word	0x20070c98

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a78      	ldr	r2, [pc, #480]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b77      	ldr	r3, [pc, #476]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b76      	ldr	r3, [pc, #472]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b75      	ldr	r3, [pc, #468]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b75      	ldr	r3, [pc, #468]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e0dc      	b.n	803fa <dd_can_extract_mailbox_data+0x1e6>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b73      	ldr	r3, [pc, #460]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a72      	ldr	r2, [pc, #456]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b70      	ldr	r3, [pc, #448]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b6e      	ldr	r3, [pc, #440]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b6d      	ldr	r3, [pc, #436]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b6c      	ldr	r3, [pc, #432]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b69      	ldr	r3, [pc, #420]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b67      	ldr	r3, [pc, #412]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b67      	ldr	r3, [pc, #412]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b67      	ldr	r3, [pc, #412]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b65      	ldr	r3, [pc, #404]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a65      	ldr	r2, [pc, #404]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b0c      	cmp	r3, #12
   80294:	f200 80af 	bhi.w	803f6 <dd_can_extract_mailbox_data+0x1e2>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080319 	.word	0x00080319
   802a4:	0008033b 	.word	0x0008033b
   802a8:	00080365 	.word	0x00080365
   802ac:	000803bf 	.word	0x000803bf
   802b0:	000803cd 	.word	0x000803cd
   802b4:	000803db 	.word	0x000803db
   802b8:	000803e9 	.word	0x000803e9
   802bc:	000803a3 	.word	0x000803a3
   802c0:	000803b1 	.word	0x000803b1
   802c4:	00080387 	.word	0x00080387
   802c8:	00080395 	.word	0x00080395
   802cc:	000802d5 	.word	0x000802d5
   802d0:	000802f7 	.word	0x000802f7
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802d4:	4b53      	ldr	r3, [pc, #332]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802d6:	2200      	movs	r2, #0
   802d8:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802da:	4b53      	ldr	r3, [pc, #332]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802dc:	881b      	ldrh	r3, [r3, #0]
   802de:	b29b      	uxth	r3, r3
   802e0:	3301      	adds	r3, #1
   802e2:	b29a      	uxth	r2, r3
   802e4:	4b50      	ldr	r3, [pc, #320]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802e6:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   802e8:	4b50      	ldr	r3, [pc, #320]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   802ea:	2201      	movs	r2, #1
   802ec:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   802ee:	4b47      	ldr	r3, [pc, #284]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   802f0:	2200      	movs	r2, #0
   802f2:	701a      	strb	r2, [r3, #0]
				  
				  break;
   802f4:	e080      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   802f6:	4b4b      	ldr	r3, [pc, #300]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802f8:	2200      	movs	r2, #0
   802fa:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802fc:	4b4a      	ldr	r3, [pc, #296]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802fe:	881b      	ldrh	r3, [r3, #0]
   80300:	b29b      	uxth	r3, r3
   80302:	3301      	adds	r3, #1
   80304:	b29a      	uxth	r2, r3
   80306:	4b48      	ldr	r3, [pc, #288]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80308:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   8030a:	4b48      	ldr	r3, [pc, #288]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8030c:	2201      	movs	r2, #1
   8030e:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80310:	4b3e      	ldr	r3, [pc, #248]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80312:	2200      	movs	r2, #0
   80314:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80316:	e06f      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			     case PROP_START_ALIGMENT:
			          test =0;
   80318:	4b42      	ldr	r3, [pc, #264]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8031a:	2200      	movs	r2, #0
   8031c:	701a      	strb	r2, [r3, #0]
					  count_start++;
   8031e:	4b42      	ldr	r3, [pc, #264]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80320:	881b      	ldrh	r3, [r3, #0]
   80322:	b29b      	uxth	r3, r3
   80324:	3301      	adds	r3, #1
   80326:	b29a      	uxth	r2, r3
   80328:	4b3f      	ldr	r3, [pc, #252]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8032a:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   8032c:	4b3f      	ldr	r3, [pc, #252]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8032e:	2201      	movs	r2, #1
   80330:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   80332:	4b36      	ldr	r3, [pc, #216]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80334:	2200      	movs	r2, #0
   80336:	701a      	strb	r2, [r3, #0]
			    break;
   80338:	e05e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_START_MIXING:
			        User_setConductivity = temp_struct.temp_reg_16[1];
   8033a:	4b32      	ldr	r3, [pc, #200]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8033c:	885a      	ldrh	r2, [r3, #2]
   8033e:	4b3c      	ldr	r3, [pc, #240]	; (80430 <dd_can_extract_mailbox_data+0x21c>)
   80340:	801a      	strh	r2, [r3, #0]

				    test=0;
   80342:	4b38      	ldr	r3, [pc, #224]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80344:	2200      	movs	r2, #0
   80346:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80348:	4b37      	ldr	r3, [pc, #220]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8034a:	881b      	ldrh	r3, [r3, #0]
   8034c:	b29b      	uxth	r3, r3
   8034e:	3301      	adds	r3, #1
   80350:	b29a      	uxth	r2, r3
   80352:	4b35      	ldr	r3, [pc, #212]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80354:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80356:	4b35      	ldr	r3, [pc, #212]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80358:	2201      	movs	r2, #1
   8035a:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8035c:	4b2b      	ldr	r3, [pc, #172]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8035e:	2200      	movs	r2, #0
   80360:	701a      	strb	r2, [r3, #0]
			    break;
   80362:	e049      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_STOP_MIXING:
			        test =0;
   80364:	4b2f      	ldr	r3, [pc, #188]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80366:	2200      	movs	r2, #0
   80368:	701a      	strb	r2, [r3, #0]
					count_stop++;
   8036a:	4b32      	ldr	r3, [pc, #200]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   8036c:	881b      	ldrh	r3, [r3, #0]
   8036e:	b29b      	uxth	r3, r3
   80370:	3301      	adds	r3, #1
   80372:	b29a      	uxth	r2, r3
   80374:	4b2f      	ldr	r3, [pc, #188]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   80376:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80378:	4b2c      	ldr	r3, [pc, #176]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8037a:	2201      	movs	r2, #1
   8037c:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8037e:	4b23      	ldr	r3, [pc, #140]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80380:	2200      	movs	r2, #0
   80382:	701a      	strb	r2, [r3, #0]
			    break;
   80384:	e038      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   80386:	4b29      	ldr	r3, [pc, #164]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80388:	2201      	movs	r2, #1
   8038a:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8038c:	4b1f      	ldr	r3, [pc, #124]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8038e:	2200      	movs	r2, #0
   80390:	701a      	strb	r2, [r3, #0]
			    break;
   80392:	e031      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   80394:	4b25      	ldr	r3, [pc, #148]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80396:	2201      	movs	r2, #1
   80398:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   8039a:	4b1c      	ldr	r3, [pc, #112]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
			    break;
   803a0:	e02a      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803a2:	4b22      	ldr	r3, [pc, #136]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803a4:	2201      	movs	r2, #1
   803a6:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803a8:	4b18      	ldr	r3, [pc, #96]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803aa:	2200      	movs	r2, #0
   803ac:	701a      	strb	r2, [r3, #0]
			    break;
   803ae:	e023      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803b0:	4b1e      	ldr	r3, [pc, #120]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803b2:	2201      	movs	r2, #1
   803b4:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803b6:	4b15      	ldr	r3, [pc, #84]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803b8:	2200      	movs	r2, #0
   803ba:	701a      	strb	r2, [r3, #0]
				
				break;
   803bc:	e01c      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803be:	4b1b      	ldr	r3, [pc, #108]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803c0:	2201      	movs	r2, #1
   803c2:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803c4:	4b11      	ldr	r3, [pc, #68]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803c6:	2200      	movs	r2, #0
   803c8:	701a      	strb	r2, [r3, #0]
				break;
   803ca:	e015      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803cc:	4b17      	ldr	r3, [pc, #92]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ce:	2201      	movs	r2, #1
   803d0:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803d2:	4b0e      	ldr	r3, [pc, #56]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803d4:	2200      	movs	r2, #0
   803d6:	701a      	strb	r2, [r3, #0]
				break;
   803d8:	e00e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803da:	4b14      	ldr	r3, [pc, #80]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803dc:	2201      	movs	r2, #1
   803de:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803e0:	4b0a      	ldr	r3, [pc, #40]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803e2:	2200      	movs	r2, #0
   803e4:	701a      	strb	r2, [r3, #0]
				break;
   803e6:	e007      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   803e8:	4b10      	ldr	r3, [pc, #64]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ea:	2201      	movs	r2, #1
   803ec:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   803ee:	4b07      	ldr	r3, [pc, #28]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803f0:	2200      	movs	r2, #0
   803f2:	701a      	strb	r2, [r3, #0]
				break;
   803f4:	e000      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				default:
				break;
   803f6:	bf00      	nop
			  }		  
		   default:
		   break;
   803f8:	bf00      	nop
		   
	 }
}
   803fa:	3714      	adds	r7, #20
   803fc:	46bd      	mov	sp, r7
   803fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80402:	4770      	bx	lr
   80404:	20070dc4 	.word	0x20070dc4
   80408:	20070c93 	.word	0x20070c93
   8040c:	20070c88 	.word	0x20070c88
   80410:	20070c8e 	.word	0x20070c8e
   80414:	20070c90 	.word	0x20070c90
   80418:	20070c94 	.word	0x20070c94
   8041c:	20070e04 	.word	0x20070e04
   80420:	20070dc8 	.word	0x20070dc8
   80424:	20070c97 	.word	0x20070c97
   80428:	20070c8a 	.word	0x20070c8a
   8042c:	20070df0 	.word	0x20070df0
   80430:	20070dca 	.word	0x20070dca
   80434:	20070c8c 	.word	0x20070c8c

00080438 <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   80438:	b480      	push	{r7}
   8043a:	b087      	sub	sp, #28
   8043c:	af00      	add	r7, sp, #0
   8043e:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80440:	2300      	movs	r3, #0
   80442:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	681b      	ldr	r3, [r3, #0]
   80448:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8044a:	687b      	ldr	r3, [r7, #4]
   8044c:	689b      	ldr	r3, [r3, #8]
   8044e:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80456:	2b00      	cmp	r3, #0
   80458:	d006      	beq.n	80468 <dd_can_mailbox_read+0x30>
   8045a:	68fb      	ldr	r3, [r7, #12]
   8045c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80460:	2b00      	cmp	r3, #0
   80462:	d001      	beq.n	80468 <dd_can_mailbox_read+0x30>
   80464:	2302      	movs	r3, #2
   80466:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80468:	4a26      	ldr	r2, [pc, #152]	; (80504 <dd_can_mailbox_read+0xcc>)
   8046a:	7cfb      	ldrb	r3, [r7, #19]
   8046c:	015b      	lsls	r3, r3, #5
   8046e:	4413      	add	r3, r2
   80470:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80474:	685b      	ldr	r3, [r3, #4]
   80476:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8047a:	687b      	ldr	r3, [r7, #4]
   8047c:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8047e:	68fb      	ldr	r3, [r7, #12]
   80480:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80484:	0c1b      	lsrs	r3, r3, #16
   80486:	b2da      	uxtb	r2, r3
   80488:	687b      	ldr	r3, [r7, #4]
   8048a:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   8048c:	4a1d      	ldr	r2, [pc, #116]	; (80504 <dd_can_mailbox_read+0xcc>)
   8048e:	7cfb      	ldrb	r3, [r7, #19]
   80490:	015b      	lsls	r3, r3, #5
   80492:	4413      	add	r3, r2
   80494:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80498:	685a      	ldr	r2, [r3, #4]
   8049a:	687b      	ldr	r3, [r7, #4]
   8049c:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   8049e:	4a19      	ldr	r2, [pc, #100]	; (80504 <dd_can_mailbox_read+0xcc>)
   804a0:	7cfb      	ldrb	r3, [r7, #19]
   804a2:	015b      	lsls	r3, r3, #5
   804a4:	4413      	add	r3, r2
   804a6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804aa:	681a      	ldr	r2, [r3, #0]
   804ac:	687b      	ldr	r3, [r7, #4]
   804ae:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   804b0:	4a14      	ldr	r2, [pc, #80]	; (80504 <dd_can_mailbox_read+0xcc>)
   804b2:	7cfb      	ldrb	r3, [r7, #19]
   804b4:	015b      	lsls	r3, r3, #5
   804b6:	4413      	add	r3, r2
   804b8:	f503 7304 	add.w	r3, r3, #528	; 0x210
   804bc:	681a      	ldr	r2, [r3, #0]
   804be:	687b      	ldr	r3, [r7, #4]
   804c0:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   804c2:	687b      	ldr	r3, [r7, #4]
   804c4:	689b      	ldr	r3, [r3, #8]
   804c6:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   804c8:	68fb      	ldr	r3, [r7, #12]
   804ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804ce:	2b00      	cmp	r3, #0
   804d0:	d003      	beq.n	804da <dd_can_mailbox_read+0xa2>
   804d2:	697b      	ldr	r3, [r7, #20]
   804d4:	f043 0304 	orr.w	r3, r3, #4
   804d8:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   804da:	490a      	ldr	r1, [pc, #40]	; (80504 <dd_can_mailbox_read+0xcc>)
   804dc:	7cfb      	ldrb	r3, [r7, #19]
   804de:	687a      	ldr	r2, [r7, #4]
   804e0:	7992      	ldrb	r2, [r2, #6]
   804e2:	0412      	lsls	r2, r2, #16
   804e4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   804e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   804ec:	015b      	lsls	r3, r3, #5
   804ee:	440b      	add	r3, r1
   804f0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804f4:	605a      	str	r2, [r3, #4]
	return ul_retval;
   804f6:	697b      	ldr	r3, [r7, #20]
}
   804f8:	4618      	mov	r0, r3
   804fa:	371c      	adds	r7, #28
   804fc:	46bd      	mov	sp, r7
   804fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80502:	4770      	bx	lr
   80504:	400b4000 	.word	0x400b4000

00080508 <dd_can_mailbox_conf>:
}



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80508:	b480      	push	{r7}
   8050a:	b085      	sub	sp, #20
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	791b      	ldrb	r3, [r3, #4]
   8051a:	2b00      	cmp	r3, #0
   8051c:	d12e      	bne.n	8057c <dd_can_mailbox_conf+0x74>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8051e:	4a34      	ldr	r2, [pc, #208]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   80520:	7bfb      	ldrb	r3, [r7, #15]
   80522:	3310      	adds	r3, #16
   80524:	015b      	lsls	r3, r3, #5
   80526:	4413      	add	r3, r2
   80528:	2200      	movs	r2, #0
   8052a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   8052c:	4a30      	ldr	r2, [pc, #192]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8052e:	7bfb      	ldrb	r3, [r7, #15]
   80530:	3310      	adds	r3, #16
   80532:	015b      	lsls	r3, r3, #5
   80534:	4413      	add	r3, r2
   80536:	2200      	movs	r2, #0
   80538:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   8053a:	4a2d      	ldr	r2, [pc, #180]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8053c:	7bfb      	ldrb	r3, [r7, #15]
   8053e:	015b      	lsls	r3, r3, #5
   80540:	4413      	add	r3, r2
   80542:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80546:	2200      	movs	r2, #0
   80548:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   8054a:	4a29      	ldr	r2, [pc, #164]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8054c:	7bfb      	ldrb	r3, [r7, #15]
   8054e:	015b      	lsls	r3, r3, #5
   80550:	4413      	add	r3, r2
   80552:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80556:	2200      	movs	r2, #0
   80558:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   8055a:	4a25      	ldr	r2, [pc, #148]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8055c:	7bfb      	ldrb	r3, [r7, #15]
   8055e:	015b      	lsls	r3, r3, #5
   80560:	4413      	add	r3, r2
   80562:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80566:	2200      	movs	r2, #0
   80568:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   8056a:	4a21      	ldr	r2, [pc, #132]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8056c:	7bfb      	ldrb	r3, [r7, #15]
   8056e:	015b      	lsls	r3, r3, #5
   80570:	4413      	add	r3, r2
   80572:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80576:	2200      	movs	r2, #0
   80578:	605a      	str	r2, [r3, #4]
		return;
   8057a:	e034      	b.n	805e6 <dd_can_mailbox_conf+0xde>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   8057c:	481c      	ldr	r0, [pc, #112]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   8057e:	7bfb      	ldrb	r3, [r7, #15]
   80580:	491b      	ldr	r1, [pc, #108]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   80582:	7bfa      	ldrb	r2, [r7, #15]
   80584:	3210      	adds	r2, #16
   80586:	0152      	lsls	r2, r2, #5
   80588:	440a      	add	r2, r1
   8058a:	6812      	ldr	r2, [r2, #0]
   8058c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80590:	6879      	ldr	r1, [r7, #4]
   80592:	79c9      	ldrb	r1, [r1, #7]
   80594:	0409      	lsls	r1, r1, #16
   80596:	430a      	orrs	r2, r1
   80598:	3310      	adds	r3, #16
   8059a:	015b      	lsls	r3, r3, #5
   8059c:	4403      	add	r3, r0
   8059e:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   805a0:	4913      	ldr	r1, [pc, #76]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   805a2:	7bfb      	ldrb	r3, [r7, #15]
   805a4:	687a      	ldr	r2, [r7, #4]
   805a6:	68d2      	ldr	r2, [r2, #12]
   805a8:	3310      	adds	r3, #16
   805aa:	015b      	lsls	r3, r3, #5
   805ac:	440b      	add	r3, r1
   805ae:	605a      	str	r2, [r3, #4]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   805b0:	490f      	ldr	r1, [pc, #60]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   805b2:	7bfb      	ldrb	r3, [r7, #15]
   805b4:	687a      	ldr	r2, [r7, #4]
   805b6:	6912      	ldr	r2, [r2, #16]
   805b8:	015b      	lsls	r3, r3, #5
   805ba:	440b      	add	r3, r1
   805bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805c0:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   805c2:	480b      	ldr	r0, [pc, #44]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   805c4:	7bfb      	ldrb	r3, [r7, #15]
   805c6:	490a      	ldr	r1, [pc, #40]	; (805f0 <dd_can_mailbox_conf+0xe8>)
   805c8:	7bfa      	ldrb	r2, [r7, #15]
   805ca:	3210      	adds	r2, #16
   805cc:	0152      	lsls	r2, r2, #5
   805ce:	440a      	add	r2, r1
   805d0:	6812      	ldr	r2, [r2, #0]
   805d2:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   805d6:	6879      	ldr	r1, [r7, #4]
   805d8:	7909      	ldrb	r1, [r1, #4]
   805da:	0609      	lsls	r1, r1, #24
   805dc:	430a      	orrs	r2, r1
   805de:	3310      	adds	r3, #16
   805e0:	015b      	lsls	r3, r3, #5
   805e2:	4403      	add	r3, r0
   805e4:	601a      	str	r2, [r3, #0]
}
   805e6:	3714      	adds	r7, #20
   805e8:	46bd      	mov	sp, r7
   805ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   805ee:	4770      	bx	lr
   805f0:	400b4000 	.word	0x400b4000

000805f4 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   805f4:	b580      	push	{r7, lr}
   805f6:	b08e      	sub	sp, #56	; 0x38
   805f8:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805fa:	4b4b      	ldr	r3, [pc, #300]	; (80728 <DD_INIT_CAN+0x134>)
   805fc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   805fe:	2378      	movs	r3, #120	; 0x78
   80600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80604:	4b49      	ldr	r3, [pc, #292]	; (8072c <DD_INIT_CAN+0x138>)
   80606:	4a4a      	ldr	r2, [pc, #296]	; (80730 <DD_INIT_CAN+0x13c>)
   80608:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   8060c:	4a47      	ldr	r2, [pc, #284]	; (8072c <DD_INIT_CAN+0x138>)
   8060e:	4b47      	ldr	r3, [pc, #284]	; (8072c <DD_INIT_CAN+0x138>)
   80610:	681b      	ldr	r3, [r3, #0]
   80612:	f023 0301 	bic.w	r3, r3, #1
   80616:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   80618:	4944      	ldr	r1, [pc, #272]	; (8072c <DD_INIT_CAN+0x138>)
   8061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8061c:	78db      	ldrb	r3, [r3, #3]
   8061e:	3b01      	subs	r3, #1
   80620:	f003 0207 	and.w	r2, r3, #7
   80624:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80626:	789b      	ldrb	r3, [r3, #2]
   80628:	3b01      	subs	r3, #1
   8062a:	011b      	lsls	r3, r3, #4
   8062c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80630:	431a      	orrs	r2, r3
   80632:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80634:	785b      	ldrb	r3, [r3, #1]
   80636:	3b01      	subs	r3, #1
   80638:	021b      	lsls	r3, r3, #8
   8063a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   8063e:	431a      	orrs	r2, r3
   80640:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80642:	791b      	ldrb	r3, [r3, #4]
   80644:	3b01      	subs	r3, #1
   80646:	031b      	lsls	r3, r3, #12
   80648:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   8064c:	431a      	orrs	r2, r3
   8064e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80652:	3b01      	subs	r3, #1
   80654:	041b      	lsls	r3, r3, #16
   80656:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8065a:	4313      	orrs	r3, r2
   8065c:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   8065e:	2300      	movs	r3, #0
   80660:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80662:	2300      	movs	r3, #0
   80664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80668:	e00b      	b.n	80682 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   8066a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8066e:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   80670:	1d3b      	adds	r3, r7, #4
   80672:	4618      	mov	r0, r3
   80674:	4b2f      	ldr	r3, [pc, #188]	; (80734 <DD_INIT_CAN+0x140>)
   80676:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8067c:	3301      	adds	r3, #1
   8067e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80686:	2b07      	cmp	r3, #7
   80688:	d9ef      	bls.n	8066a <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8068a:	4a28      	ldr	r2, [pc, #160]	; (8072c <DD_INIT_CAN+0x138>)
   8068c:	4b27      	ldr	r3, [pc, #156]	; (8072c <DD_INIT_CAN+0x138>)
   8068e:	681b      	ldr	r3, [r3, #0]
   80690:	f043 0301 	orr.w	r3, r3, #1
   80694:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80696:	2300      	movs	r3, #0
   80698:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8069a:	2300      	movs	r3, #0
   8069c:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   8069e:	e005      	b.n	806ac <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   806a0:	4b22      	ldr	r3, [pc, #136]	; (8072c <DD_INIT_CAN+0x138>)
   806a2:	691b      	ldr	r3, [r3, #16]
   806a4:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   806a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806a8:	3301      	adds	r3, #1
   806aa:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   806ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   806b2:	2b00      	cmp	r3, #0
   806b4:	d103      	bne.n	806be <DD_INIT_CAN+0xca>
   806b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806b8:	4a1f      	ldr	r2, [pc, #124]	; (80738 <DD_INIT_CAN+0x144>)
   806ba:	4293      	cmp	r3, r2
   806bc:	d9f0      	bls.n	806a0 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   806be:	4b1f      	ldr	r3, [pc, #124]	; (8073c <DD_INIT_CAN+0x148>)
   806c0:	2201      	movs	r2, #1
   806c2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   806c4:	4b1d      	ldr	r3, [pc, #116]	; (8073c <DD_INIT_CAN+0x148>)
   806c6:	2201      	movs	r2, #1
   806c8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   806ca:	4b1c      	ldr	r3, [pc, #112]	; (8073c <DD_INIT_CAN+0x148>)
   806cc:	2200      	movs	r2, #0
   806ce:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806d0:	4b1a      	ldr	r3, [pc, #104]	; (8073c <DD_INIT_CAN+0x148>)
   806d2:	2200      	movs	r2, #0
   806d4:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   806d6:	4b19      	ldr	r3, [pc, #100]	; (8073c <DD_INIT_CAN+0x148>)
   806d8:	4a19      	ldr	r2, [pc, #100]	; (80740 <DD_INIT_CAN+0x14c>)
   806da:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   806dc:	4b17      	ldr	r3, [pc, #92]	; (8073c <DD_INIT_CAN+0x148>)
   806de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   806e2:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806e4:	4815      	ldr	r0, [pc, #84]	; (8073c <DD_INIT_CAN+0x148>)
   806e6:	4b13      	ldr	r3, [pc, #76]	; (80734 <DD_INIT_CAN+0x140>)
   806e8:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806ea:	202b      	movs	r0, #43	; 0x2b
   806ec:	4b15      	ldr	r3, [pc, #84]	; (80744 <DD_INIT_CAN+0x150>)
   806ee:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   806f0:	4b0e      	ldr	r3, [pc, #56]	; (8072c <DD_INIT_CAN+0x138>)
   806f2:	2202      	movs	r2, #2
   806f4:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   806f6:	4b11      	ldr	r3, [pc, #68]	; (8073c <DD_INIT_CAN+0x148>)
   806f8:	2200      	movs	r2, #0
   806fa:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   806fc:	4b0f      	ldr	r3, [pc, #60]	; (8073c <DD_INIT_CAN+0x148>)
   806fe:	2203      	movs	r2, #3
   80700:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80702:	4b0e      	ldr	r3, [pc, #56]	; (8073c <DD_INIT_CAN+0x148>)
   80704:	2201      	movs	r2, #1
   80706:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80708:	4b0c      	ldr	r3, [pc, #48]	; (8073c <DD_INIT_CAN+0x148>)
   8070a:	2200      	movs	r2, #0
   8070c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   8070e:	4b0b      	ldr	r3, [pc, #44]	; (8073c <DD_INIT_CAN+0x148>)
   80710:	4a0b      	ldr	r2, [pc, #44]	; (80740 <DD_INIT_CAN+0x14c>)
   80712:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80714:	4b09      	ldr	r3, [pc, #36]	; (8073c <DD_INIT_CAN+0x148>)
   80716:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8071a:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   8071c:	4807      	ldr	r0, [pc, #28]	; (8073c <DD_INIT_CAN+0x148>)
   8071e:	4b05      	ldr	r3, [pc, #20]	; (80734 <DD_INIT_CAN+0x140>)
   80720:	4798      	blx	r3
}
   80722:	3738      	adds	r7, #56	; 0x38
   80724:	46bd      	mov	sp, r7
   80726:	bd80      	pop	{r7, pc}
   80728:	000869ec 	.word	0x000869ec
   8072c:	400b4000 	.word	0x400b4000
   80730:	43414e00 	.word	0x43414e00
   80734:	00080509 	.word	0x00080509
   80738:	0001869f 	.word	0x0001869f
   8073c:	20070dd0 	.word	0x20070dd0
   80740:	1ffc0000 	.word	0x1ffc0000
   80744:	00080185 	.word	0x00080185

00080748 <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   80748:	b580      	push	{r7, lr}
   8074a:	b082      	sub	sp, #8
   8074c:	af00      	add	r7, sp, #0
   8074e:	4603      	mov	r3, r0
   80750:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   80752:	4b18      	ldr	r3, [pc, #96]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   80754:	f640 2241 	movw	r2, #2625	; 0xa41
   80758:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   8075c:	4b15      	ldr	r3, [pc, #84]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   8075e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80762:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80766:	4b13      	ldr	r3, [pc, #76]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   80768:	f640 2241 	movw	r2, #2625	; 0xa41
   8076c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80770:	4b10      	ldr	r3, [pc, #64]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   80772:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   8077a:	79fb      	ldrb	r3, [r7, #7]
   8077c:	2b01      	cmp	r3, #1
   8077e:	d002      	beq.n	80786 <CPU3_D_SET_PUMP+0x3e>
   80780:	2b02      	cmp	r3, #2
   80782:	d009      	beq.n	80798 <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   80784:	e011      	b.n	807aa <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   80786:	4b0b      	ldr	r3, [pc, #44]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   80788:	2210      	movs	r2, #16
   8078a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   8078c:	2055      	movs	r0, #85	; 0x55
   8078e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80792:	4b09      	ldr	r3, [pc, #36]	; (807b8 <CPU3_D_SET_PUMP+0x70>)
   80794:	4798      	blx	r3
		break;
   80796:	e008      	b.n	807aa <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   80798:	4b06      	ldr	r3, [pc, #24]	; (807b4 <CPU3_D_SET_PUMP+0x6c>)
   8079a:	2220      	movs	r2, #32
   8079c:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   8079e:	2056      	movs	r0, #86	; 0x56
   807a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807a4:	4b04      	ldr	r3, [pc, #16]	; (807b8 <CPU3_D_SET_PUMP+0x70>)
   807a6:	4798      	blx	r3
		break;
   807a8:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   807aa:	2300      	movs	r3, #0
}
   807ac:	4618      	mov	r0, r3
   807ae:	3708      	adds	r7, #8
   807b0:	46bd      	mov	sp, r7
   807b2:	bd80      	pop	{r7, pc}
   807b4:	40094000 	.word	0x40094000
   807b8:	00082cc9 	.word	0x00082cc9

000807bc <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   807bc:	b590      	push	{r4, r7, lr}
   807be:	b089      	sub	sp, #36	; 0x24
   807c0:	af00      	add	r7, sp, #0
   807c2:	4603      	mov	r3, r0
   807c4:	460a      	mov	r2, r1
   807c6:	71fb      	strb	r3, [r7, #7]
   807c8:	4613      	mov	r3, r2
   807ca:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   807cc:	2300      	movs	r3, #0
   807ce:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   807d0:	79bb      	ldrb	r3, [r7, #6]
   807d2:	01db      	lsls	r3, r3, #7
   807d4:	4a1f      	ldr	r2, [pc, #124]	; (80854 <CPU3_D_CONFIG_TIMER+0x98>)
   807d6:	fb92 f3f3 	sdiv	r3, r2, r3
   807da:	1e5a      	subs	r2, r3, #1
   807dc:	4b1e      	ldr	r3, [pc, #120]	; (80858 <CPU3_D_CONFIG_TIMER+0x9c>)
   807de:	4610      	mov	r0, r2
   807e0:	4798      	blx	r3
   807e2:	4602      	mov	r2, r0
   807e4:	460b      	mov	r3, r1
   807e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   807ea:	4b1c      	ldr	r3, [pc, #112]	; (8085c <CPU3_D_CONFIG_TIMER+0xa0>)
   807ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   807f0:	4798      	blx	r3
   807f2:	4603      	mov	r3, r0
   807f4:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   807f6:	79fb      	ldrb	r3, [r7, #7]
   807f8:	2b04      	cmp	r3, #4
   807fa:	d826      	bhi.n	8084a <CPU3_D_CONFIG_TIMER+0x8e>
   807fc:	a201      	add	r2, pc, #4	; (adr r2, 80804 <CPU3_D_CONFIG_TIMER+0x48>)
   807fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80802:	bf00      	nop
   80804:	00080819 	.word	0x00080819
   80808:	00080827 	.word	0x00080827
   8080c:	00080839 	.word	0x00080839
   80810:	0008083f 	.word	0x0008083f
   80814:	00080845 	.word	0x00080845
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   80818:	4811      	ldr	r0, [pc, #68]	; (80860 <CPU3_D_CONFIG_TIMER+0xa4>)
   8081a:	69f9      	ldr	r1, [r7, #28]
   8081c:	2221      	movs	r2, #33	; 0x21
   8081e:	68fb      	ldr	r3, [r7, #12]
   80820:	4c10      	ldr	r4, [pc, #64]	; (80864 <CPU3_D_CONFIG_TIMER+0xa8>)
   80822:	47a0      	blx	r4
		break;
   80824:	e012      	b.n	8084c <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   80826:	79bb      	ldrb	r3, [r7, #6]
   80828:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   8082a:	480f      	ldr	r0, [pc, #60]	; (80868 <CPU3_D_CONFIG_TIMER+0xac>)
   8082c:	2100      	movs	r1, #0
   8082e:	221b      	movs	r2, #27
   80830:	68fb      	ldr	r3, [r7, #12]
   80832:	4c0e      	ldr	r4, [pc, #56]	; (8086c <CPU3_D_CONFIG_TIMER+0xb0>)
   80834:	47a0      	blx	r4
		break;
   80836:	e009      	b.n	8084c <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   80838:	79bb      	ldrb	r3, [r7, #6]
   8083a:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   8083c:	e006      	b.n	8084c <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   8083e:	79bb      	ldrb	r3, [r7, #6]
   80840:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   80842:	e003      	b.n	8084c <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   80844:	79bb      	ldrb	r3, [r7, #6]
   80846:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   80848:	e000      	b.n	8084c <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   8084a:	bf00      	nop
		
	}
}
   8084c:	4618      	mov	r0, r3
   8084e:	3724      	adds	r7, #36	; 0x24
   80850:	46bd      	mov	sp, r7
   80852:	bd90      	pop	{r4, r7, pc}
   80854:	0501bd00 	.word	0x0501bd00
   80858:	0008395d 	.word	0x0008395d
   8085c:	00083a29 	.word	0x00083a29
   80860:	40088000 	.word	0x40088000
   80864:	0008100d 	.word	0x0008100d
   80868:	40080000 	.word	0x40080000
   8086c:	00081069 	.word	0x00081069

00080870 <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   80870:	b580      	push	{r7, lr}
   80872:	b082      	sub	sp, #8
   80874:	af00      	add	r7, sp, #0
   80876:	4603      	mov	r3, r0
   80878:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   8087a:	79fb      	ldrb	r3, [r7, #7]
   8087c:	2b04      	cmp	r3, #4
   8087e:	d826      	bhi.n	808ce <CPU3_D_STOP_TIMER+0x5e>
   80880:	a201      	add	r2, pc, #4	; (adr r2, 80888 <CPU3_D_STOP_TIMER+0x18>)
   80882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80886:	bf00      	nop
   80888:	0008089d 	.word	0x0008089d
   8088c:	000808a7 	.word	0x000808a7
   80890:	000808b1 	.word	0x000808b1
   80894:	000808bb 	.word	0x000808bb
   80898:	000808c5 	.word	0x000808c5
	{
		case 0:
		tc_stop(TC0,0);
   8089c:	480e      	ldr	r0, [pc, #56]	; (808d8 <CPU3_D_STOP_TIMER+0x68>)
   8089e:	2100      	movs	r1, #0
   808a0:	4b0e      	ldr	r3, [pc, #56]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808a2:	4798      	blx	r3
		break;
   808a4:	e014      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   808a6:	480c      	ldr	r0, [pc, #48]	; (808d8 <CPU3_D_STOP_TIMER+0x68>)
   808a8:	2101      	movs	r1, #1
   808aa:	4b0c      	ldr	r3, [pc, #48]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808ac:	4798      	blx	r3
		break;
   808ae:	e00f      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   808b0:	480b      	ldr	r0, [pc, #44]	; (808e0 <CPU3_D_STOP_TIMER+0x70>)
   808b2:	2100      	movs	r1, #0
   808b4:	4b09      	ldr	r3, [pc, #36]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808b6:	4798      	blx	r3
		break;
   808b8:	e00a      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   808ba:	480a      	ldr	r0, [pc, #40]	; (808e4 <CPU3_D_STOP_TIMER+0x74>)
   808bc:	2100      	movs	r1, #0
   808be:	4b07      	ldr	r3, [pc, #28]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808c0:	4798      	blx	r3
		break;
   808c2:	e005      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   808c4:	4807      	ldr	r0, [pc, #28]	; (808e4 <CPU3_D_STOP_TIMER+0x74>)
   808c6:	2101      	movs	r1, #1
   808c8:	4b04      	ldr	r3, [pc, #16]	; (808dc <CPU3_D_STOP_TIMER+0x6c>)
   808ca:	4798      	blx	r3
		break;
   808cc:	e000      	b.n	808d0 <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   808ce:	bf00      	nop
	}
   808d0:	4618      	mov	r0, r3
   808d2:	3708      	adds	r7, #8
   808d4:	46bd      	mov	sp, r7
   808d6:	bd80      	pop	{r7, pc}
   808d8:	40080000 	.word	0x40080000
   808dc:	000813f5 	.word	0x000813f5
   808e0:	40088000 	.word	0x40088000
   808e4:	40084000 	.word	0x40084000

000808e8 <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   808e8:	b580      	push	{r7, lr}
   808ea:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   808ec:	200b      	movs	r0, #11
   808ee:	4b3b      	ldr	r3, [pc, #236]	; (809dc <CPU3_D_INIT_PIO+0xf4>)
   808f0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   808f2:	200c      	movs	r0, #12
   808f4:	4b39      	ldr	r3, [pc, #228]	; (809dc <CPU3_D_INIT_PIO+0xf4>)
   808f6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   808f8:	200d      	movs	r0, #13
   808fa:	4b38      	ldr	r3, [pc, #224]	; (809dc <CPU3_D_INIT_PIO+0xf4>)
   808fc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   808fe:	200e      	movs	r0, #14
   80900:	4b36      	ldr	r3, [pc, #216]	; (809dc <CPU3_D_INIT_PIO+0xf4>)
   80902:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80904:	4b36      	ldr	r3, [pc, #216]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80906:	4a37      	ldr	r2, [pc, #220]	; (809e4 <CPU3_D_INIT_PIO+0xfc>)
   80908:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   8090c:	4b36      	ldr	r3, [pc, #216]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   8090e:	4a35      	ldr	r2, [pc, #212]	; (809e4 <CPU3_D_INIT_PIO+0xfc>)
   80910:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80914:	4b35      	ldr	r3, [pc, #212]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   80916:	4a33      	ldr	r2, [pc, #204]	; (809e4 <CPU3_D_INIT_PIO+0xfc>)
   80918:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   8091c:	4b34      	ldr	r3, [pc, #208]	; (809f0 <CPU3_D_INIT_PIO+0x108>)
   8091e:	4a31      	ldr	r2, [pc, #196]	; (809e4 <CPU3_D_INIT_PIO+0xfc>)
   80920:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80924:	4b2e      	ldr	r3, [pc, #184]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80926:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8092a:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   8092c:	4b2c      	ldr	r3, [pc, #176]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   8092e:	4a31      	ldr	r2, [pc, #196]	; (809f4 <CPU3_D_INIT_PIO+0x10c>)
   80930:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80932:	4b2b      	ldr	r3, [pc, #172]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80934:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80938:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   8093a:	4b29      	ldr	r3, [pc, #164]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   8093c:	f44f 7240 	mov.w	r2, #768	; 0x300
   80940:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80942:	4b27      	ldr	r3, [pc, #156]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80944:	f44f 7240 	mov.w	r2, #768	; 0x300
   80948:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   8094a:	4b25      	ldr	r3, [pc, #148]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   8094c:	4a2a      	ldr	r2, [pc, #168]	; (809f8 <CPU3_D_INIT_PIO+0x110>)
   8094e:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80950:	4b23      	ldr	r3, [pc, #140]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80952:	4a2a      	ldr	r2, [pc, #168]	; (809fc <CPU3_D_INIT_PIO+0x114>)
   80954:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80956:	4b22      	ldr	r3, [pc, #136]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80958:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8095c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   8095e:	4b20      	ldr	r3, [pc, #128]	; (809e0 <CPU3_D_INIT_PIO+0xf8>)
   80960:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80964:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80966:	4b20      	ldr	r3, [pc, #128]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   80968:	4a25      	ldr	r2, [pc, #148]	; (80a00 <CPU3_D_INIT_PIO+0x118>)
   8096a:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   8096c:	4b1e      	ldr	r3, [pc, #120]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   8096e:	4a24      	ldr	r2, [pc, #144]	; (80a00 <CPU3_D_INIT_PIO+0x118>)
   80970:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80972:	4b1d      	ldr	r3, [pc, #116]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   80974:	4a23      	ldr	r2, [pc, #140]	; (80a04 <CPU3_D_INIT_PIO+0x11c>)
   80976:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80978:	4b1b      	ldr	r3, [pc, #108]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   8097a:	4a23      	ldr	r2, [pc, #140]	; (80a08 <CPU3_D_INIT_PIO+0x120>)
   8097c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   8097e:	4b1a      	ldr	r3, [pc, #104]	; (809e8 <CPU3_D_INIT_PIO+0x100>)
   80980:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80984:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80986:	4b19      	ldr	r3, [pc, #100]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   80988:	4a20      	ldr	r2, [pc, #128]	; (80a0c <CPU3_D_INIT_PIO+0x124>)
   8098a:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   8098c:	4b17      	ldr	r3, [pc, #92]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   8098e:	4a20      	ldr	r2, [pc, #128]	; (80a10 <CPU3_D_INIT_PIO+0x128>)
   80990:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   80992:	4b16      	ldr	r3, [pc, #88]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   80994:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   80998:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   8099a:	4b14      	ldr	r3, [pc, #80]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   8099c:	4a1d      	ldr	r2, [pc, #116]	; (80a14 <CPU3_D_INIT_PIO+0x12c>)
   8099e:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   809a0:	4b12      	ldr	r3, [pc, #72]	; (809ec <CPU3_D_INIT_PIO+0x104>)
   809a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   809a6:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   809a8:	4b11      	ldr	r3, [pc, #68]	; (809f0 <CPU3_D_INIT_PIO+0x108>)
   809aa:	f641 6210 	movw	r2, #7696	; 0x1e10
   809ae:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   809b0:	4b0f      	ldr	r3, [pc, #60]	; (809f0 <CPU3_D_INIT_PIO+0x108>)
   809b2:	226f      	movs	r2, #111	; 0x6f
   809b4:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   809b6:	4b0e      	ldr	r3, [pc, #56]	; (809f0 <CPU3_D_INIT_PIO+0x108>)
   809b8:	220f      	movs	r2, #15
   809ba:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   809bc:	2001      	movs	r0, #1
   809be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809c2:	4b15      	ldr	r3, [pc, #84]	; (80a18 <CPU3_D_INIT_PIO+0x130>)
   809c4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   809c6:	2000      	movs	r0, #0
   809c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809cc:	4b12      	ldr	r3, [pc, #72]	; (80a18 <CPU3_D_INIT_PIO+0x130>)
   809ce:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   809d0:	2003      	movs	r0, #3
   809d2:	4912      	ldr	r1, [pc, #72]	; (80a1c <CPU3_D_INIT_PIO+0x134>)
   809d4:	4b10      	ldr	r3, [pc, #64]	; (80a18 <CPU3_D_INIT_PIO+0x130>)
   809d6:	4798      	blx	r3





}
   809d8:	bd80      	pop	{r7, pc}
   809da:	bf00      	nop
   809dc:	00083265 	.word	0x00083265
   809e0:	400e0e00 	.word	0x400e0e00
   809e4:	50494f00 	.word	0x50494f00
   809e8:	400e1000 	.word	0x400e1000
   809ec:	400e1200 	.word	0x400e1200
   809f0:	400e1400 	.word	0x400e1400
   809f4:	1f870343 	.word	0x1f870343
   809f8:	0018c004 	.word	0x0018c004
   809fc:	00180004 	.word	0x00180004
   80a00:	08204000 	.word	0x08204000
   80a04:	f01800ff 	.word	0xf01800ff
   80a08:	06204000 	.word	0x06204000
   80a0c:	0d8ff1fe 	.word	0x0d8ff1fe
   80a10:	008ff1fe 	.word	0x008ff1fe
   80a14:	060ff1fe 	.word	0x060ff1fe
   80a18:	00082cc9 	.word	0x00082cc9
   80a1c:	30000001 	.word	0x30000001

00080a20 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80a20:	b480      	push	{r7}
   80a22:	b083      	sub	sp, #12
   80a24:	af00      	add	r7, sp, #0
   80a26:	4603      	mov	r3, r0
   80a28:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80a2a:	4909      	ldr	r1, [pc, #36]	; (80a50 <NVIC_ClearPendingIRQ+0x30>)
   80a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80a30:	095b      	lsrs	r3, r3, #5
   80a32:	79fa      	ldrb	r2, [r7, #7]
   80a34:	f002 021f 	and.w	r2, r2, #31
   80a38:	2001      	movs	r0, #1
   80a3a:	fa00 f202 	lsl.w	r2, r0, r2
   80a3e:	3360      	adds	r3, #96	; 0x60
   80a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80a44:	370c      	adds	r7, #12
   80a46:	46bd      	mov	sp, r7
   80a48:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop
   80a50:	e000e100 	.word	0xe000e100

00080a54 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80a54:	b580      	push	{r7, lr}
   80a56:	af00      	add	r7, sp, #0
	PIOD->PIO_WPMR	= 0x50494F00;
   80a58:	4b2b      	ldr	r3, [pc, #172]	; (80b08 <TC0_Handler+0xb4>)
   80a5a:	4a2c      	ldr	r2, [pc, #176]	; (80b0c <TC0_Handler+0xb8>)
   80a5c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80a60:	4b2b      	ldr	r3, [pc, #172]	; (80b10 <TC0_Handler+0xbc>)
   80a62:	4a2a      	ldr	r2, [pc, #168]	; (80b0c <TC0_Handler+0xb8>)
   80a64:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80a68:	4b27      	ldr	r3, [pc, #156]	; (80b08 <TC0_Handler+0xb4>)
   80a6a:	2203      	movs	r2, #3
   80a6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80a70:	4b25      	ldr	r3, [pc, #148]	; (80b08 <TC0_Handler+0xb4>)
   80a72:	220c      	movs	r2, #12
   80a74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80a78:	4b25      	ldr	r3, [pc, #148]	; (80b10 <TC0_Handler+0xbc>)
   80a7a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80a7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80a82:	4b23      	ldr	r3, [pc, #140]	; (80b10 <TC0_Handler+0xbc>)
   80a84:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80a88:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80a8c:	4b21      	ldr	r3, [pc, #132]	; (80b14 <TC0_Handler+0xc0>)
   80a8e:	681b      	ldr	r3, [r3, #0]
   80a90:	3301      	adds	r3, #1
   80a92:	4a20      	ldr	r2, [pc, #128]	; (80b14 <TC0_Handler+0xc0>)
   80a94:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80a96:	4b20      	ldr	r3, [pc, #128]	; (80b18 <TC0_Handler+0xc4>)
   80a98:	681b      	ldr	r3, [r3, #0]
   80a9a:	3301      	adds	r3, #1
   80a9c:	4a1e      	ldr	r2, [pc, #120]	; (80b18 <TC0_Handler+0xc4>)
   80a9e:	6013      	str	r3, [r2, #0]
   Cnt_TC0_total++;
   80aa0:	4b1e      	ldr	r3, [pc, #120]	; (80b1c <TC0_Handler+0xc8>)
   80aa2:	681b      	ldr	r3, [r3, #0]
   80aa4:	3301      	adds	r3, #1
   80aa6:	4a1d      	ldr	r2, [pc, #116]	; (80b1c <TC0_Handler+0xc8>)
   80aa8:	6013      	str	r3, [r2, #0]
	
	if(count<64)
   80aaa:	4b1a      	ldr	r3, [pc, #104]	; (80b14 <TC0_Handler+0xc0>)
   80aac:	681b      	ldr	r3, [r3, #0]
   80aae:	2b3f      	cmp	r3, #63	; 0x3f
   80ab0:	d80e      	bhi.n	80ad0 <TC0_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ab2:	4a15      	ldr	r2, [pc, #84]	; (80b08 <TC0_Handler+0xb4>)
   80ab4:	4b17      	ldr	r3, [pc, #92]	; (80b14 <TC0_Handler+0xc0>)
   80ab6:	681b      	ldr	r3, [r3, #0]
   80ab8:	4919      	ldr	r1, [pc, #100]	; (80b20 <TC0_Handler+0xcc>)
   80aba:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80abe:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80ac0:	4a13      	ldr	r2, [pc, #76]	; (80b10 <TC0_Handler+0xbc>)
   80ac2:	4b14      	ldr	r3, [pc, #80]	; (80b14 <TC0_Handler+0xc0>)
   80ac4:	681b      	ldr	r3, [r3, #0]
   80ac6:	4916      	ldr	r1, [pc, #88]	; (80b20 <TC0_Handler+0xcc>)
   80ac8:	00db      	lsls	r3, r3, #3
   80aca:	440b      	add	r3, r1
   80acc:	685b      	ldr	r3, [r3, #4]
   80ace:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80ad0:	4b10      	ldr	r3, [pc, #64]	; (80b14 <TC0_Handler+0xc0>)
   80ad2:	681b      	ldr	r3, [r3, #0]
   80ad4:	2b3f      	cmp	r3, #63	; 0x3f
   80ad6:	d911      	bls.n	80afc <TC0_Handler+0xa8>
	{
		count = 0;
   80ad8:	4b0e      	ldr	r3, [pc, #56]	; (80b14 <TC0_Handler+0xc0>)
   80ada:	2200      	movs	r2, #0
   80adc:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ade:	4a0a      	ldr	r2, [pc, #40]	; (80b08 <TC0_Handler+0xb4>)
   80ae0:	4b0c      	ldr	r3, [pc, #48]	; (80b14 <TC0_Handler+0xc0>)
   80ae2:	681b      	ldr	r3, [r3, #0]
   80ae4:	490e      	ldr	r1, [pc, #56]	; (80b20 <TC0_Handler+0xcc>)
   80ae6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80aea:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80aec:	4a08      	ldr	r2, [pc, #32]	; (80b10 <TC0_Handler+0xbc>)
   80aee:	4b09      	ldr	r3, [pc, #36]	; (80b14 <TC0_Handler+0xc0>)
   80af0:	681b      	ldr	r3, [r3, #0]
   80af2:	490b      	ldr	r1, [pc, #44]	; (80b20 <TC0_Handler+0xcc>)
   80af4:	00db      	lsls	r3, r3, #3
   80af6:	440b      	add	r3, r1
   80af8:	685b      	ldr	r3, [r3, #4]
   80afa:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80afc:	4809      	ldr	r0, [pc, #36]	; (80b24 <TC0_Handler+0xd0>)
   80afe:	2100      	movs	r1, #0
   80b00:	4b09      	ldr	r3, [pc, #36]	; (80b28 <TC0_Handler+0xd4>)
   80b02:	4798      	blx	r3
	{
	
	}
}
   80b04:	bd80      	pop	{r7, pc}
   80b06:	bf00      	nop
   80b08:	400e1400 	.word	0x400e1400
   80b0c:	50494f00 	.word	0x50494f00
   80b10:	400e1200 	.word	0x400e1200
   80b14:	20070ccc 	.word	0x20070ccc
   80b18:	20070ca0 	.word	0x20070ca0
   80b1c:	20070ca8 	.word	0x20070ca8
   80b20:	20070000 	.word	0x20070000
   80b24:	40080000 	.word	0x40080000
   80b28:	00081461 	.word	0x00081461

00080b2c <TC1_Handler>:

void TC1_Handler()
{	PIOD->PIO_WPMR	= 0x50494F00;
   80b2c:	b580      	push	{r7, lr}
   80b2e:	af00      	add	r7, sp, #0
   80b30:	4b2b      	ldr	r3, [pc, #172]	; (80be0 <TC1_Handler+0xb4>)
   80b32:	4a2c      	ldr	r2, [pc, #176]	; (80be4 <TC1_Handler+0xb8>)
   80b34:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80b38:	4b2b      	ldr	r3, [pc, #172]	; (80be8 <TC1_Handler+0xbc>)
   80b3a:	4a2a      	ldr	r2, [pc, #168]	; (80be4 <TC1_Handler+0xb8>)
   80b3c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80b40:	4b27      	ldr	r3, [pc, #156]	; (80be0 <TC1_Handler+0xb4>)
   80b42:	220c      	movs	r2, #12
   80b44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80b48:	4b25      	ldr	r3, [pc, #148]	; (80be0 <TC1_Handler+0xb4>)
   80b4a:	2203      	movs	r2, #3
   80b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80b50:	4b25      	ldr	r3, [pc, #148]	; (80be8 <TC1_Handler+0xbc>)
   80b52:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80b56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80b5a:	4b23      	ldr	r3, [pc, #140]	; (80be8 <TC1_Handler+0xbc>)
   80b5c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80b60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80b64:	4b21      	ldr	r3, [pc, #132]	; (80bec <TC1_Handler+0xc0>)
   80b66:	681b      	ldr	r3, [r3, #0]
   80b68:	3301      	adds	r3, #1
   80b6a:	4a20      	ldr	r2, [pc, #128]	; (80bec <TC1_Handler+0xc0>)
   80b6c:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80b6e:	4b20      	ldr	r3, [pc, #128]	; (80bf0 <TC1_Handler+0xc4>)
   80b70:	681b      	ldr	r3, [r3, #0]
   80b72:	3301      	adds	r3, #1
   80b74:	4a1e      	ldr	r2, [pc, #120]	; (80bf0 <TC1_Handler+0xc4>)
   80b76:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80b78:	4b1e      	ldr	r3, [pc, #120]	; (80bf4 <TC1_Handler+0xc8>)
   80b7a:	681b      	ldr	r3, [r3, #0]
   80b7c:	3301      	adds	r3, #1
   80b7e:	4a1d      	ldr	r2, [pc, #116]	; (80bf4 <TC1_Handler+0xc8>)
   80b80:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80b82:	4b1a      	ldr	r3, [pc, #104]	; (80bec <TC1_Handler+0xc0>)
   80b84:	681b      	ldr	r3, [r3, #0]
   80b86:	2b3f      	cmp	r3, #63	; 0x3f
   80b88:	d80e      	bhi.n	80ba8 <TC1_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80b8a:	4a15      	ldr	r2, [pc, #84]	; (80be0 <TC1_Handler+0xb4>)
   80b8c:	4b17      	ldr	r3, [pc, #92]	; (80bec <TC1_Handler+0xc0>)
   80b8e:	681b      	ldr	r3, [r3, #0]
   80b90:	4919      	ldr	r1, [pc, #100]	; (80bf8 <TC1_Handler+0xcc>)
   80b92:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80b96:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80b98:	4a13      	ldr	r2, [pc, #76]	; (80be8 <TC1_Handler+0xbc>)
   80b9a:	4b14      	ldr	r3, [pc, #80]	; (80bec <TC1_Handler+0xc0>)
   80b9c:	681b      	ldr	r3, [r3, #0]
   80b9e:	4916      	ldr	r1, [pc, #88]	; (80bf8 <TC1_Handler+0xcc>)
   80ba0:	00db      	lsls	r3, r3, #3
   80ba2:	440b      	add	r3, r1
   80ba4:	685b      	ldr	r3, [r3, #4]
   80ba6:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80ba8:	4b10      	ldr	r3, [pc, #64]	; (80bec <TC1_Handler+0xc0>)
   80baa:	681b      	ldr	r3, [r3, #0]
   80bac:	2b3f      	cmp	r3, #63	; 0x3f
   80bae:	d911      	bls.n	80bd4 <TC1_Handler+0xa8>
	{
		count1 = 0;
   80bb0:	4b0e      	ldr	r3, [pc, #56]	; (80bec <TC1_Handler+0xc0>)
   80bb2:	2200      	movs	r2, #0
   80bb4:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80bb6:	4a0a      	ldr	r2, [pc, #40]	; (80be0 <TC1_Handler+0xb4>)
   80bb8:	4b0c      	ldr	r3, [pc, #48]	; (80bec <TC1_Handler+0xc0>)
   80bba:	681b      	ldr	r3, [r3, #0]
   80bbc:	490e      	ldr	r1, [pc, #56]	; (80bf8 <TC1_Handler+0xcc>)
   80bbe:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80bc2:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80bc4:	4a08      	ldr	r2, [pc, #32]	; (80be8 <TC1_Handler+0xbc>)
   80bc6:	4b09      	ldr	r3, [pc, #36]	; (80bec <TC1_Handler+0xc0>)
   80bc8:	681b      	ldr	r3, [r3, #0]
   80bca:	490b      	ldr	r1, [pc, #44]	; (80bf8 <TC1_Handler+0xcc>)
   80bcc:	00db      	lsls	r3, r3, #3
   80bce:	440b      	add	r3, r1
   80bd0:	685b      	ldr	r3, [r3, #4]
   80bd2:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80bd4:	4809      	ldr	r0, [pc, #36]	; (80bfc <TC1_Handler+0xd0>)
   80bd6:	2101      	movs	r1, #1
   80bd8:	4b09      	ldr	r3, [pc, #36]	; (80c00 <TC1_Handler+0xd4>)
   80bda:	4798      	blx	r3
	{
		
		
	}
}
   80bdc:	bd80      	pop	{r7, pc}
   80bde:	bf00      	nop
   80be0:	400e1400 	.word	0x400e1400
   80be4:	50494f00 	.word	0x50494f00
   80be8:	400e1200 	.word	0x400e1200
   80bec:	20070cd0 	.word	0x20070cd0
   80bf0:	20070ca4 	.word	0x20070ca4
   80bf4:	20070cac 	.word	0x20070cac
   80bf8:	20070200 	.word	0x20070200
   80bfc:	40080000 	.word	0x40080000
   80c00:	00081461 	.word	0x00081461

00080c04 <TC2_Handler>:
void TC2_Handler()
{
   80c04:	b580      	push	{r7, lr}
   80c06:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80c08:	4807      	ldr	r0, [pc, #28]	; (80c28 <TC2_Handler+0x24>)
   80c0a:	2100      	movs	r1, #0
   80c0c:	4b07      	ldr	r3, [pc, #28]	; (80c2c <TC2_Handler+0x28>)
   80c0e:	4798      	blx	r3
	tc_stop(TC0,1);
   80c10:	4805      	ldr	r0, [pc, #20]	; (80c28 <TC2_Handler+0x24>)
   80c12:	2101      	movs	r1, #1
   80c14:	4b05      	ldr	r3, [pc, #20]	; (80c2c <TC2_Handler+0x28>)
   80c16:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80c18:	4b05      	ldr	r3, [pc, #20]	; (80c30 <TC2_Handler+0x2c>)
   80c1a:	2200      	movs	r2, #0
   80c1c:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80c1e:	4802      	ldr	r0, [pc, #8]	; (80c28 <TC2_Handler+0x24>)
   80c20:	2102      	movs	r1, #2
   80c22:	4b04      	ldr	r3, [pc, #16]	; (80c34 <TC2_Handler+0x30>)
   80c24:	4798      	blx	r3
	{
		
	}
}
   80c26:	bd80      	pop	{r7, pc}
   80c28:	40080000 	.word	0x40080000
   80c2c:	000813f5 	.word	0x000813f5
   80c30:	20070c9c 	.word	0x20070c9c
   80c34:	00081461 	.word	0x00081461

00080c38 <TC3_Handler>:
void TC3_Handler()
{
   80c38:	b580      	push	{r7, lr}
   80c3a:	af00      	add	r7, sp, #0
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80c3c:	4802      	ldr	r0, [pc, #8]	; (80c48 <TC3_Handler+0x10>)
   80c3e:	2100      	movs	r1, #0
   80c40:	4b02      	ldr	r3, [pc, #8]	; (80c4c <TC3_Handler+0x14>)
   80c42:	4798      	blx	r3
	{
		
	}
}
   80c44:	bd80      	pop	{r7, pc}
   80c46:	bf00      	nop
   80c48:	40084000 	.word	0x40084000
   80c4c:	00081461 	.word	0x00081461

00080c50 <TC4_Handler>:

void TC4_Handler(){
   80c50:	b580      	push	{r7, lr}
   80c52:	af00      	add	r7, sp, #0
	
	OneSecFlag = 1;
   80c54:	4b03      	ldr	r3, [pc, #12]	; (80c64 <TC4_Handler+0x14>)
   80c56:	2201      	movs	r2, #1
   80c58:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC0, 4) & TC_SR_CPCS) == TC_SR_CPCS)
   80c5a:	4803      	ldr	r0, [pc, #12]	; (80c68 <TC4_Handler+0x18>)
   80c5c:	2104      	movs	r1, #4
   80c5e:	4b03      	ldr	r3, [pc, #12]	; (80c6c <TC4_Handler+0x1c>)
   80c60:	4798      	blx	r3
	{
		
	}
	
}
   80c62:	bd80      	pop	{r7, pc}
   80c64:	20070cb0 	.word	0x20070cb0
   80c68:	40080000 	.word	0x40080000
   80c6c:	00081461 	.word	0x00081461

00080c70 <TC6_Handler>:

void TC6_Handler()
{
   80c70:	b580      	push	{r7, lr}
   80c72:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80c74:	2021      	movs	r0, #33	; 0x21
   80c76:	4b29      	ldr	r3, [pc, #164]	; (80d1c <TC6_Handler+0xac>)
   80c78:	4798      	blx	r3
	tick++;
   80c7a:	4b29      	ldr	r3, [pc, #164]	; (80d20 <TC6_Handler+0xb0>)
   80c7c:	681b      	ldr	r3, [r3, #0]
   80c7e:	3301      	adds	r3, #1
   80c80:	4a27      	ldr	r2, [pc, #156]	; (80d20 <TC6_Handler+0xb0>)
   80c82:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80c84:	4b26      	ldr	r3, [pc, #152]	; (80d20 <TC6_Handler+0xb0>)
   80c86:	681b      	ldr	r3, [r3, #0]
   80c88:	2b0a      	cmp	r3, #10
   80c8a:	d10a      	bne.n	80ca2 <TC6_Handler+0x32>
	{
		tick_10++;
   80c8c:	4b25      	ldr	r3, [pc, #148]	; (80d24 <TC6_Handler+0xb4>)
   80c8e:	681b      	ldr	r3, [r3, #0]
   80c90:	3301      	adds	r3, #1
   80c92:	4a24      	ldr	r2, [pc, #144]	; (80d24 <TC6_Handler+0xb4>)
   80c94:	6013      	str	r3, [r2, #0]
		tick = 0;
   80c96:	4b22      	ldr	r3, [pc, #136]	; (80d20 <TC6_Handler+0xb0>)
   80c98:	2200      	movs	r2, #0
   80c9a:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80c9c:	4b22      	ldr	r3, [pc, #136]	; (80d28 <TC6_Handler+0xb8>)
   80c9e:	2200      	movs	r2, #0
   80ca0:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80ca2:	4b20      	ldr	r3, [pc, #128]	; (80d24 <TC6_Handler+0xb4>)
   80ca4:	681b      	ldr	r3, [r3, #0]
   80ca6:	2b05      	cmp	r3, #5
   80ca8:	d10a      	bne.n	80cc0 <TC6_Handler+0x50>
	{
		tick_50++;
   80caa:	4b20      	ldr	r3, [pc, #128]	; (80d2c <TC6_Handler+0xbc>)
   80cac:	681b      	ldr	r3, [r3, #0]
   80cae:	3301      	adds	r3, #1
   80cb0:	4a1e      	ldr	r2, [pc, #120]	; (80d2c <TC6_Handler+0xbc>)
   80cb2:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80cb4:	4b1b      	ldr	r3, [pc, #108]	; (80d24 <TC6_Handler+0xb4>)
   80cb6:	2200      	movs	r2, #0
   80cb8:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80cba:	4b1b      	ldr	r3, [pc, #108]	; (80d28 <TC6_Handler+0xb8>)
   80cbc:	2201      	movs	r2, #1
   80cbe:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80cc0:	4b1a      	ldr	r3, [pc, #104]	; (80d2c <TC6_Handler+0xbc>)
   80cc2:	681b      	ldr	r3, [r3, #0]
   80cc4:	2b02      	cmp	r3, #2
   80cc6:	d10a      	bne.n	80cde <TC6_Handler+0x6e>
	{
		tick_100++;
   80cc8:	4b19      	ldr	r3, [pc, #100]	; (80d30 <TC6_Handler+0xc0>)
   80cca:	681b      	ldr	r3, [r3, #0]
   80ccc:	3301      	adds	r3, #1
   80cce:	4a18      	ldr	r2, [pc, #96]	; (80d30 <TC6_Handler+0xc0>)
   80cd0:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80cd2:	4b16      	ldr	r3, [pc, #88]	; (80d2c <TC6_Handler+0xbc>)
   80cd4:	2200      	movs	r2, #0
   80cd6:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80cd8:	4b13      	ldr	r3, [pc, #76]	; (80d28 <TC6_Handler+0xb8>)
   80cda:	2202      	movs	r2, #2
   80cdc:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80cde:	4b14      	ldr	r3, [pc, #80]	; (80d30 <TC6_Handler+0xc0>)
   80ce0:	681b      	ldr	r3, [r3, #0]
   80ce2:	2b05      	cmp	r3, #5
   80ce4:	d10a      	bne.n	80cfc <TC6_Handler+0x8c>
	{
		tick_500++;
   80ce6:	4b13      	ldr	r3, [pc, #76]	; (80d34 <TC6_Handler+0xc4>)
   80ce8:	681b      	ldr	r3, [r3, #0]
   80cea:	3301      	adds	r3, #1
   80cec:	4a11      	ldr	r2, [pc, #68]	; (80d34 <TC6_Handler+0xc4>)
   80cee:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80cf0:	4b0f      	ldr	r3, [pc, #60]	; (80d30 <TC6_Handler+0xc0>)
   80cf2:	2200      	movs	r2, #0
   80cf4:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80cf6:	4b0c      	ldr	r3, [pc, #48]	; (80d28 <TC6_Handler+0xb8>)
   80cf8:	2203      	movs	r2, #3
   80cfa:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80cfc:	4b0d      	ldr	r3, [pc, #52]	; (80d34 <TC6_Handler+0xc4>)
   80cfe:	681b      	ldr	r3, [r3, #0]
   80d00:	2b02      	cmp	r3, #2
   80d02:	d105      	bne.n	80d10 <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80d04:	4b0b      	ldr	r3, [pc, #44]	; (80d34 <TC6_Handler+0xc4>)
   80d06:	2200      	movs	r2, #0
   80d08:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80d0a:	4b07      	ldr	r3, [pc, #28]	; (80d28 <TC6_Handler+0xb8>)
   80d0c:	2204      	movs	r2, #4
   80d0e:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80d10:	4809      	ldr	r0, [pc, #36]	; (80d38 <TC6_Handler+0xc8>)
   80d12:	2100      	movs	r1, #0
   80d14:	4b09      	ldr	r3, [pc, #36]	; (80d3c <TC6_Handler+0xcc>)
   80d16:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80d18:	bd80      	pop	{r7, pc}
   80d1a:	bf00      	nop
   80d1c:	00080a21 	.word	0x00080a21
   80d20:	20070cb4 	.word	0x20070cb4
   80d24:	20070cb8 	.word	0x20070cb8
   80d28:	200711ec 	.word	0x200711ec
   80d2c:	20070cbc 	.word	0x20070cbc
   80d30:	20070cc0 	.word	0x20070cc0
   80d34:	20070cc4 	.word	0x20070cc4
   80d38:	40088000 	.word	0x40088000
   80d3c:	00081461 	.word	0x00081461

00080d40 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80d40:	b480      	push	{r7}
   80d42:	b083      	sub	sp, #12
   80d44:	af00      	add	r7, sp, #0
   80d46:	4603      	mov	r3, r0
   80d48:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80d4a:	4908      	ldr	r1, [pc, #32]	; (80d6c <NVIC_EnableIRQ+0x2c>)
   80d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d50:	095b      	lsrs	r3, r3, #5
   80d52:	79fa      	ldrb	r2, [r7, #7]
   80d54:	f002 021f 	and.w	r2, r2, #31
   80d58:	2001      	movs	r0, #1
   80d5a:	fa00 f202 	lsl.w	r2, r0, r2
   80d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d62:	370c      	adds	r7, #12
   80d64:	46bd      	mov	sp, r7
   80d66:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d6a:	4770      	bx	lr
   80d6c:	e000e100 	.word	0xe000e100

00080d70 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80d70:	b480      	push	{r7}
   80d72:	b083      	sub	sp, #12
   80d74:	af00      	add	r7, sp, #0
   80d76:	4603      	mov	r3, r0
   80d78:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80d7a:	4909      	ldr	r1, [pc, #36]	; (80da0 <NVIC_DisableIRQ+0x30>)
   80d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d80:	095b      	lsrs	r3, r3, #5
   80d82:	79fa      	ldrb	r2, [r7, #7]
   80d84:	f002 021f 	and.w	r2, r2, #31
   80d88:	2001      	movs	r0, #1
   80d8a:	fa00 f202 	lsl.w	r2, r0, r2
   80d8e:	3320      	adds	r3, #32
   80d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d94:	370c      	adds	r7, #12
   80d96:	46bd      	mov	sp, r7
   80d98:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d9c:	4770      	bx	lr
   80d9e:	bf00      	nop
   80da0:	e000e100 	.word	0xe000e100

00080da4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80da4:	b480      	push	{r7}
   80da6:	b083      	sub	sp, #12
   80da8:	af00      	add	r7, sp, #0
   80daa:	4603      	mov	r3, r0
   80dac:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80dae:	4909      	ldr	r1, [pc, #36]	; (80dd4 <NVIC_ClearPendingIRQ+0x30>)
   80db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80db4:	095b      	lsrs	r3, r3, #5
   80db6:	79fa      	ldrb	r2, [r7, #7]
   80db8:	f002 021f 	and.w	r2, r2, #31
   80dbc:	2001      	movs	r0, #1
   80dbe:	fa00 f202 	lsl.w	r2, r0, r2
   80dc2:	3360      	adds	r3, #96	; 0x60
   80dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80dc8:	370c      	adds	r7, #12
   80dca:	46bd      	mov	sp, r7
   80dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dd0:	4770      	bx	lr
   80dd2:	bf00      	nop
   80dd4:	e000e100 	.word	0xe000e100

00080dd8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   80dd8:	b480      	push	{r7}
   80dda:	b083      	sub	sp, #12
   80ddc:	af00      	add	r7, sp, #0
   80dde:	4603      	mov	r3, r0
   80de0:	6039      	str	r1, [r7, #0]
   80de2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   80de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80de8:	2b00      	cmp	r3, #0
   80dea:	da0b      	bge.n	80e04 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80dec:	490d      	ldr	r1, [pc, #52]	; (80e24 <NVIC_SetPriority+0x4c>)
   80dee:	79fb      	ldrb	r3, [r7, #7]
   80df0:	f003 030f 	and.w	r3, r3, #15
   80df4:	3b04      	subs	r3, #4
   80df6:	683a      	ldr	r2, [r7, #0]
   80df8:	b2d2      	uxtb	r2, r2
   80dfa:	0112      	lsls	r2, r2, #4
   80dfc:	b2d2      	uxtb	r2, r2
   80dfe:	440b      	add	r3, r1
   80e00:	761a      	strb	r2, [r3, #24]
   80e02:	e009      	b.n	80e18 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80e04:	4908      	ldr	r1, [pc, #32]	; (80e28 <NVIC_SetPriority+0x50>)
   80e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80e0a:	683a      	ldr	r2, [r7, #0]
   80e0c:	b2d2      	uxtb	r2, r2
   80e0e:	0112      	lsls	r2, r2, #4
   80e10:	b2d2      	uxtb	r2, r2
   80e12:	440b      	add	r3, r1
   80e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   80e18:	370c      	adds	r7, #12
   80e1a:	46bd      	mov	sp, r7
   80e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e20:	4770      	bx	lr
   80e22:	bf00      	nop
   80e24:	e000ed00 	.word	0xe000ed00
   80e28:	e000e100 	.word	0xe000e100

00080e2c <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   80e2c:	b580      	push	{r7, lr}
   80e2e:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   80e30:	2016      	movs	r0, #22
   80e32:	4b31      	ldr	r3, [pc, #196]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80e34:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   80e36:	2016      	movs	r0, #22
   80e38:	4b30      	ldr	r3, [pc, #192]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80e3a:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   80e3c:	2016      	movs	r0, #22
   80e3e:	2100      	movs	r1, #0
   80e40:	4b2f      	ldr	r3, [pc, #188]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80e42:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   80e44:	2016      	movs	r0, #22
   80e46:	4b2f      	ldr	r3, [pc, #188]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80e48:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   80e4a:	2008      	movs	r0, #8
   80e4c:	4b2a      	ldr	r3, [pc, #168]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80e4e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   80e50:	2008      	movs	r0, #8
   80e52:	4b2a      	ldr	r3, [pc, #168]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80e54:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   80e56:	2008      	movs	r0, #8
   80e58:	2100      	movs	r1, #0
   80e5a:	4b29      	ldr	r3, [pc, #164]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80e5c:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   80e5e:	2008      	movs	r0, #8
   80e60:	4b28      	ldr	r3, [pc, #160]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80e62:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   80e64:	4828      	ldr	r0, [pc, #160]	; (80f08 <CPU3_D_INIT_INT+0xdc>)
   80e66:	2101      	movs	r1, #1
   80e68:	4b28      	ldr	r3, [pc, #160]	; (80f0c <CPU3_D_INIT_INT+0xe0>)
   80e6a:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   80e6c:	201b      	movs	r0, #27
   80e6e:	4b22      	ldr	r3, [pc, #136]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80e70:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   80e72:	201b      	movs	r0, #27
   80e74:	4b21      	ldr	r3, [pc, #132]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80e76:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   80e78:	201b      	movs	r0, #27
   80e7a:	2100      	movs	r1, #0
   80e7c:	4b20      	ldr	r3, [pc, #128]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80e7e:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   80e80:	201b      	movs	r0, #27
   80e82:	4b20      	ldr	r3, [pc, #128]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80e84:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   80e86:	201c      	movs	r0, #28
   80e88:	4b1b      	ldr	r3, [pc, #108]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80e8a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   80e8c:	201c      	movs	r0, #28
   80e8e:	4b1b      	ldr	r3, [pc, #108]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80e90:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   80e92:	201c      	movs	r0, #28
   80e94:	2100      	movs	r1, #0
   80e96:	4b1a      	ldr	r3, [pc, #104]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80e98:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   80e9a:	201c      	movs	r0, #28
   80e9c:	4b19      	ldr	r3, [pc, #100]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80e9e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   80ea0:	201d      	movs	r0, #29
   80ea2:	4b15      	ldr	r3, [pc, #84]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80ea4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   80ea6:	201d      	movs	r0, #29
   80ea8:	4b14      	ldr	r3, [pc, #80]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80eaa:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   80eac:	201d      	movs	r0, #29
   80eae:	2100      	movs	r1, #0
   80eb0:	4b13      	ldr	r3, [pc, #76]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80eb2:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   80eb4:	201d      	movs	r0, #29
   80eb6:	4b13      	ldr	r3, [pc, #76]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80eb8:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   80eba:	201e      	movs	r0, #30
   80ebc:	4b0e      	ldr	r3, [pc, #56]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80ebe:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   80ec0:	201e      	movs	r0, #30
   80ec2:	4b0e      	ldr	r3, [pc, #56]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80ec4:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   80ec6:	201e      	movs	r0, #30
   80ec8:	2100      	movs	r1, #0
   80eca:	4b0d      	ldr	r3, [pc, #52]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80ecc:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   80ece:	201e      	movs	r0, #30
   80ed0:	4b0c      	ldr	r3, [pc, #48]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80ed2:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   80ed4:	2021      	movs	r0, #33	; 0x21
   80ed6:	4b08      	ldr	r3, [pc, #32]	; (80ef8 <CPU3_D_INIT_INT+0xcc>)
   80ed8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80eda:	2021      	movs	r0, #33	; 0x21
   80edc:	4b07      	ldr	r3, [pc, #28]	; (80efc <CPU3_D_INIT_INT+0xd0>)
   80ede:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   80ee0:	2021      	movs	r0, #33	; 0x21
   80ee2:	2100      	movs	r1, #0
   80ee4:	4b06      	ldr	r3, [pc, #24]	; (80f00 <CPU3_D_INIT_INT+0xd4>)
   80ee6:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   80ee8:	2021      	movs	r0, #33	; 0x21
   80eea:	4b06      	ldr	r3, [pc, #24]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80eec:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   80eee:	202b      	movs	r0, #43	; 0x2b
   80ef0:	4b04      	ldr	r3, [pc, #16]	; (80f04 <CPU3_D_INIT_INT+0xd8>)
   80ef2:	4798      	blx	r3
	
	
   80ef4:	bd80      	pop	{r7, pc}
   80ef6:	bf00      	nop
   80ef8:	00080d71 	.word	0x00080d71
   80efc:	00080da5 	.word	0x00080da5
   80f00:	00080dd9 	.word	0x00080dd9
   80f04:	00080d41 	.word	0x00080d41
   80f08:	400e0800 	.word	0x400e0800
   80f0c:	00081531 	.word	0x00081531

00080f10 <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   80f10:	b480      	push	{r7}
   80f12:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   80f14:	4b14      	ldr	r3, [pc, #80]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f16:	4a15      	ldr	r2, [pc, #84]	; (80f6c <CPU3_D_INIT_PWM+0x5c>)
   80f18:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f1c:	4b12      	ldr	r3, [pc, #72]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f1e:	4a14      	ldr	r2, [pc, #80]	; (80f70 <CPU3_D_INIT_PWM+0x60>)
   80f20:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f24:	4b10      	ldr	r3, [pc, #64]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f26:	4a12      	ldr	r2, [pc, #72]	; (80f70 <CPU3_D_INIT_PWM+0x60>)
   80f28:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   80f2c:	4b0e      	ldr	r3, [pc, #56]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f2e:	22ff      	movs	r2, #255	; 0xff
   80f30:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   80f32:	4b0d      	ldr	r3, [pc, #52]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f34:	f640 2241 	movw	r2, #2625	; 0xa41
   80f38:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80f3c:	4b0a      	ldr	r3, [pc, #40]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f42:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80f46:	4b08      	ldr	r3, [pc, #32]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f48:	f640 2241 	movw	r2, #2625	; 0xa41
   80f4c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80f50:	4b05      	ldr	r3, [pc, #20]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   80f5a:	4b03      	ldr	r3, [pc, #12]	; (80f68 <CPU3_D_INIT_PWM+0x58>)
   80f5c:	22ff      	movs	r2, #255	; 0xff
   80f5e:	605a      	str	r2, [r3, #4]
}
   80f60:	46bd      	mov	sp, r7
   80f62:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f66:	4770      	bx	lr
   80f68:	40094000 	.word	0x40094000
   80f6c:	50574d00 	.word	0x50574d00
   80f70:	00070605 	.word	0x00070605

00080f74 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   80f74:	b580      	push	{r7, lr}
   80f76:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   80f78:	4b1f      	ldr	r3, [pc, #124]	; (80ff8 <CPU3_D_INIT_TIMER+0x84>)
   80f7a:	4a20      	ldr	r2, [pc, #128]	; (80ffc <CPU3_D_INIT_TIMER+0x88>)
   80f7c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   80f80:	4b1f      	ldr	r3, [pc, #124]	; (81000 <CPU3_D_INIT_TIMER+0x8c>)
   80f82:	4a1e      	ldr	r2, [pc, #120]	; (80ffc <CPU3_D_INIT_TIMER+0x88>)
   80f84:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   80f88:	4b1e      	ldr	r3, [pc, #120]	; (81004 <CPU3_D_INIT_TIMER+0x90>)
   80f8a:	4a1c      	ldr	r2, [pc, #112]	; (80ffc <CPU3_D_INIT_TIMER+0x88>)
   80f8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   80f90:	201b      	movs	r0, #27
   80f92:	4b1d      	ldr	r3, [pc, #116]	; (81008 <CPU3_D_INIT_TIMER+0x94>)
   80f94:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   80f96:	201c      	movs	r0, #28
   80f98:	4b1b      	ldr	r3, [pc, #108]	; (81008 <CPU3_D_INIT_TIMER+0x94>)
   80f9a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   80f9c:	201e      	movs	r0, #30
   80f9e:	4b1a      	ldr	r3, [pc, #104]	; (81008 <CPU3_D_INIT_TIMER+0x94>)
   80fa0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC4);
   80fa2:	201f      	movs	r0, #31
   80fa4:	4b18      	ldr	r3, [pc, #96]	; (81008 <CPU3_D_INIT_TIMER+0x94>)
   80fa6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   80fa8:	2021      	movs	r0, #33	; 0x21
   80faa:	4b17      	ldr	r3, [pc, #92]	; (81008 <CPU3_D_INIT_TIMER+0x94>)
   80fac:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fae:	4b12      	ldr	r3, [pc, #72]	; (80ff8 <CPU3_D_INIT_TIMER+0x84>)
   80fb0:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fb4:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fb6:	4b10      	ldr	r3, [pc, #64]	; (80ff8 <CPU3_D_INIT_TIMER+0x84>)
   80fb8:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fbc:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fbe:	4b10      	ldr	r3, [pc, #64]	; (81000 <CPU3_D_INIT_TIMER+0x8c>)
   80fc0:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fc4:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fc6:	4b0e      	ldr	r3, [pc, #56]	; (81000 <CPU3_D_INIT_TIMER+0x8c>)
   80fc8:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fcc:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fce:	4b0d      	ldr	r3, [pc, #52]	; (81004 <CPU3_D_INIT_TIMER+0x90>)
   80fd0:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fd4:	605a      	str	r2, [r3, #4]
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fd6:	4b08      	ldr	r3, [pc, #32]	; (80ff8 <CPU3_D_INIT_TIMER+0x84>)
   80fd8:	2210      	movs	r2, #16
   80fda:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fdc:	4b06      	ldr	r3, [pc, #24]	; (80ff8 <CPU3_D_INIT_TIMER+0x84>)
   80fde:	2210      	movs	r2, #16
   80fe0:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fe2:	4b07      	ldr	r3, [pc, #28]	; (81000 <CPU3_D_INIT_TIMER+0x8c>)
   80fe4:	2210      	movs	r2, #16
   80fe6:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fe8:	4b05      	ldr	r3, [pc, #20]	; (81000 <CPU3_D_INIT_TIMER+0x8c>)
   80fea:	2210      	movs	r2, #16
   80fec:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fee:	4b05      	ldr	r3, [pc, #20]	; (81004 <CPU3_D_INIT_TIMER+0x90>)
   80ff0:	2210      	movs	r2, #16
   80ff2:	625a      	str	r2, [r3, #36]	; 0x24
}
   80ff4:	bd80      	pop	{r7, pc}
   80ff6:	bf00      	nop
   80ff8:	40080000 	.word	0x40080000
   80ffc:	54494d00 	.word	0x54494d00
   81000:	40084000 	.word	0x40084000
   81004:	40088000 	.word	0x40088000
   81008:	00083265 	.word	0x00083265

0008100c <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   8100c:	b580      	push	{r7, lr}
   8100e:	b084      	sub	sp, #16
   81010:	af00      	add	r7, sp, #0
   81012:	60f8      	str	r0, [r7, #12]
   81014:	60b9      	str	r1, [r7, #8]
   81016:	603b      	str	r3, [r7, #0]
   81018:	4613      	mov	r3, r2
   8101a:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   8101c:	2000      	movs	r0, #0
   8101e:	4b0d      	ldr	r3, [pc, #52]	; (81054 <CPU3_D_MAIN_TIMER+0x48>)
   81020:	4798      	blx	r3
	channel=0;
   81022:	2300      	movs	r3, #0
   81024:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81026:	4b0c      	ldr	r3, [pc, #48]	; (81058 <CPU3_D_MAIN_TIMER+0x4c>)
   81028:	f24c 0203 	movw	r2, #49155	; 0xc003
   8102c:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   8102e:	68f8      	ldr	r0, [r7, #12]
   81030:	68b9      	ldr	r1, [r7, #8]
   81032:	683a      	ldr	r2, [r7, #0]
   81034:	4b09      	ldr	r3, [pc, #36]	; (8105c <CPU3_D_MAIN_TIMER+0x50>)
   81036:	4798      	blx	r3
	tc_start(tc, channel);
   81038:	68f8      	ldr	r0, [r7, #12]
   8103a:	68b9      	ldr	r1, [r7, #8]
   8103c:	4b08      	ldr	r3, [pc, #32]	; (81060 <CPU3_D_MAIN_TIMER+0x54>)
   8103e:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   81040:	68f8      	ldr	r0, [r7, #12]
   81042:	68b9      	ldr	r1, [r7, #8]
   81044:	2210      	movs	r2, #16
   81046:	4b07      	ldr	r3, [pc, #28]	; (81064 <CPU3_D_MAIN_TIMER+0x58>)
   81048:	4798      	blx	r3
}
   8104a:	4618      	mov	r0, r3
   8104c:	3710      	adds	r7, #16
   8104e:	46bd      	mov	sp, r7
   81050:	bd80      	pop	{r7, pc}
   81052:	bf00      	nop
   81054:	000832e9 	.word	0x000832e9
   81058:	40088000 	.word	0x40088000
   8105c:	00081415 	.word	0x00081415
   81060:	000813d5 	.word	0x000813d5
   81064:	00081439 	.word	0x00081439

00081068 <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81068:	b580      	push	{r7, lr}
   8106a:	b084      	sub	sp, #16
   8106c:	af00      	add	r7, sp, #0
   8106e:	60f8      	str	r0, [r7, #12]
   81070:	60b9      	str	r1, [r7, #8]
   81072:	603b      	str	r3, [r7, #0]
   81074:	4613      	mov	r3, r2
   81076:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81078:	2000      	movs	r0, #0
   8107a:	4b10      	ldr	r3, [pc, #64]	; (810bc <acid_startTimer1+0x54>)
   8107c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   8107e:	201b      	movs	r0, #27
   81080:	4b0f      	ldr	r3, [pc, #60]	; (810c0 <acid_startTimer1+0x58>)
   81082:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81084:	68f8      	ldr	r0, [r7, #12]
   81086:	68b9      	ldr	r1, [r7, #8]
   81088:	f24c 0202 	movw	r2, #49154	; 0xc002
   8108c:	4b0d      	ldr	r3, [pc, #52]	; (810c4 <acid_startTimer1+0x5c>)
   8108e:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   81090:	4b0d      	ldr	r3, [pc, #52]	; (810c8 <acid_startTimer1+0x60>)
   81092:	f24c 0202 	movw	r2, #49154	; 0xc002
   81096:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81098:	68f8      	ldr	r0, [r7, #12]
   8109a:	68b9      	ldr	r1, [r7, #8]
   8109c:	683a      	ldr	r2, [r7, #0]
   8109e:	4b0b      	ldr	r3, [pc, #44]	; (810cc <acid_startTimer1+0x64>)
   810a0:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   810a2:	4809      	ldr	r0, [pc, #36]	; (810c8 <acid_startTimer1+0x60>)
   810a4:	2100      	movs	r1, #0
   810a6:	2210      	movs	r2, #16
   810a8:	4b09      	ldr	r3, [pc, #36]	; (810d0 <acid_startTimer1+0x68>)
   810aa:	4798      	blx	r3
	tc_start(tc, channel);
   810ac:	68f8      	ldr	r0, [r7, #12]
   810ae:	68b9      	ldr	r1, [r7, #8]
   810b0:	4b08      	ldr	r3, [pc, #32]	; (810d4 <acid_startTimer1+0x6c>)
   810b2:	4798      	blx	r3
}
   810b4:	3710      	adds	r7, #16
   810b6:	46bd      	mov	sp, r7
   810b8:	bd80      	pop	{r7, pc}
   810ba:	bf00      	nop
   810bc:	000832e9 	.word	0x000832e9
   810c0:	00083265 	.word	0x00083265
   810c4:	0008139d 	.word	0x0008139d
   810c8:	40080000 	.word	0x40080000
   810cc:	00081415 	.word	0x00081415
   810d0:	00081439 	.word	0x00081439
   810d4:	000813d5 	.word	0x000813d5

000810d8 <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   810d8:	b580      	push	{r7, lr}
   810da:	b084      	sub	sp, #16
   810dc:	af00      	add	r7, sp, #0
   810de:	60f8      	str	r0, [r7, #12]
   810e0:	60b9      	str	r1, [r7, #8]
   810e2:	603b      	str	r3, [r7, #0]
   810e4:	4613      	mov	r3, r2
   810e6:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   810e8:	2000      	movs	r0, #0
   810ea:	4b10      	ldr	r3, [pc, #64]	; (8112c <bicar_startTimer1+0x54>)
   810ec:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   810ee:	201c      	movs	r0, #28
   810f0:	4b0f      	ldr	r3, [pc, #60]	; (81130 <bicar_startTimer1+0x58>)
   810f2:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   810f4:	68f8      	ldr	r0, [r7, #12]
   810f6:	68b9      	ldr	r1, [r7, #8]
   810f8:	f24c 0202 	movw	r2, #49154	; 0xc002
   810fc:	4b0d      	ldr	r3, [pc, #52]	; (81134 <bicar_startTimer1+0x5c>)
   810fe:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   81100:	4b0d      	ldr	r3, [pc, #52]	; (81138 <bicar_startTimer1+0x60>)
   81102:	f24c 0202 	movw	r2, #49154	; 0xc002
   81106:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   81108:	68f8      	ldr	r0, [r7, #12]
   8110a:	68b9      	ldr	r1, [r7, #8]
   8110c:	683a      	ldr	r2, [r7, #0]
   8110e:	4b0b      	ldr	r3, [pc, #44]	; (8113c <bicar_startTimer1+0x64>)
   81110:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   81112:	4809      	ldr	r0, [pc, #36]	; (81138 <bicar_startTimer1+0x60>)
   81114:	2101      	movs	r1, #1
   81116:	2210      	movs	r2, #16
   81118:	4b09      	ldr	r3, [pc, #36]	; (81140 <bicar_startTimer1+0x68>)
   8111a:	4798      	blx	r3
	tc_start(tc, channel);
   8111c:	68f8      	ldr	r0, [r7, #12]
   8111e:	68b9      	ldr	r1, [r7, #8]
   81120:	4b08      	ldr	r3, [pc, #32]	; (81144 <bicar_startTimer1+0x6c>)
   81122:	4798      	blx	r3
}
   81124:	3710      	adds	r7, #16
   81126:	46bd      	mov	sp, r7
   81128:	bd80      	pop	{r7, pc}
   8112a:	bf00      	nop
   8112c:	000832e9 	.word	0x000832e9
   81130:	00083265 	.word	0x00083265
   81134:	0008139d 	.word	0x0008139d
   81138:	40080000 	.word	0x40080000
   8113c:	00081415 	.word	0x00081415
   81140:	00081439 	.word	0x00081439
   81144:	000813d5 	.word	0x000813d5

00081148 <startTimerSec>:

//
void startTimerSec(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81148:	b580      	push	{r7, lr}
   8114a:	b084      	sub	sp, #16
   8114c:	af00      	add	r7, sp, #0
   8114e:	60f8      	str	r0, [r7, #12]
   81150:	60b9      	str	r1, [r7, #8]
   81152:	603b      	str	r3, [r7, #0]
   81154:	4613      	mov	r3, r2
   81156:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81158:	2000      	movs	r0, #0
   8115a:	4b10      	ldr	r3, [pc, #64]	; (8119c <startTimerSec+0x54>)
   8115c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC4);
   8115e:	201f      	movs	r0, #31
   81160:	4b0f      	ldr	r3, [pc, #60]	; (811a0 <startTimerSec+0x58>)
   81162:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81164:	68f8      	ldr	r0, [r7, #12]
   81166:	68b9      	ldr	r1, [r7, #8]
   81168:	f24c 0203 	movw	r2, #49155	; 0xc003
   8116c:	4b0d      	ldr	r3, [pc, #52]	; (811a4 <startTimerSec+0x5c>)
   8116e:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81170:	4b0d      	ldr	r3, [pc, #52]	; (811a8 <startTimerSec+0x60>)
   81172:	f24c 0203 	movw	r2, #49155	; 0xc003
   81176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   8117a:	68f8      	ldr	r0, [r7, #12]
   8117c:	68b9      	ldr	r1, [r7, #8]
   8117e:	683a      	ldr	r2, [r7, #0]
   81180:	4b0a      	ldr	r3, [pc, #40]	; (811ac <startTimerSec+0x64>)
   81182:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   81184:	4808      	ldr	r0, [pc, #32]	; (811a8 <startTimerSec+0x60>)
   81186:	2102      	movs	r1, #2
   81188:	2210      	movs	r2, #16
   8118a:	4b09      	ldr	r3, [pc, #36]	; (811b0 <startTimerSec+0x68>)
   8118c:	4798      	blx	r3
	tc_start(tc, channel);
   8118e:	68f8      	ldr	r0, [r7, #12]
   81190:	68b9      	ldr	r1, [r7, #8]
   81192:	4b08      	ldr	r3, [pc, #32]	; (811b4 <startTimerSec+0x6c>)
   81194:	4798      	blx	r3
}
   81196:	3710      	adds	r7, #16
   81198:	46bd      	mov	sp, r7
   8119a:	bd80      	pop	{r7, pc}
   8119c:	000832e9 	.word	0x000832e9
   811a0:	00083265 	.word	0x00083265
   811a4:	0008139d 	.word	0x0008139d
   811a8:	40080000 	.word	0x40080000
   811ac:	00081415 	.word	0x00081415
   811b0:	00081439 	.word	0x00081439
   811b4:	000813d5 	.word	0x000813d5

000811b8 <startTimer1>:

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   811b8:	b580      	push	{r7, lr}
   811ba:	b084      	sub	sp, #16
   811bc:	af00      	add	r7, sp, #0
   811be:	60f8      	str	r0, [r7, #12]
   811c0:	60b9      	str	r1, [r7, #8]
   811c2:	603b      	str	r3, [r7, #0]
   811c4:	4613      	mov	r3, r2
   811c6:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   811c8:	2000      	movs	r0, #0
   811ca:	4b10      	ldr	r3, [pc, #64]	; (8120c <startTimer1+0x54>)
   811cc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   811ce:	201d      	movs	r0, #29
   811d0:	4b0f      	ldr	r3, [pc, #60]	; (81210 <startTimer1+0x58>)
   811d2:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   811d4:	68f8      	ldr	r0, [r7, #12]
   811d6:	68b9      	ldr	r1, [r7, #8]
   811d8:	f24c 0203 	movw	r2, #49155	; 0xc003
   811dc:	4b0d      	ldr	r3, [pc, #52]	; (81214 <startTimer1+0x5c>)
   811de:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811e0:	4b0d      	ldr	r3, [pc, #52]	; (81218 <startTimer1+0x60>)
   811e2:	f24c 0203 	movw	r2, #49155	; 0xc003
   811e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   811ea:	68f8      	ldr	r0, [r7, #12]
   811ec:	68b9      	ldr	r1, [r7, #8]
   811ee:	683a      	ldr	r2, [r7, #0]
   811f0:	4b0a      	ldr	r3, [pc, #40]	; (8121c <startTimer1+0x64>)
   811f2:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   811f4:	4808      	ldr	r0, [pc, #32]	; (81218 <startTimer1+0x60>)
   811f6:	2102      	movs	r1, #2
   811f8:	2210      	movs	r2, #16
   811fa:	4b09      	ldr	r3, [pc, #36]	; (81220 <startTimer1+0x68>)
   811fc:	4798      	blx	r3
	tc_start(tc, channel);
   811fe:	68f8      	ldr	r0, [r7, #12]
   81200:	68b9      	ldr	r1, [r7, #8]
   81202:	4b08      	ldr	r3, [pc, #32]	; (81224 <startTimer1+0x6c>)
   81204:	4798      	blx	r3
}
   81206:	3710      	adds	r7, #16
   81208:	46bd      	mov	sp, r7
   8120a:	bd80      	pop	{r7, pc}
   8120c:	000832e9 	.word	0x000832e9
   81210:	00083265 	.word	0x00083265
   81214:	0008139d 	.word	0x0008139d
   81218:	40080000 	.word	0x40080000
   8121c:	00081415 	.word	0x00081415
   81220:	00081439 	.word	0x00081439
   81224:	000813d5 	.word	0x000813d5

00081228 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81228:	b580      	push	{r7, lr}
   8122a:	b082      	sub	sp, #8
   8122c:	af00      	add	r7, sp, #0
   8122e:	4603      	mov	r3, r0
   81230:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   81232:	79fb      	ldrb	r3, [r7, #7]
   81234:	4618      	mov	r0, r3
   81236:	4b03      	ldr	r3, [pc, #12]	; (81244 <cpu3_sv_cntrl_activatepump+0x1c>)
   81238:	4798      	blx	r3
	
	return 0;
   8123a:	2300      	movs	r3, #0
}
   8123c:	4618      	mov	r0, r3
   8123e:	3708      	adds	r7, #8
   81240:	46bd      	mov	sp, r7
   81242:	bd80      	pop	{r7, pc}
   81244:	00080749 	.word	0x00080749

00081248 <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   81248:	b580      	push	{r7, lr}
   8124a:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   8124c:	4b08      	ldr	r3, [pc, #32]	; (81270 <CPU3_S_SYSTEM_INIT+0x28>)
   8124e:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   81250:	4b08      	ldr	r3, [pc, #32]	; (81274 <CPU3_S_SYSTEM_INIT+0x2c>)
   81252:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   81254:	4b08      	ldr	r3, [pc, #32]	; (81278 <CPU3_S_SYSTEM_INIT+0x30>)
   81256:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   81258:	4b08      	ldr	r3, [pc, #32]	; (8127c <CPU3_S_SYSTEM_INIT+0x34>)
   8125a:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   8125c:	4b08      	ldr	r3, [pc, #32]	; (81280 <CPU3_S_SYSTEM_INIT+0x38>)
   8125e:	4798      	blx	r3
	DD_INIT_CAN();
   81260:	4b08      	ldr	r3, [pc, #32]	; (81284 <CPU3_S_SYSTEM_INIT+0x3c>)
   81262:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81264:	2000      	movs	r0, #0
   81266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8126a:	4b07      	ldr	r3, [pc, #28]	; (81288 <CPU3_S_SYSTEM_INIT+0x40>)
   8126c:	4798      	blx	r3
}
   8126e:	bd80      	pop	{r7, pc}
   81270:	00080151 	.word	0x00080151
   81274:	00080e2d 	.word	0x00080e2d
   81278:	000808e9 	.word	0x000808e9
   8127c:	00080f11 	.word	0x00080f11
   81280:	00080f75 	.word	0x00080f75
   81284:	000805f5 	.word	0x000805f5
   81288:	0008128d 	.word	0x0008128d

0008128c <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   8128c:	b580      	push	{r7, lr}
   8128e:	b082      	sub	sp, #8
   81290:	af00      	add	r7, sp, #0
   81292:	4603      	mov	r3, r0
   81294:	6039      	str	r1, [r7, #0]
   81296:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   81298:	683b      	ldr	r3, [r7, #0]
   8129a:	b2db      	uxtb	r3, r3
   8129c:	79fa      	ldrb	r2, [r7, #7]
   8129e:	4610      	mov	r0, r2
   812a0:	4619      	mov	r1, r3
   812a2:	4b03      	ldr	r3, [pc, #12]	; (812b0 <CPU3_S_START_TIMER+0x24>)
   812a4:	4798      	blx	r3
	
	return 0;
   812a6:	2300      	movs	r3, #0
}
   812a8:	4618      	mov	r0, r3
   812aa:	3708      	adds	r7, #8
   812ac:	46bd      	mov	sp, r7
   812ae:	bd80      	pop	{r7, pc}
   812b0:	000807bd 	.word	0x000807bd

000812b4 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   812b4:	b580      	push	{r7, lr}
   812b6:	b082      	sub	sp, #8
   812b8:	af00      	add	r7, sp, #0
   812ba:	4603      	mov	r3, r0
   812bc:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   812be:	79fb      	ldrb	r3, [r7, #7]
   812c0:	4618      	mov	r0, r3
   812c2:	4b03      	ldr	r3, [pc, #12]	; (812d0 <CPU3_S_STOP_TIMER+0x1c>)
   812c4:	4798      	blx	r3
	
	return 0;
   812c6:	2300      	movs	r3, #0
   812c8:	4618      	mov	r0, r3
   812ca:	3708      	adds	r7, #8
   812cc:	46bd      	mov	sp, r7
   812ce:	bd80      	pop	{r7, pc}
   812d0:	00080871 	.word	0x00080871

000812d4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   812d4:	b580      	push	{r7, lr}
   812d6:	b086      	sub	sp, #24
   812d8:	af00      	add	r7, sp, #0
   812da:	60f8      	str	r0, [r7, #12]
   812dc:	60b9      	str	r1, [r7, #8]
   812de:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   812e0:	2300      	movs	r3, #0
   812e2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   812e4:	68fb      	ldr	r3, [r7, #12]
   812e6:	2b00      	cmp	r3, #0
   812e8:	d002      	beq.n	812f0 <_read+0x1c>
		return -1;
   812ea:	f04f 33ff 	mov.w	r3, #4294967295
   812ee:	e014      	b.n	8131a <_read+0x46>
	}

	for (; len > 0; --len) {
   812f0:	e00f      	b.n	81312 <_read+0x3e>
		ptr_get(stdio_base, ptr);
   812f2:	4b0c      	ldr	r3, [pc, #48]	; (81324 <_read+0x50>)
   812f4:	681b      	ldr	r3, [r3, #0]
   812f6:	4a0c      	ldr	r2, [pc, #48]	; (81328 <_read+0x54>)
   812f8:	6812      	ldr	r2, [r2, #0]
   812fa:	4610      	mov	r0, r2
   812fc:	68b9      	ldr	r1, [r7, #8]
   812fe:	4798      	blx	r3
		ptr++;
   81300:	68bb      	ldr	r3, [r7, #8]
   81302:	3301      	adds	r3, #1
   81304:	60bb      	str	r3, [r7, #8]
		nChars++;
   81306:	697b      	ldr	r3, [r7, #20]
   81308:	3301      	adds	r3, #1
   8130a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8130c:	687b      	ldr	r3, [r7, #4]
   8130e:	3b01      	subs	r3, #1
   81310:	607b      	str	r3, [r7, #4]
   81312:	687b      	ldr	r3, [r7, #4]
   81314:	2b00      	cmp	r3, #0
   81316:	dcec      	bgt.n	812f2 <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   81318:	697b      	ldr	r3, [r7, #20]
}
   8131a:	4618      	mov	r0, r3
   8131c:	3718      	adds	r7, #24
   8131e:	46bd      	mov	sp, r7
   81320:	bd80      	pop	{r7, pc}
   81322:	bf00      	nop
   81324:	200711f4 	.word	0x200711f4
   81328:	200711fc 	.word	0x200711fc

0008132c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8132c:	b580      	push	{r7, lr}
   8132e:	b086      	sub	sp, #24
   81330:	af00      	add	r7, sp, #0
   81332:	60f8      	str	r0, [r7, #12]
   81334:	60b9      	str	r1, [r7, #8]
   81336:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81338:	2300      	movs	r3, #0
   8133a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   8133c:	68fb      	ldr	r3, [r7, #12]
   8133e:	2b01      	cmp	r3, #1
   81340:	d008      	beq.n	81354 <_write+0x28>
   81342:	68fb      	ldr	r3, [r7, #12]
   81344:	2b02      	cmp	r3, #2
   81346:	d005      	beq.n	81354 <_write+0x28>
   81348:	68fb      	ldr	r3, [r7, #12]
   8134a:	2b03      	cmp	r3, #3
   8134c:	d002      	beq.n	81354 <_write+0x28>
		return -1;
   8134e:	f04f 33ff 	mov.w	r3, #4294967295
   81352:	e01a      	b.n	8138a <_write+0x5e>
	}

	for (; len != 0; --len) {
   81354:	e015      	b.n	81382 <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81356:	4b0f      	ldr	r3, [pc, #60]	; (81394 <_write+0x68>)
   81358:	681a      	ldr	r2, [r3, #0]
   8135a:	4b0f      	ldr	r3, [pc, #60]	; (81398 <_write+0x6c>)
   8135c:	6818      	ldr	r0, [r3, #0]
   8135e:	68bb      	ldr	r3, [r7, #8]
   81360:	1c59      	adds	r1, r3, #1
   81362:	60b9      	str	r1, [r7, #8]
   81364:	781b      	ldrb	r3, [r3, #0]
   81366:	4619      	mov	r1, r3
   81368:	4790      	blx	r2
   8136a:	4603      	mov	r3, r0
   8136c:	2b00      	cmp	r3, #0
   8136e:	da02      	bge.n	81376 <_write+0x4a>
			return -1;
   81370:	f04f 33ff 	mov.w	r3, #4294967295
   81374:	e009      	b.n	8138a <_write+0x5e>
		}
		++nChars;
   81376:	697b      	ldr	r3, [r7, #20]
   81378:	3301      	adds	r3, #1
   8137a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8137c:	687b      	ldr	r3, [r7, #4]
   8137e:	3b01      	subs	r3, #1
   81380:	607b      	str	r3, [r7, #4]
   81382:	687b      	ldr	r3, [r7, #4]
   81384:	2b00      	cmp	r3, #0
   81386:	d1e6      	bne.n	81356 <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   81388:	697b      	ldr	r3, [r7, #20]
}
   8138a:	4618      	mov	r0, r3
   8138c:	3718      	adds	r7, #24
   8138e:	46bd      	mov	sp, r7
   81390:	bd80      	pop	{r7, pc}
   81392:	bf00      	nop
   81394:	200711f8 	.word	0x200711f8
   81398:	200711fc 	.word	0x200711fc

0008139c <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   8139c:	b480      	push	{r7}
   8139e:	b087      	sub	sp, #28
   813a0:	af00      	add	r7, sp, #0
   813a2:	60f8      	str	r0, [r7, #12]
   813a4:	60b9      	str	r1, [r7, #8]
   813a6:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813a8:	68bb      	ldr	r3, [r7, #8]
   813aa:	019b      	lsls	r3, r3, #6
   813ac:	68fa      	ldr	r2, [r7, #12]
   813ae:	4413      	add	r3, r2
   813b0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   813b2:	697b      	ldr	r3, [r7, #20]
   813b4:	2202      	movs	r2, #2
   813b6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   813b8:	697b      	ldr	r3, [r7, #20]
   813ba:	f04f 32ff 	mov.w	r2, #4294967295
   813be:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   813c0:	697b      	ldr	r3, [r7, #20]
   813c2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   813c4:	697b      	ldr	r3, [r7, #20]
   813c6:	687a      	ldr	r2, [r7, #4]
   813c8:	605a      	str	r2, [r3, #4]
}
   813ca:	371c      	adds	r7, #28
   813cc:	46bd      	mov	sp, r7
   813ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   813d2:	4770      	bx	lr

000813d4 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   813d4:	b480      	push	{r7}
   813d6:	b083      	sub	sp, #12
   813d8:	af00      	add	r7, sp, #0
   813da:	6078      	str	r0, [r7, #4]
   813dc:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   813de:	687a      	ldr	r2, [r7, #4]
   813e0:	683b      	ldr	r3, [r7, #0]
   813e2:	019b      	lsls	r3, r3, #6
   813e4:	4413      	add	r3, r2
   813e6:	2205      	movs	r2, #5
   813e8:	601a      	str	r2, [r3, #0]
}
   813ea:	370c      	adds	r7, #12
   813ec:	46bd      	mov	sp, r7
   813ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   813f2:	4770      	bx	lr

000813f4 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   813f4:	b480      	push	{r7}
   813f6:	b083      	sub	sp, #12
   813f8:	af00      	add	r7, sp, #0
   813fa:	6078      	str	r0, [r7, #4]
   813fc:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   813fe:	687a      	ldr	r2, [r7, #4]
   81400:	683b      	ldr	r3, [r7, #0]
   81402:	019b      	lsls	r3, r3, #6
   81404:	4413      	add	r3, r2
   81406:	2202      	movs	r2, #2
   81408:	601a      	str	r2, [r3, #0]
}
   8140a:	370c      	adds	r7, #12
   8140c:	46bd      	mov	sp, r7
   8140e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81412:	4770      	bx	lr

00081414 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81414:	b480      	push	{r7}
   81416:	b085      	sub	sp, #20
   81418:	af00      	add	r7, sp, #0
   8141a:	60f8      	str	r0, [r7, #12]
   8141c:	60b9      	str	r1, [r7, #8]
   8141e:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81420:	68fa      	ldr	r2, [r7, #12]
   81422:	68bb      	ldr	r3, [r7, #8]
   81424:	019b      	lsls	r3, r3, #6
   81426:	4413      	add	r3, r2
   81428:	3318      	adds	r3, #24
   8142a:	687a      	ldr	r2, [r7, #4]
   8142c:	605a      	str	r2, [r3, #4]
}
   8142e:	3714      	adds	r7, #20
   81430:	46bd      	mov	sp, r7
   81432:	f85d 7b04 	ldr.w	r7, [sp], #4
   81436:	4770      	bx	lr

00081438 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   81438:	b480      	push	{r7}
   8143a:	b087      	sub	sp, #28
   8143c:	af00      	add	r7, sp, #0
   8143e:	60f8      	str	r0, [r7, #12]
   81440:	60b9      	str	r1, [r7, #8]
   81442:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81444:	68bb      	ldr	r3, [r7, #8]
   81446:	019b      	lsls	r3, r3, #6
   81448:	68fa      	ldr	r2, [r7, #12]
   8144a:	4413      	add	r3, r2
   8144c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   8144e:	697b      	ldr	r3, [r7, #20]
   81450:	687a      	ldr	r2, [r7, #4]
   81452:	625a      	str	r2, [r3, #36]	; 0x24
}
   81454:	371c      	adds	r7, #28
   81456:	46bd      	mov	sp, r7
   81458:	f85d 7b04 	ldr.w	r7, [sp], #4
   8145c:	4770      	bx	lr
   8145e:	bf00      	nop

00081460 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   81460:	b480      	push	{r7}
   81462:	b085      	sub	sp, #20
   81464:	af00      	add	r7, sp, #0
   81466:	6078      	str	r0, [r7, #4]
   81468:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8146a:	683b      	ldr	r3, [r7, #0]
   8146c:	019b      	lsls	r3, r3, #6
   8146e:	687a      	ldr	r2, [r7, #4]
   81470:	4413      	add	r3, r2
   81472:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   81474:	68fb      	ldr	r3, [r7, #12]
   81476:	6a1b      	ldr	r3, [r3, #32]
}
   81478:	4618      	mov	r0, r3
   8147a:	3714      	adds	r7, #20
   8147c:	46bd      	mov	sp, r7
   8147e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81482:	4770      	bx	lr

00081484 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81484:	b480      	push	{r7}
   81486:	b085      	sub	sp, #20
   81488:	af00      	add	r7, sp, #0
   8148a:	6078      	str	r0, [r7, #4]
   8148c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   8148e:	2300      	movs	r3, #0
   81490:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81492:	687b      	ldr	r3, [r7, #4]
   81494:	22ac      	movs	r2, #172	; 0xac
   81496:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81498:	683b      	ldr	r3, [r7, #0]
   8149a:	681a      	ldr	r2, [r3, #0]
   8149c:	683b      	ldr	r3, [r7, #0]
   8149e:	685b      	ldr	r3, [r3, #4]
   814a0:	fbb2 f3f3 	udiv	r3, r2, r3
   814a4:	091b      	lsrs	r3, r3, #4
   814a6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   814a8:	68fb      	ldr	r3, [r7, #12]
   814aa:	2b00      	cmp	r3, #0
   814ac:	d003      	beq.n	814b6 <uart_init+0x32>
   814ae:	68fb      	ldr	r3, [r7, #12]
   814b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   814b4:	d301      	bcc.n	814ba <uart_init+0x36>
		return 1;
   814b6:	2301      	movs	r3, #1
   814b8:	e00f      	b.n	814da <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   814ba:	687b      	ldr	r3, [r7, #4]
   814bc:	68fa      	ldr	r2, [r7, #12]
   814be:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   814c0:	683b      	ldr	r3, [r7, #0]
   814c2:	689a      	ldr	r2, [r3, #8]
   814c4:	687b      	ldr	r3, [r7, #4]
   814c6:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   814c8:	687b      	ldr	r3, [r7, #4]
   814ca:	f240 2202 	movw	r2, #514	; 0x202
   814ce:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   814d2:	687b      	ldr	r3, [r7, #4]
   814d4:	2250      	movs	r2, #80	; 0x50
   814d6:	601a      	str	r2, [r3, #0]

	return 0;
   814d8:	2300      	movs	r3, #0
}
   814da:	4618      	mov	r0, r3
   814dc:	3714      	adds	r7, #20
   814de:	46bd      	mov	sp, r7
   814e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   814e4:	4770      	bx	lr
   814e6:	bf00      	nop

000814e8 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   814e8:	b480      	push	{r7}
   814ea:	b083      	sub	sp, #12
   814ec:	af00      	add	r7, sp, #0
   814ee:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   814f0:	687b      	ldr	r3, [r7, #4]
   814f2:	2240      	movs	r2, #64	; 0x40
   814f4:	601a      	str	r2, [r3, #0]
}
   814f6:	370c      	adds	r7, #12
   814f8:	46bd      	mov	sp, r7
   814fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   814fe:	4770      	bx	lr

00081500 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81500:	b480      	push	{r7}
   81502:	b083      	sub	sp, #12
   81504:	af00      	add	r7, sp, #0
   81506:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   81508:	687b      	ldr	r3, [r7, #4]
   8150a:	2210      	movs	r2, #16
   8150c:	601a      	str	r2, [r3, #0]
}
   8150e:	370c      	adds	r7, #12
   81510:	46bd      	mov	sp, r7
   81512:	f85d 7b04 	ldr.w	r7, [sp], #4
   81516:	4770      	bx	lr

00081518 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   81518:	b480      	push	{r7}
   8151a:	b083      	sub	sp, #12
   8151c:	af00      	add	r7, sp, #0
   8151e:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81520:	687b      	ldr	r3, [r7, #4]
   81522:	2250      	movs	r2, #80	; 0x50
   81524:	601a      	str	r2, [r3, #0]
}
   81526:	370c      	adds	r7, #12
   81528:	46bd      	mov	sp, r7
   8152a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8152e:	4770      	bx	lr

00081530 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   81530:	b480      	push	{r7}
   81532:	b083      	sub	sp, #12
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
   81538:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   8153a:	687b      	ldr	r3, [r7, #4]
   8153c:	683a      	ldr	r2, [r7, #0]
   8153e:	609a      	str	r2, [r3, #8]
}
   81540:	370c      	adds	r7, #12
   81542:	46bd      	mov	sp, r7
   81544:	f85d 7b04 	ldr.w	r7, [sp], #4
   81548:	4770      	bx	lr
   8154a:	bf00      	nop

0008154c <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   8154c:	b480      	push	{r7}
   8154e:	b083      	sub	sp, #12
   81550:	af00      	add	r7, sp, #0
   81552:	6078      	str	r0, [r7, #4]
   81554:	460b      	mov	r3, r1
   81556:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81558:	687b      	ldr	r3, [r7, #4]
   8155a:	695b      	ldr	r3, [r3, #20]
   8155c:	f003 0302 	and.w	r3, r3, #2
   81560:	2b00      	cmp	r3, #0
   81562:	d101      	bne.n	81568 <uart_write+0x1c>
		return 1;
   81564:	2301      	movs	r3, #1
   81566:	e003      	b.n	81570 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   81568:	78fa      	ldrb	r2, [r7, #3]
   8156a:	687b      	ldr	r3, [r7, #4]
   8156c:	61da      	str	r2, [r3, #28]
	return 0;
   8156e:	2300      	movs	r3, #0
}
   81570:	4618      	mov	r0, r3
   81572:	370c      	adds	r7, #12
   81574:	46bd      	mov	sp, r7
   81576:	f85d 7b04 	ldr.w	r7, [sp], #4
   8157a:	4770      	bx	lr

0008157c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   8157c:	b480      	push	{r7}
   8157e:	b083      	sub	sp, #12
   81580:	af00      	add	r7, sp, #0
   81582:	6078      	str	r0, [r7, #4]
   81584:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81586:	687b      	ldr	r3, [r7, #4]
   81588:	695b      	ldr	r3, [r3, #20]
   8158a:	f003 0301 	and.w	r3, r3, #1
   8158e:	2b00      	cmp	r3, #0
   81590:	d101      	bne.n	81596 <uart_read+0x1a>
		return 1;
   81592:	2301      	movs	r3, #1
   81594:	e005      	b.n	815a2 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81596:	687b      	ldr	r3, [r7, #4]
   81598:	699b      	ldr	r3, [r3, #24]
   8159a:	b2da      	uxtb	r2, r3
   8159c:	683b      	ldr	r3, [r7, #0]
   8159e:	701a      	strb	r2, [r3, #0]
	return 0;
   815a0:	2300      	movs	r3, #0
}
   815a2:	4618      	mov	r0, r3
   815a4:	370c      	adds	r7, #12
   815a6:	46bd      	mov	sp, r7
   815a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   815ac:	4770      	bx	lr
   815ae:	bf00      	nop

000815b0 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   815b0:	b480      	push	{r7}
   815b2:	b089      	sub	sp, #36	; 0x24
   815b4:	af00      	add	r7, sp, #0
   815b6:	60f8      	str	r0, [r7, #12]
   815b8:	60b9      	str	r1, [r7, #8]
   815ba:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   815bc:	68bb      	ldr	r3, [r7, #8]
   815be:	011a      	lsls	r2, r3, #4
   815c0:	687b      	ldr	r3, [r7, #4]
   815c2:	429a      	cmp	r2, r3
   815c4:	d802      	bhi.n	815cc <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   815c6:	2310      	movs	r3, #16
   815c8:	61fb      	str	r3, [r7, #28]
   815ca:	e001      	b.n	815d0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   815cc:	2308      	movs	r3, #8
   815ce:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   815d0:	687b      	ldr	r3, [r7, #4]
   815d2:	00da      	lsls	r2, r3, #3
   815d4:	69fb      	ldr	r3, [r7, #28]
   815d6:	68b9      	ldr	r1, [r7, #8]
   815d8:	fb01 f303 	mul.w	r3, r1, r3
   815dc:	085b      	lsrs	r3, r3, #1
   815de:	441a      	add	r2, r3
   815e0:	69fb      	ldr	r3, [r7, #28]
   815e2:	68b9      	ldr	r1, [r7, #8]
   815e4:	fb01 f303 	mul.w	r3, r1, r3
   815e8:	fbb2 f3f3 	udiv	r3, r2, r3
   815ec:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   815ee:	69bb      	ldr	r3, [r7, #24]
   815f0:	08db      	lsrs	r3, r3, #3
   815f2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   815f4:	69bb      	ldr	r3, [r7, #24]
   815f6:	f003 0307 	and.w	r3, r3, #7
   815fa:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   815fc:	697b      	ldr	r3, [r7, #20]
   815fe:	2b00      	cmp	r3, #0
   81600:	d003      	beq.n	8160a <usart_set_async_baudrate+0x5a>
   81602:	697b      	ldr	r3, [r7, #20]
   81604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81608:	d301      	bcc.n	8160e <usart_set_async_baudrate+0x5e>
		return 1;
   8160a:	2301      	movs	r3, #1
   8160c:	e00f      	b.n	8162e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8160e:	69fb      	ldr	r3, [r7, #28]
   81610:	2b08      	cmp	r3, #8
   81612:	d105      	bne.n	81620 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81614:	68fb      	ldr	r3, [r7, #12]
   81616:	685b      	ldr	r3, [r3, #4]
   81618:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   8161c:	68fb      	ldr	r3, [r7, #12]
   8161e:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81620:	693b      	ldr	r3, [r7, #16]
   81622:	041a      	lsls	r2, r3, #16
   81624:	697b      	ldr	r3, [r7, #20]
   81626:	431a      	orrs	r2, r3
   81628:	68fb      	ldr	r3, [r7, #12]
   8162a:	621a      	str	r2, [r3, #32]

	return 0;
   8162c:	2300      	movs	r3, #0
}
   8162e:	4618      	mov	r0, r3
   81630:	3724      	adds	r7, #36	; 0x24
   81632:	46bd      	mov	sp, r7
   81634:	f85d 7b04 	ldr.w	r7, [sp], #4
   81638:	4770      	bx	lr
   8163a:	bf00      	nop

0008163c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8163c:	b580      	push	{r7, lr}
   8163e:	b082      	sub	sp, #8
   81640:	af00      	add	r7, sp, #0
   81642:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81644:	6878      	ldr	r0, [r7, #4]
   81646:	4b0d      	ldr	r3, [pc, #52]	; (8167c <usart_reset+0x40>)
   81648:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8164a:	687b      	ldr	r3, [r7, #4]
   8164c:	2200      	movs	r2, #0
   8164e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81650:	687b      	ldr	r3, [r7, #4]
   81652:	2200      	movs	r2, #0
   81654:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81656:	687b      	ldr	r3, [r7, #4]
   81658:	2200      	movs	r2, #0
   8165a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8165c:	6878      	ldr	r0, [r7, #4]
   8165e:	4b08      	ldr	r3, [pc, #32]	; (81680 <usart_reset+0x44>)
   81660:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81662:	6878      	ldr	r0, [r7, #4]
   81664:	4b07      	ldr	r3, [pc, #28]	; (81684 <usart_reset+0x48>)
   81666:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   81668:	6878      	ldr	r0, [r7, #4]
   8166a:	4b07      	ldr	r3, [pc, #28]	; (81688 <usart_reset+0x4c>)
   8166c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8166e:	6878      	ldr	r0, [r7, #4]
   81670:	4b06      	ldr	r3, [pc, #24]	; (8168c <usart_reset+0x50>)
   81672:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81674:	3708      	adds	r7, #8
   81676:	46bd      	mov	sp, r7
   81678:	bd80      	pop	{r7, pc}
   8167a:	bf00      	nop
   8167c:	00081815 	.word	0x00081815
   81680:	0008172d 	.word	0x0008172d
   81684:	0008175d 	.word	0x0008175d
   81688:	00081775 	.word	0x00081775
   8168c:	00081791 	.word	0x00081791

00081690 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81690:	b580      	push	{r7, lr}
   81692:	b084      	sub	sp, #16
   81694:	af00      	add	r7, sp, #0
   81696:	60f8      	str	r0, [r7, #12]
   81698:	60b9      	str	r1, [r7, #8]
   8169a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8169c:	68f8      	ldr	r0, [r7, #12]
   8169e:	4b1a      	ldr	r3, [pc, #104]	; (81708 <usart_init_rs232+0x78>)
   816a0:	4798      	blx	r3

	ul_reg_val = 0;
   816a2:	4b1a      	ldr	r3, [pc, #104]	; (8170c <usart_init_rs232+0x7c>)
   816a4:	2200      	movs	r2, #0
   816a6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   816a8:	68bb      	ldr	r3, [r7, #8]
   816aa:	2b00      	cmp	r3, #0
   816ac:	d009      	beq.n	816c2 <usart_init_rs232+0x32>
   816ae:	68bb      	ldr	r3, [r7, #8]
   816b0:	681b      	ldr	r3, [r3, #0]
   816b2:	68f8      	ldr	r0, [r7, #12]
   816b4:	4619      	mov	r1, r3
   816b6:	687a      	ldr	r2, [r7, #4]
   816b8:	4b15      	ldr	r3, [pc, #84]	; (81710 <usart_init_rs232+0x80>)
   816ba:	4798      	blx	r3
   816bc:	4603      	mov	r3, r0
   816be:	2b00      	cmp	r3, #0
   816c0:	d001      	beq.n	816c6 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   816c2:	2301      	movs	r3, #1
   816c4:	e01b      	b.n	816fe <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   816c6:	68bb      	ldr	r3, [r7, #8]
   816c8:	685a      	ldr	r2, [r3, #4]
   816ca:	68bb      	ldr	r3, [r7, #8]
   816cc:	689b      	ldr	r3, [r3, #8]
   816ce:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   816d0:	68bb      	ldr	r3, [r7, #8]
   816d2:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   816d4:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   816d6:	68bb      	ldr	r3, [r7, #8]
   816d8:	68db      	ldr	r3, [r3, #12]
   816da:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   816dc:	4b0b      	ldr	r3, [pc, #44]	; (8170c <usart_init_rs232+0x7c>)
   816de:	681b      	ldr	r3, [r3, #0]
   816e0:	4313      	orrs	r3, r2
   816e2:	4a0a      	ldr	r2, [pc, #40]	; (8170c <usart_init_rs232+0x7c>)
   816e4:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   816e6:	4b09      	ldr	r3, [pc, #36]	; (8170c <usart_init_rs232+0x7c>)
   816e8:	681b      	ldr	r3, [r3, #0]
   816ea:	4a08      	ldr	r2, [pc, #32]	; (8170c <usart_init_rs232+0x7c>)
   816ec:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   816ee:	68fb      	ldr	r3, [r7, #12]
   816f0:	685a      	ldr	r2, [r3, #4]
   816f2:	4b06      	ldr	r3, [pc, #24]	; (8170c <usart_init_rs232+0x7c>)
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	431a      	orrs	r2, r3
   816f8:	68fb      	ldr	r3, [r7, #12]
   816fa:	605a      	str	r2, [r3, #4]

	return 0;
   816fc:	2300      	movs	r3, #0
}
   816fe:	4618      	mov	r0, r3
   81700:	3710      	adds	r7, #16
   81702:	46bd      	mov	sp, r7
   81704:	bd80      	pop	{r7, pc}
   81706:	bf00      	nop
   81708:	0008163d 	.word	0x0008163d
   8170c:	20070cc8 	.word	0x20070cc8
   81710:	000815b1 	.word	0x000815b1

00081714 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81714:	b480      	push	{r7}
   81716:	b083      	sub	sp, #12
   81718:	af00      	add	r7, sp, #0
   8171a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   8171c:	687b      	ldr	r3, [r7, #4]
   8171e:	2240      	movs	r2, #64	; 0x40
   81720:	601a      	str	r2, [r3, #0]
}
   81722:	370c      	adds	r7, #12
   81724:	46bd      	mov	sp, r7
   81726:	f85d 7b04 	ldr.w	r7, [sp], #4
   8172a:	4770      	bx	lr

0008172c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8172c:	b480      	push	{r7}
   8172e:	b083      	sub	sp, #12
   81730:	af00      	add	r7, sp, #0
   81732:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81734:	687b      	ldr	r3, [r7, #4]
   81736:	2288      	movs	r2, #136	; 0x88
   81738:	601a      	str	r2, [r3, #0]
}
   8173a:	370c      	adds	r7, #12
   8173c:	46bd      	mov	sp, r7
   8173e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81742:	4770      	bx	lr

00081744 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81744:	b480      	push	{r7}
   81746:	b083      	sub	sp, #12
   81748:	af00      	add	r7, sp, #0
   8174a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   8174c:	687b      	ldr	r3, [r7, #4]
   8174e:	2210      	movs	r2, #16
   81750:	601a      	str	r2, [r3, #0]
}
   81752:	370c      	adds	r7, #12
   81754:	46bd      	mov	sp, r7
   81756:	f85d 7b04 	ldr.w	r7, [sp], #4
   8175a:	4770      	bx	lr

0008175c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   8175c:	b480      	push	{r7}
   8175e:	b083      	sub	sp, #12
   81760:	af00      	add	r7, sp, #0
   81762:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81764:	687b      	ldr	r3, [r7, #4]
   81766:	2224      	movs	r2, #36	; 0x24
   81768:	601a      	str	r2, [r3, #0]
}
   8176a:	370c      	adds	r7, #12
   8176c:	46bd      	mov	sp, r7
   8176e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81772:	4770      	bx	lr

00081774 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81774:	b480      	push	{r7}
   81776:	b083      	sub	sp, #12
   81778:	af00      	add	r7, sp, #0
   8177a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   8177c:	687b      	ldr	r3, [r7, #4]
   8177e:	f44f 7280 	mov.w	r2, #256	; 0x100
   81782:	601a      	str	r2, [r3, #0]
}
   81784:	370c      	adds	r7, #12
   81786:	46bd      	mov	sp, r7
   81788:	f85d 7b04 	ldr.w	r7, [sp], #4
   8178c:	4770      	bx	lr
   8178e:	bf00      	nop

00081790 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81790:	b480      	push	{r7}
   81792:	b083      	sub	sp, #12
   81794:	af00      	add	r7, sp, #0
   81796:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81798:	687b      	ldr	r3, [r7, #4]
   8179a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8179e:	601a      	str	r2, [r3, #0]
}
   817a0:	370c      	adds	r7, #12
   817a2:	46bd      	mov	sp, r7
   817a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   817a8:	4770      	bx	lr
   817aa:	bf00      	nop

000817ac <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   817ac:	b480      	push	{r7}
   817ae:	b083      	sub	sp, #12
   817b0:	af00      	add	r7, sp, #0
   817b2:	6078      	str	r0, [r7, #4]
   817b4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   817b6:	687b      	ldr	r3, [r7, #4]
   817b8:	695b      	ldr	r3, [r3, #20]
   817ba:	f003 0302 	and.w	r3, r3, #2
   817be:	2b00      	cmp	r3, #0
   817c0:	d101      	bne.n	817c6 <usart_write+0x1a>
		return 1;
   817c2:	2301      	movs	r3, #1
   817c4:	e005      	b.n	817d2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   817c6:	683b      	ldr	r3, [r7, #0]
   817c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   817cc:	687b      	ldr	r3, [r7, #4]
   817ce:	61da      	str	r2, [r3, #28]
	return 0;
   817d0:	2300      	movs	r3, #0
}
   817d2:	4618      	mov	r0, r3
   817d4:	370c      	adds	r7, #12
   817d6:	46bd      	mov	sp, r7
   817d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   817dc:	4770      	bx	lr
   817de:	bf00      	nop

000817e0 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   817e0:	b480      	push	{r7}
   817e2:	b083      	sub	sp, #12
   817e4:	af00      	add	r7, sp, #0
   817e6:	6078      	str	r0, [r7, #4]
   817e8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   817ea:	687b      	ldr	r3, [r7, #4]
   817ec:	695b      	ldr	r3, [r3, #20]
   817ee:	f003 0301 	and.w	r3, r3, #1
   817f2:	2b00      	cmp	r3, #0
   817f4:	d101      	bne.n	817fa <usart_read+0x1a>
		return 1;
   817f6:	2301      	movs	r3, #1
   817f8:	e006      	b.n	81808 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   817fa:	687b      	ldr	r3, [r7, #4]
   817fc:	699b      	ldr	r3, [r3, #24]
   817fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81802:	683b      	ldr	r3, [r7, #0]
   81804:	601a      	str	r2, [r3, #0]

	return 0;
   81806:	2300      	movs	r3, #0
}
   81808:	4618      	mov	r0, r3
   8180a:	370c      	adds	r7, #12
   8180c:	46bd      	mov	sp, r7
   8180e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81812:	4770      	bx	lr

00081814 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81814:	b480      	push	{r7}
   81816:	b083      	sub	sp, #12
   81818:	af00      	add	r7, sp, #0
   8181a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   8181c:	687b      	ldr	r3, [r7, #4]
   8181e:	4a04      	ldr	r2, [pc, #16]	; (81830 <usart_disable_writeprotect+0x1c>)
   81820:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81824:	370c      	adds	r7, #12
   81826:	46bd      	mov	sp, r7
   81828:	f85d 7b04 	ldr.w	r7, [sp], #4
   8182c:	4770      	bx	lr
   8182e:	bf00      	nop
   81830:	55534100 	.word	0x55534100

00081834 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81834:	b480      	push	{r7}
   81836:	b083      	sub	sp, #12
   81838:	af00      	add	r7, sp, #0
   8183a:	4603      	mov	r3, r0
   8183c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8183e:	4908      	ldr	r1, [pc, #32]	; (81860 <NVIC_EnableIRQ+0x2c>)
   81840:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81844:	095b      	lsrs	r3, r3, #5
   81846:	79fa      	ldrb	r2, [r7, #7]
   81848:	f002 021f 	and.w	r2, r2, #31
   8184c:	2001      	movs	r0, #1
   8184e:	fa00 f202 	lsl.w	r2, r0, r2
   81852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81856:	370c      	adds	r7, #12
   81858:	46bd      	mov	sp, r7
   8185a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8185e:	4770      	bx	lr
   81860:	e000e100 	.word	0xe000e100

00081864 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   81864:	b480      	push	{r7}
   81866:	b083      	sub	sp, #12
   81868:	af00      	add	r7, sp, #0
   8186a:	4603      	mov	r3, r0
   8186c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8186e:	4909      	ldr	r1, [pc, #36]	; (81894 <NVIC_DisableIRQ+0x30>)
   81870:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81874:	095b      	lsrs	r3, r3, #5
   81876:	79fa      	ldrb	r2, [r7, #7]
   81878:	f002 021f 	and.w	r2, r2, #31
   8187c:	2001      	movs	r0, #1
   8187e:	fa00 f202 	lsl.w	r2, r0, r2
   81882:	3320      	adds	r3, #32
   81884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81888:	370c      	adds	r7, #12
   8188a:	46bd      	mov	sp, r7
   8188c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81890:	4770      	bx	lr
   81892:	bf00      	nop
   81894:	e000e100 	.word	0xe000e100

00081898 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81898:	b480      	push	{r7}
   8189a:	b083      	sub	sp, #12
   8189c:	af00      	add	r7, sp, #0
   8189e:	4603      	mov	r3, r0
   818a0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   818a2:	4909      	ldr	r1, [pc, #36]	; (818c8 <NVIC_ClearPendingIRQ+0x30>)
   818a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818a8:	095b      	lsrs	r3, r3, #5
   818aa:	79fa      	ldrb	r2, [r7, #7]
   818ac:	f002 021f 	and.w	r2, r2, #31
   818b0:	2001      	movs	r0, #1
   818b2:	fa00 f202 	lsl.w	r2, r0, r2
   818b6:	3360      	adds	r3, #96	; 0x60
   818b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   818bc:	370c      	adds	r7, #12
   818be:	46bd      	mov	sp, r7
   818c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   818c4:	4770      	bx	lr
   818c6:	bf00      	nop
   818c8:	e000e100 	.word	0xe000e100

000818cc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   818cc:	b480      	push	{r7}
   818ce:	b083      	sub	sp, #12
   818d0:	af00      	add	r7, sp, #0
   818d2:	4603      	mov	r3, r0
   818d4:	6039      	str	r1, [r7, #0]
   818d6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   818d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818dc:	2b00      	cmp	r3, #0
   818de:	da0b      	bge.n	818f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   818e0:	490d      	ldr	r1, [pc, #52]	; (81918 <NVIC_SetPriority+0x4c>)
   818e2:	79fb      	ldrb	r3, [r7, #7]
   818e4:	f003 030f 	and.w	r3, r3, #15
   818e8:	3b04      	subs	r3, #4
   818ea:	683a      	ldr	r2, [r7, #0]
   818ec:	b2d2      	uxtb	r2, r2
   818ee:	0112      	lsls	r2, r2, #4
   818f0:	b2d2      	uxtb	r2, r2
   818f2:	440b      	add	r3, r1
   818f4:	761a      	strb	r2, [r3, #24]
   818f6:	e009      	b.n	8190c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   818f8:	4908      	ldr	r1, [pc, #32]	; (8191c <NVIC_SetPriority+0x50>)
   818fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818fe:	683a      	ldr	r2, [r7, #0]
   81900:	b2d2      	uxtb	r2, r2
   81902:	0112      	lsls	r2, r2, #4
   81904:	b2d2      	uxtb	r2, r2
   81906:	440b      	add	r3, r1
   81908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8190c:	370c      	adds	r7, #12
   8190e:	46bd      	mov	sp, r7
   81910:	f85d 7b04 	ldr.w	r7, [sp], #4
   81914:	4770      	bx	lr
   81916:	bf00      	nop
   81918:	e000ed00 	.word	0xe000ed00
   8191c:	e000e100 	.word	0xe000e100

00081920 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81920:	b480      	push	{r7}
   81922:	b083      	sub	sp, #12
   81924:	af00      	add	r7, sp, #0
   81926:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81928:	687b      	ldr	r3, [r7, #4]
   8192a:	2b07      	cmp	r3, #7
   8192c:	d825      	bhi.n	8197a <osc_get_rate+0x5a>
   8192e:	a201      	add	r2, pc, #4	; (adr r2, 81934 <osc_get_rate+0x14>)
   81930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81934:	00081955 	.word	0x00081955
   81938:	0008195b 	.word	0x0008195b
   8193c:	00081961 	.word	0x00081961
   81940:	00081967 	.word	0x00081967
   81944:	0008196b 	.word	0x0008196b
   81948:	0008196f 	.word	0x0008196f
   8194c:	00081973 	.word	0x00081973
   81950:	00081977 	.word	0x00081977
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81954:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81958:	e010      	b.n	8197c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8195a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8195e:	e00d      	b.n	8197c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81964:	e00a      	b.n	8197c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81966:	4b08      	ldr	r3, [pc, #32]	; (81988 <osc_get_rate+0x68>)
   81968:	e008      	b.n	8197c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8196a:	4b08      	ldr	r3, [pc, #32]	; (8198c <osc_get_rate+0x6c>)
   8196c:	e006      	b.n	8197c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8196e:	4b08      	ldr	r3, [pc, #32]	; (81990 <osc_get_rate+0x70>)
   81970:	e004      	b.n	8197c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81972:	4b07      	ldr	r3, [pc, #28]	; (81990 <osc_get_rate+0x70>)
   81974:	e002      	b.n	8197c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81976:	4b06      	ldr	r3, [pc, #24]	; (81990 <osc_get_rate+0x70>)
   81978:	e000      	b.n	8197c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8197a:	2300      	movs	r3, #0
}
   8197c:	4618      	mov	r0, r3
   8197e:	370c      	adds	r7, #12
   81980:	46bd      	mov	sp, r7
   81982:	f85d 7b04 	ldr.w	r7, [sp], #4
   81986:	4770      	bx	lr
   81988:	003d0900 	.word	0x003d0900
   8198c:	007a1200 	.word	0x007a1200
   81990:	00b71b00 	.word	0x00b71b00

00081994 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81994:	b580      	push	{r7, lr}
   81996:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81998:	2006      	movs	r0, #6
   8199a:	4b04      	ldr	r3, [pc, #16]	; (819ac <sysclk_get_main_hz+0x18>)
   8199c:	4798      	blx	r3
   8199e:	4602      	mov	r2, r0
   819a0:	4613      	mov	r3, r2
   819a2:	00db      	lsls	r3, r3, #3
   819a4:	1a9b      	subs	r3, r3, r2
   819a6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   819a8:	4618      	mov	r0, r3
   819aa:	bd80      	pop	{r7, pc}
   819ac:	00081921 	.word	0x00081921

000819b0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   819b0:	b580      	push	{r7, lr}
   819b2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   819b4:	4b02      	ldr	r3, [pc, #8]	; (819c0 <sysclk_get_peripheral_hz+0x10>)
   819b6:	4798      	blx	r3
   819b8:	4603      	mov	r3, r0
   819ba:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   819bc:	4618      	mov	r0, r3
   819be:	bd80      	pop	{r7, pc}
   819c0:	00081995 	.word	0x00081995

000819c4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   819c4:	b580      	push	{r7, lr}
   819c6:	b082      	sub	sp, #8
   819c8:	af00      	add	r7, sp, #0
   819ca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   819cc:	6878      	ldr	r0, [r7, #4]
   819ce:	4b02      	ldr	r3, [pc, #8]	; (819d8 <sysclk_enable_peripheral_clock+0x14>)
   819d0:	4798      	blx	r3
}
   819d2:	3708      	adds	r7, #8
   819d4:	46bd      	mov	sp, r7
   819d6:	bd80      	pop	{r7, pc}
   819d8:	00083265 	.word	0x00083265

000819dc <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   819dc:	b580      	push	{r7, lr}
   819de:	b08c      	sub	sp, #48	; 0x30
   819e0:	af00      	add	r7, sp, #0
   819e2:	6078      	str	r0, [r7, #4]
   819e4:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   819e6:	4b40      	ldr	r3, [pc, #256]	; (81ae8 <usart_serial_init+0x10c>)
   819e8:	4798      	blx	r3
   819ea:	4603      	mov	r3, r0
   819ec:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   819ee:	683b      	ldr	r3, [r7, #0]
   819f0:	681b      	ldr	r3, [r3, #0]
   819f2:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   819f4:	683b      	ldr	r3, [r7, #0]
   819f6:	689b      	ldr	r3, [r3, #8]
   819f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   819fa:	683b      	ldr	r3, [r7, #0]
   819fc:	681b      	ldr	r3, [r3, #0]
   819fe:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81a00:	683b      	ldr	r3, [r7, #0]
   81a02:	685b      	ldr	r3, [r3, #4]
   81a04:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81a06:	683b      	ldr	r3, [r7, #0]
   81a08:	689b      	ldr	r3, [r3, #8]
   81a0a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81a0c:	683b      	ldr	r3, [r7, #0]
   81a0e:	7b1b      	ldrb	r3, [r3, #12]
   81a10:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   81a12:	2300      	movs	r3, #0
   81a14:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a16:	687b      	ldr	r3, [r7, #4]
   81a18:	4a34      	ldr	r2, [pc, #208]	; (81aec <usart_serial_init+0x110>)
   81a1a:	4293      	cmp	r3, r2
   81a1c:	d108      	bne.n	81a30 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81a1e:	2008      	movs	r0, #8
   81a20:	4b33      	ldr	r3, [pc, #204]	; (81af0 <usart_serial_init+0x114>)
   81a22:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81a24:	f107 0320 	add.w	r3, r7, #32
   81a28:	6878      	ldr	r0, [r7, #4]
   81a2a:	4619      	mov	r1, r3
   81a2c:	4b31      	ldr	r3, [pc, #196]	; (81af4 <usart_serial_init+0x118>)
   81a2e:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81a30:	687b      	ldr	r3, [r7, #4]
   81a32:	4a31      	ldr	r2, [pc, #196]	; (81af8 <usart_serial_init+0x11c>)
   81a34:	4293      	cmp	r3, r2
   81a36:	d111      	bne.n	81a5c <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   81a38:	2011      	movs	r0, #17
   81a3a:	4b2d      	ldr	r3, [pc, #180]	; (81af0 <usart_serial_init+0x114>)
   81a3c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a3e:	4b2a      	ldr	r3, [pc, #168]	; (81ae8 <usart_serial_init+0x10c>)
   81a40:	4798      	blx	r3
   81a42:	4602      	mov	r2, r0
   81a44:	f107 0308 	add.w	r3, r7, #8
   81a48:	6878      	ldr	r0, [r7, #4]
   81a4a:	4619      	mov	r1, r3
   81a4c:	4b2b      	ldr	r3, [pc, #172]	; (81afc <usart_serial_init+0x120>)
   81a4e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a50:	6878      	ldr	r0, [r7, #4]
   81a52:	4b2b      	ldr	r3, [pc, #172]	; (81b00 <usart_serial_init+0x124>)
   81a54:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a56:	6878      	ldr	r0, [r7, #4]
   81a58:	4b2a      	ldr	r3, [pc, #168]	; (81b04 <usart_serial_init+0x128>)
   81a5a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81a5c:	687b      	ldr	r3, [r7, #4]
   81a5e:	4a2a      	ldr	r2, [pc, #168]	; (81b08 <usart_serial_init+0x12c>)
   81a60:	4293      	cmp	r3, r2
   81a62:	d111      	bne.n	81a88 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   81a64:	2012      	movs	r0, #18
   81a66:	4b22      	ldr	r3, [pc, #136]	; (81af0 <usart_serial_init+0x114>)
   81a68:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a6a:	4b1f      	ldr	r3, [pc, #124]	; (81ae8 <usart_serial_init+0x10c>)
   81a6c:	4798      	blx	r3
   81a6e:	4602      	mov	r2, r0
   81a70:	f107 0308 	add.w	r3, r7, #8
   81a74:	6878      	ldr	r0, [r7, #4]
   81a76:	4619      	mov	r1, r3
   81a78:	4b20      	ldr	r3, [pc, #128]	; (81afc <usart_serial_init+0x120>)
   81a7a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a7c:	6878      	ldr	r0, [r7, #4]
   81a7e:	4b20      	ldr	r3, [pc, #128]	; (81b00 <usart_serial_init+0x124>)
   81a80:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a82:	6878      	ldr	r0, [r7, #4]
   81a84:	4b1f      	ldr	r3, [pc, #124]	; (81b04 <usart_serial_init+0x128>)
   81a86:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81a88:	687b      	ldr	r3, [r7, #4]
   81a8a:	4a20      	ldr	r2, [pc, #128]	; (81b0c <usart_serial_init+0x130>)
   81a8c:	4293      	cmp	r3, r2
   81a8e:	d111      	bne.n	81ab4 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81a90:	2013      	movs	r0, #19
   81a92:	4b17      	ldr	r3, [pc, #92]	; (81af0 <usart_serial_init+0x114>)
   81a94:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a96:	4b14      	ldr	r3, [pc, #80]	; (81ae8 <usart_serial_init+0x10c>)
   81a98:	4798      	blx	r3
   81a9a:	4602      	mov	r2, r0
   81a9c:	f107 0308 	add.w	r3, r7, #8
   81aa0:	6878      	ldr	r0, [r7, #4]
   81aa2:	4619      	mov	r1, r3
   81aa4:	4b15      	ldr	r3, [pc, #84]	; (81afc <usart_serial_init+0x120>)
   81aa6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81aa8:	6878      	ldr	r0, [r7, #4]
   81aaa:	4b15      	ldr	r3, [pc, #84]	; (81b00 <usart_serial_init+0x124>)
   81aac:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81aae:	6878      	ldr	r0, [r7, #4]
   81ab0:	4b14      	ldr	r3, [pc, #80]	; (81b04 <usart_serial_init+0x128>)
   81ab2:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81ab4:	687b      	ldr	r3, [r7, #4]
   81ab6:	4a16      	ldr	r2, [pc, #88]	; (81b10 <usart_serial_init+0x134>)
   81ab8:	4293      	cmp	r3, r2
   81aba:	d111      	bne.n	81ae0 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81abc:	2014      	movs	r0, #20
   81abe:	4b0c      	ldr	r3, [pc, #48]	; (81af0 <usart_serial_init+0x114>)
   81ac0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81ac2:	4b09      	ldr	r3, [pc, #36]	; (81ae8 <usart_serial_init+0x10c>)
   81ac4:	4798      	blx	r3
   81ac6:	4602      	mov	r2, r0
   81ac8:	f107 0308 	add.w	r3, r7, #8
   81acc:	6878      	ldr	r0, [r7, #4]
   81ace:	4619      	mov	r1, r3
   81ad0:	4b0a      	ldr	r3, [pc, #40]	; (81afc <usart_serial_init+0x120>)
   81ad2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81ad4:	6878      	ldr	r0, [r7, #4]
   81ad6:	4b0a      	ldr	r3, [pc, #40]	; (81b00 <usart_serial_init+0x124>)
   81ad8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81ada:	6878      	ldr	r0, [r7, #4]
   81adc:	4b09      	ldr	r3, [pc, #36]	; (81b04 <usart_serial_init+0x128>)
   81ade:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81ae0:	3730      	adds	r7, #48	; 0x30
   81ae2:	46bd      	mov	sp, r7
   81ae4:	bd80      	pop	{r7, pc}
   81ae6:	bf00      	nop
   81ae8:	000819b1 	.word	0x000819b1
   81aec:	400e0800 	.word	0x400e0800
   81af0:	000819c5 	.word	0x000819c5
   81af4:	00081485 	.word	0x00081485
   81af8:	40098000 	.word	0x40098000
   81afc:	00081691 	.word	0x00081691
   81b00:	00081715 	.word	0x00081715
   81b04:	00081745 	.word	0x00081745
   81b08:	4009c000 	.word	0x4009c000
   81b0c:	400a0000 	.word	0x400a0000
   81b10:	400a4000 	.word	0x400a4000

00081b14 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81b14:	b580      	push	{r7, lr}
   81b16:	b082      	sub	sp, #8
   81b18:	af00      	add	r7, sp, #0
   81b1a:	6078      	str	r0, [r7, #4]
   81b1c:	460b      	mov	r3, r1
   81b1e:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81b20:	687b      	ldr	r3, [r7, #4]
   81b22:	4a27      	ldr	r2, [pc, #156]	; (81bc0 <usart_serial_putchar+0xac>)
   81b24:	4293      	cmp	r3, r2
   81b26:	d10a      	bne.n	81b3e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81b28:	bf00      	nop
   81b2a:	78fb      	ldrb	r3, [r7, #3]
   81b2c:	6878      	ldr	r0, [r7, #4]
   81b2e:	4619      	mov	r1, r3
   81b30:	4b24      	ldr	r3, [pc, #144]	; (81bc4 <usart_serial_putchar+0xb0>)
   81b32:	4798      	blx	r3
   81b34:	4603      	mov	r3, r0
   81b36:	2b00      	cmp	r3, #0
   81b38:	d1f7      	bne.n	81b2a <usart_serial_putchar+0x16>
		return 1;
   81b3a:	2301      	movs	r3, #1
   81b3c:	e03c      	b.n	81bb8 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81b3e:	687b      	ldr	r3, [r7, #4]
   81b40:	4a21      	ldr	r2, [pc, #132]	; (81bc8 <usart_serial_putchar+0xb4>)
   81b42:	4293      	cmp	r3, r2
   81b44:	d10a      	bne.n	81b5c <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81b46:	bf00      	nop
   81b48:	78fb      	ldrb	r3, [r7, #3]
   81b4a:	6878      	ldr	r0, [r7, #4]
   81b4c:	4619      	mov	r1, r3
   81b4e:	4b1f      	ldr	r3, [pc, #124]	; (81bcc <usart_serial_putchar+0xb8>)
   81b50:	4798      	blx	r3
   81b52:	4603      	mov	r3, r0
   81b54:	2b00      	cmp	r3, #0
   81b56:	d1f7      	bne.n	81b48 <usart_serial_putchar+0x34>
		return 1;
   81b58:	2301      	movs	r3, #1
   81b5a:	e02d      	b.n	81bb8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81b5c:	687b      	ldr	r3, [r7, #4]
   81b5e:	4a1c      	ldr	r2, [pc, #112]	; (81bd0 <usart_serial_putchar+0xbc>)
   81b60:	4293      	cmp	r3, r2
   81b62:	d10a      	bne.n	81b7a <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81b64:	bf00      	nop
   81b66:	78fb      	ldrb	r3, [r7, #3]
   81b68:	6878      	ldr	r0, [r7, #4]
   81b6a:	4619      	mov	r1, r3
   81b6c:	4b17      	ldr	r3, [pc, #92]	; (81bcc <usart_serial_putchar+0xb8>)
   81b6e:	4798      	blx	r3
   81b70:	4603      	mov	r3, r0
   81b72:	2b00      	cmp	r3, #0
   81b74:	d1f7      	bne.n	81b66 <usart_serial_putchar+0x52>
		return 1;
   81b76:	2301      	movs	r3, #1
   81b78:	e01e      	b.n	81bb8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81b7a:	687b      	ldr	r3, [r7, #4]
   81b7c:	4a15      	ldr	r2, [pc, #84]	; (81bd4 <usart_serial_putchar+0xc0>)
   81b7e:	4293      	cmp	r3, r2
   81b80:	d10a      	bne.n	81b98 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81b82:	bf00      	nop
   81b84:	78fb      	ldrb	r3, [r7, #3]
   81b86:	6878      	ldr	r0, [r7, #4]
   81b88:	4619      	mov	r1, r3
   81b8a:	4b10      	ldr	r3, [pc, #64]	; (81bcc <usart_serial_putchar+0xb8>)
   81b8c:	4798      	blx	r3
   81b8e:	4603      	mov	r3, r0
   81b90:	2b00      	cmp	r3, #0
   81b92:	d1f7      	bne.n	81b84 <usart_serial_putchar+0x70>
		return 1;
   81b94:	2301      	movs	r3, #1
   81b96:	e00f      	b.n	81bb8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81b98:	687b      	ldr	r3, [r7, #4]
   81b9a:	4a0f      	ldr	r2, [pc, #60]	; (81bd8 <usart_serial_putchar+0xc4>)
   81b9c:	4293      	cmp	r3, r2
   81b9e:	d10a      	bne.n	81bb6 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81ba0:	bf00      	nop
   81ba2:	78fb      	ldrb	r3, [r7, #3]
   81ba4:	6878      	ldr	r0, [r7, #4]
   81ba6:	4619      	mov	r1, r3
   81ba8:	4b08      	ldr	r3, [pc, #32]	; (81bcc <usart_serial_putchar+0xb8>)
   81baa:	4798      	blx	r3
   81bac:	4603      	mov	r3, r0
   81bae:	2b00      	cmp	r3, #0
   81bb0:	d1f7      	bne.n	81ba2 <usart_serial_putchar+0x8e>
		return 1;
   81bb2:	2301      	movs	r3, #1
   81bb4:	e000      	b.n	81bb8 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81bb6:	2300      	movs	r3, #0
}
   81bb8:	4618      	mov	r0, r3
   81bba:	3708      	adds	r7, #8
   81bbc:	46bd      	mov	sp, r7
   81bbe:	bd80      	pop	{r7, pc}
   81bc0:	400e0800 	.word	0x400e0800
   81bc4:	0008154d 	.word	0x0008154d
   81bc8:	40098000 	.word	0x40098000
   81bcc:	000817ad 	.word	0x000817ad
   81bd0:	4009c000 	.word	0x4009c000
   81bd4:	400a0000 	.word	0x400a0000
   81bd8:	400a4000 	.word	0x400a4000

00081bdc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81bdc:	b580      	push	{r7, lr}
   81bde:	b084      	sub	sp, #16
   81be0:	af00      	add	r7, sp, #0
   81be2:	6078      	str	r0, [r7, #4]
   81be4:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81be6:	2300      	movs	r3, #0
   81be8:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81bea:	687b      	ldr	r3, [r7, #4]
   81bec:	4a2a      	ldr	r2, [pc, #168]	; (81c98 <usart_serial_getchar+0xbc>)
   81bee:	4293      	cmp	r3, r2
   81bf0:	d107      	bne.n	81c02 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81bf2:	bf00      	nop
   81bf4:	6878      	ldr	r0, [r7, #4]
   81bf6:	6839      	ldr	r1, [r7, #0]
   81bf8:	4b28      	ldr	r3, [pc, #160]	; (81c9c <usart_serial_getchar+0xc0>)
   81bfa:	4798      	blx	r3
   81bfc:	4603      	mov	r3, r0
   81bfe:	2b00      	cmp	r3, #0
   81c00:	d1f8      	bne.n	81bf4 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81c02:	687b      	ldr	r3, [r7, #4]
   81c04:	4a26      	ldr	r2, [pc, #152]	; (81ca0 <usart_serial_getchar+0xc4>)
   81c06:	4293      	cmp	r3, r2
   81c08:	d10d      	bne.n	81c26 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81c0a:	bf00      	nop
   81c0c:	f107 030c 	add.w	r3, r7, #12
   81c10:	6878      	ldr	r0, [r7, #4]
   81c12:	4619      	mov	r1, r3
   81c14:	4b23      	ldr	r3, [pc, #140]	; (81ca4 <usart_serial_getchar+0xc8>)
   81c16:	4798      	blx	r3
   81c18:	4603      	mov	r3, r0
   81c1a:	2b00      	cmp	r3, #0
   81c1c:	d1f6      	bne.n	81c0c <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81c1e:	68fb      	ldr	r3, [r7, #12]
   81c20:	b2da      	uxtb	r2, r3
   81c22:	683b      	ldr	r3, [r7, #0]
   81c24:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81c26:	687b      	ldr	r3, [r7, #4]
   81c28:	4a1f      	ldr	r2, [pc, #124]	; (81ca8 <usart_serial_getchar+0xcc>)
   81c2a:	4293      	cmp	r3, r2
   81c2c:	d10d      	bne.n	81c4a <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81c2e:	bf00      	nop
   81c30:	f107 030c 	add.w	r3, r7, #12
   81c34:	6878      	ldr	r0, [r7, #4]
   81c36:	4619      	mov	r1, r3
   81c38:	4b1a      	ldr	r3, [pc, #104]	; (81ca4 <usart_serial_getchar+0xc8>)
   81c3a:	4798      	blx	r3
   81c3c:	4603      	mov	r3, r0
   81c3e:	2b00      	cmp	r3, #0
   81c40:	d1f6      	bne.n	81c30 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81c42:	68fb      	ldr	r3, [r7, #12]
   81c44:	b2da      	uxtb	r2, r3
   81c46:	683b      	ldr	r3, [r7, #0]
   81c48:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81c4a:	687b      	ldr	r3, [r7, #4]
   81c4c:	4a17      	ldr	r2, [pc, #92]	; (81cac <usart_serial_getchar+0xd0>)
   81c4e:	4293      	cmp	r3, r2
   81c50:	d10d      	bne.n	81c6e <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81c52:	bf00      	nop
   81c54:	f107 030c 	add.w	r3, r7, #12
   81c58:	6878      	ldr	r0, [r7, #4]
   81c5a:	4619      	mov	r1, r3
   81c5c:	4b11      	ldr	r3, [pc, #68]	; (81ca4 <usart_serial_getchar+0xc8>)
   81c5e:	4798      	blx	r3
   81c60:	4603      	mov	r3, r0
   81c62:	2b00      	cmp	r3, #0
   81c64:	d1f6      	bne.n	81c54 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81c66:	68fb      	ldr	r3, [r7, #12]
   81c68:	b2da      	uxtb	r2, r3
   81c6a:	683b      	ldr	r3, [r7, #0]
   81c6c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81c6e:	687b      	ldr	r3, [r7, #4]
   81c70:	4a0f      	ldr	r2, [pc, #60]	; (81cb0 <usart_serial_getchar+0xd4>)
   81c72:	4293      	cmp	r3, r2
   81c74:	d10d      	bne.n	81c92 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81c76:	bf00      	nop
   81c78:	f107 030c 	add.w	r3, r7, #12
   81c7c:	6878      	ldr	r0, [r7, #4]
   81c7e:	4619      	mov	r1, r3
   81c80:	4b08      	ldr	r3, [pc, #32]	; (81ca4 <usart_serial_getchar+0xc8>)
   81c82:	4798      	blx	r3
   81c84:	4603      	mov	r3, r0
   81c86:	2b00      	cmp	r3, #0
   81c88:	d1f6      	bne.n	81c78 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81c8a:	68fb      	ldr	r3, [r7, #12]
   81c8c:	b2da      	uxtb	r2, r3
   81c8e:	683b      	ldr	r3, [r7, #0]
   81c90:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81c92:	3710      	adds	r7, #16
   81c94:	46bd      	mov	sp, r7
   81c96:	bd80      	pop	{r7, pc}
   81c98:	400e0800 	.word	0x400e0800
   81c9c:	0008157d 	.word	0x0008157d
   81ca0:	40098000 	.word	0x40098000
   81ca4:	000817e1 	.word	0x000817e1
   81ca8:	4009c000 	.word	0x4009c000
   81cac:	400a0000 	.word	0x400a0000
   81cb0:	400a4000 	.word	0x400a4000

00081cb4 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81cb4:	b580      	push	{r7, lr}
   81cb6:	b082      	sub	sp, #8
   81cb8:	af00      	add	r7, sp, #0
   81cba:	6078      	str	r0, [r7, #4]
   81cbc:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81cbe:	4a0f      	ldr	r2, [pc, #60]	; (81cfc <stdio_serial_init+0x48>)
   81cc0:	687b      	ldr	r3, [r7, #4]
   81cc2:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81cc4:	4b0e      	ldr	r3, [pc, #56]	; (81d00 <stdio_serial_init+0x4c>)
   81cc6:	4a0f      	ldr	r2, [pc, #60]	; (81d04 <stdio_serial_init+0x50>)
   81cc8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81cca:	4b0f      	ldr	r3, [pc, #60]	; (81d08 <stdio_serial_init+0x54>)
   81ccc:	4a0f      	ldr	r2, [pc, #60]	; (81d0c <stdio_serial_init+0x58>)
   81cce:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81cd0:	6878      	ldr	r0, [r7, #4]
   81cd2:	6839      	ldr	r1, [r7, #0]
   81cd4:	4b0e      	ldr	r3, [pc, #56]	; (81d10 <stdio_serial_init+0x5c>)
   81cd6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81cd8:	4b0e      	ldr	r3, [pc, #56]	; (81d14 <stdio_serial_init+0x60>)
   81cda:	681b      	ldr	r3, [r3, #0]
   81cdc:	689b      	ldr	r3, [r3, #8]
   81cde:	4618      	mov	r0, r3
   81ce0:	2100      	movs	r1, #0
   81ce2:	4b0d      	ldr	r3, [pc, #52]	; (81d18 <stdio_serial_init+0x64>)
   81ce4:	4798      	blx	r3
	setbuf(stdin, NULL);
   81ce6:	4b0b      	ldr	r3, [pc, #44]	; (81d14 <stdio_serial_init+0x60>)
   81ce8:	681b      	ldr	r3, [r3, #0]
   81cea:	685b      	ldr	r3, [r3, #4]
   81cec:	4618      	mov	r0, r3
   81cee:	2100      	movs	r1, #0
   81cf0:	4b09      	ldr	r3, [pc, #36]	; (81d18 <stdio_serial_init+0x64>)
   81cf2:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   81cf4:	3708      	adds	r7, #8
   81cf6:	46bd      	mov	sp, r7
   81cf8:	bd80      	pop	{r7, pc}
   81cfa:	bf00      	nop
   81cfc:	200711fc 	.word	0x200711fc
   81d00:	200711f8 	.word	0x200711f8
   81d04:	00081b15 	.word	0x00081b15
   81d08:	200711f4 	.word	0x200711f4
   81d0c:	00081bdd 	.word	0x00081bdd
   81d10:	000819dd 	.word	0x000819dd
   81d14:	20070830 	.word	0x20070830
   81d18:	00083b7d 	.word	0x00083b7d

00081d1c <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   81d1c:	b580      	push	{r7, lr}
   81d1e:	b082      	sub	sp, #8
   81d20:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   81d22:	4b28      	ldr	r3, [pc, #160]	; (81dc4 <UART_Handler+0xa8>)
   81d24:	781b      	ldrb	r3, [r3, #0]
   81d26:	3301      	adds	r3, #1
   81d28:	b2da      	uxtb	r2, r3
   81d2a:	4b26      	ldr	r3, [pc, #152]	; (81dc4 <UART_Handler+0xa8>)
   81d2c:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   81d2e:	4b26      	ldr	r3, [pc, #152]	; (81dc8 <UART_Handler+0xac>)
   81d30:	695b      	ldr	r3, [r3, #20]
   81d32:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   81d34:	687b      	ldr	r3, [r7, #4]
   81d36:	f003 0301 	and.w	r3, r3, #1
   81d3a:	2b00      	cmp	r3, #0
   81d3c:	d03e      	beq.n	81dbc <UART_Handler+0xa0>
	{
		rx_val=UART->UART_RHR;
   81d3e:	4b22      	ldr	r3, [pc, #136]	; (81dc8 <UART_Handler+0xac>)
   81d40:	699b      	ldr	r3, [r3, #24]
   81d42:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   81d44:	78fb      	ldrb	r3, [r7, #3]
   81d46:	337f      	adds	r3, #127	; 0x7f
   81d48:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   81d4a:	4b1e      	ldr	r3, [pc, #120]	; (81dc4 <UART_Handler+0xa8>)
   81d4c:	781b      	ldrb	r3, [r3, #0]
   81d4e:	2b01      	cmp	r3, #1
   81d50:	d103      	bne.n	81d5a <UART_Handler+0x3e>
		{
			rc=rx_val;
   81d52:	78fb      	ldrb	r3, [r7, #3]
   81d54:	4a1d      	ldr	r2, [pc, #116]	; (81dcc <UART_Handler+0xb0>)
   81d56:	6013      	str	r3, [r2, #0]
   81d58:	e009      	b.n	81d6e <UART_Handler+0x52>
		}
		else if (cnt==2)
   81d5a:	4b1a      	ldr	r3, [pc, #104]	; (81dc4 <UART_Handler+0xa8>)
   81d5c:	781b      	ldrb	r3, [r3, #0]
   81d5e:	2b02      	cmp	r3, #2
   81d60:	d105      	bne.n	81d6e <UART_Handler+0x52>
		{
			bic_rc=rx_val;
   81d62:	78fb      	ldrb	r3, [r7, #3]
   81d64:	4a1a      	ldr	r2, [pc, #104]	; (81dd0 <UART_Handler+0xb4>)
   81d66:	6013      	str	r3, [r2, #0]
			cnt=0;
   81d68:	4b16      	ldr	r3, [pc, #88]	; (81dc4 <UART_Handler+0xa8>)
   81d6a:	2200      	movs	r2, #0
   81d6c:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   81d6e:	4b17      	ldr	r3, [pc, #92]	; (81dcc <UART_Handler+0xb0>)
   81d70:	681a      	ldr	r2, [r3, #0]
   81d72:	4b17      	ldr	r3, [pc, #92]	; (81dd0 <UART_Handler+0xb4>)
   81d74:	681b      	ldr	r3, [r3, #0]
   81d76:	4817      	ldr	r0, [pc, #92]	; (81dd4 <UART_Handler+0xb8>)
   81d78:	4611      	mov	r1, r2
   81d7a:	461a      	mov	r2, r3
   81d7c:	4b16      	ldr	r3, [pc, #88]	; (81dd8 <UART_Handler+0xbc>)
   81d7e:	4798      	blx	r3
		tc_stop(TC0,0);
   81d80:	4816      	ldr	r0, [pc, #88]	; (81ddc <UART_Handler+0xc0>)
   81d82:	2100      	movs	r1, #0
   81d84:	4b16      	ldr	r3, [pc, #88]	; (81de0 <UART_Handler+0xc4>)
   81d86:	4798      	blx	r3
		tc_stop(TC0,1);
   81d88:	4814      	ldr	r0, [pc, #80]	; (81ddc <UART_Handler+0xc0>)
   81d8a:	2101      	movs	r1, #1
   81d8c:	4b14      	ldr	r3, [pc, #80]	; (81de0 <UART_Handler+0xc4>)
   81d8e:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   81d90:	4b0e      	ldr	r3, [pc, #56]	; (81dcc <UART_Handler+0xb0>)
   81d92:	681b      	ldr	r3, [r3, #0]
   81d94:	4811      	ldr	r0, [pc, #68]	; (81ddc <UART_Handler+0xc0>)
   81d96:	2100      	movs	r1, #0
   81d98:	461a      	mov	r2, r3
   81d9a:	4b12      	ldr	r3, [pc, #72]	; (81de4 <UART_Handler+0xc8>)
   81d9c:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   81d9e:	4b0c      	ldr	r3, [pc, #48]	; (81dd0 <UART_Handler+0xb4>)
   81da0:	681b      	ldr	r3, [r3, #0]
   81da2:	480e      	ldr	r0, [pc, #56]	; (81ddc <UART_Handler+0xc0>)
   81da4:	2101      	movs	r1, #1
   81da6:	461a      	mov	r2, r3
   81da8:	4b0e      	ldr	r3, [pc, #56]	; (81de4 <UART_Handler+0xc8>)
   81daa:	4798      	blx	r3
		tc_start(TC0,0);
   81dac:	480b      	ldr	r0, [pc, #44]	; (81ddc <UART_Handler+0xc0>)
   81dae:	2100      	movs	r1, #0
   81db0:	4b0d      	ldr	r3, [pc, #52]	; (81de8 <UART_Handler+0xcc>)
   81db2:	4798      	blx	r3
		tc_start(TC0,1);
   81db4:	4809      	ldr	r0, [pc, #36]	; (81ddc <UART_Handler+0xc0>)
   81db6:	2101      	movs	r1, #1
   81db8:	4b0b      	ldr	r3, [pc, #44]	; (81de8 <UART_Handler+0xcc>)
   81dba:	4798      	blx	r3
	}
}
   81dbc:	3708      	adds	r7, #8
   81dbe:	46bd      	mov	sp, r7
   81dc0:	bd80      	pop	{r7, pc}
   81dc2:	bf00      	nop
   81dc4:	20070ce8 	.word	0x20070ce8
   81dc8:	400e0800 	.word	0x400e0800
   81dcc:	20070cd8 	.word	0x20070cd8
   81dd0:	2007120c 	.word	0x2007120c
   81dd4:	00086a44 	.word	0x00086a44
   81dd8:	00083ab9 	.word	0x00083ab9
   81ddc:	40080000 	.word	0x40080000
   81de0:	000813f5 	.word	0x000813f5
   81de4:	00081415 	.word	0x00081415
   81de8:	000813d5 	.word	0x000813d5

00081dec <main>:
int main (void)
{
   81dec:	b590      	push	{r4, r7, lr}
   81dee:	b087      	sub	sp, #28
   81df0:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   81df2:	4b1a      	ldr	r3, [pc, #104]	; (81e5c <main+0x70>)
   81df4:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   81df6:	4b1a      	ldr	r3, [pc, #104]	; (81e60 <main+0x74>)
   81df8:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   81dfa:	2008      	movs	r0, #8
   81dfc:	4b19      	ldr	r3, [pc, #100]	; (81e64 <main+0x78>)
   81dfe:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   81e00:	200b      	movs	r0, #11
   81e02:	4b19      	ldr	r3, [pc, #100]	; (81e68 <main+0x7c>)
   81e04:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   81e06:	4b19      	ldr	r3, [pc, #100]	; (81e6c <main+0x80>)
   81e08:	2250      	movs	r2, #80	; 0x50
   81e0a:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   81e0c:	4b17      	ldr	r3, [pc, #92]	; (81e6c <main+0x80>)
   81e0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81e12:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   81e14:	4b15      	ldr	r3, [pc, #84]	; (81e6c <main+0x80>)
   81e16:	2246      	movs	r2, #70	; 0x46
   81e18:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   81e1a:	4b15      	ldr	r3, [pc, #84]	; (81e70 <main+0x84>)
   81e1c:	f44f 7240 	mov.w	r2, #768	; 0x300
   81e20:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   81e22:	4812      	ldr	r0, [pc, #72]	; (81e6c <main+0x80>)
   81e24:	4913      	ldr	r1, [pc, #76]	; (81e74 <main+0x88>)
   81e26:	4b14      	ldr	r3, [pc, #80]	; (81e78 <main+0x8c>)
   81e28:	4798      	blx	r3
	uart_enable(UART);
   81e2a:	4810      	ldr	r0, [pc, #64]	; (81e6c <main+0x80>)
   81e2c:	4b13      	ldr	r3, [pc, #76]	; (81e7c <main+0x90>)
   81e2e:	4798      	blx	r3
	uart_enable_rx(UART);
   81e30:	480e      	ldr	r0, [pc, #56]	; (81e6c <main+0x80>)
   81e32:	4b13      	ldr	r3, [pc, #76]	; (81e80 <main+0x94>)
   81e34:	4798      	blx	r3
	uart_enable_tx(UART);
   81e36:	480d      	ldr	r0, [pc, #52]	; (81e6c <main+0x80>)
   81e38:	4b12      	ldr	r3, [pc, #72]	; (81e84 <main+0x98>)
   81e3a:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   81e3c:	2008      	movs	r0, #8
   81e3e:	4b12      	ldr	r3, [pc, #72]	; (81e88 <main+0x9c>)
   81e40:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81e42:	2008      	movs	r0, #8
   81e44:	4b11      	ldr	r3, [pc, #68]	; (81e8c <main+0xa0>)
   81e46:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   81e48:	2008      	movs	r0, #8
   81e4a:	2100      	movs	r1, #0
   81e4c:	4b10      	ldr	r3, [pc, #64]	; (81e90 <main+0xa4>)
   81e4e:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   81e50:	2008      	movs	r0, #8
   81e52:	4b10      	ldr	r3, [pc, #64]	; (81e94 <main+0xa8>)
   81e54:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   81e56:	2300      	movs	r3, #0
   81e58:	617b      	str	r3, [r7, #20]
   81e5a:	e020      	b.n	81e9e <main+0xb2>
   81e5c:	00082a71 	.word	0x00082a71
   81e60:	00081249 	.word	0x00081249
   81e64:	000819c5 	.word	0x000819c5
   81e68:	00083265 	.word	0x00083265
   81e6c:	400e0800 	.word	0x400e0800
   81e70:	400e0e00 	.word	0x400e0e00
   81e74:	00086a34 	.word	0x00086a34
   81e78:	00081cb5 	.word	0x00081cb5
   81e7c:	00081519 	.word	0x00081519
   81e80:	00081501 	.word	0x00081501
   81e84:	000814e9 	.word	0x000814e9
   81e88:	00081865 	.word	0x00081865
   81e8c:	00081899 	.word	0x00081899
   81e90:	000818cd 	.word	0x000818cd
   81e94:	00081835 	.word	0x00081835
   81e98:	697b      	ldr	r3, [r7, #20]
   81e9a:	3301      	adds	r3, #1
   81e9c:	617b      	str	r3, [r7, #20]
   81e9e:	697b      	ldr	r3, [r7, #20]
   81ea0:	4a91      	ldr	r2, [pc, #580]	; (820e8 <main+0x2fc>)
   81ea2:	4293      	cmp	r3, r2
   81ea4:	ddf8      	ble.n	81e98 <main+0xac>
	{
		;
	}
	printf("welcome\n");
   81ea6:	4891      	ldr	r0, [pc, #580]	; (820ec <main+0x300>)
   81ea8:	4b91      	ldr	r3, [pc, #580]	; (820f0 <main+0x304>)
   81eaa:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   81eac:	200b      	movs	r0, #11
   81eae:	4b91      	ldr	r3, [pc, #580]	; (820f4 <main+0x308>)
   81eb0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   81eb2:	200c      	movs	r0, #12
   81eb4:	4b8f      	ldr	r3, [pc, #572]	; (820f4 <main+0x308>)
   81eb6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   81eb8:	200d      	movs	r0, #13
   81eba:	4b8e      	ldr	r3, [pc, #568]	; (820f4 <main+0x308>)
   81ebc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   81ebe:	200e      	movs	r0, #14
   81ec0:	4b8c      	ldr	r3, [pc, #560]	; (820f4 <main+0x308>)
   81ec2:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   81ec4:	4b8c      	ldr	r3, [pc, #560]	; (820f8 <main+0x30c>)
   81ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81ec8:	0e5b      	lsrs	r3, r3, #25
   81eca:	f003 0301 	and.w	r3, r3, #1
   81ece:	4a8b      	ldr	r2, [pc, #556]	; (820fc <main+0x310>)
   81ed0:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   81ed2:	4b8b      	ldr	r3, [pc, #556]	; (82100 <main+0x314>)
   81ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81ed6:	0f1b      	lsrs	r3, r3, #28
   81ed8:	f003 0301 	and.w	r3, r3, #1
   81edc:	4a89      	ldr	r2, [pc, #548]	; (82104 <main+0x318>)
   81ede:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81ee0:	4b87      	ldr	r3, [pc, #540]	; (82100 <main+0x314>)
   81ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81ee4:	0e9b      	lsrs	r3, r3, #26
   81ee6:	f003 0301 	and.w	r3, r3, #1
   81eea:	4a87      	ldr	r2, [pc, #540]	; (82108 <main+0x31c>)
   81eec:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   81eee:	4b85      	ldr	r3, [pc, #532]	; (82104 <main+0x318>)
   81ef0:	681b      	ldr	r3, [r3, #0]
   81ef2:	4a86      	ldr	r2, [pc, #536]	; (8210c <main+0x320>)
   81ef4:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   81ef6:	4b84      	ldr	r3, [pc, #528]	; (82108 <main+0x31c>)
   81ef8:	681b      	ldr	r3, [r3, #0]
   81efa:	4a85      	ldr	r2, [pc, #532]	; (82110 <main+0x324>)
   81efc:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   81efe:	4b85      	ldr	r3, [pc, #532]	; (82114 <main+0x328>)
   81f00:	613b      	str	r3, [r7, #16]
	uint32_t secondcount = (1312499/2) + 328124 ;
   81f02:	4b85      	ldr	r3, [pc, #532]	; (82118 <main+0x32c>)
   81f04:	60fb      	str	r3, [r7, #12]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   81f06:	f641 13a2 	movw	r3, #6562	; 0x19a2
   81f0a:	60bb      	str	r3, [r7, #8]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81f0c:	4883      	ldr	r0, [pc, #524]	; (8211c <main+0x330>)
   81f0e:	2101      	movs	r1, #1
   81f10:	4b83      	ldr	r3, [pc, #524]	; (82120 <main+0x334>)
   81f12:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   81f14:	4b78      	ldr	r3, [pc, #480]	; (820f8 <main+0x30c>)
   81f16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f1a:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   81f1c:	4b76      	ldr	r3, [pc, #472]	; (820f8 <main+0x30c>)
   81f1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f22:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   81f24:	4b7f      	ldr	r3, [pc, #508]	; (82124 <main+0x338>)
   81f26:	781b      	ldrb	r3, [r3, #0]
   81f28:	2b01      	cmp	r3, #1
   81f2a:	d057      	beq.n	81fdc <main+0x1f0>
		{
			
		
				if(flag_1==0)
   81f2c:	4b7e      	ldr	r3, [pc, #504]	; (82128 <main+0x33c>)
   81f2e:	681b      	ldr	r3, [r3, #0]
   81f30:	2b00      	cmp	r3, #0
   81f32:	d125      	bne.n	81f80 <main+0x194>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   81f34:	4b7d      	ldr	r3, [pc, #500]	; (8212c <main+0x340>)
   81f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f38:	0b9b      	lsrs	r3, r3, #14
   81f3a:	f003 0301 	and.w	r3, r3, #1
   81f3e:	4a6f      	ldr	r2, [pc, #444]	; (820fc <main+0x310>)
   81f40:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   81f42:	4b6e      	ldr	r3, [pc, #440]	; (820fc <main+0x310>)
   81f44:	681b      	ldr	r3, [r3, #0]
   81f46:	2b01      	cmp	r3, #1
   81f48:	d116      	bne.n	81f78 <main+0x18c>
   81f4a:	4b79      	ldr	r3, [pc, #484]	; (82130 <main+0x344>)
   81f4c:	681b      	ldr	r3, [r3, #0]
   81f4e:	2b00      	cmp	r3, #0
   81f50:	d112      	bne.n	81f78 <main+0x18c>
					{
						dummy_1++;
   81f52:	4b78      	ldr	r3, [pc, #480]	; (82134 <main+0x348>)
   81f54:	681b      	ldr	r3, [r3, #0]
   81f56:	3301      	adds	r3, #1
   81f58:	4a76      	ldr	r2, [pc, #472]	; (82134 <main+0x348>)
   81f5a:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   81f5c:	4b75      	ldr	r3, [pc, #468]	; (82134 <main+0x348>)
   81f5e:	681b      	ldr	r3, [r3, #0]
   81f60:	2b02      	cmp	r3, #2
   81f62:	d109      	bne.n	81f78 <main+0x18c>
						{
							tc_stop(TC0,0);
   81f64:	4874      	ldr	r0, [pc, #464]	; (82138 <main+0x34c>)
   81f66:	2100      	movs	r1, #0
   81f68:	4b74      	ldr	r3, [pc, #464]	; (8213c <main+0x350>)
   81f6a:	4798      	blx	r3
							dummy_1=0;
   81f6c:	4b71      	ldr	r3, [pc, #452]	; (82134 <main+0x348>)
   81f6e:	2200      	movs	r2, #0
   81f70:	601a      	str	r2, [r3, #0]
							flag_1=1;
   81f72:	4b6d      	ldr	r3, [pc, #436]	; (82128 <main+0x33c>)
   81f74:	2201      	movs	r2, #1
   81f76:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   81f78:	4b60      	ldr	r3, [pc, #384]	; (820fc <main+0x310>)
   81f7a:	681b      	ldr	r3, [r3, #0]
   81f7c:	4a6c      	ldr	r2, [pc, #432]	; (82130 <main+0x344>)
   81f7e:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   81f80:	4b6f      	ldr	r3, [pc, #444]	; (82140 <main+0x354>)
   81f82:	681b      	ldr	r3, [r3, #0]
   81f84:	2b00      	cmp	r3, #0
   81f86:	d129      	bne.n	81fdc <main+0x1f0>
   81f88:	4b67      	ldr	r3, [pc, #412]	; (82128 <main+0x33c>)
   81f8a:	681b      	ldr	r3, [r3, #0]
   81f8c:	2b01      	cmp	r3, #1
   81f8e:	d125      	bne.n	81fdc <main+0x1f0>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81f90:	4b66      	ldr	r3, [pc, #408]	; (8212c <main+0x340>)
   81f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f94:	0bdb      	lsrs	r3, r3, #15
   81f96:	f003 0301 	and.w	r3, r3, #1
   81f9a:	4a5a      	ldr	r2, [pc, #360]	; (82104 <main+0x318>)
   81f9c:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   81f9e:	4b59      	ldr	r3, [pc, #356]	; (82104 <main+0x318>)
   81fa0:	681b      	ldr	r3, [r3, #0]
   81fa2:	2b01      	cmp	r3, #1
   81fa4:	d116      	bne.n	81fd4 <main+0x1e8>
   81fa6:	4b59      	ldr	r3, [pc, #356]	; (8210c <main+0x320>)
   81fa8:	681b      	ldr	r3, [r3, #0]
   81faa:	2b00      	cmp	r3, #0
   81fac:	d112      	bne.n	81fd4 <main+0x1e8>
					{
						dummy_1b++;
   81fae:	4b65      	ldr	r3, [pc, #404]	; (82144 <main+0x358>)
   81fb0:	681b      	ldr	r3, [r3, #0]
   81fb2:	3301      	adds	r3, #1
   81fb4:	4a63      	ldr	r2, [pc, #396]	; (82144 <main+0x358>)
   81fb6:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   81fb8:	4b62      	ldr	r3, [pc, #392]	; (82144 <main+0x358>)
   81fba:	681b      	ldr	r3, [r3, #0]
   81fbc:	2b02      	cmp	r3, #2
   81fbe:	d109      	bne.n	81fd4 <main+0x1e8>
						{
							tc_stop(TC0,1);
   81fc0:	485d      	ldr	r0, [pc, #372]	; (82138 <main+0x34c>)
   81fc2:	2101      	movs	r1, #1
   81fc4:	4b5d      	ldr	r3, [pc, #372]	; (8213c <main+0x350>)
   81fc6:	4798      	blx	r3
							dummy_1b=0;
   81fc8:	4b5e      	ldr	r3, [pc, #376]	; (82144 <main+0x358>)
   81fca:	2200      	movs	r2, #0
   81fcc:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   81fce:	4b5c      	ldr	r3, [pc, #368]	; (82140 <main+0x354>)
   81fd0:	2201      	movs	r2, #1
   81fd2:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   81fd4:	4b4b      	ldr	r3, [pc, #300]	; (82104 <main+0x318>)
   81fd6:	681b      	ldr	r3, [r3, #0]
   81fd8:	4a4c      	ldr	r2, [pc, #304]	; (8210c <main+0x320>)
   81fda:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   81fdc:	4b5a      	ldr	r3, [pc, #360]	; (82148 <main+0x35c>)
   81fde:	781b      	ldrb	r3, [r3, #0]
   81fe0:	2b01      	cmp	r3, #1
   81fe2:	d135      	bne.n	82050 <main+0x264>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   81fe4:	4b51      	ldr	r3, [pc, #324]	; (8212c <main+0x340>)
   81fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81fe8:	0b9b      	lsrs	r3, r3, #14
   81fea:	f003 0301 	and.w	r3, r3, #1
   81fee:	4a43      	ldr	r2, [pc, #268]	; (820fc <main+0x310>)
   81ff0:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   81ff2:	4b42      	ldr	r3, [pc, #264]	; (820fc <main+0x310>)
   81ff4:	681b      	ldr	r3, [r3, #0]
   81ff6:	2b01      	cmp	r3, #1
   81ff8:	d10b      	bne.n	82012 <main+0x226>
   81ffa:	4b4d      	ldr	r3, [pc, #308]	; (82130 <main+0x344>)
   81ffc:	681b      	ldr	r3, [r3, #0]
   81ffe:	2b00      	cmp	r3, #0
   82000:	d107      	bne.n	82012 <main+0x226>
				{
					acid_count++;
   82002:	4b52      	ldr	r3, [pc, #328]	; (8214c <main+0x360>)
   82004:	681b      	ldr	r3, [r3, #0]
   82006:	3301      	adds	r3, #1
   82008:	4a50      	ldr	r2, [pc, #320]	; (8214c <main+0x360>)
   8200a:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   8200c:	4b50      	ldr	r3, [pc, #320]	; (82150 <main+0x364>)
   8200e:	2200      	movs	r2, #0
   82010:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   82012:	4b3a      	ldr	r3, [pc, #232]	; (820fc <main+0x310>)
   82014:	681b      	ldr	r3, [r3, #0]
   82016:	4a46      	ldr	r2, [pc, #280]	; (82130 <main+0x344>)
   82018:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   8201a:	4b44      	ldr	r3, [pc, #272]	; (8212c <main+0x340>)
   8201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8201e:	0bdb      	lsrs	r3, r3, #15
   82020:	f003 0301 	and.w	r3, r3, #1
   82024:	4a37      	ldr	r2, [pc, #220]	; (82104 <main+0x318>)
   82026:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   82028:	4b36      	ldr	r3, [pc, #216]	; (82104 <main+0x318>)
   8202a:	681b      	ldr	r3, [r3, #0]
   8202c:	2b01      	cmp	r3, #1
   8202e:	d10b      	bne.n	82048 <main+0x25c>
   82030:	4b36      	ldr	r3, [pc, #216]	; (8210c <main+0x320>)
   82032:	681b      	ldr	r3, [r3, #0]
   82034:	2b00      	cmp	r3, #0
   82036:	d107      	bne.n	82048 <main+0x25c>
				{
				 bicarb_count ++;
   82038:	4b46      	ldr	r3, [pc, #280]	; (82154 <main+0x368>)
   8203a:	681b      	ldr	r3, [r3, #0]
   8203c:	3301      	adds	r3, #1
   8203e:	4a45      	ldr	r2, [pc, #276]	; (82154 <main+0x368>)
   82040:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   82042:	4b45      	ldr	r3, [pc, #276]	; (82158 <main+0x36c>)
   82044:	2200      	movs	r2, #0
   82046:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   82048:	4b2e      	ldr	r3, [pc, #184]	; (82104 <main+0x318>)
   8204a:	681b      	ldr	r3, [r3, #0]
   8204c:	4a2f      	ldr	r2, [pc, #188]	; (8210c <main+0x320>)
   8204e:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1) && (OneSecFlag == 1))
   82050:	4b42      	ldr	r3, [pc, #264]	; (8215c <main+0x370>)
   82052:	781b      	ldrb	r3, [r3, #0]
   82054:	b2db      	uxtb	r3, r3
   82056:	2b01      	cmp	r3, #1
   82058:	d131      	bne.n	820be <main+0x2d2>
   8205a:	4b33      	ldr	r3, [pc, #204]	; (82128 <main+0x33c>)
   8205c:	681b      	ldr	r3, [r3, #0]
   8205e:	2b01      	cmp	r3, #1
   82060:	d12d      	bne.n	820be <main+0x2d2>
   82062:	4b37      	ldr	r3, [pc, #220]	; (82140 <main+0x354>)
   82064:	681b      	ldr	r3, [r3, #0]
   82066:	2b01      	cmp	r3, #1
   82068:	d129      	bne.n	820be <main+0x2d2>
   8206a:	4b3d      	ldr	r3, [pc, #244]	; (82160 <main+0x374>)
   8206c:	781b      	ldrb	r3, [r3, #0]
   8206e:	2b01      	cmp	r3, #1
   82070:	d125      	bne.n	820be <main+0x2d2>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   82072:	4b23      	ldr	r3, [pc, #140]	; (82100 <main+0x314>)
   82074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82076:	0e9b      	lsrs	r3, r3, #26
   82078:	f003 0301 	and.w	r3, r3, #1
   8207c:	4a22      	ldr	r2, [pc, #136]	; (82108 <main+0x31c>)
   8207e:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   82080:	4b21      	ldr	r3, [pc, #132]	; (82108 <main+0x31c>)
   82082:	681b      	ldr	r3, [r3, #0]
   82084:	2b01      	cmp	r3, #1
   82086:	d116      	bne.n	820b6 <main+0x2ca>
   82088:	4b21      	ldr	r3, [pc, #132]	; (82110 <main+0x324>)
   8208a:	681b      	ldr	r3, [r3, #0]
   8208c:	2b00      	cmp	r3, #0
   8208e:	d112      	bne.n	820b6 <main+0x2ca>
			{
				
				//startTimer1(TC0,2,TC2_IRQn,stepcount);
			//	PIOB->PIO_SODR = 1 << 19 ;
				start_acidpump();
   82090:	4b34      	ldr	r3, [pc, #208]	; (82164 <main+0x378>)
   82092:	4798      	blx	r3
				start_bicarpump();
   82094:	4b34      	ldr	r3, [pc, #208]	; (82168 <main+0x37c>)
   82096:	4798      	blx	r3
				//tc_stop(TC0,2);
				OneSecFlag = 0;
   82098:	4b31      	ldr	r3, [pc, #196]	; (82160 <main+0x374>)
   8209a:	2200      	movs	r2, #0
   8209c:	701a      	strb	r2, [r3, #0]
				startTimerSec(TC0,4,TC4_IRQn,secondcount);
   8209e:	4826      	ldr	r0, [pc, #152]	; (82138 <main+0x34c>)
   820a0:	2104      	movs	r1, #4
   820a2:	221f      	movs	r2, #31
   820a4:	68fb      	ldr	r3, [r7, #12]
   820a6:	4c31      	ldr	r4, [pc, #196]	; (8216c <main+0x380>)
   820a8:	47a0      	blx	r4
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   820aa:	4823      	ldr	r0, [pc, #140]	; (82138 <main+0x34c>)
   820ac:	2102      	movs	r1, #2
   820ae:	221d      	movs	r2, #29
   820b0:	693b      	ldr	r3, [r7, #16]
   820b2:	4c2f      	ldr	r4, [pc, #188]	; (82170 <main+0x384>)
   820b4:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   820b6:	4b14      	ldr	r3, [pc, #80]	; (82108 <main+0x31c>)
   820b8:	681b      	ldr	r3, [r3, #0]
   820ba:	4a15      	ldr	r2, [pc, #84]	; (82110 <main+0x324>)
   820bc:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   820be:	4b2d      	ldr	r3, [pc, #180]	; (82174 <main+0x388>)
   820c0:	781b      	ldrb	r3, [r3, #0]
   820c2:	2b05      	cmp	r3, #5
   820c4:	f63f af2e 	bhi.w	81f24 <main+0x138>
   820c8:	a201      	add	r2, pc, #4	; (adr r2, 820d0 <main+0x2e4>)
   820ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   820ce:	bf00      	nop
   820d0:	00082179 	.word	0x00082179
   820d4:	000821a9 	.word	0x000821a9
   820d8:	00081f25 	.word	0x00081f25
   820dc:	00082193 	.word	0x00082193
   820e0:	000821c3 	.word	0x000821c3
   820e4:	000821d9 	.word	0x000821d9
   820e8:	0001869f 	.word	0x0001869f
   820ec:	00086a4c 	.word	0x00086a4c
   820f0:	00083ab9 	.word	0x00083ab9
   820f4:	00083265 	.word	0x00083265
   820f8:	400e1000 	.word	0x400e1000
   820fc:	20070cec 	.word	0x20070cec
   82100:	400e1200 	.word	0x400e1200
   82104:	20070cf0 	.word	0x20070cf0
   82108:	20070cf4 	.word	0x20070cf4
   8210c:	20070cf8 	.word	0x20070cf8
   82110:	20070cfc 	.word	0x20070cfc
   82114:	001406f3 	.word	0x001406f3
   82118:	000f0535 	.word	0x000f0535
   8211c:	400e0800 	.word	0x400e0800
   82120:	00081531 	.word	0x00081531
   82124:	20070cd4 	.word	0x20070cd4
   82128:	20070d00 	.word	0x20070d00
   8212c:	400e0e00 	.word	0x400e0e00
   82130:	20070d04 	.word	0x20070d04
   82134:	20070d08 	.word	0x20070d08
   82138:	40080000 	.word	0x40080000
   8213c:	000813f5 	.word	0x000813f5
   82140:	20070d0c 	.word	0x20070d0c
   82144:	20070d10 	.word	0x20070d10
   82148:	20070cdc 	.word	0x20070cdc
   8214c:	20070ce0 	.word	0x20070ce0
   82150:	20070ca0 	.word	0x20070ca0
   82154:	20070ce4 	.word	0x20070ce4
   82158:	20070ca4 	.word	0x20070ca4
   8215c:	20070cd5 	.word	0x20070cd5
   82160:	20070cb0 	.word	0x20070cb0
   82164:	00082575 	.word	0x00082575
   82168:	00082621 	.word	0x00082621
   8216c:	00081149 	.word	0x00081149
   82170:	000811b9 	.word	0x000811b9
   82174:	20070400 	.word	0x20070400
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   82178:	4ba8      	ldr	r3, [pc, #672]	; (8241c <main+0x630>)
   8217a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8217e:	601a      	str	r2, [r3, #0]
					start_acidpump();
   82180:	4ba7      	ldr	r3, [pc, #668]	; (82420 <main+0x634>)
   82182:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   82184:	4ba7      	ldr	r3, [pc, #668]	; (82424 <main+0x638>)
   82186:	2203      	movs	r2, #3
   82188:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   8218a:	4ba7      	ldr	r3, [pc, #668]	; (82428 <main+0x63c>)
   8218c:	2200      	movs	r2, #0
   8218e:	701a      	strb	r2, [r3, #0]
				break;
   82190:	e1d5      	b.n	8253e <main+0x752>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   82192:	4ba6      	ldr	r3, [pc, #664]	; (8242c <main+0x640>)
   82194:	681b      	ldr	r3, [r3, #0]
   82196:	2b01      	cmp	r3, #1
   82198:	d102      	bne.n	821a0 <main+0x3b4>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   8219a:	4ba2      	ldr	r3, [pc, #648]	; (82424 <main+0x638>)
   8219c:	2201      	movs	r2, #1
   8219e:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   821a0:	4ba1      	ldr	r3, [pc, #644]	; (82428 <main+0x63c>)
   821a2:	2200      	movs	r2, #0
   821a4:	701a      	strb	r2, [r3, #0]
				break;
   821a6:	e1ca      	b.n	8253e <main+0x752>
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   821a8:	4ba1      	ldr	r3, [pc, #644]	; (82430 <main+0x644>)
   821aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   821ae:	601a      	str	r2, [r3, #0]
					start_bicarpump();
   821b0:	4ba0      	ldr	r3, [pc, #640]	; (82434 <main+0x648>)
   821b2:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   821b4:	4b9b      	ldr	r3, [pc, #620]	; (82424 <main+0x638>)
   821b6:	2204      	movs	r2, #4
   821b8:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   821ba:	4b9b      	ldr	r3, [pc, #620]	; (82428 <main+0x63c>)
   821bc:	2200      	movs	r2, #0
   821be:	701a      	strb	r2, [r3, #0]
				break;
   821c0:	e1bd      	b.n	8253e <main+0x752>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   821c2:	4b9d      	ldr	r3, [pc, #628]	; (82438 <main+0x64c>)
   821c4:	681b      	ldr	r3, [r3, #0]
   821c6:	2b01      	cmp	r3, #1
   821c8:	d102      	bne.n	821d0 <main+0x3e4>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   821ca:	4b96      	ldr	r3, [pc, #600]	; (82424 <main+0x638>)
   821cc:	2205      	movs	r2, #5
   821ce:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   821d0:	4b95      	ldr	r3, [pc, #596]	; (82428 <main+0x63c>)
   821d2:	2200      	movs	r2, #0
   821d4:	701a      	strb	r2, [r3, #0]
				break;
   821d6:	e1b2      	b.n	8253e <main+0x752>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   821d8:	4b98      	ldr	r3, [pc, #608]	; (8243c <main+0x650>)
   821da:	781b      	ldrb	r3, [r3, #0]
   821dc:	b2db      	uxtb	r3, r3
   821de:	2b01      	cmp	r3, #1
   821e0:	f040 81ad 	bne.w	8253e <main+0x752>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   821e4:	4b96      	ldr	r3, [pc, #600]	; (82440 <main+0x654>)
   821e6:	781b      	ldrb	r3, [r3, #0]
   821e8:	71fb      	strb	r3, [r7, #7]
						switch (dummy)
   821ea:	79fb      	ldrb	r3, [r7, #7]
   821ec:	3b01      	subs	r3, #1
   821ee:	2b0c      	cmp	r3, #12
   821f0:	f200 819a 	bhi.w	82528 <main+0x73c>
   821f4:	a201      	add	r2, pc, #4	; (adr r2, 821fc <main+0x410>)
   821f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821fa:	bf00      	nop
   821fc:	00082283 	.word	0x00082283
   82200:	000822d9 	.word	0x000822d9
   82204:	00082517 	.word	0x00082517
   82208:	0008229d 	.word	0x0008229d
   8220c:	000822af 	.word	0x000822af
   82210:	000822bb 	.word	0x000822bb
   82214:	000822cd 	.word	0x000822cd
   82218:	00082249 	.word	0x00082249
   8221c:	0008226b 	.word	0x0008226b
   82220:	00082529 	.word	0x00082529
   82224:	00082529 	.word	0x00082529
   82228:	00082231 	.word	0x00082231
   8222c:	0008223d 	.word	0x0008223d
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   82230:	4b7a      	ldr	r3, [pc, #488]	; (8241c <main+0x630>)
   82232:	22d2      	movs	r2, #210	; 0xd2
   82234:	601a      	str	r2, [r3, #0]
															start_acidpump();
   82236:	4b7a      	ldr	r3, [pc, #488]	; (82420 <main+0x634>)
   82238:	4798      	blx	r3
							
							break;
   8223a:	e176      	b.n	8252a <main+0x73e>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   8223c:	4b7c      	ldr	r3, [pc, #496]	; (82430 <main+0x644>)
   8223e:	22d2      	movs	r2, #210	; 0xd2
   82240:	601a      	str	r2, [r3, #0]
															start_bicarpump();
   82242:	4b7c      	ldr	r3, [pc, #496]	; (82434 <main+0x648>)
   82244:	4798      	blx	r3
							
							break;
   82246:	e170      	b.n	8252a <main+0x73e>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
								rc=210;
   82248:	4b74      	ldr	r3, [pc, #464]	; (8241c <main+0x630>)
   8224a:	22d2      	movs	r2, #210	; 0xd2
   8224c:	601a      	str	r2, [r3, #0]
								bic_rc=210;
   8224e:	4b78      	ldr	r3, [pc, #480]	; (82430 <main+0x644>)
   82250:	22d2      	movs	r2, #210	; 0xd2
   82252:	601a      	str	r2, [r3, #0]
								start_acidpump();
   82254:	4b72      	ldr	r3, [pc, #456]	; (82420 <main+0x634>)
   82256:	4798      	blx	r3
								start_bicarpump();
   82258:	4b76      	ldr	r3, [pc, #472]	; (82434 <main+0x648>)
   8225a:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8225c:	4b71      	ldr	r3, [pc, #452]	; (82424 <main+0x638>)
   8225e:	2205      	movs	r2, #5
   82260:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   82262:	4b78      	ldr	r3, [pc, #480]	; (82444 <main+0x658>)
   82264:	2201      	movs	r2, #1
   82266:	701a      	strb	r2, [r3, #0]
							break;
   82268:	e15f      	b.n	8252a <main+0x73e>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
								stop_pump();
   8226a:	4b77      	ldr	r3, [pc, #476]	; (82448 <main+0x65c>)
   8226c:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8226e:	4b6d      	ldr	r3, [pc, #436]	; (82424 <main+0x638>)
   82270:	2205      	movs	r2, #5
   82272:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82274:	4b6c      	ldr	r3, [pc, #432]	; (82428 <main+0x63c>)
   82276:	2200      	movs	r2, #0
   82278:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   8227a:	4b72      	ldr	r3, [pc, #456]	; (82444 <main+0x658>)
   8227c:	2200      	movs	r2, #0
   8227e:	701a      	strb	r2, [r3, #0]
							break;
   82280:	e153      	b.n	8252a <main+0x73e>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_1=0;
   82282:	4b6a      	ldr	r3, [pc, #424]	; (8242c <main+0x640>)
   82284:	2200      	movs	r2, #0
   82286:	601a      	str	r2, [r3, #0]
							flag_1b=0;
   82288:	4b6b      	ldr	r3, [pc, #428]	; (82438 <main+0x64c>)
   8228a:	2200      	movs	r2, #0
   8228c:	601a      	str	r2, [r3, #0]
							flag_nrmal=0;
   8228e:	4b66      	ldr	r3, [pc, #408]	; (82428 <main+0x63c>)
   82290:	2200      	movs	r2, #0
   82292:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   82294:	4b63      	ldr	r3, [pc, #396]	; (82424 <main+0x638>)
   82296:	2200      	movs	r2, #0
   82298:	701a      	strb	r2, [r3, #0]
							break;
   8229a:	e146      	b.n	8252a <main+0x73e>
							case PROP_START_DISINFECTION:
								rc=210;
   8229c:	4b5f      	ldr	r3, [pc, #380]	; (8241c <main+0x630>)
   8229e:	22d2      	movs	r2, #210	; 0xd2
   822a0:	601a      	str	r2, [r3, #0]
								start_acidpump();
   822a2:	4b5f      	ldr	r3, [pc, #380]	; (82420 <main+0x634>)
   822a4:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822a6:	4b5f      	ldr	r3, [pc, #380]	; (82424 <main+0x638>)
   822a8:	2205      	movs	r2, #5
   822aa:	701a      	strb	r2, [r3, #0]
							break;
   822ac:	e13d      	b.n	8252a <main+0x73e>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   822ae:	4b66      	ldr	r3, [pc, #408]	; (82448 <main+0x65c>)
   822b0:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822b2:	4b5c      	ldr	r3, [pc, #368]	; (82424 <main+0x638>)
   822b4:	2205      	movs	r2, #5
   822b6:	701a      	strb	r2, [r3, #0]
							break;
   822b8:	e137      	b.n	8252a <main+0x73e>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   822ba:	4b5d      	ldr	r3, [pc, #372]	; (82430 <main+0x644>)
   822bc:	22d2      	movs	r2, #210	; 0xd2
   822be:	601a      	str	r2, [r3, #0]
								start_bicarpump();
   822c0:	4b5c      	ldr	r3, [pc, #368]	; (82434 <main+0x648>)
   822c2:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822c4:	4b57      	ldr	r3, [pc, #348]	; (82424 <main+0x638>)
   822c6:	2205      	movs	r2, #5
   822c8:	701a      	strb	r2, [r3, #0]
							break;
   822ca:	e12e      	b.n	8252a <main+0x73e>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   822cc:	4b5e      	ldr	r3, [pc, #376]	; (82448 <main+0x65c>)
   822ce:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822d0:	4b54      	ldr	r3, [pc, #336]	; (82424 <main+0x638>)
   822d2:	2205      	movs	r2, #5
   822d4:	701a      	strb	r2, [r3, #0]
							break;
   822d6:	e128      	b.n	8252a <main+0x73e>
							case PROP_START_MIXING:
							OneSecFlag = 1 ;
   822d8:	4b5c      	ldr	r3, [pc, #368]	; (8244c <main+0x660>)
   822da:	2201      	movs	r2, #1
   822dc:	701a      	strb	r2, [r3, #0]
								switch(User_setConductivity)
   822de:	4b5c      	ldr	r3, [pc, #368]	; (82450 <main+0x664>)
   822e0:	881b      	ldrh	r3, [r3, #0]
   822e2:	b29b      	uxth	r3, r3
   822e4:	3b87      	subs	r3, #135	; 0x87
   822e6:	2b18      	cmp	r3, #24
   822e8:	f200 8101 	bhi.w	824ee <main+0x702>
   822ec:	a201      	add	r2, pc, #4	; (adr r2, 822f4 <main+0x508>)
   822ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   822f2:	bf00      	nop
   822f4:	00082359 	.word	0x00082359
   822f8:	00082367 	.word	0x00082367
   822fc:	00082375 	.word	0x00082375
   82300:	00082383 	.word	0x00082383
   82304:	00082391 	.word	0x00082391
   82308:	0008239f 	.word	0x0008239f
   8230c:	000823ad 	.word	0x000823ad
   82310:	000823bb 	.word	0x000823bb
   82314:	000823c9 	.word	0x000823c9
   82318:	000823d7 	.word	0x000823d7
   8231c:	000823e5 	.word	0x000823e5
   82320:	000823f3 	.word	0x000823f3
   82324:	00082401 	.word	0x00082401
   82328:	0008240f 	.word	0x0008240f
   8232c:	00082455 	.word	0x00082455
   82330:	00082463 	.word	0x00082463
   82334:	00082471 	.word	0x00082471
   82338:	0008247f 	.word	0x0008247f
   8233c:	0008248d 	.word	0x0008248d
   82340:	0008249b 	.word	0x0008249b
   82344:	000824a9 	.word	0x000824a9
   82348:	000824b7 	.word	0x000824b7
   8234c:	000824c5 	.word	0x000824c5
   82350:	000824d3 	.word	0x000824d3
   82354:	000824e1 	.word	0x000824e1
									{
										case 135:
											rc= 213;
   82358:	4b30      	ldr	r3, [pc, #192]	; (8241c <main+0x630>)
   8235a:	22d5      	movs	r2, #213	; 0xd5
   8235c:	601a      	str	r2, [r3, #0]
											bic_rc = 213;
   8235e:	4b34      	ldr	r3, [pc, #208]	; (82430 <main+0x644>)
   82360:	22d5      	movs	r2, #213	; 0xd5
   82362:	601a      	str	r2, [r3, #0]
										break;
   82364:	e0c3      	b.n	824ee <main+0x702>
										
										case 136:
 											rc= 210;
   82366:	4b2d      	ldr	r3, [pc, #180]	; (8241c <main+0x630>)
   82368:	22d2      	movs	r2, #210	; 0xd2
   8236a:	601a      	str	r2, [r3, #0]
 											bic_rc = 210;
   8236c:	4b30      	ldr	r3, [pc, #192]	; (82430 <main+0x644>)
   8236e:	22d2      	movs	r2, #210	; 0xd2
   82370:	601a      	str	r2, [r3, #0]
 										break;
   82372:	e0bc      	b.n	824ee <main+0x702>
									
 										case 137:
 											rc= 210;
   82374:	4b29      	ldr	r3, [pc, #164]	; (8241c <main+0x630>)
   82376:	22d2      	movs	r2, #210	; 0xd2
   82378:	601a      	str	r2, [r3, #0]
 											bic_rc = 210;
   8237a:	4b2d      	ldr	r3, [pc, #180]	; (82430 <main+0x644>)
   8237c:	22d2      	movs	r2, #210	; 0xd2
   8237e:	601a      	str	r2, [r3, #0]
 										break;
   82380:	e0b5      	b.n	824ee <main+0x702>
 										
										case 138:
											rc= 207;
   82382:	4b26      	ldr	r3, [pc, #152]	; (8241c <main+0x630>)
   82384:	22cf      	movs	r2, #207	; 0xcf
   82386:	601a      	str	r2, [r3, #0]
											bic_rc = 207;
   82388:	4b29      	ldr	r3, [pc, #164]	; (82430 <main+0x644>)
   8238a:	22cf      	movs	r2, #207	; 0xcf
   8238c:	601a      	str	r2, [r3, #0]
										break;
   8238e:	e0ae      	b.n	824ee <main+0x702>
										
										case 139:
											rc= 207;
   82390:	4b22      	ldr	r3, [pc, #136]	; (8241c <main+0x630>)
   82392:	22cf      	movs	r2, #207	; 0xcf
   82394:	601a      	str	r2, [r3, #0]
											bic_rc = 207;
   82396:	4b26      	ldr	r3, [pc, #152]	; (82430 <main+0x644>)
   82398:	22cf      	movs	r2, #207	; 0xcf
   8239a:	601a      	str	r2, [r3, #0]
										break;
   8239c:	e0a7      	b.n	824ee <main+0x702>
										
										case 140:
											rc= 204;
   8239e:	4b1f      	ldr	r3, [pc, #124]	; (8241c <main+0x630>)
   823a0:	22cc      	movs	r2, #204	; 0xcc
   823a2:	601a      	str	r2, [r3, #0]
											bic_rc = 204;
   823a4:	4b22      	ldr	r3, [pc, #136]	; (82430 <main+0x644>)
   823a6:	22cc      	movs	r2, #204	; 0xcc
   823a8:	601a      	str	r2, [r3, #0]
										break;
   823aa:	e0a0      	b.n	824ee <main+0x702>
										
										case 141:
											rc= 204;
   823ac:	4b1b      	ldr	r3, [pc, #108]	; (8241c <main+0x630>)
   823ae:	22cc      	movs	r2, #204	; 0xcc
   823b0:	601a      	str	r2, [r3, #0]
											bic_rc = 204;
   823b2:	4b1f      	ldr	r3, [pc, #124]	; (82430 <main+0x644>)
   823b4:	22cc      	movs	r2, #204	; 0xcc
   823b6:	601a      	str	r2, [r3, #0]
										break;
   823b8:	e099      	b.n	824ee <main+0x702>
										
										case 142:
											rc= 201;
   823ba:	4b18      	ldr	r3, [pc, #96]	; (8241c <main+0x630>)
   823bc:	22c9      	movs	r2, #201	; 0xc9
   823be:	601a      	str	r2, [r3, #0]
											bic_rc = 201;
   823c0:	4b1b      	ldr	r3, [pc, #108]	; (82430 <main+0x644>)
   823c2:	22c9      	movs	r2, #201	; 0xc9
   823c4:	601a      	str	r2, [r3, #0]
										break;
   823c6:	e092      	b.n	824ee <main+0x702>
										
										case 143:
											rc= 201;
   823c8:	4b14      	ldr	r3, [pc, #80]	; (8241c <main+0x630>)
   823ca:	22c9      	movs	r2, #201	; 0xc9
   823cc:	601a      	str	r2, [r3, #0]
											bic_rc = 201;
   823ce:	4b18      	ldr	r3, [pc, #96]	; (82430 <main+0x644>)
   823d0:	22c9      	movs	r2, #201	; 0xc9
   823d2:	601a      	str	r2, [r3, #0]
										break;
   823d4:	e08b      	b.n	824ee <main+0x702>
										
										case 144:
											rc= 198;
   823d6:	4b11      	ldr	r3, [pc, #68]	; (8241c <main+0x630>)
   823d8:	22c6      	movs	r2, #198	; 0xc6
   823da:	601a      	str	r2, [r3, #0]
											bic_rc = 198;
   823dc:	4b14      	ldr	r3, [pc, #80]	; (82430 <main+0x644>)
   823de:	22c6      	movs	r2, #198	; 0xc6
   823e0:	601a      	str	r2, [r3, #0]
										break;
   823e2:	e084      	b.n	824ee <main+0x702>
										
										case 145:
											rc= 198;
   823e4:	4b0d      	ldr	r3, [pc, #52]	; (8241c <main+0x630>)
   823e6:	22c6      	movs	r2, #198	; 0xc6
   823e8:	601a      	str	r2, [r3, #0]
											bic_rc = 198;
   823ea:	4b11      	ldr	r3, [pc, #68]	; (82430 <main+0x644>)
   823ec:	22c6      	movs	r2, #198	; 0xc6
   823ee:	601a      	str	r2, [r3, #0]
										break;		
   823f0:	e07d      	b.n	824ee <main+0x702>
												case 146:
												rc= 195;
   823f2:	4b0a      	ldr	r3, [pc, #40]	; (8241c <main+0x630>)
   823f4:	22c3      	movs	r2, #195	; 0xc3
   823f6:	601a      	str	r2, [r3, #0]
												bic_rc = 195;
   823f8:	4b0d      	ldr	r3, [pc, #52]	; (82430 <main+0x644>)
   823fa:	22c3      	movs	r2, #195	; 0xc3
   823fc:	601a      	str	r2, [r3, #0]
												break;
   823fe:	e076      	b.n	824ee <main+0x702>
												
												case 147:
												rc= 195;
   82400:	4b06      	ldr	r3, [pc, #24]	; (8241c <main+0x630>)
   82402:	22c3      	movs	r2, #195	; 0xc3
   82404:	601a      	str	r2, [r3, #0]
												bic_rc = 195;
   82406:	4b0a      	ldr	r3, [pc, #40]	; (82430 <main+0x644>)
   82408:	22c3      	movs	r2, #195	; 0xc3
   8240a:	601a      	str	r2, [r3, #0]
												break;
   8240c:	e06f      	b.n	824ee <main+0x702>
												
												case 148:
												rc= 192;
   8240e:	4b03      	ldr	r3, [pc, #12]	; (8241c <main+0x630>)
   82410:	22c0      	movs	r2, #192	; 0xc0
   82412:	601a      	str	r2, [r3, #0]
												bic_rc = 192;
   82414:	4b06      	ldr	r3, [pc, #24]	; (82430 <main+0x644>)
   82416:	22c0      	movs	r2, #192	; 0xc0
   82418:	601a      	str	r2, [r3, #0]
												break;
   8241a:	e068      	b.n	824ee <main+0x702>
   8241c:	20070cd8 	.word	0x20070cd8
   82420:	00082575 	.word	0x00082575
   82424:	20070400 	.word	0x20070400
   82428:	20070cd5 	.word	0x20070cd5
   8242c:	20070d00 	.word	0x20070d00
   82430:	2007120c 	.word	0x2007120c
   82434:	00082621 	.word	0x00082621
   82438:	20070d0c 	.word	0x20070d0c
   8243c:	20070df0 	.word	0x20070df0
   82440:	20070c94 	.word	0x20070c94
   82444:	20070cd4 	.word	0x20070cd4
   82448:	000826bd 	.word	0x000826bd
   8244c:	20070cb0 	.word	0x20070cb0
   82450:	20070dca 	.word	0x20070dca
												
												case 149:
												rc= 192;
   82454:	4b3a      	ldr	r3, [pc, #232]	; (82540 <main+0x754>)
   82456:	22c0      	movs	r2, #192	; 0xc0
   82458:	601a      	str	r2, [r3, #0]
												bic_rc = 192;
   8245a:	4b3a      	ldr	r3, [pc, #232]	; (82544 <main+0x758>)
   8245c:	22c0      	movs	r2, #192	; 0xc0
   8245e:	601a      	str	r2, [r3, #0]
												break;
   82460:	e045      	b.n	824ee <main+0x702>
												
												case 150:
												rc= 189;
   82462:	4b37      	ldr	r3, [pc, #220]	; (82540 <main+0x754>)
   82464:	22bd      	movs	r2, #189	; 0xbd
   82466:	601a      	str	r2, [r3, #0]
												bic_rc = 189;
   82468:	4b36      	ldr	r3, [pc, #216]	; (82544 <main+0x758>)
   8246a:	22bd      	movs	r2, #189	; 0xbd
   8246c:	601a      	str	r2, [r3, #0]
												break;
   8246e:	e03e      	b.n	824ee <main+0x702>
												
												case 151:
												rc= 189;
   82470:	4b33      	ldr	r3, [pc, #204]	; (82540 <main+0x754>)
   82472:	22bd      	movs	r2, #189	; 0xbd
   82474:	601a      	str	r2, [r3, #0]
												bic_rc = 189;
   82476:	4b33      	ldr	r3, [pc, #204]	; (82544 <main+0x758>)
   82478:	22bd      	movs	r2, #189	; 0xbd
   8247a:	601a      	str	r2, [r3, #0]
												break;
   8247c:	e037      	b.n	824ee <main+0x702>
												
												case 152:
												rc= 186;
   8247e:	4b30      	ldr	r3, [pc, #192]	; (82540 <main+0x754>)
   82480:	22ba      	movs	r2, #186	; 0xba
   82482:	601a      	str	r2, [r3, #0]
												bic_rc = 186;
   82484:	4b2f      	ldr	r3, [pc, #188]	; (82544 <main+0x758>)
   82486:	22ba      	movs	r2, #186	; 0xba
   82488:	601a      	str	r2, [r3, #0]
												break;
   8248a:	e030      	b.n	824ee <main+0x702>
												
												case 153:
												rc= 186;
   8248c:	4b2c      	ldr	r3, [pc, #176]	; (82540 <main+0x754>)
   8248e:	22ba      	movs	r2, #186	; 0xba
   82490:	601a      	str	r2, [r3, #0]
												bic_rc = 186;
   82492:	4b2c      	ldr	r3, [pc, #176]	; (82544 <main+0x758>)
   82494:	22ba      	movs	r2, #186	; 0xba
   82496:	601a      	str	r2, [r3, #0]
												break;
   82498:	e029      	b.n	824ee <main+0x702>
												
												case 154:
												rc= 183;
   8249a:	4b29      	ldr	r3, [pc, #164]	; (82540 <main+0x754>)
   8249c:	22b7      	movs	r2, #183	; 0xb7
   8249e:	601a      	str	r2, [r3, #0]
												bic_rc = 183;
   824a0:	4b28      	ldr	r3, [pc, #160]	; (82544 <main+0x758>)
   824a2:	22b7      	movs	r2, #183	; 0xb7
   824a4:	601a      	str	r2, [r3, #0]
												break;	
   824a6:	e022      	b.n	824ee <main+0x702>
												case 155:
												rc= 183;
   824a8:	4b25      	ldr	r3, [pc, #148]	; (82540 <main+0x754>)
   824aa:	22b7      	movs	r2, #183	; 0xb7
   824ac:	601a      	str	r2, [r3, #0]
												bic_rc = 183;
   824ae:	4b25      	ldr	r3, [pc, #148]	; (82544 <main+0x758>)
   824b0:	22b7      	movs	r2, #183	; 0xb7
   824b2:	601a      	str	r2, [r3, #0]
												break;
   824b4:	e01b      	b.n	824ee <main+0x702>
												
												case 156:
												rc= 180;
   824b6:	4b22      	ldr	r3, [pc, #136]	; (82540 <main+0x754>)
   824b8:	22b4      	movs	r2, #180	; 0xb4
   824ba:	601a      	str	r2, [r3, #0]
												bic_rc = 180;
   824bc:	4b21      	ldr	r3, [pc, #132]	; (82544 <main+0x758>)
   824be:	22b4      	movs	r2, #180	; 0xb4
   824c0:	601a      	str	r2, [r3, #0]
												break;
   824c2:	e014      	b.n	824ee <main+0x702>
												
												case 157:
												rc= 180;
   824c4:	4b1e      	ldr	r3, [pc, #120]	; (82540 <main+0x754>)
   824c6:	22b4      	movs	r2, #180	; 0xb4
   824c8:	601a      	str	r2, [r3, #0]
												bic_rc = 180;
   824ca:	4b1e      	ldr	r3, [pc, #120]	; (82544 <main+0x758>)
   824cc:	22b4      	movs	r2, #180	; 0xb4
   824ce:	601a      	str	r2, [r3, #0]
												break;
   824d0:	e00d      	b.n	824ee <main+0x702>
												
												case 158:
												rc= 177;
   824d2:	4b1b      	ldr	r3, [pc, #108]	; (82540 <main+0x754>)
   824d4:	22b1      	movs	r2, #177	; 0xb1
   824d6:	601a      	str	r2, [r3, #0]
												bic_rc = 177;
   824d8:	4b1a      	ldr	r3, [pc, #104]	; (82544 <main+0x758>)
   824da:	22b1      	movs	r2, #177	; 0xb1
   824dc:	601a      	str	r2, [r3, #0]
												break;
   824de:	e006      	b.n	824ee <main+0x702>
												
												case 159:
												rc= 177;
   824e0:	4b17      	ldr	r3, [pc, #92]	; (82540 <main+0x754>)
   824e2:	22b1      	movs	r2, #177	; 0xb1
   824e4:	601a      	str	r2, [r3, #0]
												bic_rc = 177;
   824e6:	4b17      	ldr	r3, [pc, #92]	; (82544 <main+0x758>)
   824e8:	22b1      	movs	r2, #177	; 0xb1
   824ea:	601a      	str	r2, [r3, #0]
												break;
   824ec:	bf00      	nop
												
														
									}
						
							feedcount_flag = 1; // test - to be removed
   824ee:	4b16      	ldr	r3, [pc, #88]	; (82548 <main+0x75c>)
   824f0:	2201      	movs	r2, #1
   824f2:	701a      	strb	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   824f4:	4815      	ldr	r0, [pc, #84]	; (8254c <main+0x760>)
   824f6:	2102      	movs	r1, #2
   824f8:	221d      	movs	r2, #29
   824fa:	693b      	ldr	r3, [r7, #16]
   824fc:	4c14      	ldr	r4, [pc, #80]	; (82550 <main+0x764>)
   824fe:	47a0      	blx	r4
								//rc=184;
								//bic_rc=184;
// 								rc=195;   //273, 205 = 4 rotations per sec, 164 = 5rps, 136 =6 rps, 195 = 4.2 rps
// 								bic_rc=195;   
						
								start_acidpump();
   82500:	4b14      	ldr	r3, [pc, #80]	; (82554 <main+0x768>)
   82502:	4798      	blx	r3
								start_bicarpump();
   82504:	4b14      	ldr	r3, [pc, #80]	; (82558 <main+0x76c>)
   82506:	4798      	blx	r3
								flag_nrmal=1;
   82508:	4b14      	ldr	r3, [pc, #80]	; (8255c <main+0x770>)
   8250a:	2201      	movs	r2, #1
   8250c:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   8250e:	4b14      	ldr	r3, [pc, #80]	; (82560 <main+0x774>)
   82510:	2205      	movs	r2, #5
   82512:	701a      	strb	r2, [r3, #0]
							break;
   82514:	e009      	b.n	8252a <main+0x73e>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   82516:	4b13      	ldr	r3, [pc, #76]	; (82564 <main+0x778>)
   82518:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   8251a:	4b11      	ldr	r3, [pc, #68]	; (82560 <main+0x774>)
   8251c:	2205      	movs	r2, #5
   8251e:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82520:	4b0e      	ldr	r3, [pc, #56]	; (8255c <main+0x770>)
   82522:	2200      	movs	r2, #0
   82524:	701a      	strb	r2, [r3, #0]
							break;
   82526:	e000      	b.n	8252a <main+0x73e>
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   82528:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   8252a:	4b0f      	ldr	r3, [pc, #60]	; (82568 <main+0x77c>)
   8252c:	2200      	movs	r2, #0
   8252e:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   82530:	4b0e      	ldr	r3, [pc, #56]	; (8256c <main+0x780>)
   82532:	2200      	movs	r2, #0
   82534:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   82536:	4b0e      	ldr	r3, [pc, #56]	; (82570 <main+0x784>)
   82538:	2200      	movs	r2, #0
   8253a:	601a      	str	r2, [r3, #0]
				break;
   8253c:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   8253e:	e4f1      	b.n	81f24 <main+0x138>
   82540:	20070cd8 	.word	0x20070cd8
   82544:	2007120c 	.word	0x2007120c
   82548:	20070cdc 	.word	0x20070cdc
   8254c:	40080000 	.word	0x40080000
   82550:	000811b9 	.word	0x000811b9
   82554:	00082575 	.word	0x00082575
   82558:	00082621 	.word	0x00082621
   8255c:	20070cd5 	.word	0x20070cd5
   82560:	20070400 	.word	0x20070400
   82564:	000826bd 	.word	0x000826bd
   82568:	20070c94 	.word	0x20070c94
   8256c:	20070df0 	.word	0x20070df0
   82570:	20070c8e 	.word	0x20070c8e

00082574 <start_acidpump>:
	}
	
void start_acidpump()
{
   82574:	b598      	push	{r3, r4, r7, lr}
   82576:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   82578:	4b1f      	ldr	r3, [pc, #124]	; (825f8 <start_acidpump+0x84>)
   8257a:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8257e:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   82580:	4b1e      	ldr	r3, [pc, #120]	; (825fc <start_acidpump+0x88>)
   82582:	2203      	movs	r2, #3
   82584:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   82586:	4b1e      	ldr	r3, [pc, #120]	; (82600 <start_acidpump+0x8c>)
   82588:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8258c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   8258e:	4b1b      	ldr	r3, [pc, #108]	; (825fc <start_acidpump+0x88>)
   82590:	4a1c      	ldr	r2, [pc, #112]	; (82604 <start_acidpump+0x90>)
   82592:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   82596:	4b1a      	ldr	r3, [pc, #104]	; (82600 <start_acidpump+0x8c>)
   82598:	4a1a      	ldr	r2, [pc, #104]	; (82604 <start_acidpump+0x90>)
   8259a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   8259e:	4b17      	ldr	r3, [pc, #92]	; (825fc <start_acidpump+0x88>)
   825a0:	2203      	movs	r2, #3
   825a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   825a6:	4b15      	ldr	r3, [pc, #84]	; (825fc <start_acidpump+0x88>)
   825a8:	220c      	movs	r2, #12
   825aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   825ae:	4b14      	ldr	r3, [pc, #80]	; (82600 <start_acidpump+0x8c>)
   825b0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   825b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   825b8:	4b11      	ldr	r3, [pc, #68]	; (82600 <start_acidpump+0x8c>)
   825ba:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   825be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   825c2:	4a0e      	ldr	r2, [pc, #56]	; (825fc <start_acidpump+0x88>)
   825c4:	4b10      	ldr	r3, [pc, #64]	; (82608 <start_acidpump+0x94>)
   825c6:	681b      	ldr	r3, [r3, #0]
   825c8:	4910      	ldr	r1, [pc, #64]	; (8260c <start_acidpump+0x98>)
   825ca:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   825ce:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   825d0:	4a0b      	ldr	r2, [pc, #44]	; (82600 <start_acidpump+0x8c>)
   825d2:	4b0d      	ldr	r3, [pc, #52]	; (82608 <start_acidpump+0x94>)
   825d4:	681b      	ldr	r3, [r3, #0]
   825d6:	490d      	ldr	r1, [pc, #52]	; (8260c <start_acidpump+0x98>)
   825d8:	00db      	lsls	r3, r3, #3
   825da:	440b      	add	r3, r1
   825dc:	685b      	ldr	r3, [r3, #4]
   825de:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   825e0:	2001      	movs	r0, #1
   825e2:	4b0b      	ldr	r3, [pc, #44]	; (82610 <start_acidpump+0x9c>)
   825e4:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   825e6:	4b0b      	ldr	r3, [pc, #44]	; (82614 <start_acidpump+0xa0>)
   825e8:	681b      	ldr	r3, [r3, #0]
   825ea:	480b      	ldr	r0, [pc, #44]	; (82618 <start_acidpump+0xa4>)
   825ec:	2100      	movs	r1, #0
   825ee:	221b      	movs	r2, #27
   825f0:	4c0a      	ldr	r4, [pc, #40]	; (8261c <start_acidpump+0xa8>)
   825f2:	47a0      	blx	r4
}
   825f4:	bd98      	pop	{r3, r4, r7, pc}
   825f6:	bf00      	nop
   825f8:	400e0e00 	.word	0x400e0e00
   825fc:	400e1400 	.word	0x400e1400
   82600:	400e1200 	.word	0x400e1200
   82604:	50494f00 	.word	0x50494f00
   82608:	20070ccc 	.word	0x20070ccc
   8260c:	20070000 	.word	0x20070000
   82610:	00081229 	.word	0x00081229
   82614:	20070cd8 	.word	0x20070cd8
   82618:	40080000 	.word	0x40080000
   8261c:	00081069 	.word	0x00081069

00082620 <start_bicarpump>:

void start_bicarpump()
{
   82620:	b598      	push	{r3, r4, r7, lr}
   82622:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   82624:	4b1b      	ldr	r3, [pc, #108]	; (82694 <start_bicarpump+0x74>)
   82626:	4a1c      	ldr	r2, [pc, #112]	; (82698 <start_bicarpump+0x78>)
   82628:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   8262c:	4b1b      	ldr	r3, [pc, #108]	; (8269c <start_bicarpump+0x7c>)
   8262e:	4a1a      	ldr	r2, [pc, #104]	; (82698 <start_bicarpump+0x78>)
   82630:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   82634:	4b17      	ldr	r3, [pc, #92]	; (82694 <start_bicarpump+0x74>)
   82636:	220c      	movs	r2, #12
   82638:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   8263c:	4b15      	ldr	r3, [pc, #84]	; (82694 <start_bicarpump+0x74>)
   8263e:	2203      	movs	r2, #3
   82640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   82644:	4b15      	ldr	r3, [pc, #84]	; (8269c <start_bicarpump+0x7c>)
   82646:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   8264a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   8264e:	4b13      	ldr	r3, [pc, #76]	; (8269c <start_bicarpump+0x7c>)
   82650:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82654:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   82658:	4b11      	ldr	r3, [pc, #68]	; (826a0 <start_bicarpump+0x80>)
   8265a:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   8265e:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   82660:	4a0c      	ldr	r2, [pc, #48]	; (82694 <start_bicarpump+0x74>)
   82662:	4b10      	ldr	r3, [pc, #64]	; (826a4 <start_bicarpump+0x84>)
   82664:	681b      	ldr	r3, [r3, #0]
   82666:	4910      	ldr	r1, [pc, #64]	; (826a8 <start_bicarpump+0x88>)
   82668:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8266c:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   8266e:	4a0b      	ldr	r2, [pc, #44]	; (8269c <start_bicarpump+0x7c>)
   82670:	4b0c      	ldr	r3, [pc, #48]	; (826a4 <start_bicarpump+0x84>)
   82672:	681b      	ldr	r3, [r3, #0]
   82674:	490c      	ldr	r1, [pc, #48]	; (826a8 <start_bicarpump+0x88>)
   82676:	00db      	lsls	r3, r3, #3
   82678:	440b      	add	r3, r1
   8267a:	685b      	ldr	r3, [r3, #4]
   8267c:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   8267e:	2002      	movs	r0, #2
   82680:	4b0a      	ldr	r3, [pc, #40]	; (826ac <start_bicarpump+0x8c>)
   82682:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   82684:	4b0a      	ldr	r3, [pc, #40]	; (826b0 <start_bicarpump+0x90>)
   82686:	681b      	ldr	r3, [r3, #0]
   82688:	480a      	ldr	r0, [pc, #40]	; (826b4 <start_bicarpump+0x94>)
   8268a:	2101      	movs	r1, #1
   8268c:	221c      	movs	r2, #28
   8268e:	4c0a      	ldr	r4, [pc, #40]	; (826b8 <start_bicarpump+0x98>)
   82690:	47a0      	blx	r4
}
   82692:	bd98      	pop	{r3, r4, r7, pc}
   82694:	400e1400 	.word	0x400e1400
   82698:	50494f00 	.word	0x50494f00
   8269c:	400e1200 	.word	0x400e1200
   826a0:	400e1000 	.word	0x400e1000
   826a4:	20070cd0 	.word	0x20070cd0
   826a8:	20070200 	.word	0x20070200
   826ac:	00081229 	.word	0x00081229
   826b0:	2007120c 	.word	0x2007120c
   826b4:	40080000 	.word	0x40080000
   826b8:	000810d9 	.word	0x000810d9

000826bc <stop_pump>:

void stop_pump()
{
   826bc:	b580      	push	{r7, lr}
   826be:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   826c0:	2000      	movs	r0, #0
   826c2:	4b06      	ldr	r3, [pc, #24]	; (826dc <stop_pump+0x20>)
   826c4:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   826c6:	2001      	movs	r0, #1
   826c8:	4b04      	ldr	r3, [pc, #16]	; (826dc <stop_pump+0x20>)
   826ca:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   826cc:	2003      	movs	r0, #3
   826ce:	4b03      	ldr	r3, [pc, #12]	; (826dc <stop_pump+0x20>)
   826d0:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   826d2:	2004      	movs	r0, #4
   826d4:	4b01      	ldr	r3, [pc, #4]	; (826dc <stop_pump+0x20>)
   826d6:	4798      	blx	r3
}
   826d8:	bd80      	pop	{r7, pc}
   826da:	bf00      	nop
   826dc:	000812b5 	.word	0x000812b5

000826e0 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   826e0:	b580      	push	{r7, lr}
   826e2:	b082      	sub	sp, #8
   826e4:	af00      	add	r7, sp, #0
   826e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   826e8:	687b      	ldr	r3, [r7, #4]
   826ea:	2b07      	cmp	r3, #7
   826ec:	d830      	bhi.n	82750 <osc_enable+0x70>
   826ee:	a201      	add	r2, pc, #4	; (adr r2, 826f4 <osc_enable+0x14>)
   826f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   826f4:	00082751 	.word	0x00082751
   826f8:	00082715 	.word	0x00082715
   826fc:	0008271d 	.word	0x0008271d
   82700:	00082725 	.word	0x00082725
   82704:	0008272d 	.word	0x0008272d
   82708:	00082735 	.word	0x00082735
   8270c:	0008273d 	.word	0x0008273d
   82710:	00082747 	.word	0x00082747
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82714:	2000      	movs	r0, #0
   82716:	4b10      	ldr	r3, [pc, #64]	; (82758 <osc_enable+0x78>)
   82718:	4798      	blx	r3
		break;
   8271a:	e019      	b.n	82750 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8271c:	2001      	movs	r0, #1
   8271e:	4b0e      	ldr	r3, [pc, #56]	; (82758 <osc_enable+0x78>)
   82720:	4798      	blx	r3
		break;
   82722:	e015      	b.n	82750 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82724:	2000      	movs	r0, #0
   82726:	4b0d      	ldr	r3, [pc, #52]	; (8275c <osc_enable+0x7c>)
   82728:	4798      	blx	r3
		break;
   8272a:	e011      	b.n	82750 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8272c:	2010      	movs	r0, #16
   8272e:	4b0b      	ldr	r3, [pc, #44]	; (8275c <osc_enable+0x7c>)
   82730:	4798      	blx	r3
		break;
   82732:	e00d      	b.n	82750 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82734:	2020      	movs	r0, #32
   82736:	4b09      	ldr	r3, [pc, #36]	; (8275c <osc_enable+0x7c>)
   82738:	4798      	blx	r3
		break;
   8273a:	e009      	b.n	82750 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8273c:	2000      	movs	r0, #0
   8273e:	213e      	movs	r1, #62	; 0x3e
   82740:	4b07      	ldr	r3, [pc, #28]	; (82760 <osc_enable+0x80>)
   82742:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82744:	e004      	b.n	82750 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82746:	2001      	movs	r0, #1
   82748:	213e      	movs	r1, #62	; 0x3e
   8274a:	4b05      	ldr	r3, [pc, #20]	; (82760 <osc_enable+0x80>)
   8274c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8274e:	bf00      	nop
	}
}
   82750:	3708      	adds	r7, #8
   82752:	46bd      	mov	sp, r7
   82754:	bd80      	pop	{r7, pc}
   82756:	bf00      	nop
   82758:	00083075 	.word	0x00083075
   8275c:	000830e1 	.word	0x000830e1
   82760:	00083181 	.word	0x00083181

00082764 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82764:	b580      	push	{r7, lr}
   82766:	b082      	sub	sp, #8
   82768:	af00      	add	r7, sp, #0
   8276a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8276c:	687b      	ldr	r3, [r7, #4]
   8276e:	2b07      	cmp	r3, #7
   82770:	d826      	bhi.n	827c0 <osc_is_ready+0x5c>
   82772:	a201      	add	r2, pc, #4	; (adr r2, 82778 <osc_is_ready+0x14>)
   82774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82778:	00082799 	.word	0x00082799
   8277c:	0008279d 	.word	0x0008279d
   82780:	0008279d 	.word	0x0008279d
   82784:	000827af 	.word	0x000827af
   82788:	000827af 	.word	0x000827af
   8278c:	000827af 	.word	0x000827af
   82790:	000827af 	.word	0x000827af
   82794:	000827af 	.word	0x000827af
	case OSC_SLCK_32K_RC:
		return 1;
   82798:	2301      	movs	r3, #1
   8279a:	e012      	b.n	827c2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8279c:	4b0b      	ldr	r3, [pc, #44]	; (827cc <osc_is_ready+0x68>)
   8279e:	4798      	blx	r3
   827a0:	4603      	mov	r3, r0
   827a2:	2b00      	cmp	r3, #0
   827a4:	bf14      	ite	ne
   827a6:	2301      	movne	r3, #1
   827a8:	2300      	moveq	r3, #0
   827aa:	b2db      	uxtb	r3, r3
   827ac:	e009      	b.n	827c2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   827ae:	4b08      	ldr	r3, [pc, #32]	; (827d0 <osc_is_ready+0x6c>)
   827b0:	4798      	blx	r3
   827b2:	4603      	mov	r3, r0
   827b4:	2b00      	cmp	r3, #0
   827b6:	bf14      	ite	ne
   827b8:	2301      	movne	r3, #1
   827ba:	2300      	moveq	r3, #0
   827bc:	b2db      	uxtb	r3, r3
   827be:	e000      	b.n	827c2 <osc_is_ready+0x5e>
	}

	return 0;
   827c0:	2300      	movs	r3, #0
}
   827c2:	4618      	mov	r0, r3
   827c4:	3708      	adds	r7, #8
   827c6:	46bd      	mov	sp, r7
   827c8:	bd80      	pop	{r7, pc}
   827ca:	bf00      	nop
   827cc:	000830ad 	.word	0x000830ad
   827d0:	000831f9 	.word	0x000831f9

000827d4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   827d4:	b480      	push	{r7}
   827d6:	b083      	sub	sp, #12
   827d8:	af00      	add	r7, sp, #0
   827da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   827dc:	687b      	ldr	r3, [r7, #4]
   827de:	2b07      	cmp	r3, #7
   827e0:	d825      	bhi.n	8282e <osc_get_rate+0x5a>
   827e2:	a201      	add	r2, pc, #4	; (adr r2, 827e8 <osc_get_rate+0x14>)
   827e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   827e8:	00082809 	.word	0x00082809
   827ec:	0008280f 	.word	0x0008280f
   827f0:	00082815 	.word	0x00082815
   827f4:	0008281b 	.word	0x0008281b
   827f8:	0008281f 	.word	0x0008281f
   827fc:	00082823 	.word	0x00082823
   82800:	00082827 	.word	0x00082827
   82804:	0008282b 	.word	0x0008282b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82808:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8280c:	e010      	b.n	82830 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8280e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82812:	e00d      	b.n	82830 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82818:	e00a      	b.n	82830 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8281a:	4b08      	ldr	r3, [pc, #32]	; (8283c <osc_get_rate+0x68>)
   8281c:	e008      	b.n	82830 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8281e:	4b08      	ldr	r3, [pc, #32]	; (82840 <osc_get_rate+0x6c>)
   82820:	e006      	b.n	82830 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82822:	4b08      	ldr	r3, [pc, #32]	; (82844 <osc_get_rate+0x70>)
   82824:	e004      	b.n	82830 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82826:	4b07      	ldr	r3, [pc, #28]	; (82844 <osc_get_rate+0x70>)
   82828:	e002      	b.n	82830 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8282a:	4b06      	ldr	r3, [pc, #24]	; (82844 <osc_get_rate+0x70>)
   8282c:	e000      	b.n	82830 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8282e:	2300      	movs	r3, #0
}
   82830:	4618      	mov	r0, r3
   82832:	370c      	adds	r7, #12
   82834:	46bd      	mov	sp, r7
   82836:	f85d 7b04 	ldr.w	r7, [sp], #4
   8283a:	4770      	bx	lr
   8283c:	003d0900 	.word	0x003d0900
   82840:	007a1200 	.word	0x007a1200
   82844:	00b71b00 	.word	0x00b71b00

00082848 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82848:	b580      	push	{r7, lr}
   8284a:	b082      	sub	sp, #8
   8284c:	af00      	add	r7, sp, #0
   8284e:	4603      	mov	r3, r0
   82850:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82852:	bf00      	nop
   82854:	79fb      	ldrb	r3, [r7, #7]
   82856:	4618      	mov	r0, r3
   82858:	4b05      	ldr	r3, [pc, #20]	; (82870 <osc_wait_ready+0x28>)
   8285a:	4798      	blx	r3
   8285c:	4603      	mov	r3, r0
   8285e:	f083 0301 	eor.w	r3, r3, #1
   82862:	b2db      	uxtb	r3, r3
   82864:	2b00      	cmp	r3, #0
   82866:	d1f5      	bne.n	82854 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82868:	3708      	adds	r7, #8
   8286a:	46bd      	mov	sp, r7
   8286c:	bd80      	pop	{r7, pc}
   8286e:	bf00      	nop
   82870:	00082765 	.word	0x00082765

00082874 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82874:	b580      	push	{r7, lr}
   82876:	b086      	sub	sp, #24
   82878:	af00      	add	r7, sp, #0
   8287a:	60f8      	str	r0, [r7, #12]
   8287c:	607a      	str	r2, [r7, #4]
   8287e:	603b      	str	r3, [r7, #0]
   82880:	460b      	mov	r3, r1
   82882:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82884:	687b      	ldr	r3, [r7, #4]
   82886:	2b00      	cmp	r3, #0
   82888:	d107      	bne.n	8289a <pll_config_init+0x26>
   8288a:	683b      	ldr	r3, [r7, #0]
   8288c:	2b00      	cmp	r3, #0
   8288e:	d104      	bne.n	8289a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82890:	68fb      	ldr	r3, [r7, #12]
   82892:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82896:	601a      	str	r2, [r3, #0]
   82898:	e019      	b.n	828ce <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8289a:	7afb      	ldrb	r3, [r7, #11]
   8289c:	4618      	mov	r0, r3
   8289e:	4b0d      	ldr	r3, [pc, #52]	; (828d4 <pll_config_init+0x60>)
   828a0:	4798      	blx	r3
   828a2:	4602      	mov	r2, r0
   828a4:	687b      	ldr	r3, [r7, #4]
   828a6:	fbb2 f3f3 	udiv	r3, r2, r3
   828aa:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   828ac:	697b      	ldr	r3, [r7, #20]
   828ae:	683a      	ldr	r2, [r7, #0]
   828b0:	fb02 f303 	mul.w	r3, r2, r3
   828b4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   828b6:	683b      	ldr	r3, [r7, #0]
   828b8:	3b01      	subs	r3, #1
   828ba:	041a      	lsls	r2, r3, #16
   828bc:	4b06      	ldr	r3, [pc, #24]	; (828d8 <pll_config_init+0x64>)
   828be:	4013      	ands	r3, r2
   828c0:	687a      	ldr	r2, [r7, #4]
   828c2:	b2d2      	uxtb	r2, r2
   828c4:	4313      	orrs	r3, r2
   828c6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   828ca:	68fb      	ldr	r3, [r7, #12]
   828cc:	601a      	str	r2, [r3, #0]
	}
}
   828ce:	3718      	adds	r7, #24
   828d0:	46bd      	mov	sp, r7
   828d2:	bd80      	pop	{r7, pc}
   828d4:	000827d5 	.word	0x000827d5
   828d8:	07ff0000 	.word	0x07ff0000

000828dc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   828dc:	b580      	push	{r7, lr}
   828de:	b082      	sub	sp, #8
   828e0:	af00      	add	r7, sp, #0
   828e2:	6078      	str	r0, [r7, #4]
   828e4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   828e6:	683b      	ldr	r3, [r7, #0]
   828e8:	2b00      	cmp	r3, #0
   828ea:	d108      	bne.n	828fe <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   828ec:	4b08      	ldr	r3, [pc, #32]	; (82910 <pll_enable+0x34>)
   828ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   828f0:	4a08      	ldr	r2, [pc, #32]	; (82914 <pll_enable+0x38>)
   828f2:	687b      	ldr	r3, [r7, #4]
   828f4:	681b      	ldr	r3, [r3, #0]
   828f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   828fa:	6293      	str	r3, [r2, #40]	; 0x28
   828fc:	e005      	b.n	8290a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   828fe:	4a05      	ldr	r2, [pc, #20]	; (82914 <pll_enable+0x38>)
   82900:	687b      	ldr	r3, [r7, #4]
   82902:	681b      	ldr	r3, [r3, #0]
   82904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82908:	61d3      	str	r3, [r2, #28]
	}
}
   8290a:	3708      	adds	r7, #8
   8290c:	46bd      	mov	sp, r7
   8290e:	bd80      	pop	{r7, pc}
   82910:	00083215 	.word	0x00083215
   82914:	400e0600 	.word	0x400e0600

00082918 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82918:	b580      	push	{r7, lr}
   8291a:	b082      	sub	sp, #8
   8291c:	af00      	add	r7, sp, #0
   8291e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82920:	687b      	ldr	r3, [r7, #4]
   82922:	2b00      	cmp	r3, #0
   82924:	d103      	bne.n	8292e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82926:	4b05      	ldr	r3, [pc, #20]	; (8293c <pll_is_locked+0x24>)
   82928:	4798      	blx	r3
   8292a:	4603      	mov	r3, r0
   8292c:	e002      	b.n	82934 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8292e:	4b04      	ldr	r3, [pc, #16]	; (82940 <pll_is_locked+0x28>)
   82930:	4798      	blx	r3
   82932:	4603      	mov	r3, r0
	}
}
   82934:	4618      	mov	r0, r3
   82936:	3708      	adds	r7, #8
   82938:	46bd      	mov	sp, r7
   8293a:	bd80      	pop	{r7, pc}
   8293c:	0008322d 	.word	0x0008322d
   82940:	00083249 	.word	0x00083249

00082944 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82944:	b580      	push	{r7, lr}
   82946:	b082      	sub	sp, #8
   82948:	af00      	add	r7, sp, #0
   8294a:	4603      	mov	r3, r0
   8294c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8294e:	79fb      	ldrb	r3, [r7, #7]
   82950:	3b03      	subs	r3, #3
   82952:	2b04      	cmp	r3, #4
   82954:	d808      	bhi.n	82968 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82956:	79fb      	ldrb	r3, [r7, #7]
   82958:	4618      	mov	r0, r3
   8295a:	4b05      	ldr	r3, [pc, #20]	; (82970 <pll_enable_source+0x2c>)
   8295c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8295e:	79fb      	ldrb	r3, [r7, #7]
   82960:	4618      	mov	r0, r3
   82962:	4b04      	ldr	r3, [pc, #16]	; (82974 <pll_enable_source+0x30>)
   82964:	4798      	blx	r3
		break;
   82966:	e000      	b.n	8296a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82968:	bf00      	nop
	}
}
   8296a:	3708      	adds	r7, #8
   8296c:	46bd      	mov	sp, r7
   8296e:	bd80      	pop	{r7, pc}
   82970:	000826e1 	.word	0x000826e1
   82974:	00082849 	.word	0x00082849

00082978 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82978:	b580      	push	{r7, lr}
   8297a:	b082      	sub	sp, #8
   8297c:	af00      	add	r7, sp, #0
   8297e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82980:	bf00      	nop
   82982:	6878      	ldr	r0, [r7, #4]
   82984:	4b04      	ldr	r3, [pc, #16]	; (82998 <pll_wait_for_lock+0x20>)
   82986:	4798      	blx	r3
   82988:	4603      	mov	r3, r0
   8298a:	2b00      	cmp	r3, #0
   8298c:	d0f9      	beq.n	82982 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8298e:	2300      	movs	r3, #0
}
   82990:	4618      	mov	r0, r3
   82992:	3708      	adds	r7, #8
   82994:	46bd      	mov	sp, r7
   82996:	bd80      	pop	{r7, pc}
   82998:	00082919 	.word	0x00082919

0008299c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8299c:	b580      	push	{r7, lr}
   8299e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   829a0:	2006      	movs	r0, #6
   829a2:	4b04      	ldr	r3, [pc, #16]	; (829b4 <sysclk_get_main_hz+0x18>)
   829a4:	4798      	blx	r3
   829a6:	4602      	mov	r2, r0
   829a8:	4613      	mov	r3, r2
   829aa:	00db      	lsls	r3, r3, #3
   829ac:	1a9b      	subs	r3, r3, r2
   829ae:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   829b0:	4618      	mov	r0, r3
   829b2:	bd80      	pop	{r7, pc}
   829b4:	000827d5 	.word	0x000827d5

000829b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   829b8:	b580      	push	{r7, lr}
   829ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   829bc:	4b02      	ldr	r3, [pc, #8]	; (829c8 <sysclk_get_cpu_hz+0x10>)
   829be:	4798      	blx	r3
   829c0:	4603      	mov	r3, r0
   829c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   829c4:	4618      	mov	r0, r3
   829c6:	bd80      	pop	{r7, pc}
   829c8:	0008299d 	.word	0x0008299d

000829cc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   829cc:	b590      	push	{r4, r7, lr}
   829ce:	b083      	sub	sp, #12
   829d0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   829d2:	4b10      	ldr	r3, [pc, #64]	; (82a14 <sysclk_init+0x48>)
   829d4:	4798      	blx	r3
   829d6:	4603      	mov	r3, r0
   829d8:	4618      	mov	r0, r3
   829da:	4b0f      	ldr	r3, [pc, #60]	; (82a18 <sysclk_init+0x4c>)
   829dc:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   829de:	2006      	movs	r0, #6
   829e0:	4b0e      	ldr	r3, [pc, #56]	; (82a1c <sysclk_init+0x50>)
   829e2:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   829e4:	1d3b      	adds	r3, r7, #4
   829e6:	4618      	mov	r0, r3
   829e8:	2106      	movs	r1, #6
   829ea:	2201      	movs	r2, #1
   829ec:	230e      	movs	r3, #14
   829ee:	4c0c      	ldr	r4, [pc, #48]	; (82a20 <sysclk_init+0x54>)
   829f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   829f2:	1d3b      	adds	r3, r7, #4
   829f4:	4618      	mov	r0, r3
   829f6:	2100      	movs	r1, #0
   829f8:	4b0a      	ldr	r3, [pc, #40]	; (82a24 <sysclk_init+0x58>)
   829fa:	4798      	blx	r3
		pll_wait_for_lock(0);
   829fc:	2000      	movs	r0, #0
   829fe:	4b0a      	ldr	r3, [pc, #40]	; (82a28 <sysclk_init+0x5c>)
   82a00:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82a02:	2010      	movs	r0, #16
   82a04:	4b09      	ldr	r3, [pc, #36]	; (82a2c <sysclk_init+0x60>)
   82a06:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82a08:	4b09      	ldr	r3, [pc, #36]	; (82a30 <sysclk_init+0x64>)
   82a0a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82a0c:	370c      	adds	r7, #12
   82a0e:	46bd      	mov	sp, r7
   82a10:	bd90      	pop	{r4, r7, pc}
   82a12:	bf00      	nop
   82a14:	000829b9 	.word	0x000829b9
   82a18:	00083551 	.word	0x00083551
   82a1c:	00082945 	.word	0x00082945
   82a20:	00082875 	.word	0x00082875
   82a24:	000828dd 	.word	0x000828dd
   82a28:	00082979 	.word	0x00082979
   82a2c:	00082ff1 	.word	0x00082ff1
   82a30:	000833d1 	.word	0x000833d1

00082a34 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82a34:	b580      	push	{r7, lr}
   82a36:	b082      	sub	sp, #8
   82a38:	af00      	add	r7, sp, #0
   82a3a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82a3c:	6878      	ldr	r0, [r7, #4]
   82a3e:	4b02      	ldr	r3, [pc, #8]	; (82a48 <sysclk_enable_peripheral_clock+0x14>)
   82a40:	4798      	blx	r3
}
   82a42:	3708      	adds	r7, #8
   82a44:	46bd      	mov	sp, r7
   82a46:	bd80      	pop	{r7, pc}
   82a48:	00083265 	.word	0x00083265

00082a4c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82a4c:	b580      	push	{r7, lr}
   82a4e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82a50:	200b      	movs	r0, #11
   82a52:	4b06      	ldr	r3, [pc, #24]	; (82a6c <ioport_init+0x20>)
   82a54:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82a56:	200c      	movs	r0, #12
   82a58:	4b04      	ldr	r3, [pc, #16]	; (82a6c <ioport_init+0x20>)
   82a5a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   82a5c:	200d      	movs	r0, #13
   82a5e:	4b03      	ldr	r3, [pc, #12]	; (82a6c <ioport_init+0x20>)
   82a60:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   82a62:	200e      	movs	r0, #14
   82a64:	4b01      	ldr	r3, [pc, #4]	; (82a6c <ioport_init+0x20>)
   82a66:	4798      	blx	r3
	arch_ioport_init();
}
   82a68:	bd80      	pop	{r7, pc}
   82a6a:	bf00      	nop
   82a6c:	00082a35 	.word	0x00082a35

00082a70 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82a70:	b580      	push	{r7, lr}
   82a72:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82a74:	4b17      	ldr	r3, [pc, #92]	; (82ad4 <board_init+0x64>)
   82a76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82a7a:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82a7c:	4b16      	ldr	r3, [pc, #88]	; (82ad8 <board_init+0x68>)
   82a7e:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82a80:	203b      	movs	r0, #59	; 0x3b
   82a82:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82a86:	4b15      	ldr	r3, [pc, #84]	; (82adc <board_init+0x6c>)
   82a88:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82a8a:	2055      	movs	r0, #85	; 0x55
   82a8c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82a90:	4b12      	ldr	r3, [pc, #72]	; (82adc <board_init+0x6c>)
   82a92:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82a94:	2056      	movs	r0, #86	; 0x56
   82a96:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82a9a:	4b10      	ldr	r3, [pc, #64]	; (82adc <board_init+0x6c>)
   82a9c:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82a9e:	2068      	movs	r0, #104	; 0x68
   82aa0:	490f      	ldr	r1, [pc, #60]	; (82ae0 <board_init+0x70>)
   82aa2:	4b0e      	ldr	r3, [pc, #56]	; (82adc <board_init+0x6c>)
   82aa4:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82aa6:	205c      	movs	r0, #92	; 0x5c
   82aa8:	490e      	ldr	r1, [pc, #56]	; (82ae4 <board_init+0x74>)
   82aaa:	4b0c      	ldr	r3, [pc, #48]	; (82adc <board_init+0x6c>)
   82aac:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82aae:	480e      	ldr	r0, [pc, #56]	; (82ae8 <board_init+0x78>)
   82ab0:	f44f 7140 	mov.w	r1, #768	; 0x300
   82ab4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82ab8:	4b0c      	ldr	r3, [pc, #48]	; (82aec <board_init+0x7c>)
   82aba:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82abc:	202b      	movs	r0, #43	; 0x2b
   82abe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ac2:	4b06      	ldr	r3, [pc, #24]	; (82adc <board_init+0x6c>)
   82ac4:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82ac6:	202a      	movs	r0, #42	; 0x2a
   82ac8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82acc:	4b03      	ldr	r3, [pc, #12]	; (82adc <board_init+0x6c>)
   82ace:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82ad0:	bd80      	pop	{r7, pc}
   82ad2:	bf00      	nop
   82ad4:	400e1a50 	.word	0x400e1a50
   82ad8:	00082a4d 	.word	0x00082a4d
   82adc:	00082cc9 	.word	0x00082cc9
   82ae0:	28000079 	.word	0x28000079
   82ae4:	28000001 	.word	0x28000001
   82ae8:	400e0e00 	.word	0x400e0e00
   82aec:	00082e09 	.word	0x00082e09

00082af0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82af0:	b480      	push	{r7}
   82af2:	b085      	sub	sp, #20
   82af4:	af00      	add	r7, sp, #0
   82af6:	60f8      	str	r0, [r7, #12]
   82af8:	60b9      	str	r1, [r7, #8]
   82afa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82afc:	687b      	ldr	r3, [r7, #4]
   82afe:	2b00      	cmp	r3, #0
   82b00:	d003      	beq.n	82b0a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82b02:	68fb      	ldr	r3, [r7, #12]
   82b04:	68ba      	ldr	r2, [r7, #8]
   82b06:	665a      	str	r2, [r3, #100]	; 0x64
   82b08:	e002      	b.n	82b10 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82b0a:	68fb      	ldr	r3, [r7, #12]
   82b0c:	68ba      	ldr	r2, [r7, #8]
   82b0e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82b10:	3714      	adds	r7, #20
   82b12:	46bd      	mov	sp, r7
   82b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b18:	4770      	bx	lr
   82b1a:	bf00      	nop

00082b1c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82b1c:	b480      	push	{r7}
   82b1e:	b087      	sub	sp, #28
   82b20:	af00      	add	r7, sp, #0
   82b22:	60f8      	str	r0, [r7, #12]
   82b24:	60b9      	str	r1, [r7, #8]
   82b26:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82b28:	68fb      	ldr	r3, [r7, #12]
   82b2a:	687a      	ldr	r2, [r7, #4]
   82b2c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82b2e:	68bb      	ldr	r3, [r7, #8]
   82b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b34:	d01f      	beq.n	82b76 <pio_set_peripheral+0x5a>
   82b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b3a:	d805      	bhi.n	82b48 <pio_set_peripheral+0x2c>
   82b3c:	2b00      	cmp	r3, #0
   82b3e:	d027      	beq.n	82b90 <pio_set_peripheral+0x74>
   82b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82b44:	d00a      	beq.n	82b5c <pio_set_peripheral+0x40>
   82b46:	e01f      	b.n	82b88 <pio_set_peripheral+0x6c>
   82b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82b4c:	d020      	beq.n	82b90 <pio_set_peripheral+0x74>
   82b4e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b52:	d01d      	beq.n	82b90 <pio_set_peripheral+0x74>
   82b54:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b58:	d01a      	beq.n	82b90 <pio_set_peripheral+0x74>
   82b5a:	e015      	b.n	82b88 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82b5c:	68fb      	ldr	r3, [r7, #12]
   82b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82b60:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82b62:	68fb      	ldr	r3, [r7, #12]
   82b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82b66:	687b      	ldr	r3, [r7, #4]
   82b68:	43d9      	mvns	r1, r3
   82b6a:	697b      	ldr	r3, [r7, #20]
   82b6c:	400b      	ands	r3, r1
   82b6e:	401a      	ands	r2, r3
   82b70:	68fb      	ldr	r3, [r7, #12]
   82b72:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82b74:	e008      	b.n	82b88 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82b76:	68fb      	ldr	r3, [r7, #12]
   82b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82b7a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82b7c:	687a      	ldr	r2, [r7, #4]
   82b7e:	697b      	ldr	r3, [r7, #20]
   82b80:	431a      	orrs	r2, r3
   82b82:	68fb      	ldr	r3, [r7, #12]
   82b84:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82b86:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82b88:	68fb      	ldr	r3, [r7, #12]
   82b8a:	687a      	ldr	r2, [r7, #4]
   82b8c:	605a      	str	r2, [r3, #4]
   82b8e:	e000      	b.n	82b92 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82b90:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82b92:	371c      	adds	r7, #28
   82b94:	46bd      	mov	sp, r7
   82b96:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b9a:	4770      	bx	lr

00082b9c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82b9c:	b580      	push	{r7, lr}
   82b9e:	b084      	sub	sp, #16
   82ba0:	af00      	add	r7, sp, #0
   82ba2:	60f8      	str	r0, [r7, #12]
   82ba4:	60b9      	str	r1, [r7, #8]
   82ba6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82ba8:	68f8      	ldr	r0, [r7, #12]
   82baa:	68b9      	ldr	r1, [r7, #8]
   82bac:	4b18      	ldr	r3, [pc, #96]	; (82c10 <pio_set_input+0x74>)
   82bae:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82bb0:	687b      	ldr	r3, [r7, #4]
   82bb2:	f003 0301 	and.w	r3, r3, #1
   82bb6:	68f8      	ldr	r0, [r7, #12]
   82bb8:	68b9      	ldr	r1, [r7, #8]
   82bba:	461a      	mov	r2, r3
   82bbc:	4b15      	ldr	r3, [pc, #84]	; (82c14 <pio_set_input+0x78>)
   82bbe:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	f003 030a 	and.w	r3, r3, #10
   82bc6:	2b00      	cmp	r3, #0
   82bc8:	d003      	beq.n	82bd2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82bca:	68fb      	ldr	r3, [r7, #12]
   82bcc:	68ba      	ldr	r2, [r7, #8]
   82bce:	621a      	str	r2, [r3, #32]
   82bd0:	e002      	b.n	82bd8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82bd2:	68fb      	ldr	r3, [r7, #12]
   82bd4:	68ba      	ldr	r2, [r7, #8]
   82bd6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82bd8:	687b      	ldr	r3, [r7, #4]
   82bda:	f003 0302 	and.w	r3, r3, #2
   82bde:	2b00      	cmp	r3, #0
   82be0:	d004      	beq.n	82bec <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82be2:	68fb      	ldr	r3, [r7, #12]
   82be4:	68ba      	ldr	r2, [r7, #8]
   82be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82bea:	e008      	b.n	82bfe <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	f003 0308 	and.w	r3, r3, #8
   82bf2:	2b00      	cmp	r3, #0
   82bf4:	d003      	beq.n	82bfe <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82bf6:	68fb      	ldr	r3, [r7, #12]
   82bf8:	68ba      	ldr	r2, [r7, #8]
   82bfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82bfe:	68fb      	ldr	r3, [r7, #12]
   82c00:	68ba      	ldr	r2, [r7, #8]
   82c02:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82c04:	68fb      	ldr	r3, [r7, #12]
   82c06:	68ba      	ldr	r2, [r7, #8]
   82c08:	601a      	str	r2, [r3, #0]
}
   82c0a:	3710      	adds	r7, #16
   82c0c:	46bd      	mov	sp, r7
   82c0e:	bd80      	pop	{r7, pc}
   82c10:	00082c7d 	.word	0x00082c7d
   82c14:	00082af1 	.word	0x00082af1

00082c18 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82c18:	b580      	push	{r7, lr}
   82c1a:	b084      	sub	sp, #16
   82c1c:	af00      	add	r7, sp, #0
   82c1e:	60f8      	str	r0, [r7, #12]
   82c20:	60b9      	str	r1, [r7, #8]
   82c22:	607a      	str	r2, [r7, #4]
   82c24:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82c26:	68f8      	ldr	r0, [r7, #12]
   82c28:	68b9      	ldr	r1, [r7, #8]
   82c2a:	4b12      	ldr	r3, [pc, #72]	; (82c74 <pio_set_output+0x5c>)
   82c2c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82c2e:	68f8      	ldr	r0, [r7, #12]
   82c30:	68b9      	ldr	r1, [r7, #8]
   82c32:	69ba      	ldr	r2, [r7, #24]
   82c34:	4b10      	ldr	r3, [pc, #64]	; (82c78 <pio_set_output+0x60>)
   82c36:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82c38:	683b      	ldr	r3, [r7, #0]
   82c3a:	2b00      	cmp	r3, #0
   82c3c:	d003      	beq.n	82c46 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82c3e:	68fb      	ldr	r3, [r7, #12]
   82c40:	68ba      	ldr	r2, [r7, #8]
   82c42:	651a      	str	r2, [r3, #80]	; 0x50
   82c44:	e002      	b.n	82c4c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82c46:	68fb      	ldr	r3, [r7, #12]
   82c48:	68ba      	ldr	r2, [r7, #8]
   82c4a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82c4c:	687b      	ldr	r3, [r7, #4]
   82c4e:	2b00      	cmp	r3, #0
   82c50:	d003      	beq.n	82c5a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82c52:	68fb      	ldr	r3, [r7, #12]
   82c54:	68ba      	ldr	r2, [r7, #8]
   82c56:	631a      	str	r2, [r3, #48]	; 0x30
   82c58:	e002      	b.n	82c60 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82c5a:	68fb      	ldr	r3, [r7, #12]
   82c5c:	68ba      	ldr	r2, [r7, #8]
   82c5e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82c60:	68fb      	ldr	r3, [r7, #12]
   82c62:	68ba      	ldr	r2, [r7, #8]
   82c64:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82c66:	68fb      	ldr	r3, [r7, #12]
   82c68:	68ba      	ldr	r2, [r7, #8]
   82c6a:	601a      	str	r2, [r3, #0]
}
   82c6c:	3710      	adds	r7, #16
   82c6e:	46bd      	mov	sp, r7
   82c70:	bd80      	pop	{r7, pc}
   82c72:	bf00      	nop
   82c74:	00082c7d 	.word	0x00082c7d
   82c78:	00082af1 	.word	0x00082af1

00082c7c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82c7c:	b480      	push	{r7}
   82c7e:	b083      	sub	sp, #12
   82c80:	af00      	add	r7, sp, #0
   82c82:	6078      	str	r0, [r7, #4]
   82c84:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82c86:	687b      	ldr	r3, [r7, #4]
   82c88:	683a      	ldr	r2, [r7, #0]
   82c8a:	645a      	str	r2, [r3, #68]	; 0x44
}
   82c8c:	370c      	adds	r7, #12
   82c8e:	46bd      	mov	sp, r7
   82c90:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c94:	4770      	bx	lr
   82c96:	bf00      	nop

00082c98 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82c98:	b480      	push	{r7}
   82c9a:	b083      	sub	sp, #12
   82c9c:	af00      	add	r7, sp, #0
   82c9e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82ca0:	687b      	ldr	r3, [r7, #4]
   82ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82ca4:	4618      	mov	r0, r3
   82ca6:	370c      	adds	r7, #12
   82ca8:	46bd      	mov	sp, r7
   82caa:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cae:	4770      	bx	lr

00082cb0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82cb0:	b480      	push	{r7}
   82cb2:	b083      	sub	sp, #12
   82cb4:	af00      	add	r7, sp, #0
   82cb6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82cb8:	687b      	ldr	r3, [r7, #4]
   82cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82cbc:	4618      	mov	r0, r3
   82cbe:	370c      	adds	r7, #12
   82cc0:	46bd      	mov	sp, r7
   82cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cc6:	4770      	bx	lr

00082cc8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82cc8:	b590      	push	{r4, r7, lr}
   82cca:	b087      	sub	sp, #28
   82ccc:	af02      	add	r7, sp, #8
   82cce:	6078      	str	r0, [r7, #4]
   82cd0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82cd2:	687b      	ldr	r3, [r7, #4]
   82cd4:	095b      	lsrs	r3, r3, #5
   82cd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82cda:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82cde:	025b      	lsls	r3, r3, #9
   82ce0:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82ce2:	683b      	ldr	r3, [r7, #0]
   82ce4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82ce8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82cec:	d048      	beq.n	82d80 <pio_configure_pin+0xb8>
   82cee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82cf2:	d806      	bhi.n	82d02 <pio_configure_pin+0x3a>
   82cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82cf8:	d00a      	beq.n	82d10 <pio_configure_pin+0x48>
   82cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82cfe:	d023      	beq.n	82d48 <pio_configure_pin+0x80>
   82d00:	e072      	b.n	82de8 <pio_configure_pin+0x120>
   82d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d06:	d047      	beq.n	82d98 <pio_configure_pin+0xd0>
   82d08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d0c:	d044      	beq.n	82d98 <pio_configure_pin+0xd0>
   82d0e:	e06b      	b.n	82de8 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82d10:	687b      	ldr	r3, [r7, #4]
   82d12:	f003 031f 	and.w	r3, r3, #31
   82d16:	2201      	movs	r2, #1
   82d18:	fa02 f303 	lsl.w	r3, r2, r3
   82d1c:	68f8      	ldr	r0, [r7, #12]
   82d1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d22:	461a      	mov	r2, r3
   82d24:	4b34      	ldr	r3, [pc, #208]	; (82df8 <pio_configure_pin+0x130>)
   82d26:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82d28:	687b      	ldr	r3, [r7, #4]
   82d2a:	f003 031f 	and.w	r3, r3, #31
   82d2e:	2201      	movs	r2, #1
   82d30:	fa02 f303 	lsl.w	r3, r2, r3
   82d34:	461a      	mov	r2, r3
   82d36:	683b      	ldr	r3, [r7, #0]
   82d38:	f003 0301 	and.w	r3, r3, #1
   82d3c:	68f8      	ldr	r0, [r7, #12]
   82d3e:	4611      	mov	r1, r2
   82d40:	461a      	mov	r2, r3
   82d42:	4b2e      	ldr	r3, [pc, #184]	; (82dfc <pio_configure_pin+0x134>)
   82d44:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82d46:	e051      	b.n	82dec <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82d48:	687b      	ldr	r3, [r7, #4]
   82d4a:	f003 031f 	and.w	r3, r3, #31
   82d4e:	2201      	movs	r2, #1
   82d50:	fa02 f303 	lsl.w	r3, r2, r3
   82d54:	68f8      	ldr	r0, [r7, #12]
   82d56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82d5a:	461a      	mov	r2, r3
   82d5c:	4b26      	ldr	r3, [pc, #152]	; (82df8 <pio_configure_pin+0x130>)
   82d5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82d60:	687b      	ldr	r3, [r7, #4]
   82d62:	f003 031f 	and.w	r3, r3, #31
   82d66:	2201      	movs	r2, #1
   82d68:	fa02 f303 	lsl.w	r3, r2, r3
   82d6c:	461a      	mov	r2, r3
   82d6e:	683b      	ldr	r3, [r7, #0]
   82d70:	f003 0301 	and.w	r3, r3, #1
   82d74:	68f8      	ldr	r0, [r7, #12]
   82d76:	4611      	mov	r1, r2
   82d78:	461a      	mov	r2, r3
   82d7a:	4b20      	ldr	r3, [pc, #128]	; (82dfc <pio_configure_pin+0x134>)
   82d7c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82d7e:	e035      	b.n	82dec <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82d80:	687b      	ldr	r3, [r7, #4]
   82d82:	f003 031f 	and.w	r3, r3, #31
   82d86:	2201      	movs	r2, #1
   82d88:	fa02 f303 	lsl.w	r3, r2, r3
   82d8c:	68f8      	ldr	r0, [r7, #12]
   82d8e:	4619      	mov	r1, r3
   82d90:	683a      	ldr	r2, [r7, #0]
   82d92:	4b1b      	ldr	r3, [pc, #108]	; (82e00 <pio_configure_pin+0x138>)
   82d94:	4798      	blx	r3
		break;
   82d96:	e029      	b.n	82dec <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82d98:	687b      	ldr	r3, [r7, #4]
   82d9a:	f003 031f 	and.w	r3, r3, #31
   82d9e:	2201      	movs	r2, #1
   82da0:	fa02 f303 	lsl.w	r3, r2, r3
   82da4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82da6:	683b      	ldr	r3, [r7, #0]
   82da8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82dac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82db0:	bf0c      	ite	eq
   82db2:	2301      	moveq	r3, #1
   82db4:	2300      	movne	r3, #0
   82db6:	b2db      	uxtb	r3, r3
   82db8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82dba:	683b      	ldr	r3, [r7, #0]
   82dbc:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82dc0:	2b00      	cmp	r3, #0
   82dc2:	bf14      	ite	ne
   82dc4:	2301      	movne	r3, #1
   82dc6:	2300      	moveq	r3, #0
   82dc8:	b2db      	uxtb	r3, r3
   82dca:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82dcc:	683b      	ldr	r3, [r7, #0]
   82dce:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82dd2:	2b00      	cmp	r3, #0
   82dd4:	bf14      	ite	ne
   82dd6:	2301      	movne	r3, #1
   82dd8:	2300      	moveq	r3, #0
   82dda:	b2db      	uxtb	r3, r3
   82ddc:	9300      	str	r3, [sp, #0]
   82dde:	68f8      	ldr	r0, [r7, #12]
   82de0:	4623      	mov	r3, r4
   82de2:	4c08      	ldr	r4, [pc, #32]	; (82e04 <pio_configure_pin+0x13c>)
   82de4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82de6:	e001      	b.n	82dec <pio_configure_pin+0x124>

	default:
		return 0;
   82de8:	2300      	movs	r3, #0
   82dea:	e000      	b.n	82dee <pio_configure_pin+0x126>
	}

	return 1;
   82dec:	2301      	movs	r3, #1
}
   82dee:	4618      	mov	r0, r3
   82df0:	3714      	adds	r7, #20
   82df2:	46bd      	mov	sp, r7
   82df4:	bd90      	pop	{r4, r7, pc}
   82df6:	bf00      	nop
   82df8:	00082b1d 	.word	0x00082b1d
   82dfc:	00082af1 	.word	0x00082af1
   82e00:	00082b9d 	.word	0x00082b9d
   82e04:	00082c19 	.word	0x00082c19

00082e08 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82e08:	b590      	push	{r4, r7, lr}
   82e0a:	b087      	sub	sp, #28
   82e0c:	af02      	add	r7, sp, #8
   82e0e:	60f8      	str	r0, [r7, #12]
   82e10:	60b9      	str	r1, [r7, #8]
   82e12:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82e14:	687b      	ldr	r3, [r7, #4]
   82e16:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82e1a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e1e:	d02e      	beq.n	82e7e <pio_configure_pin_group+0x76>
   82e20:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e24:	d806      	bhi.n	82e34 <pio_configure_pin_group+0x2c>
   82e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82e2a:	d00a      	beq.n	82e42 <pio_configure_pin_group+0x3a>
   82e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82e30:	d016      	beq.n	82e60 <pio_configure_pin_group+0x58>
   82e32:	e04c      	b.n	82ece <pio_configure_pin_group+0xc6>
   82e34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82e38:	d027      	beq.n	82e8a <pio_configure_pin_group+0x82>
   82e3a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e3e:	d024      	beq.n	82e8a <pio_configure_pin_group+0x82>
   82e40:	e045      	b.n	82ece <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82e42:	68f8      	ldr	r0, [r7, #12]
   82e44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e48:	68ba      	ldr	r2, [r7, #8]
   82e4a:	4b24      	ldr	r3, [pc, #144]	; (82edc <pio_configure_pin_group+0xd4>)
   82e4c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82e4e:	687b      	ldr	r3, [r7, #4]
   82e50:	f003 0301 	and.w	r3, r3, #1
   82e54:	68f8      	ldr	r0, [r7, #12]
   82e56:	68b9      	ldr	r1, [r7, #8]
   82e58:	461a      	mov	r2, r3
   82e5a:	4b21      	ldr	r3, [pc, #132]	; (82ee0 <pio_configure_pin_group+0xd8>)
   82e5c:	4798      	blx	r3
		break;
   82e5e:	e038      	b.n	82ed2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82e60:	68f8      	ldr	r0, [r7, #12]
   82e62:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e66:	68ba      	ldr	r2, [r7, #8]
   82e68:	4b1c      	ldr	r3, [pc, #112]	; (82edc <pio_configure_pin_group+0xd4>)
   82e6a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82e6c:	687b      	ldr	r3, [r7, #4]
   82e6e:	f003 0301 	and.w	r3, r3, #1
   82e72:	68f8      	ldr	r0, [r7, #12]
   82e74:	68b9      	ldr	r1, [r7, #8]
   82e76:	461a      	mov	r2, r3
   82e78:	4b19      	ldr	r3, [pc, #100]	; (82ee0 <pio_configure_pin_group+0xd8>)
   82e7a:	4798      	blx	r3
		break;
   82e7c:	e029      	b.n	82ed2 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82e7e:	68f8      	ldr	r0, [r7, #12]
   82e80:	68b9      	ldr	r1, [r7, #8]
   82e82:	687a      	ldr	r2, [r7, #4]
   82e84:	4b17      	ldr	r3, [pc, #92]	; (82ee4 <pio_configure_pin_group+0xdc>)
   82e86:	4798      	blx	r3
		break;
   82e88:	e023      	b.n	82ed2 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82e8a:	687b      	ldr	r3, [r7, #4]
   82e8c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82e90:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e94:	bf0c      	ite	eq
   82e96:	2301      	moveq	r3, #1
   82e98:	2300      	movne	r3, #0
   82e9a:	b2db      	uxtb	r3, r3
   82e9c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82e9e:	687b      	ldr	r3, [r7, #4]
   82ea0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82ea4:	2b00      	cmp	r3, #0
   82ea6:	bf14      	ite	ne
   82ea8:	2301      	movne	r3, #1
   82eaa:	2300      	moveq	r3, #0
   82eac:	b2db      	uxtb	r3, r3
   82eae:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82eb0:	687b      	ldr	r3, [r7, #4]
   82eb2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82eb6:	2b00      	cmp	r3, #0
   82eb8:	bf14      	ite	ne
   82eba:	2301      	movne	r3, #1
   82ebc:	2300      	moveq	r3, #0
   82ebe:	b2db      	uxtb	r3, r3
   82ec0:	9300      	str	r3, [sp, #0]
   82ec2:	68f8      	ldr	r0, [r7, #12]
   82ec4:	68b9      	ldr	r1, [r7, #8]
   82ec6:	4623      	mov	r3, r4
   82ec8:	4c07      	ldr	r4, [pc, #28]	; (82ee8 <pio_configure_pin_group+0xe0>)
   82eca:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82ecc:	e001      	b.n	82ed2 <pio_configure_pin_group+0xca>

	default:
		return 0;
   82ece:	2300      	movs	r3, #0
   82ed0:	e000      	b.n	82ed4 <pio_configure_pin_group+0xcc>
	}

	return 1;
   82ed2:	2301      	movs	r3, #1
}
   82ed4:	4618      	mov	r0, r3
   82ed6:	3714      	adds	r7, #20
   82ed8:	46bd      	mov	sp, r7
   82eda:	bd90      	pop	{r4, r7, pc}
   82edc:	00082b1d 	.word	0x00082b1d
   82ee0:	00082af1 	.word	0x00082af1
   82ee4:	00082b9d 	.word	0x00082b9d
   82ee8:	00082c19 	.word	0x00082c19

00082eec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82eec:	b580      	push	{r7, lr}
   82eee:	b084      	sub	sp, #16
   82ef0:	af00      	add	r7, sp, #0
   82ef2:	6078      	str	r0, [r7, #4]
   82ef4:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82ef6:	6878      	ldr	r0, [r7, #4]
   82ef8:	4b22      	ldr	r3, [pc, #136]	; (82f84 <pio_handler_process+0x98>)
   82efa:	4798      	blx	r3
   82efc:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82efe:	6878      	ldr	r0, [r7, #4]
   82f00:	4b21      	ldr	r3, [pc, #132]	; (82f88 <pio_handler_process+0x9c>)
   82f02:	4798      	blx	r3
   82f04:	4602      	mov	r2, r0
   82f06:	68fb      	ldr	r3, [r7, #12]
   82f08:	4013      	ands	r3, r2
   82f0a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82f0c:	68fb      	ldr	r3, [r7, #12]
   82f0e:	2b00      	cmp	r3, #0
   82f10:	d034      	beq.n	82f7c <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   82f12:	2300      	movs	r3, #0
   82f14:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82f16:	e02e      	b.n	82f76 <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82f18:	4a1c      	ldr	r2, [pc, #112]	; (82f8c <pio_handler_process+0xa0>)
   82f1a:	68bb      	ldr	r3, [r7, #8]
   82f1c:	011b      	lsls	r3, r3, #4
   82f1e:	4413      	add	r3, r2
   82f20:	681a      	ldr	r2, [r3, #0]
   82f22:	683b      	ldr	r3, [r7, #0]
   82f24:	429a      	cmp	r2, r3
   82f26:	d123      	bne.n	82f70 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82f28:	4a18      	ldr	r2, [pc, #96]	; (82f8c <pio_handler_process+0xa0>)
   82f2a:	68bb      	ldr	r3, [r7, #8]
   82f2c:	011b      	lsls	r3, r3, #4
   82f2e:	4413      	add	r3, r2
   82f30:	685a      	ldr	r2, [r3, #4]
   82f32:	68fb      	ldr	r3, [r7, #12]
   82f34:	4013      	ands	r3, r2
   82f36:	2b00      	cmp	r3, #0
   82f38:	d01a      	beq.n	82f70 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82f3a:	4a14      	ldr	r2, [pc, #80]	; (82f8c <pio_handler_process+0xa0>)
   82f3c:	68bb      	ldr	r3, [r7, #8]
   82f3e:	011b      	lsls	r3, r3, #4
   82f40:	4413      	add	r3, r2
   82f42:	3308      	adds	r3, #8
   82f44:	685b      	ldr	r3, [r3, #4]
   82f46:	4911      	ldr	r1, [pc, #68]	; (82f8c <pio_handler_process+0xa0>)
   82f48:	68ba      	ldr	r2, [r7, #8]
   82f4a:	0112      	lsls	r2, r2, #4
   82f4c:	440a      	add	r2, r1
   82f4e:	6810      	ldr	r0, [r2, #0]
   82f50:	490e      	ldr	r1, [pc, #56]	; (82f8c <pio_handler_process+0xa0>)
   82f52:	68ba      	ldr	r2, [r7, #8]
   82f54:	0112      	lsls	r2, r2, #4
   82f56:	440a      	add	r2, r1
   82f58:	6852      	ldr	r2, [r2, #4]
   82f5a:	4611      	mov	r1, r2
   82f5c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82f5e:	4a0b      	ldr	r2, [pc, #44]	; (82f8c <pio_handler_process+0xa0>)
   82f60:	68bb      	ldr	r3, [r7, #8]
   82f62:	011b      	lsls	r3, r3, #4
   82f64:	4413      	add	r3, r2
   82f66:	685b      	ldr	r3, [r3, #4]
   82f68:	43db      	mvns	r3, r3
   82f6a:	68fa      	ldr	r2, [r7, #12]
   82f6c:	4013      	ands	r3, r2
   82f6e:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82f70:	68bb      	ldr	r3, [r7, #8]
   82f72:	3301      	adds	r3, #1
   82f74:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82f76:	68fb      	ldr	r3, [r7, #12]
   82f78:	2b00      	cmp	r3, #0
   82f7a:	d1cd      	bne.n	82f18 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82f7c:	3710      	adds	r7, #16
   82f7e:	46bd      	mov	sp, r7
   82f80:	bd80      	pop	{r7, pc}
   82f82:	bf00      	nop
   82f84:	00082c99 	.word	0x00082c99
   82f88:	00082cb1 	.word	0x00082cb1
   82f8c:	20070d14 	.word	0x20070d14

00082f90 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82f90:	b580      	push	{r7, lr}
   82f92:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82f94:	4802      	ldr	r0, [pc, #8]	; (82fa0 <PIOA_Handler+0x10>)
   82f96:	210b      	movs	r1, #11
   82f98:	4b02      	ldr	r3, [pc, #8]	; (82fa4 <PIOA_Handler+0x14>)
   82f9a:	4798      	blx	r3
}
   82f9c:	bd80      	pop	{r7, pc}
   82f9e:	bf00      	nop
   82fa0:	400e0e00 	.word	0x400e0e00
   82fa4:	00082eed 	.word	0x00082eed

00082fa8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82fa8:	b580      	push	{r7, lr}
   82faa:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   82fac:	4802      	ldr	r0, [pc, #8]	; (82fb8 <PIOB_Handler+0x10>)
   82fae:	210c      	movs	r1, #12
   82fb0:	4b02      	ldr	r3, [pc, #8]	; (82fbc <PIOB_Handler+0x14>)
   82fb2:	4798      	blx	r3
}
   82fb4:	bd80      	pop	{r7, pc}
   82fb6:	bf00      	nop
   82fb8:	400e1000 	.word	0x400e1000
   82fbc:	00082eed 	.word	0x00082eed

00082fc0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82fc0:	b580      	push	{r7, lr}
   82fc2:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   82fc4:	4802      	ldr	r0, [pc, #8]	; (82fd0 <PIOC_Handler+0x10>)
   82fc6:	210d      	movs	r1, #13
   82fc8:	4b02      	ldr	r3, [pc, #8]	; (82fd4 <PIOC_Handler+0x14>)
   82fca:	4798      	blx	r3
}
   82fcc:	bd80      	pop	{r7, pc}
   82fce:	bf00      	nop
   82fd0:	400e1200 	.word	0x400e1200
   82fd4:	00082eed 	.word	0x00082eed

00082fd8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82fd8:	b580      	push	{r7, lr}
   82fda:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   82fdc:	4802      	ldr	r0, [pc, #8]	; (82fe8 <PIOD_Handler+0x10>)
   82fde:	210e      	movs	r1, #14
   82fe0:	4b02      	ldr	r3, [pc, #8]	; (82fec <PIOD_Handler+0x14>)
   82fe2:	4798      	blx	r3
}
   82fe4:	bd80      	pop	{r7, pc}
   82fe6:	bf00      	nop
   82fe8:	400e1400 	.word	0x400e1400
   82fec:	00082eed 	.word	0x00082eed

00082ff0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82ff0:	b480      	push	{r7}
   82ff2:	b085      	sub	sp, #20
   82ff4:	af00      	add	r7, sp, #0
   82ff6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82ff8:	491d      	ldr	r1, [pc, #116]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   82ffa:	4b1d      	ldr	r3, [pc, #116]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   82ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83002:	687b      	ldr	r3, [r7, #4]
   83004:	4313      	orrs	r3, r2
   83006:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83008:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8300c:	60fb      	str	r3, [r7, #12]
   8300e:	e007      	b.n	83020 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83010:	68fb      	ldr	r3, [r7, #12]
   83012:	2b00      	cmp	r3, #0
   83014:	d101      	bne.n	8301a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83016:	2301      	movs	r3, #1
   83018:	e023      	b.n	83062 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8301a:	68fb      	ldr	r3, [r7, #12]
   8301c:	3b01      	subs	r3, #1
   8301e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83020:	4b13      	ldr	r3, [pc, #76]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   83022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83024:	f003 0308 	and.w	r3, r3, #8
   83028:	2b00      	cmp	r3, #0
   8302a:	d0f1      	beq.n	83010 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8302c:	4a10      	ldr	r2, [pc, #64]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   8302e:	4b10      	ldr	r3, [pc, #64]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   83030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83032:	f023 0303 	bic.w	r3, r3, #3
   83036:	f043 0302 	orr.w	r3, r3, #2
   8303a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8303c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83040:	60fb      	str	r3, [r7, #12]
   83042:	e007      	b.n	83054 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83044:	68fb      	ldr	r3, [r7, #12]
   83046:	2b00      	cmp	r3, #0
   83048:	d101      	bne.n	8304e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8304a:	2301      	movs	r3, #1
   8304c:	e009      	b.n	83062 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8304e:	68fb      	ldr	r3, [r7, #12]
   83050:	3b01      	subs	r3, #1
   83052:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83054:	4b06      	ldr	r3, [pc, #24]	; (83070 <pmc_switch_mck_to_pllack+0x80>)
   83056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83058:	f003 0308 	and.w	r3, r3, #8
   8305c:	2b00      	cmp	r3, #0
   8305e:	d0f1      	beq.n	83044 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83060:	2300      	movs	r3, #0
}
   83062:	4618      	mov	r0, r3
   83064:	3714      	adds	r7, #20
   83066:	46bd      	mov	sp, r7
   83068:	f85d 7b04 	ldr.w	r7, [sp], #4
   8306c:	4770      	bx	lr
   8306e:	bf00      	nop
   83070:	400e0600 	.word	0x400e0600

00083074 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83074:	b480      	push	{r7}
   83076:	b083      	sub	sp, #12
   83078:	af00      	add	r7, sp, #0
   8307a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   8307c:	687b      	ldr	r3, [r7, #4]
   8307e:	2b01      	cmp	r3, #1
   83080:	d107      	bne.n	83092 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   83082:	4a08      	ldr	r2, [pc, #32]	; (830a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   83084:	4b07      	ldr	r3, [pc, #28]	; (830a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   83086:	689b      	ldr	r3, [r3, #8]
   83088:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8308c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83090:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   83092:	4b04      	ldr	r3, [pc, #16]	; (830a4 <pmc_switch_sclk_to_32kxtal+0x30>)
   83094:	4a04      	ldr	r2, [pc, #16]	; (830a8 <pmc_switch_sclk_to_32kxtal+0x34>)
   83096:	601a      	str	r2, [r3, #0]
}
   83098:	370c      	adds	r7, #12
   8309a:	46bd      	mov	sp, r7
   8309c:	f85d 7b04 	ldr.w	r7, [sp], #4
   830a0:	4770      	bx	lr
   830a2:	bf00      	nop
   830a4:	400e1a10 	.word	0x400e1a10
   830a8:	a5000008 	.word	0xa5000008

000830ac <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   830ac:	b480      	push	{r7}
   830ae:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   830b0:	4b09      	ldr	r3, [pc, #36]	; (830d8 <pmc_osc_is_ready_32kxtal+0x2c>)
   830b2:	695b      	ldr	r3, [r3, #20]
   830b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   830b8:	2b00      	cmp	r3, #0
   830ba:	d007      	beq.n	830cc <pmc_osc_is_ready_32kxtal+0x20>
   830bc:	4b07      	ldr	r3, [pc, #28]	; (830dc <pmc_osc_is_ready_32kxtal+0x30>)
   830be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   830c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   830c4:	2b00      	cmp	r3, #0
   830c6:	d001      	beq.n	830cc <pmc_osc_is_ready_32kxtal+0x20>
   830c8:	2301      	movs	r3, #1
   830ca:	e000      	b.n	830ce <pmc_osc_is_ready_32kxtal+0x22>
   830cc:	2300      	movs	r3, #0
}
   830ce:	4618      	mov	r0, r3
   830d0:	46bd      	mov	sp, r7
   830d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   830d6:	4770      	bx	lr
   830d8:	400e1a10 	.word	0x400e1a10
   830dc:	400e0600 	.word	0x400e0600

000830e0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   830e0:	b480      	push	{r7}
   830e2:	b085      	sub	sp, #20
   830e4:	af00      	add	r7, sp, #0
   830e6:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   830e8:	2300      	movs	r3, #0
   830ea:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   830ec:	4b21      	ldr	r3, [pc, #132]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   830ee:	6a1b      	ldr	r3, [r3, #32]
   830f0:	f003 0301 	and.w	r3, r3, #1
   830f4:	2b00      	cmp	r3, #0
   830f6:	d00e      	beq.n	83116 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   830f8:	491e      	ldr	r1, [pc, #120]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   830fa:	4b1e      	ldr	r3, [pc, #120]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   830fc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   830fe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83102:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83106:	687a      	ldr	r2, [r7, #4]
   83108:	4313      	orrs	r3, r2
   8310a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8310e:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83112:	620b      	str	r3, [r1, #32]
   83114:	e00b      	b.n	8312e <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   83116:	2301      	movs	r3, #1
   83118:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8311a:	4916      	ldr	r1, [pc, #88]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   8311c:	4b15      	ldr	r3, [pc, #84]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   8311e:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83120:	4b15      	ldr	r3, [pc, #84]	; (83178 <pmc_switch_mainck_to_fastrc+0x98>)
   83122:	4013      	ands	r3, r2
   83124:	687a      	ldr	r2, [r7, #4]
   83126:	431a      	orrs	r2, r3
   83128:	4b14      	ldr	r3, [pc, #80]	; (8317c <pmc_switch_mainck_to_fastrc+0x9c>)
   8312a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8312c:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8312e:	bf00      	nop
   83130:	4b10      	ldr	r3, [pc, #64]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   83132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83138:	2b00      	cmp	r3, #0
   8313a:	d0f9      	beq.n	83130 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8313c:	4a0d      	ldr	r2, [pc, #52]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   8313e:	4b0d      	ldr	r3, [pc, #52]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   83140:	6a1b      	ldr	r3, [r3, #32]
   83142:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8314a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8314e:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   83150:	68fb      	ldr	r3, [r7, #12]
   83152:	2b00      	cmp	r3, #0
   83154:	d009      	beq.n	8316a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83156:	4a07      	ldr	r2, [pc, #28]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   83158:	4b06      	ldr	r3, [pc, #24]	; (83174 <pmc_switch_mainck_to_fastrc+0x94>)
   8315a:	6a1b      	ldr	r3, [r3, #32]
   8315c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83160:	f023 0301 	bic.w	r3, r3, #1
   83164:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83168:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   8316a:	3714      	adds	r7, #20
   8316c:	46bd      	mov	sp, r7
   8316e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83172:	4770      	bx	lr
   83174:	400e0600 	.word	0x400e0600
   83178:	ffc80086 	.word	0xffc80086
   8317c:	0037ff09 	.word	0x0037ff09

00083180 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83180:	b480      	push	{r7}
   83182:	b083      	sub	sp, #12
   83184:	af00      	add	r7, sp, #0
   83186:	6078      	str	r0, [r7, #4]
   83188:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8318a:	687b      	ldr	r3, [r7, #4]
   8318c:	2b00      	cmp	r3, #0
   8318e:	d008      	beq.n	831a2 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83190:	4916      	ldr	r1, [pc, #88]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   83192:	4b16      	ldr	r3, [pc, #88]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   83194:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   83196:	4a16      	ldr	r2, [pc, #88]	; (831f0 <pmc_switch_mainck_to_xtal+0x70>)
   83198:	401a      	ands	r2, r3
   8319a:	4b16      	ldr	r3, [pc, #88]	; (831f4 <pmc_switch_mainck_to_xtal+0x74>)
   8319c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8319e:	620b      	str	r3, [r1, #32]
   831a0:	e01e      	b.n	831e0 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   831a2:	4912      	ldr	r1, [pc, #72]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   831a4:	4b11      	ldr	r3, [pc, #68]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   831a6:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   831a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   831ac:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   831b0:	683a      	ldr	r2, [r7, #0]
   831b2:	0212      	lsls	r2, r2, #8
   831b4:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   831b6:	4313      	orrs	r3, r2
   831b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   831bc:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   831c0:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   831c2:	bf00      	nop
   831c4:	4b09      	ldr	r3, [pc, #36]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   831c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   831c8:	f003 0301 	and.w	r3, r3, #1
   831cc:	2b00      	cmp	r3, #0
   831ce:	d0f9      	beq.n	831c4 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   831d0:	4a06      	ldr	r2, [pc, #24]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   831d2:	4b06      	ldr	r3, [pc, #24]	; (831ec <pmc_switch_mainck_to_xtal+0x6c>)
   831d4:	6a1b      	ldr	r3, [r3, #32]
   831d6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   831da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   831de:	6213      	str	r3, [r2, #32]
	}
}
   831e0:	370c      	adds	r7, #12
   831e2:	46bd      	mov	sp, r7
   831e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   831e8:	4770      	bx	lr
   831ea:	bf00      	nop
   831ec:	400e0600 	.word	0x400e0600
   831f0:	fec8fffc 	.word	0xfec8fffc
   831f4:	01370002 	.word	0x01370002

000831f8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   831f8:	b480      	push	{r7}
   831fa:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   831fc:	4b04      	ldr	r3, [pc, #16]	; (83210 <pmc_osc_is_ready_mainck+0x18>)
   831fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83204:	4618      	mov	r0, r3
   83206:	46bd      	mov	sp, r7
   83208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8320c:	4770      	bx	lr
   8320e:	bf00      	nop
   83210:	400e0600 	.word	0x400e0600

00083214 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83214:	b480      	push	{r7}
   83216:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83218:	4b03      	ldr	r3, [pc, #12]	; (83228 <pmc_disable_pllack+0x14>)
   8321a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8321e:	629a      	str	r2, [r3, #40]	; 0x28
}
   83220:	46bd      	mov	sp, r7
   83222:	f85d 7b04 	ldr.w	r7, [sp], #4
   83226:	4770      	bx	lr
   83228:	400e0600 	.word	0x400e0600

0008322c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8322c:	b480      	push	{r7}
   8322e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83230:	4b04      	ldr	r3, [pc, #16]	; (83244 <pmc_is_locked_pllack+0x18>)
   83232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83234:	f003 0302 	and.w	r3, r3, #2
}
   83238:	4618      	mov	r0, r3
   8323a:	46bd      	mov	sp, r7
   8323c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83240:	4770      	bx	lr
   83242:	bf00      	nop
   83244:	400e0600 	.word	0x400e0600

00083248 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83248:	b480      	push	{r7}
   8324a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8324c:	4b04      	ldr	r3, [pc, #16]	; (83260 <pmc_is_locked_upll+0x18>)
   8324e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83250:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83254:	4618      	mov	r0, r3
   83256:	46bd      	mov	sp, r7
   83258:	f85d 7b04 	ldr.w	r7, [sp], #4
   8325c:	4770      	bx	lr
   8325e:	bf00      	nop
   83260:	400e0600 	.word	0x400e0600

00083264 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83264:	b480      	push	{r7}
   83266:	b083      	sub	sp, #12
   83268:	af00      	add	r7, sp, #0
   8326a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8326c:	687b      	ldr	r3, [r7, #4]
   8326e:	2b2c      	cmp	r3, #44	; 0x2c
   83270:	d901      	bls.n	83276 <pmc_enable_periph_clk+0x12>
		return 1;
   83272:	2301      	movs	r3, #1
   83274:	e02f      	b.n	832d6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83276:	687b      	ldr	r3, [r7, #4]
   83278:	2b1f      	cmp	r3, #31
   8327a:	d813      	bhi.n	832a4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8327c:	4b19      	ldr	r3, [pc, #100]	; (832e4 <pmc_enable_periph_clk+0x80>)
   8327e:	699a      	ldr	r2, [r3, #24]
   83280:	687b      	ldr	r3, [r7, #4]
   83282:	2101      	movs	r1, #1
   83284:	fa01 f303 	lsl.w	r3, r1, r3
   83288:	401a      	ands	r2, r3
   8328a:	687b      	ldr	r3, [r7, #4]
   8328c:	2101      	movs	r1, #1
   8328e:	fa01 f303 	lsl.w	r3, r1, r3
   83292:	429a      	cmp	r2, r3
   83294:	d01e      	beq.n	832d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83296:	4a13      	ldr	r2, [pc, #76]	; (832e4 <pmc_enable_periph_clk+0x80>)
   83298:	687b      	ldr	r3, [r7, #4]
   8329a:	2101      	movs	r1, #1
   8329c:	fa01 f303 	lsl.w	r3, r1, r3
   832a0:	6113      	str	r3, [r2, #16]
   832a2:	e017      	b.n	832d4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   832a4:	687b      	ldr	r3, [r7, #4]
   832a6:	3b20      	subs	r3, #32
   832a8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   832aa:	4b0e      	ldr	r3, [pc, #56]	; (832e4 <pmc_enable_periph_clk+0x80>)
   832ac:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   832b0:	687b      	ldr	r3, [r7, #4]
   832b2:	2101      	movs	r1, #1
   832b4:	fa01 f303 	lsl.w	r3, r1, r3
   832b8:	401a      	ands	r2, r3
   832ba:	687b      	ldr	r3, [r7, #4]
   832bc:	2101      	movs	r1, #1
   832be:	fa01 f303 	lsl.w	r3, r1, r3
   832c2:	429a      	cmp	r2, r3
   832c4:	d006      	beq.n	832d4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   832c6:	4a07      	ldr	r2, [pc, #28]	; (832e4 <pmc_enable_periph_clk+0x80>)
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	2101      	movs	r1, #1
   832cc:	fa01 f303 	lsl.w	r3, r1, r3
   832d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   832d4:	2300      	movs	r3, #0
}
   832d6:	4618      	mov	r0, r3
   832d8:	370c      	adds	r7, #12
   832da:	46bd      	mov	sp, r7
   832dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   832e0:	4770      	bx	lr
   832e2:	bf00      	nop
   832e4:	400e0600 	.word	0x400e0600

000832e8 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   832e8:	b480      	push	{r7}
   832ea:	b083      	sub	sp, #12
   832ec:	af00      	add	r7, sp, #0
   832ee:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   832f0:	687b      	ldr	r3, [r7, #4]
   832f2:	2b00      	cmp	r3, #0
   832f4:	d004      	beq.n	83300 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   832f6:	4b07      	ldr	r3, [pc, #28]	; (83314 <pmc_set_writeprotect+0x2c>)
   832f8:	4a07      	ldr	r2, [pc, #28]	; (83318 <pmc_set_writeprotect+0x30>)
   832fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   832fe:	e003      	b.n	83308 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83300:	4b04      	ldr	r3, [pc, #16]	; (83314 <pmc_set_writeprotect+0x2c>)
   83302:	4a06      	ldr	r2, [pc, #24]	; (8331c <pmc_set_writeprotect+0x34>)
   83304:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83308:	370c      	adds	r7, #12
   8330a:	46bd      	mov	sp, r7
   8330c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83310:	4770      	bx	lr
   83312:	bf00      	nop
   83314:	400e0600 	.word	0x400e0600
   83318:	504d4301 	.word	0x504d4301
   8331c:	504d4300 	.word	0x504d4300

00083320 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83320:	b480      	push	{r7}
   83322:	af00      	add	r7, sp, #0
	while (1) {
	}
   83324:	e7fe      	b.n	83324 <Dummy_Handler+0x4>
   83326:	bf00      	nop

00083328 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83328:	b580      	push	{r7, lr}
   8332a:	b082      	sub	sp, #8
   8332c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8332e:	4b1e      	ldr	r3, [pc, #120]	; (833a8 <Reset_Handler+0x80>)
   83330:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83332:	4b1e      	ldr	r3, [pc, #120]	; (833ac <Reset_Handler+0x84>)
   83334:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83336:	687a      	ldr	r2, [r7, #4]
   83338:	683b      	ldr	r3, [r7, #0]
   8333a:	429a      	cmp	r2, r3
   8333c:	d00c      	beq.n	83358 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8333e:	e007      	b.n	83350 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83340:	683b      	ldr	r3, [r7, #0]
   83342:	1d1a      	adds	r2, r3, #4
   83344:	603a      	str	r2, [r7, #0]
   83346:	687a      	ldr	r2, [r7, #4]
   83348:	1d11      	adds	r1, r2, #4
   8334a:	6079      	str	r1, [r7, #4]
   8334c:	6812      	ldr	r2, [r2, #0]
   8334e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83350:	683b      	ldr	r3, [r7, #0]
   83352:	4a17      	ldr	r2, [pc, #92]	; (833b0 <Reset_Handler+0x88>)
   83354:	4293      	cmp	r3, r2
   83356:	d3f3      	bcc.n	83340 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83358:	4b16      	ldr	r3, [pc, #88]	; (833b4 <Reset_Handler+0x8c>)
   8335a:	603b      	str	r3, [r7, #0]
   8335c:	e004      	b.n	83368 <Reset_Handler+0x40>
		*pDest++ = 0;
   8335e:	683b      	ldr	r3, [r7, #0]
   83360:	1d1a      	adds	r2, r3, #4
   83362:	603a      	str	r2, [r7, #0]
   83364:	2200      	movs	r2, #0
   83366:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83368:	683b      	ldr	r3, [r7, #0]
   8336a:	4a13      	ldr	r2, [pc, #76]	; (833b8 <Reset_Handler+0x90>)
   8336c:	4293      	cmp	r3, r2
   8336e:	d3f6      	bcc.n	8335e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83370:	4b12      	ldr	r3, [pc, #72]	; (833bc <Reset_Handler+0x94>)
   83372:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83374:	4a12      	ldr	r2, [pc, #72]	; (833c0 <Reset_Handler+0x98>)
   83376:	687b      	ldr	r3, [r7, #4]
   83378:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8337c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83380:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83382:	687b      	ldr	r3, [r7, #4]
   83384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83388:	d309      	bcc.n	8339e <Reset_Handler+0x76>
   8338a:	687b      	ldr	r3, [r7, #4]
   8338c:	4a0d      	ldr	r2, [pc, #52]	; (833c4 <Reset_Handler+0x9c>)
   8338e:	4293      	cmp	r3, r2
   83390:	d805      	bhi.n	8339e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83392:	4a0b      	ldr	r2, [pc, #44]	; (833c0 <Reset_Handler+0x98>)
   83394:	4b0a      	ldr	r3, [pc, #40]	; (833c0 <Reset_Handler+0x98>)
   83396:	689b      	ldr	r3, [r3, #8]
   83398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8339c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8339e:	4b0a      	ldr	r3, [pc, #40]	; (833c8 <Reset_Handler+0xa0>)
   833a0:	4798      	blx	r3

	/* Branch to main function */
	main();
   833a2:	4b0a      	ldr	r3, [pc, #40]	; (833cc <Reset_Handler+0xa4>)
   833a4:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   833a6:	e7fe      	b.n	833a6 <Reset_Handler+0x7e>
   833a8:	00086adc 	.word	0x00086adc
   833ac:	20070000 	.word	0x20070000
   833b0:	20070c6c 	.word	0x20070c6c
   833b4:	20070c6c 	.word	0x20070c6c
   833b8:	2007124c 	.word	0x2007124c
   833bc:	00080000 	.word	0x00080000
   833c0:	e000ed00 	.word	0xe000ed00
   833c4:	200fffff 	.word	0x200fffff
   833c8:	00083a69 	.word	0x00083a69
   833cc:	00081ded 	.word	0x00081ded

000833d0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   833d0:	b480      	push	{r7}
   833d2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   833d4:	4b56      	ldr	r3, [pc, #344]	; (83530 <SystemCoreClockUpdate+0x160>)
   833d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833d8:	f003 0303 	and.w	r3, r3, #3
   833dc:	2b03      	cmp	r3, #3
   833de:	f200 808a 	bhi.w	834f6 <SystemCoreClockUpdate+0x126>
   833e2:	a201      	add	r2, pc, #4	; (adr r2, 833e8 <SystemCoreClockUpdate+0x18>)
   833e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833e8:	000833f9 	.word	0x000833f9
   833ec:	00083419 	.word	0x00083419
   833f0:	00083469 	.word	0x00083469
   833f4:	00083469 	.word	0x00083469
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   833f8:	4b4e      	ldr	r3, [pc, #312]	; (83534 <SystemCoreClockUpdate+0x164>)
   833fa:	695b      	ldr	r3, [r3, #20]
   833fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83400:	2b00      	cmp	r3, #0
   83402:	d004      	beq.n	8340e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83404:	4b4c      	ldr	r3, [pc, #304]	; (83538 <SystemCoreClockUpdate+0x168>)
   83406:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8340a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8340c:	e073      	b.n	834f6 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8340e:	4b4a      	ldr	r3, [pc, #296]	; (83538 <SystemCoreClockUpdate+0x168>)
   83410:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83414:	601a      	str	r2, [r3, #0]
		}
		break;
   83416:	e06e      	b.n	834f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83418:	4b45      	ldr	r3, [pc, #276]	; (83530 <SystemCoreClockUpdate+0x160>)
   8341a:	6a1b      	ldr	r3, [r3, #32]
   8341c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83420:	2b00      	cmp	r3, #0
   83422:	d003      	beq.n	8342c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83424:	4b44      	ldr	r3, [pc, #272]	; (83538 <SystemCoreClockUpdate+0x168>)
   83426:	4a45      	ldr	r2, [pc, #276]	; (8353c <SystemCoreClockUpdate+0x16c>)
   83428:	601a      	str	r2, [r3, #0]
   8342a:	e01c      	b.n	83466 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8342c:	4b42      	ldr	r3, [pc, #264]	; (83538 <SystemCoreClockUpdate+0x168>)
   8342e:	4a44      	ldr	r2, [pc, #272]	; (83540 <SystemCoreClockUpdate+0x170>)
   83430:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83432:	4b3f      	ldr	r3, [pc, #252]	; (83530 <SystemCoreClockUpdate+0x160>)
   83434:	6a1b      	ldr	r3, [r3, #32]
   83436:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8343a:	2b10      	cmp	r3, #16
   8343c:	d004      	beq.n	83448 <SystemCoreClockUpdate+0x78>
   8343e:	2b20      	cmp	r3, #32
   83440:	d008      	beq.n	83454 <SystemCoreClockUpdate+0x84>
   83442:	2b00      	cmp	r3, #0
   83444:	d00e      	beq.n	83464 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83446:	e00e      	b.n	83466 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83448:	4b3b      	ldr	r3, [pc, #236]	; (83538 <SystemCoreClockUpdate+0x168>)
   8344a:	681b      	ldr	r3, [r3, #0]
   8344c:	005b      	lsls	r3, r3, #1
   8344e:	4a3a      	ldr	r2, [pc, #232]	; (83538 <SystemCoreClockUpdate+0x168>)
   83450:	6013      	str	r3, [r2, #0]
				break;
   83452:	e008      	b.n	83466 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83454:	4b38      	ldr	r3, [pc, #224]	; (83538 <SystemCoreClockUpdate+0x168>)
   83456:	681a      	ldr	r2, [r3, #0]
   83458:	4613      	mov	r3, r2
   8345a:	005b      	lsls	r3, r3, #1
   8345c:	4413      	add	r3, r2
   8345e:	4a36      	ldr	r2, [pc, #216]	; (83538 <SystemCoreClockUpdate+0x168>)
   83460:	6013      	str	r3, [r2, #0]
				break;
   83462:	e000      	b.n	83466 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83464:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   83466:	e046      	b.n	834f6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83468:	4b31      	ldr	r3, [pc, #196]	; (83530 <SystemCoreClockUpdate+0x160>)
   8346a:	6a1b      	ldr	r3, [r3, #32]
   8346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83470:	2b00      	cmp	r3, #0
   83472:	d003      	beq.n	8347c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83474:	4b30      	ldr	r3, [pc, #192]	; (83538 <SystemCoreClockUpdate+0x168>)
   83476:	4a31      	ldr	r2, [pc, #196]	; (8353c <SystemCoreClockUpdate+0x16c>)
   83478:	601a      	str	r2, [r3, #0]
   8347a:	e01c      	b.n	834b6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8347c:	4b2e      	ldr	r3, [pc, #184]	; (83538 <SystemCoreClockUpdate+0x168>)
   8347e:	4a30      	ldr	r2, [pc, #192]	; (83540 <SystemCoreClockUpdate+0x170>)
   83480:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83482:	4b2b      	ldr	r3, [pc, #172]	; (83530 <SystemCoreClockUpdate+0x160>)
   83484:	6a1b      	ldr	r3, [r3, #32]
   83486:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8348a:	2b10      	cmp	r3, #16
   8348c:	d004      	beq.n	83498 <SystemCoreClockUpdate+0xc8>
   8348e:	2b20      	cmp	r3, #32
   83490:	d008      	beq.n	834a4 <SystemCoreClockUpdate+0xd4>
   83492:	2b00      	cmp	r3, #0
   83494:	d00e      	beq.n	834b4 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83496:	e00e      	b.n	834b6 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83498:	4b27      	ldr	r3, [pc, #156]	; (83538 <SystemCoreClockUpdate+0x168>)
   8349a:	681b      	ldr	r3, [r3, #0]
   8349c:	005b      	lsls	r3, r3, #1
   8349e:	4a26      	ldr	r2, [pc, #152]	; (83538 <SystemCoreClockUpdate+0x168>)
   834a0:	6013      	str	r3, [r2, #0]
				break;
   834a2:	e008      	b.n	834b6 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   834a4:	4b24      	ldr	r3, [pc, #144]	; (83538 <SystemCoreClockUpdate+0x168>)
   834a6:	681a      	ldr	r2, [r3, #0]
   834a8:	4613      	mov	r3, r2
   834aa:	005b      	lsls	r3, r3, #1
   834ac:	4413      	add	r3, r2
   834ae:	4a22      	ldr	r2, [pc, #136]	; (83538 <SystemCoreClockUpdate+0x168>)
   834b0:	6013      	str	r3, [r2, #0]
				break;
   834b2:	e000      	b.n	834b6 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   834b4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   834b6:	4b1e      	ldr	r3, [pc, #120]	; (83530 <SystemCoreClockUpdate+0x160>)
   834b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   834ba:	f003 0303 	and.w	r3, r3, #3
   834be:	2b02      	cmp	r3, #2
   834c0:	d115      	bne.n	834ee <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   834c2:	4b1b      	ldr	r3, [pc, #108]	; (83530 <SystemCoreClockUpdate+0x160>)
   834c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   834c6:	4b1f      	ldr	r3, [pc, #124]	; (83544 <SystemCoreClockUpdate+0x174>)
   834c8:	4013      	ands	r3, r2
   834ca:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   834cc:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   834ce:	4a1a      	ldr	r2, [pc, #104]	; (83538 <SystemCoreClockUpdate+0x168>)
   834d0:	6812      	ldr	r2, [r2, #0]
   834d2:	fb02 f303 	mul.w	r3, r2, r3
   834d6:	4a18      	ldr	r2, [pc, #96]	; (83538 <SystemCoreClockUpdate+0x168>)
   834d8:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   834da:	4b15      	ldr	r3, [pc, #84]	; (83530 <SystemCoreClockUpdate+0x160>)
   834dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   834de:	b2db      	uxtb	r3, r3
   834e0:	4a15      	ldr	r2, [pc, #84]	; (83538 <SystemCoreClockUpdate+0x168>)
   834e2:	6812      	ldr	r2, [r2, #0]
   834e4:	fbb2 f3f3 	udiv	r3, r2, r3
   834e8:	4a13      	ldr	r2, [pc, #76]	; (83538 <SystemCoreClockUpdate+0x168>)
   834ea:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   834ec:	e002      	b.n	834f4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   834ee:	4b12      	ldr	r3, [pc, #72]	; (83538 <SystemCoreClockUpdate+0x168>)
   834f0:	4a15      	ldr	r2, [pc, #84]	; (83548 <SystemCoreClockUpdate+0x178>)
   834f2:	601a      	str	r2, [r3, #0]
		}
		break;
   834f4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   834f6:	4b0e      	ldr	r3, [pc, #56]	; (83530 <SystemCoreClockUpdate+0x160>)
   834f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   834fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   834fe:	2b70      	cmp	r3, #112	; 0x70
   83500:	d108      	bne.n	83514 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83502:	4b0d      	ldr	r3, [pc, #52]	; (83538 <SystemCoreClockUpdate+0x168>)
   83504:	681b      	ldr	r3, [r3, #0]
   83506:	4a11      	ldr	r2, [pc, #68]	; (8354c <SystemCoreClockUpdate+0x17c>)
   83508:	fba2 2303 	umull	r2, r3, r2, r3
   8350c:	085b      	lsrs	r3, r3, #1
   8350e:	4a0a      	ldr	r2, [pc, #40]	; (83538 <SystemCoreClockUpdate+0x168>)
   83510:	6013      	str	r3, [r2, #0]
   83512:	e009      	b.n	83528 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83514:	4b06      	ldr	r3, [pc, #24]	; (83530 <SystemCoreClockUpdate+0x160>)
   83516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83518:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8351c:	091a      	lsrs	r2, r3, #4
   8351e:	4b06      	ldr	r3, [pc, #24]	; (83538 <SystemCoreClockUpdate+0x168>)
   83520:	681b      	ldr	r3, [r3, #0]
   83522:	40d3      	lsrs	r3, r2
   83524:	4a04      	ldr	r2, [pc, #16]	; (83538 <SystemCoreClockUpdate+0x168>)
   83526:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83528:	46bd      	mov	sp, r7
   8352a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8352e:	4770      	bx	lr
   83530:	400e0600 	.word	0x400e0600
   83534:	400e1a10 	.word	0x400e1a10
   83538:	20070404 	.word	0x20070404
   8353c:	00b71b00 	.word	0x00b71b00
   83540:	003d0900 	.word	0x003d0900
   83544:	07ff0000 	.word	0x07ff0000
   83548:	0e4e1c00 	.word	0x0e4e1c00
   8354c:	aaaaaaab 	.word	0xaaaaaaab

00083550 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   83550:	b480      	push	{r7}
   83552:	b083      	sub	sp, #12
   83554:	af00      	add	r7, sp, #0
   83556:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   83558:	687b      	ldr	r3, [r7, #4]
   8355a:	4a25      	ldr	r2, [pc, #148]	; (835f0 <system_init_flash+0xa0>)
   8355c:	4293      	cmp	r3, r2
   8355e:	d806      	bhi.n	8356e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   83560:	4b24      	ldr	r3, [pc, #144]	; (835f4 <system_init_flash+0xa4>)
   83562:	2200      	movs	r2, #0
   83564:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   83566:	4b24      	ldr	r3, [pc, #144]	; (835f8 <system_init_flash+0xa8>)
   83568:	2200      	movs	r2, #0
   8356a:	601a      	str	r2, [r3, #0]
   8356c:	e03b      	b.n	835e6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8356e:	687b      	ldr	r3, [r7, #4]
   83570:	4a22      	ldr	r2, [pc, #136]	; (835fc <system_init_flash+0xac>)
   83572:	4293      	cmp	r3, r2
   83574:	d808      	bhi.n	83588 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   83576:	4b1f      	ldr	r3, [pc, #124]	; (835f4 <system_init_flash+0xa4>)
   83578:	f44f 7280 	mov.w	r2, #256	; 0x100
   8357c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8357e:	4b1e      	ldr	r3, [pc, #120]	; (835f8 <system_init_flash+0xa8>)
   83580:	f44f 7280 	mov.w	r2, #256	; 0x100
   83584:	601a      	str	r2, [r3, #0]
   83586:	e02e      	b.n	835e6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   83588:	687b      	ldr	r3, [r7, #4]
   8358a:	4a1d      	ldr	r2, [pc, #116]	; (83600 <system_init_flash+0xb0>)
   8358c:	4293      	cmp	r3, r2
   8358e:	d808      	bhi.n	835a2 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   83590:	4b18      	ldr	r3, [pc, #96]	; (835f4 <system_init_flash+0xa4>)
   83592:	f44f 7200 	mov.w	r2, #512	; 0x200
   83596:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83598:	4b17      	ldr	r3, [pc, #92]	; (835f8 <system_init_flash+0xa8>)
   8359a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8359e:	601a      	str	r2, [r3, #0]
   835a0:	e021      	b.n	835e6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   835a2:	687b      	ldr	r3, [r7, #4]
   835a4:	4a17      	ldr	r2, [pc, #92]	; (83604 <system_init_flash+0xb4>)
   835a6:	4293      	cmp	r3, r2
   835a8:	d808      	bhi.n	835bc <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   835aa:	4b12      	ldr	r3, [pc, #72]	; (835f4 <system_init_flash+0xa4>)
   835ac:	f44f 7240 	mov.w	r2, #768	; 0x300
   835b0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   835b2:	4b11      	ldr	r3, [pc, #68]	; (835f8 <system_init_flash+0xa8>)
   835b4:	f44f 7240 	mov.w	r2, #768	; 0x300
   835b8:	601a      	str	r2, [r3, #0]
   835ba:	e014      	b.n	835e6 <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   835bc:	687b      	ldr	r3, [r7, #4]
   835be:	4a12      	ldr	r2, [pc, #72]	; (83608 <system_init_flash+0xb8>)
   835c0:	4293      	cmp	r3, r2
   835c2:	d808      	bhi.n	835d6 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   835c4:	4b0b      	ldr	r3, [pc, #44]	; (835f4 <system_init_flash+0xa4>)
   835c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   835ca:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   835cc:	4b0a      	ldr	r3, [pc, #40]	; (835f8 <system_init_flash+0xa8>)
   835ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   835d2:	601a      	str	r2, [r3, #0]
   835d4:	e007      	b.n	835e6 <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   835d6:	4b07      	ldr	r3, [pc, #28]	; (835f4 <system_init_flash+0xa4>)
   835d8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   835dc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   835de:	4b06      	ldr	r3, [pc, #24]	; (835f8 <system_init_flash+0xa8>)
   835e0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   835e4:	601a      	str	r2, [r3, #0]
	}
}
   835e6:	370c      	adds	r7, #12
   835e8:	46bd      	mov	sp, r7
   835ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   835ee:	4770      	bx	lr
   835f0:	0121eabf 	.word	0x0121eabf
   835f4:	400e0a00 	.word	0x400e0a00
   835f8:	400e0c00 	.word	0x400e0c00
   835fc:	02faf07f 	.word	0x02faf07f
   83600:	03d08fff 	.word	0x03d08fff
   83604:	04c4b3ff 	.word	0x04c4b3ff
   83608:	055d4a7f 	.word	0x055d4a7f

0008360c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   8360c:	b480      	push	{r7}
   8360e:	b085      	sub	sp, #20
   83610:	af00      	add	r7, sp, #0
   83612:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   83614:	4b0b      	ldr	r3, [pc, #44]	; (83644 <_sbrk+0x38>)
   83616:	681b      	ldr	r3, [r3, #0]
   83618:	2b00      	cmp	r3, #0
   8361a:	d102      	bne.n	83622 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   8361c:	4b09      	ldr	r3, [pc, #36]	; (83644 <_sbrk+0x38>)
   8361e:	4a0a      	ldr	r2, [pc, #40]	; (83648 <_sbrk+0x3c>)
   83620:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   83622:	4b08      	ldr	r3, [pc, #32]	; (83644 <_sbrk+0x38>)
   83624:	681b      	ldr	r3, [r3, #0]
   83626:	60fb      	str	r3, [r7, #12]

	heap += incr;
   83628:	4b06      	ldr	r3, [pc, #24]	; (83644 <_sbrk+0x38>)
   8362a:	681a      	ldr	r2, [r3, #0]
   8362c:	687b      	ldr	r3, [r7, #4]
   8362e:	4413      	add	r3, r2
   83630:	4a04      	ldr	r2, [pc, #16]	; (83644 <_sbrk+0x38>)
   83632:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83634:	68fb      	ldr	r3, [r7, #12]
}
   83636:	4618      	mov	r0, r3
   83638:	3714      	adds	r7, #20
   8363a:	46bd      	mov	sp, r7
   8363c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83640:	4770      	bx	lr
   83642:	bf00      	nop
   83644:	20070d84 	.word	0x20070d84
   83648:	20073250 	.word	0x20073250

0008364c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   8364c:	b480      	push	{r7}
   8364e:	b083      	sub	sp, #12
   83650:	af00      	add	r7, sp, #0
   83652:	6078      	str	r0, [r7, #4]
	return -1;
   83654:	f04f 33ff 	mov.w	r3, #4294967295
}
   83658:	4618      	mov	r0, r3
   8365a:	370c      	adds	r7, #12
   8365c:	46bd      	mov	sp, r7
   8365e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83662:	4770      	bx	lr

00083664 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83664:	b480      	push	{r7}
   83666:	b083      	sub	sp, #12
   83668:	af00      	add	r7, sp, #0
   8366a:	6078      	str	r0, [r7, #4]
   8366c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   8366e:	683b      	ldr	r3, [r7, #0]
   83670:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83674:	605a      	str	r2, [r3, #4]

	return 0;
   83676:	2300      	movs	r3, #0
}
   83678:	4618      	mov	r0, r3
   8367a:	370c      	adds	r7, #12
   8367c:	46bd      	mov	sp, r7
   8367e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83682:	4770      	bx	lr

00083684 <_isatty>:

extern int _isatty(int file)
{
   83684:	b480      	push	{r7}
   83686:	b083      	sub	sp, #12
   83688:	af00      	add	r7, sp, #0
   8368a:	6078      	str	r0, [r7, #4]
	return 1;
   8368c:	2301      	movs	r3, #1
}
   8368e:	4618      	mov	r0, r3
   83690:	370c      	adds	r7, #12
   83692:	46bd      	mov	sp, r7
   83694:	f85d 7b04 	ldr.w	r7, [sp], #4
   83698:	4770      	bx	lr
   8369a:	bf00      	nop

0008369c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   8369c:	b480      	push	{r7}
   8369e:	b085      	sub	sp, #20
   836a0:	af00      	add	r7, sp, #0
   836a2:	60f8      	str	r0, [r7, #12]
   836a4:	60b9      	str	r1, [r7, #8]
   836a6:	607a      	str	r2, [r7, #4]
	return 0;
   836a8:	2300      	movs	r3, #0
}
   836aa:	4618      	mov	r0, r3
   836ac:	3714      	adds	r7, #20
   836ae:	46bd      	mov	sp, r7
   836b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   836b4:	4770      	bx	lr
   836b6:	bf00      	nop

000836b8 <__aeabi_drsub>:
   836b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   836bc:	e002      	b.n	836c4 <__adddf3>
   836be:	bf00      	nop

000836c0 <__aeabi_dsub>:
   836c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000836c4 <__adddf3>:
   836c4:	b530      	push	{r4, r5, lr}
   836c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   836ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   836ce:	ea94 0f05 	teq	r4, r5
   836d2:	bf08      	it	eq
   836d4:	ea90 0f02 	teqeq	r0, r2
   836d8:	bf1f      	itttt	ne
   836da:	ea54 0c00 	orrsne.w	ip, r4, r0
   836de:	ea55 0c02 	orrsne.w	ip, r5, r2
   836e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   836e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   836ea:	f000 80e2 	beq.w	838b2 <__adddf3+0x1ee>
   836ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   836f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   836f6:	bfb8      	it	lt
   836f8:	426d      	neglt	r5, r5
   836fa:	dd0c      	ble.n	83716 <__adddf3+0x52>
   836fc:	442c      	add	r4, r5
   836fe:	ea80 0202 	eor.w	r2, r0, r2
   83702:	ea81 0303 	eor.w	r3, r1, r3
   83706:	ea82 0000 	eor.w	r0, r2, r0
   8370a:	ea83 0101 	eor.w	r1, r3, r1
   8370e:	ea80 0202 	eor.w	r2, r0, r2
   83712:	ea81 0303 	eor.w	r3, r1, r3
   83716:	2d36      	cmp	r5, #54	; 0x36
   83718:	bf88      	it	hi
   8371a:	bd30      	pophi	{r4, r5, pc}
   8371c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83720:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83724:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83728:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8372c:	d002      	beq.n	83734 <__adddf3+0x70>
   8372e:	4240      	negs	r0, r0
   83730:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83734:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83738:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8373c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83740:	d002      	beq.n	83748 <__adddf3+0x84>
   83742:	4252      	negs	r2, r2
   83744:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83748:	ea94 0f05 	teq	r4, r5
   8374c:	f000 80a7 	beq.w	8389e <__adddf3+0x1da>
   83750:	f1a4 0401 	sub.w	r4, r4, #1
   83754:	f1d5 0e20 	rsbs	lr, r5, #32
   83758:	db0d      	blt.n	83776 <__adddf3+0xb2>
   8375a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8375e:	fa22 f205 	lsr.w	r2, r2, r5
   83762:	1880      	adds	r0, r0, r2
   83764:	f141 0100 	adc.w	r1, r1, #0
   83768:	fa03 f20e 	lsl.w	r2, r3, lr
   8376c:	1880      	adds	r0, r0, r2
   8376e:	fa43 f305 	asr.w	r3, r3, r5
   83772:	4159      	adcs	r1, r3
   83774:	e00e      	b.n	83794 <__adddf3+0xd0>
   83776:	f1a5 0520 	sub.w	r5, r5, #32
   8377a:	f10e 0e20 	add.w	lr, lr, #32
   8377e:	2a01      	cmp	r2, #1
   83780:	fa03 fc0e 	lsl.w	ip, r3, lr
   83784:	bf28      	it	cs
   83786:	f04c 0c02 	orrcs.w	ip, ip, #2
   8378a:	fa43 f305 	asr.w	r3, r3, r5
   8378e:	18c0      	adds	r0, r0, r3
   83790:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83794:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83798:	d507      	bpl.n	837aa <__adddf3+0xe6>
   8379a:	f04f 0e00 	mov.w	lr, #0
   8379e:	f1dc 0c00 	rsbs	ip, ip, #0
   837a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   837a6:	eb6e 0101 	sbc.w	r1, lr, r1
   837aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   837ae:	d31b      	bcc.n	837e8 <__adddf3+0x124>
   837b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   837b4:	d30c      	bcc.n	837d0 <__adddf3+0x10c>
   837b6:	0849      	lsrs	r1, r1, #1
   837b8:	ea5f 0030 	movs.w	r0, r0, rrx
   837bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   837c0:	f104 0401 	add.w	r4, r4, #1
   837c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   837c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   837cc:	f080 809a 	bcs.w	83904 <__adddf3+0x240>
   837d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   837d4:	bf08      	it	eq
   837d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   837da:	f150 0000 	adcs.w	r0, r0, #0
   837de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   837e2:	ea41 0105 	orr.w	r1, r1, r5
   837e6:	bd30      	pop	{r4, r5, pc}
   837e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   837ec:	4140      	adcs	r0, r0
   837ee:	eb41 0101 	adc.w	r1, r1, r1
   837f2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   837f6:	f1a4 0401 	sub.w	r4, r4, #1
   837fa:	d1e9      	bne.n	837d0 <__adddf3+0x10c>
   837fc:	f091 0f00 	teq	r1, #0
   83800:	bf04      	itt	eq
   83802:	4601      	moveq	r1, r0
   83804:	2000      	moveq	r0, #0
   83806:	fab1 f381 	clz	r3, r1
   8380a:	bf08      	it	eq
   8380c:	3320      	addeq	r3, #32
   8380e:	f1a3 030b 	sub.w	r3, r3, #11
   83812:	f1b3 0220 	subs.w	r2, r3, #32
   83816:	da0c      	bge.n	83832 <__adddf3+0x16e>
   83818:	320c      	adds	r2, #12
   8381a:	dd08      	ble.n	8382e <__adddf3+0x16a>
   8381c:	f102 0c14 	add.w	ip, r2, #20
   83820:	f1c2 020c 	rsb	r2, r2, #12
   83824:	fa01 f00c 	lsl.w	r0, r1, ip
   83828:	fa21 f102 	lsr.w	r1, r1, r2
   8382c:	e00c      	b.n	83848 <__adddf3+0x184>
   8382e:	f102 0214 	add.w	r2, r2, #20
   83832:	bfd8      	it	le
   83834:	f1c2 0c20 	rsble	ip, r2, #32
   83838:	fa01 f102 	lsl.w	r1, r1, r2
   8383c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83840:	bfdc      	itt	le
   83842:	ea41 010c 	orrle.w	r1, r1, ip
   83846:	4090      	lslle	r0, r2
   83848:	1ae4      	subs	r4, r4, r3
   8384a:	bfa2      	ittt	ge
   8384c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83850:	4329      	orrge	r1, r5
   83852:	bd30      	popge	{r4, r5, pc}
   83854:	ea6f 0404 	mvn.w	r4, r4
   83858:	3c1f      	subs	r4, #31
   8385a:	da1c      	bge.n	83896 <__adddf3+0x1d2>
   8385c:	340c      	adds	r4, #12
   8385e:	dc0e      	bgt.n	8387e <__adddf3+0x1ba>
   83860:	f104 0414 	add.w	r4, r4, #20
   83864:	f1c4 0220 	rsb	r2, r4, #32
   83868:	fa20 f004 	lsr.w	r0, r0, r4
   8386c:	fa01 f302 	lsl.w	r3, r1, r2
   83870:	ea40 0003 	orr.w	r0, r0, r3
   83874:	fa21 f304 	lsr.w	r3, r1, r4
   83878:	ea45 0103 	orr.w	r1, r5, r3
   8387c:	bd30      	pop	{r4, r5, pc}
   8387e:	f1c4 040c 	rsb	r4, r4, #12
   83882:	f1c4 0220 	rsb	r2, r4, #32
   83886:	fa20 f002 	lsr.w	r0, r0, r2
   8388a:	fa01 f304 	lsl.w	r3, r1, r4
   8388e:	ea40 0003 	orr.w	r0, r0, r3
   83892:	4629      	mov	r1, r5
   83894:	bd30      	pop	{r4, r5, pc}
   83896:	fa21 f004 	lsr.w	r0, r1, r4
   8389a:	4629      	mov	r1, r5
   8389c:	bd30      	pop	{r4, r5, pc}
   8389e:	f094 0f00 	teq	r4, #0
   838a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   838a6:	bf06      	itte	eq
   838a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   838ac:	3401      	addeq	r4, #1
   838ae:	3d01      	subne	r5, #1
   838b0:	e74e      	b.n	83750 <__adddf3+0x8c>
   838b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   838b6:	bf18      	it	ne
   838b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   838bc:	d029      	beq.n	83912 <__adddf3+0x24e>
   838be:	ea94 0f05 	teq	r4, r5
   838c2:	bf08      	it	eq
   838c4:	ea90 0f02 	teqeq	r0, r2
   838c8:	d005      	beq.n	838d6 <__adddf3+0x212>
   838ca:	ea54 0c00 	orrs.w	ip, r4, r0
   838ce:	bf04      	itt	eq
   838d0:	4619      	moveq	r1, r3
   838d2:	4610      	moveq	r0, r2
   838d4:	bd30      	pop	{r4, r5, pc}
   838d6:	ea91 0f03 	teq	r1, r3
   838da:	bf1e      	ittt	ne
   838dc:	2100      	movne	r1, #0
   838de:	2000      	movne	r0, #0
   838e0:	bd30      	popne	{r4, r5, pc}
   838e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   838e6:	d105      	bne.n	838f4 <__adddf3+0x230>
   838e8:	0040      	lsls	r0, r0, #1
   838ea:	4149      	adcs	r1, r1
   838ec:	bf28      	it	cs
   838ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   838f2:	bd30      	pop	{r4, r5, pc}
   838f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   838f8:	bf3c      	itt	cc
   838fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   838fe:	bd30      	popcc	{r4, r5, pc}
   83900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83904:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8390c:	f04f 0000 	mov.w	r0, #0
   83910:	bd30      	pop	{r4, r5, pc}
   83912:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83916:	bf1a      	itte	ne
   83918:	4619      	movne	r1, r3
   8391a:	4610      	movne	r0, r2
   8391c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83920:	bf1c      	itt	ne
   83922:	460b      	movne	r3, r1
   83924:	4602      	movne	r2, r0
   83926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8392a:	bf06      	itte	eq
   8392c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83930:	ea91 0f03 	teqeq	r1, r3
   83934:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83938:	bd30      	pop	{r4, r5, pc}
   8393a:	bf00      	nop

0008393c <__aeabi_ui2d>:
   8393c:	f090 0f00 	teq	r0, #0
   83940:	bf04      	itt	eq
   83942:	2100      	moveq	r1, #0
   83944:	4770      	bxeq	lr
   83946:	b530      	push	{r4, r5, lr}
   83948:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8394c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83950:	f04f 0500 	mov.w	r5, #0
   83954:	f04f 0100 	mov.w	r1, #0
   83958:	e750      	b.n	837fc <__adddf3+0x138>
   8395a:	bf00      	nop

0008395c <__aeabi_i2d>:
   8395c:	f090 0f00 	teq	r0, #0
   83960:	bf04      	itt	eq
   83962:	2100      	moveq	r1, #0
   83964:	4770      	bxeq	lr
   83966:	b530      	push	{r4, r5, lr}
   83968:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8396c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83970:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83974:	bf48      	it	mi
   83976:	4240      	negmi	r0, r0
   83978:	f04f 0100 	mov.w	r1, #0
   8397c:	e73e      	b.n	837fc <__adddf3+0x138>
   8397e:	bf00      	nop

00083980 <__aeabi_f2d>:
   83980:	0042      	lsls	r2, r0, #1
   83982:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83986:	ea4f 0131 	mov.w	r1, r1, rrx
   8398a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8398e:	bf1f      	itttt	ne
   83990:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83994:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83998:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8399c:	4770      	bxne	lr
   8399e:	f092 0f00 	teq	r2, #0
   839a2:	bf14      	ite	ne
   839a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839a8:	4770      	bxeq	lr
   839aa:	b530      	push	{r4, r5, lr}
   839ac:	f44f 7460 	mov.w	r4, #896	; 0x380
   839b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   839b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   839b8:	e720      	b.n	837fc <__adddf3+0x138>
   839ba:	bf00      	nop

000839bc <__aeabi_ul2d>:
   839bc:	ea50 0201 	orrs.w	r2, r0, r1
   839c0:	bf08      	it	eq
   839c2:	4770      	bxeq	lr
   839c4:	b530      	push	{r4, r5, lr}
   839c6:	f04f 0500 	mov.w	r5, #0
   839ca:	e00a      	b.n	839e2 <__aeabi_l2d+0x16>

000839cc <__aeabi_l2d>:
   839cc:	ea50 0201 	orrs.w	r2, r0, r1
   839d0:	bf08      	it	eq
   839d2:	4770      	bxeq	lr
   839d4:	b530      	push	{r4, r5, lr}
   839d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   839da:	d502      	bpl.n	839e2 <__aeabi_l2d+0x16>
   839dc:	4240      	negs	r0, r0
   839de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   839e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   839e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   839ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   839ee:	f43f aedc 	beq.w	837aa <__adddf3+0xe6>
   839f2:	f04f 0203 	mov.w	r2, #3
   839f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   839fa:	bf18      	it	ne
   839fc:	3203      	addne	r2, #3
   839fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a02:	bf18      	it	ne
   83a04:	3203      	addne	r2, #3
   83a06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83a0a:	f1c2 0320 	rsb	r3, r2, #32
   83a0e:	fa00 fc03 	lsl.w	ip, r0, r3
   83a12:	fa20 f002 	lsr.w	r0, r0, r2
   83a16:	fa01 fe03 	lsl.w	lr, r1, r3
   83a1a:	ea40 000e 	orr.w	r0, r0, lr
   83a1e:	fa21 f102 	lsr.w	r1, r1, r2
   83a22:	4414      	add	r4, r2
   83a24:	e6c1      	b.n	837aa <__adddf3+0xe6>
   83a26:	bf00      	nop

00083a28 <__aeabi_d2uiz>:
   83a28:	004a      	lsls	r2, r1, #1
   83a2a:	d211      	bcs.n	83a50 <__aeabi_d2uiz+0x28>
   83a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83a30:	d211      	bcs.n	83a56 <__aeabi_d2uiz+0x2e>
   83a32:	d50d      	bpl.n	83a50 <__aeabi_d2uiz+0x28>
   83a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83a3c:	d40e      	bmi.n	83a5c <__aeabi_d2uiz+0x34>
   83a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83a4a:	fa23 f002 	lsr.w	r0, r3, r2
   83a4e:	4770      	bx	lr
   83a50:	f04f 0000 	mov.w	r0, #0
   83a54:	4770      	bx	lr
   83a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83a5a:	d102      	bne.n	83a62 <__aeabi_d2uiz+0x3a>
   83a5c:	f04f 30ff 	mov.w	r0, #4294967295
   83a60:	4770      	bx	lr
   83a62:	f04f 0000 	mov.w	r0, #0
   83a66:	4770      	bx	lr

00083a68 <__libc_init_array>:
   83a68:	b570      	push	{r4, r5, r6, lr}
   83a6a:	4e0f      	ldr	r6, [pc, #60]	; (83aa8 <__libc_init_array+0x40>)
   83a6c:	4d0f      	ldr	r5, [pc, #60]	; (83aac <__libc_init_array+0x44>)
   83a6e:	1b76      	subs	r6, r6, r5
   83a70:	10b6      	asrs	r6, r6, #2
   83a72:	bf18      	it	ne
   83a74:	2400      	movne	r4, #0
   83a76:	d005      	beq.n	83a84 <__libc_init_array+0x1c>
   83a78:	3401      	adds	r4, #1
   83a7a:	f855 3b04 	ldr.w	r3, [r5], #4
   83a7e:	4798      	blx	r3
   83a80:	42a6      	cmp	r6, r4
   83a82:	d1f9      	bne.n	83a78 <__libc_init_array+0x10>
   83a84:	4e0a      	ldr	r6, [pc, #40]	; (83ab0 <__libc_init_array+0x48>)
   83a86:	4d0b      	ldr	r5, [pc, #44]	; (83ab4 <__libc_init_array+0x4c>)
   83a88:	f003 f812 	bl	86ab0 <_init>
   83a8c:	1b76      	subs	r6, r6, r5
   83a8e:	10b6      	asrs	r6, r6, #2
   83a90:	bf18      	it	ne
   83a92:	2400      	movne	r4, #0
   83a94:	d006      	beq.n	83aa4 <__libc_init_array+0x3c>
   83a96:	3401      	adds	r4, #1
   83a98:	f855 3b04 	ldr.w	r3, [r5], #4
   83a9c:	4798      	blx	r3
   83a9e:	42a6      	cmp	r6, r4
   83aa0:	d1f9      	bne.n	83a96 <__libc_init_array+0x2e>
   83aa2:	bd70      	pop	{r4, r5, r6, pc}
   83aa4:	bd70      	pop	{r4, r5, r6, pc}
   83aa6:	bf00      	nop
   83aa8:	00086abc 	.word	0x00086abc
   83aac:	00086abc 	.word	0x00086abc
   83ab0:	00086ac4 	.word	0x00086ac4
   83ab4:	00086abc 	.word	0x00086abc

00083ab8 <iprintf>:
   83ab8:	b40f      	push	{r0, r1, r2, r3}
   83aba:	b510      	push	{r4, lr}
   83abc:	4b07      	ldr	r3, [pc, #28]	; (83adc <iprintf+0x24>)
   83abe:	b082      	sub	sp, #8
   83ac0:	ac04      	add	r4, sp, #16
   83ac2:	f854 2b04 	ldr.w	r2, [r4], #4
   83ac6:	6818      	ldr	r0, [r3, #0]
   83ac8:	4623      	mov	r3, r4
   83aca:	6881      	ldr	r1, [r0, #8]
   83acc:	9401      	str	r4, [sp, #4]
   83ace:	f000 f943 	bl	83d58 <_vfiprintf_r>
   83ad2:	b002      	add	sp, #8
   83ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ad8:	b004      	add	sp, #16
   83ada:	4770      	bx	lr
   83adc:	20070830 	.word	0x20070830

00083ae0 <memset>:
   83ae0:	b470      	push	{r4, r5, r6}
   83ae2:	0784      	lsls	r4, r0, #30
   83ae4:	d046      	beq.n	83b74 <memset+0x94>
   83ae6:	1e54      	subs	r4, r2, #1
   83ae8:	2a00      	cmp	r2, #0
   83aea:	d041      	beq.n	83b70 <memset+0x90>
   83aec:	b2cd      	uxtb	r5, r1
   83aee:	4603      	mov	r3, r0
   83af0:	e002      	b.n	83af8 <memset+0x18>
   83af2:	1e62      	subs	r2, r4, #1
   83af4:	b3e4      	cbz	r4, 83b70 <memset+0x90>
   83af6:	4614      	mov	r4, r2
   83af8:	f803 5b01 	strb.w	r5, [r3], #1
   83afc:	079a      	lsls	r2, r3, #30
   83afe:	d1f8      	bne.n	83af2 <memset+0x12>
   83b00:	2c03      	cmp	r4, #3
   83b02:	d92e      	bls.n	83b62 <memset+0x82>
   83b04:	b2cd      	uxtb	r5, r1
   83b06:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83b0a:	2c0f      	cmp	r4, #15
   83b0c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83b10:	d919      	bls.n	83b46 <memset+0x66>
   83b12:	4626      	mov	r6, r4
   83b14:	f103 0210 	add.w	r2, r3, #16
   83b18:	3e10      	subs	r6, #16
   83b1a:	2e0f      	cmp	r6, #15
   83b1c:	f842 5c10 	str.w	r5, [r2, #-16]
   83b20:	f842 5c0c 	str.w	r5, [r2, #-12]
   83b24:	f842 5c08 	str.w	r5, [r2, #-8]
   83b28:	f842 5c04 	str.w	r5, [r2, #-4]
   83b2c:	f102 0210 	add.w	r2, r2, #16
   83b30:	d8f2      	bhi.n	83b18 <memset+0x38>
   83b32:	f1a4 0210 	sub.w	r2, r4, #16
   83b36:	f022 020f 	bic.w	r2, r2, #15
   83b3a:	f004 040f 	and.w	r4, r4, #15
   83b3e:	3210      	adds	r2, #16
   83b40:	2c03      	cmp	r4, #3
   83b42:	4413      	add	r3, r2
   83b44:	d90d      	bls.n	83b62 <memset+0x82>
   83b46:	461e      	mov	r6, r3
   83b48:	4622      	mov	r2, r4
   83b4a:	3a04      	subs	r2, #4
   83b4c:	2a03      	cmp	r2, #3
   83b4e:	f846 5b04 	str.w	r5, [r6], #4
   83b52:	d8fa      	bhi.n	83b4a <memset+0x6a>
   83b54:	1f22      	subs	r2, r4, #4
   83b56:	f022 0203 	bic.w	r2, r2, #3
   83b5a:	3204      	adds	r2, #4
   83b5c:	4413      	add	r3, r2
   83b5e:	f004 0403 	and.w	r4, r4, #3
   83b62:	b12c      	cbz	r4, 83b70 <memset+0x90>
   83b64:	b2c9      	uxtb	r1, r1
   83b66:	441c      	add	r4, r3
   83b68:	f803 1b01 	strb.w	r1, [r3], #1
   83b6c:	42a3      	cmp	r3, r4
   83b6e:	d1fb      	bne.n	83b68 <memset+0x88>
   83b70:	bc70      	pop	{r4, r5, r6}
   83b72:	4770      	bx	lr
   83b74:	4614      	mov	r4, r2
   83b76:	4603      	mov	r3, r0
   83b78:	e7c2      	b.n	83b00 <memset+0x20>
   83b7a:	bf00      	nop

00083b7c <setbuf>:
   83b7c:	2900      	cmp	r1, #0
   83b7e:	bf0c      	ite	eq
   83b80:	2202      	moveq	r2, #2
   83b82:	2200      	movne	r2, #0
   83b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83b88:	f000 b800 	b.w	83b8c <setvbuf>

00083b8c <setvbuf>:
   83b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b90:	4d3a      	ldr	r5, [pc, #232]	; (83c7c <setvbuf+0xf0>)
   83b92:	4604      	mov	r4, r0
   83b94:	682e      	ldr	r6, [r5, #0]
   83b96:	4690      	mov	r8, r2
   83b98:	460d      	mov	r5, r1
   83b9a:	461f      	mov	r7, r3
   83b9c:	b116      	cbz	r6, 83ba4 <setvbuf+0x18>
   83b9e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d03c      	beq.n	83c1e <setvbuf+0x92>
   83ba4:	f1b8 0f02 	cmp.w	r8, #2
   83ba8:	d82f      	bhi.n	83c0a <setvbuf+0x7e>
   83baa:	2f00      	cmp	r7, #0
   83bac:	db2d      	blt.n	83c0a <setvbuf+0x7e>
   83bae:	4621      	mov	r1, r4
   83bb0:	4630      	mov	r0, r6
   83bb2:	f001 f82d 	bl	84c10 <_fflush_r>
   83bb6:	89a1      	ldrh	r1, [r4, #12]
   83bb8:	2300      	movs	r3, #0
   83bba:	6063      	str	r3, [r4, #4]
   83bbc:	61a3      	str	r3, [r4, #24]
   83bbe:	060b      	lsls	r3, r1, #24
   83bc0:	d427      	bmi.n	83c12 <setvbuf+0x86>
   83bc2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   83bc6:	b289      	uxth	r1, r1
   83bc8:	f1b8 0f02 	cmp.w	r8, #2
   83bcc:	81a1      	strh	r1, [r4, #12]
   83bce:	d02a      	beq.n	83c26 <setvbuf+0x9a>
   83bd0:	2d00      	cmp	r5, #0
   83bd2:	d036      	beq.n	83c42 <setvbuf+0xb6>
   83bd4:	f1b8 0f01 	cmp.w	r8, #1
   83bd8:	d011      	beq.n	83bfe <setvbuf+0x72>
   83bda:	b289      	uxth	r1, r1
   83bdc:	f001 0008 	and.w	r0, r1, #8
   83be0:	4b27      	ldr	r3, [pc, #156]	; (83c80 <setvbuf+0xf4>)
   83be2:	b280      	uxth	r0, r0
   83be4:	63f3      	str	r3, [r6, #60]	; 0x3c
   83be6:	6025      	str	r5, [r4, #0]
   83be8:	6125      	str	r5, [r4, #16]
   83bea:	6167      	str	r7, [r4, #20]
   83bec:	b178      	cbz	r0, 83c0e <setvbuf+0x82>
   83bee:	f011 0f03 	tst.w	r1, #3
   83bf2:	bf18      	it	ne
   83bf4:	2700      	movne	r7, #0
   83bf6:	2000      	movs	r0, #0
   83bf8:	60a7      	str	r7, [r4, #8]
   83bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83bfe:	f041 0101 	orr.w	r1, r1, #1
   83c02:	427b      	negs	r3, r7
   83c04:	81a1      	strh	r1, [r4, #12]
   83c06:	61a3      	str	r3, [r4, #24]
   83c08:	e7e7      	b.n	83bda <setvbuf+0x4e>
   83c0a:	f04f 30ff 	mov.w	r0, #4294967295
   83c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c12:	6921      	ldr	r1, [r4, #16]
   83c14:	4630      	mov	r0, r6
   83c16:	f001 f967 	bl	84ee8 <_free_r>
   83c1a:	89a1      	ldrh	r1, [r4, #12]
   83c1c:	e7d1      	b.n	83bc2 <setvbuf+0x36>
   83c1e:	4630      	mov	r0, r6
   83c20:	f001 f88a 	bl	84d38 <__sinit>
   83c24:	e7be      	b.n	83ba4 <setvbuf+0x18>
   83c26:	2000      	movs	r0, #0
   83c28:	f104 0343 	add.w	r3, r4, #67	; 0x43
   83c2c:	f041 0102 	orr.w	r1, r1, #2
   83c30:	2500      	movs	r5, #0
   83c32:	2201      	movs	r2, #1
   83c34:	81a1      	strh	r1, [r4, #12]
   83c36:	60a5      	str	r5, [r4, #8]
   83c38:	6023      	str	r3, [r4, #0]
   83c3a:	6123      	str	r3, [r4, #16]
   83c3c:	6162      	str	r2, [r4, #20]
   83c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83c42:	2f00      	cmp	r7, #0
   83c44:	bf08      	it	eq
   83c46:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   83c4a:	4638      	mov	r0, r7
   83c4c:	f001 fc56 	bl	854fc <malloc>
   83c50:	4605      	mov	r5, r0
   83c52:	b128      	cbz	r0, 83c60 <setvbuf+0xd4>
   83c54:	89a1      	ldrh	r1, [r4, #12]
   83c56:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   83c5a:	b289      	uxth	r1, r1
   83c5c:	81a1      	strh	r1, [r4, #12]
   83c5e:	e7b9      	b.n	83bd4 <setvbuf+0x48>
   83c60:	f44f 6080 	mov.w	r0, #1024	; 0x400
   83c64:	f001 fc4a 	bl	854fc <malloc>
   83c68:	4605      	mov	r5, r0
   83c6a:	b918      	cbnz	r0, 83c74 <setvbuf+0xe8>
   83c6c:	89a1      	ldrh	r1, [r4, #12]
   83c6e:	f04f 30ff 	mov.w	r0, #4294967295
   83c72:	e7d9      	b.n	83c28 <setvbuf+0x9c>
   83c74:	f44f 6780 	mov.w	r7, #1024	; 0x400
   83c78:	e7ec      	b.n	83c54 <setvbuf+0xc8>
   83c7a:	bf00      	nop
   83c7c:	20070830 	.word	0x20070830
   83c80:	00084c3d 	.word	0x00084c3d

00083c84 <strlen>:
   83c84:	f020 0103 	bic.w	r1, r0, #3
   83c88:	f010 0003 	ands.w	r0, r0, #3
   83c8c:	f1c0 0000 	rsb	r0, r0, #0
   83c90:	f851 3b04 	ldr.w	r3, [r1], #4
   83c94:	f100 0c04 	add.w	ip, r0, #4
   83c98:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83c9c:	f06f 0200 	mvn.w	r2, #0
   83ca0:	bf1c      	itt	ne
   83ca2:	fa22 f20c 	lsrne.w	r2, r2, ip
   83ca6:	4313      	orrne	r3, r2
   83ca8:	f04f 0c01 	mov.w	ip, #1
   83cac:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83cb0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83cb4:	eba3 020c 	sub.w	r2, r3, ip
   83cb8:	ea22 0203 	bic.w	r2, r2, r3
   83cbc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83cc0:	bf04      	itt	eq
   83cc2:	f851 3b04 	ldreq.w	r3, [r1], #4
   83cc6:	3004      	addeq	r0, #4
   83cc8:	d0f4      	beq.n	83cb4 <strlen+0x30>
   83cca:	f1c2 0100 	rsb	r1, r2, #0
   83cce:	ea02 0201 	and.w	r2, r2, r1
   83cd2:	fab2 f282 	clz	r2, r2
   83cd6:	f1c2 021f 	rsb	r2, r2, #31
   83cda:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83cde:	4770      	bx	lr

00083ce0 <__sprint_r.part.0>:
   83ce0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83ce2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83ce6:	049c      	lsls	r4, r3, #18
   83ce8:	460f      	mov	r7, r1
   83cea:	4692      	mov	sl, r2
   83cec:	d52b      	bpl.n	83d46 <__sprint_r.part.0+0x66>
   83cee:	6893      	ldr	r3, [r2, #8]
   83cf0:	6812      	ldr	r2, [r2, #0]
   83cf2:	b333      	cbz	r3, 83d42 <__sprint_r.part.0+0x62>
   83cf4:	4680      	mov	r8, r0
   83cf6:	f102 0908 	add.w	r9, r2, #8
   83cfa:	e919 0060 	ldmdb	r9, {r5, r6}
   83cfe:	08b6      	lsrs	r6, r6, #2
   83d00:	d017      	beq.n	83d32 <__sprint_r.part.0+0x52>
   83d02:	3d04      	subs	r5, #4
   83d04:	2400      	movs	r4, #0
   83d06:	e001      	b.n	83d0c <__sprint_r.part.0+0x2c>
   83d08:	42a6      	cmp	r6, r4
   83d0a:	d010      	beq.n	83d2e <__sprint_r.part.0+0x4e>
   83d0c:	4640      	mov	r0, r8
   83d0e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83d12:	463a      	mov	r2, r7
   83d14:	f001 f888 	bl	84e28 <_fputwc_r>
   83d18:	1c43      	adds	r3, r0, #1
   83d1a:	f104 0401 	add.w	r4, r4, #1
   83d1e:	d1f3      	bne.n	83d08 <__sprint_r.part.0+0x28>
   83d20:	2300      	movs	r3, #0
   83d22:	f8ca 3008 	str.w	r3, [sl, #8]
   83d26:	f8ca 3004 	str.w	r3, [sl, #4]
   83d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d2e:	f8da 3008 	ldr.w	r3, [sl, #8]
   83d32:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83d36:	f8ca 3008 	str.w	r3, [sl, #8]
   83d3a:	f109 0908 	add.w	r9, r9, #8
   83d3e:	2b00      	cmp	r3, #0
   83d40:	d1db      	bne.n	83cfa <__sprint_r.part.0+0x1a>
   83d42:	2000      	movs	r0, #0
   83d44:	e7ec      	b.n	83d20 <__sprint_r.part.0+0x40>
   83d46:	f001 f9a7 	bl	85098 <__sfvwrite_r>
   83d4a:	2300      	movs	r3, #0
   83d4c:	f8ca 3008 	str.w	r3, [sl, #8]
   83d50:	f8ca 3004 	str.w	r3, [sl, #4]
   83d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083d58 <_vfiprintf_r>:
   83d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d5c:	b0ab      	sub	sp, #172	; 0xac
   83d5e:	461c      	mov	r4, r3
   83d60:	9100      	str	r1, [sp, #0]
   83d62:	4693      	mov	fp, r2
   83d64:	9304      	str	r3, [sp, #16]
   83d66:	9001      	str	r0, [sp, #4]
   83d68:	b118      	cbz	r0, 83d72 <_vfiprintf_r+0x1a>
   83d6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	f000 80e3 	beq.w	83f38 <_vfiprintf_r+0x1e0>
   83d72:	9b00      	ldr	r3, [sp, #0]
   83d74:	8999      	ldrh	r1, [r3, #12]
   83d76:	b28a      	uxth	r2, r1
   83d78:	0490      	lsls	r0, r2, #18
   83d7a:	d408      	bmi.n	83d8e <_vfiprintf_r+0x36>
   83d7c:	4618      	mov	r0, r3
   83d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   83d80:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83d88:	8182      	strh	r2, [r0, #12]
   83d8a:	6643      	str	r3, [r0, #100]	; 0x64
   83d8c:	b292      	uxth	r2, r2
   83d8e:	0711      	lsls	r1, r2, #28
   83d90:	f140 80b2 	bpl.w	83ef8 <_vfiprintf_r+0x1a0>
   83d94:	9b00      	ldr	r3, [sp, #0]
   83d96:	691b      	ldr	r3, [r3, #16]
   83d98:	2b00      	cmp	r3, #0
   83d9a:	f000 80ad 	beq.w	83ef8 <_vfiprintf_r+0x1a0>
   83d9e:	f002 021a 	and.w	r2, r2, #26
   83da2:	2a0a      	cmp	r2, #10
   83da4:	f000 80b4 	beq.w	83f10 <_vfiprintf_r+0x1b8>
   83da8:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83dac:	4654      	mov	r4, sl
   83dae:	2300      	movs	r3, #0
   83db0:	9309      	str	r3, [sp, #36]	; 0x24
   83db2:	9302      	str	r3, [sp, #8]
   83db4:	930f      	str	r3, [sp, #60]	; 0x3c
   83db6:	930e      	str	r3, [sp, #56]	; 0x38
   83db8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83dbc:	f89b 3000 	ldrb.w	r3, [fp]
   83dc0:	2b00      	cmp	r3, #0
   83dc2:	f000 84a3 	beq.w	8470c <_vfiprintf_r+0x9b4>
   83dc6:	2b25      	cmp	r3, #37	; 0x25
   83dc8:	f000 84a0 	beq.w	8470c <_vfiprintf_r+0x9b4>
   83dcc:	465a      	mov	r2, fp
   83dce:	e001      	b.n	83dd4 <_vfiprintf_r+0x7c>
   83dd0:	2b25      	cmp	r3, #37	; 0x25
   83dd2:	d003      	beq.n	83ddc <_vfiprintf_r+0x84>
   83dd4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   83dd8:	2b00      	cmp	r3, #0
   83dda:	d1f9      	bne.n	83dd0 <_vfiprintf_r+0x78>
   83ddc:	ebcb 0602 	rsb	r6, fp, r2
   83de0:	4615      	mov	r5, r2
   83de2:	b196      	cbz	r6, 83e0a <_vfiprintf_r+0xb2>
   83de4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83de8:	3301      	adds	r3, #1
   83dea:	4432      	add	r2, r6
   83dec:	2b07      	cmp	r3, #7
   83dee:	f8c4 b000 	str.w	fp, [r4]
   83df2:	6066      	str	r6, [r4, #4]
   83df4:	920f      	str	r2, [sp, #60]	; 0x3c
   83df6:	930e      	str	r3, [sp, #56]	; 0x38
   83df8:	dd79      	ble.n	83eee <_vfiprintf_r+0x196>
   83dfa:	2a00      	cmp	r2, #0
   83dfc:	f040 84ad 	bne.w	8475a <_vfiprintf_r+0xa02>
   83e00:	4654      	mov	r4, sl
   83e02:	9b02      	ldr	r3, [sp, #8]
   83e04:	920e      	str	r2, [sp, #56]	; 0x38
   83e06:	4433      	add	r3, r6
   83e08:	9302      	str	r3, [sp, #8]
   83e0a:	782b      	ldrb	r3, [r5, #0]
   83e0c:	2b00      	cmp	r3, #0
   83e0e:	f000 835f 	beq.w	844d0 <_vfiprintf_r+0x778>
   83e12:	f04f 0300 	mov.w	r3, #0
   83e16:	2100      	movs	r1, #0
   83e18:	f04f 3cff 	mov.w	ip, #4294967295
   83e1c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83e20:	1c68      	adds	r0, r5, #1
   83e22:	786b      	ldrb	r3, [r5, #1]
   83e24:	4688      	mov	r8, r1
   83e26:	460d      	mov	r5, r1
   83e28:	4666      	mov	r6, ip
   83e2a:	f100 0b01 	add.w	fp, r0, #1
   83e2e:	f1a3 0220 	sub.w	r2, r3, #32
   83e32:	2a58      	cmp	r2, #88	; 0x58
   83e34:	f200 82aa 	bhi.w	8438c <_vfiprintf_r+0x634>
   83e38:	e8df f012 	tbh	[pc, r2, lsl #1]
   83e3c:	02a8029a 	.word	0x02a8029a
   83e40:	02a202a8 	.word	0x02a202a8
   83e44:	02a802a8 	.word	0x02a802a8
   83e48:	02a802a8 	.word	0x02a802a8
   83e4c:	02a802a8 	.word	0x02a802a8
   83e50:	02600254 	.word	0x02600254
   83e54:	010d02a8 	.word	0x010d02a8
   83e58:	02a8026c 	.word	0x02a8026c
   83e5c:	012f0129 	.word	0x012f0129
   83e60:	012f012f 	.word	0x012f012f
   83e64:	012f012f 	.word	0x012f012f
   83e68:	012f012f 	.word	0x012f012f
   83e6c:	012f012f 	.word	0x012f012f
   83e70:	02a802a8 	.word	0x02a802a8
   83e74:	02a802a8 	.word	0x02a802a8
   83e78:	02a802a8 	.word	0x02a802a8
   83e7c:	02a802a8 	.word	0x02a802a8
   83e80:	02a802a8 	.word	0x02a802a8
   83e84:	02a8013d 	.word	0x02a8013d
   83e88:	02a802a8 	.word	0x02a802a8
   83e8c:	02a802a8 	.word	0x02a802a8
   83e90:	02a802a8 	.word	0x02a802a8
   83e94:	02a802a8 	.word	0x02a802a8
   83e98:	017402a8 	.word	0x017402a8
   83e9c:	02a802a8 	.word	0x02a802a8
   83ea0:	02a802a8 	.word	0x02a802a8
   83ea4:	018b02a8 	.word	0x018b02a8
   83ea8:	02a802a8 	.word	0x02a802a8
   83eac:	02a801a3 	.word	0x02a801a3
   83eb0:	02a802a8 	.word	0x02a802a8
   83eb4:	02a802a8 	.word	0x02a802a8
   83eb8:	02a802a8 	.word	0x02a802a8
   83ebc:	02a802a8 	.word	0x02a802a8
   83ec0:	01c702a8 	.word	0x01c702a8
   83ec4:	02a801da 	.word	0x02a801da
   83ec8:	02a802a8 	.word	0x02a802a8
   83ecc:	01da0123 	.word	0x01da0123
   83ed0:	02a802a8 	.word	0x02a802a8
   83ed4:	02a8024b 	.word	0x02a8024b
   83ed8:	01130288 	.word	0x01130288
   83edc:	020701f4 	.word	0x020701f4
   83ee0:	020d02a8 	.word	0x020d02a8
   83ee4:	008102a8 	.word	0x008102a8
   83ee8:	02a802a8 	.word	0x02a802a8
   83eec:	0232      	.short	0x0232
   83eee:	3408      	adds	r4, #8
   83ef0:	9b02      	ldr	r3, [sp, #8]
   83ef2:	4433      	add	r3, r6
   83ef4:	9302      	str	r3, [sp, #8]
   83ef6:	e788      	b.n	83e0a <_vfiprintf_r+0xb2>
   83ef8:	9801      	ldr	r0, [sp, #4]
   83efa:	9900      	ldr	r1, [sp, #0]
   83efc:	f000 fd72 	bl	849e4 <__swsetup_r>
   83f00:	b9a8      	cbnz	r0, 83f2e <_vfiprintf_r+0x1d6>
   83f02:	9b00      	ldr	r3, [sp, #0]
   83f04:	899a      	ldrh	r2, [r3, #12]
   83f06:	f002 021a 	and.w	r2, r2, #26
   83f0a:	2a0a      	cmp	r2, #10
   83f0c:	f47f af4c 	bne.w	83da8 <_vfiprintf_r+0x50>
   83f10:	9b00      	ldr	r3, [sp, #0]
   83f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   83f16:	2b00      	cmp	r3, #0
   83f18:	f6ff af46 	blt.w	83da8 <_vfiprintf_r+0x50>
   83f1c:	9801      	ldr	r0, [sp, #4]
   83f1e:	9900      	ldr	r1, [sp, #0]
   83f20:	465a      	mov	r2, fp
   83f22:	4623      	mov	r3, r4
   83f24:	f000 fd20 	bl	84968 <__sbprintf>
   83f28:	b02b      	add	sp, #172	; 0xac
   83f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f2e:	f04f 30ff 	mov.w	r0, #4294967295
   83f32:	b02b      	add	sp, #172	; 0xac
   83f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f38:	f000 fefe 	bl	84d38 <__sinit>
   83f3c:	e719      	b.n	83d72 <_vfiprintf_r+0x1a>
   83f3e:	f018 0f20 	tst.w	r8, #32
   83f42:	9503      	str	r5, [sp, #12]
   83f44:	46b4      	mov	ip, r6
   83f46:	f000 810c 	beq.w	84162 <_vfiprintf_r+0x40a>
   83f4a:	9b04      	ldr	r3, [sp, #16]
   83f4c:	3307      	adds	r3, #7
   83f4e:	f023 0307 	bic.w	r3, r3, #7
   83f52:	f103 0208 	add.w	r2, r3, #8
   83f56:	e9d3 6700 	ldrd	r6, r7, [r3]
   83f5a:	9204      	str	r2, [sp, #16]
   83f5c:	2301      	movs	r3, #1
   83f5e:	f04f 0200 	mov.w	r2, #0
   83f62:	46e1      	mov	r9, ip
   83f64:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   83f68:	2500      	movs	r5, #0
   83f6a:	f1bc 0f00 	cmp.w	ip, #0
   83f6e:	bfa8      	it	ge
   83f70:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   83f74:	ea56 0207 	orrs.w	r2, r6, r7
   83f78:	f040 80c4 	bne.w	84104 <_vfiprintf_r+0x3ac>
   83f7c:	f1bc 0f00 	cmp.w	ip, #0
   83f80:	f000 8380 	beq.w	84684 <_vfiprintf_r+0x92c>
   83f84:	2b01      	cmp	r3, #1
   83f86:	f000 80c5 	beq.w	84114 <_vfiprintf_r+0x3bc>
   83f8a:	2b02      	cmp	r3, #2
   83f8c:	f000 8386 	beq.w	8469c <_vfiprintf_r+0x944>
   83f90:	4651      	mov	r1, sl
   83f92:	08f2      	lsrs	r2, r6, #3
   83f94:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   83f98:	08f8      	lsrs	r0, r7, #3
   83f9a:	f006 0307 	and.w	r3, r6, #7
   83f9e:	4607      	mov	r7, r0
   83fa0:	4616      	mov	r6, r2
   83fa2:	3330      	adds	r3, #48	; 0x30
   83fa4:	ea56 0207 	orrs.w	r2, r6, r7
   83fa8:	f801 3d01 	strb.w	r3, [r1, #-1]!
   83fac:	d1f1      	bne.n	83f92 <_vfiprintf_r+0x23a>
   83fae:	f018 0f01 	tst.w	r8, #1
   83fb2:	9107      	str	r1, [sp, #28]
   83fb4:	f040 83fa 	bne.w	847ac <_vfiprintf_r+0xa54>
   83fb8:	ebc1 090a 	rsb	r9, r1, sl
   83fbc:	45e1      	cmp	r9, ip
   83fbe:	464e      	mov	r6, r9
   83fc0:	bfb8      	it	lt
   83fc2:	4666      	movlt	r6, ip
   83fc4:	b105      	cbz	r5, 83fc8 <_vfiprintf_r+0x270>
   83fc6:	3601      	adds	r6, #1
   83fc8:	f018 0302 	ands.w	r3, r8, #2
   83fcc:	9305      	str	r3, [sp, #20]
   83fce:	bf18      	it	ne
   83fd0:	3602      	addne	r6, #2
   83fd2:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   83fd6:	9306      	str	r3, [sp, #24]
   83fd8:	f040 81f9 	bne.w	843ce <_vfiprintf_r+0x676>
   83fdc:	9b03      	ldr	r3, [sp, #12]
   83fde:	1b9d      	subs	r5, r3, r6
   83fe0:	2d00      	cmp	r5, #0
   83fe2:	f340 81f4 	ble.w	843ce <_vfiprintf_r+0x676>
   83fe6:	2d10      	cmp	r5, #16
   83fe8:	f340 848a 	ble.w	84900 <_vfiprintf_r+0xba8>
   83fec:	4620      	mov	r0, r4
   83fee:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83ff2:	4664      	mov	r4, ip
   83ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83ff6:	4fc4      	ldr	r7, [pc, #784]	; (84308 <_vfiprintf_r+0x5b0>)
   83ff8:	2310      	movs	r3, #16
   83ffa:	4671      	mov	r1, lr
   83ffc:	4684      	mov	ip, r0
   83ffe:	e007      	b.n	84010 <_vfiprintf_r+0x2b8>
   84000:	f101 0e02 	add.w	lr, r1, #2
   84004:	4601      	mov	r1, r0
   84006:	f10c 0c08 	add.w	ip, ip, #8
   8400a:	3d10      	subs	r5, #16
   8400c:	2d10      	cmp	r5, #16
   8400e:	dd13      	ble.n	84038 <_vfiprintf_r+0x2e0>
   84010:	1c48      	adds	r0, r1, #1
   84012:	3210      	adds	r2, #16
   84014:	2807      	cmp	r0, #7
   84016:	920f      	str	r2, [sp, #60]	; 0x3c
   84018:	f8cc 7000 	str.w	r7, [ip]
   8401c:	f8cc 3004 	str.w	r3, [ip, #4]
   84020:	900e      	str	r0, [sp, #56]	; 0x38
   84022:	dded      	ble.n	84000 <_vfiprintf_r+0x2a8>
   84024:	2a00      	cmp	r2, #0
   84026:	f040 81c2 	bne.w	843ae <_vfiprintf_r+0x656>
   8402a:	3d10      	subs	r5, #16
   8402c:	2d10      	cmp	r5, #16
   8402e:	4611      	mov	r1, r2
   84030:	f04f 0e01 	mov.w	lr, #1
   84034:	46d4      	mov	ip, sl
   84036:	dceb      	bgt.n	84010 <_vfiprintf_r+0x2b8>
   84038:	4663      	mov	r3, ip
   8403a:	4671      	mov	r1, lr
   8403c:	46a4      	mov	ip, r4
   8403e:	461c      	mov	r4, r3
   84040:	442a      	add	r2, r5
   84042:	2907      	cmp	r1, #7
   84044:	920f      	str	r2, [sp, #60]	; 0x3c
   84046:	6027      	str	r7, [r4, #0]
   84048:	6065      	str	r5, [r4, #4]
   8404a:	910e      	str	r1, [sp, #56]	; 0x38
   8404c:	f300 8346 	bgt.w	846dc <_vfiprintf_r+0x984>
   84050:	3408      	adds	r4, #8
   84052:	1c48      	adds	r0, r1, #1
   84054:	e1be      	b.n	843d4 <_vfiprintf_r+0x67c>
   84056:	4658      	mov	r0, fp
   84058:	f048 0804 	orr.w	r8, r8, #4
   8405c:	f89b 3000 	ldrb.w	r3, [fp]
   84060:	e6e3      	b.n	83e2a <_vfiprintf_r+0xd2>
   84062:	f018 0320 	ands.w	r3, r8, #32
   84066:	9503      	str	r5, [sp, #12]
   84068:	46b4      	mov	ip, r6
   8406a:	d062      	beq.n	84132 <_vfiprintf_r+0x3da>
   8406c:	9b04      	ldr	r3, [sp, #16]
   8406e:	3307      	adds	r3, #7
   84070:	f023 0307 	bic.w	r3, r3, #7
   84074:	f103 0208 	add.w	r2, r3, #8
   84078:	e9d3 6700 	ldrd	r6, r7, [r3]
   8407c:	9204      	str	r2, [sp, #16]
   8407e:	2300      	movs	r3, #0
   84080:	e76d      	b.n	83f5e <_vfiprintf_r+0x206>
   84082:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   84086:	f89b 3000 	ldrb.w	r3, [fp]
   8408a:	4658      	mov	r0, fp
   8408c:	e6cd      	b.n	83e2a <_vfiprintf_r+0xd2>
   8408e:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   84092:	f89b 3000 	ldrb.w	r3, [fp]
   84096:	4658      	mov	r0, fp
   84098:	e6c7      	b.n	83e2a <_vfiprintf_r+0xd2>
   8409a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8409e:	2500      	movs	r5, #0
   840a0:	f81b 3b01 	ldrb.w	r3, [fp], #1
   840a4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   840a8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   840ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840b0:	2a09      	cmp	r2, #9
   840b2:	d9f5      	bls.n	840a0 <_vfiprintf_r+0x348>
   840b4:	e6bb      	b.n	83e2e <_vfiprintf_r+0xd6>
   840b6:	f048 0810 	orr.w	r8, r8, #16
   840ba:	f018 0f20 	tst.w	r8, #32
   840be:	9503      	str	r5, [sp, #12]
   840c0:	46b4      	mov	ip, r6
   840c2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   840c6:	f000 809b 	beq.w	84200 <_vfiprintf_r+0x4a8>
   840ca:	9904      	ldr	r1, [sp, #16]
   840cc:	3107      	adds	r1, #7
   840ce:	f021 0107 	bic.w	r1, r1, #7
   840d2:	e9d1 2300 	ldrd	r2, r3, [r1]
   840d6:	4616      	mov	r6, r2
   840d8:	461f      	mov	r7, r3
   840da:	3108      	adds	r1, #8
   840dc:	9104      	str	r1, [sp, #16]
   840de:	2a00      	cmp	r2, #0
   840e0:	f173 0300 	sbcs.w	r3, r3, #0
   840e4:	f2c0 83a4 	blt.w	84830 <_vfiprintf_r+0xad8>
   840e8:	f1bc 0f00 	cmp.w	ip, #0
   840ec:	bfa8      	it	ge
   840ee:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   840f2:	ea56 0207 	orrs.w	r2, r6, r7
   840f6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   840fa:	46e1      	mov	r9, ip
   840fc:	f04f 0301 	mov.w	r3, #1
   84100:	f43f af3c 	beq.w	83f7c <_vfiprintf_r+0x224>
   84104:	2b01      	cmp	r3, #1
   84106:	f47f af40 	bne.w	83f8a <_vfiprintf_r+0x232>
   8410a:	2f00      	cmp	r7, #0
   8410c:	bf08      	it	eq
   8410e:	2e0a      	cmpeq	r6, #10
   84110:	f080 8332 	bcs.w	84778 <_vfiprintf_r+0xa20>
   84114:	ab2a      	add	r3, sp, #168	; 0xa8
   84116:	3630      	adds	r6, #48	; 0x30
   84118:	f803 6d41 	strb.w	r6, [r3, #-65]!
   8411c:	ebc3 090a 	rsb	r9, r3, sl
   84120:	9307      	str	r3, [sp, #28]
   84122:	e74b      	b.n	83fbc <_vfiprintf_r+0x264>
   84124:	f048 0810 	orr.w	r8, r8, #16
   84128:	f018 0320 	ands.w	r3, r8, #32
   8412c:	9503      	str	r5, [sp, #12]
   8412e:	46b4      	mov	ip, r6
   84130:	d19c      	bne.n	8406c <_vfiprintf_r+0x314>
   84132:	f018 0210 	ands.w	r2, r8, #16
   84136:	f040 82f7 	bne.w	84728 <_vfiprintf_r+0x9d0>
   8413a:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   8413e:	f000 82f3 	beq.w	84728 <_vfiprintf_r+0x9d0>
   84142:	9904      	ldr	r1, [sp, #16]
   84144:	4613      	mov	r3, r2
   84146:	460a      	mov	r2, r1
   84148:	3204      	adds	r2, #4
   8414a:	880e      	ldrh	r6, [r1, #0]
   8414c:	2700      	movs	r7, #0
   8414e:	9204      	str	r2, [sp, #16]
   84150:	e705      	b.n	83f5e <_vfiprintf_r+0x206>
   84152:	f048 0810 	orr.w	r8, r8, #16
   84156:	f018 0f20 	tst.w	r8, #32
   8415a:	9503      	str	r5, [sp, #12]
   8415c:	46b4      	mov	ip, r6
   8415e:	f47f aef4 	bne.w	83f4a <_vfiprintf_r+0x1f2>
   84162:	9a04      	ldr	r2, [sp, #16]
   84164:	f018 0f10 	tst.w	r8, #16
   84168:	4613      	mov	r3, r2
   8416a:	f040 82e4 	bne.w	84736 <_vfiprintf_r+0x9de>
   8416e:	f018 0f40 	tst.w	r8, #64	; 0x40
   84172:	f000 82e0 	beq.w	84736 <_vfiprintf_r+0x9de>
   84176:	8816      	ldrh	r6, [r2, #0]
   84178:	3204      	adds	r2, #4
   8417a:	2700      	movs	r7, #0
   8417c:	2301      	movs	r3, #1
   8417e:	9204      	str	r2, [sp, #16]
   84180:	e6ed      	b.n	83f5e <_vfiprintf_r+0x206>
   84182:	4a62      	ldr	r2, [pc, #392]	; (8430c <_vfiprintf_r+0x5b4>)
   84184:	f018 0f20 	tst.w	r8, #32
   84188:	9503      	str	r5, [sp, #12]
   8418a:	46b4      	mov	ip, r6
   8418c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84190:	9209      	str	r2, [sp, #36]	; 0x24
   84192:	f000 808f 	beq.w	842b4 <_vfiprintf_r+0x55c>
   84196:	9a04      	ldr	r2, [sp, #16]
   84198:	3207      	adds	r2, #7
   8419a:	f022 0207 	bic.w	r2, r2, #7
   8419e:	f102 0108 	add.w	r1, r2, #8
   841a2:	9104      	str	r1, [sp, #16]
   841a4:	e9d2 6700 	ldrd	r6, r7, [r2]
   841a8:	f018 0f01 	tst.w	r8, #1
   841ac:	f000 828f 	beq.w	846ce <_vfiprintf_r+0x976>
   841b0:	ea56 0207 	orrs.w	r2, r6, r7
   841b4:	f000 828b 	beq.w	846ce <_vfiprintf_r+0x976>
   841b8:	2230      	movs	r2, #48	; 0x30
   841ba:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   841be:	f048 0802 	orr.w	r8, r8, #2
   841c2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   841c6:	2302      	movs	r3, #2
   841c8:	e6c9      	b.n	83f5e <_vfiprintf_r+0x206>
   841ca:	9a04      	ldr	r2, [sp, #16]
   841cc:	2601      	movs	r6, #1
   841ce:	6813      	ldr	r3, [r2, #0]
   841d0:	f04f 0100 	mov.w	r1, #0
   841d4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   841d8:	4613      	mov	r3, r2
   841da:	46b1      	mov	r9, r6
   841dc:	3304      	adds	r3, #4
   841de:	9304      	str	r3, [sp, #16]
   841e0:	ab10      	add	r3, sp, #64	; 0x40
   841e2:	9503      	str	r5, [sp, #12]
   841e4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   841e8:	9307      	str	r3, [sp, #28]
   841ea:	f04f 0c00 	mov.w	ip, #0
   841ee:	e6eb      	b.n	83fc8 <_vfiprintf_r+0x270>
   841f0:	f018 0f20 	tst.w	r8, #32
   841f4:	9503      	str	r5, [sp, #12]
   841f6:	46b4      	mov	ip, r6
   841f8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   841fc:	f47f af65 	bne.w	840ca <_vfiprintf_r+0x372>
   84200:	9a04      	ldr	r2, [sp, #16]
   84202:	f018 0f10 	tst.w	r8, #16
   84206:	4613      	mov	r3, r2
   84208:	f040 82a0 	bne.w	8474c <_vfiprintf_r+0x9f4>
   8420c:	f018 0f40 	tst.w	r8, #64	; 0x40
   84210:	f000 829c 	beq.w	8474c <_vfiprintf_r+0x9f4>
   84214:	f9b2 6000 	ldrsh.w	r6, [r2]
   84218:	3304      	adds	r3, #4
   8421a:	17f7      	asrs	r7, r6, #31
   8421c:	9304      	str	r3, [sp, #16]
   8421e:	4632      	mov	r2, r6
   84220:	463b      	mov	r3, r7
   84222:	e75c      	b.n	840de <_vfiprintf_r+0x386>
   84224:	9904      	ldr	r1, [sp, #16]
   84226:	2378      	movs	r3, #120	; 0x78
   84228:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8422c:	4b38      	ldr	r3, [pc, #224]	; (84310 <_vfiprintf_r+0x5b8>)
   8422e:	46b4      	mov	ip, r6
   84230:	2230      	movs	r2, #48	; 0x30
   84232:	680e      	ldr	r6, [r1, #0]
   84234:	3104      	adds	r1, #4
   84236:	9309      	str	r3, [sp, #36]	; 0x24
   84238:	9503      	str	r5, [sp, #12]
   8423a:	f048 0802 	orr.w	r8, r8, #2
   8423e:	9104      	str	r1, [sp, #16]
   84240:	2700      	movs	r7, #0
   84242:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84246:	2302      	movs	r3, #2
   84248:	e689      	b.n	83f5e <_vfiprintf_r+0x206>
   8424a:	f048 0820 	orr.w	r8, r8, #32
   8424e:	f89b 3000 	ldrb.w	r3, [fp]
   84252:	4658      	mov	r0, fp
   84254:	e5e9      	b.n	83e2a <_vfiprintf_r+0xd2>
   84256:	f04f 0100 	mov.w	r1, #0
   8425a:	9a04      	ldr	r2, [sp, #16]
   8425c:	9503      	str	r5, [sp, #12]
   8425e:	6813      	ldr	r3, [r2, #0]
   84260:	46b4      	mov	ip, r6
   84262:	9307      	str	r3, [sp, #28]
   84264:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84268:	1d15      	adds	r5, r2, #4
   8426a:	2b00      	cmp	r3, #0
   8426c:	f000 834e 	beq.w	8490c <_vfiprintf_r+0xbb4>
   84270:	2e00      	cmp	r6, #0
   84272:	f2c0 8329 	blt.w	848c8 <_vfiprintf_r+0xb70>
   84276:	9e07      	ldr	r6, [sp, #28]
   84278:	4662      	mov	r2, ip
   8427a:	4630      	mov	r0, r6
   8427c:	2100      	movs	r1, #0
   8427e:	f8cd c010 	str.w	ip, [sp, #16]
   84282:	f001 fbc9 	bl	85a18 <memchr>
   84286:	f8dd c010 	ldr.w	ip, [sp, #16]
   8428a:	2800      	cmp	r0, #0
   8428c:	f000 834e 	beq.w	8492c <_vfiprintf_r+0xbd4>
   84290:	9504      	str	r5, [sp, #16]
   84292:	ebc6 0900 	rsb	r9, r6, r0
   84296:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8429a:	f04f 0c00 	mov.w	ip, #0
   8429e:	e68d      	b.n	83fbc <_vfiprintf_r+0x264>
   842a0:	4a1b      	ldr	r2, [pc, #108]	; (84310 <_vfiprintf_r+0x5b8>)
   842a2:	f018 0f20 	tst.w	r8, #32
   842a6:	9503      	str	r5, [sp, #12]
   842a8:	46b4      	mov	ip, r6
   842aa:	9209      	str	r2, [sp, #36]	; 0x24
   842ac:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   842b0:	f47f af71 	bne.w	84196 <_vfiprintf_r+0x43e>
   842b4:	9904      	ldr	r1, [sp, #16]
   842b6:	f018 0f10 	tst.w	r8, #16
   842ba:	460a      	mov	r2, r1
   842bc:	f040 8241 	bne.w	84742 <_vfiprintf_r+0x9ea>
   842c0:	f018 0f40 	tst.w	r8, #64	; 0x40
   842c4:	f000 823d 	beq.w	84742 <_vfiprintf_r+0x9ea>
   842c8:	3204      	adds	r2, #4
   842ca:	880e      	ldrh	r6, [r1, #0]
   842cc:	2700      	movs	r7, #0
   842ce:	9204      	str	r2, [sp, #16]
   842d0:	e76a      	b.n	841a8 <_vfiprintf_r+0x450>
   842d2:	f89b 3000 	ldrb.w	r3, [fp]
   842d6:	2b6c      	cmp	r3, #108	; 0x6c
   842d8:	f000 82e9 	beq.w	848ae <_vfiprintf_r+0xb56>
   842dc:	f048 0810 	orr.w	r8, r8, #16
   842e0:	4658      	mov	r0, fp
   842e2:	e5a2      	b.n	83e2a <_vfiprintf_r+0xd2>
   842e4:	9a04      	ldr	r2, [sp, #16]
   842e6:	4613      	mov	r3, r2
   842e8:	6815      	ldr	r5, [r2, #0]
   842ea:	3304      	adds	r3, #4
   842ec:	2d00      	cmp	r5, #0
   842ee:	f2c0 82e6 	blt.w	848be <_vfiprintf_r+0xb66>
   842f2:	9304      	str	r3, [sp, #16]
   842f4:	f89b 3000 	ldrb.w	r3, [fp]
   842f8:	4658      	mov	r0, fp
   842fa:	e596      	b.n	83e2a <_vfiprintf_r+0xd2>
   842fc:	f89b 3000 	ldrb.w	r3, [fp]
   84300:	4658      	mov	r0, fp
   84302:	212b      	movs	r1, #43	; 0x2b
   84304:	e591      	b.n	83e2a <_vfiprintf_r+0xd2>
   84306:	bf00      	nop
   84308:	00086aa0 	.word	0x00086aa0
   8430c:	00086a70 	.word	0x00086a70
   84310:	00086a84 	.word	0x00086a84
   84314:	f89b 3000 	ldrb.w	r3, [fp]
   84318:	f10b 0001 	add.w	r0, fp, #1
   8431c:	2b2a      	cmp	r3, #42	; 0x2a
   8431e:	f000 830f 	beq.w	84940 <_vfiprintf_r+0xbe8>
   84322:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84326:	2a09      	cmp	r2, #9
   84328:	4683      	mov	fp, r0
   8432a:	f04f 0600 	mov.w	r6, #0
   8432e:	f63f ad7e 	bhi.w	83e2e <_vfiprintf_r+0xd6>
   84332:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84336:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   8433a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   8433e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84342:	2a09      	cmp	r2, #9
   84344:	d9f5      	bls.n	84332 <_vfiprintf_r+0x5da>
   84346:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   8434a:	e570      	b.n	83e2e <_vfiprintf_r+0xd6>
   8434c:	f018 0f20 	tst.w	r8, #32
   84350:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84354:	f000 8283 	beq.w	8485e <_vfiprintf_r+0xb06>
   84358:	9a04      	ldr	r2, [sp, #16]
   8435a:	4613      	mov	r3, r2
   8435c:	3304      	adds	r3, #4
   8435e:	9304      	str	r3, [sp, #16]
   84360:	9b02      	ldr	r3, [sp, #8]
   84362:	6811      	ldr	r1, [r2, #0]
   84364:	17df      	asrs	r7, r3, #31
   84366:	461a      	mov	r2, r3
   84368:	463b      	mov	r3, r7
   8436a:	e9c1 2300 	strd	r2, r3, [r1]
   8436e:	e525      	b.n	83dbc <_vfiprintf_r+0x64>
   84370:	4658      	mov	r0, fp
   84372:	f89b 3000 	ldrb.w	r3, [fp]
   84376:	2900      	cmp	r1, #0
   84378:	f47f ad57 	bne.w	83e2a <_vfiprintf_r+0xd2>
   8437c:	2120      	movs	r1, #32
   8437e:	e554      	b.n	83e2a <_vfiprintf_r+0xd2>
   84380:	f048 0801 	orr.w	r8, r8, #1
   84384:	4658      	mov	r0, fp
   84386:	f89b 3000 	ldrb.w	r3, [fp]
   8438a:	e54e      	b.n	83e2a <_vfiprintf_r+0xd2>
   8438c:	9503      	str	r5, [sp, #12]
   8438e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84392:	2b00      	cmp	r3, #0
   84394:	f000 809c 	beq.w	844d0 <_vfiprintf_r+0x778>
   84398:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   8439c:	f04f 0300 	mov.w	r3, #0
   843a0:	2601      	movs	r6, #1
   843a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   843a6:	ab10      	add	r3, sp, #64	; 0x40
   843a8:	46b1      	mov	r9, r6
   843aa:	9307      	str	r3, [sp, #28]
   843ac:	e71d      	b.n	841ea <_vfiprintf_r+0x492>
   843ae:	9801      	ldr	r0, [sp, #4]
   843b0:	9900      	ldr	r1, [sp, #0]
   843b2:	aa0d      	add	r2, sp, #52	; 0x34
   843b4:	9308      	str	r3, [sp, #32]
   843b6:	f7ff fc93 	bl	83ce0 <__sprint_r.part.0>
   843ba:	2800      	cmp	r0, #0
   843bc:	f040 808f 	bne.w	844de <_vfiprintf_r+0x786>
   843c0:	990e      	ldr	r1, [sp, #56]	; 0x38
   843c2:	46d4      	mov	ip, sl
   843c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   843c6:	f101 0e01 	add.w	lr, r1, #1
   843ca:	9b08      	ldr	r3, [sp, #32]
   843cc:	e61d      	b.n	8400a <_vfiprintf_r+0x2b2>
   843ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   843d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   843d2:	1c48      	adds	r0, r1, #1
   843d4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   843d8:	b16b      	cbz	r3, 843f6 <_vfiprintf_r+0x69e>
   843da:	3201      	adds	r2, #1
   843dc:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   843e0:	2101      	movs	r1, #1
   843e2:	2807      	cmp	r0, #7
   843e4:	920f      	str	r2, [sp, #60]	; 0x3c
   843e6:	900e      	str	r0, [sp, #56]	; 0x38
   843e8:	6023      	str	r3, [r4, #0]
   843ea:	6061      	str	r1, [r4, #4]
   843ec:	f300 8134 	bgt.w	84658 <_vfiprintf_r+0x900>
   843f0:	4601      	mov	r1, r0
   843f2:	3408      	adds	r4, #8
   843f4:	3001      	adds	r0, #1
   843f6:	9b05      	ldr	r3, [sp, #20]
   843f8:	b163      	cbz	r3, 84414 <_vfiprintf_r+0x6bc>
   843fa:	3202      	adds	r2, #2
   843fc:	a90c      	add	r1, sp, #48	; 0x30
   843fe:	2302      	movs	r3, #2
   84400:	2807      	cmp	r0, #7
   84402:	920f      	str	r2, [sp, #60]	; 0x3c
   84404:	900e      	str	r0, [sp, #56]	; 0x38
   84406:	e884 000a 	stmia.w	r4, {r1, r3}
   8440a:	f300 8134 	bgt.w	84676 <_vfiprintf_r+0x91e>
   8440e:	4601      	mov	r1, r0
   84410:	3408      	adds	r4, #8
   84412:	3001      	adds	r0, #1
   84414:	9b06      	ldr	r3, [sp, #24]
   84416:	2b80      	cmp	r3, #128	; 0x80
   84418:	f000 80d4 	beq.w	845c4 <_vfiprintf_r+0x86c>
   8441c:	ebc9 070c 	rsb	r7, r9, ip
   84420:	2f00      	cmp	r7, #0
   84422:	dd2b      	ble.n	8447c <_vfiprintf_r+0x724>
   84424:	2f10      	cmp	r7, #16
   84426:	4dab      	ldr	r5, [pc, #684]	; (846d4 <_vfiprintf_r+0x97c>)
   84428:	dd1f      	ble.n	8446a <_vfiprintf_r+0x712>
   8442a:	46a6      	mov	lr, r4
   8442c:	2310      	movs	r3, #16
   8442e:	9c01      	ldr	r4, [sp, #4]
   84430:	e007      	b.n	84442 <_vfiprintf_r+0x6ea>
   84432:	f101 0c02 	add.w	ip, r1, #2
   84436:	4601      	mov	r1, r0
   84438:	f10e 0e08 	add.w	lr, lr, #8
   8443c:	3f10      	subs	r7, #16
   8443e:	2f10      	cmp	r7, #16
   84440:	dd11      	ble.n	84466 <_vfiprintf_r+0x70e>
   84442:	1c48      	adds	r0, r1, #1
   84444:	3210      	adds	r2, #16
   84446:	2807      	cmp	r0, #7
   84448:	920f      	str	r2, [sp, #60]	; 0x3c
   8444a:	f8ce 5000 	str.w	r5, [lr]
   8444e:	f8ce 3004 	str.w	r3, [lr, #4]
   84452:	900e      	str	r0, [sp, #56]	; 0x38
   84454:	dded      	ble.n	84432 <_vfiprintf_r+0x6da>
   84456:	bb6a      	cbnz	r2, 844b4 <_vfiprintf_r+0x75c>
   84458:	3f10      	subs	r7, #16
   8445a:	2f10      	cmp	r7, #16
   8445c:	f04f 0c01 	mov.w	ip, #1
   84460:	4611      	mov	r1, r2
   84462:	46d6      	mov	lr, sl
   84464:	dced      	bgt.n	84442 <_vfiprintf_r+0x6ea>
   84466:	4674      	mov	r4, lr
   84468:	4660      	mov	r0, ip
   8446a:	443a      	add	r2, r7
   8446c:	2807      	cmp	r0, #7
   8446e:	920f      	str	r2, [sp, #60]	; 0x3c
   84470:	e884 00a0 	stmia.w	r4, {r5, r7}
   84474:	900e      	str	r0, [sp, #56]	; 0x38
   84476:	dc3b      	bgt.n	844f0 <_vfiprintf_r+0x798>
   84478:	3408      	adds	r4, #8
   8447a:	3001      	adds	r0, #1
   8447c:	eb02 0309 	add.w	r3, r2, r9
   84480:	9a07      	ldr	r2, [sp, #28]
   84482:	2807      	cmp	r0, #7
   84484:	930f      	str	r3, [sp, #60]	; 0x3c
   84486:	e884 0204 	stmia.w	r4, {r2, r9}
   8448a:	900e      	str	r0, [sp, #56]	; 0x38
   8448c:	dd3d      	ble.n	8450a <_vfiprintf_r+0x7b2>
   8448e:	2b00      	cmp	r3, #0
   84490:	f040 813f 	bne.w	84712 <_vfiprintf_r+0x9ba>
   84494:	f018 0f04 	tst.w	r8, #4
   84498:	930e      	str	r3, [sp, #56]	; 0x38
   8449a:	f040 8130 	bne.w	846fe <_vfiprintf_r+0x9a6>
   8449e:	9b02      	ldr	r3, [sp, #8]
   844a0:	9a03      	ldr	r2, [sp, #12]
   844a2:	4296      	cmp	r6, r2
   844a4:	bfac      	ite	ge
   844a6:	199b      	addge	r3, r3, r6
   844a8:	189b      	addlt	r3, r3, r2
   844aa:	9302      	str	r3, [sp, #8]
   844ac:	2300      	movs	r3, #0
   844ae:	930e      	str	r3, [sp, #56]	; 0x38
   844b0:	4654      	mov	r4, sl
   844b2:	e483      	b.n	83dbc <_vfiprintf_r+0x64>
   844b4:	4620      	mov	r0, r4
   844b6:	9900      	ldr	r1, [sp, #0]
   844b8:	aa0d      	add	r2, sp, #52	; 0x34
   844ba:	9305      	str	r3, [sp, #20]
   844bc:	f7ff fc10 	bl	83ce0 <__sprint_r.part.0>
   844c0:	b968      	cbnz	r0, 844de <_vfiprintf_r+0x786>
   844c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   844c4:	46d6      	mov	lr, sl
   844c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844c8:	f101 0c01 	add.w	ip, r1, #1
   844cc:	9b05      	ldr	r3, [sp, #20]
   844ce:	e7b5      	b.n	8443c <_vfiprintf_r+0x6e4>
   844d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   844d2:	b123      	cbz	r3, 844de <_vfiprintf_r+0x786>
   844d4:	9801      	ldr	r0, [sp, #4]
   844d6:	9900      	ldr	r1, [sp, #0]
   844d8:	aa0d      	add	r2, sp, #52	; 0x34
   844da:	f7ff fc01 	bl	83ce0 <__sprint_r.part.0>
   844de:	9b00      	ldr	r3, [sp, #0]
   844e0:	899b      	ldrh	r3, [r3, #12]
   844e2:	065b      	lsls	r3, r3, #25
   844e4:	f53f ad23 	bmi.w	83f2e <_vfiprintf_r+0x1d6>
   844e8:	9802      	ldr	r0, [sp, #8]
   844ea:	b02b      	add	sp, #172	; 0xac
   844ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844f0:	2a00      	cmp	r2, #0
   844f2:	f040 8190 	bne.w	84816 <_vfiprintf_r+0xabe>
   844f6:	464b      	mov	r3, r9
   844f8:	4654      	mov	r4, sl
   844fa:	9907      	ldr	r1, [sp, #28]
   844fc:	2201      	movs	r2, #1
   844fe:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   84502:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84506:	911a      	str	r1, [sp, #104]	; 0x68
   84508:	920e      	str	r2, [sp, #56]	; 0x38
   8450a:	f104 0208 	add.w	r2, r4, #8
   8450e:	f018 0f04 	tst.w	r8, #4
   84512:	d039      	beq.n	84588 <_vfiprintf_r+0x830>
   84514:	9903      	ldr	r1, [sp, #12]
   84516:	1b8d      	subs	r5, r1, r6
   84518:	2d00      	cmp	r5, #0
   8451a:	dd35      	ble.n	84588 <_vfiprintf_r+0x830>
   8451c:	2d10      	cmp	r5, #16
   8451e:	f340 8200 	ble.w	84922 <_vfiprintf_r+0xbca>
   84522:	980e      	ldr	r0, [sp, #56]	; 0x38
   84524:	4f6c      	ldr	r7, [pc, #432]	; (846d8 <_vfiprintf_r+0x980>)
   84526:	2410      	movs	r4, #16
   84528:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8452c:	f8dd 9000 	ldr.w	r9, [sp]
   84530:	e006      	b.n	84540 <_vfiprintf_r+0x7e8>
   84532:	f100 0e02 	add.w	lr, r0, #2
   84536:	4608      	mov	r0, r1
   84538:	3208      	adds	r2, #8
   8453a:	3d10      	subs	r5, #16
   8453c:	2d10      	cmp	r5, #16
   8453e:	dd10      	ble.n	84562 <_vfiprintf_r+0x80a>
   84540:	1c41      	adds	r1, r0, #1
   84542:	3310      	adds	r3, #16
   84544:	2907      	cmp	r1, #7
   84546:	930f      	str	r3, [sp, #60]	; 0x3c
   84548:	6017      	str	r7, [r2, #0]
   8454a:	6054      	str	r4, [r2, #4]
   8454c:	910e      	str	r1, [sp, #56]	; 0x38
   8454e:	ddf0      	ble.n	84532 <_vfiprintf_r+0x7da>
   84550:	2b00      	cmp	r3, #0
   84552:	d12a      	bne.n	845aa <_vfiprintf_r+0x852>
   84554:	3d10      	subs	r5, #16
   84556:	2d10      	cmp	r5, #16
   84558:	f04f 0e01 	mov.w	lr, #1
   8455c:	4618      	mov	r0, r3
   8455e:	4652      	mov	r2, sl
   84560:	dcee      	bgt.n	84540 <_vfiprintf_r+0x7e8>
   84562:	442b      	add	r3, r5
   84564:	f1be 0f07 	cmp.w	lr, #7
   84568:	930f      	str	r3, [sp, #60]	; 0x3c
   8456a:	6017      	str	r7, [r2, #0]
   8456c:	6055      	str	r5, [r2, #4]
   8456e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84572:	dd09      	ble.n	84588 <_vfiprintf_r+0x830>
   84574:	2b00      	cmp	r3, #0
   84576:	d092      	beq.n	8449e <_vfiprintf_r+0x746>
   84578:	9801      	ldr	r0, [sp, #4]
   8457a:	9900      	ldr	r1, [sp, #0]
   8457c:	aa0d      	add	r2, sp, #52	; 0x34
   8457e:	f7ff fbaf 	bl	83ce0 <__sprint_r.part.0>
   84582:	2800      	cmp	r0, #0
   84584:	d1ab      	bne.n	844de <_vfiprintf_r+0x786>
   84586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84588:	9a02      	ldr	r2, [sp, #8]
   8458a:	9903      	ldr	r1, [sp, #12]
   8458c:	428e      	cmp	r6, r1
   8458e:	bfac      	ite	ge
   84590:	1992      	addge	r2, r2, r6
   84592:	1852      	addlt	r2, r2, r1
   84594:	9202      	str	r2, [sp, #8]
   84596:	2b00      	cmp	r3, #0
   84598:	d088      	beq.n	844ac <_vfiprintf_r+0x754>
   8459a:	9801      	ldr	r0, [sp, #4]
   8459c:	9900      	ldr	r1, [sp, #0]
   8459e:	aa0d      	add	r2, sp, #52	; 0x34
   845a0:	f7ff fb9e 	bl	83ce0 <__sprint_r.part.0>
   845a4:	2800      	cmp	r0, #0
   845a6:	d081      	beq.n	844ac <_vfiprintf_r+0x754>
   845a8:	e799      	b.n	844de <_vfiprintf_r+0x786>
   845aa:	4640      	mov	r0, r8
   845ac:	4649      	mov	r1, r9
   845ae:	aa0d      	add	r2, sp, #52	; 0x34
   845b0:	f7ff fb96 	bl	83ce0 <__sprint_r.part.0>
   845b4:	2800      	cmp	r0, #0
   845b6:	d192      	bne.n	844de <_vfiprintf_r+0x786>
   845b8:	980e      	ldr	r0, [sp, #56]	; 0x38
   845ba:	4652      	mov	r2, sl
   845bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   845be:	f100 0e01 	add.w	lr, r0, #1
   845c2:	e7ba      	b.n	8453a <_vfiprintf_r+0x7e2>
   845c4:	9b03      	ldr	r3, [sp, #12]
   845c6:	1b9f      	subs	r7, r3, r6
   845c8:	2f00      	cmp	r7, #0
   845ca:	f77f af27 	ble.w	8441c <_vfiprintf_r+0x6c4>
   845ce:	2f10      	cmp	r7, #16
   845d0:	f340 81b3 	ble.w	8493a <_vfiprintf_r+0xbe2>
   845d4:	4620      	mov	r0, r4
   845d6:	4d3f      	ldr	r5, [pc, #252]	; (846d4 <_vfiprintf_r+0x97c>)
   845d8:	4664      	mov	r4, ip
   845da:	2310      	movs	r3, #16
   845dc:	4684      	mov	ip, r0
   845de:	e007      	b.n	845f0 <_vfiprintf_r+0x898>
   845e0:	f101 0e02 	add.w	lr, r1, #2
   845e4:	4601      	mov	r1, r0
   845e6:	f10c 0c08 	add.w	ip, ip, #8
   845ea:	3f10      	subs	r7, #16
   845ec:	2f10      	cmp	r7, #16
   845ee:	dd11      	ble.n	84614 <_vfiprintf_r+0x8bc>
   845f0:	1c48      	adds	r0, r1, #1
   845f2:	3210      	adds	r2, #16
   845f4:	2807      	cmp	r0, #7
   845f6:	920f      	str	r2, [sp, #60]	; 0x3c
   845f8:	f8cc 5000 	str.w	r5, [ip]
   845fc:	f8cc 3004 	str.w	r3, [ip, #4]
   84600:	900e      	str	r0, [sp, #56]	; 0x38
   84602:	dded      	ble.n	845e0 <_vfiprintf_r+0x888>
   84604:	b9c2      	cbnz	r2, 84638 <_vfiprintf_r+0x8e0>
   84606:	3f10      	subs	r7, #16
   84608:	2f10      	cmp	r7, #16
   8460a:	f04f 0e01 	mov.w	lr, #1
   8460e:	4611      	mov	r1, r2
   84610:	46d4      	mov	ip, sl
   84612:	dced      	bgt.n	845f0 <_vfiprintf_r+0x898>
   84614:	4663      	mov	r3, ip
   84616:	46a4      	mov	ip, r4
   84618:	461c      	mov	r4, r3
   8461a:	443a      	add	r2, r7
   8461c:	f1be 0f07 	cmp.w	lr, #7
   84620:	920f      	str	r2, [sp, #60]	; 0x3c
   84622:	e884 00a0 	stmia.w	r4, {r5, r7}
   84626:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8462a:	f300 80ee 	bgt.w	8480a <_vfiprintf_r+0xab2>
   8462e:	3408      	adds	r4, #8
   84630:	f10e 0001 	add.w	r0, lr, #1
   84634:	4671      	mov	r1, lr
   84636:	e6f1      	b.n	8441c <_vfiprintf_r+0x6c4>
   84638:	9801      	ldr	r0, [sp, #4]
   8463a:	9900      	ldr	r1, [sp, #0]
   8463c:	aa0d      	add	r2, sp, #52	; 0x34
   8463e:	9305      	str	r3, [sp, #20]
   84640:	f7ff fb4e 	bl	83ce0 <__sprint_r.part.0>
   84644:	2800      	cmp	r0, #0
   84646:	f47f af4a 	bne.w	844de <_vfiprintf_r+0x786>
   8464a:	990e      	ldr	r1, [sp, #56]	; 0x38
   8464c:	46d4      	mov	ip, sl
   8464e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84650:	f101 0e01 	add.w	lr, r1, #1
   84654:	9b05      	ldr	r3, [sp, #20]
   84656:	e7c8      	b.n	845ea <_vfiprintf_r+0x892>
   84658:	2a00      	cmp	r2, #0
   8465a:	f040 80c5 	bne.w	847e8 <_vfiprintf_r+0xa90>
   8465e:	9b05      	ldr	r3, [sp, #20]
   84660:	2b00      	cmp	r3, #0
   84662:	f000 8085 	beq.w	84770 <_vfiprintf_r+0xa18>
   84666:	aa0c      	add	r2, sp, #48	; 0x30
   84668:	2302      	movs	r3, #2
   8466a:	921a      	str	r2, [sp, #104]	; 0x68
   8466c:	4608      	mov	r0, r1
   8466e:	931b      	str	r3, [sp, #108]	; 0x6c
   84670:	461a      	mov	r2, r3
   84672:	4654      	mov	r4, sl
   84674:	e6cb      	b.n	8440e <_vfiprintf_r+0x6b6>
   84676:	2a00      	cmp	r2, #0
   84678:	f040 80a5 	bne.w	847c6 <_vfiprintf_r+0xa6e>
   8467c:	2001      	movs	r0, #1
   8467e:	4611      	mov	r1, r2
   84680:	4654      	mov	r4, sl
   84682:	e6c7      	b.n	84414 <_vfiprintf_r+0x6bc>
   84684:	bb03      	cbnz	r3, 846c8 <_vfiprintf_r+0x970>
   84686:	f018 0f01 	tst.w	r8, #1
   8468a:	d01d      	beq.n	846c8 <_vfiprintf_r+0x970>
   8468c:	ab2a      	add	r3, sp, #168	; 0xa8
   8468e:	2230      	movs	r2, #48	; 0x30
   84690:	f803 2d41 	strb.w	r2, [r3, #-65]!
   84694:	ebc3 090a 	rsb	r9, r3, sl
   84698:	9307      	str	r3, [sp, #28]
   8469a:	e48f      	b.n	83fbc <_vfiprintf_r+0x264>
   8469c:	46d1      	mov	r9, sl
   8469e:	9809      	ldr	r0, [sp, #36]	; 0x24
   846a0:	0933      	lsrs	r3, r6, #4
   846a2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   846a6:	0939      	lsrs	r1, r7, #4
   846a8:	f006 020f 	and.w	r2, r6, #15
   846ac:	460f      	mov	r7, r1
   846ae:	461e      	mov	r6, r3
   846b0:	5c83      	ldrb	r3, [r0, r2]
   846b2:	f809 3d01 	strb.w	r3, [r9, #-1]!
   846b6:	ea56 0307 	orrs.w	r3, r6, r7
   846ba:	d1f1      	bne.n	846a0 <_vfiprintf_r+0x948>
   846bc:	464b      	mov	r3, r9
   846be:	f8cd 901c 	str.w	r9, [sp, #28]
   846c2:	ebc3 090a 	rsb	r9, r3, sl
   846c6:	e479      	b.n	83fbc <_vfiprintf_r+0x264>
   846c8:	f8cd a01c 	str.w	sl, [sp, #28]
   846cc:	e476      	b.n	83fbc <_vfiprintf_r+0x264>
   846ce:	2302      	movs	r3, #2
   846d0:	e445      	b.n	83f5e <_vfiprintf_r+0x206>
   846d2:	bf00      	nop
   846d4:	00086a60 	.word	0x00086a60
   846d8:	00086aa0 	.word	0x00086aa0
   846dc:	2a00      	cmp	r2, #0
   846de:	f040 80d5 	bne.w	8488c <_vfiprintf_r+0xb34>
   846e2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   846e6:	2b00      	cmp	r3, #0
   846e8:	f000 80ac 	beq.w	84844 <_vfiprintf_r+0xaec>
   846ec:	2301      	movs	r3, #1
   846ee:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   846f2:	4618      	mov	r0, r3
   846f4:	931b      	str	r3, [sp, #108]	; 0x6c
   846f6:	461a      	mov	r2, r3
   846f8:	911a      	str	r1, [sp, #104]	; 0x68
   846fa:	4654      	mov	r4, sl
   846fc:	e678      	b.n	843f0 <_vfiprintf_r+0x698>
   846fe:	9a03      	ldr	r2, [sp, #12]
   84700:	1b95      	subs	r5, r2, r6
   84702:	2d00      	cmp	r5, #0
   84704:	4652      	mov	r2, sl
   84706:	f73f af09 	bgt.w	8451c <_vfiprintf_r+0x7c4>
   8470a:	e6c8      	b.n	8449e <_vfiprintf_r+0x746>
   8470c:	465d      	mov	r5, fp
   8470e:	f7ff bb7c 	b.w	83e0a <_vfiprintf_r+0xb2>
   84712:	9801      	ldr	r0, [sp, #4]
   84714:	9900      	ldr	r1, [sp, #0]
   84716:	aa0d      	add	r2, sp, #52	; 0x34
   84718:	f7ff fae2 	bl	83ce0 <__sprint_r.part.0>
   8471c:	2800      	cmp	r0, #0
   8471e:	f47f aede 	bne.w	844de <_vfiprintf_r+0x786>
   84722:	4652      	mov	r2, sl
   84724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84726:	e6f2      	b.n	8450e <_vfiprintf_r+0x7b6>
   84728:	9904      	ldr	r1, [sp, #16]
   8472a:	2700      	movs	r7, #0
   8472c:	460a      	mov	r2, r1
   8472e:	3204      	adds	r2, #4
   84730:	680e      	ldr	r6, [r1, #0]
   84732:	9204      	str	r2, [sp, #16]
   84734:	e413      	b.n	83f5e <_vfiprintf_r+0x206>
   84736:	3204      	adds	r2, #4
   84738:	681e      	ldr	r6, [r3, #0]
   8473a:	2700      	movs	r7, #0
   8473c:	2301      	movs	r3, #1
   8473e:	9204      	str	r2, [sp, #16]
   84740:	e40d      	b.n	83f5e <_vfiprintf_r+0x206>
   84742:	6816      	ldr	r6, [r2, #0]
   84744:	3204      	adds	r2, #4
   84746:	9204      	str	r2, [sp, #16]
   84748:	2700      	movs	r7, #0
   8474a:	e52d      	b.n	841a8 <_vfiprintf_r+0x450>
   8474c:	681e      	ldr	r6, [r3, #0]
   8474e:	3304      	adds	r3, #4
   84750:	17f7      	asrs	r7, r6, #31
   84752:	9304      	str	r3, [sp, #16]
   84754:	4632      	mov	r2, r6
   84756:	463b      	mov	r3, r7
   84758:	e4c1      	b.n	840de <_vfiprintf_r+0x386>
   8475a:	9801      	ldr	r0, [sp, #4]
   8475c:	9900      	ldr	r1, [sp, #0]
   8475e:	aa0d      	add	r2, sp, #52	; 0x34
   84760:	f7ff fabe 	bl	83ce0 <__sprint_r.part.0>
   84764:	2800      	cmp	r0, #0
   84766:	f47f aeba 	bne.w	844de <_vfiprintf_r+0x786>
   8476a:	4654      	mov	r4, sl
   8476c:	f7ff bbc0 	b.w	83ef0 <_vfiprintf_r+0x198>
   84770:	4608      	mov	r0, r1
   84772:	4654      	mov	r4, sl
   84774:	4611      	mov	r1, r2
   84776:	e64d      	b.n	84414 <_vfiprintf_r+0x6bc>
   84778:	46d1      	mov	r9, sl
   8477a:	f8cd c014 	str.w	ip, [sp, #20]
   8477e:	4630      	mov	r0, r6
   84780:	4639      	mov	r1, r7
   84782:	220a      	movs	r2, #10
   84784:	2300      	movs	r3, #0
   84786:	f001 fe47 	bl	86418 <__aeabi_uldivmod>
   8478a:	3230      	adds	r2, #48	; 0x30
   8478c:	4630      	mov	r0, r6
   8478e:	4639      	mov	r1, r7
   84790:	f809 2d01 	strb.w	r2, [r9, #-1]!
   84794:	2300      	movs	r3, #0
   84796:	220a      	movs	r2, #10
   84798:	f001 fe3e 	bl	86418 <__aeabi_uldivmod>
   8479c:	4606      	mov	r6, r0
   8479e:	460f      	mov	r7, r1
   847a0:	ea56 0307 	orrs.w	r3, r6, r7
   847a4:	d1eb      	bne.n	8477e <_vfiprintf_r+0xa26>
   847a6:	f8dd c014 	ldr.w	ip, [sp, #20]
   847aa:	e787      	b.n	846bc <_vfiprintf_r+0x964>
   847ac:	2b30      	cmp	r3, #48	; 0x30
   847ae:	9b07      	ldr	r3, [sp, #28]
   847b0:	d087      	beq.n	846c2 <_vfiprintf_r+0x96a>
   847b2:	3b01      	subs	r3, #1
   847b4:	461a      	mov	r2, r3
   847b6:	9307      	str	r3, [sp, #28]
   847b8:	2330      	movs	r3, #48	; 0x30
   847ba:	ebc2 090a 	rsb	r9, r2, sl
   847be:	f801 3c01 	strb.w	r3, [r1, #-1]
   847c2:	f7ff bbfb 	b.w	83fbc <_vfiprintf_r+0x264>
   847c6:	9801      	ldr	r0, [sp, #4]
   847c8:	9900      	ldr	r1, [sp, #0]
   847ca:	aa0d      	add	r2, sp, #52	; 0x34
   847cc:	f8cd c014 	str.w	ip, [sp, #20]
   847d0:	f7ff fa86 	bl	83ce0 <__sprint_r.part.0>
   847d4:	2800      	cmp	r0, #0
   847d6:	f47f ae82 	bne.w	844de <_vfiprintf_r+0x786>
   847da:	990e      	ldr	r1, [sp, #56]	; 0x38
   847dc:	4654      	mov	r4, sl
   847de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847e0:	1c48      	adds	r0, r1, #1
   847e2:	f8dd c014 	ldr.w	ip, [sp, #20]
   847e6:	e615      	b.n	84414 <_vfiprintf_r+0x6bc>
   847e8:	9801      	ldr	r0, [sp, #4]
   847ea:	9900      	ldr	r1, [sp, #0]
   847ec:	aa0d      	add	r2, sp, #52	; 0x34
   847ee:	f8cd c020 	str.w	ip, [sp, #32]
   847f2:	f7ff fa75 	bl	83ce0 <__sprint_r.part.0>
   847f6:	2800      	cmp	r0, #0
   847f8:	f47f ae71 	bne.w	844de <_vfiprintf_r+0x786>
   847fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   847fe:	4654      	mov	r4, sl
   84800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84802:	1c48      	adds	r0, r1, #1
   84804:	f8dd c020 	ldr.w	ip, [sp, #32]
   84808:	e5f5      	b.n	843f6 <_vfiprintf_r+0x69e>
   8480a:	2a00      	cmp	r2, #0
   8480c:	d167      	bne.n	848de <_vfiprintf_r+0xb86>
   8480e:	2001      	movs	r0, #1
   84810:	4611      	mov	r1, r2
   84812:	4654      	mov	r4, sl
   84814:	e602      	b.n	8441c <_vfiprintf_r+0x6c4>
   84816:	9801      	ldr	r0, [sp, #4]
   84818:	9900      	ldr	r1, [sp, #0]
   8481a:	aa0d      	add	r2, sp, #52	; 0x34
   8481c:	f7ff fa60 	bl	83ce0 <__sprint_r.part.0>
   84820:	2800      	cmp	r0, #0
   84822:	f47f ae5c 	bne.w	844de <_vfiprintf_r+0x786>
   84826:	980e      	ldr	r0, [sp, #56]	; 0x38
   84828:	4654      	mov	r4, sl
   8482a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8482c:	3001      	adds	r0, #1
   8482e:	e625      	b.n	8447c <_vfiprintf_r+0x724>
   84830:	252d      	movs	r5, #45	; 0x2d
   84832:	4276      	negs	r6, r6
   84834:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84838:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   8483c:	46e1      	mov	r9, ip
   8483e:	2301      	movs	r3, #1
   84840:	f7ff bb93 	b.w	83f6a <_vfiprintf_r+0x212>
   84844:	9b05      	ldr	r3, [sp, #20]
   84846:	4611      	mov	r1, r2
   84848:	2001      	movs	r0, #1
   8484a:	4654      	mov	r4, sl
   8484c:	2b00      	cmp	r3, #0
   8484e:	f43f ade5 	beq.w	8441c <_vfiprintf_r+0x6c4>
   84852:	aa0c      	add	r2, sp, #48	; 0x30
   84854:	2302      	movs	r3, #2
   84856:	e88a 000c 	stmia.w	sl, {r2, r3}
   8485a:	461a      	mov	r2, r3
   8485c:	e5d7      	b.n	8440e <_vfiprintf_r+0x6b6>
   8485e:	f018 0f10 	tst.w	r8, #16
   84862:	d10b      	bne.n	8487c <_vfiprintf_r+0xb24>
   84864:	f018 0f40 	tst.w	r8, #64	; 0x40
   84868:	d008      	beq.n	8487c <_vfiprintf_r+0xb24>
   8486a:	9a04      	ldr	r2, [sp, #16]
   8486c:	6813      	ldr	r3, [r2, #0]
   8486e:	3204      	adds	r2, #4
   84870:	9204      	str	r2, [sp, #16]
   84872:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84876:	801a      	strh	r2, [r3, #0]
   84878:	f7ff baa0 	b.w	83dbc <_vfiprintf_r+0x64>
   8487c:	9a04      	ldr	r2, [sp, #16]
   8487e:	6813      	ldr	r3, [r2, #0]
   84880:	3204      	adds	r2, #4
   84882:	9204      	str	r2, [sp, #16]
   84884:	9a02      	ldr	r2, [sp, #8]
   84886:	601a      	str	r2, [r3, #0]
   84888:	f7ff ba98 	b.w	83dbc <_vfiprintf_r+0x64>
   8488c:	9801      	ldr	r0, [sp, #4]
   8488e:	9900      	ldr	r1, [sp, #0]
   84890:	aa0d      	add	r2, sp, #52	; 0x34
   84892:	f8cd c020 	str.w	ip, [sp, #32]
   84896:	f7ff fa23 	bl	83ce0 <__sprint_r.part.0>
   8489a:	2800      	cmp	r0, #0
   8489c:	f47f ae1f 	bne.w	844de <_vfiprintf_r+0x786>
   848a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   848a2:	4654      	mov	r4, sl
   848a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848a6:	1c48      	adds	r0, r1, #1
   848a8:	f8dd c020 	ldr.w	ip, [sp, #32]
   848ac:	e592      	b.n	843d4 <_vfiprintf_r+0x67c>
   848ae:	f048 0820 	orr.w	r8, r8, #32
   848b2:	f10b 0001 	add.w	r0, fp, #1
   848b6:	f89b 3001 	ldrb.w	r3, [fp, #1]
   848ba:	f7ff bab6 	b.w	83e2a <_vfiprintf_r+0xd2>
   848be:	426d      	negs	r5, r5
   848c0:	9304      	str	r3, [sp, #16]
   848c2:	4658      	mov	r0, fp
   848c4:	f7ff bbc8 	b.w	84058 <_vfiprintf_r+0x300>
   848c8:	9807      	ldr	r0, [sp, #28]
   848ca:	9504      	str	r5, [sp, #16]
   848cc:	f7ff f9da 	bl	83c84 <strlen>
   848d0:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   848d4:	4681      	mov	r9, r0
   848d6:	f04f 0c00 	mov.w	ip, #0
   848da:	f7ff bb6f 	b.w	83fbc <_vfiprintf_r+0x264>
   848de:	9801      	ldr	r0, [sp, #4]
   848e0:	9900      	ldr	r1, [sp, #0]
   848e2:	aa0d      	add	r2, sp, #52	; 0x34
   848e4:	f8cd c014 	str.w	ip, [sp, #20]
   848e8:	f7ff f9fa 	bl	83ce0 <__sprint_r.part.0>
   848ec:	2800      	cmp	r0, #0
   848ee:	f47f adf6 	bne.w	844de <_vfiprintf_r+0x786>
   848f2:	990e      	ldr	r1, [sp, #56]	; 0x38
   848f4:	4654      	mov	r4, sl
   848f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   848f8:	1c48      	adds	r0, r1, #1
   848fa:	f8dd c014 	ldr.w	ip, [sp, #20]
   848fe:	e58d      	b.n	8441c <_vfiprintf_r+0x6c4>
   84900:	990e      	ldr	r1, [sp, #56]	; 0x38
   84902:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84904:	3101      	adds	r1, #1
   84906:	4f15      	ldr	r7, [pc, #84]	; (8495c <_vfiprintf_r+0xc04>)
   84908:	f7ff bb9a 	b.w	84040 <_vfiprintf_r+0x2e8>
   8490c:	2e06      	cmp	r6, #6
   8490e:	4b14      	ldr	r3, [pc, #80]	; (84960 <_vfiprintf_r+0xc08>)
   84910:	bf28      	it	cs
   84912:	f04f 0c06 	movcs.w	ip, #6
   84916:	46e1      	mov	r9, ip
   84918:	9504      	str	r5, [sp, #16]
   8491a:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   8491e:	9307      	str	r3, [sp, #28]
   84920:	e463      	b.n	841ea <_vfiprintf_r+0x492>
   84922:	990e      	ldr	r1, [sp, #56]	; 0x38
   84924:	4f0d      	ldr	r7, [pc, #52]	; (8495c <_vfiprintf_r+0xc04>)
   84926:	f101 0e01 	add.w	lr, r1, #1
   8492a:	e61a      	b.n	84562 <_vfiprintf_r+0x80a>
   8492c:	46e1      	mov	r9, ip
   8492e:	9504      	str	r5, [sp, #16]
   84930:	4684      	mov	ip, r0
   84932:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84936:	f7ff bb41 	b.w	83fbc <_vfiprintf_r+0x264>
   8493a:	4686      	mov	lr, r0
   8493c:	4d09      	ldr	r5, [pc, #36]	; (84964 <_vfiprintf_r+0xc0c>)
   8493e:	e66c      	b.n	8461a <_vfiprintf_r+0x8c2>
   84940:	9a04      	ldr	r2, [sp, #16]
   84942:	f89b 3001 	ldrb.w	r3, [fp, #1]
   84946:	6816      	ldr	r6, [r2, #0]
   84948:	3204      	adds	r2, #4
   8494a:	2e00      	cmp	r6, #0
   8494c:	9204      	str	r2, [sp, #16]
   8494e:	f6bf aa6c 	bge.w	83e2a <_vfiprintf_r+0xd2>
   84952:	f04f 36ff 	mov.w	r6, #4294967295
   84956:	f7ff ba68 	b.w	83e2a <_vfiprintf_r+0xd2>
   8495a:	bf00      	nop
   8495c:	00086aa0 	.word	0x00086aa0
   84960:	00086a98 	.word	0x00086a98
   84964:	00086a60 	.word	0x00086a60

00084968 <__sbprintf>:
   84968:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   8496c:	4688      	mov	r8, r1
   8496e:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84970:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84974:	9719      	str	r7, [sp, #100]	; 0x64
   84976:	f8d8 701c 	ldr.w	r7, [r8, #28]
   8497a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   8497e:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   84982:	9707      	str	r7, [sp, #28]
   84984:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84988:	ac1a      	add	r4, sp, #104	; 0x68
   8498a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8498e:	f02e 0e02 	bic.w	lr, lr, #2
   84992:	2600      	movs	r6, #0
   84994:	4669      	mov	r1, sp
   84996:	9400      	str	r4, [sp, #0]
   84998:	9404      	str	r4, [sp, #16]
   8499a:	9502      	str	r5, [sp, #8]
   8499c:	9505      	str	r5, [sp, #20]
   8499e:	f8ad e00c 	strh.w	lr, [sp, #12]
   849a2:	f8ad a00e 	strh.w	sl, [sp, #14]
   849a6:	9709      	str	r7, [sp, #36]	; 0x24
   849a8:	9606      	str	r6, [sp, #24]
   849aa:	4605      	mov	r5, r0
   849ac:	f7ff f9d4 	bl	83d58 <_vfiprintf_r>
   849b0:	1e04      	subs	r4, r0, #0
   849b2:	db07      	blt.n	849c4 <__sbprintf+0x5c>
   849b4:	4628      	mov	r0, r5
   849b6:	4669      	mov	r1, sp
   849b8:	f000 f92a 	bl	84c10 <_fflush_r>
   849bc:	42b0      	cmp	r0, r6
   849be:	bf18      	it	ne
   849c0:	f04f 34ff 	movne.w	r4, #4294967295
   849c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   849c8:	065b      	lsls	r3, r3, #25
   849ca:	d505      	bpl.n	849d8 <__sbprintf+0x70>
   849cc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   849d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   849d4:	f8a8 300c 	strh.w	r3, [r8, #12]
   849d8:	4620      	mov	r0, r4
   849da:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   849de:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   849e2:	bf00      	nop

000849e4 <__swsetup_r>:
   849e4:	b538      	push	{r3, r4, r5, lr}
   849e6:	4b2f      	ldr	r3, [pc, #188]	; (84aa4 <__swsetup_r+0xc0>)
   849e8:	4605      	mov	r5, r0
   849ea:	6818      	ldr	r0, [r3, #0]
   849ec:	460c      	mov	r4, r1
   849ee:	b110      	cbz	r0, 849f6 <__swsetup_r+0x12>
   849f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   849f2:	2b00      	cmp	r3, #0
   849f4:	d036      	beq.n	84a64 <__swsetup_r+0x80>
   849f6:	89a2      	ldrh	r2, [r4, #12]
   849f8:	b293      	uxth	r3, r2
   849fa:	0718      	lsls	r0, r3, #28
   849fc:	d50c      	bpl.n	84a18 <__swsetup_r+0x34>
   849fe:	6920      	ldr	r0, [r4, #16]
   84a00:	b1a8      	cbz	r0, 84a2e <__swsetup_r+0x4a>
   84a02:	f013 0201 	ands.w	r2, r3, #1
   84a06:	d01e      	beq.n	84a46 <__swsetup_r+0x62>
   84a08:	6963      	ldr	r3, [r4, #20]
   84a0a:	2200      	movs	r2, #0
   84a0c:	425b      	negs	r3, r3
   84a0e:	61a3      	str	r3, [r4, #24]
   84a10:	60a2      	str	r2, [r4, #8]
   84a12:	b1f0      	cbz	r0, 84a52 <__swsetup_r+0x6e>
   84a14:	2000      	movs	r0, #0
   84a16:	bd38      	pop	{r3, r4, r5, pc}
   84a18:	06d9      	lsls	r1, r3, #27
   84a1a:	d53a      	bpl.n	84a92 <__swsetup_r+0xae>
   84a1c:	0758      	lsls	r0, r3, #29
   84a1e:	d424      	bmi.n	84a6a <__swsetup_r+0x86>
   84a20:	6920      	ldr	r0, [r4, #16]
   84a22:	f042 0308 	orr.w	r3, r2, #8
   84a26:	81a3      	strh	r3, [r4, #12]
   84a28:	b29b      	uxth	r3, r3
   84a2a:	2800      	cmp	r0, #0
   84a2c:	d1e9      	bne.n	84a02 <__swsetup_r+0x1e>
   84a2e:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84a32:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84a36:	d0e4      	beq.n	84a02 <__swsetup_r+0x1e>
   84a38:	4628      	mov	r0, r5
   84a3a:	4621      	mov	r1, r4
   84a3c:	f000 fcee 	bl	8541c <__smakebuf_r>
   84a40:	89a3      	ldrh	r3, [r4, #12]
   84a42:	6920      	ldr	r0, [r4, #16]
   84a44:	e7dd      	b.n	84a02 <__swsetup_r+0x1e>
   84a46:	0799      	lsls	r1, r3, #30
   84a48:	bf58      	it	pl
   84a4a:	6962      	ldrpl	r2, [r4, #20]
   84a4c:	60a2      	str	r2, [r4, #8]
   84a4e:	2800      	cmp	r0, #0
   84a50:	d1e0      	bne.n	84a14 <__swsetup_r+0x30>
   84a52:	89a3      	ldrh	r3, [r4, #12]
   84a54:	061a      	lsls	r2, r3, #24
   84a56:	d5de      	bpl.n	84a16 <__swsetup_r+0x32>
   84a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a5c:	81a3      	strh	r3, [r4, #12]
   84a5e:	f04f 30ff 	mov.w	r0, #4294967295
   84a62:	bd38      	pop	{r3, r4, r5, pc}
   84a64:	f000 f968 	bl	84d38 <__sinit>
   84a68:	e7c5      	b.n	849f6 <__swsetup_r+0x12>
   84a6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84a6c:	b149      	cbz	r1, 84a82 <__swsetup_r+0x9e>
   84a6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84a72:	4299      	cmp	r1, r3
   84a74:	d003      	beq.n	84a7e <__swsetup_r+0x9a>
   84a76:	4628      	mov	r0, r5
   84a78:	f000 fa36 	bl	84ee8 <_free_r>
   84a7c:	89a2      	ldrh	r2, [r4, #12]
   84a7e:	2300      	movs	r3, #0
   84a80:	6323      	str	r3, [r4, #48]	; 0x30
   84a82:	6920      	ldr	r0, [r4, #16]
   84a84:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84a88:	2300      	movs	r3, #0
   84a8a:	b292      	uxth	r2, r2
   84a8c:	e884 0009 	stmia.w	r4, {r0, r3}
   84a90:	e7c7      	b.n	84a22 <__swsetup_r+0x3e>
   84a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84a96:	2309      	movs	r3, #9
   84a98:	602b      	str	r3, [r5, #0]
   84a9a:	f04f 30ff 	mov.w	r0, #4294967295
   84a9e:	81a2      	strh	r2, [r4, #12]
   84aa0:	bd38      	pop	{r3, r4, r5, pc}
   84aa2:	bf00      	nop
   84aa4:	20070830 	.word	0x20070830

00084aa8 <register_fini>:
   84aa8:	4b02      	ldr	r3, [pc, #8]	; (84ab4 <register_fini+0xc>)
   84aaa:	b113      	cbz	r3, 84ab2 <register_fini+0xa>
   84aac:	4802      	ldr	r0, [pc, #8]	; (84ab8 <register_fini+0x10>)
   84aae:	f000 b805 	b.w	84abc <atexit>
   84ab2:	4770      	bx	lr
   84ab4:	00000000 	.word	0x00000000
   84ab8:	00084d4d 	.word	0x00084d4d

00084abc <atexit>:
   84abc:	4601      	mov	r1, r0
   84abe:	2000      	movs	r0, #0
   84ac0:	4602      	mov	r2, r0
   84ac2:	4603      	mov	r3, r0
   84ac4:	f001 bbb4 	b.w	86230 <__register_exitproc>

00084ac8 <__sflush_r>:
   84ac8:	898b      	ldrh	r3, [r1, #12]
   84aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ace:	b29a      	uxth	r2, r3
   84ad0:	460d      	mov	r5, r1
   84ad2:	0711      	lsls	r1, r2, #28
   84ad4:	4680      	mov	r8, r0
   84ad6:	d43c      	bmi.n	84b52 <__sflush_r+0x8a>
   84ad8:	686a      	ldr	r2, [r5, #4]
   84ada:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84ade:	2a00      	cmp	r2, #0
   84ae0:	81ab      	strh	r3, [r5, #12]
   84ae2:	dd65      	ble.n	84bb0 <__sflush_r+0xe8>
   84ae4:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84ae6:	2e00      	cmp	r6, #0
   84ae8:	d04b      	beq.n	84b82 <__sflush_r+0xba>
   84aea:	b29b      	uxth	r3, r3
   84aec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84af0:	2100      	movs	r1, #0
   84af2:	b292      	uxth	r2, r2
   84af4:	f8d8 4000 	ldr.w	r4, [r8]
   84af8:	f8c8 1000 	str.w	r1, [r8]
   84afc:	2a00      	cmp	r2, #0
   84afe:	d05b      	beq.n	84bb8 <__sflush_r+0xf0>
   84b00:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84b02:	075f      	lsls	r7, r3, #29
   84b04:	d505      	bpl.n	84b12 <__sflush_r+0x4a>
   84b06:	6869      	ldr	r1, [r5, #4]
   84b08:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84b0a:	1a52      	subs	r2, r2, r1
   84b0c:	b10b      	cbz	r3, 84b12 <__sflush_r+0x4a>
   84b0e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84b10:	1ad2      	subs	r2, r2, r3
   84b12:	4640      	mov	r0, r8
   84b14:	69e9      	ldr	r1, [r5, #28]
   84b16:	2300      	movs	r3, #0
   84b18:	47b0      	blx	r6
   84b1a:	1c46      	adds	r6, r0, #1
   84b1c:	d056      	beq.n	84bcc <__sflush_r+0x104>
   84b1e:	89ab      	ldrh	r3, [r5, #12]
   84b20:	692a      	ldr	r2, [r5, #16]
   84b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b26:	b29b      	uxth	r3, r3
   84b28:	2100      	movs	r1, #0
   84b2a:	602a      	str	r2, [r5, #0]
   84b2c:	04da      	lsls	r2, r3, #19
   84b2e:	81ab      	strh	r3, [r5, #12]
   84b30:	6069      	str	r1, [r5, #4]
   84b32:	d43b      	bmi.n	84bac <__sflush_r+0xe4>
   84b34:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84b36:	f8c8 4000 	str.w	r4, [r8]
   84b3a:	b311      	cbz	r1, 84b82 <__sflush_r+0xba>
   84b3c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84b40:	4299      	cmp	r1, r3
   84b42:	d002      	beq.n	84b4a <__sflush_r+0x82>
   84b44:	4640      	mov	r0, r8
   84b46:	f000 f9cf 	bl	84ee8 <_free_r>
   84b4a:	2000      	movs	r0, #0
   84b4c:	6328      	str	r0, [r5, #48]	; 0x30
   84b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b52:	692e      	ldr	r6, [r5, #16]
   84b54:	b1ae      	cbz	r6, 84b82 <__sflush_r+0xba>
   84b56:	0791      	lsls	r1, r2, #30
   84b58:	682c      	ldr	r4, [r5, #0]
   84b5a:	bf0c      	ite	eq
   84b5c:	696b      	ldreq	r3, [r5, #20]
   84b5e:	2300      	movne	r3, #0
   84b60:	602e      	str	r6, [r5, #0]
   84b62:	1ba4      	subs	r4, r4, r6
   84b64:	60ab      	str	r3, [r5, #8]
   84b66:	e00a      	b.n	84b7e <__sflush_r+0xb6>
   84b68:	4632      	mov	r2, r6
   84b6a:	4623      	mov	r3, r4
   84b6c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84b6e:	4640      	mov	r0, r8
   84b70:	69e9      	ldr	r1, [r5, #28]
   84b72:	47b8      	blx	r7
   84b74:	2800      	cmp	r0, #0
   84b76:	eba4 0400 	sub.w	r4, r4, r0
   84b7a:	4406      	add	r6, r0
   84b7c:	dd04      	ble.n	84b88 <__sflush_r+0xc0>
   84b7e:	2c00      	cmp	r4, #0
   84b80:	dcf2      	bgt.n	84b68 <__sflush_r+0xa0>
   84b82:	2000      	movs	r0, #0
   84b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b88:	89ab      	ldrh	r3, [r5, #12]
   84b8a:	f04f 30ff 	mov.w	r0, #4294967295
   84b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b92:	81ab      	strh	r3, [r5, #12]
   84b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b98:	89ab      	ldrh	r3, [r5, #12]
   84b9a:	692a      	ldr	r2, [r5, #16]
   84b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84ba0:	b29b      	uxth	r3, r3
   84ba2:	81ab      	strh	r3, [r5, #12]
   84ba4:	04db      	lsls	r3, r3, #19
   84ba6:	6069      	str	r1, [r5, #4]
   84ba8:	602a      	str	r2, [r5, #0]
   84baa:	d5c3      	bpl.n	84b34 <__sflush_r+0x6c>
   84bac:	6528      	str	r0, [r5, #80]	; 0x50
   84bae:	e7c1      	b.n	84b34 <__sflush_r+0x6c>
   84bb0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84bb2:	2a00      	cmp	r2, #0
   84bb4:	dc96      	bgt.n	84ae4 <__sflush_r+0x1c>
   84bb6:	e7e4      	b.n	84b82 <__sflush_r+0xba>
   84bb8:	2301      	movs	r3, #1
   84bba:	4640      	mov	r0, r8
   84bbc:	69e9      	ldr	r1, [r5, #28]
   84bbe:	47b0      	blx	r6
   84bc0:	1c43      	adds	r3, r0, #1
   84bc2:	4602      	mov	r2, r0
   84bc4:	d019      	beq.n	84bfa <__sflush_r+0x132>
   84bc6:	89ab      	ldrh	r3, [r5, #12]
   84bc8:	6aae      	ldr	r6, [r5, #40]	; 0x28
   84bca:	e79a      	b.n	84b02 <__sflush_r+0x3a>
   84bcc:	f8d8 1000 	ldr.w	r1, [r8]
   84bd0:	2900      	cmp	r1, #0
   84bd2:	d0e1      	beq.n	84b98 <__sflush_r+0xd0>
   84bd4:	291d      	cmp	r1, #29
   84bd6:	d007      	beq.n	84be8 <__sflush_r+0x120>
   84bd8:	2916      	cmp	r1, #22
   84bda:	d005      	beq.n	84be8 <__sflush_r+0x120>
   84bdc:	89ab      	ldrh	r3, [r5, #12]
   84bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84be2:	81ab      	strh	r3, [r5, #12]
   84be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84be8:	89ab      	ldrh	r3, [r5, #12]
   84bea:	6929      	ldr	r1, [r5, #16]
   84bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84bf0:	2200      	movs	r2, #0
   84bf2:	81ab      	strh	r3, [r5, #12]
   84bf4:	e885 0006 	stmia.w	r5, {r1, r2}
   84bf8:	e79c      	b.n	84b34 <__sflush_r+0x6c>
   84bfa:	f8d8 3000 	ldr.w	r3, [r8]
   84bfe:	2b00      	cmp	r3, #0
   84c00:	d0e1      	beq.n	84bc6 <__sflush_r+0xfe>
   84c02:	2b1d      	cmp	r3, #29
   84c04:	d001      	beq.n	84c0a <__sflush_r+0x142>
   84c06:	2b16      	cmp	r3, #22
   84c08:	d1be      	bne.n	84b88 <__sflush_r+0xc0>
   84c0a:	f8c8 4000 	str.w	r4, [r8]
   84c0e:	e7b8      	b.n	84b82 <__sflush_r+0xba>

00084c10 <_fflush_r>:
   84c10:	b510      	push	{r4, lr}
   84c12:	4604      	mov	r4, r0
   84c14:	b082      	sub	sp, #8
   84c16:	b108      	cbz	r0, 84c1c <_fflush_r+0xc>
   84c18:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c1a:	b153      	cbz	r3, 84c32 <_fflush_r+0x22>
   84c1c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84c20:	b908      	cbnz	r0, 84c26 <_fflush_r+0x16>
   84c22:	b002      	add	sp, #8
   84c24:	bd10      	pop	{r4, pc}
   84c26:	4620      	mov	r0, r4
   84c28:	b002      	add	sp, #8
   84c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84c2e:	f7ff bf4b 	b.w	84ac8 <__sflush_r>
   84c32:	9101      	str	r1, [sp, #4]
   84c34:	f000 f880 	bl	84d38 <__sinit>
   84c38:	9901      	ldr	r1, [sp, #4]
   84c3a:	e7ef      	b.n	84c1c <_fflush_r+0xc>

00084c3c <_cleanup_r>:
   84c3c:	4901      	ldr	r1, [pc, #4]	; (84c44 <_cleanup_r+0x8>)
   84c3e:	f000 bbbb 	b.w	853b8 <_fwalk_reent>
   84c42:	bf00      	nop
   84c44:	000862f9 	.word	0x000862f9

00084c48 <__sinit.part.1>:
   84c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c4c:	4607      	mov	r7, r0
   84c4e:	4835      	ldr	r0, [pc, #212]	; (84d24 <__sinit.part.1+0xdc>)
   84c50:	687d      	ldr	r5, [r7, #4]
   84c52:	2400      	movs	r4, #0
   84c54:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84c58:	2304      	movs	r3, #4
   84c5a:	2103      	movs	r1, #3
   84c5c:	63f8      	str	r0, [r7, #60]	; 0x3c
   84c5e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84c62:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84c66:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84c6a:	b083      	sub	sp, #12
   84c6c:	602c      	str	r4, [r5, #0]
   84c6e:	606c      	str	r4, [r5, #4]
   84c70:	60ac      	str	r4, [r5, #8]
   84c72:	666c      	str	r4, [r5, #100]	; 0x64
   84c74:	81ec      	strh	r4, [r5, #14]
   84c76:	612c      	str	r4, [r5, #16]
   84c78:	616c      	str	r4, [r5, #20]
   84c7a:	61ac      	str	r4, [r5, #24]
   84c7c:	81ab      	strh	r3, [r5, #12]
   84c7e:	4621      	mov	r1, r4
   84c80:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c84:	2208      	movs	r2, #8
   84c86:	f7fe ff2b 	bl	83ae0 <memset>
   84c8a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84d28 <__sinit.part.1+0xe0>
   84c8e:	68be      	ldr	r6, [r7, #8]
   84c90:	f8df a098 	ldr.w	sl, [pc, #152]	; 84d2c <__sinit.part.1+0xe4>
   84c94:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84d30 <__sinit.part.1+0xe8>
   84c98:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84d34 <__sinit.part.1+0xec>
   84c9c:	2301      	movs	r3, #1
   84c9e:	2209      	movs	r2, #9
   84ca0:	f8c5 b020 	str.w	fp, [r5, #32]
   84ca4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84ca8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84cac:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84cb0:	61ed      	str	r5, [r5, #28]
   84cb2:	4621      	mov	r1, r4
   84cb4:	81f3      	strh	r3, [r6, #14]
   84cb6:	81b2      	strh	r2, [r6, #12]
   84cb8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84cbc:	6034      	str	r4, [r6, #0]
   84cbe:	6074      	str	r4, [r6, #4]
   84cc0:	60b4      	str	r4, [r6, #8]
   84cc2:	6674      	str	r4, [r6, #100]	; 0x64
   84cc4:	6134      	str	r4, [r6, #16]
   84cc6:	6174      	str	r4, [r6, #20]
   84cc8:	61b4      	str	r4, [r6, #24]
   84cca:	2208      	movs	r2, #8
   84ccc:	9301      	str	r3, [sp, #4]
   84cce:	f7fe ff07 	bl	83ae0 <memset>
   84cd2:	68fd      	ldr	r5, [r7, #12]
   84cd4:	2012      	movs	r0, #18
   84cd6:	2202      	movs	r2, #2
   84cd8:	61f6      	str	r6, [r6, #28]
   84cda:	f8c6 b020 	str.w	fp, [r6, #32]
   84cde:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84ce2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84ce6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84cea:	4621      	mov	r1, r4
   84cec:	81a8      	strh	r0, [r5, #12]
   84cee:	81ea      	strh	r2, [r5, #14]
   84cf0:	602c      	str	r4, [r5, #0]
   84cf2:	606c      	str	r4, [r5, #4]
   84cf4:	60ac      	str	r4, [r5, #8]
   84cf6:	666c      	str	r4, [r5, #100]	; 0x64
   84cf8:	612c      	str	r4, [r5, #16]
   84cfa:	616c      	str	r4, [r5, #20]
   84cfc:	61ac      	str	r4, [r5, #24]
   84cfe:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84d02:	2208      	movs	r2, #8
   84d04:	f7fe feec 	bl	83ae0 <memset>
   84d08:	9b01      	ldr	r3, [sp, #4]
   84d0a:	61ed      	str	r5, [r5, #28]
   84d0c:	f8c5 b020 	str.w	fp, [r5, #32]
   84d10:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84d14:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84d18:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   84d1e:	b003      	add	sp, #12
   84d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d24:	00084c3d 	.word	0x00084c3d
   84d28:	0008606d 	.word	0x0008606d
   84d2c:	00086091 	.word	0x00086091
   84d30:	000860c9 	.word	0x000860c9
   84d34:	000860e9 	.word	0x000860e9

00084d38 <__sinit>:
   84d38:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d3a:	b103      	cbz	r3, 84d3e <__sinit+0x6>
   84d3c:	4770      	bx	lr
   84d3e:	f7ff bf83 	b.w	84c48 <__sinit.part.1>
   84d42:	bf00      	nop

00084d44 <__sfp_lock_acquire>:
   84d44:	4770      	bx	lr
   84d46:	bf00      	nop

00084d48 <__sfp_lock_release>:
   84d48:	4770      	bx	lr
   84d4a:	bf00      	nop

00084d4c <__libc_fini_array>:
   84d4c:	b538      	push	{r3, r4, r5, lr}
   84d4e:	4b08      	ldr	r3, [pc, #32]	; (84d70 <__libc_fini_array+0x24>)
   84d50:	4d08      	ldr	r5, [pc, #32]	; (84d74 <__libc_fini_array+0x28>)
   84d52:	1aed      	subs	r5, r5, r3
   84d54:	10ac      	asrs	r4, r5, #2
   84d56:	bf18      	it	ne
   84d58:	18ed      	addne	r5, r5, r3
   84d5a:	d005      	beq.n	84d68 <__libc_fini_array+0x1c>
   84d5c:	3c01      	subs	r4, #1
   84d5e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84d62:	4798      	blx	r3
   84d64:	2c00      	cmp	r4, #0
   84d66:	d1f9      	bne.n	84d5c <__libc_fini_array+0x10>
   84d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84d6c:	f001 beaa 	b.w	86ac4 <_fini>
   84d70:	00086ad0 	.word	0x00086ad0
   84d74:	00086ad4 	.word	0x00086ad4

00084d78 <__fputwc>:
   84d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d7c:	b082      	sub	sp, #8
   84d7e:	4607      	mov	r7, r0
   84d80:	460e      	mov	r6, r1
   84d82:	4614      	mov	r4, r2
   84d84:	f000 fb44 	bl	85410 <__locale_mb_cur_max>
   84d88:	2801      	cmp	r0, #1
   84d8a:	d040      	beq.n	84e0e <__fputwc+0x96>
   84d8c:	4638      	mov	r0, r7
   84d8e:	a901      	add	r1, sp, #4
   84d90:	4632      	mov	r2, r6
   84d92:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84d96:	f001 f9ff 	bl	86198 <_wcrtomb_r>
   84d9a:	f1b0 3fff 	cmp.w	r0, #4294967295
   84d9e:	4680      	mov	r8, r0
   84da0:	d02e      	beq.n	84e00 <__fputwc+0x88>
   84da2:	2800      	cmp	r0, #0
   84da4:	d03b      	beq.n	84e1e <__fputwc+0xa6>
   84da6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84daa:	2500      	movs	r5, #0
   84dac:	e009      	b.n	84dc2 <__fputwc+0x4a>
   84dae:	6823      	ldr	r3, [r4, #0]
   84db0:	7019      	strb	r1, [r3, #0]
   84db2:	6823      	ldr	r3, [r4, #0]
   84db4:	3301      	adds	r3, #1
   84db6:	6023      	str	r3, [r4, #0]
   84db8:	3501      	adds	r5, #1
   84dba:	45a8      	cmp	r8, r5
   84dbc:	d92f      	bls.n	84e1e <__fputwc+0xa6>
   84dbe:	ab01      	add	r3, sp, #4
   84dc0:	5d59      	ldrb	r1, [r3, r5]
   84dc2:	68a3      	ldr	r3, [r4, #8]
   84dc4:	3b01      	subs	r3, #1
   84dc6:	2b00      	cmp	r3, #0
   84dc8:	60a3      	str	r3, [r4, #8]
   84dca:	daf0      	bge.n	84dae <__fputwc+0x36>
   84dcc:	69a2      	ldr	r2, [r4, #24]
   84dce:	4293      	cmp	r3, r2
   84dd0:	db06      	blt.n	84de0 <__fputwc+0x68>
   84dd2:	6823      	ldr	r3, [r4, #0]
   84dd4:	7019      	strb	r1, [r3, #0]
   84dd6:	6823      	ldr	r3, [r4, #0]
   84dd8:	7819      	ldrb	r1, [r3, #0]
   84dda:	3301      	adds	r3, #1
   84ddc:	290a      	cmp	r1, #10
   84dde:	d1ea      	bne.n	84db6 <__fputwc+0x3e>
   84de0:	4638      	mov	r0, r7
   84de2:	4622      	mov	r2, r4
   84de4:	f001 f984 	bl	860f0 <__swbuf_r>
   84de8:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   84dec:	fab0 f080 	clz	r0, r0
   84df0:	0940      	lsrs	r0, r0, #5
   84df2:	2800      	cmp	r0, #0
   84df4:	d0e0      	beq.n	84db8 <__fputwc+0x40>
   84df6:	f04f 30ff 	mov.w	r0, #4294967295
   84dfa:	b002      	add	sp, #8
   84dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e00:	89a3      	ldrh	r3, [r4, #12]
   84e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e06:	81a3      	strh	r3, [r4, #12]
   84e08:	b002      	add	sp, #8
   84e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e0e:	1e73      	subs	r3, r6, #1
   84e10:	2bfe      	cmp	r3, #254	; 0xfe
   84e12:	d8bb      	bhi.n	84d8c <__fputwc+0x14>
   84e14:	b2f1      	uxtb	r1, r6
   84e16:	4680      	mov	r8, r0
   84e18:	f88d 1004 	strb.w	r1, [sp, #4]
   84e1c:	e7c5      	b.n	84daa <__fputwc+0x32>
   84e1e:	4630      	mov	r0, r6
   84e20:	b002      	add	sp, #8
   84e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e26:	bf00      	nop

00084e28 <_fputwc_r>:
   84e28:	8993      	ldrh	r3, [r2, #12]
   84e2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84e2e:	d10b      	bne.n	84e48 <_fputwc_r+0x20>
   84e30:	b410      	push	{r4}
   84e32:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84e34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84e38:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84e3c:	6654      	str	r4, [r2, #100]	; 0x64
   84e3e:	8193      	strh	r3, [r2, #12]
   84e40:	f85d 4b04 	ldr.w	r4, [sp], #4
   84e44:	f7ff bf98 	b.w	84d78 <__fputwc>
   84e48:	f7ff bf96 	b.w	84d78 <__fputwc>

00084e4c <_malloc_trim_r>:
   84e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e4e:	460c      	mov	r4, r1
   84e50:	4f22      	ldr	r7, [pc, #136]	; (84edc <_malloc_trim_r+0x90>)
   84e52:	4606      	mov	r6, r0
   84e54:	f000 ff04 	bl	85c60 <__malloc_lock>
   84e58:	68bb      	ldr	r3, [r7, #8]
   84e5a:	685d      	ldr	r5, [r3, #4]
   84e5c:	f025 0503 	bic.w	r5, r5, #3
   84e60:	1b29      	subs	r1, r5, r4
   84e62:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84e66:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84e6a:	f021 010f 	bic.w	r1, r1, #15
   84e6e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84e72:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84e76:	db07      	blt.n	84e88 <_malloc_trim_r+0x3c>
   84e78:	4630      	mov	r0, r6
   84e7a:	2100      	movs	r1, #0
   84e7c:	f001 f8e4 	bl	86048 <_sbrk_r>
   84e80:	68bb      	ldr	r3, [r7, #8]
   84e82:	442b      	add	r3, r5
   84e84:	4298      	cmp	r0, r3
   84e86:	d004      	beq.n	84e92 <_malloc_trim_r+0x46>
   84e88:	4630      	mov	r0, r6
   84e8a:	f000 feeb 	bl	85c64 <__malloc_unlock>
   84e8e:	2000      	movs	r0, #0
   84e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e92:	4630      	mov	r0, r6
   84e94:	4261      	negs	r1, r4
   84e96:	f001 f8d7 	bl	86048 <_sbrk_r>
   84e9a:	3001      	adds	r0, #1
   84e9c:	d00d      	beq.n	84eba <_malloc_trim_r+0x6e>
   84e9e:	4b10      	ldr	r3, [pc, #64]	; (84ee0 <_malloc_trim_r+0x94>)
   84ea0:	68ba      	ldr	r2, [r7, #8]
   84ea2:	6819      	ldr	r1, [r3, #0]
   84ea4:	1b2d      	subs	r5, r5, r4
   84ea6:	f045 0501 	orr.w	r5, r5, #1
   84eaa:	4630      	mov	r0, r6
   84eac:	1b09      	subs	r1, r1, r4
   84eae:	6055      	str	r5, [r2, #4]
   84eb0:	6019      	str	r1, [r3, #0]
   84eb2:	f000 fed7 	bl	85c64 <__malloc_unlock>
   84eb6:	2001      	movs	r0, #1
   84eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84eba:	4630      	mov	r0, r6
   84ebc:	2100      	movs	r1, #0
   84ebe:	f001 f8c3 	bl	86048 <_sbrk_r>
   84ec2:	68ba      	ldr	r2, [r7, #8]
   84ec4:	1a83      	subs	r3, r0, r2
   84ec6:	2b0f      	cmp	r3, #15
   84ec8:	ddde      	ble.n	84e88 <_malloc_trim_r+0x3c>
   84eca:	4c06      	ldr	r4, [pc, #24]	; (84ee4 <_malloc_trim_r+0x98>)
   84ecc:	4904      	ldr	r1, [pc, #16]	; (84ee0 <_malloc_trim_r+0x94>)
   84ece:	6824      	ldr	r4, [r4, #0]
   84ed0:	f043 0301 	orr.w	r3, r3, #1
   84ed4:	1b00      	subs	r0, r0, r4
   84ed6:	6053      	str	r3, [r2, #4]
   84ed8:	6008      	str	r0, [r1, #0]
   84eda:	e7d5      	b.n	84e88 <_malloc_trim_r+0x3c>
   84edc:	20070858 	.word	0x20070858
   84ee0:	20070d94 	.word	0x20070d94
   84ee4:	20070c64 	.word	0x20070c64

00084ee8 <_free_r>:
   84ee8:	2900      	cmp	r1, #0
   84eea:	d04e      	beq.n	84f8a <_free_r+0xa2>
   84eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ef0:	460c      	mov	r4, r1
   84ef2:	4680      	mov	r8, r0
   84ef4:	f000 feb4 	bl	85c60 <__malloc_lock>
   84ef8:	f854 7c04 	ldr.w	r7, [r4, #-4]
   84efc:	4962      	ldr	r1, [pc, #392]	; (85088 <_free_r+0x1a0>)
   84efe:	f1a4 0508 	sub.w	r5, r4, #8
   84f02:	f027 0201 	bic.w	r2, r7, #1
   84f06:	18ab      	adds	r3, r5, r2
   84f08:	688e      	ldr	r6, [r1, #8]
   84f0a:	6858      	ldr	r0, [r3, #4]
   84f0c:	429e      	cmp	r6, r3
   84f0e:	f020 0003 	bic.w	r0, r0, #3
   84f12:	d05a      	beq.n	84fca <_free_r+0xe2>
   84f14:	07fe      	lsls	r6, r7, #31
   84f16:	6058      	str	r0, [r3, #4]
   84f18:	d40b      	bmi.n	84f32 <_free_r+0x4a>
   84f1a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   84f1e:	f101 0e08 	add.w	lr, r1, #8
   84f22:	1bed      	subs	r5, r5, r7
   84f24:	68ac      	ldr	r4, [r5, #8]
   84f26:	443a      	add	r2, r7
   84f28:	4574      	cmp	r4, lr
   84f2a:	d067      	beq.n	84ffc <_free_r+0x114>
   84f2c:	68ef      	ldr	r7, [r5, #12]
   84f2e:	60e7      	str	r7, [r4, #12]
   84f30:	60bc      	str	r4, [r7, #8]
   84f32:	181c      	adds	r4, r3, r0
   84f34:	6864      	ldr	r4, [r4, #4]
   84f36:	07e4      	lsls	r4, r4, #31
   84f38:	d40c      	bmi.n	84f54 <_free_r+0x6c>
   84f3a:	4f54      	ldr	r7, [pc, #336]	; (8508c <_free_r+0x1a4>)
   84f3c:	689c      	ldr	r4, [r3, #8]
   84f3e:	4402      	add	r2, r0
   84f40:	42bc      	cmp	r4, r7
   84f42:	d07c      	beq.n	8503e <_free_r+0x156>
   84f44:	68d8      	ldr	r0, [r3, #12]
   84f46:	f042 0301 	orr.w	r3, r2, #1
   84f4a:	60e0      	str	r0, [r4, #12]
   84f4c:	6084      	str	r4, [r0, #8]
   84f4e:	606b      	str	r3, [r5, #4]
   84f50:	50aa      	str	r2, [r5, r2]
   84f52:	e003      	b.n	84f5c <_free_r+0x74>
   84f54:	f042 0301 	orr.w	r3, r2, #1
   84f58:	606b      	str	r3, [r5, #4]
   84f5a:	50aa      	str	r2, [r5, r2]
   84f5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84f60:	d214      	bcs.n	84f8c <_free_r+0xa4>
   84f62:	08d2      	lsrs	r2, r2, #3
   84f64:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   84f68:	2401      	movs	r4, #1
   84f6a:	6848      	ldr	r0, [r1, #4]
   84f6c:	1092      	asrs	r2, r2, #2
   84f6e:	fa04 f202 	lsl.w	r2, r4, r2
   84f72:	689c      	ldr	r4, [r3, #8]
   84f74:	4310      	orrs	r0, r2
   84f76:	60ac      	str	r4, [r5, #8]
   84f78:	60eb      	str	r3, [r5, #12]
   84f7a:	6048      	str	r0, [r1, #4]
   84f7c:	609d      	str	r5, [r3, #8]
   84f7e:	60e5      	str	r5, [r4, #12]
   84f80:	4640      	mov	r0, r8
   84f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f86:	f000 be6d 	b.w	85c64 <__malloc_unlock>
   84f8a:	4770      	bx	lr
   84f8c:	0a53      	lsrs	r3, r2, #9
   84f8e:	2b04      	cmp	r3, #4
   84f90:	d847      	bhi.n	85022 <_free_r+0x13a>
   84f92:	0993      	lsrs	r3, r2, #6
   84f94:	f103 0438 	add.w	r4, r3, #56	; 0x38
   84f98:	0060      	lsls	r0, r4, #1
   84f9a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   84f9e:	6883      	ldr	r3, [r0, #8]
   84fa0:	4939      	ldr	r1, [pc, #228]	; (85088 <_free_r+0x1a0>)
   84fa2:	4283      	cmp	r3, r0
   84fa4:	d043      	beq.n	8502e <_free_r+0x146>
   84fa6:	6859      	ldr	r1, [r3, #4]
   84fa8:	f021 0103 	bic.w	r1, r1, #3
   84fac:	4291      	cmp	r1, r2
   84fae:	d902      	bls.n	84fb6 <_free_r+0xce>
   84fb0:	689b      	ldr	r3, [r3, #8]
   84fb2:	4298      	cmp	r0, r3
   84fb4:	d1f7      	bne.n	84fa6 <_free_r+0xbe>
   84fb6:	68da      	ldr	r2, [r3, #12]
   84fb8:	60ea      	str	r2, [r5, #12]
   84fba:	60ab      	str	r3, [r5, #8]
   84fbc:	4640      	mov	r0, r8
   84fbe:	6095      	str	r5, [r2, #8]
   84fc0:	60dd      	str	r5, [r3, #12]
   84fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84fc6:	f000 be4d 	b.w	85c64 <__malloc_unlock>
   84fca:	07ff      	lsls	r7, r7, #31
   84fcc:	4402      	add	r2, r0
   84fce:	d407      	bmi.n	84fe0 <_free_r+0xf8>
   84fd0:	f854 4c08 	ldr.w	r4, [r4, #-8]
   84fd4:	1b2d      	subs	r5, r5, r4
   84fd6:	68eb      	ldr	r3, [r5, #12]
   84fd8:	68a8      	ldr	r0, [r5, #8]
   84fda:	4422      	add	r2, r4
   84fdc:	60c3      	str	r3, [r0, #12]
   84fde:	6098      	str	r0, [r3, #8]
   84fe0:	4b2b      	ldr	r3, [pc, #172]	; (85090 <_free_r+0x1a8>)
   84fe2:	f042 0001 	orr.w	r0, r2, #1
   84fe6:	681b      	ldr	r3, [r3, #0]
   84fe8:	6068      	str	r0, [r5, #4]
   84fea:	429a      	cmp	r2, r3
   84fec:	608d      	str	r5, [r1, #8]
   84fee:	d3c7      	bcc.n	84f80 <_free_r+0x98>
   84ff0:	4b28      	ldr	r3, [pc, #160]	; (85094 <_free_r+0x1ac>)
   84ff2:	4640      	mov	r0, r8
   84ff4:	6819      	ldr	r1, [r3, #0]
   84ff6:	f7ff ff29 	bl	84e4c <_malloc_trim_r>
   84ffa:	e7c1      	b.n	84f80 <_free_r+0x98>
   84ffc:	1819      	adds	r1, r3, r0
   84ffe:	6849      	ldr	r1, [r1, #4]
   85000:	07c9      	lsls	r1, r1, #31
   85002:	d409      	bmi.n	85018 <_free_r+0x130>
   85004:	68d9      	ldr	r1, [r3, #12]
   85006:	4402      	add	r2, r0
   85008:	689b      	ldr	r3, [r3, #8]
   8500a:	f042 0001 	orr.w	r0, r2, #1
   8500e:	60d9      	str	r1, [r3, #12]
   85010:	608b      	str	r3, [r1, #8]
   85012:	6068      	str	r0, [r5, #4]
   85014:	50aa      	str	r2, [r5, r2]
   85016:	e7b3      	b.n	84f80 <_free_r+0x98>
   85018:	f042 0301 	orr.w	r3, r2, #1
   8501c:	606b      	str	r3, [r5, #4]
   8501e:	50aa      	str	r2, [r5, r2]
   85020:	e7ae      	b.n	84f80 <_free_r+0x98>
   85022:	2b14      	cmp	r3, #20
   85024:	d814      	bhi.n	85050 <_free_r+0x168>
   85026:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8502a:	0060      	lsls	r0, r4, #1
   8502c:	e7b5      	b.n	84f9a <_free_r+0xb2>
   8502e:	684a      	ldr	r2, [r1, #4]
   85030:	10a4      	asrs	r4, r4, #2
   85032:	2001      	movs	r0, #1
   85034:	40a0      	lsls	r0, r4
   85036:	4302      	orrs	r2, r0
   85038:	604a      	str	r2, [r1, #4]
   8503a:	461a      	mov	r2, r3
   8503c:	e7bc      	b.n	84fb8 <_free_r+0xd0>
   8503e:	f042 0301 	orr.w	r3, r2, #1
   85042:	614d      	str	r5, [r1, #20]
   85044:	610d      	str	r5, [r1, #16]
   85046:	60ec      	str	r4, [r5, #12]
   85048:	60ac      	str	r4, [r5, #8]
   8504a:	606b      	str	r3, [r5, #4]
   8504c:	50aa      	str	r2, [r5, r2]
   8504e:	e797      	b.n	84f80 <_free_r+0x98>
   85050:	2b54      	cmp	r3, #84	; 0x54
   85052:	d804      	bhi.n	8505e <_free_r+0x176>
   85054:	0b13      	lsrs	r3, r2, #12
   85056:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8505a:	0060      	lsls	r0, r4, #1
   8505c:	e79d      	b.n	84f9a <_free_r+0xb2>
   8505e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85062:	d804      	bhi.n	8506e <_free_r+0x186>
   85064:	0bd3      	lsrs	r3, r2, #15
   85066:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8506a:	0060      	lsls	r0, r4, #1
   8506c:	e795      	b.n	84f9a <_free_r+0xb2>
   8506e:	f240 5054 	movw	r0, #1364	; 0x554
   85072:	4283      	cmp	r3, r0
   85074:	d804      	bhi.n	85080 <_free_r+0x198>
   85076:	0c93      	lsrs	r3, r2, #18
   85078:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8507c:	0060      	lsls	r0, r4, #1
   8507e:	e78c      	b.n	84f9a <_free_r+0xb2>
   85080:	20fc      	movs	r0, #252	; 0xfc
   85082:	247e      	movs	r4, #126	; 0x7e
   85084:	e789      	b.n	84f9a <_free_r+0xb2>
   85086:	bf00      	nop
   85088:	20070858 	.word	0x20070858
   8508c:	20070860 	.word	0x20070860
   85090:	20070c60 	.word	0x20070c60
   85094:	20070d90 	.word	0x20070d90

00085098 <__sfvwrite_r>:
   85098:	6893      	ldr	r3, [r2, #8]
   8509a:	2b00      	cmp	r3, #0
   8509c:	f000 80b1 	beq.w	85202 <__sfvwrite_r+0x16a>
   850a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850a4:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   850a8:	b083      	sub	sp, #12
   850aa:	f01e 0f08 	tst.w	lr, #8
   850ae:	460c      	mov	r4, r1
   850b0:	4681      	mov	r9, r0
   850b2:	4616      	mov	r6, r2
   850b4:	d028      	beq.n	85108 <__sfvwrite_r+0x70>
   850b6:	690b      	ldr	r3, [r1, #16]
   850b8:	b333      	cbz	r3, 85108 <__sfvwrite_r+0x70>
   850ba:	f00e 0802 	and.w	r8, lr, #2
   850be:	fa1f f088 	uxth.w	r0, r8
   850c2:	6835      	ldr	r5, [r6, #0]
   850c4:	b380      	cbz	r0, 85128 <__sfvwrite_r+0x90>
   850c6:	f04f 0b00 	mov.w	fp, #0
   850ca:	46d8      	mov	r8, fp
   850cc:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 853b4 <__sfvwrite_r+0x31c>
   850d0:	f1b8 0f00 	cmp.w	r8, #0
   850d4:	f000 808f 	beq.w	851f6 <__sfvwrite_r+0x15e>
   850d8:	45d0      	cmp	r8, sl
   850da:	4643      	mov	r3, r8
   850dc:	4648      	mov	r0, r9
   850de:	bf28      	it	cs
   850e0:	4653      	movcs	r3, sl
   850e2:	69e1      	ldr	r1, [r4, #28]
   850e4:	465a      	mov	r2, fp
   850e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   850e8:	47b8      	blx	r7
   850ea:	2800      	cmp	r0, #0
   850ec:	f340 80a8 	ble.w	85240 <__sfvwrite_r+0x1a8>
   850f0:	68b3      	ldr	r3, [r6, #8]
   850f2:	4483      	add	fp, r0
   850f4:	1a1b      	subs	r3, r3, r0
   850f6:	ebc0 0808 	rsb	r8, r0, r8
   850fa:	60b3      	str	r3, [r6, #8]
   850fc:	2b00      	cmp	r3, #0
   850fe:	d1e7      	bne.n	850d0 <__sfvwrite_r+0x38>
   85100:	2000      	movs	r0, #0
   85102:	b003      	add	sp, #12
   85104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85108:	4648      	mov	r0, r9
   8510a:	4621      	mov	r1, r4
   8510c:	f7ff fc6a 	bl	849e4 <__swsetup_r>
   85110:	2800      	cmp	r0, #0
   85112:	f040 8146 	bne.w	853a2 <__sfvwrite_r+0x30a>
   85116:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   8511a:	6835      	ldr	r5, [r6, #0]
   8511c:	f00e 0802 	and.w	r8, lr, #2
   85120:	fa1f f088 	uxth.w	r0, r8
   85124:	2800      	cmp	r0, #0
   85126:	d1ce      	bne.n	850c6 <__sfvwrite_r+0x2e>
   85128:	f01e 0b01 	ands.w	fp, lr, #1
   8512c:	f040 8091 	bne.w	85252 <__sfvwrite_r+0x1ba>
   85130:	46d8      	mov	r8, fp
   85132:	f1b8 0f00 	cmp.w	r8, #0
   85136:	d058      	beq.n	851ea <__sfvwrite_r+0x152>
   85138:	f41e 7f00 	tst.w	lr, #512	; 0x200
   8513c:	68a7      	ldr	r7, [r4, #8]
   8513e:	d062      	beq.n	85206 <__sfvwrite_r+0x16e>
   85140:	45b8      	cmp	r8, r7
   85142:	46ba      	mov	sl, r7
   85144:	f0c0 80c2 	bcc.w	852cc <__sfvwrite_r+0x234>
   85148:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   8514c:	f000 80c0 	beq.w	852d0 <__sfvwrite_r+0x238>
   85150:	6967      	ldr	r7, [r4, #20]
   85152:	6921      	ldr	r1, [r4, #16]
   85154:	6823      	ldr	r3, [r4, #0]
   85156:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   8515a:	1a5b      	subs	r3, r3, r1
   8515c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   85160:	1c58      	adds	r0, r3, #1
   85162:	107f      	asrs	r7, r7, #1
   85164:	4440      	add	r0, r8
   85166:	4287      	cmp	r7, r0
   85168:	463a      	mov	r2, r7
   8516a:	bf3c      	itt	cc
   8516c:	4607      	movcc	r7, r0
   8516e:	463a      	movcc	r2, r7
   85170:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   85174:	9300      	str	r3, [sp, #0]
   85176:	f000 80fb 	beq.w	85370 <__sfvwrite_r+0x2d8>
   8517a:	4611      	mov	r1, r2
   8517c:	4648      	mov	r0, r9
   8517e:	f000 f9c5 	bl	8550c <_malloc_r>
   85182:	9b00      	ldr	r3, [sp, #0]
   85184:	4682      	mov	sl, r0
   85186:	2800      	cmp	r0, #0
   85188:	f000 810e 	beq.w	853a8 <__sfvwrite_r+0x310>
   8518c:	461a      	mov	r2, r3
   8518e:	6921      	ldr	r1, [r4, #16]
   85190:	9300      	str	r3, [sp, #0]
   85192:	f000 fc8b 	bl	85aac <memcpy>
   85196:	89a2      	ldrh	r2, [r4, #12]
   85198:	9b00      	ldr	r3, [sp, #0]
   8519a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8519e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   851a2:	81a2      	strh	r2, [r4, #12]
   851a4:	eb0a 0003 	add.w	r0, sl, r3
   851a8:	f8c4 a010 	str.w	sl, [r4, #16]
   851ac:	1afb      	subs	r3, r7, r3
   851ae:	6167      	str	r7, [r4, #20]
   851b0:	46c2      	mov	sl, r8
   851b2:	4647      	mov	r7, r8
   851b4:	6020      	str	r0, [r4, #0]
   851b6:	60a3      	str	r3, [r4, #8]
   851b8:	4652      	mov	r2, sl
   851ba:	4659      	mov	r1, fp
   851bc:	f000 fcec 	bl	85b98 <memmove>
   851c0:	68a0      	ldr	r0, [r4, #8]
   851c2:	6822      	ldr	r2, [r4, #0]
   851c4:	1bc0      	subs	r0, r0, r7
   851c6:	60a0      	str	r0, [r4, #8]
   851c8:	4640      	mov	r0, r8
   851ca:	eb02 030a 	add.w	r3, r2, sl
   851ce:	6023      	str	r3, [r4, #0]
   851d0:	68b3      	ldr	r3, [r6, #8]
   851d2:	4483      	add	fp, r0
   851d4:	1a1b      	subs	r3, r3, r0
   851d6:	ebc0 0808 	rsb	r8, r0, r8
   851da:	60b3      	str	r3, [r6, #8]
   851dc:	2b00      	cmp	r3, #0
   851de:	d08f      	beq.n	85100 <__sfvwrite_r+0x68>
   851e0:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   851e4:	f1b8 0f00 	cmp.w	r8, #0
   851e8:	d1a6      	bne.n	85138 <__sfvwrite_r+0xa0>
   851ea:	f8d5 b000 	ldr.w	fp, [r5]
   851ee:	f8d5 8004 	ldr.w	r8, [r5, #4]
   851f2:	3508      	adds	r5, #8
   851f4:	e79d      	b.n	85132 <__sfvwrite_r+0x9a>
   851f6:	f8d5 b000 	ldr.w	fp, [r5]
   851fa:	f8d5 8004 	ldr.w	r8, [r5, #4]
   851fe:	3508      	adds	r5, #8
   85200:	e766      	b.n	850d0 <__sfvwrite_r+0x38>
   85202:	2000      	movs	r0, #0
   85204:	4770      	bx	lr
   85206:	6820      	ldr	r0, [r4, #0]
   85208:	6923      	ldr	r3, [r4, #16]
   8520a:	4298      	cmp	r0, r3
   8520c:	d803      	bhi.n	85216 <__sfvwrite_r+0x17e>
   8520e:	6962      	ldr	r2, [r4, #20]
   85210:	4590      	cmp	r8, r2
   85212:	f080 8085 	bcs.w	85320 <__sfvwrite_r+0x288>
   85216:	4547      	cmp	r7, r8
   85218:	bf28      	it	cs
   8521a:	4647      	movcs	r7, r8
   8521c:	4659      	mov	r1, fp
   8521e:	463a      	mov	r2, r7
   85220:	f000 fcba 	bl	85b98 <memmove>
   85224:	68a3      	ldr	r3, [r4, #8]
   85226:	6822      	ldr	r2, [r4, #0]
   85228:	1bdb      	subs	r3, r3, r7
   8522a:	443a      	add	r2, r7
   8522c:	60a3      	str	r3, [r4, #8]
   8522e:	6022      	str	r2, [r4, #0]
   85230:	2b00      	cmp	r3, #0
   85232:	d149      	bne.n	852c8 <__sfvwrite_r+0x230>
   85234:	4648      	mov	r0, r9
   85236:	4621      	mov	r1, r4
   85238:	f7ff fcea 	bl	84c10 <_fflush_r>
   8523c:	2800      	cmp	r0, #0
   8523e:	d043      	beq.n	852c8 <__sfvwrite_r+0x230>
   85240:	89a3      	ldrh	r3, [r4, #12]
   85242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85246:	f04f 30ff 	mov.w	r0, #4294967295
   8524a:	81a3      	strh	r3, [r4, #12]
   8524c:	b003      	add	sp, #12
   8524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85252:	4680      	mov	r8, r0
   85254:	4683      	mov	fp, r0
   85256:	4682      	mov	sl, r0
   85258:	9000      	str	r0, [sp, #0]
   8525a:	f1ba 0f00 	cmp.w	sl, #0
   8525e:	d02b      	beq.n	852b8 <__sfvwrite_r+0x220>
   85260:	9b00      	ldr	r3, [sp, #0]
   85262:	2b00      	cmp	r3, #0
   85264:	d04f      	beq.n	85306 <__sfvwrite_r+0x26e>
   85266:	45d0      	cmp	r8, sl
   85268:	4643      	mov	r3, r8
   8526a:	bf28      	it	cs
   8526c:	4653      	movcs	r3, sl
   8526e:	6820      	ldr	r0, [r4, #0]
   85270:	6921      	ldr	r1, [r4, #16]
   85272:	461f      	mov	r7, r3
   85274:	4288      	cmp	r0, r1
   85276:	f8d4 e008 	ldr.w	lr, [r4, #8]
   8527a:	6962      	ldr	r2, [r4, #20]
   8527c:	d903      	bls.n	85286 <__sfvwrite_r+0x1ee>
   8527e:	eb0e 0c02 	add.w	ip, lr, r2
   85282:	4563      	cmp	r3, ip
   85284:	dc5e      	bgt.n	85344 <__sfvwrite_r+0x2ac>
   85286:	4293      	cmp	r3, r2
   85288:	db24      	blt.n	852d4 <__sfvwrite_r+0x23c>
   8528a:	4613      	mov	r3, r2
   8528c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8528e:	4648      	mov	r0, r9
   85290:	69e1      	ldr	r1, [r4, #28]
   85292:	465a      	mov	r2, fp
   85294:	47b8      	blx	r7
   85296:	1e07      	subs	r7, r0, #0
   85298:	ddd2      	ble.n	85240 <__sfvwrite_r+0x1a8>
   8529a:	ebb8 0807 	subs.w	r8, r8, r7
   8529e:	d029      	beq.n	852f4 <__sfvwrite_r+0x25c>
   852a0:	68b3      	ldr	r3, [r6, #8]
   852a2:	44bb      	add	fp, r7
   852a4:	1bdb      	subs	r3, r3, r7
   852a6:	ebc7 0a0a 	rsb	sl, r7, sl
   852aa:	60b3      	str	r3, [r6, #8]
   852ac:	2b00      	cmp	r3, #0
   852ae:	f43f af27 	beq.w	85100 <__sfvwrite_r+0x68>
   852b2:	f1ba 0f00 	cmp.w	sl, #0
   852b6:	d1d3      	bne.n	85260 <__sfvwrite_r+0x1c8>
   852b8:	2300      	movs	r3, #0
   852ba:	f8d5 b000 	ldr.w	fp, [r5]
   852be:	f8d5 a004 	ldr.w	sl, [r5, #4]
   852c2:	9300      	str	r3, [sp, #0]
   852c4:	3508      	adds	r5, #8
   852c6:	e7c8      	b.n	8525a <__sfvwrite_r+0x1c2>
   852c8:	4638      	mov	r0, r7
   852ca:	e781      	b.n	851d0 <__sfvwrite_r+0x138>
   852cc:	4647      	mov	r7, r8
   852ce:	46c2      	mov	sl, r8
   852d0:	6820      	ldr	r0, [r4, #0]
   852d2:	e771      	b.n	851b8 <__sfvwrite_r+0x120>
   852d4:	461a      	mov	r2, r3
   852d6:	4659      	mov	r1, fp
   852d8:	9301      	str	r3, [sp, #4]
   852da:	f000 fc5d 	bl	85b98 <memmove>
   852de:	68a2      	ldr	r2, [r4, #8]
   852e0:	6821      	ldr	r1, [r4, #0]
   852e2:	9b01      	ldr	r3, [sp, #4]
   852e4:	ebb8 0807 	subs.w	r8, r8, r7
   852e8:	eba2 0203 	sub.w	r2, r2, r3
   852ec:	440b      	add	r3, r1
   852ee:	60a2      	str	r2, [r4, #8]
   852f0:	6023      	str	r3, [r4, #0]
   852f2:	d1d5      	bne.n	852a0 <__sfvwrite_r+0x208>
   852f4:	4648      	mov	r0, r9
   852f6:	4621      	mov	r1, r4
   852f8:	f7ff fc8a 	bl	84c10 <_fflush_r>
   852fc:	2800      	cmp	r0, #0
   852fe:	d19f      	bne.n	85240 <__sfvwrite_r+0x1a8>
   85300:	f8cd 8000 	str.w	r8, [sp]
   85304:	e7cc      	b.n	852a0 <__sfvwrite_r+0x208>
   85306:	4658      	mov	r0, fp
   85308:	210a      	movs	r1, #10
   8530a:	4652      	mov	r2, sl
   8530c:	f000 fb84 	bl	85a18 <memchr>
   85310:	2800      	cmp	r0, #0
   85312:	d041      	beq.n	85398 <__sfvwrite_r+0x300>
   85314:	3001      	adds	r0, #1
   85316:	2301      	movs	r3, #1
   85318:	ebcb 0800 	rsb	r8, fp, r0
   8531c:	9300      	str	r3, [sp, #0]
   8531e:	e7a2      	b.n	85266 <__sfvwrite_r+0x1ce>
   85320:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85324:	4543      	cmp	r3, r8
   85326:	bf28      	it	cs
   85328:	4643      	movcs	r3, r8
   8532a:	fb93 f3f2 	sdiv	r3, r3, r2
   8532e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85330:	fb03 f302 	mul.w	r3, r3, r2
   85334:	4648      	mov	r0, r9
   85336:	69e1      	ldr	r1, [r4, #28]
   85338:	465a      	mov	r2, fp
   8533a:	47b8      	blx	r7
   8533c:	2800      	cmp	r0, #0
   8533e:	f73f af47 	bgt.w	851d0 <__sfvwrite_r+0x138>
   85342:	e77d      	b.n	85240 <__sfvwrite_r+0x1a8>
   85344:	4662      	mov	r2, ip
   85346:	4659      	mov	r1, fp
   85348:	f8cd c004 	str.w	ip, [sp, #4]
   8534c:	f000 fc24 	bl	85b98 <memmove>
   85350:	6823      	ldr	r3, [r4, #0]
   85352:	f8dd c004 	ldr.w	ip, [sp, #4]
   85356:	4648      	mov	r0, r9
   85358:	4463      	add	r3, ip
   8535a:	6023      	str	r3, [r4, #0]
   8535c:	4621      	mov	r1, r4
   8535e:	f7ff fc57 	bl	84c10 <_fflush_r>
   85362:	f8dd c004 	ldr.w	ip, [sp, #4]
   85366:	2800      	cmp	r0, #0
   85368:	f47f af6a 	bne.w	85240 <__sfvwrite_r+0x1a8>
   8536c:	4667      	mov	r7, ip
   8536e:	e794      	b.n	8529a <__sfvwrite_r+0x202>
   85370:	4648      	mov	r0, r9
   85372:	f000 fc79 	bl	85c68 <_realloc_r>
   85376:	9b00      	ldr	r3, [sp, #0]
   85378:	4682      	mov	sl, r0
   8537a:	2800      	cmp	r0, #0
   8537c:	f47f af12 	bne.w	851a4 <__sfvwrite_r+0x10c>
   85380:	4648      	mov	r0, r9
   85382:	6921      	ldr	r1, [r4, #16]
   85384:	f7ff fdb0 	bl	84ee8 <_free_r>
   85388:	89a3      	ldrh	r3, [r4, #12]
   8538a:	220c      	movs	r2, #12
   8538c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85390:	b29b      	uxth	r3, r3
   85392:	f8c9 2000 	str.w	r2, [r9]
   85396:	e754      	b.n	85242 <__sfvwrite_r+0x1aa>
   85398:	2301      	movs	r3, #1
   8539a:	f10a 0801 	add.w	r8, sl, #1
   8539e:	9300      	str	r3, [sp, #0]
   853a0:	e761      	b.n	85266 <__sfvwrite_r+0x1ce>
   853a2:	f04f 30ff 	mov.w	r0, #4294967295
   853a6:	e6ac      	b.n	85102 <__sfvwrite_r+0x6a>
   853a8:	230c      	movs	r3, #12
   853aa:	f8c9 3000 	str.w	r3, [r9]
   853ae:	89a3      	ldrh	r3, [r4, #12]
   853b0:	e747      	b.n	85242 <__sfvwrite_r+0x1aa>
   853b2:	bf00      	nop
   853b4:	7ffffc00 	.word	0x7ffffc00

000853b8 <_fwalk_reent>:
   853b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   853bc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   853c0:	d01e      	beq.n	85400 <_fwalk_reent+0x48>
   853c2:	4688      	mov	r8, r1
   853c4:	4607      	mov	r7, r0
   853c6:	f04f 0900 	mov.w	r9, #0
   853ca:	6875      	ldr	r5, [r6, #4]
   853cc:	68b4      	ldr	r4, [r6, #8]
   853ce:	3d01      	subs	r5, #1
   853d0:	d410      	bmi.n	853f4 <_fwalk_reent+0x3c>
   853d2:	89a3      	ldrh	r3, [r4, #12]
   853d4:	3d01      	subs	r5, #1
   853d6:	2b01      	cmp	r3, #1
   853d8:	d908      	bls.n	853ec <_fwalk_reent+0x34>
   853da:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   853de:	3301      	adds	r3, #1
   853e0:	d004      	beq.n	853ec <_fwalk_reent+0x34>
   853e2:	4638      	mov	r0, r7
   853e4:	4621      	mov	r1, r4
   853e6:	47c0      	blx	r8
   853e8:	ea49 0900 	orr.w	r9, r9, r0
   853ec:	1c6b      	adds	r3, r5, #1
   853ee:	f104 0468 	add.w	r4, r4, #104	; 0x68
   853f2:	d1ee      	bne.n	853d2 <_fwalk_reent+0x1a>
   853f4:	6836      	ldr	r6, [r6, #0]
   853f6:	2e00      	cmp	r6, #0
   853f8:	d1e7      	bne.n	853ca <_fwalk_reent+0x12>
   853fa:	4648      	mov	r0, r9
   853fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85400:	46b1      	mov	r9, r6
   85402:	4648      	mov	r0, r9
   85404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085408 <__locale_charset>:
   85408:	4800      	ldr	r0, [pc, #0]	; (8540c <__locale_charset+0x4>)
   8540a:	4770      	bx	lr
   8540c:	20070834 	.word	0x20070834

00085410 <__locale_mb_cur_max>:
   85410:	4b01      	ldr	r3, [pc, #4]	; (85418 <__locale_mb_cur_max+0x8>)
   85412:	6818      	ldr	r0, [r3, #0]
   85414:	4770      	bx	lr
   85416:	bf00      	nop
   85418:	20070854 	.word	0x20070854

0008541c <__smakebuf_r>:
   8541c:	898b      	ldrh	r3, [r1, #12]
   8541e:	b29a      	uxth	r2, r3
   85420:	f012 0f02 	tst.w	r2, #2
   85424:	d13c      	bne.n	854a0 <__smakebuf_r+0x84>
   85426:	b5f0      	push	{r4, r5, r6, r7, lr}
   85428:	460c      	mov	r4, r1
   8542a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8542e:	b091      	sub	sp, #68	; 0x44
   85430:	2900      	cmp	r1, #0
   85432:	4605      	mov	r5, r0
   85434:	db19      	blt.n	8546a <__smakebuf_r+0x4e>
   85436:	aa01      	add	r2, sp, #4
   85438:	f000 ffa0 	bl	8637c <_fstat_r>
   8543c:	2800      	cmp	r0, #0
   8543e:	db12      	blt.n	85466 <__smakebuf_r+0x4a>
   85440:	9b02      	ldr	r3, [sp, #8]
   85442:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   85446:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   8544a:	fab7 f787 	clz	r7, r7
   8544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   85452:	ea4f 1757 	mov.w	r7, r7, lsr #5
   85456:	d02a      	beq.n	854ae <__smakebuf_r+0x92>
   85458:	89a3      	ldrh	r3, [r4, #12]
   8545a:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8545e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85462:	81a3      	strh	r3, [r4, #12]
   85464:	e00b      	b.n	8547e <__smakebuf_r+0x62>
   85466:	89a3      	ldrh	r3, [r4, #12]
   85468:	b29a      	uxth	r2, r3
   8546a:	f012 0f80 	tst.w	r2, #128	; 0x80
   8546e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85472:	81a3      	strh	r3, [r4, #12]
   85474:	bf0c      	ite	eq
   85476:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   8547a:	2640      	movne	r6, #64	; 0x40
   8547c:	2700      	movs	r7, #0
   8547e:	4628      	mov	r0, r5
   85480:	4631      	mov	r1, r6
   85482:	f000 f843 	bl	8550c <_malloc_r>
   85486:	89a3      	ldrh	r3, [r4, #12]
   85488:	b340      	cbz	r0, 854dc <__smakebuf_r+0xc0>
   8548a:	4a1a      	ldr	r2, [pc, #104]	; (854f4 <__smakebuf_r+0xd8>)
   8548c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85490:	63ea      	str	r2, [r5, #60]	; 0x3c
   85492:	81a3      	strh	r3, [r4, #12]
   85494:	6020      	str	r0, [r4, #0]
   85496:	6120      	str	r0, [r4, #16]
   85498:	6166      	str	r6, [r4, #20]
   8549a:	b99f      	cbnz	r7, 854c4 <__smakebuf_r+0xa8>
   8549c:	b011      	add	sp, #68	; 0x44
   8549e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   854a0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   854a4:	2201      	movs	r2, #1
   854a6:	600b      	str	r3, [r1, #0]
   854a8:	610b      	str	r3, [r1, #16]
   854aa:	614a      	str	r2, [r1, #20]
   854ac:	4770      	bx	lr
   854ae:	4b12      	ldr	r3, [pc, #72]	; (854f8 <__smakebuf_r+0xdc>)
   854b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   854b2:	429a      	cmp	r2, r3
   854b4:	d1d0      	bne.n	85458 <__smakebuf_r+0x3c>
   854b6:	89a3      	ldrh	r3, [r4, #12]
   854b8:	f44f 6680 	mov.w	r6, #1024	; 0x400
   854bc:	4333      	orrs	r3, r6
   854be:	81a3      	strh	r3, [r4, #12]
   854c0:	64e6      	str	r6, [r4, #76]	; 0x4c
   854c2:	e7dc      	b.n	8547e <__smakebuf_r+0x62>
   854c4:	4628      	mov	r0, r5
   854c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   854ca:	f000 ff6b 	bl	863a4 <_isatty_r>
   854ce:	2800      	cmp	r0, #0
   854d0:	d0e4      	beq.n	8549c <__smakebuf_r+0x80>
   854d2:	89a3      	ldrh	r3, [r4, #12]
   854d4:	f043 0301 	orr.w	r3, r3, #1
   854d8:	81a3      	strh	r3, [r4, #12]
   854da:	e7df      	b.n	8549c <__smakebuf_r+0x80>
   854dc:	059a      	lsls	r2, r3, #22
   854de:	d4dd      	bmi.n	8549c <__smakebuf_r+0x80>
   854e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   854e4:	f043 0302 	orr.w	r3, r3, #2
   854e8:	2101      	movs	r1, #1
   854ea:	81a3      	strh	r3, [r4, #12]
   854ec:	6022      	str	r2, [r4, #0]
   854ee:	6122      	str	r2, [r4, #16]
   854f0:	6161      	str	r1, [r4, #20]
   854f2:	e7d3      	b.n	8549c <__smakebuf_r+0x80>
   854f4:	00084c3d 	.word	0x00084c3d
   854f8:	000860c9 	.word	0x000860c9

000854fc <malloc>:
   854fc:	4b02      	ldr	r3, [pc, #8]	; (85508 <malloc+0xc>)
   854fe:	4601      	mov	r1, r0
   85500:	6818      	ldr	r0, [r3, #0]
   85502:	f000 b803 	b.w	8550c <_malloc_r>
   85506:	bf00      	nop
   85508:	20070830 	.word	0x20070830

0008550c <_malloc_r>:
   8550c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85510:	f101 050b 	add.w	r5, r1, #11
   85514:	2d16      	cmp	r5, #22
   85516:	b083      	sub	sp, #12
   85518:	4606      	mov	r6, r0
   8551a:	d927      	bls.n	8556c <_malloc_r+0x60>
   8551c:	f035 0507 	bics.w	r5, r5, #7
   85520:	f100 80b6 	bmi.w	85690 <_malloc_r+0x184>
   85524:	42a9      	cmp	r1, r5
   85526:	f200 80b3 	bhi.w	85690 <_malloc_r+0x184>
   8552a:	f000 fb99 	bl	85c60 <__malloc_lock>
   8552e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85532:	d222      	bcs.n	8557a <_malloc_r+0x6e>
   85534:	4fbc      	ldr	r7, [pc, #752]	; (85828 <_malloc_r+0x31c>)
   85536:	08e8      	lsrs	r0, r5, #3
   85538:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   8553c:	68dc      	ldr	r4, [r3, #12]
   8553e:	429c      	cmp	r4, r3
   85540:	f000 81bc 	beq.w	858bc <_malloc_r+0x3b0>
   85544:	6863      	ldr	r3, [r4, #4]
   85546:	68e1      	ldr	r1, [r4, #12]
   85548:	f023 0303 	bic.w	r3, r3, #3
   8554c:	4423      	add	r3, r4
   8554e:	685a      	ldr	r2, [r3, #4]
   85550:	68a5      	ldr	r5, [r4, #8]
   85552:	f042 0201 	orr.w	r2, r2, #1
   85556:	60e9      	str	r1, [r5, #12]
   85558:	4630      	mov	r0, r6
   8555a:	608d      	str	r5, [r1, #8]
   8555c:	605a      	str	r2, [r3, #4]
   8555e:	f000 fb81 	bl	85c64 <__malloc_unlock>
   85562:	3408      	adds	r4, #8
   85564:	4620      	mov	r0, r4
   85566:	b003      	add	sp, #12
   85568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8556c:	2910      	cmp	r1, #16
   8556e:	f200 808f 	bhi.w	85690 <_malloc_r+0x184>
   85572:	f000 fb75 	bl	85c60 <__malloc_lock>
   85576:	2510      	movs	r5, #16
   85578:	e7dc      	b.n	85534 <_malloc_r+0x28>
   8557a:	0a68      	lsrs	r0, r5, #9
   8557c:	f000 808f 	beq.w	8569e <_malloc_r+0x192>
   85580:	2804      	cmp	r0, #4
   85582:	f200 8147 	bhi.w	85814 <_malloc_r+0x308>
   85586:	09a8      	lsrs	r0, r5, #6
   85588:	3038      	adds	r0, #56	; 0x38
   8558a:	0041      	lsls	r1, r0, #1
   8558c:	4fa6      	ldr	r7, [pc, #664]	; (85828 <_malloc_r+0x31c>)
   8558e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85592:	68cc      	ldr	r4, [r1, #12]
   85594:	42a1      	cmp	r1, r4
   85596:	d106      	bne.n	855a6 <_malloc_r+0x9a>
   85598:	e00c      	b.n	855b4 <_malloc_r+0xa8>
   8559a:	2a00      	cmp	r2, #0
   8559c:	f280 8082 	bge.w	856a4 <_malloc_r+0x198>
   855a0:	68e4      	ldr	r4, [r4, #12]
   855a2:	42a1      	cmp	r1, r4
   855a4:	d006      	beq.n	855b4 <_malloc_r+0xa8>
   855a6:	6863      	ldr	r3, [r4, #4]
   855a8:	f023 0303 	bic.w	r3, r3, #3
   855ac:	1b5a      	subs	r2, r3, r5
   855ae:	2a0f      	cmp	r2, #15
   855b0:	ddf3      	ble.n	8559a <_malloc_r+0x8e>
   855b2:	3801      	subs	r0, #1
   855b4:	3001      	adds	r0, #1
   855b6:	499c      	ldr	r1, [pc, #624]	; (85828 <_malloc_r+0x31c>)
   855b8:	693c      	ldr	r4, [r7, #16]
   855ba:	f101 0e08 	add.w	lr, r1, #8
   855be:	4574      	cmp	r4, lr
   855c0:	f000 8171 	beq.w	858a6 <_malloc_r+0x39a>
   855c4:	6863      	ldr	r3, [r4, #4]
   855c6:	f023 0303 	bic.w	r3, r3, #3
   855ca:	1b5a      	subs	r2, r3, r5
   855cc:	2a0f      	cmp	r2, #15
   855ce:	f300 8157 	bgt.w	85880 <_malloc_r+0x374>
   855d2:	2a00      	cmp	r2, #0
   855d4:	f8c1 e014 	str.w	lr, [r1, #20]
   855d8:	f8c1 e010 	str.w	lr, [r1, #16]
   855dc:	da66      	bge.n	856ac <_malloc_r+0x1a0>
   855de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   855e2:	f080 812d 	bcs.w	85840 <_malloc_r+0x334>
   855e6:	08db      	lsrs	r3, r3, #3
   855e8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   855ec:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   855f0:	684a      	ldr	r2, [r1, #4]
   855f2:	2301      	movs	r3, #1
   855f4:	fa03 f30c 	lsl.w	r3, r3, ip
   855f8:	f8d8 c008 	ldr.w	ip, [r8, #8]
   855fc:	4313      	orrs	r3, r2
   855fe:	f8c4 c008 	str.w	ip, [r4, #8]
   85602:	f8c4 800c 	str.w	r8, [r4, #12]
   85606:	604b      	str	r3, [r1, #4]
   85608:	f8c8 4008 	str.w	r4, [r8, #8]
   8560c:	f8cc 400c 	str.w	r4, [ip, #12]
   85610:	1082      	asrs	r2, r0, #2
   85612:	2401      	movs	r4, #1
   85614:	4094      	lsls	r4, r2
   85616:	429c      	cmp	r4, r3
   85618:	d855      	bhi.n	856c6 <_malloc_r+0x1ba>
   8561a:	4223      	tst	r3, r4
   8561c:	d106      	bne.n	8562c <_malloc_r+0x120>
   8561e:	f020 0003 	bic.w	r0, r0, #3
   85622:	0064      	lsls	r4, r4, #1
   85624:	4223      	tst	r3, r4
   85626:	f100 0004 	add.w	r0, r0, #4
   8562a:	d0fa      	beq.n	85622 <_malloc_r+0x116>
   8562c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   85630:	46c4      	mov	ip, r8
   85632:	4681      	mov	r9, r0
   85634:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85638:	459c      	cmp	ip, r3
   8563a:	d107      	bne.n	8564c <_malloc_r+0x140>
   8563c:	e135      	b.n	858aa <_malloc_r+0x39e>
   8563e:	2900      	cmp	r1, #0
   85640:	f280 8145 	bge.w	858ce <_malloc_r+0x3c2>
   85644:	68db      	ldr	r3, [r3, #12]
   85646:	459c      	cmp	ip, r3
   85648:	f000 812f 	beq.w	858aa <_malloc_r+0x39e>
   8564c:	685a      	ldr	r2, [r3, #4]
   8564e:	f022 0203 	bic.w	r2, r2, #3
   85652:	1b51      	subs	r1, r2, r5
   85654:	290f      	cmp	r1, #15
   85656:	ddf2      	ble.n	8563e <_malloc_r+0x132>
   85658:	461c      	mov	r4, r3
   8565a:	68da      	ldr	r2, [r3, #12]
   8565c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85660:	f045 0901 	orr.w	r9, r5, #1
   85664:	f041 0801 	orr.w	r8, r1, #1
   85668:	441d      	add	r5, r3
   8566a:	f8c3 9004 	str.w	r9, [r3, #4]
   8566e:	4630      	mov	r0, r6
   85670:	f8cc 200c 	str.w	r2, [ip, #12]
   85674:	f8c2 c008 	str.w	ip, [r2, #8]
   85678:	617d      	str	r5, [r7, #20]
   8567a:	613d      	str	r5, [r7, #16]
   8567c:	f8c5 e00c 	str.w	lr, [r5, #12]
   85680:	f8c5 e008 	str.w	lr, [r5, #8]
   85684:	f8c5 8004 	str.w	r8, [r5, #4]
   85688:	5069      	str	r1, [r5, r1]
   8568a:	f000 faeb 	bl	85c64 <__malloc_unlock>
   8568e:	e769      	b.n	85564 <_malloc_r+0x58>
   85690:	2400      	movs	r4, #0
   85692:	4620      	mov	r0, r4
   85694:	230c      	movs	r3, #12
   85696:	6033      	str	r3, [r6, #0]
   85698:	b003      	add	sp, #12
   8569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8569e:	217e      	movs	r1, #126	; 0x7e
   856a0:	203f      	movs	r0, #63	; 0x3f
   856a2:	e773      	b.n	8558c <_malloc_r+0x80>
   856a4:	4423      	add	r3, r4
   856a6:	685a      	ldr	r2, [r3, #4]
   856a8:	68e1      	ldr	r1, [r4, #12]
   856aa:	e751      	b.n	85550 <_malloc_r+0x44>
   856ac:	4423      	add	r3, r4
   856ae:	685a      	ldr	r2, [r3, #4]
   856b0:	4630      	mov	r0, r6
   856b2:	f042 0201 	orr.w	r2, r2, #1
   856b6:	605a      	str	r2, [r3, #4]
   856b8:	3408      	adds	r4, #8
   856ba:	f000 fad3 	bl	85c64 <__malloc_unlock>
   856be:	4620      	mov	r0, r4
   856c0:	b003      	add	sp, #12
   856c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856c6:	68bc      	ldr	r4, [r7, #8]
   856c8:	6863      	ldr	r3, [r4, #4]
   856ca:	f023 0803 	bic.w	r8, r3, #3
   856ce:	4545      	cmp	r5, r8
   856d0:	d804      	bhi.n	856dc <_malloc_r+0x1d0>
   856d2:	ebc5 0308 	rsb	r3, r5, r8
   856d6:	2b0f      	cmp	r3, #15
   856d8:	f300 808c 	bgt.w	857f4 <_malloc_r+0x2e8>
   856dc:	4b53      	ldr	r3, [pc, #332]	; (8582c <_malloc_r+0x320>)
   856de:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8583c <_malloc_r+0x330>
   856e2:	681a      	ldr	r2, [r3, #0]
   856e4:	f8da 3000 	ldr.w	r3, [sl]
   856e8:	442a      	add	r2, r5
   856ea:	3301      	adds	r3, #1
   856ec:	eb04 0b08 	add.w	fp, r4, r8
   856f0:	f000 8151 	beq.w	85996 <_malloc_r+0x48a>
   856f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   856f8:	320f      	adds	r2, #15
   856fa:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   856fe:	f022 020f 	bic.w	r2, r2, #15
   85702:	4611      	mov	r1, r2
   85704:	4630      	mov	r0, r6
   85706:	9201      	str	r2, [sp, #4]
   85708:	f000 fc9e 	bl	86048 <_sbrk_r>
   8570c:	f1b0 3fff 	cmp.w	r0, #4294967295
   85710:	4681      	mov	r9, r0
   85712:	9a01      	ldr	r2, [sp, #4]
   85714:	f000 8148 	beq.w	859a8 <_malloc_r+0x49c>
   85718:	4583      	cmp	fp, r0
   8571a:	f200 80ef 	bhi.w	858fc <_malloc_r+0x3f0>
   8571e:	4b44      	ldr	r3, [pc, #272]	; (85830 <_malloc_r+0x324>)
   85720:	45cb      	cmp	fp, r9
   85722:	6819      	ldr	r1, [r3, #0]
   85724:	4411      	add	r1, r2
   85726:	6019      	str	r1, [r3, #0]
   85728:	f000 8143 	beq.w	859b2 <_malloc_r+0x4a6>
   8572c:	f8da 0000 	ldr.w	r0, [sl]
   85730:	f8df e108 	ldr.w	lr, [pc, #264]	; 8583c <_malloc_r+0x330>
   85734:	3001      	adds	r0, #1
   85736:	bf1b      	ittet	ne
   85738:	ebcb 0b09 	rsbne	fp, fp, r9
   8573c:	4459      	addne	r1, fp
   8573e:	f8ce 9000 	streq.w	r9, [lr]
   85742:	6019      	strne	r1, [r3, #0]
   85744:	f019 0107 	ands.w	r1, r9, #7
   85748:	f000 8108 	beq.w	8595c <_malloc_r+0x450>
   8574c:	f1c1 0008 	rsb	r0, r1, #8
   85750:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85754:	4481      	add	r9, r0
   85756:	3108      	adds	r1, #8
   85758:	444a      	add	r2, r9
   8575a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8575e:	ebc2 0a01 	rsb	sl, r2, r1
   85762:	4651      	mov	r1, sl
   85764:	4630      	mov	r0, r6
   85766:	9301      	str	r3, [sp, #4]
   85768:	f000 fc6e 	bl	86048 <_sbrk_r>
   8576c:	1c43      	adds	r3, r0, #1
   8576e:	9b01      	ldr	r3, [sp, #4]
   85770:	f000 812d 	beq.w	859ce <_malloc_r+0x4c2>
   85774:	ebc9 0200 	rsb	r2, r9, r0
   85778:	4452      	add	r2, sl
   8577a:	f042 0201 	orr.w	r2, r2, #1
   8577e:	6819      	ldr	r1, [r3, #0]
   85780:	42bc      	cmp	r4, r7
   85782:	4451      	add	r1, sl
   85784:	f8c7 9008 	str.w	r9, [r7, #8]
   85788:	6019      	str	r1, [r3, #0]
   8578a:	f8c9 2004 	str.w	r2, [r9, #4]
   8578e:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 85830 <_malloc_r+0x324>
   85792:	d016      	beq.n	857c2 <_malloc_r+0x2b6>
   85794:	f1b8 0f0f 	cmp.w	r8, #15
   85798:	f240 80ef 	bls.w	8597a <_malloc_r+0x46e>
   8579c:	6862      	ldr	r2, [r4, #4]
   8579e:	f1a8 030c 	sub.w	r3, r8, #12
   857a2:	f023 0307 	bic.w	r3, r3, #7
   857a6:	f002 0201 	and.w	r2, r2, #1
   857aa:	18e0      	adds	r0, r4, r3
   857ac:	f04f 0e05 	mov.w	lr, #5
   857b0:	431a      	orrs	r2, r3
   857b2:	2b0f      	cmp	r3, #15
   857b4:	6062      	str	r2, [r4, #4]
   857b6:	f8c0 e004 	str.w	lr, [r0, #4]
   857ba:	f8c0 e008 	str.w	lr, [r0, #8]
   857be:	f200 810a 	bhi.w	859d6 <_malloc_r+0x4ca>
   857c2:	4b1c      	ldr	r3, [pc, #112]	; (85834 <_malloc_r+0x328>)
   857c4:	68bc      	ldr	r4, [r7, #8]
   857c6:	681a      	ldr	r2, [r3, #0]
   857c8:	4291      	cmp	r1, r2
   857ca:	bf88      	it	hi
   857cc:	6019      	strhi	r1, [r3, #0]
   857ce:	4b1a      	ldr	r3, [pc, #104]	; (85838 <_malloc_r+0x32c>)
   857d0:	681a      	ldr	r2, [r3, #0]
   857d2:	4291      	cmp	r1, r2
   857d4:	6862      	ldr	r2, [r4, #4]
   857d6:	bf88      	it	hi
   857d8:	6019      	strhi	r1, [r3, #0]
   857da:	f022 0203 	bic.w	r2, r2, #3
   857de:	4295      	cmp	r5, r2
   857e0:	eba2 0305 	sub.w	r3, r2, r5
   857e4:	d801      	bhi.n	857ea <_malloc_r+0x2de>
   857e6:	2b0f      	cmp	r3, #15
   857e8:	dc04      	bgt.n	857f4 <_malloc_r+0x2e8>
   857ea:	4630      	mov	r0, r6
   857ec:	f000 fa3a 	bl	85c64 <__malloc_unlock>
   857f0:	2400      	movs	r4, #0
   857f2:	e6b7      	b.n	85564 <_malloc_r+0x58>
   857f4:	f045 0201 	orr.w	r2, r5, #1
   857f8:	f043 0301 	orr.w	r3, r3, #1
   857fc:	4425      	add	r5, r4
   857fe:	6062      	str	r2, [r4, #4]
   85800:	4630      	mov	r0, r6
   85802:	60bd      	str	r5, [r7, #8]
   85804:	3408      	adds	r4, #8
   85806:	606b      	str	r3, [r5, #4]
   85808:	f000 fa2c 	bl	85c64 <__malloc_unlock>
   8580c:	4620      	mov	r0, r4
   8580e:	b003      	add	sp, #12
   85810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85814:	2814      	cmp	r0, #20
   85816:	d969      	bls.n	858ec <_malloc_r+0x3e0>
   85818:	2854      	cmp	r0, #84	; 0x54
   8581a:	f200 8098 	bhi.w	8594e <_malloc_r+0x442>
   8581e:	0b28      	lsrs	r0, r5, #12
   85820:	306e      	adds	r0, #110	; 0x6e
   85822:	0041      	lsls	r1, r0, #1
   85824:	e6b2      	b.n	8558c <_malloc_r+0x80>
   85826:	bf00      	nop
   85828:	20070858 	.word	0x20070858
   8582c:	20070d90 	.word	0x20070d90
   85830:	20070d94 	.word	0x20070d94
   85834:	20070d8c 	.word	0x20070d8c
   85838:	20070d88 	.word	0x20070d88
   8583c:	20070c64 	.word	0x20070c64
   85840:	0a5a      	lsrs	r2, r3, #9
   85842:	2a04      	cmp	r2, #4
   85844:	d955      	bls.n	858f2 <_malloc_r+0x3e6>
   85846:	2a14      	cmp	r2, #20
   85848:	f200 80a7 	bhi.w	8599a <_malloc_r+0x48e>
   8584c:	325b      	adds	r2, #91	; 0x5b
   8584e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85852:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   85856:	f8dc 1008 	ldr.w	r1, [ip, #8]
   8585a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 85a14 <_malloc_r+0x508>
   8585e:	4561      	cmp	r1, ip
   85860:	d07f      	beq.n	85962 <_malloc_r+0x456>
   85862:	684a      	ldr	r2, [r1, #4]
   85864:	f022 0203 	bic.w	r2, r2, #3
   85868:	4293      	cmp	r3, r2
   8586a:	d202      	bcs.n	85872 <_malloc_r+0x366>
   8586c:	6889      	ldr	r1, [r1, #8]
   8586e:	458c      	cmp	ip, r1
   85870:	d1f7      	bne.n	85862 <_malloc_r+0x356>
   85872:	68ca      	ldr	r2, [r1, #12]
   85874:	687b      	ldr	r3, [r7, #4]
   85876:	60e2      	str	r2, [r4, #12]
   85878:	60a1      	str	r1, [r4, #8]
   8587a:	6094      	str	r4, [r2, #8]
   8587c:	60cc      	str	r4, [r1, #12]
   8587e:	e6c7      	b.n	85610 <_malloc_r+0x104>
   85880:	f045 0701 	orr.w	r7, r5, #1
   85884:	f042 0301 	orr.w	r3, r2, #1
   85888:	4425      	add	r5, r4
   8588a:	6067      	str	r7, [r4, #4]
   8588c:	4630      	mov	r0, r6
   8588e:	614d      	str	r5, [r1, #20]
   85890:	610d      	str	r5, [r1, #16]
   85892:	f8c5 e00c 	str.w	lr, [r5, #12]
   85896:	f8c5 e008 	str.w	lr, [r5, #8]
   8589a:	606b      	str	r3, [r5, #4]
   8589c:	50aa      	str	r2, [r5, r2]
   8589e:	3408      	adds	r4, #8
   858a0:	f000 f9e0 	bl	85c64 <__malloc_unlock>
   858a4:	e65e      	b.n	85564 <_malloc_r+0x58>
   858a6:	684b      	ldr	r3, [r1, #4]
   858a8:	e6b2      	b.n	85610 <_malloc_r+0x104>
   858aa:	f109 0901 	add.w	r9, r9, #1
   858ae:	f019 0f03 	tst.w	r9, #3
   858b2:	f10c 0c08 	add.w	ip, ip, #8
   858b6:	f47f aebd 	bne.w	85634 <_malloc_r+0x128>
   858ba:	e02c      	b.n	85916 <_malloc_r+0x40a>
   858bc:	f104 0308 	add.w	r3, r4, #8
   858c0:	6964      	ldr	r4, [r4, #20]
   858c2:	42a3      	cmp	r3, r4
   858c4:	bf08      	it	eq
   858c6:	3002      	addeq	r0, #2
   858c8:	f43f ae75 	beq.w	855b6 <_malloc_r+0xaa>
   858cc:	e63a      	b.n	85544 <_malloc_r+0x38>
   858ce:	461c      	mov	r4, r3
   858d0:	441a      	add	r2, r3
   858d2:	6851      	ldr	r1, [r2, #4]
   858d4:	68db      	ldr	r3, [r3, #12]
   858d6:	f854 5f08 	ldr.w	r5, [r4, #8]!
   858da:	f041 0101 	orr.w	r1, r1, #1
   858de:	6051      	str	r1, [r2, #4]
   858e0:	4630      	mov	r0, r6
   858e2:	60eb      	str	r3, [r5, #12]
   858e4:	609d      	str	r5, [r3, #8]
   858e6:	f000 f9bd 	bl	85c64 <__malloc_unlock>
   858ea:	e63b      	b.n	85564 <_malloc_r+0x58>
   858ec:	305b      	adds	r0, #91	; 0x5b
   858ee:	0041      	lsls	r1, r0, #1
   858f0:	e64c      	b.n	8558c <_malloc_r+0x80>
   858f2:	099a      	lsrs	r2, r3, #6
   858f4:	3238      	adds	r2, #56	; 0x38
   858f6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   858fa:	e7aa      	b.n	85852 <_malloc_r+0x346>
   858fc:	42bc      	cmp	r4, r7
   858fe:	4b45      	ldr	r3, [pc, #276]	; (85a14 <_malloc_r+0x508>)
   85900:	f43f af0d 	beq.w	8571e <_malloc_r+0x212>
   85904:	689c      	ldr	r4, [r3, #8]
   85906:	6862      	ldr	r2, [r4, #4]
   85908:	f022 0203 	bic.w	r2, r2, #3
   8590c:	e767      	b.n	857de <_malloc_r+0x2d2>
   8590e:	f8d8 8000 	ldr.w	r8, [r8]
   85912:	4598      	cmp	r8, r3
   85914:	d17c      	bne.n	85a10 <_malloc_r+0x504>
   85916:	f010 0f03 	tst.w	r0, #3
   8591a:	f1a8 0308 	sub.w	r3, r8, #8
   8591e:	f100 30ff 	add.w	r0, r0, #4294967295
   85922:	d1f4      	bne.n	8590e <_malloc_r+0x402>
   85924:	687b      	ldr	r3, [r7, #4]
   85926:	ea23 0304 	bic.w	r3, r3, r4
   8592a:	607b      	str	r3, [r7, #4]
   8592c:	0064      	lsls	r4, r4, #1
   8592e:	429c      	cmp	r4, r3
   85930:	f63f aec9 	bhi.w	856c6 <_malloc_r+0x1ba>
   85934:	2c00      	cmp	r4, #0
   85936:	f43f aec6 	beq.w	856c6 <_malloc_r+0x1ba>
   8593a:	4223      	tst	r3, r4
   8593c:	4648      	mov	r0, r9
   8593e:	f47f ae75 	bne.w	8562c <_malloc_r+0x120>
   85942:	0064      	lsls	r4, r4, #1
   85944:	4223      	tst	r3, r4
   85946:	f100 0004 	add.w	r0, r0, #4
   8594a:	d0fa      	beq.n	85942 <_malloc_r+0x436>
   8594c:	e66e      	b.n	8562c <_malloc_r+0x120>
   8594e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   85952:	d818      	bhi.n	85986 <_malloc_r+0x47a>
   85954:	0be8      	lsrs	r0, r5, #15
   85956:	3077      	adds	r0, #119	; 0x77
   85958:	0041      	lsls	r1, r0, #1
   8595a:	e617      	b.n	8558c <_malloc_r+0x80>
   8595c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85960:	e6fa      	b.n	85758 <_malloc_r+0x24c>
   85962:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85966:	1092      	asrs	r2, r2, #2
   85968:	f04f 0c01 	mov.w	ip, #1
   8596c:	fa0c f202 	lsl.w	r2, ip, r2
   85970:	4313      	orrs	r3, r2
   85972:	f8c8 3004 	str.w	r3, [r8, #4]
   85976:	460a      	mov	r2, r1
   85978:	e77d      	b.n	85876 <_malloc_r+0x36a>
   8597a:	2301      	movs	r3, #1
   8597c:	f8c9 3004 	str.w	r3, [r9, #4]
   85980:	464c      	mov	r4, r9
   85982:	2200      	movs	r2, #0
   85984:	e72b      	b.n	857de <_malloc_r+0x2d2>
   85986:	f240 5354 	movw	r3, #1364	; 0x554
   8598a:	4298      	cmp	r0, r3
   8598c:	d81c      	bhi.n	859c8 <_malloc_r+0x4bc>
   8598e:	0ca8      	lsrs	r0, r5, #18
   85990:	307c      	adds	r0, #124	; 0x7c
   85992:	0041      	lsls	r1, r0, #1
   85994:	e5fa      	b.n	8558c <_malloc_r+0x80>
   85996:	3210      	adds	r2, #16
   85998:	e6b3      	b.n	85702 <_malloc_r+0x1f6>
   8599a:	2a54      	cmp	r2, #84	; 0x54
   8599c:	d823      	bhi.n	859e6 <_malloc_r+0x4da>
   8599e:	0b1a      	lsrs	r2, r3, #12
   859a0:	326e      	adds	r2, #110	; 0x6e
   859a2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   859a6:	e754      	b.n	85852 <_malloc_r+0x346>
   859a8:	68bc      	ldr	r4, [r7, #8]
   859aa:	6862      	ldr	r2, [r4, #4]
   859ac:	f022 0203 	bic.w	r2, r2, #3
   859b0:	e715      	b.n	857de <_malloc_r+0x2d2>
   859b2:	f3cb 000b 	ubfx	r0, fp, #0, #12
   859b6:	2800      	cmp	r0, #0
   859b8:	f47f aeb8 	bne.w	8572c <_malloc_r+0x220>
   859bc:	4442      	add	r2, r8
   859be:	68bb      	ldr	r3, [r7, #8]
   859c0:	f042 0201 	orr.w	r2, r2, #1
   859c4:	605a      	str	r2, [r3, #4]
   859c6:	e6fc      	b.n	857c2 <_malloc_r+0x2b6>
   859c8:	21fc      	movs	r1, #252	; 0xfc
   859ca:	207e      	movs	r0, #126	; 0x7e
   859cc:	e5de      	b.n	8558c <_malloc_r+0x80>
   859ce:	2201      	movs	r2, #1
   859d0:	f04f 0a00 	mov.w	sl, #0
   859d4:	e6d3      	b.n	8577e <_malloc_r+0x272>
   859d6:	f104 0108 	add.w	r1, r4, #8
   859da:	4630      	mov	r0, r6
   859dc:	f7ff fa84 	bl	84ee8 <_free_r>
   859e0:	f8da 1000 	ldr.w	r1, [sl]
   859e4:	e6ed      	b.n	857c2 <_malloc_r+0x2b6>
   859e6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   859ea:	d804      	bhi.n	859f6 <_malloc_r+0x4ea>
   859ec:	0bda      	lsrs	r2, r3, #15
   859ee:	3277      	adds	r2, #119	; 0x77
   859f0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   859f4:	e72d      	b.n	85852 <_malloc_r+0x346>
   859f6:	f240 5154 	movw	r1, #1364	; 0x554
   859fa:	428a      	cmp	r2, r1
   859fc:	d804      	bhi.n	85a08 <_malloc_r+0x4fc>
   859fe:	0c9a      	lsrs	r2, r3, #18
   85a00:	327c      	adds	r2, #124	; 0x7c
   85a02:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   85a06:	e724      	b.n	85852 <_malloc_r+0x346>
   85a08:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   85a0c:	227e      	movs	r2, #126	; 0x7e
   85a0e:	e720      	b.n	85852 <_malloc_r+0x346>
   85a10:	687b      	ldr	r3, [r7, #4]
   85a12:	e78b      	b.n	8592c <_malloc_r+0x420>
   85a14:	20070858 	.word	0x20070858

00085a18 <memchr>:
   85a18:	0783      	lsls	r3, r0, #30
   85a1a:	b470      	push	{r4, r5, r6}
   85a1c:	b2c9      	uxtb	r1, r1
   85a1e:	d040      	beq.n	85aa2 <memchr+0x8a>
   85a20:	1e54      	subs	r4, r2, #1
   85a22:	2a00      	cmp	r2, #0
   85a24:	d03f      	beq.n	85aa6 <memchr+0x8e>
   85a26:	7803      	ldrb	r3, [r0, #0]
   85a28:	428b      	cmp	r3, r1
   85a2a:	bf18      	it	ne
   85a2c:	1c43      	addne	r3, r0, #1
   85a2e:	d105      	bne.n	85a3c <memchr+0x24>
   85a30:	e01c      	b.n	85a6c <memchr+0x54>
   85a32:	b1ec      	cbz	r4, 85a70 <memchr+0x58>
   85a34:	7802      	ldrb	r2, [r0, #0]
   85a36:	3c01      	subs	r4, #1
   85a38:	428a      	cmp	r2, r1
   85a3a:	d017      	beq.n	85a6c <memchr+0x54>
   85a3c:	f013 0f03 	tst.w	r3, #3
   85a40:	4618      	mov	r0, r3
   85a42:	f103 0301 	add.w	r3, r3, #1
   85a46:	d1f4      	bne.n	85a32 <memchr+0x1a>
   85a48:	2c03      	cmp	r4, #3
   85a4a:	d814      	bhi.n	85a76 <memchr+0x5e>
   85a4c:	b184      	cbz	r4, 85a70 <memchr+0x58>
   85a4e:	7803      	ldrb	r3, [r0, #0]
   85a50:	428b      	cmp	r3, r1
   85a52:	d00b      	beq.n	85a6c <memchr+0x54>
   85a54:	1905      	adds	r5, r0, r4
   85a56:	1c43      	adds	r3, r0, #1
   85a58:	e002      	b.n	85a60 <memchr+0x48>
   85a5a:	7802      	ldrb	r2, [r0, #0]
   85a5c:	428a      	cmp	r2, r1
   85a5e:	d005      	beq.n	85a6c <memchr+0x54>
   85a60:	42ab      	cmp	r3, r5
   85a62:	4618      	mov	r0, r3
   85a64:	f103 0301 	add.w	r3, r3, #1
   85a68:	d1f7      	bne.n	85a5a <memchr+0x42>
   85a6a:	2000      	movs	r0, #0
   85a6c:	bc70      	pop	{r4, r5, r6}
   85a6e:	4770      	bx	lr
   85a70:	4620      	mov	r0, r4
   85a72:	bc70      	pop	{r4, r5, r6}
   85a74:	4770      	bx	lr
   85a76:	4602      	mov	r2, r0
   85a78:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   85a7c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85a80:	6813      	ldr	r3, [r2, #0]
   85a82:	4610      	mov	r0, r2
   85a84:	4073      	eors	r3, r6
   85a86:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   85a8a:	ea25 0303 	bic.w	r3, r5, r3
   85a8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85a92:	f102 0204 	add.w	r2, r2, #4
   85a96:	d1d9      	bne.n	85a4c <memchr+0x34>
   85a98:	3c04      	subs	r4, #4
   85a9a:	2c03      	cmp	r4, #3
   85a9c:	4610      	mov	r0, r2
   85a9e:	d8ef      	bhi.n	85a80 <memchr+0x68>
   85aa0:	e7d4      	b.n	85a4c <memchr+0x34>
   85aa2:	4614      	mov	r4, r2
   85aa4:	e7d0      	b.n	85a48 <memchr+0x30>
   85aa6:	4610      	mov	r0, r2
   85aa8:	e7e0      	b.n	85a6c <memchr+0x54>
   85aaa:	bf00      	nop

00085aac <memcpy>:
   85aac:	4684      	mov	ip, r0
   85aae:	ea41 0300 	orr.w	r3, r1, r0
   85ab2:	f013 0303 	ands.w	r3, r3, #3
   85ab6:	d149      	bne.n	85b4c <memcpy+0xa0>
   85ab8:	3a40      	subs	r2, #64	; 0x40
   85aba:	d323      	bcc.n	85b04 <memcpy+0x58>
   85abc:	680b      	ldr	r3, [r1, #0]
   85abe:	6003      	str	r3, [r0, #0]
   85ac0:	684b      	ldr	r3, [r1, #4]
   85ac2:	6043      	str	r3, [r0, #4]
   85ac4:	688b      	ldr	r3, [r1, #8]
   85ac6:	6083      	str	r3, [r0, #8]
   85ac8:	68cb      	ldr	r3, [r1, #12]
   85aca:	60c3      	str	r3, [r0, #12]
   85acc:	690b      	ldr	r3, [r1, #16]
   85ace:	6103      	str	r3, [r0, #16]
   85ad0:	694b      	ldr	r3, [r1, #20]
   85ad2:	6143      	str	r3, [r0, #20]
   85ad4:	698b      	ldr	r3, [r1, #24]
   85ad6:	6183      	str	r3, [r0, #24]
   85ad8:	69cb      	ldr	r3, [r1, #28]
   85ada:	61c3      	str	r3, [r0, #28]
   85adc:	6a0b      	ldr	r3, [r1, #32]
   85ade:	6203      	str	r3, [r0, #32]
   85ae0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85ae2:	6243      	str	r3, [r0, #36]	; 0x24
   85ae4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85ae6:	6283      	str	r3, [r0, #40]	; 0x28
   85ae8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85aea:	62c3      	str	r3, [r0, #44]	; 0x2c
   85aec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85aee:	6303      	str	r3, [r0, #48]	; 0x30
   85af0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85af2:	6343      	str	r3, [r0, #52]	; 0x34
   85af4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85af6:	6383      	str	r3, [r0, #56]	; 0x38
   85af8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85afa:	63c3      	str	r3, [r0, #60]	; 0x3c
   85afc:	3040      	adds	r0, #64	; 0x40
   85afe:	3140      	adds	r1, #64	; 0x40
   85b00:	3a40      	subs	r2, #64	; 0x40
   85b02:	d2db      	bcs.n	85abc <memcpy+0x10>
   85b04:	3230      	adds	r2, #48	; 0x30
   85b06:	d30b      	bcc.n	85b20 <memcpy+0x74>
   85b08:	680b      	ldr	r3, [r1, #0]
   85b0a:	6003      	str	r3, [r0, #0]
   85b0c:	684b      	ldr	r3, [r1, #4]
   85b0e:	6043      	str	r3, [r0, #4]
   85b10:	688b      	ldr	r3, [r1, #8]
   85b12:	6083      	str	r3, [r0, #8]
   85b14:	68cb      	ldr	r3, [r1, #12]
   85b16:	60c3      	str	r3, [r0, #12]
   85b18:	3010      	adds	r0, #16
   85b1a:	3110      	adds	r1, #16
   85b1c:	3a10      	subs	r2, #16
   85b1e:	d2f3      	bcs.n	85b08 <memcpy+0x5c>
   85b20:	320c      	adds	r2, #12
   85b22:	d305      	bcc.n	85b30 <memcpy+0x84>
   85b24:	f851 3b04 	ldr.w	r3, [r1], #4
   85b28:	f840 3b04 	str.w	r3, [r0], #4
   85b2c:	3a04      	subs	r2, #4
   85b2e:	d2f9      	bcs.n	85b24 <memcpy+0x78>
   85b30:	3204      	adds	r2, #4
   85b32:	d008      	beq.n	85b46 <memcpy+0x9a>
   85b34:	07d2      	lsls	r2, r2, #31
   85b36:	bf1c      	itt	ne
   85b38:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85b3c:	f800 3b01 	strbne.w	r3, [r0], #1
   85b40:	d301      	bcc.n	85b46 <memcpy+0x9a>
   85b42:	880b      	ldrh	r3, [r1, #0]
   85b44:	8003      	strh	r3, [r0, #0]
   85b46:	4660      	mov	r0, ip
   85b48:	4770      	bx	lr
   85b4a:	bf00      	nop
   85b4c:	2a08      	cmp	r2, #8
   85b4e:	d313      	bcc.n	85b78 <memcpy+0xcc>
   85b50:	078b      	lsls	r3, r1, #30
   85b52:	d0b1      	beq.n	85ab8 <memcpy+0xc>
   85b54:	f010 0303 	ands.w	r3, r0, #3
   85b58:	d0ae      	beq.n	85ab8 <memcpy+0xc>
   85b5a:	f1c3 0304 	rsb	r3, r3, #4
   85b5e:	1ad2      	subs	r2, r2, r3
   85b60:	07db      	lsls	r3, r3, #31
   85b62:	bf1c      	itt	ne
   85b64:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85b68:	f800 3b01 	strbne.w	r3, [r0], #1
   85b6c:	d3a4      	bcc.n	85ab8 <memcpy+0xc>
   85b6e:	f831 3b02 	ldrh.w	r3, [r1], #2
   85b72:	f820 3b02 	strh.w	r3, [r0], #2
   85b76:	e79f      	b.n	85ab8 <memcpy+0xc>
   85b78:	3a04      	subs	r2, #4
   85b7a:	d3d9      	bcc.n	85b30 <memcpy+0x84>
   85b7c:	3a01      	subs	r2, #1
   85b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
   85b82:	f800 3b01 	strb.w	r3, [r0], #1
   85b86:	d2f9      	bcs.n	85b7c <memcpy+0xd0>
   85b88:	780b      	ldrb	r3, [r1, #0]
   85b8a:	7003      	strb	r3, [r0, #0]
   85b8c:	784b      	ldrb	r3, [r1, #1]
   85b8e:	7043      	strb	r3, [r0, #1]
   85b90:	788b      	ldrb	r3, [r1, #2]
   85b92:	7083      	strb	r3, [r0, #2]
   85b94:	4660      	mov	r0, ip
   85b96:	4770      	bx	lr

00085b98 <memmove>:
   85b98:	4288      	cmp	r0, r1
   85b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b9c:	d90d      	bls.n	85bba <memmove+0x22>
   85b9e:	188b      	adds	r3, r1, r2
   85ba0:	4298      	cmp	r0, r3
   85ba2:	d20a      	bcs.n	85bba <memmove+0x22>
   85ba4:	1881      	adds	r1, r0, r2
   85ba6:	2a00      	cmp	r2, #0
   85ba8:	d054      	beq.n	85c54 <memmove+0xbc>
   85baa:	1a9a      	subs	r2, r3, r2
   85bac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85bb0:	4293      	cmp	r3, r2
   85bb2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85bb6:	d1f9      	bne.n	85bac <memmove+0x14>
   85bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85bba:	2a0f      	cmp	r2, #15
   85bbc:	d948      	bls.n	85c50 <memmove+0xb8>
   85bbe:	ea40 0301 	orr.w	r3, r0, r1
   85bc2:	079b      	lsls	r3, r3, #30
   85bc4:	d147      	bne.n	85c56 <memmove+0xbe>
   85bc6:	4615      	mov	r5, r2
   85bc8:	f100 0410 	add.w	r4, r0, #16
   85bcc:	f101 0310 	add.w	r3, r1, #16
   85bd0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85bd4:	3d10      	subs	r5, #16
   85bd6:	f844 6c10 	str.w	r6, [r4, #-16]
   85bda:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85bde:	2d0f      	cmp	r5, #15
   85be0:	f844 6c0c 	str.w	r6, [r4, #-12]
   85be4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85be8:	f104 0410 	add.w	r4, r4, #16
   85bec:	f844 6c18 	str.w	r6, [r4, #-24]
   85bf0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85bf4:	f103 0310 	add.w	r3, r3, #16
   85bf8:	f844 6c14 	str.w	r6, [r4, #-20]
   85bfc:	d8e8      	bhi.n	85bd0 <memmove+0x38>
   85bfe:	f1a2 0310 	sub.w	r3, r2, #16
   85c02:	f023 030f 	bic.w	r3, r3, #15
   85c06:	f002 0e0f 	and.w	lr, r2, #15
   85c0a:	3310      	adds	r3, #16
   85c0c:	f1be 0f03 	cmp.w	lr, #3
   85c10:	4419      	add	r1, r3
   85c12:	4403      	add	r3, r0
   85c14:	d921      	bls.n	85c5a <memmove+0xc2>
   85c16:	460e      	mov	r6, r1
   85c18:	4674      	mov	r4, lr
   85c1a:	1f1d      	subs	r5, r3, #4
   85c1c:	f856 7b04 	ldr.w	r7, [r6], #4
   85c20:	3c04      	subs	r4, #4
   85c22:	2c03      	cmp	r4, #3
   85c24:	f845 7f04 	str.w	r7, [r5, #4]!
   85c28:	d8f8      	bhi.n	85c1c <memmove+0x84>
   85c2a:	f1ae 0404 	sub.w	r4, lr, #4
   85c2e:	f024 0403 	bic.w	r4, r4, #3
   85c32:	3404      	adds	r4, #4
   85c34:	4423      	add	r3, r4
   85c36:	4421      	add	r1, r4
   85c38:	f002 0203 	and.w	r2, r2, #3
   85c3c:	b152      	cbz	r2, 85c54 <memmove+0xbc>
   85c3e:	3b01      	subs	r3, #1
   85c40:	440a      	add	r2, r1
   85c42:	f811 4b01 	ldrb.w	r4, [r1], #1
   85c46:	4291      	cmp	r1, r2
   85c48:	f803 4f01 	strb.w	r4, [r3, #1]!
   85c4c:	d1f9      	bne.n	85c42 <memmove+0xaa>
   85c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c50:	4603      	mov	r3, r0
   85c52:	e7f3      	b.n	85c3c <memmove+0xa4>
   85c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c56:	4603      	mov	r3, r0
   85c58:	e7f1      	b.n	85c3e <memmove+0xa6>
   85c5a:	4672      	mov	r2, lr
   85c5c:	e7ee      	b.n	85c3c <memmove+0xa4>
   85c5e:	bf00      	nop

00085c60 <__malloc_lock>:
   85c60:	4770      	bx	lr
   85c62:	bf00      	nop

00085c64 <__malloc_unlock>:
   85c64:	4770      	bx	lr
   85c66:	bf00      	nop

00085c68 <_realloc_r>:
   85c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c6c:	4617      	mov	r7, r2
   85c6e:	b083      	sub	sp, #12
   85c70:	460d      	mov	r5, r1
   85c72:	2900      	cmp	r1, #0
   85c74:	f000 80e2 	beq.w	85e3c <_realloc_r+0x1d4>
   85c78:	4681      	mov	r9, r0
   85c7a:	f107 040b 	add.w	r4, r7, #11
   85c7e:	f7ff ffef 	bl	85c60 <__malloc_lock>
   85c82:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85c86:	2c16      	cmp	r4, #22
   85c88:	f023 0603 	bic.w	r6, r3, #3
   85c8c:	f1a5 0808 	sub.w	r8, r5, #8
   85c90:	d84b      	bhi.n	85d2a <_realloc_r+0xc2>
   85c92:	2210      	movs	r2, #16
   85c94:	4614      	mov	r4, r2
   85c96:	42a7      	cmp	r7, r4
   85c98:	d84c      	bhi.n	85d34 <_realloc_r+0xcc>
   85c9a:	4296      	cmp	r6, r2
   85c9c:	da51      	bge.n	85d42 <_realloc_r+0xda>
   85c9e:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 86044 <_realloc_r+0x3dc>
   85ca2:	eb08 0106 	add.w	r1, r8, r6
   85ca6:	f8db 0008 	ldr.w	r0, [fp, #8]
   85caa:	4288      	cmp	r0, r1
   85cac:	f000 80d3 	beq.w	85e56 <_realloc_r+0x1ee>
   85cb0:	6848      	ldr	r0, [r1, #4]
   85cb2:	f020 0e01 	bic.w	lr, r0, #1
   85cb6:	448e      	add	lr, r1
   85cb8:	f8de e004 	ldr.w	lr, [lr, #4]
   85cbc:	f01e 0f01 	tst.w	lr, #1
   85cc0:	d154      	bne.n	85d6c <_realloc_r+0x104>
   85cc2:	f020 0003 	bic.w	r0, r0, #3
   85cc6:	4430      	add	r0, r6
   85cc8:	4290      	cmp	r0, r2
   85cca:	f280 80bd 	bge.w	85e48 <_realloc_r+0x1e0>
   85cce:	07db      	lsls	r3, r3, #31
   85cd0:	f100 8090 	bmi.w	85df4 <_realloc_r+0x18c>
   85cd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85cd8:	ebc3 0a08 	rsb	sl, r3, r8
   85cdc:	f8da 3004 	ldr.w	r3, [sl, #4]
   85ce0:	f023 0303 	bic.w	r3, r3, #3
   85ce4:	eb00 0e03 	add.w	lr, r0, r3
   85ce8:	4596      	cmp	lr, r2
   85cea:	db49      	blt.n	85d80 <_realloc_r+0x118>
   85cec:	4657      	mov	r7, sl
   85cee:	68cb      	ldr	r3, [r1, #12]
   85cf0:	6889      	ldr	r1, [r1, #8]
   85cf2:	1f32      	subs	r2, r6, #4
   85cf4:	60cb      	str	r3, [r1, #12]
   85cf6:	6099      	str	r1, [r3, #8]
   85cf8:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85cfc:	f8da 300c 	ldr.w	r3, [sl, #12]
   85d00:	2a24      	cmp	r2, #36	; 0x24
   85d02:	60cb      	str	r3, [r1, #12]
   85d04:	6099      	str	r1, [r3, #8]
   85d06:	f200 8133 	bhi.w	85f70 <_realloc_r+0x308>
   85d0a:	2a13      	cmp	r2, #19
   85d0c:	f240 80fa 	bls.w	85f04 <_realloc_r+0x29c>
   85d10:	682b      	ldr	r3, [r5, #0]
   85d12:	2a1b      	cmp	r2, #27
   85d14:	f8ca 3008 	str.w	r3, [sl, #8]
   85d18:	686b      	ldr	r3, [r5, #4]
   85d1a:	f8ca 300c 	str.w	r3, [sl, #12]
   85d1e:	f200 813b 	bhi.w	85f98 <_realloc_r+0x330>
   85d22:	3508      	adds	r5, #8
   85d24:	f10a 0310 	add.w	r3, sl, #16
   85d28:	e0ed      	b.n	85f06 <_realloc_r+0x29e>
   85d2a:	f024 0407 	bic.w	r4, r4, #7
   85d2e:	2c00      	cmp	r4, #0
   85d30:	4622      	mov	r2, r4
   85d32:	dab0      	bge.n	85c96 <_realloc_r+0x2e>
   85d34:	230c      	movs	r3, #12
   85d36:	2000      	movs	r0, #0
   85d38:	f8c9 3000 	str.w	r3, [r9]
   85d3c:	b003      	add	sp, #12
   85d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d42:	462f      	mov	r7, r5
   85d44:	1b32      	subs	r2, r6, r4
   85d46:	2a0f      	cmp	r2, #15
   85d48:	f003 0301 	and.w	r3, r3, #1
   85d4c:	d840      	bhi.n	85dd0 <_realloc_r+0x168>
   85d4e:	4333      	orrs	r3, r6
   85d50:	f8c8 3004 	str.w	r3, [r8, #4]
   85d54:	4446      	add	r6, r8
   85d56:	6873      	ldr	r3, [r6, #4]
   85d58:	f043 0301 	orr.w	r3, r3, #1
   85d5c:	6073      	str	r3, [r6, #4]
   85d5e:	4648      	mov	r0, r9
   85d60:	f7ff ff80 	bl	85c64 <__malloc_unlock>
   85d64:	4638      	mov	r0, r7
   85d66:	b003      	add	sp, #12
   85d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d6c:	07d9      	lsls	r1, r3, #31
   85d6e:	d441      	bmi.n	85df4 <_realloc_r+0x18c>
   85d70:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d74:	ebc3 0a08 	rsb	sl, r3, r8
   85d78:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d7c:	f023 0303 	bic.w	r3, r3, #3
   85d80:	4433      	add	r3, r6
   85d82:	4293      	cmp	r3, r2
   85d84:	db36      	blt.n	85df4 <_realloc_r+0x18c>
   85d86:	4657      	mov	r7, sl
   85d88:	f8da 100c 	ldr.w	r1, [sl, #12]
   85d8c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85d90:	1f32      	subs	r2, r6, #4
   85d92:	2a24      	cmp	r2, #36	; 0x24
   85d94:	60c1      	str	r1, [r0, #12]
   85d96:	6088      	str	r0, [r1, #8]
   85d98:	f200 80f5 	bhi.w	85f86 <_realloc_r+0x31e>
   85d9c:	2a13      	cmp	r2, #19
   85d9e:	f240 80f0 	bls.w	85f82 <_realloc_r+0x31a>
   85da2:	6829      	ldr	r1, [r5, #0]
   85da4:	2a1b      	cmp	r2, #27
   85da6:	f8ca 1008 	str.w	r1, [sl, #8]
   85daa:	6869      	ldr	r1, [r5, #4]
   85dac:	f8ca 100c 	str.w	r1, [sl, #12]
   85db0:	f200 8107 	bhi.w	85fc2 <_realloc_r+0x35a>
   85db4:	3508      	adds	r5, #8
   85db6:	f10a 0210 	add.w	r2, sl, #16
   85dba:	6829      	ldr	r1, [r5, #0]
   85dbc:	461e      	mov	r6, r3
   85dbe:	6011      	str	r1, [r2, #0]
   85dc0:	6869      	ldr	r1, [r5, #4]
   85dc2:	46d0      	mov	r8, sl
   85dc4:	6051      	str	r1, [r2, #4]
   85dc6:	68ab      	ldr	r3, [r5, #8]
   85dc8:	6093      	str	r3, [r2, #8]
   85dca:	f8da 3004 	ldr.w	r3, [sl, #4]
   85dce:	e7b9      	b.n	85d44 <_realloc_r+0xdc>
   85dd0:	eb08 0104 	add.w	r1, r8, r4
   85dd4:	4323      	orrs	r3, r4
   85dd6:	f042 0001 	orr.w	r0, r2, #1
   85dda:	f8c8 3004 	str.w	r3, [r8, #4]
   85dde:	440a      	add	r2, r1
   85de0:	6048      	str	r0, [r1, #4]
   85de2:	6853      	ldr	r3, [r2, #4]
   85de4:	3108      	adds	r1, #8
   85de6:	f043 0301 	orr.w	r3, r3, #1
   85dea:	6053      	str	r3, [r2, #4]
   85dec:	4648      	mov	r0, r9
   85dee:	f7ff f87b 	bl	84ee8 <_free_r>
   85df2:	e7b4      	b.n	85d5e <_realloc_r+0xf6>
   85df4:	4639      	mov	r1, r7
   85df6:	4648      	mov	r0, r9
   85df8:	f7ff fb88 	bl	8550c <_malloc_r>
   85dfc:	4607      	mov	r7, r0
   85dfe:	2800      	cmp	r0, #0
   85e00:	d0ad      	beq.n	85d5e <_realloc_r+0xf6>
   85e02:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85e06:	f1a0 0108 	sub.w	r1, r0, #8
   85e0a:	f023 0201 	bic.w	r2, r3, #1
   85e0e:	4442      	add	r2, r8
   85e10:	4291      	cmp	r1, r2
   85e12:	f000 80a6 	beq.w	85f62 <_realloc_r+0x2fa>
   85e16:	1f32      	subs	r2, r6, #4
   85e18:	2a24      	cmp	r2, #36	; 0x24
   85e1a:	f200 8093 	bhi.w	85f44 <_realloc_r+0x2dc>
   85e1e:	2a13      	cmp	r2, #19
   85e20:	d865      	bhi.n	85eee <_realloc_r+0x286>
   85e22:	4603      	mov	r3, r0
   85e24:	462a      	mov	r2, r5
   85e26:	6811      	ldr	r1, [r2, #0]
   85e28:	6019      	str	r1, [r3, #0]
   85e2a:	6851      	ldr	r1, [r2, #4]
   85e2c:	6059      	str	r1, [r3, #4]
   85e2e:	6892      	ldr	r2, [r2, #8]
   85e30:	609a      	str	r2, [r3, #8]
   85e32:	4629      	mov	r1, r5
   85e34:	4648      	mov	r0, r9
   85e36:	f7ff f857 	bl	84ee8 <_free_r>
   85e3a:	e790      	b.n	85d5e <_realloc_r+0xf6>
   85e3c:	4611      	mov	r1, r2
   85e3e:	b003      	add	sp, #12
   85e40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85e44:	f7ff bb62 	b.w	8550c <_malloc_r>
   85e48:	68ca      	ldr	r2, [r1, #12]
   85e4a:	6889      	ldr	r1, [r1, #8]
   85e4c:	462f      	mov	r7, r5
   85e4e:	60ca      	str	r2, [r1, #12]
   85e50:	4606      	mov	r6, r0
   85e52:	6091      	str	r1, [r2, #8]
   85e54:	e776      	b.n	85d44 <_realloc_r+0xdc>
   85e56:	6841      	ldr	r1, [r0, #4]
   85e58:	f104 0010 	add.w	r0, r4, #16
   85e5c:	f021 0103 	bic.w	r1, r1, #3
   85e60:	4431      	add	r1, r6
   85e62:	4281      	cmp	r1, r0
   85e64:	da5a      	bge.n	85f1c <_realloc_r+0x2b4>
   85e66:	07db      	lsls	r3, r3, #31
   85e68:	d4c4      	bmi.n	85df4 <_realloc_r+0x18c>
   85e6a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85e6e:	ebc3 0a08 	rsb	sl, r3, r8
   85e72:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e76:	f023 0303 	bic.w	r3, r3, #3
   85e7a:	eb01 0c03 	add.w	ip, r1, r3
   85e7e:	4560      	cmp	r0, ip
   85e80:	f73f af7e 	bgt.w	85d80 <_realloc_r+0x118>
   85e84:	4657      	mov	r7, sl
   85e86:	f8da 300c 	ldr.w	r3, [sl, #12]
   85e8a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85e8e:	1f32      	subs	r2, r6, #4
   85e90:	2a24      	cmp	r2, #36	; 0x24
   85e92:	60cb      	str	r3, [r1, #12]
   85e94:	6099      	str	r1, [r3, #8]
   85e96:	f200 80b6 	bhi.w	86006 <_realloc_r+0x39e>
   85e9a:	2a13      	cmp	r2, #19
   85e9c:	f240 80a7 	bls.w	85fee <_realloc_r+0x386>
   85ea0:	682b      	ldr	r3, [r5, #0]
   85ea2:	2a1b      	cmp	r2, #27
   85ea4:	f8ca 3008 	str.w	r3, [sl, #8]
   85ea8:	686b      	ldr	r3, [r5, #4]
   85eaa:	f8ca 300c 	str.w	r3, [sl, #12]
   85eae:	f200 80b3 	bhi.w	86018 <_realloc_r+0x3b0>
   85eb2:	3508      	adds	r5, #8
   85eb4:	f10a 0310 	add.w	r3, sl, #16
   85eb8:	682a      	ldr	r2, [r5, #0]
   85eba:	601a      	str	r2, [r3, #0]
   85ebc:	686a      	ldr	r2, [r5, #4]
   85ebe:	605a      	str	r2, [r3, #4]
   85ec0:	68aa      	ldr	r2, [r5, #8]
   85ec2:	609a      	str	r2, [r3, #8]
   85ec4:	ebc4 030c 	rsb	r3, r4, ip
   85ec8:	eb0a 0204 	add.w	r2, sl, r4
   85ecc:	f043 0301 	orr.w	r3, r3, #1
   85ed0:	f8cb 2008 	str.w	r2, [fp, #8]
   85ed4:	6053      	str	r3, [r2, #4]
   85ed6:	f8da 3004 	ldr.w	r3, [sl, #4]
   85eda:	4648      	mov	r0, r9
   85edc:	f003 0301 	and.w	r3, r3, #1
   85ee0:	431c      	orrs	r4, r3
   85ee2:	f8ca 4004 	str.w	r4, [sl, #4]
   85ee6:	f7ff febd 	bl	85c64 <__malloc_unlock>
   85eea:	4638      	mov	r0, r7
   85eec:	e73b      	b.n	85d66 <_realloc_r+0xfe>
   85eee:	682b      	ldr	r3, [r5, #0]
   85ef0:	2a1b      	cmp	r2, #27
   85ef2:	6003      	str	r3, [r0, #0]
   85ef4:	686b      	ldr	r3, [r5, #4]
   85ef6:	6043      	str	r3, [r0, #4]
   85ef8:	d828      	bhi.n	85f4c <_realloc_r+0x2e4>
   85efa:	f100 0308 	add.w	r3, r0, #8
   85efe:	f105 0208 	add.w	r2, r5, #8
   85f02:	e790      	b.n	85e26 <_realloc_r+0x1be>
   85f04:	463b      	mov	r3, r7
   85f06:	682a      	ldr	r2, [r5, #0]
   85f08:	4676      	mov	r6, lr
   85f0a:	601a      	str	r2, [r3, #0]
   85f0c:	686a      	ldr	r2, [r5, #4]
   85f0e:	46d0      	mov	r8, sl
   85f10:	605a      	str	r2, [r3, #4]
   85f12:	68aa      	ldr	r2, [r5, #8]
   85f14:	609a      	str	r2, [r3, #8]
   85f16:	f8da 3004 	ldr.w	r3, [sl, #4]
   85f1a:	e713      	b.n	85d44 <_realloc_r+0xdc>
   85f1c:	1b0b      	subs	r3, r1, r4
   85f1e:	eb08 0204 	add.w	r2, r8, r4
   85f22:	f043 0301 	orr.w	r3, r3, #1
   85f26:	f8cb 2008 	str.w	r2, [fp, #8]
   85f2a:	6053      	str	r3, [r2, #4]
   85f2c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85f30:	4648      	mov	r0, r9
   85f32:	f003 0301 	and.w	r3, r3, #1
   85f36:	431c      	orrs	r4, r3
   85f38:	f845 4c04 	str.w	r4, [r5, #-4]
   85f3c:	f7ff fe92 	bl	85c64 <__malloc_unlock>
   85f40:	4628      	mov	r0, r5
   85f42:	e710      	b.n	85d66 <_realloc_r+0xfe>
   85f44:	4629      	mov	r1, r5
   85f46:	f7ff fe27 	bl	85b98 <memmove>
   85f4a:	e772      	b.n	85e32 <_realloc_r+0x1ca>
   85f4c:	68ab      	ldr	r3, [r5, #8]
   85f4e:	2a24      	cmp	r2, #36	; 0x24
   85f50:	6083      	str	r3, [r0, #8]
   85f52:	68eb      	ldr	r3, [r5, #12]
   85f54:	60c3      	str	r3, [r0, #12]
   85f56:	d02b      	beq.n	85fb0 <_realloc_r+0x348>
   85f58:	f100 0310 	add.w	r3, r0, #16
   85f5c:	f105 0210 	add.w	r2, r5, #16
   85f60:	e761      	b.n	85e26 <_realloc_r+0x1be>
   85f62:	f850 2c04 	ldr.w	r2, [r0, #-4]
   85f66:	462f      	mov	r7, r5
   85f68:	f022 0203 	bic.w	r2, r2, #3
   85f6c:	4416      	add	r6, r2
   85f6e:	e6e9      	b.n	85d44 <_realloc_r+0xdc>
   85f70:	4629      	mov	r1, r5
   85f72:	4638      	mov	r0, r7
   85f74:	4676      	mov	r6, lr
   85f76:	46d0      	mov	r8, sl
   85f78:	f7ff fe0e 	bl	85b98 <memmove>
   85f7c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85f80:	e6e0      	b.n	85d44 <_realloc_r+0xdc>
   85f82:	463a      	mov	r2, r7
   85f84:	e719      	b.n	85dba <_realloc_r+0x152>
   85f86:	4629      	mov	r1, r5
   85f88:	4638      	mov	r0, r7
   85f8a:	461e      	mov	r6, r3
   85f8c:	46d0      	mov	r8, sl
   85f8e:	f7ff fe03 	bl	85b98 <memmove>
   85f92:	f8da 3004 	ldr.w	r3, [sl, #4]
   85f96:	e6d5      	b.n	85d44 <_realloc_r+0xdc>
   85f98:	68ab      	ldr	r3, [r5, #8]
   85f9a:	2a24      	cmp	r2, #36	; 0x24
   85f9c:	f8ca 3010 	str.w	r3, [sl, #16]
   85fa0:	68eb      	ldr	r3, [r5, #12]
   85fa2:	f8ca 3014 	str.w	r3, [sl, #20]
   85fa6:	d018      	beq.n	85fda <_realloc_r+0x372>
   85fa8:	3510      	adds	r5, #16
   85faa:	f10a 0318 	add.w	r3, sl, #24
   85fae:	e7aa      	b.n	85f06 <_realloc_r+0x29e>
   85fb0:	692a      	ldr	r2, [r5, #16]
   85fb2:	f100 0318 	add.w	r3, r0, #24
   85fb6:	6102      	str	r2, [r0, #16]
   85fb8:	6969      	ldr	r1, [r5, #20]
   85fba:	f105 0218 	add.w	r2, r5, #24
   85fbe:	6141      	str	r1, [r0, #20]
   85fc0:	e731      	b.n	85e26 <_realloc_r+0x1be>
   85fc2:	68a9      	ldr	r1, [r5, #8]
   85fc4:	2a24      	cmp	r2, #36	; 0x24
   85fc6:	f8ca 1010 	str.w	r1, [sl, #16]
   85fca:	68e9      	ldr	r1, [r5, #12]
   85fcc:	f8ca 1014 	str.w	r1, [sl, #20]
   85fd0:	d00f      	beq.n	85ff2 <_realloc_r+0x38a>
   85fd2:	3510      	adds	r5, #16
   85fd4:	f10a 0218 	add.w	r2, sl, #24
   85fd8:	e6ef      	b.n	85dba <_realloc_r+0x152>
   85fda:	692a      	ldr	r2, [r5, #16]
   85fdc:	f10a 0320 	add.w	r3, sl, #32
   85fe0:	f8ca 2018 	str.w	r2, [sl, #24]
   85fe4:	696a      	ldr	r2, [r5, #20]
   85fe6:	3518      	adds	r5, #24
   85fe8:	f8ca 201c 	str.w	r2, [sl, #28]
   85fec:	e78b      	b.n	85f06 <_realloc_r+0x29e>
   85fee:	463b      	mov	r3, r7
   85ff0:	e762      	b.n	85eb8 <_realloc_r+0x250>
   85ff2:	6929      	ldr	r1, [r5, #16]
   85ff4:	f10a 0220 	add.w	r2, sl, #32
   85ff8:	f8ca 1018 	str.w	r1, [sl, #24]
   85ffc:	6969      	ldr	r1, [r5, #20]
   85ffe:	3518      	adds	r5, #24
   86000:	f8ca 101c 	str.w	r1, [sl, #28]
   86004:	e6d9      	b.n	85dba <_realloc_r+0x152>
   86006:	4629      	mov	r1, r5
   86008:	4638      	mov	r0, r7
   8600a:	f8cd c004 	str.w	ip, [sp, #4]
   8600e:	f7ff fdc3 	bl	85b98 <memmove>
   86012:	f8dd c004 	ldr.w	ip, [sp, #4]
   86016:	e755      	b.n	85ec4 <_realloc_r+0x25c>
   86018:	68ab      	ldr	r3, [r5, #8]
   8601a:	2a24      	cmp	r2, #36	; 0x24
   8601c:	f8ca 3010 	str.w	r3, [sl, #16]
   86020:	68eb      	ldr	r3, [r5, #12]
   86022:	f8ca 3014 	str.w	r3, [sl, #20]
   86026:	d003      	beq.n	86030 <_realloc_r+0x3c8>
   86028:	3510      	adds	r5, #16
   8602a:	f10a 0318 	add.w	r3, sl, #24
   8602e:	e743      	b.n	85eb8 <_realloc_r+0x250>
   86030:	692a      	ldr	r2, [r5, #16]
   86032:	f10a 0320 	add.w	r3, sl, #32
   86036:	f8ca 2018 	str.w	r2, [sl, #24]
   8603a:	696a      	ldr	r2, [r5, #20]
   8603c:	3518      	adds	r5, #24
   8603e:	f8ca 201c 	str.w	r2, [sl, #28]
   86042:	e739      	b.n	85eb8 <_realloc_r+0x250>
   86044:	20070858 	.word	0x20070858

00086048 <_sbrk_r>:
   86048:	b538      	push	{r3, r4, r5, lr}
   8604a:	4c07      	ldr	r4, [pc, #28]	; (86068 <_sbrk_r+0x20>)
   8604c:	2300      	movs	r3, #0
   8604e:	4605      	mov	r5, r0
   86050:	4608      	mov	r0, r1
   86052:	6023      	str	r3, [r4, #0]
   86054:	f7fd fada 	bl	8360c <_sbrk>
   86058:	1c43      	adds	r3, r0, #1
   8605a:	d000      	beq.n	8605e <_sbrk_r+0x16>
   8605c:	bd38      	pop	{r3, r4, r5, pc}
   8605e:	6823      	ldr	r3, [r4, #0]
   86060:	2b00      	cmp	r3, #0
   86062:	d0fb      	beq.n	8605c <_sbrk_r+0x14>
   86064:	602b      	str	r3, [r5, #0]
   86066:	bd38      	pop	{r3, r4, r5, pc}
   86068:	20071248 	.word	0x20071248

0008606c <__sread>:
   8606c:	b510      	push	{r4, lr}
   8606e:	460c      	mov	r4, r1
   86070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86074:	f000 f9bc 	bl	863f0 <_read_r>
   86078:	2800      	cmp	r0, #0
   8607a:	db03      	blt.n	86084 <__sread+0x18>
   8607c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8607e:	4403      	add	r3, r0
   86080:	6523      	str	r3, [r4, #80]	; 0x50
   86082:	bd10      	pop	{r4, pc}
   86084:	89a3      	ldrh	r3, [r4, #12]
   86086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8608a:	81a3      	strh	r3, [r4, #12]
   8608c:	bd10      	pop	{r4, pc}
   8608e:	bf00      	nop

00086090 <__swrite>:
   86090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86094:	460c      	mov	r4, r1
   86096:	8989      	ldrh	r1, [r1, #12]
   86098:	461d      	mov	r5, r3
   8609a:	05cb      	lsls	r3, r1, #23
   8609c:	4616      	mov	r6, r2
   8609e:	4607      	mov	r7, r0
   860a0:	d506      	bpl.n	860b0 <__swrite+0x20>
   860a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   860a6:	2200      	movs	r2, #0
   860a8:	2302      	movs	r3, #2
   860aa:	f000 f98d 	bl	863c8 <_lseek_r>
   860ae:	89a1      	ldrh	r1, [r4, #12]
   860b0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   860b4:	81a1      	strh	r1, [r4, #12]
   860b6:	4638      	mov	r0, r7
   860b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   860bc:	4632      	mov	r2, r6
   860be:	462b      	mov	r3, r5
   860c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   860c4:	f000 b8a0 	b.w	86208 <_write_r>

000860c8 <__sseek>:
   860c8:	b510      	push	{r4, lr}
   860ca:	460c      	mov	r4, r1
   860cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   860d0:	f000 f97a 	bl	863c8 <_lseek_r>
   860d4:	89a3      	ldrh	r3, [r4, #12]
   860d6:	1c42      	adds	r2, r0, #1
   860d8:	bf0e      	itee	eq
   860da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   860de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   860e2:	6520      	strne	r0, [r4, #80]	; 0x50
   860e4:	81a3      	strh	r3, [r4, #12]
   860e6:	bd10      	pop	{r4, pc}

000860e8 <__sclose>:
   860e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   860ec:	f000 b8f2 	b.w	862d4 <_close_r>

000860f0 <__swbuf_r>:
   860f0:	b570      	push	{r4, r5, r6, lr}
   860f2:	460d      	mov	r5, r1
   860f4:	4614      	mov	r4, r2
   860f6:	4606      	mov	r6, r0
   860f8:	b110      	cbz	r0, 86100 <__swbuf_r+0x10>
   860fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   860fc:	2b00      	cmp	r3, #0
   860fe:	d048      	beq.n	86192 <__swbuf_r+0xa2>
   86100:	89a2      	ldrh	r2, [r4, #12]
   86102:	69a3      	ldr	r3, [r4, #24]
   86104:	b291      	uxth	r1, r2
   86106:	0708      	lsls	r0, r1, #28
   86108:	60a3      	str	r3, [r4, #8]
   8610a:	d538      	bpl.n	8617e <__swbuf_r+0x8e>
   8610c:	6923      	ldr	r3, [r4, #16]
   8610e:	2b00      	cmp	r3, #0
   86110:	d035      	beq.n	8617e <__swbuf_r+0x8e>
   86112:	0489      	lsls	r1, r1, #18
   86114:	b2ed      	uxtb	r5, r5
   86116:	d515      	bpl.n	86144 <__swbuf_r+0x54>
   86118:	6822      	ldr	r2, [r4, #0]
   8611a:	6961      	ldr	r1, [r4, #20]
   8611c:	1ad3      	subs	r3, r2, r3
   8611e:	428b      	cmp	r3, r1
   86120:	da1c      	bge.n	8615c <__swbuf_r+0x6c>
   86122:	3301      	adds	r3, #1
   86124:	68a1      	ldr	r1, [r4, #8]
   86126:	1c50      	adds	r0, r2, #1
   86128:	3901      	subs	r1, #1
   8612a:	60a1      	str	r1, [r4, #8]
   8612c:	6020      	str	r0, [r4, #0]
   8612e:	7015      	strb	r5, [r2, #0]
   86130:	6962      	ldr	r2, [r4, #20]
   86132:	429a      	cmp	r2, r3
   86134:	d01a      	beq.n	8616c <__swbuf_r+0x7c>
   86136:	89a3      	ldrh	r3, [r4, #12]
   86138:	07db      	lsls	r3, r3, #31
   8613a:	d501      	bpl.n	86140 <__swbuf_r+0x50>
   8613c:	2d0a      	cmp	r5, #10
   8613e:	d015      	beq.n	8616c <__swbuf_r+0x7c>
   86140:	4628      	mov	r0, r5
   86142:	bd70      	pop	{r4, r5, r6, pc}
   86144:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86146:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8614a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8614e:	81a2      	strh	r2, [r4, #12]
   86150:	6822      	ldr	r2, [r4, #0]
   86152:	6661      	str	r1, [r4, #100]	; 0x64
   86154:	6961      	ldr	r1, [r4, #20]
   86156:	1ad3      	subs	r3, r2, r3
   86158:	428b      	cmp	r3, r1
   8615a:	dbe2      	blt.n	86122 <__swbuf_r+0x32>
   8615c:	4630      	mov	r0, r6
   8615e:	4621      	mov	r1, r4
   86160:	f7fe fd56 	bl	84c10 <_fflush_r>
   86164:	b940      	cbnz	r0, 86178 <__swbuf_r+0x88>
   86166:	6822      	ldr	r2, [r4, #0]
   86168:	2301      	movs	r3, #1
   8616a:	e7db      	b.n	86124 <__swbuf_r+0x34>
   8616c:	4630      	mov	r0, r6
   8616e:	4621      	mov	r1, r4
   86170:	f7fe fd4e 	bl	84c10 <_fflush_r>
   86174:	2800      	cmp	r0, #0
   86176:	d0e3      	beq.n	86140 <__swbuf_r+0x50>
   86178:	f04f 30ff 	mov.w	r0, #4294967295
   8617c:	bd70      	pop	{r4, r5, r6, pc}
   8617e:	4630      	mov	r0, r6
   86180:	4621      	mov	r1, r4
   86182:	f7fe fc2f 	bl	849e4 <__swsetup_r>
   86186:	2800      	cmp	r0, #0
   86188:	d1f6      	bne.n	86178 <__swbuf_r+0x88>
   8618a:	89a2      	ldrh	r2, [r4, #12]
   8618c:	6923      	ldr	r3, [r4, #16]
   8618e:	b291      	uxth	r1, r2
   86190:	e7bf      	b.n	86112 <__swbuf_r+0x22>
   86192:	f7fe fdd1 	bl	84d38 <__sinit>
   86196:	e7b3      	b.n	86100 <__swbuf_r+0x10>

00086198 <_wcrtomb_r>:
   86198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8619c:	4605      	mov	r5, r0
   8619e:	b086      	sub	sp, #24
   861a0:	461e      	mov	r6, r3
   861a2:	460c      	mov	r4, r1
   861a4:	b1a1      	cbz	r1, 861d0 <_wcrtomb_r+0x38>
   861a6:	4b10      	ldr	r3, [pc, #64]	; (861e8 <_wcrtomb_r+0x50>)
   861a8:	4617      	mov	r7, r2
   861aa:	f8d3 8000 	ldr.w	r8, [r3]
   861ae:	f7ff f92b 	bl	85408 <__locale_charset>
   861b2:	9600      	str	r6, [sp, #0]
   861b4:	4603      	mov	r3, r0
   861b6:	4621      	mov	r1, r4
   861b8:	463a      	mov	r2, r7
   861ba:	4628      	mov	r0, r5
   861bc:	47c0      	blx	r8
   861be:	1c43      	adds	r3, r0, #1
   861c0:	d103      	bne.n	861ca <_wcrtomb_r+0x32>
   861c2:	2200      	movs	r2, #0
   861c4:	238a      	movs	r3, #138	; 0x8a
   861c6:	6032      	str	r2, [r6, #0]
   861c8:	602b      	str	r3, [r5, #0]
   861ca:	b006      	add	sp, #24
   861cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   861d0:	4b05      	ldr	r3, [pc, #20]	; (861e8 <_wcrtomb_r+0x50>)
   861d2:	681f      	ldr	r7, [r3, #0]
   861d4:	f7ff f918 	bl	85408 <__locale_charset>
   861d8:	9600      	str	r6, [sp, #0]
   861da:	4603      	mov	r3, r0
   861dc:	4622      	mov	r2, r4
   861de:	4628      	mov	r0, r5
   861e0:	a903      	add	r1, sp, #12
   861e2:	47b8      	blx	r7
   861e4:	e7eb      	b.n	861be <_wcrtomb_r+0x26>
   861e6:	bf00      	nop
   861e8:	20070c68 	.word	0x20070c68

000861ec <__ascii_wctomb>:
   861ec:	b121      	cbz	r1, 861f8 <__ascii_wctomb+0xc>
   861ee:	2aff      	cmp	r2, #255	; 0xff
   861f0:	d804      	bhi.n	861fc <__ascii_wctomb+0x10>
   861f2:	700a      	strb	r2, [r1, #0]
   861f4:	2001      	movs	r0, #1
   861f6:	4770      	bx	lr
   861f8:	4608      	mov	r0, r1
   861fa:	4770      	bx	lr
   861fc:	238a      	movs	r3, #138	; 0x8a
   861fe:	6003      	str	r3, [r0, #0]
   86200:	f04f 30ff 	mov.w	r0, #4294967295
   86204:	4770      	bx	lr
   86206:	bf00      	nop

00086208 <_write_r>:
   86208:	b570      	push	{r4, r5, r6, lr}
   8620a:	4c08      	ldr	r4, [pc, #32]	; (8622c <_write_r+0x24>)
   8620c:	4606      	mov	r6, r0
   8620e:	2500      	movs	r5, #0
   86210:	4608      	mov	r0, r1
   86212:	4611      	mov	r1, r2
   86214:	461a      	mov	r2, r3
   86216:	6025      	str	r5, [r4, #0]
   86218:	f7fb f888 	bl	8132c <_write>
   8621c:	1c43      	adds	r3, r0, #1
   8621e:	d000      	beq.n	86222 <_write_r+0x1a>
   86220:	bd70      	pop	{r4, r5, r6, pc}
   86222:	6823      	ldr	r3, [r4, #0]
   86224:	2b00      	cmp	r3, #0
   86226:	d0fb      	beq.n	86220 <_write_r+0x18>
   86228:	6033      	str	r3, [r6, #0]
   8622a:	bd70      	pop	{r4, r5, r6, pc}
   8622c:	20071248 	.word	0x20071248

00086230 <__register_exitproc>:
   86230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86234:	4c25      	ldr	r4, [pc, #148]	; (862cc <__register_exitproc+0x9c>)
   86236:	4606      	mov	r6, r0
   86238:	6825      	ldr	r5, [r4, #0]
   8623a:	4688      	mov	r8, r1
   8623c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86240:	4692      	mov	sl, r2
   86242:	4699      	mov	r9, r3
   86244:	b3c4      	cbz	r4, 862b8 <__register_exitproc+0x88>
   86246:	6860      	ldr	r0, [r4, #4]
   86248:	281f      	cmp	r0, #31
   8624a:	dc17      	bgt.n	8627c <__register_exitproc+0x4c>
   8624c:	1c41      	adds	r1, r0, #1
   8624e:	b176      	cbz	r6, 8626e <__register_exitproc+0x3e>
   86250:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86254:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   86258:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8625c:	2201      	movs	r2, #1
   8625e:	4082      	lsls	r2, r0
   86260:	4315      	orrs	r5, r2
   86262:	2e02      	cmp	r6, #2
   86264:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   86268:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8626c:	d01e      	beq.n	862ac <__register_exitproc+0x7c>
   8626e:	1c83      	adds	r3, r0, #2
   86270:	6061      	str	r1, [r4, #4]
   86272:	2000      	movs	r0, #0
   86274:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   86278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8627c:	4b14      	ldr	r3, [pc, #80]	; (862d0 <__register_exitproc+0xa0>)
   8627e:	b303      	cbz	r3, 862c2 <__register_exitproc+0x92>
   86280:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86284:	f7ff f93a 	bl	854fc <malloc>
   86288:	4604      	mov	r4, r0
   8628a:	b1d0      	cbz	r0, 862c2 <__register_exitproc+0x92>
   8628c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86290:	2700      	movs	r7, #0
   86292:	e884 0088 	stmia.w	r4, {r3, r7}
   86296:	4638      	mov	r0, r7
   86298:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8629c:	2101      	movs	r1, #1
   8629e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   862a2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   862a6:	2e00      	cmp	r6, #0
   862a8:	d0e1      	beq.n	8626e <__register_exitproc+0x3e>
   862aa:	e7d1      	b.n	86250 <__register_exitproc+0x20>
   862ac:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   862b0:	431a      	orrs	r2, r3
   862b2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   862b6:	e7da      	b.n	8626e <__register_exitproc+0x3e>
   862b8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   862bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   862c0:	e7c1      	b.n	86246 <__register_exitproc+0x16>
   862c2:	f04f 30ff 	mov.w	r0, #4294967295
   862c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   862ca:	bf00      	nop
   862cc:	00086a5c 	.word	0x00086a5c
   862d0:	000854fd 	.word	0x000854fd

000862d4 <_close_r>:
   862d4:	b538      	push	{r3, r4, r5, lr}
   862d6:	4c07      	ldr	r4, [pc, #28]	; (862f4 <_close_r+0x20>)
   862d8:	2300      	movs	r3, #0
   862da:	4605      	mov	r5, r0
   862dc:	4608      	mov	r0, r1
   862de:	6023      	str	r3, [r4, #0]
   862e0:	f7fd f9b4 	bl	8364c <_close>
   862e4:	1c43      	adds	r3, r0, #1
   862e6:	d000      	beq.n	862ea <_close_r+0x16>
   862e8:	bd38      	pop	{r3, r4, r5, pc}
   862ea:	6823      	ldr	r3, [r4, #0]
   862ec:	2b00      	cmp	r3, #0
   862ee:	d0fb      	beq.n	862e8 <_close_r+0x14>
   862f0:	602b      	str	r3, [r5, #0]
   862f2:	bd38      	pop	{r3, r4, r5, pc}
   862f4:	20071248 	.word	0x20071248

000862f8 <_fclose_r>:
   862f8:	2900      	cmp	r1, #0
   862fa:	d03d      	beq.n	86378 <_fclose_r+0x80>
   862fc:	b570      	push	{r4, r5, r6, lr}
   862fe:	4605      	mov	r5, r0
   86300:	460c      	mov	r4, r1
   86302:	b108      	cbz	r0, 86308 <_fclose_r+0x10>
   86304:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86306:	b37b      	cbz	r3, 86368 <_fclose_r+0x70>
   86308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8630c:	b90b      	cbnz	r3, 86312 <_fclose_r+0x1a>
   8630e:	2000      	movs	r0, #0
   86310:	bd70      	pop	{r4, r5, r6, pc}
   86312:	4628      	mov	r0, r5
   86314:	4621      	mov	r1, r4
   86316:	f7fe fbd7 	bl	84ac8 <__sflush_r>
   8631a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8631c:	4606      	mov	r6, r0
   8631e:	b133      	cbz	r3, 8632e <_fclose_r+0x36>
   86320:	4628      	mov	r0, r5
   86322:	69e1      	ldr	r1, [r4, #28]
   86324:	4798      	blx	r3
   86326:	2800      	cmp	r0, #0
   86328:	bfb8      	it	lt
   8632a:	f04f 36ff 	movlt.w	r6, #4294967295
   8632e:	89a3      	ldrh	r3, [r4, #12]
   86330:	061b      	lsls	r3, r3, #24
   86332:	d41c      	bmi.n	8636e <_fclose_r+0x76>
   86334:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86336:	b141      	cbz	r1, 8634a <_fclose_r+0x52>
   86338:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8633c:	4299      	cmp	r1, r3
   8633e:	d002      	beq.n	86346 <_fclose_r+0x4e>
   86340:	4628      	mov	r0, r5
   86342:	f7fe fdd1 	bl	84ee8 <_free_r>
   86346:	2300      	movs	r3, #0
   86348:	6323      	str	r3, [r4, #48]	; 0x30
   8634a:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8634c:	b121      	cbz	r1, 86358 <_fclose_r+0x60>
   8634e:	4628      	mov	r0, r5
   86350:	f7fe fdca 	bl	84ee8 <_free_r>
   86354:	2300      	movs	r3, #0
   86356:	6463      	str	r3, [r4, #68]	; 0x44
   86358:	f7fe fcf4 	bl	84d44 <__sfp_lock_acquire>
   8635c:	2300      	movs	r3, #0
   8635e:	81a3      	strh	r3, [r4, #12]
   86360:	f7fe fcf2 	bl	84d48 <__sfp_lock_release>
   86364:	4630      	mov	r0, r6
   86366:	bd70      	pop	{r4, r5, r6, pc}
   86368:	f7fe fce6 	bl	84d38 <__sinit>
   8636c:	e7cc      	b.n	86308 <_fclose_r+0x10>
   8636e:	4628      	mov	r0, r5
   86370:	6921      	ldr	r1, [r4, #16]
   86372:	f7fe fdb9 	bl	84ee8 <_free_r>
   86376:	e7dd      	b.n	86334 <_fclose_r+0x3c>
   86378:	2000      	movs	r0, #0
   8637a:	4770      	bx	lr

0008637c <_fstat_r>:
   8637c:	b538      	push	{r3, r4, r5, lr}
   8637e:	4c08      	ldr	r4, [pc, #32]	; (863a0 <_fstat_r+0x24>)
   86380:	2300      	movs	r3, #0
   86382:	4605      	mov	r5, r0
   86384:	4608      	mov	r0, r1
   86386:	4611      	mov	r1, r2
   86388:	6023      	str	r3, [r4, #0]
   8638a:	f7fd f96b 	bl	83664 <_fstat>
   8638e:	1c43      	adds	r3, r0, #1
   86390:	d000      	beq.n	86394 <_fstat_r+0x18>
   86392:	bd38      	pop	{r3, r4, r5, pc}
   86394:	6823      	ldr	r3, [r4, #0]
   86396:	2b00      	cmp	r3, #0
   86398:	d0fb      	beq.n	86392 <_fstat_r+0x16>
   8639a:	602b      	str	r3, [r5, #0]
   8639c:	bd38      	pop	{r3, r4, r5, pc}
   8639e:	bf00      	nop
   863a0:	20071248 	.word	0x20071248

000863a4 <_isatty_r>:
   863a4:	b538      	push	{r3, r4, r5, lr}
   863a6:	4c07      	ldr	r4, [pc, #28]	; (863c4 <_isatty_r+0x20>)
   863a8:	2300      	movs	r3, #0
   863aa:	4605      	mov	r5, r0
   863ac:	4608      	mov	r0, r1
   863ae:	6023      	str	r3, [r4, #0]
   863b0:	f7fd f968 	bl	83684 <_isatty>
   863b4:	1c43      	adds	r3, r0, #1
   863b6:	d000      	beq.n	863ba <_isatty_r+0x16>
   863b8:	bd38      	pop	{r3, r4, r5, pc}
   863ba:	6823      	ldr	r3, [r4, #0]
   863bc:	2b00      	cmp	r3, #0
   863be:	d0fb      	beq.n	863b8 <_isatty_r+0x14>
   863c0:	602b      	str	r3, [r5, #0]
   863c2:	bd38      	pop	{r3, r4, r5, pc}
   863c4:	20071248 	.word	0x20071248

000863c8 <_lseek_r>:
   863c8:	b570      	push	{r4, r5, r6, lr}
   863ca:	4c08      	ldr	r4, [pc, #32]	; (863ec <_lseek_r+0x24>)
   863cc:	4606      	mov	r6, r0
   863ce:	2500      	movs	r5, #0
   863d0:	4608      	mov	r0, r1
   863d2:	4611      	mov	r1, r2
   863d4:	461a      	mov	r2, r3
   863d6:	6025      	str	r5, [r4, #0]
   863d8:	f7fd f960 	bl	8369c <_lseek>
   863dc:	1c43      	adds	r3, r0, #1
   863de:	d000      	beq.n	863e2 <_lseek_r+0x1a>
   863e0:	bd70      	pop	{r4, r5, r6, pc}
   863e2:	6823      	ldr	r3, [r4, #0]
   863e4:	2b00      	cmp	r3, #0
   863e6:	d0fb      	beq.n	863e0 <_lseek_r+0x18>
   863e8:	6033      	str	r3, [r6, #0]
   863ea:	bd70      	pop	{r4, r5, r6, pc}
   863ec:	20071248 	.word	0x20071248

000863f0 <_read_r>:
   863f0:	b570      	push	{r4, r5, r6, lr}
   863f2:	4c08      	ldr	r4, [pc, #32]	; (86414 <_read_r+0x24>)
   863f4:	4606      	mov	r6, r0
   863f6:	2500      	movs	r5, #0
   863f8:	4608      	mov	r0, r1
   863fa:	4611      	mov	r1, r2
   863fc:	461a      	mov	r2, r3
   863fe:	6025      	str	r5, [r4, #0]
   86400:	f7fa ff68 	bl	812d4 <_read>
   86404:	1c43      	adds	r3, r0, #1
   86406:	d000      	beq.n	8640a <_read_r+0x1a>
   86408:	bd70      	pop	{r4, r5, r6, pc}
   8640a:	6823      	ldr	r3, [r4, #0]
   8640c:	2b00      	cmp	r3, #0
   8640e:	d0fb      	beq.n	86408 <_read_r+0x18>
   86410:	6033      	str	r3, [r6, #0]
   86412:	bd70      	pop	{r4, r5, r6, pc}
   86414:	20071248 	.word	0x20071248

00086418 <__aeabi_uldivmod>:
   86418:	b953      	cbnz	r3, 86430 <__aeabi_uldivmod+0x18>
   8641a:	b94a      	cbnz	r2, 86430 <__aeabi_uldivmod+0x18>
   8641c:	2900      	cmp	r1, #0
   8641e:	bf08      	it	eq
   86420:	2800      	cmpeq	r0, #0
   86422:	bf1c      	itt	ne
   86424:	f04f 31ff 	movne.w	r1, #4294967295
   86428:	f04f 30ff 	movne.w	r0, #4294967295
   8642c:	f000 b83c 	b.w	864a8 <__aeabi_idiv0>
   86430:	b082      	sub	sp, #8
   86432:	46ec      	mov	ip, sp
   86434:	e92d 5000 	stmdb	sp!, {ip, lr}
   86438:	f000 f81e 	bl	86478 <__gnu_uldivmod_helper>
   8643c:	f8dd e004 	ldr.w	lr, [sp, #4]
   86440:	b002      	add	sp, #8
   86442:	bc0c      	pop	{r2, r3}
   86444:	4770      	bx	lr
   86446:	bf00      	nop

00086448 <__gnu_ldivmod_helper>:
   86448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8644c:	9c06      	ldr	r4, [sp, #24]
   8644e:	4690      	mov	r8, r2
   86450:	4606      	mov	r6, r0
   86452:	460f      	mov	r7, r1
   86454:	461d      	mov	r5, r3
   86456:	f000 f829 	bl	864ac <__divdi3>
   8645a:	fb08 fc01 	mul.w	ip, r8, r1
   8645e:	fba8 2300 	umull	r2, r3, r8, r0
   86462:	fb00 c505 	mla	r5, r0, r5, ip
   86466:	1ab2      	subs	r2, r6, r2
   86468:	442b      	add	r3, r5
   8646a:	eb67 0303 	sbc.w	r3, r7, r3
   8646e:	4686      	mov	lr, r0
   86470:	e9c4 2300 	strd	r2, r3, [r4]
   86474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00086478 <__gnu_uldivmod_helper>:
   86478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8647c:	9e08      	ldr	r6, [sp, #32]
   8647e:	4617      	mov	r7, r2
   86480:	4680      	mov	r8, r0
   86482:	4689      	mov	r9, r1
   86484:	461d      	mov	r5, r3
   86486:	f000 f967 	bl	86758 <__udivdi3>
   8648a:	fb00 f305 	mul.w	r3, r0, r5
   8648e:	fba0 4507 	umull	r4, r5, r0, r7
   86492:	fb07 3701 	mla	r7, r7, r1, r3
   86496:	ebb8 0404 	subs.w	r4, r8, r4
   8649a:	443d      	add	r5, r7
   8649c:	eb69 0505 	sbc.w	r5, r9, r5
   864a0:	e9c6 4500 	strd	r4, r5, [r6]
   864a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000864a8 <__aeabi_idiv0>:
   864a8:	4770      	bx	lr
   864aa:	bf00      	nop

000864ac <__divdi3>:
   864ac:	2900      	cmp	r1, #0
   864ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   864b2:	f2c0 80a8 	blt.w	86606 <__divdi3+0x15a>
   864b6:	2600      	movs	r6, #0
   864b8:	2b00      	cmp	r3, #0
   864ba:	f2c0 809e 	blt.w	865fa <__divdi3+0x14e>
   864be:	4681      	mov	r9, r0
   864c0:	468e      	mov	lr, r1
   864c2:	4690      	mov	r8, r2
   864c4:	469c      	mov	ip, r3
   864c6:	4617      	mov	r7, r2
   864c8:	4604      	mov	r4, r0
   864ca:	460d      	mov	r5, r1
   864cc:	2b00      	cmp	r3, #0
   864ce:	d13d      	bne.n	8654c <__divdi3+0xa0>
   864d0:	428a      	cmp	r2, r1
   864d2:	d959      	bls.n	86588 <__divdi3+0xdc>
   864d4:	fab2 f382 	clz	r3, r2
   864d8:	b13b      	cbz	r3, 864ea <__divdi3+0x3e>
   864da:	f1c3 0220 	rsb	r2, r3, #32
   864de:	409d      	lsls	r5, r3
   864e0:	fa20 f202 	lsr.w	r2, r0, r2
   864e4:	409f      	lsls	r7, r3
   864e6:	4315      	orrs	r5, r2
   864e8:	409c      	lsls	r4, r3
   864ea:	0c39      	lsrs	r1, r7, #16
   864ec:	fbb5 f0f1 	udiv	r0, r5, r1
   864f0:	fa1f fe87 	uxth.w	lr, r7
   864f4:	fb01 5510 	mls	r5, r1, r0, r5
   864f8:	fb0e f300 	mul.w	r3, lr, r0
   864fc:	0c22      	lsrs	r2, r4, #16
   864fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   86502:	42ab      	cmp	r3, r5
   86504:	d909      	bls.n	8651a <__divdi3+0x6e>
   86506:	19ed      	adds	r5, r5, r7
   86508:	f100 32ff 	add.w	r2, r0, #4294967295
   8650c:	f080 810b 	bcs.w	86726 <__divdi3+0x27a>
   86510:	42ab      	cmp	r3, r5
   86512:	f240 8108 	bls.w	86726 <__divdi3+0x27a>
   86516:	3802      	subs	r0, #2
   86518:	443d      	add	r5, r7
   8651a:	1aed      	subs	r5, r5, r3
   8651c:	fbb5 f3f1 	udiv	r3, r5, r1
   86520:	fb01 5513 	mls	r5, r1, r3, r5
   86524:	fb0e fe03 	mul.w	lr, lr, r3
   86528:	b2a4      	uxth	r4, r4
   8652a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   8652e:	45ae      	cmp	lr, r5
   86530:	d908      	bls.n	86544 <__divdi3+0x98>
   86532:	19ed      	adds	r5, r5, r7
   86534:	f103 32ff 	add.w	r2, r3, #4294967295
   86538:	f080 80f7 	bcs.w	8672a <__divdi3+0x27e>
   8653c:	45ae      	cmp	lr, r5
   8653e:	f240 80f4 	bls.w	8672a <__divdi3+0x27e>
   86542:	3b02      	subs	r3, #2
   86544:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   86548:	2200      	movs	r2, #0
   8654a:	e003      	b.n	86554 <__divdi3+0xa8>
   8654c:	428b      	cmp	r3, r1
   8654e:	d90f      	bls.n	86570 <__divdi3+0xc4>
   86550:	2200      	movs	r2, #0
   86552:	4613      	mov	r3, r2
   86554:	1c34      	adds	r4, r6, #0
   86556:	bf18      	it	ne
   86558:	2401      	movne	r4, #1
   8655a:	4260      	negs	r0, r4
   8655c:	f04f 0500 	mov.w	r5, #0
   86560:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   86564:	4058      	eors	r0, r3
   86566:	4051      	eors	r1, r2
   86568:	1900      	adds	r0, r0, r4
   8656a:	4169      	adcs	r1, r5
   8656c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86570:	fab3 f283 	clz	r2, r3
   86574:	2a00      	cmp	r2, #0
   86576:	f040 8089 	bne.w	8668c <__divdi3+0x1e0>
   8657a:	428b      	cmp	r3, r1
   8657c:	d302      	bcc.n	86584 <__divdi3+0xd8>
   8657e:	4580      	cmp	r8, r0
   86580:	f200 80e2 	bhi.w	86748 <__divdi3+0x29c>
   86584:	2301      	movs	r3, #1
   86586:	e7e5      	b.n	86554 <__divdi3+0xa8>
   86588:	b912      	cbnz	r2, 86590 <__divdi3+0xe4>
   8658a:	2301      	movs	r3, #1
   8658c:	fbb3 f7f2 	udiv	r7, r3, r2
   86590:	fab7 f887 	clz	r8, r7
   86594:	f1b8 0f00 	cmp.w	r8, #0
   86598:	d13b      	bne.n	86612 <__divdi3+0x166>
   8659a:	1bed      	subs	r5, r5, r7
   8659c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   865a0:	fa1f fe87 	uxth.w	lr, r7
   865a4:	2201      	movs	r2, #1
   865a6:	fbb5 f0fc 	udiv	r0, r5, ip
   865aa:	fb0c 5510 	mls	r5, ip, r0, r5
   865ae:	fb0e f300 	mul.w	r3, lr, r0
   865b2:	0c21      	lsrs	r1, r4, #16
   865b4:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   865b8:	42ab      	cmp	r3, r5
   865ba:	d907      	bls.n	865cc <__divdi3+0x120>
   865bc:	19ed      	adds	r5, r5, r7
   865be:	f100 31ff 	add.w	r1, r0, #4294967295
   865c2:	d202      	bcs.n	865ca <__divdi3+0x11e>
   865c4:	42ab      	cmp	r3, r5
   865c6:	f200 80c3 	bhi.w	86750 <__divdi3+0x2a4>
   865ca:	4608      	mov	r0, r1
   865cc:	1aed      	subs	r5, r5, r3
   865ce:	fbb5 f3fc 	udiv	r3, r5, ip
   865d2:	fb0c 5513 	mls	r5, ip, r3, r5
   865d6:	fb0e fe03 	mul.w	lr, lr, r3
   865da:	b2a4      	uxth	r4, r4
   865dc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   865e0:	45ae      	cmp	lr, r5
   865e2:	d907      	bls.n	865f4 <__divdi3+0x148>
   865e4:	19ed      	adds	r5, r5, r7
   865e6:	f103 31ff 	add.w	r1, r3, #4294967295
   865ea:	d202      	bcs.n	865f2 <__divdi3+0x146>
   865ec:	45ae      	cmp	lr, r5
   865ee:	f200 80ad 	bhi.w	8674c <__divdi3+0x2a0>
   865f2:	460b      	mov	r3, r1
   865f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   865f8:	e7ac      	b.n	86554 <__divdi3+0xa8>
   865fa:	4252      	negs	r2, r2
   865fc:	ea6f 0606 	mvn.w	r6, r6
   86600:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   86604:	e75b      	b.n	864be <__divdi3+0x12>
   86606:	4240      	negs	r0, r0
   86608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8660c:	f04f 36ff 	mov.w	r6, #4294967295
   86610:	e752      	b.n	864b8 <__divdi3+0xc>
   86612:	fa07 f708 	lsl.w	r7, r7, r8
   86616:	f1c8 0220 	rsb	r2, r8, #32
   8661a:	fa25 f302 	lsr.w	r3, r5, r2
   8661e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86622:	fbb3 f1fc 	udiv	r1, r3, ip
   86626:	fa1f fe87 	uxth.w	lr, r7
   8662a:	fb0c 3311 	mls	r3, ip, r1, r3
   8662e:	fa24 f202 	lsr.w	r2, r4, r2
   86632:	fa05 f508 	lsl.w	r5, r5, r8
   86636:	fb0e f901 	mul.w	r9, lr, r1
   8663a:	432a      	orrs	r2, r5
   8663c:	0c10      	lsrs	r0, r2, #16
   8663e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   86642:	4599      	cmp	r9, r3
   86644:	fa04 f408 	lsl.w	r4, r4, r8
   86648:	d907      	bls.n	8665a <__divdi3+0x1ae>
   8664a:	19db      	adds	r3, r3, r7
   8664c:	f101 30ff 	add.w	r0, r1, #4294967295
   86650:	d278      	bcs.n	86744 <__divdi3+0x298>
   86652:	4599      	cmp	r9, r3
   86654:	d976      	bls.n	86744 <__divdi3+0x298>
   86656:	3902      	subs	r1, #2
   86658:	443b      	add	r3, r7
   8665a:	ebc9 0303 	rsb	r3, r9, r3
   8665e:	fbb3 f0fc 	udiv	r0, r3, ip
   86662:	fb0c 3310 	mls	r3, ip, r0, r3
   86666:	fb0e f500 	mul.w	r5, lr, r0
   8666a:	b292      	uxth	r2, r2
   8666c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   86670:	429d      	cmp	r5, r3
   86672:	d907      	bls.n	86684 <__divdi3+0x1d8>
   86674:	19db      	adds	r3, r3, r7
   86676:	f100 32ff 	add.w	r2, r0, #4294967295
   8667a:	d25f      	bcs.n	8673c <__divdi3+0x290>
   8667c:	429d      	cmp	r5, r3
   8667e:	d95d      	bls.n	8673c <__divdi3+0x290>
   86680:	3802      	subs	r0, #2
   86682:	443b      	add	r3, r7
   86684:	1b5d      	subs	r5, r3, r5
   86686:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   8668a:	e78c      	b.n	865a6 <__divdi3+0xfa>
   8668c:	f1c2 0320 	rsb	r3, r2, #32
   86690:	fa28 f103 	lsr.w	r1, r8, r3
   86694:	fa0c fc02 	lsl.w	ip, ip, r2
   86698:	ea41 0c0c 	orr.w	ip, r1, ip
   8669c:	ea4f 401c 	mov.w	r0, ip, lsr #16
   866a0:	fa2e f103 	lsr.w	r1, lr, r3
   866a4:	fbb1 f5f0 	udiv	r5, r1, r0
   866a8:	fa1f f78c 	uxth.w	r7, ip
   866ac:	fb00 1115 	mls	r1, r0, r5, r1
   866b0:	fa29 f303 	lsr.w	r3, r9, r3
   866b4:	fa0e fe02 	lsl.w	lr, lr, r2
   866b8:	fb07 f905 	mul.w	r9, r7, r5
   866bc:	ea43 0e0e 	orr.w	lr, r3, lr
   866c0:	ea4f 431e 	mov.w	r3, lr, lsr #16
   866c4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   866c8:	4589      	cmp	r9, r1
   866ca:	fa08 f802 	lsl.w	r8, r8, r2
   866ce:	d908      	bls.n	866e2 <__divdi3+0x236>
   866d0:	eb11 010c 	adds.w	r1, r1, ip
   866d4:	f105 33ff 	add.w	r3, r5, #4294967295
   866d8:	d232      	bcs.n	86740 <__divdi3+0x294>
   866da:	4589      	cmp	r9, r1
   866dc:	d930      	bls.n	86740 <__divdi3+0x294>
   866de:	3d02      	subs	r5, #2
   866e0:	4461      	add	r1, ip
   866e2:	ebc9 0101 	rsb	r1, r9, r1
   866e6:	fbb1 f3f0 	udiv	r3, r1, r0
   866ea:	fb00 1113 	mls	r1, r0, r3, r1
   866ee:	fb07 f703 	mul.w	r7, r7, r3
   866f2:	fa1f fe8e 	uxth.w	lr, lr
   866f6:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   866fa:	4577      	cmp	r7, lr
   866fc:	d908      	bls.n	86710 <__divdi3+0x264>
   866fe:	eb1e 0e0c 	adds.w	lr, lr, ip
   86702:	f103 31ff 	add.w	r1, r3, #4294967295
   86706:	d217      	bcs.n	86738 <__divdi3+0x28c>
   86708:	4577      	cmp	r7, lr
   8670a:	d915      	bls.n	86738 <__divdi3+0x28c>
   8670c:	3b02      	subs	r3, #2
   8670e:	44e6      	add	lr, ip
   86710:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   86714:	fba3 8908 	umull	r8, r9, r3, r8
   86718:	ebc7 0e0e 	rsb	lr, r7, lr
   8671c:	45ce      	cmp	lr, r9
   8671e:	d309      	bcc.n	86734 <__divdi3+0x288>
   86720:	d005      	beq.n	8672e <__divdi3+0x282>
   86722:	2200      	movs	r2, #0
   86724:	e716      	b.n	86554 <__divdi3+0xa8>
   86726:	4610      	mov	r0, r2
   86728:	e6f7      	b.n	8651a <__divdi3+0x6e>
   8672a:	4613      	mov	r3, r2
   8672c:	e70a      	b.n	86544 <__divdi3+0x98>
   8672e:	4094      	lsls	r4, r2
   86730:	4544      	cmp	r4, r8
   86732:	d2f6      	bcs.n	86722 <__divdi3+0x276>
   86734:	3b01      	subs	r3, #1
   86736:	e7f4      	b.n	86722 <__divdi3+0x276>
   86738:	460b      	mov	r3, r1
   8673a:	e7e9      	b.n	86710 <__divdi3+0x264>
   8673c:	4610      	mov	r0, r2
   8673e:	e7a1      	b.n	86684 <__divdi3+0x1d8>
   86740:	461d      	mov	r5, r3
   86742:	e7ce      	b.n	866e2 <__divdi3+0x236>
   86744:	4601      	mov	r1, r0
   86746:	e788      	b.n	8665a <__divdi3+0x1ae>
   86748:	4613      	mov	r3, r2
   8674a:	e703      	b.n	86554 <__divdi3+0xa8>
   8674c:	3b02      	subs	r3, #2
   8674e:	e751      	b.n	865f4 <__divdi3+0x148>
   86750:	3802      	subs	r0, #2
   86752:	443d      	add	r5, r7
   86754:	e73a      	b.n	865cc <__divdi3+0x120>
   86756:	bf00      	nop

00086758 <__udivdi3>:
   86758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8675c:	2b00      	cmp	r3, #0
   8675e:	d144      	bne.n	867ea <__udivdi3+0x92>
   86760:	428a      	cmp	r2, r1
   86762:	4615      	mov	r5, r2
   86764:	4604      	mov	r4, r0
   86766:	d94f      	bls.n	86808 <__udivdi3+0xb0>
   86768:	fab2 f782 	clz	r7, r2
   8676c:	460e      	mov	r6, r1
   8676e:	b14f      	cbz	r7, 86784 <__udivdi3+0x2c>
   86770:	f1c7 0320 	rsb	r3, r7, #32
   86774:	40b9      	lsls	r1, r7
   86776:	fa20 f603 	lsr.w	r6, r0, r3
   8677a:	fa02 f507 	lsl.w	r5, r2, r7
   8677e:	430e      	orrs	r6, r1
   86780:	fa00 f407 	lsl.w	r4, r0, r7
   86784:	0c2f      	lsrs	r7, r5, #16
   86786:	fbb6 f0f7 	udiv	r0, r6, r7
   8678a:	fa1f fe85 	uxth.w	lr, r5
   8678e:	fb07 6210 	mls	r2, r7, r0, r6
   86792:	fb0e f100 	mul.w	r1, lr, r0
   86796:	0c26      	lsrs	r6, r4, #16
   86798:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   8679c:	4299      	cmp	r1, r3
   8679e:	d909      	bls.n	867b4 <__udivdi3+0x5c>
   867a0:	195b      	adds	r3, r3, r5
   867a2:	f100 32ff 	add.w	r2, r0, #4294967295
   867a6:	f080 80ee 	bcs.w	86986 <__udivdi3+0x22e>
   867aa:	4299      	cmp	r1, r3
   867ac:	f240 80eb 	bls.w	86986 <__udivdi3+0x22e>
   867b0:	3802      	subs	r0, #2
   867b2:	442b      	add	r3, r5
   867b4:	1a59      	subs	r1, r3, r1
   867b6:	fbb1 f3f7 	udiv	r3, r1, r7
   867ba:	fb07 1113 	mls	r1, r7, r3, r1
   867be:	fb0e fe03 	mul.w	lr, lr, r3
   867c2:	b2a4      	uxth	r4, r4
   867c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   867c8:	458e      	cmp	lr, r1
   867ca:	d908      	bls.n	867de <__udivdi3+0x86>
   867cc:	1949      	adds	r1, r1, r5
   867ce:	f103 32ff 	add.w	r2, r3, #4294967295
   867d2:	f080 80da 	bcs.w	8698a <__udivdi3+0x232>
   867d6:	458e      	cmp	lr, r1
   867d8:	f240 80d7 	bls.w	8698a <__udivdi3+0x232>
   867dc:	3b02      	subs	r3, #2
   867de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   867e2:	2600      	movs	r6, #0
   867e4:	4631      	mov	r1, r6
   867e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   867ea:	428b      	cmp	r3, r1
   867ec:	d847      	bhi.n	8687e <__udivdi3+0x126>
   867ee:	fab3 f683 	clz	r6, r3
   867f2:	2e00      	cmp	r6, #0
   867f4:	d148      	bne.n	86888 <__udivdi3+0x130>
   867f6:	428b      	cmp	r3, r1
   867f8:	d302      	bcc.n	86800 <__udivdi3+0xa8>
   867fa:	4282      	cmp	r2, r0
   867fc:	f200 80cf 	bhi.w	8699e <__udivdi3+0x246>
   86800:	2001      	movs	r0, #1
   86802:	4631      	mov	r1, r6
   86804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86808:	b912      	cbnz	r2, 86810 <__udivdi3+0xb8>
   8680a:	2501      	movs	r5, #1
   8680c:	fbb5 f5f2 	udiv	r5, r5, r2
   86810:	fab5 fc85 	clz	ip, r5
   86814:	f1bc 0f00 	cmp.w	ip, #0
   86818:	d178      	bne.n	8690c <__udivdi3+0x1b4>
   8681a:	1b49      	subs	r1, r1, r5
   8681c:	0c2f      	lsrs	r7, r5, #16
   8681e:	fa1f fe85 	uxth.w	lr, r5
   86822:	2601      	movs	r6, #1
   86824:	fbb1 f0f7 	udiv	r0, r1, r7
   86828:	fb07 1110 	mls	r1, r7, r0, r1
   8682c:	fb0e f200 	mul.w	r2, lr, r0
   86830:	0c23      	lsrs	r3, r4, #16
   86832:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   86836:	428a      	cmp	r2, r1
   86838:	d907      	bls.n	8684a <__udivdi3+0xf2>
   8683a:	1949      	adds	r1, r1, r5
   8683c:	f100 33ff 	add.w	r3, r0, #4294967295
   86840:	d202      	bcs.n	86848 <__udivdi3+0xf0>
   86842:	428a      	cmp	r2, r1
   86844:	f200 80bc 	bhi.w	869c0 <__udivdi3+0x268>
   86848:	4618      	mov	r0, r3
   8684a:	1a89      	subs	r1, r1, r2
   8684c:	fbb1 f3f7 	udiv	r3, r1, r7
   86850:	fb07 1113 	mls	r1, r7, r3, r1
   86854:	fb0e fe03 	mul.w	lr, lr, r3
   86858:	b2a4      	uxth	r4, r4
   8685a:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   8685e:	4596      	cmp	lr, r2
   86860:	d908      	bls.n	86874 <__udivdi3+0x11c>
   86862:	1952      	adds	r2, r2, r5
   86864:	f103 31ff 	add.w	r1, r3, #4294967295
   86868:	f080 8091 	bcs.w	8698e <__udivdi3+0x236>
   8686c:	4596      	cmp	lr, r2
   8686e:	f240 808e 	bls.w	8698e <__udivdi3+0x236>
   86872:	3b02      	subs	r3, #2
   86874:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86878:	4631      	mov	r1, r6
   8687a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8687e:	2600      	movs	r6, #0
   86880:	4630      	mov	r0, r6
   86882:	4631      	mov	r1, r6
   86884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86888:	f1c6 0420 	rsb	r4, r6, #32
   8688c:	fa22 f504 	lsr.w	r5, r2, r4
   86890:	40b3      	lsls	r3, r6
   86892:	432b      	orrs	r3, r5
   86894:	fa21 f704 	lsr.w	r7, r1, r4
   86898:	ea4f 4813 	mov.w	r8, r3, lsr #16
   8689c:	fbb7 fcf8 	udiv	ip, r7, r8
   868a0:	fa1f f983 	uxth.w	r9, r3
   868a4:	fb08 771c 	mls	r7, r8, ip, r7
   868a8:	fa20 fe04 	lsr.w	lr, r0, r4
   868ac:	fa01 f506 	lsl.w	r5, r1, r6
   868b0:	fb09 f40c 	mul.w	r4, r9, ip
   868b4:	ea4e 0505 	orr.w	r5, lr, r5
   868b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   868bc:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   868c0:	42bc      	cmp	r4, r7
   868c2:	fa02 f206 	lsl.w	r2, r2, r6
   868c6:	d904      	bls.n	868d2 <__udivdi3+0x17a>
   868c8:	18ff      	adds	r7, r7, r3
   868ca:	f10c 31ff 	add.w	r1, ip, #4294967295
   868ce:	d368      	bcc.n	869a2 <__udivdi3+0x24a>
   868d0:	468c      	mov	ip, r1
   868d2:	1b3f      	subs	r7, r7, r4
   868d4:	fbb7 f4f8 	udiv	r4, r7, r8
   868d8:	fb08 7714 	mls	r7, r8, r4, r7
   868dc:	fb09 f904 	mul.w	r9, r9, r4
   868e0:	b2ad      	uxth	r5, r5
   868e2:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   868e6:	4589      	cmp	r9, r1
   868e8:	d904      	bls.n	868f4 <__udivdi3+0x19c>
   868ea:	18c9      	adds	r1, r1, r3
   868ec:	f104 35ff 	add.w	r5, r4, #4294967295
   868f0:	d35d      	bcc.n	869ae <__udivdi3+0x256>
   868f2:	462c      	mov	r4, r5
   868f4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   868f8:	fba4 2302 	umull	r2, r3, r4, r2
   868fc:	ebc9 0101 	rsb	r1, r9, r1
   86900:	4299      	cmp	r1, r3
   86902:	d349      	bcc.n	86998 <__udivdi3+0x240>
   86904:	d045      	beq.n	86992 <__udivdi3+0x23a>
   86906:	4620      	mov	r0, r4
   86908:	2600      	movs	r6, #0
   8690a:	e76b      	b.n	867e4 <__udivdi3+0x8c>
   8690c:	f1cc 0420 	rsb	r4, ip, #32
   86910:	fa05 f50c 	lsl.w	r5, r5, ip
   86914:	fa21 f304 	lsr.w	r3, r1, r4
   86918:	0c2a      	lsrs	r2, r5, #16
   8691a:	fbb3 f6f2 	udiv	r6, r3, r2
   8691e:	fa1f fe85 	uxth.w	lr, r5
   86922:	fb02 3816 	mls	r8, r2, r6, r3
   86926:	fa20 f704 	lsr.w	r7, r0, r4
   8692a:	fa01 f10c 	lsl.w	r1, r1, ip
   8692e:	fb0e f906 	mul.w	r9, lr, r6
   86932:	430f      	orrs	r7, r1
   86934:	0c3c      	lsrs	r4, r7, #16
   86936:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   8693a:	4599      	cmp	r9, r3
   8693c:	fa00 f40c 	lsl.w	r4, r0, ip
   86940:	d907      	bls.n	86952 <__udivdi3+0x1fa>
   86942:	195b      	adds	r3, r3, r5
   86944:	f106 31ff 	add.w	r1, r6, #4294967295
   86948:	d238      	bcs.n	869bc <__udivdi3+0x264>
   8694a:	4599      	cmp	r9, r3
   8694c:	d936      	bls.n	869bc <__udivdi3+0x264>
   8694e:	3e02      	subs	r6, #2
   86950:	442b      	add	r3, r5
   86952:	ebc9 0303 	rsb	r3, r9, r3
   86956:	fbb3 f0f2 	udiv	r0, r3, r2
   8695a:	fb02 3310 	mls	r3, r2, r0, r3
   8695e:	fb0e f100 	mul.w	r1, lr, r0
   86962:	b2bf      	uxth	r7, r7
   86964:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   86968:	4299      	cmp	r1, r3
   8696a:	d907      	bls.n	8697c <__udivdi3+0x224>
   8696c:	195b      	adds	r3, r3, r5
   8696e:	f100 37ff 	add.w	r7, r0, #4294967295
   86972:	d221      	bcs.n	869b8 <__udivdi3+0x260>
   86974:	4299      	cmp	r1, r3
   86976:	d91f      	bls.n	869b8 <__udivdi3+0x260>
   86978:	3802      	subs	r0, #2
   8697a:	442b      	add	r3, r5
   8697c:	4617      	mov	r7, r2
   8697e:	1a59      	subs	r1, r3, r1
   86980:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   86984:	e74e      	b.n	86824 <__udivdi3+0xcc>
   86986:	4610      	mov	r0, r2
   86988:	e714      	b.n	867b4 <__udivdi3+0x5c>
   8698a:	4613      	mov	r3, r2
   8698c:	e727      	b.n	867de <__udivdi3+0x86>
   8698e:	460b      	mov	r3, r1
   86990:	e770      	b.n	86874 <__udivdi3+0x11c>
   86992:	40b0      	lsls	r0, r6
   86994:	4290      	cmp	r0, r2
   86996:	d2b6      	bcs.n	86906 <__udivdi3+0x1ae>
   86998:	1e60      	subs	r0, r4, #1
   8699a:	2600      	movs	r6, #0
   8699c:	e722      	b.n	867e4 <__udivdi3+0x8c>
   8699e:	4630      	mov	r0, r6
   869a0:	e720      	b.n	867e4 <__udivdi3+0x8c>
   869a2:	42bc      	cmp	r4, r7
   869a4:	d994      	bls.n	868d0 <__udivdi3+0x178>
   869a6:	f1ac 0c02 	sub.w	ip, ip, #2
   869aa:	441f      	add	r7, r3
   869ac:	e791      	b.n	868d2 <__udivdi3+0x17a>
   869ae:	4589      	cmp	r9, r1
   869b0:	d99f      	bls.n	868f2 <__udivdi3+0x19a>
   869b2:	3c02      	subs	r4, #2
   869b4:	4419      	add	r1, r3
   869b6:	e79d      	b.n	868f4 <__udivdi3+0x19c>
   869b8:	4638      	mov	r0, r7
   869ba:	e7df      	b.n	8697c <__udivdi3+0x224>
   869bc:	460e      	mov	r6, r1
   869be:	e7c8      	b.n	86952 <__udivdi3+0x1fa>
   869c0:	3802      	subs	r0, #2
   869c2:	4429      	add	r1, r5
   869c4:	e741      	b.n	8684a <__udivdi3+0xf2>
   869c6:	bf00      	nop

000869c8 <can_bit_time>:
   869c8:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   869d8:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   869e8:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   869f8:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86a08:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86a18:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86a28:	0718 0808 4304 0819 0808 4404               .....C.....D

00086a34 <uart_serial_options>:
   86a34:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86a44:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86a54:	0000 0000 0043 0000                         ....C...

00086a5c <_global_impure_ptr>:
   86a5c:	0408 2007                                   ... 

00086a60 <zeroes.6869>:
   86a60:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86a70:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86a80:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   86a90:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00086aa0 <blanks.6868>:
   86aa0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086ab0 <_init>:
   86ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ab2:	bf00      	nop
   86ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86ab6:	bc08      	pop	{r3}
   86ab8:	469e      	mov	lr, r3
   86aba:	4770      	bx	lr

00086abc <__init_array_start>:
   86abc:	00084aa9 	.word	0x00084aa9

00086ac0 <__frame_dummy_init_array_entry>:
   86ac0:	00080119                                ....

00086ac4 <_fini>:
   86ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ac6:	bf00      	nop
   86ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86aca:	bc08      	pop	{r3}
   86acc:	469e      	mov	lr, r3
   86ace:	4770      	bx	lr

00086ad0 <__fini_array_start>:
   86ad0:	000800f5 	.word	0x000800f5
