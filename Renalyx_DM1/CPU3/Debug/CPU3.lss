
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006af0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086af0  00086af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086af8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005e0  20070c6c  00087764  00020c6c  2**2
                  ALLOC
  4 .stack        00002004  2007124c  00087d44  00020c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c6c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014be5  00000000  00000000  00020cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e86  00000000  00000000  000358d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000745a  00000000  00000000  00038759  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d80  00000000  00000000  0003fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bf8  00000000  00000000  00040933  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009cd2  00000000  00000000  0004152b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016eed  00000000  00000000  0004b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062518  00000000  00000000  000620ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004274  00000000  00000000  000c4604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073250 	.word	0x20073250
   80004:	0008337d 	.word	0x0008337d
   80008:	00083375 	.word	0x00083375
   8000c:	00083375 	.word	0x00083375
   80010:	00083375 	.word	0x00083375
   80014:	00083375 	.word	0x00083375
   80018:	00083375 	.word	0x00083375
	...
   8002c:	00083375 	.word	0x00083375
   80030:	00083375 	.word	0x00083375
   80034:	00000000 	.word	0x00000000
   80038:	00083375 	.word	0x00083375
   8003c:	00083375 	.word	0x00083375
   80040:	00083375 	.word	0x00083375
   80044:	00083375 	.word	0x00083375
   80048:	00083375 	.word	0x00083375
   8004c:	00083375 	.word	0x00083375
   80050:	00083375 	.word	0x00083375
   80054:	00083375 	.word	0x00083375
   80058:	00083375 	.word	0x00083375
   8005c:	00083375 	.word	0x00083375
   80060:	00081d61 	.word	0x00081d61
   80064:	00083375 	.word	0x00083375
   80068:	00000000 	.word	0x00000000
   8006c:	00082ff9 	.word	0x00082ff9
   80070:	00083011 	.word	0x00083011
   80074:	00083029 	.word	0x00083029
   80078:	00083041 	.word	0x00083041
	...
   80084:	00083375 	.word	0x00083375
   80088:	00083375 	.word	0x00083375
   8008c:	00083375 	.word	0x00083375
   80090:	00083375 	.word	0x00083375
   80094:	00083375 	.word	0x00083375
   80098:	00083375 	.word	0x00083375
   8009c:	00083375 	.word	0x00083375
   800a0:	00083375 	.word	0x00083375
   800a4:	00000000 	.word	0x00000000
   800a8:	00083375 	.word	0x00083375
   800ac:	00080a65 	.word	0x00080a65
   800b0:	00080b3d 	.word	0x00080b3d
   800b4:	00080c15 	.word	0x00080c15
   800b8:	00080c4d 	.word	0x00080c4d
   800bc:	00083375 	.word	0x00083375
   800c0:	00083375 	.word	0x00083375
   800c4:	00080cad 	.word	0x00080cad
   800c8:	00080c7d 	.word	0x00080c7d
   800cc:	00083375 	.word	0x00083375
   800d0:	00083375 	.word	0x00083375
   800d4:	00083375 	.word	0x00083375
   800d8:	00083375 	.word	0x00083375
   800dc:	00083375 	.word	0x00083375
   800e0:	00083375 	.word	0x00083375
   800e4:	00083375 	.word	0x00083375
   800e8:	00083375 	.word	0x00083375
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083375 	.word	0x00083375

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086af8 	.word	0x00086af8

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070c70 	.word	0x20070c70
   80144:	00086af8 	.word	0x00086af8
   80148:	00086af8 	.word	0x00086af8
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bf00      	nop
   80172:	bd80      	pop	{r7, pc}
   80174:	00082a29 	.word	0x00082a29
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	bf00      	nop
   801a8:	370c      	adds	r7, #12
   801aa:	46bd      	mov	sp, r7
   801ac:	bc80      	pop	{r7}
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	bf00      	nop
   801fa:	3708      	adds	r7, #8
   801fc:	46bd      	mov	sp, r7
   801fe:	bd80      	pop	{r7, pc}
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dd0 	.word	0x20070dd0
   80208:	00080439 	.word	0x00080439
   8020c:	00080215 	.word	0x00080215
   80210:	20070c98 	.word	0x20070c98

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a78      	ldr	r2, [pc, #480]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b77      	ldr	r3, [pc, #476]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b76      	ldr	r3, [pc, #472]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b75      	ldr	r3, [pc, #468]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b75      	ldr	r3, [pc, #468]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e0db      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b73      	ldr	r3, [pc, #460]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a72      	ldr	r2, [pc, #456]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b70      	ldr	r3, [pc, #448]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b6e      	ldr	r3, [pc, #440]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b6d      	ldr	r3, [pc, #436]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b6c      	ldr	r3, [pc, #432]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b69      	ldr	r3, [pc, #420]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b67      	ldr	r3, [pc, #412]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b67      	ldr	r3, [pc, #412]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b67      	ldr	r3, [pc, #412]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b65      	ldr	r3, [pc, #404]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a65      	ldr	r2, [pc, #404]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b0c      	cmp	r3, #12
   80294:	f200 80af 	bhi.w	803f6 <dd_can_extract_mailbox_data+0x1e2>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080319 	.word	0x00080319
   802a4:	0008033b 	.word	0x0008033b
   802a8:	00080365 	.word	0x00080365
   802ac:	000803bf 	.word	0x000803bf
   802b0:	000803cd 	.word	0x000803cd
   802b4:	000803db 	.word	0x000803db
   802b8:	000803e9 	.word	0x000803e9
   802bc:	000803a3 	.word	0x000803a3
   802c0:	000803b1 	.word	0x000803b1
   802c4:	00080387 	.word	0x00080387
   802c8:	00080395 	.word	0x00080395
   802cc:	000802d5 	.word	0x000802d5
   802d0:	000802f7 	.word	0x000802f7
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802d4:	4b53      	ldr	r3, [pc, #332]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802d6:	2200      	movs	r2, #0
   802d8:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802da:	4b53      	ldr	r3, [pc, #332]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802dc:	881b      	ldrh	r3, [r3, #0]
   802de:	b29b      	uxth	r3, r3
   802e0:	3301      	adds	r3, #1
   802e2:	b29a      	uxth	r2, r3
   802e4:	4b50      	ldr	r3, [pc, #320]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802e6:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   802e8:	4b50      	ldr	r3, [pc, #320]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   802ea:	2201      	movs	r2, #1
   802ec:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   802ee:	4b47      	ldr	r3, [pc, #284]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   802f0:	2200      	movs	r2, #0
   802f2:	701a      	strb	r2, [r3, #0]
				  
				  break;
   802f4:	e080      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   802f6:	4b4b      	ldr	r3, [pc, #300]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802f8:	2200      	movs	r2, #0
   802fa:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802fc:	4b4a      	ldr	r3, [pc, #296]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802fe:	881b      	ldrh	r3, [r3, #0]
   80300:	b29b      	uxth	r3, r3
   80302:	3301      	adds	r3, #1
   80304:	b29a      	uxth	r2, r3
   80306:	4b48      	ldr	r3, [pc, #288]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80308:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   8030a:	4b48      	ldr	r3, [pc, #288]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8030c:	2201      	movs	r2, #1
   8030e:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80310:	4b3e      	ldr	r3, [pc, #248]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80312:	2200      	movs	r2, #0
   80314:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80316:	e06f      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			     case PROP_START_ALIGMENT:
			          test =0;
   80318:	4b42      	ldr	r3, [pc, #264]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8031a:	2200      	movs	r2, #0
   8031c:	701a      	strb	r2, [r3, #0]
					  count_start++;
   8031e:	4b42      	ldr	r3, [pc, #264]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80320:	881b      	ldrh	r3, [r3, #0]
   80322:	b29b      	uxth	r3, r3
   80324:	3301      	adds	r3, #1
   80326:	b29a      	uxth	r2, r3
   80328:	4b3f      	ldr	r3, [pc, #252]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8032a:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   8032c:	4b3f      	ldr	r3, [pc, #252]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8032e:	2201      	movs	r2, #1
   80330:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   80332:	4b36      	ldr	r3, [pc, #216]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80334:	2200      	movs	r2, #0
   80336:	701a      	strb	r2, [r3, #0]
			    break;
   80338:	e05e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_START_MIXING:
			        User_setConductivity = temp_struct.temp_reg_16[1];
   8033a:	4b32      	ldr	r3, [pc, #200]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8033c:	885a      	ldrh	r2, [r3, #2]
   8033e:	4b3c      	ldr	r3, [pc, #240]	; (80430 <dd_can_extract_mailbox_data+0x21c>)
   80340:	801a      	strh	r2, [r3, #0]

				    test=0;
   80342:	4b38      	ldr	r3, [pc, #224]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80344:	2200      	movs	r2, #0
   80346:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80348:	4b37      	ldr	r3, [pc, #220]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8034a:	881b      	ldrh	r3, [r3, #0]
   8034c:	b29b      	uxth	r3, r3
   8034e:	3301      	adds	r3, #1
   80350:	b29a      	uxth	r2, r3
   80352:	4b35      	ldr	r3, [pc, #212]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80354:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80356:	4b35      	ldr	r3, [pc, #212]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80358:	2201      	movs	r2, #1
   8035a:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8035c:	4b2b      	ldr	r3, [pc, #172]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8035e:	2200      	movs	r2, #0
   80360:	701a      	strb	r2, [r3, #0]
			    break;
   80362:	e049      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_STOP_MIXING:
			        test =0;
   80364:	4b2f      	ldr	r3, [pc, #188]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80366:	2200      	movs	r2, #0
   80368:	701a      	strb	r2, [r3, #0]
					count_stop++;
   8036a:	4b32      	ldr	r3, [pc, #200]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   8036c:	881b      	ldrh	r3, [r3, #0]
   8036e:	b29b      	uxth	r3, r3
   80370:	3301      	adds	r3, #1
   80372:	b29a      	uxth	r2, r3
   80374:	4b2f      	ldr	r3, [pc, #188]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   80376:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80378:	4b2c      	ldr	r3, [pc, #176]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8037a:	2201      	movs	r2, #1
   8037c:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8037e:	4b23      	ldr	r3, [pc, #140]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80380:	2200      	movs	r2, #0
   80382:	701a      	strb	r2, [r3, #0]
			    break;
   80384:	e038      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   80386:	4b29      	ldr	r3, [pc, #164]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80388:	2201      	movs	r2, #1
   8038a:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8038c:	4b1f      	ldr	r3, [pc, #124]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8038e:	2200      	movs	r2, #0
   80390:	701a      	strb	r2, [r3, #0]
			    break;
   80392:	e031      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   80394:	4b25      	ldr	r3, [pc, #148]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80396:	2201      	movs	r2, #1
   80398:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   8039a:	4b1c      	ldr	r3, [pc, #112]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
			    break;
   803a0:	e02a      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803a2:	4b22      	ldr	r3, [pc, #136]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803a4:	2201      	movs	r2, #1
   803a6:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803a8:	4b18      	ldr	r3, [pc, #96]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803aa:	2200      	movs	r2, #0
   803ac:	701a      	strb	r2, [r3, #0]
			    break;
   803ae:	e023      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803b0:	4b1e      	ldr	r3, [pc, #120]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803b2:	2201      	movs	r2, #1
   803b4:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803b6:	4b15      	ldr	r3, [pc, #84]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803b8:	2200      	movs	r2, #0
   803ba:	701a      	strb	r2, [r3, #0]
				
				break;
   803bc:	e01c      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803be:	4b1b      	ldr	r3, [pc, #108]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803c0:	2201      	movs	r2, #1
   803c2:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803c4:	4b11      	ldr	r3, [pc, #68]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803c6:	2200      	movs	r2, #0
   803c8:	701a      	strb	r2, [r3, #0]
				break;
   803ca:	e015      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803cc:	4b17      	ldr	r3, [pc, #92]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ce:	2201      	movs	r2, #1
   803d0:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803d2:	4b0e      	ldr	r3, [pc, #56]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803d4:	2200      	movs	r2, #0
   803d6:	701a      	strb	r2, [r3, #0]
				break;
   803d8:	e00e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803da:	4b14      	ldr	r3, [pc, #80]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803dc:	2201      	movs	r2, #1
   803de:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803e0:	4b0a      	ldr	r3, [pc, #40]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803e2:	2200      	movs	r2, #0
   803e4:	701a      	strb	r2, [r3, #0]
				break;
   803e6:	e007      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   803e8:	4b10      	ldr	r3, [pc, #64]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ea:	2201      	movs	r2, #1
   803ec:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   803ee:	4b07      	ldr	r3, [pc, #28]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803f0:	2200      	movs	r2, #0
   803f2:	701a      	strb	r2, [r3, #0]
				break;
   803f4:	e000      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				default:
				break;
   803f6:	bf00      	nop
			  }		  
		   default:
		   break;
   803f8:	bf00      	nop
		   
	 }
}
   803fa:	bf00      	nop
   803fc:	3714      	adds	r7, #20
   803fe:	46bd      	mov	sp, r7
   80400:	bc80      	pop	{r7}
   80402:	4770      	bx	lr
   80404:	20070dc4 	.word	0x20070dc4
   80408:	20070c93 	.word	0x20070c93
   8040c:	20070c88 	.word	0x20070c88
   80410:	20070c8e 	.word	0x20070c8e
   80414:	20070c90 	.word	0x20070c90
   80418:	20070c94 	.word	0x20070c94
   8041c:	20070e04 	.word	0x20070e04
   80420:	20070dc8 	.word	0x20070dc8
   80424:	20070c97 	.word	0x20070c97
   80428:	20070c8a 	.word	0x20070c8a
   8042c:	20070df0 	.word	0x20070df0
   80430:	20070dca 	.word	0x20070dca
   80434:	20070c8c 	.word	0x20070c8c

00080438 <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   80438:	b480      	push	{r7}
   8043a:	b087      	sub	sp, #28
   8043c:	af00      	add	r7, sp, #0
   8043e:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80440:	2300      	movs	r3, #0
   80442:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	681b      	ldr	r3, [r3, #0]
   80448:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8044a:	687b      	ldr	r3, [r7, #4]
   8044c:	689b      	ldr	r3, [r3, #8]
   8044e:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80456:	2b00      	cmp	r3, #0
   80458:	d006      	beq.n	80468 <dd_can_mailbox_read+0x30>
   8045a:	68fb      	ldr	r3, [r7, #12]
   8045c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80460:	2b00      	cmp	r3, #0
   80462:	d001      	beq.n	80468 <dd_can_mailbox_read+0x30>
   80464:	2302      	movs	r3, #2
   80466:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80468:	4a26      	ldr	r2, [pc, #152]	; (80504 <dd_can_mailbox_read+0xcc>)
   8046a:	7cfb      	ldrb	r3, [r7, #19]
   8046c:	015b      	lsls	r3, r3, #5
   8046e:	4413      	add	r3, r2
   80470:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80474:	681b      	ldr	r3, [r3, #0]
   80476:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8047a:	687b      	ldr	r3, [r7, #4]
   8047c:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8047e:	68fb      	ldr	r3, [r7, #12]
   80480:	0c1b      	lsrs	r3, r3, #16
   80482:	b2db      	uxtb	r3, r3
   80484:	f003 030f 	and.w	r3, r3, #15
   80488:	b2da      	uxtb	r2, r3
   8048a:	687b      	ldr	r3, [r7, #4]
   8048c:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   8048e:	4a1d      	ldr	r2, [pc, #116]	; (80504 <dd_can_mailbox_read+0xcc>)
   80490:	7cfb      	ldrb	r3, [r7, #19]
   80492:	015b      	lsls	r3, r3, #5
   80494:	4413      	add	r3, r2
   80496:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8049a:	681a      	ldr	r2, [r3, #0]
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   804a0:	4a18      	ldr	r2, [pc, #96]	; (80504 <dd_can_mailbox_read+0xcc>)
   804a2:	7cfb      	ldrb	r3, [r7, #19]
   804a4:	015b      	lsls	r3, r3, #5
   804a6:	4413      	add	r3, r2
   804a8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804ac:	681a      	ldr	r2, [r3, #0]
   804ae:	687b      	ldr	r3, [r7, #4]
   804b0:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   804b2:	4a14      	ldr	r2, [pc, #80]	; (80504 <dd_can_mailbox_read+0xcc>)
   804b4:	7cfb      	ldrb	r3, [r7, #19]
   804b6:	015b      	lsls	r3, r3, #5
   804b8:	4413      	add	r3, r2
   804ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   804be:	681a      	ldr	r2, [r3, #0]
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   804c4:	687b      	ldr	r3, [r7, #4]
   804c6:	689b      	ldr	r3, [r3, #8]
   804c8:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804d0:	2b00      	cmp	r3, #0
   804d2:	d003      	beq.n	804dc <dd_can_mailbox_read+0xa4>
   804d4:	697b      	ldr	r3, [r7, #20]
   804d6:	f043 0304 	orr.w	r3, r3, #4
   804da:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   804dc:	4909      	ldr	r1, [pc, #36]	; (80504 <dd_can_mailbox_read+0xcc>)
   804de:	7cfb      	ldrb	r3, [r7, #19]
   804e0:	687a      	ldr	r2, [r7, #4]
   804e2:	7992      	ldrb	r2, [r2, #6]
   804e4:	0412      	lsls	r2, r2, #16
   804e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   804ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   804ee:	015b      	lsls	r3, r3, #5
   804f0:	440b      	add	r3, r1
   804f2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   804f6:	601a      	str	r2, [r3, #0]
	return ul_retval;
   804f8:	697b      	ldr	r3, [r7, #20]
}
   804fa:	4618      	mov	r0, r3
   804fc:	371c      	adds	r7, #28
   804fe:	46bd      	mov	sp, r7
   80500:	bc80      	pop	{r7}
   80502:	4770      	bx	lr
   80504:	400b4000 	.word	0x400b4000

00080508 <dd_can_mailbox_conf>:
}



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80508:	b480      	push	{r7}
   8050a:	b085      	sub	sp, #20
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	791b      	ldrb	r3, [r3, #4]
   8051a:	2b00      	cmp	r3, #0
   8051c:	d12f      	bne.n	8057e <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8051e:	4a35      	ldr	r2, [pc, #212]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80520:	7bfb      	ldrb	r3, [r7, #15]
   80522:	3310      	adds	r3, #16
   80524:	015b      	lsls	r3, r3, #5
   80526:	4413      	add	r3, r2
   80528:	2200      	movs	r2, #0
   8052a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   8052c:	4a31      	ldr	r2, [pc, #196]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8052e:	7bfb      	ldrb	r3, [r7, #15]
   80530:	3310      	adds	r3, #16
   80532:	015b      	lsls	r3, r3, #5
   80534:	4413      	add	r3, r2
   80536:	3304      	adds	r3, #4
   80538:	2200      	movs	r2, #0
   8053a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   8053c:	4a2d      	ldr	r2, [pc, #180]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8053e:	7bfb      	ldrb	r3, [r7, #15]
   80540:	015b      	lsls	r3, r3, #5
   80542:	4413      	add	r3, r2
   80544:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80548:	2200      	movs	r2, #0
   8054a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   8054c:	4a29      	ldr	r2, [pc, #164]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8054e:	7bfb      	ldrb	r3, [r7, #15]
   80550:	015b      	lsls	r3, r3, #5
   80552:	4413      	add	r3, r2
   80554:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80558:	2200      	movs	r2, #0
   8055a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   8055c:	4a25      	ldr	r2, [pc, #148]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8055e:	7bfb      	ldrb	r3, [r7, #15]
   80560:	015b      	lsls	r3, r3, #5
   80562:	4413      	add	r3, r2
   80564:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80568:	2200      	movs	r2, #0
   8056a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   8056c:	4a21      	ldr	r2, [pc, #132]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8056e:	7bfb      	ldrb	r3, [r7, #15]
   80570:	015b      	lsls	r3, r3, #5
   80572:	4413      	add	r3, r2
   80574:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80578:	2200      	movs	r2, #0
   8057a:	601a      	str	r2, [r3, #0]
		return;
   8057c:	e035      	b.n	805ea <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   8057e:	481d      	ldr	r0, [pc, #116]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80580:	7bfb      	ldrb	r3, [r7, #15]
   80582:	491c      	ldr	r1, [pc, #112]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80584:	7bfa      	ldrb	r2, [r7, #15]
   80586:	3210      	adds	r2, #16
   80588:	0152      	lsls	r2, r2, #5
   8058a:	440a      	add	r2, r1
   8058c:	6812      	ldr	r2, [r2, #0]
   8058e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80592:	6879      	ldr	r1, [r7, #4]
   80594:	79c9      	ldrb	r1, [r1, #7]
   80596:	0409      	lsls	r1, r1, #16
   80598:	430a      	orrs	r2, r1
   8059a:	3310      	adds	r3, #16
   8059c:	015b      	lsls	r3, r3, #5
   8059e:	4403      	add	r3, r0
   805a0:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   805a2:	4914      	ldr	r1, [pc, #80]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805a4:	7bfb      	ldrb	r3, [r7, #15]
   805a6:	687a      	ldr	r2, [r7, #4]
   805a8:	68d2      	ldr	r2, [r2, #12]
   805aa:	3310      	adds	r3, #16
   805ac:	015b      	lsls	r3, r3, #5
   805ae:	440b      	add	r3, r1
   805b0:	3304      	adds	r3, #4
   805b2:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   805b4:	490f      	ldr	r1, [pc, #60]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805b6:	7bfb      	ldrb	r3, [r7, #15]
   805b8:	687a      	ldr	r2, [r7, #4]
   805ba:	6912      	ldr	r2, [r2, #16]
   805bc:	015b      	lsls	r3, r3, #5
   805be:	440b      	add	r3, r1
   805c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805c4:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   805c6:	480b      	ldr	r0, [pc, #44]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805c8:	7bfb      	ldrb	r3, [r7, #15]
   805ca:	490a      	ldr	r1, [pc, #40]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805cc:	7bfa      	ldrb	r2, [r7, #15]
   805ce:	3210      	adds	r2, #16
   805d0:	0152      	lsls	r2, r2, #5
   805d2:	440a      	add	r2, r1
   805d4:	6812      	ldr	r2, [r2, #0]
   805d6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   805da:	6879      	ldr	r1, [r7, #4]
   805dc:	7909      	ldrb	r1, [r1, #4]
   805de:	0609      	lsls	r1, r1, #24
   805e0:	430a      	orrs	r2, r1
   805e2:	3310      	adds	r3, #16
   805e4:	015b      	lsls	r3, r3, #5
   805e6:	4403      	add	r3, r0
   805e8:	601a      	str	r2, [r3, #0]
}
   805ea:	3714      	adds	r7, #20
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr
   805f2:	bf00      	nop
   805f4:	400b4000 	.word	0x400b4000

000805f8 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   805f8:	b580      	push	{r7, lr}
   805fa:	b08e      	sub	sp, #56	; 0x38
   805fc:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805fe:	4b4c      	ldr	r3, [pc, #304]	; (80730 <DD_INIT_CAN+0x138>)
   80600:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80602:	2378      	movs	r3, #120	; 0x78
   80604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80608:	4b4a      	ldr	r3, [pc, #296]	; (80734 <DD_INIT_CAN+0x13c>)
   8060a:	4a4b      	ldr	r2, [pc, #300]	; (80738 <DD_INIT_CAN+0x140>)
   8060c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80610:	4a48      	ldr	r2, [pc, #288]	; (80734 <DD_INIT_CAN+0x13c>)
   80612:	4b48      	ldr	r3, [pc, #288]	; (80734 <DD_INIT_CAN+0x13c>)
   80614:	681b      	ldr	r3, [r3, #0]
   80616:	f023 0301 	bic.w	r3, r3, #1
   8061a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8061c:	4945      	ldr	r1, [pc, #276]	; (80734 <DD_INIT_CAN+0x13c>)
   8061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80620:	78db      	ldrb	r3, [r3, #3]
   80622:	3b01      	subs	r3, #1
   80624:	f003 0207 	and.w	r2, r3, #7
   80628:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8062a:	789b      	ldrb	r3, [r3, #2]
   8062c:	3b01      	subs	r3, #1
   8062e:	011b      	lsls	r3, r3, #4
   80630:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80634:	431a      	orrs	r2, r3
   80636:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80638:	785b      	ldrb	r3, [r3, #1]
   8063a:	3b01      	subs	r3, #1
   8063c:	021b      	lsls	r3, r3, #8
   8063e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80642:	431a      	orrs	r2, r3
   80644:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80646:	791b      	ldrb	r3, [r3, #4]
   80648:	3b01      	subs	r3, #1
   8064a:	031b      	lsls	r3, r3, #12
   8064c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   80650:	431a      	orrs	r2, r3
   80652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80656:	3b01      	subs	r3, #1
   80658:	041b      	lsls	r3, r3, #16
   8065a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8065e:	4313      	orrs	r3, r2
   80660:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80662:	2300      	movs	r3, #0
   80664:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80666:	2300      	movs	r3, #0
   80668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8066c:	e00b      	b.n	80686 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   8066e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80672:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   80674:	1d3b      	adds	r3, r7, #4
   80676:	4618      	mov	r0, r3
   80678:	4b30      	ldr	r3, [pc, #192]	; (8073c <DD_INIT_CAN+0x144>)
   8067a:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8067c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80680:	3301      	adds	r3, #1
   80682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8068a:	2b07      	cmp	r3, #7
   8068c:	d9ef      	bls.n	8066e <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8068e:	4a29      	ldr	r2, [pc, #164]	; (80734 <DD_INIT_CAN+0x13c>)
   80690:	4b28      	ldr	r3, [pc, #160]	; (80734 <DD_INIT_CAN+0x13c>)
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	f043 0301 	orr.w	r3, r3, #1
   80698:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8069a:	2300      	movs	r3, #0
   8069c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806a2:	e005      	b.n	806b0 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   806a4:	4b23      	ldr	r3, [pc, #140]	; (80734 <DD_INIT_CAN+0x13c>)
   806a6:	691b      	ldr	r3, [r3, #16]
   806a8:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   806aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806ac:	3301      	adds	r3, #1
   806ae:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   806b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   806b6:	2b00      	cmp	r3, #0
   806b8:	d103      	bne.n	806c2 <DD_INIT_CAN+0xca>
   806ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806bc:	4a20      	ldr	r2, [pc, #128]	; (80740 <DD_INIT_CAN+0x148>)
   806be:	4293      	cmp	r3, r2
   806c0:	d9f0      	bls.n	806a4 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   806c2:	4b20      	ldr	r3, [pc, #128]	; (80744 <DD_INIT_CAN+0x14c>)
   806c4:	2201      	movs	r2, #1
   806c6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   806c8:	4b1e      	ldr	r3, [pc, #120]	; (80744 <DD_INIT_CAN+0x14c>)
   806ca:	2201      	movs	r2, #1
   806cc:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   806ce:	4b1d      	ldr	r3, [pc, #116]	; (80744 <DD_INIT_CAN+0x14c>)
   806d0:	2200      	movs	r2, #0
   806d2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806d4:	4b1b      	ldr	r3, [pc, #108]	; (80744 <DD_INIT_CAN+0x14c>)
   806d6:	2200      	movs	r2, #0
   806d8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   806da:	4b1a      	ldr	r3, [pc, #104]	; (80744 <DD_INIT_CAN+0x14c>)
   806dc:	4a1a      	ldr	r2, [pc, #104]	; (80748 <DD_INIT_CAN+0x150>)
   806de:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   806e0:	4b18      	ldr	r3, [pc, #96]	; (80744 <DD_INIT_CAN+0x14c>)
   806e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   806e6:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806e8:	4816      	ldr	r0, [pc, #88]	; (80744 <DD_INIT_CAN+0x14c>)
   806ea:	4b14      	ldr	r3, [pc, #80]	; (8073c <DD_INIT_CAN+0x144>)
   806ec:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806ee:	202b      	movs	r0, #43	; 0x2b
   806f0:	4b16      	ldr	r3, [pc, #88]	; (8074c <DD_INIT_CAN+0x154>)
   806f2:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   806f4:	4b0f      	ldr	r3, [pc, #60]	; (80734 <DD_INIT_CAN+0x13c>)
   806f6:	2202      	movs	r2, #2
   806f8:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   806fa:	4b12      	ldr	r3, [pc, #72]	; (80744 <DD_INIT_CAN+0x14c>)
   806fc:	2200      	movs	r2, #0
   806fe:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80700:	4b10      	ldr	r3, [pc, #64]	; (80744 <DD_INIT_CAN+0x14c>)
   80702:	2203      	movs	r2, #3
   80704:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80706:	4b0f      	ldr	r3, [pc, #60]	; (80744 <DD_INIT_CAN+0x14c>)
   80708:	2201      	movs	r2, #1
   8070a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8070c:	4b0d      	ldr	r3, [pc, #52]	; (80744 <DD_INIT_CAN+0x14c>)
   8070e:	2200      	movs	r2, #0
   80710:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80712:	4b0c      	ldr	r3, [pc, #48]	; (80744 <DD_INIT_CAN+0x14c>)
   80714:	4a0c      	ldr	r2, [pc, #48]	; (80748 <DD_INIT_CAN+0x150>)
   80716:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80718:	4b0a      	ldr	r3, [pc, #40]	; (80744 <DD_INIT_CAN+0x14c>)
   8071a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8071e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80720:	4808      	ldr	r0, [pc, #32]	; (80744 <DD_INIT_CAN+0x14c>)
   80722:	4b06      	ldr	r3, [pc, #24]	; (8073c <DD_INIT_CAN+0x144>)
   80724:	4798      	blx	r3
}
   80726:	bf00      	nop
   80728:	3738      	adds	r7, #56	; 0x38
   8072a:	46bd      	mov	sp, r7
   8072c:	bd80      	pop	{r7, pc}
   8072e:	bf00      	nop
   80730:	00086a08 	.word	0x00086a08
   80734:	400b4000 	.word	0x400b4000
   80738:	43414e00 	.word	0x43414e00
   8073c:	00080509 	.word	0x00080509
   80740:	0001869f 	.word	0x0001869f
   80744:	20070dd0 	.word	0x20070dd0
   80748:	1ffc0000 	.word	0x1ffc0000
   8074c:	00080185 	.word	0x00080185

00080750 <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   80750:	b580      	push	{r7, lr}
   80752:	b082      	sub	sp, #8
   80754:	af00      	add	r7, sp, #0
   80756:	4603      	mov	r3, r0
   80758:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   8075a:	4b18      	ldr	r3, [pc, #96]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   8075c:	f640 2241 	movw	r2, #2625	; 0xa41
   80760:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80764:	4b15      	ldr	r3, [pc, #84]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80766:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8076a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   8076e:	4b13      	ldr	r3, [pc, #76]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80770:	f640 2241 	movw	r2, #2625	; 0xa41
   80774:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80778:	4b10      	ldr	r3, [pc, #64]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   8077a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8077e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   80782:	79fb      	ldrb	r3, [r7, #7]
   80784:	2b01      	cmp	r3, #1
   80786:	d002      	beq.n	8078e <CPU3_D_SET_PUMP+0x3e>
   80788:	2b02      	cmp	r3, #2
   8078a:	d009      	beq.n	807a0 <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   8078c:	e011      	b.n	807b2 <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   8078e:	4b0b      	ldr	r3, [pc, #44]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80790:	2210      	movs	r2, #16
   80792:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80794:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80798:	2055      	movs	r0, #85	; 0x55
   8079a:	4b09      	ldr	r3, [pc, #36]	; (807c0 <CPU3_D_SET_PUMP+0x70>)
   8079c:	4798      	blx	r3
		break;
   8079e:	e008      	b.n	807b2 <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   807a0:	4b06      	ldr	r3, [pc, #24]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   807a2:	2220      	movs	r2, #32
   807a4:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   807a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807aa:	2056      	movs	r0, #86	; 0x56
   807ac:	4b04      	ldr	r3, [pc, #16]	; (807c0 <CPU3_D_SET_PUMP+0x70>)
   807ae:	4798      	blx	r3
		break;
   807b0:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   807b2:	2300      	movs	r3, #0
}
   807b4:	4618      	mov	r0, r3
   807b6:	3708      	adds	r7, #8
   807b8:	46bd      	mov	sp, r7
   807ba:	bd80      	pop	{r7, pc}
   807bc:	40094000 	.word	0x40094000
   807c0:	00082d2d 	.word	0x00082d2d

000807c4 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   807c4:	b590      	push	{r4, r7, lr}
   807c6:	b089      	sub	sp, #36	; 0x24
   807c8:	af00      	add	r7, sp, #0
   807ca:	4603      	mov	r3, r0
   807cc:	460a      	mov	r2, r1
   807ce:	71fb      	strb	r3, [r7, #7]
   807d0:	4613      	mov	r3, r2
   807d2:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   807d4:	2300      	movs	r3, #0
   807d6:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   807d8:	79bb      	ldrb	r3, [r7, #6]
   807da:	01db      	lsls	r3, r3, #7
   807dc:	4a20      	ldr	r2, [pc, #128]	; (80860 <CPU3_D_CONFIG_TIMER+0x9c>)
   807de:	fb92 f3f3 	sdiv	r3, r2, r3
   807e2:	1e5a      	subs	r2, r3, #1
   807e4:	4b1f      	ldr	r3, [pc, #124]	; (80864 <CPU3_D_CONFIG_TIMER+0xa0>)
   807e6:	4610      	mov	r0, r2
   807e8:	4798      	blx	r3
   807ea:	4603      	mov	r3, r0
   807ec:	460c      	mov	r4, r1
   807ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   807f2:	4b1d      	ldr	r3, [pc, #116]	; (80868 <CPU3_D_CONFIG_TIMER+0xa4>)
   807f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   807f8:	4798      	blx	r3
   807fa:	4603      	mov	r3, r0
   807fc:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   807fe:	79fb      	ldrb	r3, [r7, #7]
   80800:	2b04      	cmp	r3, #4
   80802:	d826      	bhi.n	80852 <CPU3_D_CONFIG_TIMER+0x8e>
   80804:	a201      	add	r2, pc, #4	; (adr r2, 8080c <CPU3_D_CONFIG_TIMER+0x48>)
   80806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8080a:	bf00      	nop
   8080c:	00080821 	.word	0x00080821
   80810:	0008082f 	.word	0x0008082f
   80814:	00080841 	.word	0x00080841
   80818:	00080847 	.word	0x00080847
   8081c:	0008084d 	.word	0x0008084d
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   80820:	68fb      	ldr	r3, [r7, #12]
   80822:	2221      	movs	r2, #33	; 0x21
   80824:	69f9      	ldr	r1, [r7, #28]
   80826:	4811      	ldr	r0, [pc, #68]	; (8086c <CPU3_D_CONFIG_TIMER+0xa8>)
   80828:	4c11      	ldr	r4, [pc, #68]	; (80870 <CPU3_D_CONFIG_TIMER+0xac>)
   8082a:	47a0      	blx	r4
		break;
   8082c:	e012      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   8082e:	79bb      	ldrb	r3, [r7, #6]
   80830:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   80832:	68fb      	ldr	r3, [r7, #12]
   80834:	221b      	movs	r2, #27
   80836:	2100      	movs	r1, #0
   80838:	480e      	ldr	r0, [pc, #56]	; (80874 <CPU3_D_CONFIG_TIMER+0xb0>)
   8083a:	4c0f      	ldr	r4, [pc, #60]	; (80878 <CPU3_D_CONFIG_TIMER+0xb4>)
   8083c:	47a0      	blx	r4
		break;
   8083e:	e009      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   80840:	79bb      	ldrb	r3, [r7, #6]
   80842:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   80844:	e006      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   80846:	79bb      	ldrb	r3, [r7, #6]
   80848:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   8084a:	e003      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   8084c:	79bb      	ldrb	r3, [r7, #6]
   8084e:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   80850:	e000      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   80852:	bf00      	nop
		
	}
}
   80854:	bf00      	nop
   80856:	4618      	mov	r0, r3
   80858:	3724      	adds	r7, #36	; 0x24
   8085a:	46bd      	mov	sp, r7
   8085c:	bd90      	pop	{r4, r7, pc}
   8085e:	bf00      	nop
   80860:	0501bd00 	.word	0x0501bd00
   80864:	000839a9 	.word	0x000839a9
   80868:	00083a75 	.word	0x00083a75
   8086c:	40088000 	.word	0x40088000
   80870:	00081059 	.word	0x00081059
   80874:	40080000 	.word	0x40080000
   80878:	000810b5 	.word	0x000810b5

0008087c <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   8087c:	b580      	push	{r7, lr}
   8087e:	b082      	sub	sp, #8
   80880:	af00      	add	r7, sp, #0
   80882:	4603      	mov	r3, r0
   80884:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   80886:	79fb      	ldrb	r3, [r7, #7]
   80888:	2b04      	cmp	r3, #4
   8088a:	d826      	bhi.n	808da <CPU3_D_STOP_TIMER+0x5e>
   8088c:	a201      	add	r2, pc, #4	; (adr r2, 80894 <CPU3_D_STOP_TIMER+0x18>)
   8088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80892:	bf00      	nop
   80894:	000808a9 	.word	0x000808a9
   80898:	000808b3 	.word	0x000808b3
   8089c:	000808bd 	.word	0x000808bd
   808a0:	000808c7 	.word	0x000808c7
   808a4:	000808d1 	.word	0x000808d1
	{
		case 0:
		tc_stop(TC0,0);
   808a8:	2100      	movs	r1, #0
   808aa:	480f      	ldr	r0, [pc, #60]	; (808e8 <CPU3_D_STOP_TIMER+0x6c>)
   808ac:	4b0f      	ldr	r3, [pc, #60]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808ae:	4798      	blx	r3
		break;
   808b0:	e014      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   808b2:	2101      	movs	r1, #1
   808b4:	480c      	ldr	r0, [pc, #48]	; (808e8 <CPU3_D_STOP_TIMER+0x6c>)
   808b6:	4b0d      	ldr	r3, [pc, #52]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808b8:	4798      	blx	r3
		break;
   808ba:	e00f      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   808bc:	2100      	movs	r1, #0
   808be:	480c      	ldr	r0, [pc, #48]	; (808f0 <CPU3_D_STOP_TIMER+0x74>)
   808c0:	4b0a      	ldr	r3, [pc, #40]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808c2:	4798      	blx	r3
		break;
   808c4:	e00a      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   808c6:	2100      	movs	r1, #0
   808c8:	480a      	ldr	r0, [pc, #40]	; (808f4 <CPU3_D_STOP_TIMER+0x78>)
   808ca:	4b08      	ldr	r3, [pc, #32]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808cc:	4798      	blx	r3
		break;
   808ce:	e005      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   808d0:	2101      	movs	r1, #1
   808d2:	4808      	ldr	r0, [pc, #32]	; (808f4 <CPU3_D_STOP_TIMER+0x78>)
   808d4:	4b05      	ldr	r3, [pc, #20]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808d6:	4798      	blx	r3
		break;
   808d8:	e000      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   808da:	bf00      	nop
	}
   808dc:	bf00      	nop
   808de:	4618      	mov	r0, r3
   808e0:	3708      	adds	r7, #8
   808e2:	46bd      	mov	sp, r7
   808e4:	bd80      	pop	{r7, pc}
   808e6:	bf00      	nop
   808e8:	40080000 	.word	0x40080000
   808ec:	00081441 	.word	0x00081441
   808f0:	40088000 	.word	0x40088000
   808f4:	40084000 	.word	0x40084000

000808f8 <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   808f8:	b580      	push	{r7, lr}
   808fa:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   808fc:	200b      	movs	r0, #11
   808fe:	4b3b      	ldr	r3, [pc, #236]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80900:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   80902:	200c      	movs	r0, #12
   80904:	4b39      	ldr	r3, [pc, #228]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80906:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   80908:	200d      	movs	r0, #13
   8090a:	4b38      	ldr	r3, [pc, #224]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   8090c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   8090e:	200e      	movs	r0, #14
   80910:	4b36      	ldr	r3, [pc, #216]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80912:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80914:	4b36      	ldr	r3, [pc, #216]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80916:	4a37      	ldr	r2, [pc, #220]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80918:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   8091c:	4b36      	ldr	r3, [pc, #216]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8091e:	4a35      	ldr	r2, [pc, #212]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80920:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80924:	4b35      	ldr	r3, [pc, #212]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   80926:	4a33      	ldr	r2, [pc, #204]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80928:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   8092c:	4b34      	ldr	r3, [pc, #208]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   8092e:	4a31      	ldr	r2, [pc, #196]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80930:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80934:	4b2e      	ldr	r3, [pc, #184]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80936:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8093a:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   8093c:	4b2c      	ldr	r3, [pc, #176]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8093e:	4a31      	ldr	r2, [pc, #196]	; (80a04 <CPU3_D_INIT_PIO+0x10c>)
   80940:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80942:	4b2b      	ldr	r3, [pc, #172]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80944:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80948:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   8094a:	4b29      	ldr	r3, [pc, #164]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8094c:	f44f 7240 	mov.w	r2, #768	; 0x300
   80950:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80952:	4b27      	ldr	r3, [pc, #156]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80954:	f44f 7240 	mov.w	r2, #768	; 0x300
   80958:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   8095a:	4b25      	ldr	r3, [pc, #148]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8095c:	4a2a      	ldr	r2, [pc, #168]	; (80a08 <CPU3_D_INIT_PIO+0x110>)
   8095e:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80960:	4b23      	ldr	r3, [pc, #140]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80962:	4a2a      	ldr	r2, [pc, #168]	; (80a0c <CPU3_D_INIT_PIO+0x114>)
   80964:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80966:	4b22      	ldr	r3, [pc, #136]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80968:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8096c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   8096e:	4b20      	ldr	r3, [pc, #128]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80970:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80974:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80976:	4b20      	ldr	r3, [pc, #128]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80978:	4a25      	ldr	r2, [pc, #148]	; (80a10 <CPU3_D_INIT_PIO+0x118>)
   8097a:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   8097c:	4b1e      	ldr	r3, [pc, #120]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8097e:	4a24      	ldr	r2, [pc, #144]	; (80a10 <CPU3_D_INIT_PIO+0x118>)
   80980:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80982:	4b1d      	ldr	r3, [pc, #116]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80984:	4a23      	ldr	r2, [pc, #140]	; (80a14 <CPU3_D_INIT_PIO+0x11c>)
   80986:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80988:	4b1b      	ldr	r3, [pc, #108]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8098a:	4a23      	ldr	r2, [pc, #140]	; (80a18 <CPU3_D_INIT_PIO+0x120>)
   8098c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   8098e:	4b1a      	ldr	r3, [pc, #104]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80990:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80994:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80996:	4b19      	ldr	r3, [pc, #100]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   80998:	4a20      	ldr	r2, [pc, #128]	; (80a1c <CPU3_D_INIT_PIO+0x124>)
   8099a:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   8099c:	4b17      	ldr	r3, [pc, #92]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   8099e:	4a20      	ldr	r2, [pc, #128]	; (80a20 <CPU3_D_INIT_PIO+0x128>)
   809a0:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   809a2:	4b16      	ldr	r3, [pc, #88]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809a4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   809a8:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   809aa:	4b14      	ldr	r3, [pc, #80]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809ac:	4a1d      	ldr	r2, [pc, #116]	; (80a24 <CPU3_D_INIT_PIO+0x12c>)
   809ae:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   809b0:	4b12      	ldr	r3, [pc, #72]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   809b6:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   809b8:	4b11      	ldr	r3, [pc, #68]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809ba:	f641 6210 	movw	r2, #7696	; 0x1e10
   809be:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   809c0:	4b0f      	ldr	r3, [pc, #60]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809c2:	226f      	movs	r2, #111	; 0x6f
   809c4:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   809c6:	4b0e      	ldr	r3, [pc, #56]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809c8:	220f      	movs	r2, #15
   809ca:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   809cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809d0:	2001      	movs	r0, #1
   809d2:	4b15      	ldr	r3, [pc, #84]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809d4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   809d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809da:	2000      	movs	r0, #0
   809dc:	4b12      	ldr	r3, [pc, #72]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809de:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   809e0:	4912      	ldr	r1, [pc, #72]	; (80a2c <CPU3_D_INIT_PIO+0x134>)
   809e2:	2003      	movs	r0, #3
   809e4:	4b10      	ldr	r3, [pc, #64]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809e6:	4798      	blx	r3





}
   809e8:	bf00      	nop
   809ea:	bd80      	pop	{r7, pc}
   809ec:	000832bd 	.word	0x000832bd
   809f0:	400e0e00 	.word	0x400e0e00
   809f4:	50494f00 	.word	0x50494f00
   809f8:	400e1000 	.word	0x400e1000
   809fc:	400e1200 	.word	0x400e1200
   80a00:	400e1400 	.word	0x400e1400
   80a04:	1f870343 	.word	0x1f870343
   80a08:	0018c004 	.word	0x0018c004
   80a0c:	00180004 	.word	0x00180004
   80a10:	08204000 	.word	0x08204000
   80a14:	f01800ff 	.word	0xf01800ff
   80a18:	06204000 	.word	0x06204000
   80a1c:	0d8ff1fe 	.word	0x0d8ff1fe
   80a20:	008ff1fe 	.word	0x008ff1fe
   80a24:	060ff1fe 	.word	0x060ff1fe
   80a28:	00082d2d 	.word	0x00082d2d
   80a2c:	30000001 	.word	0x30000001

00080a30 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80a30:	b480      	push	{r7}
   80a32:	b083      	sub	sp, #12
   80a34:	af00      	add	r7, sp, #0
   80a36:	4603      	mov	r3, r0
   80a38:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80a3a:	4909      	ldr	r1, [pc, #36]	; (80a60 <NVIC_ClearPendingIRQ+0x30>)
   80a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80a40:	095b      	lsrs	r3, r3, #5
   80a42:	79fa      	ldrb	r2, [r7, #7]
   80a44:	f002 021f 	and.w	r2, r2, #31
   80a48:	2001      	movs	r0, #1
   80a4a:	fa00 f202 	lsl.w	r2, r0, r2
   80a4e:	3360      	adds	r3, #96	; 0x60
   80a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80a54:	bf00      	nop
   80a56:	370c      	adds	r7, #12
   80a58:	46bd      	mov	sp, r7
   80a5a:	bc80      	pop	{r7}
   80a5c:	4770      	bx	lr
   80a5e:	bf00      	nop
   80a60:	e000e100 	.word	0xe000e100

00080a64 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80a64:	b580      	push	{r7, lr}
   80a66:	af00      	add	r7, sp, #0
	PIOD->PIO_WPMR	= 0x50494F00;
   80a68:	4b2b      	ldr	r3, [pc, #172]	; (80b18 <TC0_Handler+0xb4>)
   80a6a:	4a2c      	ldr	r2, [pc, #176]	; (80b1c <TC0_Handler+0xb8>)
   80a6c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80a70:	4b2b      	ldr	r3, [pc, #172]	; (80b20 <TC0_Handler+0xbc>)
   80a72:	4a2a      	ldr	r2, [pc, #168]	; (80b1c <TC0_Handler+0xb8>)
   80a74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80a78:	4b27      	ldr	r3, [pc, #156]	; (80b18 <TC0_Handler+0xb4>)
   80a7a:	2203      	movs	r2, #3
   80a7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80a80:	4b25      	ldr	r3, [pc, #148]	; (80b18 <TC0_Handler+0xb4>)
   80a82:	220c      	movs	r2, #12
   80a84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80a88:	4b25      	ldr	r3, [pc, #148]	; (80b20 <TC0_Handler+0xbc>)
   80a8a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80a92:	4b23      	ldr	r3, [pc, #140]	; (80b20 <TC0_Handler+0xbc>)
   80a94:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80a98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80a9c:	4b21      	ldr	r3, [pc, #132]	; (80b24 <TC0_Handler+0xc0>)
   80a9e:	681b      	ldr	r3, [r3, #0]
   80aa0:	3301      	adds	r3, #1
   80aa2:	4a20      	ldr	r2, [pc, #128]	; (80b24 <TC0_Handler+0xc0>)
   80aa4:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80aa6:	4b20      	ldr	r3, [pc, #128]	; (80b28 <TC0_Handler+0xc4>)
   80aa8:	681b      	ldr	r3, [r3, #0]
   80aaa:	3301      	adds	r3, #1
   80aac:	4a1e      	ldr	r2, [pc, #120]	; (80b28 <TC0_Handler+0xc4>)
   80aae:	6013      	str	r3, [r2, #0]
   Cnt_TC0_total++;
   80ab0:	4b1e      	ldr	r3, [pc, #120]	; (80b2c <TC0_Handler+0xc8>)
   80ab2:	681b      	ldr	r3, [r3, #0]
   80ab4:	3301      	adds	r3, #1
   80ab6:	4a1d      	ldr	r2, [pc, #116]	; (80b2c <TC0_Handler+0xc8>)
   80ab8:	6013      	str	r3, [r2, #0]
	
	if(count<64)
   80aba:	4b1a      	ldr	r3, [pc, #104]	; (80b24 <TC0_Handler+0xc0>)
   80abc:	681b      	ldr	r3, [r3, #0]
   80abe:	2b3f      	cmp	r3, #63	; 0x3f
   80ac0:	d80e      	bhi.n	80ae0 <TC0_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ac2:	4a15      	ldr	r2, [pc, #84]	; (80b18 <TC0_Handler+0xb4>)
   80ac4:	4b17      	ldr	r3, [pc, #92]	; (80b24 <TC0_Handler+0xc0>)
   80ac6:	681b      	ldr	r3, [r3, #0]
   80ac8:	4919      	ldr	r1, [pc, #100]	; (80b30 <TC0_Handler+0xcc>)
   80aca:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80ace:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80ad0:	4a13      	ldr	r2, [pc, #76]	; (80b20 <TC0_Handler+0xbc>)
   80ad2:	4b14      	ldr	r3, [pc, #80]	; (80b24 <TC0_Handler+0xc0>)
   80ad4:	681b      	ldr	r3, [r3, #0]
   80ad6:	4916      	ldr	r1, [pc, #88]	; (80b30 <TC0_Handler+0xcc>)
   80ad8:	00db      	lsls	r3, r3, #3
   80ada:	440b      	add	r3, r1
   80adc:	685b      	ldr	r3, [r3, #4]
   80ade:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80ae0:	4b10      	ldr	r3, [pc, #64]	; (80b24 <TC0_Handler+0xc0>)
   80ae2:	681b      	ldr	r3, [r3, #0]
   80ae4:	2b3f      	cmp	r3, #63	; 0x3f
   80ae6:	d911      	bls.n	80b0c <TC0_Handler+0xa8>
	{
		count = 0;
   80ae8:	4b0e      	ldr	r3, [pc, #56]	; (80b24 <TC0_Handler+0xc0>)
   80aea:	2200      	movs	r2, #0
   80aec:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80aee:	4a0a      	ldr	r2, [pc, #40]	; (80b18 <TC0_Handler+0xb4>)
   80af0:	4b0c      	ldr	r3, [pc, #48]	; (80b24 <TC0_Handler+0xc0>)
   80af2:	681b      	ldr	r3, [r3, #0]
   80af4:	490e      	ldr	r1, [pc, #56]	; (80b30 <TC0_Handler+0xcc>)
   80af6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80afa:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80afc:	4a08      	ldr	r2, [pc, #32]	; (80b20 <TC0_Handler+0xbc>)
   80afe:	4b09      	ldr	r3, [pc, #36]	; (80b24 <TC0_Handler+0xc0>)
   80b00:	681b      	ldr	r3, [r3, #0]
   80b02:	490b      	ldr	r1, [pc, #44]	; (80b30 <TC0_Handler+0xcc>)
   80b04:	00db      	lsls	r3, r3, #3
   80b06:	440b      	add	r3, r1
   80b08:	685b      	ldr	r3, [r3, #4]
   80b0a:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80b0c:	2100      	movs	r1, #0
   80b0e:	4809      	ldr	r0, [pc, #36]	; (80b34 <TC0_Handler+0xd0>)
   80b10:	4b09      	ldr	r3, [pc, #36]	; (80b38 <TC0_Handler+0xd4>)
   80b12:	4798      	blx	r3
	{
	
	}
}
   80b14:	bf00      	nop
   80b16:	bd80      	pop	{r7, pc}
   80b18:	400e1400 	.word	0x400e1400
   80b1c:	50494f00 	.word	0x50494f00
   80b20:	400e1200 	.word	0x400e1200
   80b24:	20070ccc 	.word	0x20070ccc
   80b28:	20070ca0 	.word	0x20070ca0
   80b2c:	20070ca8 	.word	0x20070ca8
   80b30:	20070000 	.word	0x20070000
   80b34:	40080000 	.word	0x40080000
   80b38:	000814ad 	.word	0x000814ad

00080b3c <TC1_Handler>:

void TC1_Handler()
{	PIOD->PIO_WPMR	= 0x50494F00;
   80b3c:	b580      	push	{r7, lr}
   80b3e:	af00      	add	r7, sp, #0
   80b40:	4b2b      	ldr	r3, [pc, #172]	; (80bf0 <TC1_Handler+0xb4>)
   80b42:	4a2c      	ldr	r2, [pc, #176]	; (80bf4 <TC1_Handler+0xb8>)
   80b44:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80b48:	4b2b      	ldr	r3, [pc, #172]	; (80bf8 <TC1_Handler+0xbc>)
   80b4a:	4a2a      	ldr	r2, [pc, #168]	; (80bf4 <TC1_Handler+0xb8>)
   80b4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80b50:	4b27      	ldr	r3, [pc, #156]	; (80bf0 <TC1_Handler+0xb4>)
   80b52:	220c      	movs	r2, #12
   80b54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80b58:	4b25      	ldr	r3, [pc, #148]	; (80bf0 <TC1_Handler+0xb4>)
   80b5a:	2203      	movs	r2, #3
   80b5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80b60:	4b25      	ldr	r3, [pc, #148]	; (80bf8 <TC1_Handler+0xbc>)
   80b62:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80b66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80b6a:	4b23      	ldr	r3, [pc, #140]	; (80bf8 <TC1_Handler+0xbc>)
   80b6c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80b74:	4b21      	ldr	r3, [pc, #132]	; (80bfc <TC1_Handler+0xc0>)
   80b76:	681b      	ldr	r3, [r3, #0]
   80b78:	3301      	adds	r3, #1
   80b7a:	4a20      	ldr	r2, [pc, #128]	; (80bfc <TC1_Handler+0xc0>)
   80b7c:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80b7e:	4b20      	ldr	r3, [pc, #128]	; (80c00 <TC1_Handler+0xc4>)
   80b80:	681b      	ldr	r3, [r3, #0]
   80b82:	3301      	adds	r3, #1
   80b84:	4a1e      	ldr	r2, [pc, #120]	; (80c00 <TC1_Handler+0xc4>)
   80b86:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80b88:	4b1e      	ldr	r3, [pc, #120]	; (80c04 <TC1_Handler+0xc8>)
   80b8a:	681b      	ldr	r3, [r3, #0]
   80b8c:	3301      	adds	r3, #1
   80b8e:	4a1d      	ldr	r2, [pc, #116]	; (80c04 <TC1_Handler+0xc8>)
   80b90:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80b92:	4b1a      	ldr	r3, [pc, #104]	; (80bfc <TC1_Handler+0xc0>)
   80b94:	681b      	ldr	r3, [r3, #0]
   80b96:	2b3f      	cmp	r3, #63	; 0x3f
   80b98:	d80e      	bhi.n	80bb8 <TC1_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80b9a:	4a15      	ldr	r2, [pc, #84]	; (80bf0 <TC1_Handler+0xb4>)
   80b9c:	4b17      	ldr	r3, [pc, #92]	; (80bfc <TC1_Handler+0xc0>)
   80b9e:	681b      	ldr	r3, [r3, #0]
   80ba0:	4919      	ldr	r1, [pc, #100]	; (80c08 <TC1_Handler+0xcc>)
   80ba2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80ba6:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80ba8:	4a13      	ldr	r2, [pc, #76]	; (80bf8 <TC1_Handler+0xbc>)
   80baa:	4b14      	ldr	r3, [pc, #80]	; (80bfc <TC1_Handler+0xc0>)
   80bac:	681b      	ldr	r3, [r3, #0]
   80bae:	4916      	ldr	r1, [pc, #88]	; (80c08 <TC1_Handler+0xcc>)
   80bb0:	00db      	lsls	r3, r3, #3
   80bb2:	440b      	add	r3, r1
   80bb4:	685b      	ldr	r3, [r3, #4]
   80bb6:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80bb8:	4b10      	ldr	r3, [pc, #64]	; (80bfc <TC1_Handler+0xc0>)
   80bba:	681b      	ldr	r3, [r3, #0]
   80bbc:	2b3f      	cmp	r3, #63	; 0x3f
   80bbe:	d911      	bls.n	80be4 <TC1_Handler+0xa8>
	{
		count1 = 0;
   80bc0:	4b0e      	ldr	r3, [pc, #56]	; (80bfc <TC1_Handler+0xc0>)
   80bc2:	2200      	movs	r2, #0
   80bc4:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80bc6:	4a0a      	ldr	r2, [pc, #40]	; (80bf0 <TC1_Handler+0xb4>)
   80bc8:	4b0c      	ldr	r3, [pc, #48]	; (80bfc <TC1_Handler+0xc0>)
   80bca:	681b      	ldr	r3, [r3, #0]
   80bcc:	490e      	ldr	r1, [pc, #56]	; (80c08 <TC1_Handler+0xcc>)
   80bce:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80bd2:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80bd4:	4a08      	ldr	r2, [pc, #32]	; (80bf8 <TC1_Handler+0xbc>)
   80bd6:	4b09      	ldr	r3, [pc, #36]	; (80bfc <TC1_Handler+0xc0>)
   80bd8:	681b      	ldr	r3, [r3, #0]
   80bda:	490b      	ldr	r1, [pc, #44]	; (80c08 <TC1_Handler+0xcc>)
   80bdc:	00db      	lsls	r3, r3, #3
   80bde:	440b      	add	r3, r1
   80be0:	685b      	ldr	r3, [r3, #4]
   80be2:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80be4:	2101      	movs	r1, #1
   80be6:	4809      	ldr	r0, [pc, #36]	; (80c0c <TC1_Handler+0xd0>)
   80be8:	4b09      	ldr	r3, [pc, #36]	; (80c10 <TC1_Handler+0xd4>)
   80bea:	4798      	blx	r3
	{
		
		
	}
}
   80bec:	bf00      	nop
   80bee:	bd80      	pop	{r7, pc}
   80bf0:	400e1400 	.word	0x400e1400
   80bf4:	50494f00 	.word	0x50494f00
   80bf8:	400e1200 	.word	0x400e1200
   80bfc:	20070cd0 	.word	0x20070cd0
   80c00:	20070ca4 	.word	0x20070ca4
   80c04:	20070cac 	.word	0x20070cac
   80c08:	20070200 	.word	0x20070200
   80c0c:	40080000 	.word	0x40080000
   80c10:	000814ad 	.word	0x000814ad

00080c14 <TC2_Handler>:
void TC2_Handler()
{
   80c14:	b580      	push	{r7, lr}
   80c16:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80c18:	2100      	movs	r1, #0
   80c1a:	4808      	ldr	r0, [pc, #32]	; (80c3c <TC2_Handler+0x28>)
   80c1c:	4b08      	ldr	r3, [pc, #32]	; (80c40 <TC2_Handler+0x2c>)
   80c1e:	4798      	blx	r3
	tc_stop(TC0,1);
   80c20:	2101      	movs	r1, #1
   80c22:	4806      	ldr	r0, [pc, #24]	; (80c3c <TC2_Handler+0x28>)
   80c24:	4b06      	ldr	r3, [pc, #24]	; (80c40 <TC2_Handler+0x2c>)
   80c26:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80c28:	4b06      	ldr	r3, [pc, #24]	; (80c44 <TC2_Handler+0x30>)
   80c2a:	2200      	movs	r2, #0
   80c2c:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80c2e:	2102      	movs	r1, #2
   80c30:	4802      	ldr	r0, [pc, #8]	; (80c3c <TC2_Handler+0x28>)
   80c32:	4b05      	ldr	r3, [pc, #20]	; (80c48 <TC2_Handler+0x34>)
   80c34:	4798      	blx	r3
	{
		
	}
}
   80c36:	bf00      	nop
   80c38:	bd80      	pop	{r7, pc}
   80c3a:	bf00      	nop
   80c3c:	40080000 	.word	0x40080000
   80c40:	00081441 	.word	0x00081441
   80c44:	20070c9c 	.word	0x20070c9c
   80c48:	000814ad 	.word	0x000814ad

00080c4c <TC3_Handler>:
void TC3_Handler()
{
   80c4c:	b580      	push	{r7, lr}
   80c4e:	af00      	add	r7, sp, #0
	OneSecFlag = 1;
   80c50:	4b06      	ldr	r3, [pc, #24]	; (80c6c <TC3_Handler+0x20>)
   80c52:	2201      	movs	r2, #1
   80c54:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80c56:	2100      	movs	r1, #0
   80c58:	4805      	ldr	r0, [pc, #20]	; (80c70 <TC3_Handler+0x24>)
   80c5a:	4b06      	ldr	r3, [pc, #24]	; (80c74 <TC3_Handler+0x28>)
   80c5c:	4798      	blx	r3
	{
		
	}
	tc_stop(TC1,0);
   80c5e:	2100      	movs	r1, #0
   80c60:	4803      	ldr	r0, [pc, #12]	; (80c70 <TC3_Handler+0x24>)
   80c62:	4b05      	ldr	r3, [pc, #20]	; (80c78 <TC3_Handler+0x2c>)
   80c64:	4798      	blx	r3
}
   80c66:	bf00      	nop
   80c68:	bd80      	pop	{r7, pc}
   80c6a:	bf00      	nop
   80c6c:	20070cb0 	.word	0x20070cb0
   80c70:	40084000 	.word	0x40084000
   80c74:	000814ad 	.word	0x000814ad
   80c78:	00081441 	.word	0x00081441

00080c7c <TC7_Handler>:

void TC7_Handler(){
   80c7c:	b580      	push	{r7, lr}
   80c7e:	af00      	add	r7, sp, #0
	
	OneSecFlag = 1;
   80c80:	4b06      	ldr	r3, [pc, #24]	; (80c9c <TC7_Handler+0x20>)
   80c82:	2201      	movs	r2, #1
   80c84:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC2, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80c86:	2101      	movs	r1, #1
   80c88:	4805      	ldr	r0, [pc, #20]	; (80ca0 <TC7_Handler+0x24>)
   80c8a:	4b06      	ldr	r3, [pc, #24]	; (80ca4 <TC7_Handler+0x28>)
   80c8c:	4798      	blx	r3
	{
		
	}
	tc_stop(TC2,1);
   80c8e:	2101      	movs	r1, #1
   80c90:	4803      	ldr	r0, [pc, #12]	; (80ca0 <TC7_Handler+0x24>)
   80c92:	4b05      	ldr	r3, [pc, #20]	; (80ca8 <TC7_Handler+0x2c>)
   80c94:	4798      	blx	r3
	
}
   80c96:	bf00      	nop
   80c98:	bd80      	pop	{r7, pc}
   80c9a:	bf00      	nop
   80c9c:	20070cb0 	.word	0x20070cb0
   80ca0:	40088000 	.word	0x40088000
   80ca4:	000814ad 	.word	0x000814ad
   80ca8:	00081441 	.word	0x00081441

00080cac <TC6_Handler>:

void TC6_Handler()
{
   80cac:	b580      	push	{r7, lr}
   80cae:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80cb0:	2021      	movs	r0, #33	; 0x21
   80cb2:	4b29      	ldr	r3, [pc, #164]	; (80d58 <TC6_Handler+0xac>)
   80cb4:	4798      	blx	r3
	tick++;
   80cb6:	4b29      	ldr	r3, [pc, #164]	; (80d5c <TC6_Handler+0xb0>)
   80cb8:	681b      	ldr	r3, [r3, #0]
   80cba:	3301      	adds	r3, #1
   80cbc:	4a27      	ldr	r2, [pc, #156]	; (80d5c <TC6_Handler+0xb0>)
   80cbe:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80cc0:	4b26      	ldr	r3, [pc, #152]	; (80d5c <TC6_Handler+0xb0>)
   80cc2:	681b      	ldr	r3, [r3, #0]
   80cc4:	2b0a      	cmp	r3, #10
   80cc6:	d10a      	bne.n	80cde <TC6_Handler+0x32>
	{
		tick_10++;
   80cc8:	4b25      	ldr	r3, [pc, #148]	; (80d60 <TC6_Handler+0xb4>)
   80cca:	681b      	ldr	r3, [r3, #0]
   80ccc:	3301      	adds	r3, #1
   80cce:	4a24      	ldr	r2, [pc, #144]	; (80d60 <TC6_Handler+0xb4>)
   80cd0:	6013      	str	r3, [r2, #0]
		tick = 0;
   80cd2:	4b22      	ldr	r3, [pc, #136]	; (80d5c <TC6_Handler+0xb0>)
   80cd4:	2200      	movs	r2, #0
   80cd6:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80cd8:	4b22      	ldr	r3, [pc, #136]	; (80d64 <TC6_Handler+0xb8>)
   80cda:	2200      	movs	r2, #0
   80cdc:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80cde:	4b20      	ldr	r3, [pc, #128]	; (80d60 <TC6_Handler+0xb4>)
   80ce0:	681b      	ldr	r3, [r3, #0]
   80ce2:	2b05      	cmp	r3, #5
   80ce4:	d10a      	bne.n	80cfc <TC6_Handler+0x50>
	{
		tick_50++;
   80ce6:	4b20      	ldr	r3, [pc, #128]	; (80d68 <TC6_Handler+0xbc>)
   80ce8:	681b      	ldr	r3, [r3, #0]
   80cea:	3301      	adds	r3, #1
   80cec:	4a1e      	ldr	r2, [pc, #120]	; (80d68 <TC6_Handler+0xbc>)
   80cee:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80cf0:	4b1b      	ldr	r3, [pc, #108]	; (80d60 <TC6_Handler+0xb4>)
   80cf2:	2200      	movs	r2, #0
   80cf4:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80cf6:	4b1b      	ldr	r3, [pc, #108]	; (80d64 <TC6_Handler+0xb8>)
   80cf8:	2201      	movs	r2, #1
   80cfa:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80cfc:	4b1a      	ldr	r3, [pc, #104]	; (80d68 <TC6_Handler+0xbc>)
   80cfe:	681b      	ldr	r3, [r3, #0]
   80d00:	2b02      	cmp	r3, #2
   80d02:	d10a      	bne.n	80d1a <TC6_Handler+0x6e>
	{
		tick_100++;
   80d04:	4b19      	ldr	r3, [pc, #100]	; (80d6c <TC6_Handler+0xc0>)
   80d06:	681b      	ldr	r3, [r3, #0]
   80d08:	3301      	adds	r3, #1
   80d0a:	4a18      	ldr	r2, [pc, #96]	; (80d6c <TC6_Handler+0xc0>)
   80d0c:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80d0e:	4b16      	ldr	r3, [pc, #88]	; (80d68 <TC6_Handler+0xbc>)
   80d10:	2200      	movs	r2, #0
   80d12:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80d14:	4b13      	ldr	r3, [pc, #76]	; (80d64 <TC6_Handler+0xb8>)
   80d16:	2202      	movs	r2, #2
   80d18:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80d1a:	4b14      	ldr	r3, [pc, #80]	; (80d6c <TC6_Handler+0xc0>)
   80d1c:	681b      	ldr	r3, [r3, #0]
   80d1e:	2b05      	cmp	r3, #5
   80d20:	d10a      	bne.n	80d38 <TC6_Handler+0x8c>
	{
		tick_500++;
   80d22:	4b13      	ldr	r3, [pc, #76]	; (80d70 <TC6_Handler+0xc4>)
   80d24:	681b      	ldr	r3, [r3, #0]
   80d26:	3301      	adds	r3, #1
   80d28:	4a11      	ldr	r2, [pc, #68]	; (80d70 <TC6_Handler+0xc4>)
   80d2a:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80d2c:	4b0f      	ldr	r3, [pc, #60]	; (80d6c <TC6_Handler+0xc0>)
   80d2e:	2200      	movs	r2, #0
   80d30:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80d32:	4b0c      	ldr	r3, [pc, #48]	; (80d64 <TC6_Handler+0xb8>)
   80d34:	2203      	movs	r2, #3
   80d36:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80d38:	4b0d      	ldr	r3, [pc, #52]	; (80d70 <TC6_Handler+0xc4>)
   80d3a:	681b      	ldr	r3, [r3, #0]
   80d3c:	2b02      	cmp	r3, #2
   80d3e:	d105      	bne.n	80d4c <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80d40:	4b0b      	ldr	r3, [pc, #44]	; (80d70 <TC6_Handler+0xc4>)
   80d42:	2200      	movs	r2, #0
   80d44:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80d46:	4b07      	ldr	r3, [pc, #28]	; (80d64 <TC6_Handler+0xb8>)
   80d48:	2204      	movs	r2, #4
   80d4a:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80d4c:	2100      	movs	r1, #0
   80d4e:	4809      	ldr	r0, [pc, #36]	; (80d74 <TC6_Handler+0xc8>)
   80d50:	4b09      	ldr	r3, [pc, #36]	; (80d78 <TC6_Handler+0xcc>)
   80d52:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80d54:	bf00      	nop
   80d56:	bd80      	pop	{r7, pc}
   80d58:	00080a31 	.word	0x00080a31
   80d5c:	20070cb4 	.word	0x20070cb4
   80d60:	20070cb8 	.word	0x20070cb8
   80d64:	200711ec 	.word	0x200711ec
   80d68:	20070cbc 	.word	0x20070cbc
   80d6c:	20070cc0 	.word	0x20070cc0
   80d70:	20070cc4 	.word	0x20070cc4
   80d74:	40088000 	.word	0x40088000
   80d78:	000814ad 	.word	0x000814ad

00080d7c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80d7c:	b480      	push	{r7}
   80d7e:	b083      	sub	sp, #12
   80d80:	af00      	add	r7, sp, #0
   80d82:	4603      	mov	r3, r0
   80d84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80d86:	4908      	ldr	r1, [pc, #32]	; (80da8 <NVIC_EnableIRQ+0x2c>)
   80d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d8c:	095b      	lsrs	r3, r3, #5
   80d8e:	79fa      	ldrb	r2, [r7, #7]
   80d90:	f002 021f 	and.w	r2, r2, #31
   80d94:	2001      	movs	r0, #1
   80d96:	fa00 f202 	lsl.w	r2, r0, r2
   80d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d9e:	bf00      	nop
   80da0:	370c      	adds	r7, #12
   80da2:	46bd      	mov	sp, r7
   80da4:	bc80      	pop	{r7}
   80da6:	4770      	bx	lr
   80da8:	e000e100 	.word	0xe000e100

00080dac <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80dac:	b480      	push	{r7}
   80dae:	b083      	sub	sp, #12
   80db0:	af00      	add	r7, sp, #0
   80db2:	4603      	mov	r3, r0
   80db4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80db6:	4909      	ldr	r1, [pc, #36]	; (80ddc <NVIC_DisableIRQ+0x30>)
   80db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80dbc:	095b      	lsrs	r3, r3, #5
   80dbe:	79fa      	ldrb	r2, [r7, #7]
   80dc0:	f002 021f 	and.w	r2, r2, #31
   80dc4:	2001      	movs	r0, #1
   80dc6:	fa00 f202 	lsl.w	r2, r0, r2
   80dca:	3320      	adds	r3, #32
   80dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80dd0:	bf00      	nop
   80dd2:	370c      	adds	r7, #12
   80dd4:	46bd      	mov	sp, r7
   80dd6:	bc80      	pop	{r7}
   80dd8:	4770      	bx	lr
   80dda:	bf00      	nop
   80ddc:	e000e100 	.word	0xe000e100

00080de0 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80de0:	b480      	push	{r7}
   80de2:	b083      	sub	sp, #12
   80de4:	af00      	add	r7, sp, #0
   80de6:	4603      	mov	r3, r0
   80de8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80dea:	4909      	ldr	r1, [pc, #36]	; (80e10 <NVIC_ClearPendingIRQ+0x30>)
   80dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80df0:	095b      	lsrs	r3, r3, #5
   80df2:	79fa      	ldrb	r2, [r7, #7]
   80df4:	f002 021f 	and.w	r2, r2, #31
   80df8:	2001      	movs	r0, #1
   80dfa:	fa00 f202 	lsl.w	r2, r0, r2
   80dfe:	3360      	adds	r3, #96	; 0x60
   80e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80e04:	bf00      	nop
   80e06:	370c      	adds	r7, #12
   80e08:	46bd      	mov	sp, r7
   80e0a:	bc80      	pop	{r7}
   80e0c:	4770      	bx	lr
   80e0e:	bf00      	nop
   80e10:	e000e100 	.word	0xe000e100

00080e14 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   80e14:	b480      	push	{r7}
   80e16:	b083      	sub	sp, #12
   80e18:	af00      	add	r7, sp, #0
   80e1a:	4603      	mov	r3, r0
   80e1c:	6039      	str	r1, [r7, #0]
   80e1e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   80e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80e24:	2b00      	cmp	r3, #0
   80e26:	da0b      	bge.n	80e40 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80e28:	490d      	ldr	r1, [pc, #52]	; (80e60 <NVIC_SetPriority+0x4c>)
   80e2a:	79fb      	ldrb	r3, [r7, #7]
   80e2c:	f003 030f 	and.w	r3, r3, #15
   80e30:	3b04      	subs	r3, #4
   80e32:	683a      	ldr	r2, [r7, #0]
   80e34:	b2d2      	uxtb	r2, r2
   80e36:	0112      	lsls	r2, r2, #4
   80e38:	b2d2      	uxtb	r2, r2
   80e3a:	440b      	add	r3, r1
   80e3c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   80e3e:	e009      	b.n	80e54 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80e40:	4908      	ldr	r1, [pc, #32]	; (80e64 <NVIC_SetPriority+0x50>)
   80e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80e46:	683a      	ldr	r2, [r7, #0]
   80e48:	b2d2      	uxtb	r2, r2
   80e4a:	0112      	lsls	r2, r2, #4
   80e4c:	b2d2      	uxtb	r2, r2
   80e4e:	440b      	add	r3, r1
   80e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   80e54:	bf00      	nop
   80e56:	370c      	adds	r7, #12
   80e58:	46bd      	mov	sp, r7
   80e5a:	bc80      	pop	{r7}
   80e5c:	4770      	bx	lr
   80e5e:	bf00      	nop
   80e60:	e000ed00 	.word	0xe000ed00
   80e64:	e000e100 	.word	0xe000e100

00080e68 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   80e68:	b580      	push	{r7, lr}
   80e6a:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   80e6c:	2016      	movs	r0, #22
   80e6e:	4b31      	ldr	r3, [pc, #196]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80e70:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   80e72:	2016      	movs	r0, #22
   80e74:	4b30      	ldr	r3, [pc, #192]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80e76:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   80e78:	2100      	movs	r1, #0
   80e7a:	2016      	movs	r0, #22
   80e7c:	4b2f      	ldr	r3, [pc, #188]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80e7e:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   80e80:	2016      	movs	r0, #22
   80e82:	4b2f      	ldr	r3, [pc, #188]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80e84:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   80e86:	2008      	movs	r0, #8
   80e88:	4b2a      	ldr	r3, [pc, #168]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80e8a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   80e8c:	2008      	movs	r0, #8
   80e8e:	4b2a      	ldr	r3, [pc, #168]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80e90:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   80e92:	2100      	movs	r1, #0
   80e94:	2008      	movs	r0, #8
   80e96:	4b29      	ldr	r3, [pc, #164]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80e98:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   80e9a:	2008      	movs	r0, #8
   80e9c:	4b28      	ldr	r3, [pc, #160]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80e9e:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   80ea0:	2101      	movs	r1, #1
   80ea2:	4828      	ldr	r0, [pc, #160]	; (80f44 <CPU3_D_INIT_INT+0xdc>)
   80ea4:	4b28      	ldr	r3, [pc, #160]	; (80f48 <CPU3_D_INIT_INT+0xe0>)
   80ea6:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   80ea8:	201b      	movs	r0, #27
   80eaa:	4b22      	ldr	r3, [pc, #136]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80eac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   80eae:	201b      	movs	r0, #27
   80eb0:	4b21      	ldr	r3, [pc, #132]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80eb2:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   80eb4:	2100      	movs	r1, #0
   80eb6:	201b      	movs	r0, #27
   80eb8:	4b20      	ldr	r3, [pc, #128]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80eba:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   80ebc:	201b      	movs	r0, #27
   80ebe:	4b20      	ldr	r3, [pc, #128]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80ec0:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   80ec2:	201c      	movs	r0, #28
   80ec4:	4b1b      	ldr	r3, [pc, #108]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80ec6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   80ec8:	201c      	movs	r0, #28
   80eca:	4b1b      	ldr	r3, [pc, #108]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80ecc:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   80ece:	2100      	movs	r1, #0
   80ed0:	201c      	movs	r0, #28
   80ed2:	4b1a      	ldr	r3, [pc, #104]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80ed4:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   80ed6:	201c      	movs	r0, #28
   80ed8:	4b19      	ldr	r3, [pc, #100]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80eda:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   80edc:	201d      	movs	r0, #29
   80ede:	4b15      	ldr	r3, [pc, #84]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80ee0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   80ee2:	201d      	movs	r0, #29
   80ee4:	4b14      	ldr	r3, [pc, #80]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80ee6:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   80ee8:	2100      	movs	r1, #0
   80eea:	201d      	movs	r0, #29
   80eec:	4b13      	ldr	r3, [pc, #76]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80eee:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   80ef0:	201d      	movs	r0, #29
   80ef2:	4b13      	ldr	r3, [pc, #76]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80ef4:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   80ef6:	201e      	movs	r0, #30
   80ef8:	4b0e      	ldr	r3, [pc, #56]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80efa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   80efc:	201e      	movs	r0, #30
   80efe:	4b0e      	ldr	r3, [pc, #56]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80f00:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   80f02:	2100      	movs	r1, #0
   80f04:	201e      	movs	r0, #30
   80f06:	4b0d      	ldr	r3, [pc, #52]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80f08:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   80f0a:	201e      	movs	r0, #30
   80f0c:	4b0c      	ldr	r3, [pc, #48]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80f0e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   80f10:	2021      	movs	r0, #33	; 0x21
   80f12:	4b08      	ldr	r3, [pc, #32]	; (80f34 <CPU3_D_INIT_INT+0xcc>)
   80f14:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80f16:	2021      	movs	r0, #33	; 0x21
   80f18:	4b07      	ldr	r3, [pc, #28]	; (80f38 <CPU3_D_INIT_INT+0xd0>)
   80f1a:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   80f1c:	2100      	movs	r1, #0
   80f1e:	2021      	movs	r0, #33	; 0x21
   80f20:	4b06      	ldr	r3, [pc, #24]	; (80f3c <CPU3_D_INIT_INT+0xd4>)
   80f22:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   80f24:	2021      	movs	r0, #33	; 0x21
   80f26:	4b06      	ldr	r3, [pc, #24]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80f28:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   80f2a:	202b      	movs	r0, #43	; 0x2b
   80f2c:	4b04      	ldr	r3, [pc, #16]	; (80f40 <CPU3_D_INIT_INT+0xd8>)
   80f2e:	4798      	blx	r3
	
	
   80f30:	bf00      	nop
   80f32:	bd80      	pop	{r7, pc}
   80f34:	00080dad 	.word	0x00080dad
   80f38:	00080de1 	.word	0x00080de1
   80f3c:	00080e15 	.word	0x00080e15
   80f40:	00080d7d 	.word	0x00080d7d
   80f44:	400e0800 	.word	0x400e0800
   80f48:	00081579 	.word	0x00081579

00080f4c <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   80f4c:	b480      	push	{r7}
   80f4e:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   80f50:	4b14      	ldr	r3, [pc, #80]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f52:	4a15      	ldr	r2, [pc, #84]	; (80fa8 <CPU3_D_INIT_PWM+0x5c>)
   80f54:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f58:	4b12      	ldr	r3, [pc, #72]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f5a:	4a14      	ldr	r2, [pc, #80]	; (80fac <CPU3_D_INIT_PWM+0x60>)
   80f5c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f60:	4b10      	ldr	r3, [pc, #64]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f62:	4a12      	ldr	r2, [pc, #72]	; (80fac <CPU3_D_INIT_PWM+0x60>)
   80f64:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   80f68:	4b0e      	ldr	r3, [pc, #56]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f6a:	22ff      	movs	r2, #255	; 0xff
   80f6c:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   80f6e:	4b0d      	ldr	r3, [pc, #52]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f70:	f640 2241 	movw	r2, #2625	; 0xa41
   80f74:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80f78:	4b0a      	ldr	r3, [pc, #40]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f7e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80f82:	4b08      	ldr	r3, [pc, #32]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f84:	f640 2241 	movw	r2, #2625	; 0xa41
   80f88:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80f8c:	4b05      	ldr	r3, [pc, #20]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   80f96:	4b03      	ldr	r3, [pc, #12]	; (80fa4 <CPU3_D_INIT_PWM+0x58>)
   80f98:	22ff      	movs	r2, #255	; 0xff
   80f9a:	605a      	str	r2, [r3, #4]
}
   80f9c:	bf00      	nop
   80f9e:	46bd      	mov	sp, r7
   80fa0:	bc80      	pop	{r7}
   80fa2:	4770      	bx	lr
   80fa4:	40094000 	.word	0x40094000
   80fa8:	50574d00 	.word	0x50574d00
   80fac:	00070605 	.word	0x00070605

00080fb0 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   80fb0:	b580      	push	{r7, lr}
   80fb2:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   80fb4:	4b23      	ldr	r3, [pc, #140]	; (81044 <CPU3_D_INIT_TIMER+0x94>)
   80fb6:	4a24      	ldr	r2, [pc, #144]	; (81048 <CPU3_D_INIT_TIMER+0x98>)
   80fb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   80fbc:	4b23      	ldr	r3, [pc, #140]	; (8104c <CPU3_D_INIT_TIMER+0x9c>)
   80fbe:	4a22      	ldr	r2, [pc, #136]	; (81048 <CPU3_D_INIT_TIMER+0x98>)
   80fc0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   80fc4:	4b22      	ldr	r3, [pc, #136]	; (81050 <CPU3_D_INIT_TIMER+0xa0>)
   80fc6:	4a20      	ldr	r2, [pc, #128]	; (81048 <CPU3_D_INIT_TIMER+0x98>)
   80fc8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   80fcc:	201b      	movs	r0, #27
   80fce:	4b21      	ldr	r3, [pc, #132]	; (81054 <CPU3_D_INIT_TIMER+0xa4>)
   80fd0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   80fd2:	201c      	movs	r0, #28
   80fd4:	4b1f      	ldr	r3, [pc, #124]	; (81054 <CPU3_D_INIT_TIMER+0xa4>)
   80fd6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   80fd8:	201e      	movs	r0, #30
   80fda:	4b1e      	ldr	r3, [pc, #120]	; (81054 <CPU3_D_INIT_TIMER+0xa4>)
   80fdc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC7);
   80fde:	2022      	movs	r0, #34	; 0x22
   80fe0:	4b1c      	ldr	r3, [pc, #112]	; (81054 <CPU3_D_INIT_TIMER+0xa4>)
   80fe2:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   80fe4:	2021      	movs	r0, #33	; 0x21
   80fe6:	4b1b      	ldr	r3, [pc, #108]	; (81054 <CPU3_D_INIT_TIMER+0xa4>)
   80fe8:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fea:	4b16      	ldr	r3, [pc, #88]	; (81044 <CPU3_D_INIT_TIMER+0x94>)
   80fec:	f24c 0203 	movw	r2, #49155	; 0xc003
   80ff0:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80ff2:	4b14      	ldr	r3, [pc, #80]	; (81044 <CPU3_D_INIT_TIMER+0x94>)
   80ff4:	f24c 0203 	movw	r2, #49155	; 0xc003
   80ff8:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80ffa:	4b14      	ldr	r3, [pc, #80]	; (8104c <CPU3_D_INIT_TIMER+0x9c>)
   80ffc:	f24c 0203 	movw	r2, #49155	; 0xc003
   81000:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81002:	4b12      	ldr	r3, [pc, #72]	; (8104c <CPU3_D_INIT_TIMER+0x9c>)
   81004:	f24c 0203 	movw	r2, #49155	; 0xc003
   81008:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8100a:	4b11      	ldr	r3, [pc, #68]	; (81050 <CPU3_D_INIT_TIMER+0xa0>)
   8100c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81010:	605a      	str	r2, [r3, #4]
	TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81012:	4b0f      	ldr	r3, [pc, #60]	; (81050 <CPU3_D_INIT_TIMER+0xa0>)
   81014:	f24c 0203 	movw	r2, #49155	; 0xc003
   81018:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8101a:	4b0a      	ldr	r3, [pc, #40]	; (81044 <CPU3_D_INIT_TIMER+0x94>)
   8101c:	2210      	movs	r2, #16
   8101e:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81020:	4b08      	ldr	r3, [pc, #32]	; (81044 <CPU3_D_INIT_TIMER+0x94>)
   81022:	2210      	movs	r2, #16
   81024:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81026:	4b09      	ldr	r3, [pc, #36]	; (8104c <CPU3_D_INIT_TIMER+0x9c>)
   81028:	2210      	movs	r2, #16
   8102a:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   8102c:	4b07      	ldr	r3, [pc, #28]	; (8104c <CPU3_D_INIT_TIMER+0x9c>)
   8102e:	2210      	movs	r2, #16
   81030:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81032:	4b07      	ldr	r3, [pc, #28]	; (81050 <CPU3_D_INIT_TIMER+0xa0>)
   81034:	2210      	movs	r2, #16
   81036:	625a      	str	r2, [r3, #36]	; 0x24
	TC2->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81038:	4b05      	ldr	r3, [pc, #20]	; (81050 <CPU3_D_INIT_TIMER+0xa0>)
   8103a:	2210      	movs	r2, #16
   8103c:	665a      	str	r2, [r3, #100]	; 0x64
}
   8103e:	bf00      	nop
   81040:	bd80      	pop	{r7, pc}
   81042:	bf00      	nop
   81044:	40080000 	.word	0x40080000
   81048:	54494d00 	.word	0x54494d00
   8104c:	40084000 	.word	0x40084000
   81050:	40088000 	.word	0x40088000
   81054:	000832bd 	.word	0x000832bd

00081058 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81058:	b580      	push	{r7, lr}
   8105a:	b084      	sub	sp, #16
   8105c:	af00      	add	r7, sp, #0
   8105e:	60f8      	str	r0, [r7, #12]
   81060:	60b9      	str	r1, [r7, #8]
   81062:	603b      	str	r3, [r7, #0]
   81064:	4613      	mov	r3, r2
   81066:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81068:	2000      	movs	r0, #0
   8106a:	4b0d      	ldr	r3, [pc, #52]	; (810a0 <CPU3_D_MAIN_TIMER+0x48>)
   8106c:	4798      	blx	r3
	channel=0;
   8106e:	2300      	movs	r3, #0
   81070:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81072:	4b0c      	ldr	r3, [pc, #48]	; (810a4 <CPU3_D_MAIN_TIMER+0x4c>)
   81074:	f24c 0203 	movw	r2, #49155	; 0xc003
   81078:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   8107a:	683a      	ldr	r2, [r7, #0]
   8107c:	68b9      	ldr	r1, [r7, #8]
   8107e:	68f8      	ldr	r0, [r7, #12]
   81080:	4b09      	ldr	r3, [pc, #36]	; (810a8 <CPU3_D_MAIN_TIMER+0x50>)
   81082:	4798      	blx	r3
	tc_start(tc, channel);
   81084:	68b9      	ldr	r1, [r7, #8]
   81086:	68f8      	ldr	r0, [r7, #12]
   81088:	4b08      	ldr	r3, [pc, #32]	; (810ac <CPU3_D_MAIN_TIMER+0x54>)
   8108a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   8108c:	2210      	movs	r2, #16
   8108e:	68b9      	ldr	r1, [r7, #8]
   81090:	68f8      	ldr	r0, [r7, #12]
   81092:	4b07      	ldr	r3, [pc, #28]	; (810b0 <CPU3_D_MAIN_TIMER+0x58>)
   81094:	4798      	blx	r3
}
   81096:	bf00      	nop
   81098:	4618      	mov	r0, r3
   8109a:	3710      	adds	r7, #16
   8109c:	46bd      	mov	sp, r7
   8109e:	bd80      	pop	{r7, pc}
   810a0:	0008333d 	.word	0x0008333d
   810a4:	40088000 	.word	0x40088000
   810a8:	00081461 	.word	0x00081461
   810ac:	00081421 	.word	0x00081421
   810b0:	00081485 	.word	0x00081485

000810b4 <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   810b4:	b580      	push	{r7, lr}
   810b6:	b084      	sub	sp, #16
   810b8:	af00      	add	r7, sp, #0
   810ba:	60f8      	str	r0, [r7, #12]
   810bc:	60b9      	str	r1, [r7, #8]
   810be:	603b      	str	r3, [r7, #0]
   810c0:	4613      	mov	r3, r2
   810c2:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   810c4:	2000      	movs	r0, #0
   810c6:	4b10      	ldr	r3, [pc, #64]	; (81108 <acid_startTimer1+0x54>)
   810c8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   810ca:	201b      	movs	r0, #27
   810cc:	4b0f      	ldr	r3, [pc, #60]	; (8110c <acid_startTimer1+0x58>)
   810ce:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   810d0:	f24c 0202 	movw	r2, #49154	; 0xc002
   810d4:	68b9      	ldr	r1, [r7, #8]
   810d6:	68f8      	ldr	r0, [r7, #12]
   810d8:	4b0d      	ldr	r3, [pc, #52]	; (81110 <acid_startTimer1+0x5c>)
   810da:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   810dc:	4b0d      	ldr	r3, [pc, #52]	; (81114 <acid_startTimer1+0x60>)
   810de:	f24c 0202 	movw	r2, #49154	; 0xc002
   810e2:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   810e4:	683a      	ldr	r2, [r7, #0]
   810e6:	68b9      	ldr	r1, [r7, #8]
   810e8:	68f8      	ldr	r0, [r7, #12]
   810ea:	4b0b      	ldr	r3, [pc, #44]	; (81118 <acid_startTimer1+0x64>)
   810ec:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   810ee:	2210      	movs	r2, #16
   810f0:	2100      	movs	r1, #0
   810f2:	4808      	ldr	r0, [pc, #32]	; (81114 <acid_startTimer1+0x60>)
   810f4:	4b09      	ldr	r3, [pc, #36]	; (8111c <acid_startTimer1+0x68>)
   810f6:	4798      	blx	r3
	tc_start(tc, channel);
   810f8:	68b9      	ldr	r1, [r7, #8]
   810fa:	68f8      	ldr	r0, [r7, #12]
   810fc:	4b08      	ldr	r3, [pc, #32]	; (81120 <acid_startTimer1+0x6c>)
   810fe:	4798      	blx	r3
}
   81100:	bf00      	nop
   81102:	3710      	adds	r7, #16
   81104:	46bd      	mov	sp, r7
   81106:	bd80      	pop	{r7, pc}
   81108:	0008333d 	.word	0x0008333d
   8110c:	000832bd 	.word	0x000832bd
   81110:	000813e9 	.word	0x000813e9
   81114:	40080000 	.word	0x40080000
   81118:	00081461 	.word	0x00081461
   8111c:	00081485 	.word	0x00081485
   81120:	00081421 	.word	0x00081421

00081124 <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81124:	b580      	push	{r7, lr}
   81126:	b084      	sub	sp, #16
   81128:	af00      	add	r7, sp, #0
   8112a:	60f8      	str	r0, [r7, #12]
   8112c:	60b9      	str	r1, [r7, #8]
   8112e:	603b      	str	r3, [r7, #0]
   81130:	4613      	mov	r3, r2
   81132:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81134:	2000      	movs	r0, #0
   81136:	4b10      	ldr	r3, [pc, #64]	; (81178 <bicar_startTimer1+0x54>)
   81138:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   8113a:	201c      	movs	r0, #28
   8113c:	4b0f      	ldr	r3, [pc, #60]	; (8117c <bicar_startTimer1+0x58>)
   8113e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81140:	f24c 0202 	movw	r2, #49154	; 0xc002
   81144:	68b9      	ldr	r1, [r7, #8]
   81146:	68f8      	ldr	r0, [r7, #12]
   81148:	4b0d      	ldr	r3, [pc, #52]	; (81180 <bicar_startTimer1+0x5c>)
   8114a:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   8114c:	4b0d      	ldr	r3, [pc, #52]	; (81184 <bicar_startTimer1+0x60>)
   8114e:	f24c 0202 	movw	r2, #49154	; 0xc002
   81152:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   81154:	683a      	ldr	r2, [r7, #0]
   81156:	68b9      	ldr	r1, [r7, #8]
   81158:	68f8      	ldr	r0, [r7, #12]
   8115a:	4b0b      	ldr	r3, [pc, #44]	; (81188 <bicar_startTimer1+0x64>)
   8115c:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   8115e:	2210      	movs	r2, #16
   81160:	2101      	movs	r1, #1
   81162:	4808      	ldr	r0, [pc, #32]	; (81184 <bicar_startTimer1+0x60>)
   81164:	4b09      	ldr	r3, [pc, #36]	; (8118c <bicar_startTimer1+0x68>)
   81166:	4798      	blx	r3
	tc_start(tc, channel);
   81168:	68b9      	ldr	r1, [r7, #8]
   8116a:	68f8      	ldr	r0, [r7, #12]
   8116c:	4b08      	ldr	r3, [pc, #32]	; (81190 <bicar_startTimer1+0x6c>)
   8116e:	4798      	blx	r3
}
   81170:	bf00      	nop
   81172:	3710      	adds	r7, #16
   81174:	46bd      	mov	sp, r7
   81176:	bd80      	pop	{r7, pc}
   81178:	0008333d 	.word	0x0008333d
   8117c:	000832bd 	.word	0x000832bd
   81180:	000813e9 	.word	0x000813e9
   81184:	40080000 	.word	0x40080000
   81188:	00081461 	.word	0x00081461
   8118c:	00081485 	.word	0x00081485
   81190:	00081421 	.word	0x00081421

00081194 <startTimer1>:
	tc_enable_interrupt(TC2,1,TC_IER_CPCS);
	tc_start(tc, channel);
}

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81194:	b580      	push	{r7, lr}
   81196:	b084      	sub	sp, #16
   81198:	af00      	add	r7, sp, #0
   8119a:	60f8      	str	r0, [r7, #12]
   8119c:	60b9      	str	r1, [r7, #8]
   8119e:	603b      	str	r3, [r7, #0]
   811a0:	4613      	mov	r3, r2
   811a2:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   811a4:	2000      	movs	r0, #0
   811a6:	4b11      	ldr	r3, [pc, #68]	; (811ec <startTimer1+0x58>)
   811a8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   811aa:	201d      	movs	r0, #29
   811ac:	4b10      	ldr	r3, [pc, #64]	; (811f0 <startTimer1+0x5c>)
   811ae:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   811b0:	f24c 0203 	movw	r2, #49155	; 0xc003
   811b4:	68b9      	ldr	r1, [r7, #8]
   811b6:	68f8      	ldr	r0, [r7, #12]
   811b8:	4b0e      	ldr	r3, [pc, #56]	; (811f4 <startTimer1+0x60>)
   811ba:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   811bc:	4b0e      	ldr	r3, [pc, #56]	; (811f8 <startTimer1+0x64>)
   811be:	f24c 0203 	movw	r2, #49155	; 0xc003
   811c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   811c6:	683a      	ldr	r2, [r7, #0]
   811c8:	68b9      	ldr	r1, [r7, #8]
   811ca:	68f8      	ldr	r0, [r7, #12]
   811cc:	4b0b      	ldr	r3, [pc, #44]	; (811fc <startTimer1+0x68>)
   811ce:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   811d0:	2210      	movs	r2, #16
   811d2:	2102      	movs	r1, #2
   811d4:	4808      	ldr	r0, [pc, #32]	; (811f8 <startTimer1+0x64>)
   811d6:	4b0a      	ldr	r3, [pc, #40]	; (81200 <startTimer1+0x6c>)
   811d8:	4798      	blx	r3
	tc_start(tc, channel);
   811da:	68b9      	ldr	r1, [r7, #8]
   811dc:	68f8      	ldr	r0, [r7, #12]
   811de:	4b09      	ldr	r3, [pc, #36]	; (81204 <startTimer1+0x70>)
   811e0:	4798      	blx	r3
}
   811e2:	bf00      	nop
   811e4:	3710      	adds	r7, #16
   811e6:	46bd      	mov	sp, r7
   811e8:	bd80      	pop	{r7, pc}
   811ea:	bf00      	nop
   811ec:	0008333d 	.word	0x0008333d
   811f0:	000832bd 	.word	0x000832bd
   811f4:	000813e9 	.word	0x000813e9
   811f8:	40080000 	.word	0x40080000
   811fc:	00081461 	.word	0x00081461
   81200:	00081485 	.word	0x00081485
   81204:	00081421 	.word	0x00081421

00081208 <startTimer2>:
void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81208:	b580      	push	{r7, lr}
   8120a:	b084      	sub	sp, #16
   8120c:	af00      	add	r7, sp, #0
   8120e:	60f8      	str	r0, [r7, #12]
   81210:	60b9      	str	r1, [r7, #8]
   81212:	603b      	str	r3, [r7, #0]
   81214:	4613      	mov	r3, r2
   81216:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81218:	2000      	movs	r0, #0
   8121a:	4b10      	ldr	r3, [pc, #64]	; (8125c <startTimer2+0x54>)
   8121c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   8121e:	201e      	movs	r0, #30
   81220:	4b0f      	ldr	r3, [pc, #60]	; (81260 <startTimer2+0x58>)
   81222:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81224:	f24c 0203 	movw	r2, #49155	; 0xc003
   81228:	68b9      	ldr	r1, [r7, #8]
   8122a:	68f8      	ldr	r0, [r7, #12]
   8122c:	4b0d      	ldr	r3, [pc, #52]	; (81264 <startTimer2+0x5c>)
   8122e:	4798      	blx	r3
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81230:	4b0d      	ldr	r3, [pc, #52]	; (81268 <startTimer2+0x60>)
   81232:	f24c 0203 	movw	r2, #49155	; 0xc003
   81236:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81238:	683a      	ldr	r2, [r7, #0]
   8123a:	68b9      	ldr	r1, [r7, #8]
   8123c:	68f8      	ldr	r0, [r7, #12]
   8123e:	4b0b      	ldr	r3, [pc, #44]	; (8126c <startTimer2+0x64>)
   81240:	4798      	blx	r3
	tc_enable_interrupt(TC1,0,TC_IER_CPCS);
   81242:	2210      	movs	r2, #16
   81244:	2100      	movs	r1, #0
   81246:	4808      	ldr	r0, [pc, #32]	; (81268 <startTimer2+0x60>)
   81248:	4b09      	ldr	r3, [pc, #36]	; (81270 <startTimer2+0x68>)
   8124a:	4798      	blx	r3
	tc_start(tc, channel);
   8124c:	68b9      	ldr	r1, [r7, #8]
   8124e:	68f8      	ldr	r0, [r7, #12]
   81250:	4b08      	ldr	r3, [pc, #32]	; (81274 <startTimer2+0x6c>)
   81252:	4798      	blx	r3
}
   81254:	bf00      	nop
   81256:	3710      	adds	r7, #16
   81258:	46bd      	mov	sp, r7
   8125a:	bd80      	pop	{r7, pc}
   8125c:	0008333d 	.word	0x0008333d
   81260:	000832bd 	.word	0x000832bd
   81264:	000813e9 	.word	0x000813e9
   81268:	40084000 	.word	0x40084000
   8126c:	00081461 	.word	0x00081461
   81270:	00081485 	.word	0x00081485
   81274:	00081421 	.word	0x00081421

00081278 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81278:	b580      	push	{r7, lr}
   8127a:	b082      	sub	sp, #8
   8127c:	af00      	add	r7, sp, #0
   8127e:	4603      	mov	r3, r0
   81280:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   81282:	79fb      	ldrb	r3, [r7, #7]
   81284:	4618      	mov	r0, r3
   81286:	4b03      	ldr	r3, [pc, #12]	; (81294 <cpu3_sv_cntrl_activatepump+0x1c>)
   81288:	4798      	blx	r3
	
	return 0;
   8128a:	2300      	movs	r3, #0
}
   8128c:	4618      	mov	r0, r3
   8128e:	3708      	adds	r7, #8
   81290:	46bd      	mov	sp, r7
   81292:	bd80      	pop	{r7, pc}
   81294:	00080751 	.word	0x00080751

00081298 <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   81298:	b580      	push	{r7, lr}
   8129a:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   8129c:	4b09      	ldr	r3, [pc, #36]	; (812c4 <CPU3_S_SYSTEM_INIT+0x2c>)
   8129e:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   812a0:	4b09      	ldr	r3, [pc, #36]	; (812c8 <CPU3_S_SYSTEM_INIT+0x30>)
   812a2:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   812a4:	4b09      	ldr	r3, [pc, #36]	; (812cc <CPU3_S_SYSTEM_INIT+0x34>)
   812a6:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   812a8:	4b09      	ldr	r3, [pc, #36]	; (812d0 <CPU3_S_SYSTEM_INIT+0x38>)
   812aa:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   812ac:	4b09      	ldr	r3, [pc, #36]	; (812d4 <CPU3_S_SYSTEM_INIT+0x3c>)
   812ae:	4798      	blx	r3
	DD_INIT_CAN();
   812b0:	4b09      	ldr	r3, [pc, #36]	; (812d8 <CPU3_S_SYSTEM_INIT+0x40>)
   812b2:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   812b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   812b8:	2000      	movs	r0, #0
   812ba:	4b08      	ldr	r3, [pc, #32]	; (812dc <CPU3_S_SYSTEM_INIT+0x44>)
   812bc:	4798      	blx	r3
}
   812be:	bf00      	nop
   812c0:	bd80      	pop	{r7, pc}
   812c2:	bf00      	nop
   812c4:	00080151 	.word	0x00080151
   812c8:	00080e69 	.word	0x00080e69
   812cc:	000808f9 	.word	0x000808f9
   812d0:	00080f4d 	.word	0x00080f4d
   812d4:	00080fb1 	.word	0x00080fb1
   812d8:	000805f9 	.word	0x000805f9
   812dc:	000812e1 	.word	0x000812e1

000812e0 <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   812e0:	b580      	push	{r7, lr}
   812e2:	b082      	sub	sp, #8
   812e4:	af00      	add	r7, sp, #0
   812e6:	4603      	mov	r3, r0
   812e8:	6039      	str	r1, [r7, #0]
   812ea:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   812ec:	683b      	ldr	r3, [r7, #0]
   812ee:	b2da      	uxtb	r2, r3
   812f0:	79fb      	ldrb	r3, [r7, #7]
   812f2:	4611      	mov	r1, r2
   812f4:	4618      	mov	r0, r3
   812f6:	4b03      	ldr	r3, [pc, #12]	; (81304 <CPU3_S_START_TIMER+0x24>)
   812f8:	4798      	blx	r3
	
	return 0;
   812fa:	2300      	movs	r3, #0
}
   812fc:	4618      	mov	r0, r3
   812fe:	3708      	adds	r7, #8
   81300:	46bd      	mov	sp, r7
   81302:	bd80      	pop	{r7, pc}
   81304:	000807c5 	.word	0x000807c5

00081308 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   81308:	b580      	push	{r7, lr}
   8130a:	b082      	sub	sp, #8
   8130c:	af00      	add	r7, sp, #0
   8130e:	4603      	mov	r3, r0
   81310:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   81312:	79fb      	ldrb	r3, [r7, #7]
   81314:	4618      	mov	r0, r3
   81316:	4b03      	ldr	r3, [pc, #12]	; (81324 <CPU3_S_STOP_TIMER+0x1c>)
   81318:	4798      	blx	r3
	
	return 0;
   8131a:	2300      	movs	r3, #0
   8131c:	4618      	mov	r0, r3
   8131e:	3708      	adds	r7, #8
   81320:	46bd      	mov	sp, r7
   81322:	bd80      	pop	{r7, pc}
   81324:	0008087d 	.word	0x0008087d

00081328 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81328:	b580      	push	{r7, lr}
   8132a:	b086      	sub	sp, #24
   8132c:	af00      	add	r7, sp, #0
   8132e:	60f8      	str	r0, [r7, #12]
   81330:	60b9      	str	r1, [r7, #8]
   81332:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81334:	2300      	movs	r3, #0
   81336:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   81338:	68fb      	ldr	r3, [r7, #12]
   8133a:	2b00      	cmp	r3, #0
   8133c:	d012      	beq.n	81364 <_read+0x3c>
		return -1;
   8133e:	f04f 33ff 	mov.w	r3, #4294967295
   81342:	e013      	b.n	8136c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   81344:	4b0b      	ldr	r3, [pc, #44]	; (81374 <_read+0x4c>)
   81346:	681b      	ldr	r3, [r3, #0]
   81348:	4a0b      	ldr	r2, [pc, #44]	; (81378 <_read+0x50>)
   8134a:	6812      	ldr	r2, [r2, #0]
   8134c:	68b9      	ldr	r1, [r7, #8]
   8134e:	4610      	mov	r0, r2
   81350:	4798      	blx	r3
		ptr++;
   81352:	68bb      	ldr	r3, [r7, #8]
   81354:	3301      	adds	r3, #1
   81356:	60bb      	str	r3, [r7, #8]
		nChars++;
   81358:	697b      	ldr	r3, [r7, #20]
   8135a:	3301      	adds	r3, #1
   8135c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8135e:	687b      	ldr	r3, [r7, #4]
   81360:	3b01      	subs	r3, #1
   81362:	607b      	str	r3, [r7, #4]
   81364:	687b      	ldr	r3, [r7, #4]
   81366:	2b00      	cmp	r3, #0
   81368:	dcec      	bgt.n	81344 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8136a:	697b      	ldr	r3, [r7, #20]
}
   8136c:	4618      	mov	r0, r3
   8136e:	3718      	adds	r7, #24
   81370:	46bd      	mov	sp, r7
   81372:	bd80      	pop	{r7, pc}
   81374:	200711f4 	.word	0x200711f4
   81378:	200711fc 	.word	0x200711fc

0008137c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8137c:	b580      	push	{r7, lr}
   8137e:	b086      	sub	sp, #24
   81380:	af00      	add	r7, sp, #0
   81382:	60f8      	str	r0, [r7, #12]
   81384:	60b9      	str	r1, [r7, #8]
   81386:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81388:	2300      	movs	r3, #0
   8138a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   8138c:	68fb      	ldr	r3, [r7, #12]
   8138e:	2b01      	cmp	r3, #1
   81390:	d01e      	beq.n	813d0 <_write+0x54>
   81392:	68fb      	ldr	r3, [r7, #12]
   81394:	2b02      	cmp	r3, #2
   81396:	d01b      	beq.n	813d0 <_write+0x54>
   81398:	68fb      	ldr	r3, [r7, #12]
   8139a:	2b03      	cmp	r3, #3
   8139c:	d018      	beq.n	813d0 <_write+0x54>
		return -1;
   8139e:	f04f 33ff 	mov.w	r3, #4294967295
   813a2:	e019      	b.n	813d8 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   813a4:	4b0e      	ldr	r3, [pc, #56]	; (813e0 <_write+0x64>)
   813a6:	681a      	ldr	r2, [r3, #0]
   813a8:	4b0e      	ldr	r3, [pc, #56]	; (813e4 <_write+0x68>)
   813aa:	6818      	ldr	r0, [r3, #0]
   813ac:	68bb      	ldr	r3, [r7, #8]
   813ae:	1c59      	adds	r1, r3, #1
   813b0:	60b9      	str	r1, [r7, #8]
   813b2:	781b      	ldrb	r3, [r3, #0]
   813b4:	4619      	mov	r1, r3
   813b6:	4790      	blx	r2
   813b8:	4603      	mov	r3, r0
   813ba:	2b00      	cmp	r3, #0
   813bc:	da02      	bge.n	813c4 <_write+0x48>
			return -1;
   813be:	f04f 33ff 	mov.w	r3, #4294967295
   813c2:	e009      	b.n	813d8 <_write+0x5c>
		}
		++nChars;
   813c4:	697b      	ldr	r3, [r7, #20]
   813c6:	3301      	adds	r3, #1
   813c8:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   813ca:	687b      	ldr	r3, [r7, #4]
   813cc:	3b01      	subs	r3, #1
   813ce:	607b      	str	r3, [r7, #4]
   813d0:	687b      	ldr	r3, [r7, #4]
   813d2:	2b00      	cmp	r3, #0
   813d4:	d1e6      	bne.n	813a4 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   813d6:	697b      	ldr	r3, [r7, #20]
}
   813d8:	4618      	mov	r0, r3
   813da:	3718      	adds	r7, #24
   813dc:	46bd      	mov	sp, r7
   813de:	bd80      	pop	{r7, pc}
   813e0:	200711f8 	.word	0x200711f8
   813e4:	200711fc 	.word	0x200711fc

000813e8 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   813e8:	b480      	push	{r7}
   813ea:	b087      	sub	sp, #28
   813ec:	af00      	add	r7, sp, #0
   813ee:	60f8      	str	r0, [r7, #12]
   813f0:	60b9      	str	r1, [r7, #8]
   813f2:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813f4:	68fa      	ldr	r2, [r7, #12]
   813f6:	68bb      	ldr	r3, [r7, #8]
   813f8:	019b      	lsls	r3, r3, #6
   813fa:	4413      	add	r3, r2
   813fc:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   813fe:	697b      	ldr	r3, [r7, #20]
   81400:	2202      	movs	r2, #2
   81402:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81404:	697b      	ldr	r3, [r7, #20]
   81406:	f04f 32ff 	mov.w	r2, #4294967295
   8140a:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8140c:	697b      	ldr	r3, [r7, #20]
   8140e:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81410:	697b      	ldr	r3, [r7, #20]
   81412:	687a      	ldr	r2, [r7, #4]
   81414:	605a      	str	r2, [r3, #4]
}
   81416:	bf00      	nop
   81418:	371c      	adds	r7, #28
   8141a:	46bd      	mov	sp, r7
   8141c:	bc80      	pop	{r7}
   8141e:	4770      	bx	lr

00081420 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   81420:	b480      	push	{r7}
   81422:	b083      	sub	sp, #12
   81424:	af00      	add	r7, sp, #0
   81426:	6078      	str	r0, [r7, #4]
   81428:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8142a:	687a      	ldr	r2, [r7, #4]
   8142c:	683b      	ldr	r3, [r7, #0]
   8142e:	019b      	lsls	r3, r3, #6
   81430:	4413      	add	r3, r2
   81432:	2205      	movs	r2, #5
   81434:	601a      	str	r2, [r3, #0]
}
   81436:	bf00      	nop
   81438:	370c      	adds	r7, #12
   8143a:	46bd      	mov	sp, r7
   8143c:	bc80      	pop	{r7}
   8143e:	4770      	bx	lr

00081440 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   81440:	b480      	push	{r7}
   81442:	b083      	sub	sp, #12
   81444:	af00      	add	r7, sp, #0
   81446:	6078      	str	r0, [r7, #4]
   81448:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8144a:	687a      	ldr	r2, [r7, #4]
   8144c:	683b      	ldr	r3, [r7, #0]
   8144e:	019b      	lsls	r3, r3, #6
   81450:	4413      	add	r3, r2
   81452:	2202      	movs	r2, #2
   81454:	601a      	str	r2, [r3, #0]
}
   81456:	bf00      	nop
   81458:	370c      	adds	r7, #12
   8145a:	46bd      	mov	sp, r7
   8145c:	bc80      	pop	{r7}
   8145e:	4770      	bx	lr

00081460 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81460:	b480      	push	{r7}
   81462:	b085      	sub	sp, #20
   81464:	af00      	add	r7, sp, #0
   81466:	60f8      	str	r0, [r7, #12]
   81468:	60b9      	str	r1, [r7, #8]
   8146a:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8146c:	68fa      	ldr	r2, [r7, #12]
   8146e:	68bb      	ldr	r3, [r7, #8]
   81470:	019b      	lsls	r3, r3, #6
   81472:	4413      	add	r3, r2
   81474:	331c      	adds	r3, #28
   81476:	687a      	ldr	r2, [r7, #4]
   81478:	601a      	str	r2, [r3, #0]
}
   8147a:	bf00      	nop
   8147c:	3714      	adds	r7, #20
   8147e:	46bd      	mov	sp, r7
   81480:	bc80      	pop	{r7}
   81482:	4770      	bx	lr

00081484 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   81484:	b480      	push	{r7}
   81486:	b087      	sub	sp, #28
   81488:	af00      	add	r7, sp, #0
   8148a:	60f8      	str	r0, [r7, #12]
   8148c:	60b9      	str	r1, [r7, #8]
   8148e:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81490:	68fa      	ldr	r2, [r7, #12]
   81492:	68bb      	ldr	r3, [r7, #8]
   81494:	019b      	lsls	r3, r3, #6
   81496:	4413      	add	r3, r2
   81498:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   8149a:	697b      	ldr	r3, [r7, #20]
   8149c:	687a      	ldr	r2, [r7, #4]
   8149e:	625a      	str	r2, [r3, #36]	; 0x24
}
   814a0:	bf00      	nop
   814a2:	371c      	adds	r7, #28
   814a4:	46bd      	mov	sp, r7
   814a6:	bc80      	pop	{r7}
   814a8:	4770      	bx	lr
   814aa:	bf00      	nop

000814ac <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   814ac:	b480      	push	{r7}
   814ae:	b085      	sub	sp, #20
   814b0:	af00      	add	r7, sp, #0
   814b2:	6078      	str	r0, [r7, #4]
   814b4:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   814b6:	687a      	ldr	r2, [r7, #4]
   814b8:	683b      	ldr	r3, [r7, #0]
   814ba:	019b      	lsls	r3, r3, #6
   814bc:	4413      	add	r3, r2
   814be:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   814c0:	68fb      	ldr	r3, [r7, #12]
   814c2:	6a1b      	ldr	r3, [r3, #32]
}
   814c4:	4618      	mov	r0, r3
   814c6:	3714      	adds	r7, #20
   814c8:	46bd      	mov	sp, r7
   814ca:	bc80      	pop	{r7}
   814cc:	4770      	bx	lr
   814ce:	bf00      	nop

000814d0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   814d0:	b480      	push	{r7}
   814d2:	b085      	sub	sp, #20
   814d4:	af00      	add	r7, sp, #0
   814d6:	6078      	str	r0, [r7, #4]
   814d8:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   814da:	2300      	movs	r3, #0
   814dc:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   814de:	687b      	ldr	r3, [r7, #4]
   814e0:	22ac      	movs	r2, #172	; 0xac
   814e2:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   814e4:	683b      	ldr	r3, [r7, #0]
   814e6:	681a      	ldr	r2, [r3, #0]
   814e8:	683b      	ldr	r3, [r7, #0]
   814ea:	685b      	ldr	r3, [r3, #4]
   814ec:	fbb2 f3f3 	udiv	r3, r2, r3
   814f0:	091b      	lsrs	r3, r3, #4
   814f2:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   814f4:	68fb      	ldr	r3, [r7, #12]
   814f6:	2b00      	cmp	r3, #0
   814f8:	d003      	beq.n	81502 <uart_init+0x32>
   814fa:	68fb      	ldr	r3, [r7, #12]
   814fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81500:	d301      	bcc.n	81506 <uart_init+0x36>
		return 1;
   81502:	2301      	movs	r3, #1
   81504:	e00f      	b.n	81526 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   81506:	687b      	ldr	r3, [r7, #4]
   81508:	68fa      	ldr	r2, [r7, #12]
   8150a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8150c:	683b      	ldr	r3, [r7, #0]
   8150e:	689a      	ldr	r2, [r3, #8]
   81510:	687b      	ldr	r3, [r7, #4]
   81512:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81514:	687b      	ldr	r3, [r7, #4]
   81516:	f240 2202 	movw	r2, #514	; 0x202
   8151a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8151e:	687b      	ldr	r3, [r7, #4]
   81520:	2250      	movs	r2, #80	; 0x50
   81522:	601a      	str	r2, [r3, #0]

	return 0;
   81524:	2300      	movs	r3, #0
}
   81526:	4618      	mov	r0, r3
   81528:	3714      	adds	r7, #20
   8152a:	46bd      	mov	sp, r7
   8152c:	bc80      	pop	{r7}
   8152e:	4770      	bx	lr

00081530 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   81530:	b480      	push	{r7}
   81532:	b083      	sub	sp, #12
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   81538:	687b      	ldr	r3, [r7, #4]
   8153a:	2240      	movs	r2, #64	; 0x40
   8153c:	601a      	str	r2, [r3, #0]
}
   8153e:	bf00      	nop
   81540:	370c      	adds	r7, #12
   81542:	46bd      	mov	sp, r7
   81544:	bc80      	pop	{r7}
   81546:	4770      	bx	lr

00081548 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81548:	b480      	push	{r7}
   8154a:	b083      	sub	sp, #12
   8154c:	af00      	add	r7, sp, #0
   8154e:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   81550:	687b      	ldr	r3, [r7, #4]
   81552:	2210      	movs	r2, #16
   81554:	601a      	str	r2, [r3, #0]
}
   81556:	bf00      	nop
   81558:	370c      	adds	r7, #12
   8155a:	46bd      	mov	sp, r7
   8155c:	bc80      	pop	{r7}
   8155e:	4770      	bx	lr

00081560 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   81560:	b480      	push	{r7}
   81562:	b083      	sub	sp, #12
   81564:	af00      	add	r7, sp, #0
   81566:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81568:	687b      	ldr	r3, [r7, #4]
   8156a:	2250      	movs	r2, #80	; 0x50
   8156c:	601a      	str	r2, [r3, #0]
}
   8156e:	bf00      	nop
   81570:	370c      	adds	r7, #12
   81572:	46bd      	mov	sp, r7
   81574:	bc80      	pop	{r7}
   81576:	4770      	bx	lr

00081578 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   81578:	b480      	push	{r7}
   8157a:	b083      	sub	sp, #12
   8157c:	af00      	add	r7, sp, #0
   8157e:	6078      	str	r0, [r7, #4]
   81580:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   81582:	687b      	ldr	r3, [r7, #4]
   81584:	683a      	ldr	r2, [r7, #0]
   81586:	609a      	str	r2, [r3, #8]
}
   81588:	bf00      	nop
   8158a:	370c      	adds	r7, #12
   8158c:	46bd      	mov	sp, r7
   8158e:	bc80      	pop	{r7}
   81590:	4770      	bx	lr
   81592:	bf00      	nop

00081594 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   81594:	b480      	push	{r7}
   81596:	b083      	sub	sp, #12
   81598:	af00      	add	r7, sp, #0
   8159a:	6078      	str	r0, [r7, #4]
   8159c:	460b      	mov	r3, r1
   8159e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   815a0:	687b      	ldr	r3, [r7, #4]
   815a2:	695b      	ldr	r3, [r3, #20]
   815a4:	f003 0302 	and.w	r3, r3, #2
   815a8:	2b00      	cmp	r3, #0
   815aa:	d101      	bne.n	815b0 <uart_write+0x1c>
		return 1;
   815ac:	2301      	movs	r3, #1
   815ae:	e003      	b.n	815b8 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   815b0:	78fa      	ldrb	r2, [r7, #3]
   815b2:	687b      	ldr	r3, [r7, #4]
   815b4:	61da      	str	r2, [r3, #28]
	return 0;
   815b6:	2300      	movs	r3, #0
}
   815b8:	4618      	mov	r0, r3
   815ba:	370c      	adds	r7, #12
   815bc:	46bd      	mov	sp, r7
   815be:	bc80      	pop	{r7}
   815c0:	4770      	bx	lr
   815c2:	bf00      	nop

000815c4 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   815c4:	b480      	push	{r7}
   815c6:	b083      	sub	sp, #12
   815c8:	af00      	add	r7, sp, #0
   815ca:	6078      	str	r0, [r7, #4]
   815cc:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   815ce:	687b      	ldr	r3, [r7, #4]
   815d0:	695b      	ldr	r3, [r3, #20]
   815d2:	f003 0301 	and.w	r3, r3, #1
   815d6:	2b00      	cmp	r3, #0
   815d8:	d101      	bne.n	815de <uart_read+0x1a>
		return 1;
   815da:	2301      	movs	r3, #1
   815dc:	e005      	b.n	815ea <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   815de:	687b      	ldr	r3, [r7, #4]
   815e0:	699b      	ldr	r3, [r3, #24]
   815e2:	b2da      	uxtb	r2, r3
   815e4:	683b      	ldr	r3, [r7, #0]
   815e6:	701a      	strb	r2, [r3, #0]
	return 0;
   815e8:	2300      	movs	r3, #0
}
   815ea:	4618      	mov	r0, r3
   815ec:	370c      	adds	r7, #12
   815ee:	46bd      	mov	sp, r7
   815f0:	bc80      	pop	{r7}
   815f2:	4770      	bx	lr

000815f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   815f4:	b480      	push	{r7}
   815f6:	b089      	sub	sp, #36	; 0x24
   815f8:	af00      	add	r7, sp, #0
   815fa:	60f8      	str	r0, [r7, #12]
   815fc:	60b9      	str	r1, [r7, #8]
   815fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81600:	68bb      	ldr	r3, [r7, #8]
   81602:	011a      	lsls	r2, r3, #4
   81604:	687b      	ldr	r3, [r7, #4]
   81606:	429a      	cmp	r2, r3
   81608:	d802      	bhi.n	81610 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8160a:	2310      	movs	r3, #16
   8160c:	61fb      	str	r3, [r7, #28]
   8160e:	e001      	b.n	81614 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81610:	2308      	movs	r3, #8
   81612:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81614:	687b      	ldr	r3, [r7, #4]
   81616:	00da      	lsls	r2, r3, #3
   81618:	69fb      	ldr	r3, [r7, #28]
   8161a:	68b9      	ldr	r1, [r7, #8]
   8161c:	fb01 f303 	mul.w	r3, r1, r3
   81620:	085b      	lsrs	r3, r3, #1
   81622:	441a      	add	r2, r3
   81624:	69fb      	ldr	r3, [r7, #28]
   81626:	68b9      	ldr	r1, [r7, #8]
   81628:	fb01 f303 	mul.w	r3, r1, r3
   8162c:	fbb2 f3f3 	udiv	r3, r2, r3
   81630:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81632:	69bb      	ldr	r3, [r7, #24]
   81634:	08db      	lsrs	r3, r3, #3
   81636:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81638:	69bb      	ldr	r3, [r7, #24]
   8163a:	f003 0307 	and.w	r3, r3, #7
   8163e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81640:	697b      	ldr	r3, [r7, #20]
   81642:	2b00      	cmp	r3, #0
   81644:	d003      	beq.n	8164e <usart_set_async_baudrate+0x5a>
   81646:	697b      	ldr	r3, [r7, #20]
   81648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8164c:	d301      	bcc.n	81652 <usart_set_async_baudrate+0x5e>
		return 1;
   8164e:	2301      	movs	r3, #1
   81650:	e00f      	b.n	81672 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81652:	69fb      	ldr	r3, [r7, #28]
   81654:	2b08      	cmp	r3, #8
   81656:	d105      	bne.n	81664 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81658:	68fb      	ldr	r3, [r7, #12]
   8165a:	685b      	ldr	r3, [r3, #4]
   8165c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81660:	68fb      	ldr	r3, [r7, #12]
   81662:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81664:	693b      	ldr	r3, [r7, #16]
   81666:	041a      	lsls	r2, r3, #16
   81668:	697b      	ldr	r3, [r7, #20]
   8166a:	431a      	orrs	r2, r3
   8166c:	68fb      	ldr	r3, [r7, #12]
   8166e:	621a      	str	r2, [r3, #32]

	return 0;
   81670:	2300      	movs	r3, #0
}
   81672:	4618      	mov	r0, r3
   81674:	3724      	adds	r7, #36	; 0x24
   81676:	46bd      	mov	sp, r7
   81678:	bc80      	pop	{r7}
   8167a:	4770      	bx	lr

0008167c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	b082      	sub	sp, #8
   81680:	af00      	add	r7, sp, #0
   81682:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81684:	6878      	ldr	r0, [r7, #4]
   81686:	4b0d      	ldr	r3, [pc, #52]	; (816bc <usart_reset+0x40>)
   81688:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8168a:	687b      	ldr	r3, [r7, #4]
   8168c:	2200      	movs	r2, #0
   8168e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81690:	687b      	ldr	r3, [r7, #4]
   81692:	2200      	movs	r2, #0
   81694:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81696:	687b      	ldr	r3, [r7, #4]
   81698:	2200      	movs	r2, #0
   8169a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   8169c:	6878      	ldr	r0, [r7, #4]
   8169e:	4b08      	ldr	r3, [pc, #32]	; (816c0 <usart_reset+0x44>)
   816a0:	4798      	blx	r3
	usart_reset_rx(p_usart);
   816a2:	6878      	ldr	r0, [r7, #4]
   816a4:	4b07      	ldr	r3, [pc, #28]	; (816c4 <usart_reset+0x48>)
   816a6:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   816a8:	6878      	ldr	r0, [r7, #4]
   816aa:	4b07      	ldr	r3, [pc, #28]	; (816c8 <usart_reset+0x4c>)
   816ac:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   816ae:	6878      	ldr	r0, [r7, #4]
   816b0:	4b06      	ldr	r3, [pc, #24]	; (816cc <usart_reset+0x50>)
   816b2:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   816b4:	bf00      	nop
   816b6:	3708      	adds	r7, #8
   816b8:	46bd      	mov	sp, r7
   816ba:	bd80      	pop	{r7, pc}
   816bc:	00081851 	.word	0x00081851
   816c0:	0008176d 	.word	0x0008176d
   816c4:	0008179d 	.word	0x0008179d
   816c8:	000817b5 	.word	0x000817b5
   816cc:	000817d1 	.word	0x000817d1

000816d0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   816d0:	b580      	push	{r7, lr}
   816d2:	b084      	sub	sp, #16
   816d4:	af00      	add	r7, sp, #0
   816d6:	60f8      	str	r0, [r7, #12]
   816d8:	60b9      	str	r1, [r7, #8]
   816da:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   816dc:	68f8      	ldr	r0, [r7, #12]
   816de:	4b1a      	ldr	r3, [pc, #104]	; (81748 <usart_init_rs232+0x78>)
   816e0:	4798      	blx	r3

	ul_reg_val = 0;
   816e2:	4b1a      	ldr	r3, [pc, #104]	; (8174c <usart_init_rs232+0x7c>)
   816e4:	2200      	movs	r2, #0
   816e6:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   816e8:	68bb      	ldr	r3, [r7, #8]
   816ea:	2b00      	cmp	r3, #0
   816ec:	d009      	beq.n	81702 <usart_init_rs232+0x32>
   816ee:	68bb      	ldr	r3, [r7, #8]
   816f0:	681b      	ldr	r3, [r3, #0]
   816f2:	687a      	ldr	r2, [r7, #4]
   816f4:	4619      	mov	r1, r3
   816f6:	68f8      	ldr	r0, [r7, #12]
   816f8:	4b15      	ldr	r3, [pc, #84]	; (81750 <usart_init_rs232+0x80>)
   816fa:	4798      	blx	r3
   816fc:	4603      	mov	r3, r0
   816fe:	2b00      	cmp	r3, #0
   81700:	d001      	beq.n	81706 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   81702:	2301      	movs	r3, #1
   81704:	e01b      	b.n	8173e <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81706:	68bb      	ldr	r3, [r7, #8]
   81708:	685a      	ldr	r2, [r3, #4]
   8170a:	68bb      	ldr	r3, [r7, #8]
   8170c:	689b      	ldr	r3, [r3, #8]
   8170e:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81710:	68bb      	ldr	r3, [r7, #8]
   81712:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81714:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81716:	68bb      	ldr	r3, [r7, #8]
   81718:	68db      	ldr	r3, [r3, #12]
   8171a:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8171c:	4b0b      	ldr	r3, [pc, #44]	; (8174c <usart_init_rs232+0x7c>)
   8171e:	681b      	ldr	r3, [r3, #0]
   81720:	4313      	orrs	r3, r2
   81722:	4a0a      	ldr	r2, [pc, #40]	; (8174c <usart_init_rs232+0x7c>)
   81724:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81726:	4b09      	ldr	r3, [pc, #36]	; (8174c <usart_init_rs232+0x7c>)
   81728:	681b      	ldr	r3, [r3, #0]
   8172a:	4a08      	ldr	r2, [pc, #32]	; (8174c <usart_init_rs232+0x7c>)
   8172c:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   8172e:	68fb      	ldr	r3, [r7, #12]
   81730:	685a      	ldr	r2, [r3, #4]
   81732:	4b06      	ldr	r3, [pc, #24]	; (8174c <usart_init_rs232+0x7c>)
   81734:	681b      	ldr	r3, [r3, #0]
   81736:	431a      	orrs	r2, r3
   81738:	68fb      	ldr	r3, [r7, #12]
   8173a:	605a      	str	r2, [r3, #4]

	return 0;
   8173c:	2300      	movs	r3, #0
}
   8173e:	4618      	mov	r0, r3
   81740:	3710      	adds	r7, #16
   81742:	46bd      	mov	sp, r7
   81744:	bd80      	pop	{r7, pc}
   81746:	bf00      	nop
   81748:	0008167d 	.word	0x0008167d
   8174c:	20070cc8 	.word	0x20070cc8
   81750:	000815f5 	.word	0x000815f5

00081754 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81754:	b480      	push	{r7}
   81756:	b083      	sub	sp, #12
   81758:	af00      	add	r7, sp, #0
   8175a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   8175c:	687b      	ldr	r3, [r7, #4]
   8175e:	2240      	movs	r2, #64	; 0x40
   81760:	601a      	str	r2, [r3, #0]
}
   81762:	bf00      	nop
   81764:	370c      	adds	r7, #12
   81766:	46bd      	mov	sp, r7
   81768:	bc80      	pop	{r7}
   8176a:	4770      	bx	lr

0008176c <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   8176c:	b480      	push	{r7}
   8176e:	b083      	sub	sp, #12
   81770:	af00      	add	r7, sp, #0
   81772:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81774:	687b      	ldr	r3, [r7, #4]
   81776:	2288      	movs	r2, #136	; 0x88
   81778:	601a      	str	r2, [r3, #0]
}
   8177a:	bf00      	nop
   8177c:	370c      	adds	r7, #12
   8177e:	46bd      	mov	sp, r7
   81780:	bc80      	pop	{r7}
   81782:	4770      	bx	lr

00081784 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81784:	b480      	push	{r7}
   81786:	b083      	sub	sp, #12
   81788:	af00      	add	r7, sp, #0
   8178a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   8178c:	687b      	ldr	r3, [r7, #4]
   8178e:	2210      	movs	r2, #16
   81790:	601a      	str	r2, [r3, #0]
}
   81792:	bf00      	nop
   81794:	370c      	adds	r7, #12
   81796:	46bd      	mov	sp, r7
   81798:	bc80      	pop	{r7}
   8179a:	4770      	bx	lr

0008179c <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   8179c:	b480      	push	{r7}
   8179e:	b083      	sub	sp, #12
   817a0:	af00      	add	r7, sp, #0
   817a2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   817a4:	687b      	ldr	r3, [r7, #4]
   817a6:	2224      	movs	r2, #36	; 0x24
   817a8:	601a      	str	r2, [r3, #0]
}
   817aa:	bf00      	nop
   817ac:	370c      	adds	r7, #12
   817ae:	46bd      	mov	sp, r7
   817b0:	bc80      	pop	{r7}
   817b2:	4770      	bx	lr

000817b4 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   817b4:	b480      	push	{r7}
   817b6:	b083      	sub	sp, #12
   817b8:	af00      	add	r7, sp, #0
   817ba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   817bc:	687b      	ldr	r3, [r7, #4]
   817be:	f44f 7280 	mov.w	r2, #256	; 0x100
   817c2:	601a      	str	r2, [r3, #0]
}
   817c4:	bf00      	nop
   817c6:	370c      	adds	r7, #12
   817c8:	46bd      	mov	sp, r7
   817ca:	bc80      	pop	{r7}
   817cc:	4770      	bx	lr
   817ce:	bf00      	nop

000817d0 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   817d0:	b480      	push	{r7}
   817d2:	b083      	sub	sp, #12
   817d4:	af00      	add	r7, sp, #0
   817d6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   817d8:	687b      	ldr	r3, [r7, #4]
   817da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   817de:	601a      	str	r2, [r3, #0]
}
   817e0:	bf00      	nop
   817e2:	370c      	adds	r7, #12
   817e4:	46bd      	mov	sp, r7
   817e6:	bc80      	pop	{r7}
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop

000817ec <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   817ec:	b480      	push	{r7}
   817ee:	b083      	sub	sp, #12
   817f0:	af00      	add	r7, sp, #0
   817f2:	6078      	str	r0, [r7, #4]
   817f4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   817f6:	687b      	ldr	r3, [r7, #4]
   817f8:	695b      	ldr	r3, [r3, #20]
   817fa:	f003 0302 	and.w	r3, r3, #2
   817fe:	2b00      	cmp	r3, #0
   81800:	d101      	bne.n	81806 <usart_write+0x1a>
		return 1;
   81802:	2301      	movs	r3, #1
   81804:	e005      	b.n	81812 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81806:	683b      	ldr	r3, [r7, #0]
   81808:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8180c:	687b      	ldr	r3, [r7, #4]
   8180e:	61da      	str	r2, [r3, #28]
	return 0;
   81810:	2300      	movs	r3, #0
}
   81812:	4618      	mov	r0, r3
   81814:	370c      	adds	r7, #12
   81816:	46bd      	mov	sp, r7
   81818:	bc80      	pop	{r7}
   8181a:	4770      	bx	lr

0008181c <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   8181c:	b480      	push	{r7}
   8181e:	b083      	sub	sp, #12
   81820:	af00      	add	r7, sp, #0
   81822:	6078      	str	r0, [r7, #4]
   81824:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81826:	687b      	ldr	r3, [r7, #4]
   81828:	695b      	ldr	r3, [r3, #20]
   8182a:	f003 0301 	and.w	r3, r3, #1
   8182e:	2b00      	cmp	r3, #0
   81830:	d101      	bne.n	81836 <usart_read+0x1a>
		return 1;
   81832:	2301      	movs	r3, #1
   81834:	e006      	b.n	81844 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81836:	687b      	ldr	r3, [r7, #4]
   81838:	699b      	ldr	r3, [r3, #24]
   8183a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8183e:	683b      	ldr	r3, [r7, #0]
   81840:	601a      	str	r2, [r3, #0]

	return 0;
   81842:	2300      	movs	r3, #0
}
   81844:	4618      	mov	r0, r3
   81846:	370c      	adds	r7, #12
   81848:	46bd      	mov	sp, r7
   8184a:	bc80      	pop	{r7}
   8184c:	4770      	bx	lr
   8184e:	bf00      	nop

00081850 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81850:	b480      	push	{r7}
   81852:	b083      	sub	sp, #12
   81854:	af00      	add	r7, sp, #0
   81856:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81858:	687b      	ldr	r3, [r7, #4]
   8185a:	4a04      	ldr	r2, [pc, #16]	; (8186c <usart_disable_writeprotect+0x1c>)
   8185c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81860:	bf00      	nop
   81862:	370c      	adds	r7, #12
   81864:	46bd      	mov	sp, r7
   81866:	bc80      	pop	{r7}
   81868:	4770      	bx	lr
   8186a:	bf00      	nop
   8186c:	55534100 	.word	0x55534100

00081870 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81870:	b480      	push	{r7}
   81872:	b083      	sub	sp, #12
   81874:	af00      	add	r7, sp, #0
   81876:	4603      	mov	r3, r0
   81878:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8187a:	4908      	ldr	r1, [pc, #32]	; (8189c <NVIC_EnableIRQ+0x2c>)
   8187c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81880:	095b      	lsrs	r3, r3, #5
   81882:	79fa      	ldrb	r2, [r7, #7]
   81884:	f002 021f 	and.w	r2, r2, #31
   81888:	2001      	movs	r0, #1
   8188a:	fa00 f202 	lsl.w	r2, r0, r2
   8188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81892:	bf00      	nop
   81894:	370c      	adds	r7, #12
   81896:	46bd      	mov	sp, r7
   81898:	bc80      	pop	{r7}
   8189a:	4770      	bx	lr
   8189c:	e000e100 	.word	0xe000e100

000818a0 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   818a0:	b480      	push	{r7}
   818a2:	b083      	sub	sp, #12
   818a4:	af00      	add	r7, sp, #0
   818a6:	4603      	mov	r3, r0
   818a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   818aa:	4909      	ldr	r1, [pc, #36]	; (818d0 <NVIC_DisableIRQ+0x30>)
   818ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818b0:	095b      	lsrs	r3, r3, #5
   818b2:	79fa      	ldrb	r2, [r7, #7]
   818b4:	f002 021f 	and.w	r2, r2, #31
   818b8:	2001      	movs	r0, #1
   818ba:	fa00 f202 	lsl.w	r2, r0, r2
   818be:	3320      	adds	r3, #32
   818c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   818c4:	bf00      	nop
   818c6:	370c      	adds	r7, #12
   818c8:	46bd      	mov	sp, r7
   818ca:	bc80      	pop	{r7}
   818cc:	4770      	bx	lr
   818ce:	bf00      	nop
   818d0:	e000e100 	.word	0xe000e100

000818d4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   818d4:	b480      	push	{r7}
   818d6:	b083      	sub	sp, #12
   818d8:	af00      	add	r7, sp, #0
   818da:	4603      	mov	r3, r0
   818dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   818de:	4909      	ldr	r1, [pc, #36]	; (81904 <NVIC_ClearPendingIRQ+0x30>)
   818e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   818e4:	095b      	lsrs	r3, r3, #5
   818e6:	79fa      	ldrb	r2, [r7, #7]
   818e8:	f002 021f 	and.w	r2, r2, #31
   818ec:	2001      	movs	r0, #1
   818ee:	fa00 f202 	lsl.w	r2, r0, r2
   818f2:	3360      	adds	r3, #96	; 0x60
   818f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   818f8:	bf00      	nop
   818fa:	370c      	adds	r7, #12
   818fc:	46bd      	mov	sp, r7
   818fe:	bc80      	pop	{r7}
   81900:	4770      	bx	lr
   81902:	bf00      	nop
   81904:	e000e100 	.word	0xe000e100

00081908 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81908:	b480      	push	{r7}
   8190a:	b083      	sub	sp, #12
   8190c:	af00      	add	r7, sp, #0
   8190e:	4603      	mov	r3, r0
   81910:	6039      	str	r1, [r7, #0]
   81912:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81914:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81918:	2b00      	cmp	r3, #0
   8191a:	da0b      	bge.n	81934 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   8191c:	490d      	ldr	r1, [pc, #52]	; (81954 <NVIC_SetPriority+0x4c>)
   8191e:	79fb      	ldrb	r3, [r7, #7]
   81920:	f003 030f 	and.w	r3, r3, #15
   81924:	3b04      	subs	r3, #4
   81926:	683a      	ldr	r2, [r7, #0]
   81928:	b2d2      	uxtb	r2, r2
   8192a:	0112      	lsls	r2, r2, #4
   8192c:	b2d2      	uxtb	r2, r2
   8192e:	440b      	add	r3, r1
   81930:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81932:	e009      	b.n	81948 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81934:	4908      	ldr	r1, [pc, #32]	; (81958 <NVIC_SetPriority+0x50>)
   81936:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8193a:	683a      	ldr	r2, [r7, #0]
   8193c:	b2d2      	uxtb	r2, r2
   8193e:	0112      	lsls	r2, r2, #4
   81940:	b2d2      	uxtb	r2, r2
   81942:	440b      	add	r3, r1
   81944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81948:	bf00      	nop
   8194a:	370c      	adds	r7, #12
   8194c:	46bd      	mov	sp, r7
   8194e:	bc80      	pop	{r7}
   81950:	4770      	bx	lr
   81952:	bf00      	nop
   81954:	e000ed00 	.word	0xe000ed00
   81958:	e000e100 	.word	0xe000e100

0008195c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8195c:	b480      	push	{r7}
   8195e:	b083      	sub	sp, #12
   81960:	af00      	add	r7, sp, #0
   81962:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81964:	687b      	ldr	r3, [r7, #4]
   81966:	2b07      	cmp	r3, #7
   81968:	d825      	bhi.n	819b6 <osc_get_rate+0x5a>
   8196a:	a201      	add	r2, pc, #4	; (adr r2, 81970 <osc_get_rate+0x14>)
   8196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81970:	00081991 	.word	0x00081991
   81974:	00081997 	.word	0x00081997
   81978:	0008199d 	.word	0x0008199d
   8197c:	000819a3 	.word	0x000819a3
   81980:	000819a7 	.word	0x000819a7
   81984:	000819ab 	.word	0x000819ab
   81988:	000819af 	.word	0x000819af
   8198c:	000819b3 	.word	0x000819b3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81990:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81994:	e010      	b.n	819b8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8199a:	e00d      	b.n	819b8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8199c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   819a0:	e00a      	b.n	819b8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   819a2:	4b08      	ldr	r3, [pc, #32]	; (819c4 <osc_get_rate+0x68>)
   819a4:	e008      	b.n	819b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   819a6:	4b08      	ldr	r3, [pc, #32]	; (819c8 <osc_get_rate+0x6c>)
   819a8:	e006      	b.n	819b8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   819aa:	4b08      	ldr	r3, [pc, #32]	; (819cc <osc_get_rate+0x70>)
   819ac:	e004      	b.n	819b8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   819ae:	4b07      	ldr	r3, [pc, #28]	; (819cc <osc_get_rate+0x70>)
   819b0:	e002      	b.n	819b8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   819b2:	4b06      	ldr	r3, [pc, #24]	; (819cc <osc_get_rate+0x70>)
   819b4:	e000      	b.n	819b8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   819b6:	2300      	movs	r3, #0
}
   819b8:	4618      	mov	r0, r3
   819ba:	370c      	adds	r7, #12
   819bc:	46bd      	mov	sp, r7
   819be:	bc80      	pop	{r7}
   819c0:	4770      	bx	lr
   819c2:	bf00      	nop
   819c4:	003d0900 	.word	0x003d0900
   819c8:	007a1200 	.word	0x007a1200
   819cc:	00b71b00 	.word	0x00b71b00

000819d0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   819d0:	b580      	push	{r7, lr}
   819d2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   819d4:	2006      	movs	r0, #6
   819d6:	4b04      	ldr	r3, [pc, #16]	; (819e8 <sysclk_get_main_hz+0x18>)
   819d8:	4798      	blx	r3
   819da:	4602      	mov	r2, r0
   819dc:	4613      	mov	r3, r2
   819de:	00db      	lsls	r3, r3, #3
   819e0:	1a9b      	subs	r3, r3, r2
   819e2:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   819e4:	4618      	mov	r0, r3
   819e6:	bd80      	pop	{r7, pc}
   819e8:	0008195d 	.word	0x0008195d

000819ec <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   819ec:	b580      	push	{r7, lr}
   819ee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   819f0:	4b02      	ldr	r3, [pc, #8]	; (819fc <sysclk_get_peripheral_hz+0x10>)
   819f2:	4798      	blx	r3
   819f4:	4603      	mov	r3, r0
   819f6:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   819f8:	4618      	mov	r0, r3
   819fa:	bd80      	pop	{r7, pc}
   819fc:	000819d1 	.word	0x000819d1

00081a00 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81a00:	b580      	push	{r7, lr}
   81a02:	b082      	sub	sp, #8
   81a04:	af00      	add	r7, sp, #0
   81a06:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81a08:	6878      	ldr	r0, [r7, #4]
   81a0a:	4b03      	ldr	r3, [pc, #12]	; (81a18 <sysclk_enable_peripheral_clock+0x18>)
   81a0c:	4798      	blx	r3
}
   81a0e:	bf00      	nop
   81a10:	3708      	adds	r7, #8
   81a12:	46bd      	mov	sp, r7
   81a14:	bd80      	pop	{r7, pc}
   81a16:	bf00      	nop
   81a18:	000832bd 	.word	0x000832bd

00081a1c <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81a1c:	b580      	push	{r7, lr}
   81a1e:	b08c      	sub	sp, #48	; 0x30
   81a20:	af00      	add	r7, sp, #0
   81a22:	6078      	str	r0, [r7, #4]
   81a24:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81a26:	4b40      	ldr	r3, [pc, #256]	; (81b28 <usart_serial_init+0x10c>)
   81a28:	4798      	blx	r3
   81a2a:	4603      	mov	r3, r0
   81a2c:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   81a2e:	683b      	ldr	r3, [r7, #0]
   81a30:	681b      	ldr	r3, [r3, #0]
   81a32:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   81a34:	683b      	ldr	r3, [r7, #0]
   81a36:	689b      	ldr	r3, [r3, #8]
   81a38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81a3a:	683b      	ldr	r3, [r7, #0]
   81a3c:	681b      	ldr	r3, [r3, #0]
   81a3e:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81a40:	683b      	ldr	r3, [r7, #0]
   81a42:	685b      	ldr	r3, [r3, #4]
   81a44:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81a46:	683b      	ldr	r3, [r7, #0]
   81a48:	689b      	ldr	r3, [r3, #8]
   81a4a:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81a4c:	683b      	ldr	r3, [r7, #0]
   81a4e:	7b1b      	ldrb	r3, [r3, #12]
   81a50:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   81a52:	2300      	movs	r3, #0
   81a54:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a56:	687b      	ldr	r3, [r7, #4]
   81a58:	4a34      	ldr	r2, [pc, #208]	; (81b2c <usart_serial_init+0x110>)
   81a5a:	4293      	cmp	r3, r2
   81a5c:	d108      	bne.n	81a70 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81a5e:	2008      	movs	r0, #8
   81a60:	4b33      	ldr	r3, [pc, #204]	; (81b30 <usart_serial_init+0x114>)
   81a62:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81a64:	f107 0320 	add.w	r3, r7, #32
   81a68:	4619      	mov	r1, r3
   81a6a:	6878      	ldr	r0, [r7, #4]
   81a6c:	4b31      	ldr	r3, [pc, #196]	; (81b34 <usart_serial_init+0x118>)
   81a6e:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81a70:	687b      	ldr	r3, [r7, #4]
   81a72:	4a31      	ldr	r2, [pc, #196]	; (81b38 <usart_serial_init+0x11c>)
   81a74:	4293      	cmp	r3, r2
   81a76:	d111      	bne.n	81a9c <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   81a78:	2011      	movs	r0, #17
   81a7a:	4b2d      	ldr	r3, [pc, #180]	; (81b30 <usart_serial_init+0x114>)
   81a7c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a7e:	4b2a      	ldr	r3, [pc, #168]	; (81b28 <usart_serial_init+0x10c>)
   81a80:	4798      	blx	r3
   81a82:	4602      	mov	r2, r0
   81a84:	f107 0308 	add.w	r3, r7, #8
   81a88:	4619      	mov	r1, r3
   81a8a:	6878      	ldr	r0, [r7, #4]
   81a8c:	4b2b      	ldr	r3, [pc, #172]	; (81b3c <usart_serial_init+0x120>)
   81a8e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a90:	6878      	ldr	r0, [r7, #4]
   81a92:	4b2b      	ldr	r3, [pc, #172]	; (81b40 <usart_serial_init+0x124>)
   81a94:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a96:	6878      	ldr	r0, [r7, #4]
   81a98:	4b2a      	ldr	r3, [pc, #168]	; (81b44 <usart_serial_init+0x128>)
   81a9a:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81a9c:	687b      	ldr	r3, [r7, #4]
   81a9e:	4a2a      	ldr	r2, [pc, #168]	; (81b48 <usart_serial_init+0x12c>)
   81aa0:	4293      	cmp	r3, r2
   81aa2:	d111      	bne.n	81ac8 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   81aa4:	2012      	movs	r0, #18
   81aa6:	4b22      	ldr	r3, [pc, #136]	; (81b30 <usart_serial_init+0x114>)
   81aa8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81aaa:	4b1f      	ldr	r3, [pc, #124]	; (81b28 <usart_serial_init+0x10c>)
   81aac:	4798      	blx	r3
   81aae:	4602      	mov	r2, r0
   81ab0:	f107 0308 	add.w	r3, r7, #8
   81ab4:	4619      	mov	r1, r3
   81ab6:	6878      	ldr	r0, [r7, #4]
   81ab8:	4b20      	ldr	r3, [pc, #128]	; (81b3c <usart_serial_init+0x120>)
   81aba:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81abc:	6878      	ldr	r0, [r7, #4]
   81abe:	4b20      	ldr	r3, [pc, #128]	; (81b40 <usart_serial_init+0x124>)
   81ac0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81ac2:	6878      	ldr	r0, [r7, #4]
   81ac4:	4b1f      	ldr	r3, [pc, #124]	; (81b44 <usart_serial_init+0x128>)
   81ac6:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81ac8:	687b      	ldr	r3, [r7, #4]
   81aca:	4a20      	ldr	r2, [pc, #128]	; (81b4c <usart_serial_init+0x130>)
   81acc:	4293      	cmp	r3, r2
   81ace:	d111      	bne.n	81af4 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81ad0:	2013      	movs	r0, #19
   81ad2:	4b17      	ldr	r3, [pc, #92]	; (81b30 <usart_serial_init+0x114>)
   81ad4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81ad6:	4b14      	ldr	r3, [pc, #80]	; (81b28 <usart_serial_init+0x10c>)
   81ad8:	4798      	blx	r3
   81ada:	4602      	mov	r2, r0
   81adc:	f107 0308 	add.w	r3, r7, #8
   81ae0:	4619      	mov	r1, r3
   81ae2:	6878      	ldr	r0, [r7, #4]
   81ae4:	4b15      	ldr	r3, [pc, #84]	; (81b3c <usart_serial_init+0x120>)
   81ae6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81ae8:	6878      	ldr	r0, [r7, #4]
   81aea:	4b15      	ldr	r3, [pc, #84]	; (81b40 <usart_serial_init+0x124>)
   81aec:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81aee:	6878      	ldr	r0, [r7, #4]
   81af0:	4b14      	ldr	r3, [pc, #80]	; (81b44 <usart_serial_init+0x128>)
   81af2:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81af4:	687b      	ldr	r3, [r7, #4]
   81af6:	4a16      	ldr	r2, [pc, #88]	; (81b50 <usart_serial_init+0x134>)
   81af8:	4293      	cmp	r3, r2
   81afa:	d111      	bne.n	81b20 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81afc:	2014      	movs	r0, #20
   81afe:	4b0c      	ldr	r3, [pc, #48]	; (81b30 <usart_serial_init+0x114>)
   81b00:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81b02:	4b09      	ldr	r3, [pc, #36]	; (81b28 <usart_serial_init+0x10c>)
   81b04:	4798      	blx	r3
   81b06:	4602      	mov	r2, r0
   81b08:	f107 0308 	add.w	r3, r7, #8
   81b0c:	4619      	mov	r1, r3
   81b0e:	6878      	ldr	r0, [r7, #4]
   81b10:	4b0a      	ldr	r3, [pc, #40]	; (81b3c <usart_serial_init+0x120>)
   81b12:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81b14:	6878      	ldr	r0, [r7, #4]
   81b16:	4b0a      	ldr	r3, [pc, #40]	; (81b40 <usart_serial_init+0x124>)
   81b18:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81b1a:	6878      	ldr	r0, [r7, #4]
   81b1c:	4b09      	ldr	r3, [pc, #36]	; (81b44 <usart_serial_init+0x128>)
   81b1e:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81b20:	bf00      	nop
   81b22:	3730      	adds	r7, #48	; 0x30
   81b24:	46bd      	mov	sp, r7
   81b26:	bd80      	pop	{r7, pc}
   81b28:	000819ed 	.word	0x000819ed
   81b2c:	400e0800 	.word	0x400e0800
   81b30:	00081a01 	.word	0x00081a01
   81b34:	000814d1 	.word	0x000814d1
   81b38:	40098000 	.word	0x40098000
   81b3c:	000816d1 	.word	0x000816d1
   81b40:	00081755 	.word	0x00081755
   81b44:	00081785 	.word	0x00081785
   81b48:	4009c000 	.word	0x4009c000
   81b4c:	400a0000 	.word	0x400a0000
   81b50:	400a4000 	.word	0x400a4000

00081b54 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81b54:	b580      	push	{r7, lr}
   81b56:	b082      	sub	sp, #8
   81b58:	af00      	add	r7, sp, #0
   81b5a:	6078      	str	r0, [r7, #4]
   81b5c:	460b      	mov	r3, r1
   81b5e:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81b60:	687b      	ldr	r3, [r7, #4]
   81b62:	4a27      	ldr	r2, [pc, #156]	; (81c00 <usart_serial_putchar+0xac>)
   81b64:	4293      	cmp	r3, r2
   81b66:	d10a      	bne.n	81b7e <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81b68:	bf00      	nop
   81b6a:	78fb      	ldrb	r3, [r7, #3]
   81b6c:	4619      	mov	r1, r3
   81b6e:	6878      	ldr	r0, [r7, #4]
   81b70:	4b24      	ldr	r3, [pc, #144]	; (81c04 <usart_serial_putchar+0xb0>)
   81b72:	4798      	blx	r3
   81b74:	4603      	mov	r3, r0
   81b76:	2b00      	cmp	r3, #0
   81b78:	d1f7      	bne.n	81b6a <usart_serial_putchar+0x16>
		return 1;
   81b7a:	2301      	movs	r3, #1
   81b7c:	e03c      	b.n	81bf8 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81b7e:	687b      	ldr	r3, [r7, #4]
   81b80:	4a21      	ldr	r2, [pc, #132]	; (81c08 <usart_serial_putchar+0xb4>)
   81b82:	4293      	cmp	r3, r2
   81b84:	d10a      	bne.n	81b9c <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81b86:	bf00      	nop
   81b88:	78fb      	ldrb	r3, [r7, #3]
   81b8a:	4619      	mov	r1, r3
   81b8c:	6878      	ldr	r0, [r7, #4]
   81b8e:	4b1f      	ldr	r3, [pc, #124]	; (81c0c <usart_serial_putchar+0xb8>)
   81b90:	4798      	blx	r3
   81b92:	4603      	mov	r3, r0
   81b94:	2b00      	cmp	r3, #0
   81b96:	d1f7      	bne.n	81b88 <usart_serial_putchar+0x34>
		return 1;
   81b98:	2301      	movs	r3, #1
   81b9a:	e02d      	b.n	81bf8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81b9c:	687b      	ldr	r3, [r7, #4]
   81b9e:	4a1c      	ldr	r2, [pc, #112]	; (81c10 <usart_serial_putchar+0xbc>)
   81ba0:	4293      	cmp	r3, r2
   81ba2:	d10a      	bne.n	81bba <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81ba4:	bf00      	nop
   81ba6:	78fb      	ldrb	r3, [r7, #3]
   81ba8:	4619      	mov	r1, r3
   81baa:	6878      	ldr	r0, [r7, #4]
   81bac:	4b17      	ldr	r3, [pc, #92]	; (81c0c <usart_serial_putchar+0xb8>)
   81bae:	4798      	blx	r3
   81bb0:	4603      	mov	r3, r0
   81bb2:	2b00      	cmp	r3, #0
   81bb4:	d1f7      	bne.n	81ba6 <usart_serial_putchar+0x52>
		return 1;
   81bb6:	2301      	movs	r3, #1
   81bb8:	e01e      	b.n	81bf8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81bba:	687b      	ldr	r3, [r7, #4]
   81bbc:	4a15      	ldr	r2, [pc, #84]	; (81c14 <usart_serial_putchar+0xc0>)
   81bbe:	4293      	cmp	r3, r2
   81bc0:	d10a      	bne.n	81bd8 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81bc2:	bf00      	nop
   81bc4:	78fb      	ldrb	r3, [r7, #3]
   81bc6:	4619      	mov	r1, r3
   81bc8:	6878      	ldr	r0, [r7, #4]
   81bca:	4b10      	ldr	r3, [pc, #64]	; (81c0c <usart_serial_putchar+0xb8>)
   81bcc:	4798      	blx	r3
   81bce:	4603      	mov	r3, r0
   81bd0:	2b00      	cmp	r3, #0
   81bd2:	d1f7      	bne.n	81bc4 <usart_serial_putchar+0x70>
		return 1;
   81bd4:	2301      	movs	r3, #1
   81bd6:	e00f      	b.n	81bf8 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81bd8:	687b      	ldr	r3, [r7, #4]
   81bda:	4a0f      	ldr	r2, [pc, #60]	; (81c18 <usart_serial_putchar+0xc4>)
   81bdc:	4293      	cmp	r3, r2
   81bde:	d10a      	bne.n	81bf6 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81be0:	bf00      	nop
   81be2:	78fb      	ldrb	r3, [r7, #3]
   81be4:	4619      	mov	r1, r3
   81be6:	6878      	ldr	r0, [r7, #4]
   81be8:	4b08      	ldr	r3, [pc, #32]	; (81c0c <usart_serial_putchar+0xb8>)
   81bea:	4798      	blx	r3
   81bec:	4603      	mov	r3, r0
   81bee:	2b00      	cmp	r3, #0
   81bf0:	d1f7      	bne.n	81be2 <usart_serial_putchar+0x8e>
		return 1;
   81bf2:	2301      	movs	r3, #1
   81bf4:	e000      	b.n	81bf8 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81bf6:	2300      	movs	r3, #0
}
   81bf8:	4618      	mov	r0, r3
   81bfa:	3708      	adds	r7, #8
   81bfc:	46bd      	mov	sp, r7
   81bfe:	bd80      	pop	{r7, pc}
   81c00:	400e0800 	.word	0x400e0800
   81c04:	00081595 	.word	0x00081595
   81c08:	40098000 	.word	0x40098000
   81c0c:	000817ed 	.word	0x000817ed
   81c10:	4009c000 	.word	0x4009c000
   81c14:	400a0000 	.word	0x400a0000
   81c18:	400a4000 	.word	0x400a4000

00081c1c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81c1c:	b580      	push	{r7, lr}
   81c1e:	b084      	sub	sp, #16
   81c20:	af00      	add	r7, sp, #0
   81c22:	6078      	str	r0, [r7, #4]
   81c24:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81c26:	2300      	movs	r3, #0
   81c28:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81c2a:	687b      	ldr	r3, [r7, #4]
   81c2c:	4a2b      	ldr	r2, [pc, #172]	; (81cdc <usart_serial_getchar+0xc0>)
   81c2e:	4293      	cmp	r3, r2
   81c30:	d107      	bne.n	81c42 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81c32:	bf00      	nop
   81c34:	6839      	ldr	r1, [r7, #0]
   81c36:	6878      	ldr	r0, [r7, #4]
   81c38:	4b29      	ldr	r3, [pc, #164]	; (81ce0 <usart_serial_getchar+0xc4>)
   81c3a:	4798      	blx	r3
   81c3c:	4603      	mov	r3, r0
   81c3e:	2b00      	cmp	r3, #0
   81c40:	d1f8      	bne.n	81c34 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81c42:	687b      	ldr	r3, [r7, #4]
   81c44:	4a27      	ldr	r2, [pc, #156]	; (81ce4 <usart_serial_getchar+0xc8>)
   81c46:	4293      	cmp	r3, r2
   81c48:	d10d      	bne.n	81c66 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81c4a:	bf00      	nop
   81c4c:	f107 030c 	add.w	r3, r7, #12
   81c50:	4619      	mov	r1, r3
   81c52:	6878      	ldr	r0, [r7, #4]
   81c54:	4b24      	ldr	r3, [pc, #144]	; (81ce8 <usart_serial_getchar+0xcc>)
   81c56:	4798      	blx	r3
   81c58:	4603      	mov	r3, r0
   81c5a:	2b00      	cmp	r3, #0
   81c5c:	d1f6      	bne.n	81c4c <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81c5e:	68fb      	ldr	r3, [r7, #12]
   81c60:	b2da      	uxtb	r2, r3
   81c62:	683b      	ldr	r3, [r7, #0]
   81c64:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81c66:	687b      	ldr	r3, [r7, #4]
   81c68:	4a20      	ldr	r2, [pc, #128]	; (81cec <usart_serial_getchar+0xd0>)
   81c6a:	4293      	cmp	r3, r2
   81c6c:	d10d      	bne.n	81c8a <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81c6e:	bf00      	nop
   81c70:	f107 030c 	add.w	r3, r7, #12
   81c74:	4619      	mov	r1, r3
   81c76:	6878      	ldr	r0, [r7, #4]
   81c78:	4b1b      	ldr	r3, [pc, #108]	; (81ce8 <usart_serial_getchar+0xcc>)
   81c7a:	4798      	blx	r3
   81c7c:	4603      	mov	r3, r0
   81c7e:	2b00      	cmp	r3, #0
   81c80:	d1f6      	bne.n	81c70 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81c82:	68fb      	ldr	r3, [r7, #12]
   81c84:	b2da      	uxtb	r2, r3
   81c86:	683b      	ldr	r3, [r7, #0]
   81c88:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81c8a:	687b      	ldr	r3, [r7, #4]
   81c8c:	4a18      	ldr	r2, [pc, #96]	; (81cf0 <usart_serial_getchar+0xd4>)
   81c8e:	4293      	cmp	r3, r2
   81c90:	d10d      	bne.n	81cae <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81c92:	bf00      	nop
   81c94:	f107 030c 	add.w	r3, r7, #12
   81c98:	4619      	mov	r1, r3
   81c9a:	6878      	ldr	r0, [r7, #4]
   81c9c:	4b12      	ldr	r3, [pc, #72]	; (81ce8 <usart_serial_getchar+0xcc>)
   81c9e:	4798      	blx	r3
   81ca0:	4603      	mov	r3, r0
   81ca2:	2b00      	cmp	r3, #0
   81ca4:	d1f6      	bne.n	81c94 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81ca6:	68fb      	ldr	r3, [r7, #12]
   81ca8:	b2da      	uxtb	r2, r3
   81caa:	683b      	ldr	r3, [r7, #0]
   81cac:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81cae:	687b      	ldr	r3, [r7, #4]
   81cb0:	4a10      	ldr	r2, [pc, #64]	; (81cf4 <usart_serial_getchar+0xd8>)
   81cb2:	4293      	cmp	r3, r2
   81cb4:	d10d      	bne.n	81cd2 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81cb6:	bf00      	nop
   81cb8:	f107 030c 	add.w	r3, r7, #12
   81cbc:	4619      	mov	r1, r3
   81cbe:	6878      	ldr	r0, [r7, #4]
   81cc0:	4b09      	ldr	r3, [pc, #36]	; (81ce8 <usart_serial_getchar+0xcc>)
   81cc2:	4798      	blx	r3
   81cc4:	4603      	mov	r3, r0
   81cc6:	2b00      	cmp	r3, #0
   81cc8:	d1f6      	bne.n	81cb8 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81cca:	68fb      	ldr	r3, [r7, #12]
   81ccc:	b2da      	uxtb	r2, r3
   81cce:	683b      	ldr	r3, [r7, #0]
   81cd0:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81cd2:	bf00      	nop
   81cd4:	3710      	adds	r7, #16
   81cd6:	46bd      	mov	sp, r7
   81cd8:	bd80      	pop	{r7, pc}
   81cda:	bf00      	nop
   81cdc:	400e0800 	.word	0x400e0800
   81ce0:	000815c5 	.word	0x000815c5
   81ce4:	40098000 	.word	0x40098000
   81ce8:	0008181d 	.word	0x0008181d
   81cec:	4009c000 	.word	0x4009c000
   81cf0:	400a0000 	.word	0x400a0000
   81cf4:	400a4000 	.word	0x400a4000

00081cf8 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81cf8:	b580      	push	{r7, lr}
   81cfa:	b082      	sub	sp, #8
   81cfc:	af00      	add	r7, sp, #0
   81cfe:	6078      	str	r0, [r7, #4]
   81d00:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81d02:	4a0f      	ldr	r2, [pc, #60]	; (81d40 <stdio_serial_init+0x48>)
   81d04:	687b      	ldr	r3, [r7, #4]
   81d06:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81d08:	4b0e      	ldr	r3, [pc, #56]	; (81d44 <stdio_serial_init+0x4c>)
   81d0a:	4a0f      	ldr	r2, [pc, #60]	; (81d48 <stdio_serial_init+0x50>)
   81d0c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81d0e:	4b0f      	ldr	r3, [pc, #60]	; (81d4c <stdio_serial_init+0x54>)
   81d10:	4a0f      	ldr	r2, [pc, #60]	; (81d50 <stdio_serial_init+0x58>)
   81d12:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81d14:	6839      	ldr	r1, [r7, #0]
   81d16:	6878      	ldr	r0, [r7, #4]
   81d18:	4b0e      	ldr	r3, [pc, #56]	; (81d54 <stdio_serial_init+0x5c>)
   81d1a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81d1c:	4b0e      	ldr	r3, [pc, #56]	; (81d58 <stdio_serial_init+0x60>)
   81d1e:	681b      	ldr	r3, [r3, #0]
   81d20:	689b      	ldr	r3, [r3, #8]
   81d22:	2100      	movs	r1, #0
   81d24:	4618      	mov	r0, r3
   81d26:	4b0d      	ldr	r3, [pc, #52]	; (81d5c <stdio_serial_init+0x64>)
   81d28:	4798      	blx	r3
	setbuf(stdin, NULL);
   81d2a:	4b0b      	ldr	r3, [pc, #44]	; (81d58 <stdio_serial_init+0x60>)
   81d2c:	681b      	ldr	r3, [r3, #0]
   81d2e:	685b      	ldr	r3, [r3, #4]
   81d30:	2100      	movs	r1, #0
   81d32:	4618      	mov	r0, r3
   81d34:	4b09      	ldr	r3, [pc, #36]	; (81d5c <stdio_serial_init+0x64>)
   81d36:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   81d38:	bf00      	nop
   81d3a:	3708      	adds	r7, #8
   81d3c:	46bd      	mov	sp, r7
   81d3e:	bd80      	pop	{r7, pc}
   81d40:	200711fc 	.word	0x200711fc
   81d44:	200711f8 	.word	0x200711f8
   81d48:	00081b55 	.word	0x00081b55
   81d4c:	200711f4 	.word	0x200711f4
   81d50:	00081c1d 	.word	0x00081c1d
   81d54:	00081a1d 	.word	0x00081a1d
   81d58:	20070830 	.word	0x20070830
   81d5c:	00083bc9 	.word	0x00083bc9

00081d60 <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   81d60:	b580      	push	{r7, lr}
   81d62:	b082      	sub	sp, #8
   81d64:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   81d66:	4b28      	ldr	r3, [pc, #160]	; (81e08 <UART_Handler+0xa8>)
   81d68:	781b      	ldrb	r3, [r3, #0]
   81d6a:	3301      	adds	r3, #1
   81d6c:	b2da      	uxtb	r2, r3
   81d6e:	4b26      	ldr	r3, [pc, #152]	; (81e08 <UART_Handler+0xa8>)
   81d70:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   81d72:	4b26      	ldr	r3, [pc, #152]	; (81e0c <UART_Handler+0xac>)
   81d74:	695b      	ldr	r3, [r3, #20]
   81d76:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	f003 0301 	and.w	r3, r3, #1
   81d7e:	2b00      	cmp	r3, #0
   81d80:	d03d      	beq.n	81dfe <UART_Handler+0x9e>
	{
		rx_val=UART->UART_RHR;
   81d82:	4b22      	ldr	r3, [pc, #136]	; (81e0c <UART_Handler+0xac>)
   81d84:	699b      	ldr	r3, [r3, #24]
   81d86:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   81d88:	78fb      	ldrb	r3, [r7, #3]
   81d8a:	337f      	adds	r3, #127	; 0x7f
   81d8c:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   81d8e:	4b1e      	ldr	r3, [pc, #120]	; (81e08 <UART_Handler+0xa8>)
   81d90:	781b      	ldrb	r3, [r3, #0]
   81d92:	2b01      	cmp	r3, #1
   81d94:	d103      	bne.n	81d9e <UART_Handler+0x3e>
		{
			rc=rx_val;
   81d96:	78fb      	ldrb	r3, [r7, #3]
   81d98:	4a1d      	ldr	r2, [pc, #116]	; (81e10 <UART_Handler+0xb0>)
   81d9a:	6013      	str	r3, [r2, #0]
   81d9c:	e009      	b.n	81db2 <UART_Handler+0x52>
		}
		else if (cnt==2)
   81d9e:	4b1a      	ldr	r3, [pc, #104]	; (81e08 <UART_Handler+0xa8>)
   81da0:	781b      	ldrb	r3, [r3, #0]
   81da2:	2b02      	cmp	r3, #2
   81da4:	d105      	bne.n	81db2 <UART_Handler+0x52>
		{
			bic_rc=rx_val;
   81da6:	78fb      	ldrb	r3, [r7, #3]
   81da8:	4a1a      	ldr	r2, [pc, #104]	; (81e14 <UART_Handler+0xb4>)
   81daa:	6013      	str	r3, [r2, #0]
			cnt=0;
   81dac:	4b16      	ldr	r3, [pc, #88]	; (81e08 <UART_Handler+0xa8>)
   81dae:	2200      	movs	r2, #0
   81db0:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   81db2:	4b17      	ldr	r3, [pc, #92]	; (81e10 <UART_Handler+0xb0>)
   81db4:	6819      	ldr	r1, [r3, #0]
   81db6:	4b17      	ldr	r3, [pc, #92]	; (81e14 <UART_Handler+0xb4>)
   81db8:	681b      	ldr	r3, [r3, #0]
   81dba:	461a      	mov	r2, r3
   81dbc:	4816      	ldr	r0, [pc, #88]	; (81e18 <UART_Handler+0xb8>)
   81dbe:	4b17      	ldr	r3, [pc, #92]	; (81e1c <UART_Handler+0xbc>)
   81dc0:	4798      	blx	r3
		tc_stop(TC0,0);
   81dc2:	2100      	movs	r1, #0
   81dc4:	4816      	ldr	r0, [pc, #88]	; (81e20 <UART_Handler+0xc0>)
   81dc6:	4b17      	ldr	r3, [pc, #92]	; (81e24 <UART_Handler+0xc4>)
   81dc8:	4798      	blx	r3
		tc_stop(TC0,1);
   81dca:	2101      	movs	r1, #1
   81dcc:	4814      	ldr	r0, [pc, #80]	; (81e20 <UART_Handler+0xc0>)
   81dce:	4b15      	ldr	r3, [pc, #84]	; (81e24 <UART_Handler+0xc4>)
   81dd0:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   81dd2:	4b0f      	ldr	r3, [pc, #60]	; (81e10 <UART_Handler+0xb0>)
   81dd4:	681b      	ldr	r3, [r3, #0]
   81dd6:	461a      	mov	r2, r3
   81dd8:	2100      	movs	r1, #0
   81dda:	4811      	ldr	r0, [pc, #68]	; (81e20 <UART_Handler+0xc0>)
   81ddc:	4b12      	ldr	r3, [pc, #72]	; (81e28 <UART_Handler+0xc8>)
   81dde:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   81de0:	4b0c      	ldr	r3, [pc, #48]	; (81e14 <UART_Handler+0xb4>)
   81de2:	681b      	ldr	r3, [r3, #0]
   81de4:	461a      	mov	r2, r3
   81de6:	2101      	movs	r1, #1
   81de8:	480d      	ldr	r0, [pc, #52]	; (81e20 <UART_Handler+0xc0>)
   81dea:	4b0f      	ldr	r3, [pc, #60]	; (81e28 <UART_Handler+0xc8>)
   81dec:	4798      	blx	r3
		tc_start(TC0,0);
   81dee:	2100      	movs	r1, #0
   81df0:	480b      	ldr	r0, [pc, #44]	; (81e20 <UART_Handler+0xc0>)
   81df2:	4b0e      	ldr	r3, [pc, #56]	; (81e2c <UART_Handler+0xcc>)
   81df4:	4798      	blx	r3
		tc_start(TC0,1);
   81df6:	2101      	movs	r1, #1
   81df8:	4809      	ldr	r0, [pc, #36]	; (81e20 <UART_Handler+0xc0>)
   81dfa:	4b0c      	ldr	r3, [pc, #48]	; (81e2c <UART_Handler+0xcc>)
   81dfc:	4798      	blx	r3
	}
}
   81dfe:	bf00      	nop
   81e00:	3708      	adds	r7, #8
   81e02:	46bd      	mov	sp, r7
   81e04:	bd80      	pop	{r7, pc}
   81e06:	bf00      	nop
   81e08:	20070ce8 	.word	0x20070ce8
   81e0c:	400e0800 	.word	0x400e0800
   81e10:	20070cd8 	.word	0x20070cd8
   81e14:	2007120c 	.word	0x2007120c
   81e18:	00086a60 	.word	0x00086a60
   81e1c:	00083b05 	.word	0x00083b05
   81e20:	40080000 	.word	0x40080000
   81e24:	00081441 	.word	0x00081441
   81e28:	00081461 	.word	0x00081461
   81e2c:	00081421 	.word	0x00081421

00081e30 <main>:
int main (void)
{
   81e30:	b590      	push	{r4, r7, lr}
   81e32:	b087      	sub	sp, #28
   81e34:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   81e36:	4b1a      	ldr	r3, [pc, #104]	; (81ea0 <main+0x70>)
   81e38:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   81e3a:	4b1a      	ldr	r3, [pc, #104]	; (81ea4 <main+0x74>)
   81e3c:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   81e3e:	2008      	movs	r0, #8
   81e40:	4b19      	ldr	r3, [pc, #100]	; (81ea8 <main+0x78>)
   81e42:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   81e44:	200b      	movs	r0, #11
   81e46:	4b19      	ldr	r3, [pc, #100]	; (81eac <main+0x7c>)
   81e48:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   81e4a:	4b19      	ldr	r3, [pc, #100]	; (81eb0 <main+0x80>)
   81e4c:	2250      	movs	r2, #80	; 0x50
   81e4e:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   81e50:	4b17      	ldr	r3, [pc, #92]	; (81eb0 <main+0x80>)
   81e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81e56:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   81e58:	4b15      	ldr	r3, [pc, #84]	; (81eb0 <main+0x80>)
   81e5a:	2246      	movs	r2, #70	; 0x46
   81e5c:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   81e5e:	4b15      	ldr	r3, [pc, #84]	; (81eb4 <main+0x84>)
   81e60:	f44f 7240 	mov.w	r2, #768	; 0x300
   81e64:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   81e66:	4914      	ldr	r1, [pc, #80]	; (81eb8 <main+0x88>)
   81e68:	4811      	ldr	r0, [pc, #68]	; (81eb0 <main+0x80>)
   81e6a:	4b14      	ldr	r3, [pc, #80]	; (81ebc <main+0x8c>)
   81e6c:	4798      	blx	r3
	uart_enable(UART);
   81e6e:	4810      	ldr	r0, [pc, #64]	; (81eb0 <main+0x80>)
   81e70:	4b13      	ldr	r3, [pc, #76]	; (81ec0 <main+0x90>)
   81e72:	4798      	blx	r3
	uart_enable_rx(UART);
   81e74:	480e      	ldr	r0, [pc, #56]	; (81eb0 <main+0x80>)
   81e76:	4b13      	ldr	r3, [pc, #76]	; (81ec4 <main+0x94>)
   81e78:	4798      	blx	r3
	uart_enable_tx(UART);
   81e7a:	480d      	ldr	r0, [pc, #52]	; (81eb0 <main+0x80>)
   81e7c:	4b12      	ldr	r3, [pc, #72]	; (81ec8 <main+0x98>)
   81e7e:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   81e80:	2008      	movs	r0, #8
   81e82:	4b12      	ldr	r3, [pc, #72]	; (81ecc <main+0x9c>)
   81e84:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81e86:	2008      	movs	r0, #8
   81e88:	4b11      	ldr	r3, [pc, #68]	; (81ed0 <main+0xa0>)
   81e8a:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   81e8c:	2100      	movs	r1, #0
   81e8e:	2008      	movs	r0, #8
   81e90:	4b10      	ldr	r3, [pc, #64]	; (81ed4 <main+0xa4>)
   81e92:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   81e94:	2008      	movs	r0, #8
   81e96:	4b10      	ldr	r3, [pc, #64]	; (81ed8 <main+0xa8>)
   81e98:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   81e9a:	2300      	movs	r3, #0
   81e9c:	617b      	str	r3, [r7, #20]
   81e9e:	e020      	b.n	81ee2 <main+0xb2>
   81ea0:	00082ad1 	.word	0x00082ad1
   81ea4:	00081299 	.word	0x00081299
   81ea8:	00081a01 	.word	0x00081a01
   81eac:	000832bd 	.word	0x000832bd
   81eb0:	400e0800 	.word	0x400e0800
   81eb4:	400e0e00 	.word	0x400e0e00
   81eb8:	00086a50 	.word	0x00086a50
   81ebc:	00081cf9 	.word	0x00081cf9
   81ec0:	00081561 	.word	0x00081561
   81ec4:	00081549 	.word	0x00081549
   81ec8:	00081531 	.word	0x00081531
   81ecc:	000818a1 	.word	0x000818a1
   81ed0:	000818d5 	.word	0x000818d5
   81ed4:	00081909 	.word	0x00081909
   81ed8:	00081871 	.word	0x00081871
   81edc:	697b      	ldr	r3, [r7, #20]
   81ede:	3301      	adds	r3, #1
   81ee0:	617b      	str	r3, [r7, #20]
   81ee2:	697b      	ldr	r3, [r7, #20]
   81ee4:	4a91      	ldr	r2, [pc, #580]	; (8212c <main+0x2fc>)
   81ee6:	4293      	cmp	r3, r2
   81ee8:	ddf8      	ble.n	81edc <main+0xac>
	{
		;
	}
	printf("welcome\n");
   81eea:	4891      	ldr	r0, [pc, #580]	; (82130 <main+0x300>)
   81eec:	4b91      	ldr	r3, [pc, #580]	; (82134 <main+0x304>)
   81eee:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   81ef0:	200b      	movs	r0, #11
   81ef2:	4b91      	ldr	r3, [pc, #580]	; (82138 <main+0x308>)
   81ef4:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   81ef6:	200c      	movs	r0, #12
   81ef8:	4b8f      	ldr	r3, [pc, #572]	; (82138 <main+0x308>)
   81efa:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   81efc:	200d      	movs	r0, #13
   81efe:	4b8e      	ldr	r3, [pc, #568]	; (82138 <main+0x308>)
   81f00:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   81f02:	200e      	movs	r0, #14
   81f04:	4b8c      	ldr	r3, [pc, #560]	; (82138 <main+0x308>)
   81f06:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   81f08:	4b8c      	ldr	r3, [pc, #560]	; (8213c <main+0x30c>)
   81f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f0c:	0e5b      	lsrs	r3, r3, #25
   81f0e:	f003 0301 	and.w	r3, r3, #1
   81f12:	4a8b      	ldr	r2, [pc, #556]	; (82140 <main+0x310>)
   81f14:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   81f16:	4b8b      	ldr	r3, [pc, #556]	; (82144 <main+0x314>)
   81f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f1a:	0f1b      	lsrs	r3, r3, #28
   81f1c:	f003 0301 	and.w	r3, r3, #1
   81f20:	4a89      	ldr	r2, [pc, #548]	; (82148 <main+0x318>)
   81f22:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81f24:	4b87      	ldr	r3, [pc, #540]	; (82144 <main+0x314>)
   81f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f28:	0e9b      	lsrs	r3, r3, #26
   81f2a:	f003 0301 	and.w	r3, r3, #1
   81f2e:	4a87      	ldr	r2, [pc, #540]	; (8214c <main+0x31c>)
   81f30:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   81f32:	4b85      	ldr	r3, [pc, #532]	; (82148 <main+0x318>)
   81f34:	681b      	ldr	r3, [r3, #0]
   81f36:	4a86      	ldr	r2, [pc, #536]	; (82150 <main+0x320>)
   81f38:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   81f3a:	4b84      	ldr	r3, [pc, #528]	; (8214c <main+0x31c>)
   81f3c:	681b      	ldr	r3, [r3, #0]
   81f3e:	4a85      	ldr	r2, [pc, #532]	; (82154 <main+0x324>)
   81f40:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   81f42:	4b85      	ldr	r3, [pc, #532]	; (82158 <main+0x328>)
   81f44:	613b      	str	r3, [r7, #16]
	uint32_t secondcount = (1312499/2  + 328124)  ;   //
   81f46:	4b85      	ldr	r3, [pc, #532]	; (8215c <main+0x32c>)
   81f48:	60fb      	str	r3, [r7, #12]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   81f4a:	f641 13a2 	movw	r3, #6562	; 0x19a2
   81f4e:	60bb      	str	r3, [r7, #8]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81f50:	2101      	movs	r1, #1
   81f52:	4883      	ldr	r0, [pc, #524]	; (82160 <main+0x330>)
   81f54:	4b83      	ldr	r3, [pc, #524]	; (82164 <main+0x334>)
   81f56:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   81f58:	4b78      	ldr	r3, [pc, #480]	; (8213c <main+0x30c>)
   81f5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f5e:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   81f60:	4b76      	ldr	r3, [pc, #472]	; (8213c <main+0x30c>)
   81f62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f66:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   81f68:	4b7f      	ldr	r3, [pc, #508]	; (82168 <main+0x338>)
   81f6a:	781b      	ldrb	r3, [r3, #0]
   81f6c:	2b01      	cmp	r3, #1
   81f6e:	d057      	beq.n	82020 <main+0x1f0>
		{
			
		
				if(flag_1==0)
   81f70:	4b7e      	ldr	r3, [pc, #504]	; (8216c <main+0x33c>)
   81f72:	681b      	ldr	r3, [r3, #0]
   81f74:	2b00      	cmp	r3, #0
   81f76:	d125      	bne.n	81fc4 <main+0x194>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   81f78:	4b7d      	ldr	r3, [pc, #500]	; (82170 <main+0x340>)
   81f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f7c:	0b9b      	lsrs	r3, r3, #14
   81f7e:	f003 0301 	and.w	r3, r3, #1
   81f82:	4a6f      	ldr	r2, [pc, #444]	; (82140 <main+0x310>)
   81f84:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   81f86:	4b6e      	ldr	r3, [pc, #440]	; (82140 <main+0x310>)
   81f88:	681b      	ldr	r3, [r3, #0]
   81f8a:	2b01      	cmp	r3, #1
   81f8c:	d116      	bne.n	81fbc <main+0x18c>
   81f8e:	4b79      	ldr	r3, [pc, #484]	; (82174 <main+0x344>)
   81f90:	681b      	ldr	r3, [r3, #0]
   81f92:	2b00      	cmp	r3, #0
   81f94:	d112      	bne.n	81fbc <main+0x18c>
					{
						dummy_1++;
   81f96:	4b78      	ldr	r3, [pc, #480]	; (82178 <main+0x348>)
   81f98:	681b      	ldr	r3, [r3, #0]
   81f9a:	3301      	adds	r3, #1
   81f9c:	4a76      	ldr	r2, [pc, #472]	; (82178 <main+0x348>)
   81f9e:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   81fa0:	4b75      	ldr	r3, [pc, #468]	; (82178 <main+0x348>)
   81fa2:	681b      	ldr	r3, [r3, #0]
   81fa4:	2b02      	cmp	r3, #2
   81fa6:	d109      	bne.n	81fbc <main+0x18c>
						{
							tc_stop(TC0,0);
   81fa8:	2100      	movs	r1, #0
   81faa:	4874      	ldr	r0, [pc, #464]	; (8217c <main+0x34c>)
   81fac:	4b74      	ldr	r3, [pc, #464]	; (82180 <main+0x350>)
   81fae:	4798      	blx	r3
							dummy_1=0;
   81fb0:	4b71      	ldr	r3, [pc, #452]	; (82178 <main+0x348>)
   81fb2:	2200      	movs	r2, #0
   81fb4:	601a      	str	r2, [r3, #0]
							flag_1=1;
   81fb6:	4b6d      	ldr	r3, [pc, #436]	; (8216c <main+0x33c>)
   81fb8:	2201      	movs	r2, #1
   81fba:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   81fbc:	4b60      	ldr	r3, [pc, #384]	; (82140 <main+0x310>)
   81fbe:	681b      	ldr	r3, [r3, #0]
   81fc0:	4a6c      	ldr	r2, [pc, #432]	; (82174 <main+0x344>)
   81fc2:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   81fc4:	4b6f      	ldr	r3, [pc, #444]	; (82184 <main+0x354>)
   81fc6:	681b      	ldr	r3, [r3, #0]
   81fc8:	2b00      	cmp	r3, #0
   81fca:	d129      	bne.n	82020 <main+0x1f0>
   81fcc:	4b67      	ldr	r3, [pc, #412]	; (8216c <main+0x33c>)
   81fce:	681b      	ldr	r3, [r3, #0]
   81fd0:	2b01      	cmp	r3, #1
   81fd2:	d125      	bne.n	82020 <main+0x1f0>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81fd4:	4b66      	ldr	r3, [pc, #408]	; (82170 <main+0x340>)
   81fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81fd8:	0bdb      	lsrs	r3, r3, #15
   81fda:	f003 0301 	and.w	r3, r3, #1
   81fde:	4a5a      	ldr	r2, [pc, #360]	; (82148 <main+0x318>)
   81fe0:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   81fe2:	4b59      	ldr	r3, [pc, #356]	; (82148 <main+0x318>)
   81fe4:	681b      	ldr	r3, [r3, #0]
   81fe6:	2b01      	cmp	r3, #1
   81fe8:	d116      	bne.n	82018 <main+0x1e8>
   81fea:	4b59      	ldr	r3, [pc, #356]	; (82150 <main+0x320>)
   81fec:	681b      	ldr	r3, [r3, #0]
   81fee:	2b00      	cmp	r3, #0
   81ff0:	d112      	bne.n	82018 <main+0x1e8>
					{
						dummy_1b++;
   81ff2:	4b65      	ldr	r3, [pc, #404]	; (82188 <main+0x358>)
   81ff4:	681b      	ldr	r3, [r3, #0]
   81ff6:	3301      	adds	r3, #1
   81ff8:	4a63      	ldr	r2, [pc, #396]	; (82188 <main+0x358>)
   81ffa:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   81ffc:	4b62      	ldr	r3, [pc, #392]	; (82188 <main+0x358>)
   81ffe:	681b      	ldr	r3, [r3, #0]
   82000:	2b02      	cmp	r3, #2
   82002:	d109      	bne.n	82018 <main+0x1e8>
						{
							tc_stop(TC0,1);
   82004:	2101      	movs	r1, #1
   82006:	485d      	ldr	r0, [pc, #372]	; (8217c <main+0x34c>)
   82008:	4b5d      	ldr	r3, [pc, #372]	; (82180 <main+0x350>)
   8200a:	4798      	blx	r3
							dummy_1b=0;
   8200c:	4b5e      	ldr	r3, [pc, #376]	; (82188 <main+0x358>)
   8200e:	2200      	movs	r2, #0
   82010:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   82012:	4b5c      	ldr	r3, [pc, #368]	; (82184 <main+0x354>)
   82014:	2201      	movs	r2, #1
   82016:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   82018:	4b4b      	ldr	r3, [pc, #300]	; (82148 <main+0x318>)
   8201a:	681b      	ldr	r3, [r3, #0]
   8201c:	4a4c      	ldr	r2, [pc, #304]	; (82150 <main+0x320>)
   8201e:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   82020:	4b5a      	ldr	r3, [pc, #360]	; (8218c <main+0x35c>)
   82022:	781b      	ldrb	r3, [r3, #0]
   82024:	2b01      	cmp	r3, #1
   82026:	d135      	bne.n	82094 <main+0x264>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   82028:	4b51      	ldr	r3, [pc, #324]	; (82170 <main+0x340>)
   8202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8202c:	0b9b      	lsrs	r3, r3, #14
   8202e:	f003 0301 	and.w	r3, r3, #1
   82032:	4a43      	ldr	r2, [pc, #268]	; (82140 <main+0x310>)
   82034:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   82036:	4b42      	ldr	r3, [pc, #264]	; (82140 <main+0x310>)
   82038:	681b      	ldr	r3, [r3, #0]
   8203a:	2b01      	cmp	r3, #1
   8203c:	d10b      	bne.n	82056 <main+0x226>
   8203e:	4b4d      	ldr	r3, [pc, #308]	; (82174 <main+0x344>)
   82040:	681b      	ldr	r3, [r3, #0]
   82042:	2b00      	cmp	r3, #0
   82044:	d107      	bne.n	82056 <main+0x226>
				{
					acid_count++;
   82046:	4b52      	ldr	r3, [pc, #328]	; (82190 <main+0x360>)
   82048:	681b      	ldr	r3, [r3, #0]
   8204a:	3301      	adds	r3, #1
   8204c:	4a50      	ldr	r2, [pc, #320]	; (82190 <main+0x360>)
   8204e:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   82050:	4b50      	ldr	r3, [pc, #320]	; (82194 <main+0x364>)
   82052:	2200      	movs	r2, #0
   82054:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   82056:	4b3a      	ldr	r3, [pc, #232]	; (82140 <main+0x310>)
   82058:	681b      	ldr	r3, [r3, #0]
   8205a:	4a46      	ldr	r2, [pc, #280]	; (82174 <main+0x344>)
   8205c:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   8205e:	4b44      	ldr	r3, [pc, #272]	; (82170 <main+0x340>)
   82060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82062:	0bdb      	lsrs	r3, r3, #15
   82064:	f003 0301 	and.w	r3, r3, #1
   82068:	4a37      	ldr	r2, [pc, #220]	; (82148 <main+0x318>)
   8206a:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   8206c:	4b36      	ldr	r3, [pc, #216]	; (82148 <main+0x318>)
   8206e:	681b      	ldr	r3, [r3, #0]
   82070:	2b01      	cmp	r3, #1
   82072:	d10b      	bne.n	8208c <main+0x25c>
   82074:	4b36      	ldr	r3, [pc, #216]	; (82150 <main+0x320>)
   82076:	681b      	ldr	r3, [r3, #0]
   82078:	2b00      	cmp	r3, #0
   8207a:	d107      	bne.n	8208c <main+0x25c>
				{
				 bicarb_count ++;
   8207c:	4b46      	ldr	r3, [pc, #280]	; (82198 <main+0x368>)
   8207e:	681b      	ldr	r3, [r3, #0]
   82080:	3301      	adds	r3, #1
   82082:	4a45      	ldr	r2, [pc, #276]	; (82198 <main+0x368>)
   82084:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   82086:	4b45      	ldr	r3, [pc, #276]	; (8219c <main+0x36c>)
   82088:	2200      	movs	r2, #0
   8208a:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   8208c:	4b2e      	ldr	r3, [pc, #184]	; (82148 <main+0x318>)
   8208e:	681b      	ldr	r3, [r3, #0]
   82090:	4a2f      	ldr	r2, [pc, #188]	; (82150 <main+0x320>)
   82092:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1) && (OneSecFlag == 1) )   //
   82094:	4b42      	ldr	r3, [pc, #264]	; (821a0 <main+0x370>)
   82096:	781b      	ldrb	r3, [r3, #0]
   82098:	b2db      	uxtb	r3, r3
   8209a:	2b01      	cmp	r3, #1
   8209c:	d131      	bne.n	82102 <main+0x2d2>
   8209e:	4b33      	ldr	r3, [pc, #204]	; (8216c <main+0x33c>)
   820a0:	681b      	ldr	r3, [r3, #0]
   820a2:	2b01      	cmp	r3, #1
   820a4:	d12d      	bne.n	82102 <main+0x2d2>
   820a6:	4b37      	ldr	r3, [pc, #220]	; (82184 <main+0x354>)
   820a8:	681b      	ldr	r3, [r3, #0]
   820aa:	2b01      	cmp	r3, #1
   820ac:	d129      	bne.n	82102 <main+0x2d2>
   820ae:	4b3d      	ldr	r3, [pc, #244]	; (821a4 <main+0x374>)
   820b0:	781b      	ldrb	r3, [r3, #0]
   820b2:	2b01      	cmp	r3, #1
   820b4:	d125      	bne.n	82102 <main+0x2d2>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   820b6:	4b23      	ldr	r3, [pc, #140]	; (82144 <main+0x314>)
   820b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   820ba:	0e9b      	lsrs	r3, r3, #26
   820bc:	f003 0301 	and.w	r3, r3, #1
   820c0:	4a22      	ldr	r2, [pc, #136]	; (8214c <main+0x31c>)
   820c2:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   820c4:	4b21      	ldr	r3, [pc, #132]	; (8214c <main+0x31c>)
   820c6:	681b      	ldr	r3, [r3, #0]
   820c8:	2b01      	cmp	r3, #1
   820ca:	d116      	bne.n	820fa <main+0x2ca>
   820cc:	4b21      	ldr	r3, [pc, #132]	; (82154 <main+0x324>)
   820ce:	681b      	ldr	r3, [r3, #0]
   820d0:	2b00      	cmp	r3, #0
   820d2:	d112      	bne.n	820fa <main+0x2ca>
			{
				
				//startTimer1(TC0,2,TC2_IRQn,stepcount);
			//	PIOB->PIO_SODR = 1 << 19 ;
				start_acidpump();
   820d4:	4b34      	ldr	r3, [pc, #208]	; (821a8 <main+0x378>)
   820d6:	4798      	blx	r3
				start_bicarpump();
   820d8:	4b34      	ldr	r3, [pc, #208]	; (821ac <main+0x37c>)
   820da:	4798      	blx	r3
				//tc_stop(TC0,2);
				OneSecFlag = 0;
   820dc:	4b31      	ldr	r3, [pc, #196]	; (821a4 <main+0x374>)
   820de:	2200      	movs	r2, #0
   820e0:	701a      	strb	r2, [r3, #0]
				
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   820e2:	693b      	ldr	r3, [r7, #16]
   820e4:	221d      	movs	r2, #29
   820e6:	2102      	movs	r1, #2
   820e8:	4824      	ldr	r0, [pc, #144]	; (8217c <main+0x34c>)
   820ea:	4c31      	ldr	r4, [pc, #196]	; (821b0 <main+0x380>)
   820ec:	47a0      	blx	r4
				startTimer2(TC1,0,TC3_IRQn,secondcount);
   820ee:	68fb      	ldr	r3, [r7, #12]
   820f0:	221e      	movs	r2, #30
   820f2:	2100      	movs	r1, #0
   820f4:	482f      	ldr	r0, [pc, #188]	; (821b4 <main+0x384>)
   820f6:	4c30      	ldr	r4, [pc, #192]	; (821b8 <main+0x388>)
   820f8:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   820fa:	4b14      	ldr	r3, [pc, #80]	; (8214c <main+0x31c>)
   820fc:	681b      	ldr	r3, [r3, #0]
   820fe:	4a15      	ldr	r2, [pc, #84]	; (82154 <main+0x324>)
   82100:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   82102:	4b2e      	ldr	r3, [pc, #184]	; (821bc <main+0x38c>)
   82104:	781b      	ldrb	r3, [r3, #0]
   82106:	2b05      	cmp	r3, #5
   82108:	f63f af2e 	bhi.w	81f68 <main+0x138>
   8210c:	a201      	add	r2, pc, #4	; (adr r2, 82114 <main+0x2e4>)
   8210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82112:	bf00      	nop
   82114:	000821c1 	.word	0x000821c1
   82118:	000821f1 	.word	0x000821f1
   8211c:	00081f69 	.word	0x00081f69
   82120:	000821db 	.word	0x000821db
   82124:	0008220b 	.word	0x0008220b
   82128:	00082221 	.word	0x00082221
   8212c:	0001869f 	.word	0x0001869f
   82130:	00086a68 	.word	0x00086a68
   82134:	00083b05 	.word	0x00083b05
   82138:	000832bd 	.word	0x000832bd
   8213c:	400e1000 	.word	0x400e1000
   82140:	20070cec 	.word	0x20070cec
   82144:	400e1200 	.word	0x400e1200
   82148:	20070cf0 	.word	0x20070cf0
   8214c:	20070cf4 	.word	0x20070cf4
   82150:	20070cf8 	.word	0x20070cf8
   82154:	20070cfc 	.word	0x20070cfc
   82158:	001406f3 	.word	0x001406f3
   8215c:	000f0535 	.word	0x000f0535
   82160:	400e0800 	.word	0x400e0800
   82164:	00081579 	.word	0x00081579
   82168:	20070cd4 	.word	0x20070cd4
   8216c:	20070d00 	.word	0x20070d00
   82170:	400e0e00 	.word	0x400e0e00
   82174:	20070d04 	.word	0x20070d04
   82178:	20070d08 	.word	0x20070d08
   8217c:	40080000 	.word	0x40080000
   82180:	00081441 	.word	0x00081441
   82184:	20070d0c 	.word	0x20070d0c
   82188:	20070d10 	.word	0x20070d10
   8218c:	20070cdc 	.word	0x20070cdc
   82190:	20070ce0 	.word	0x20070ce0
   82194:	20070ca0 	.word	0x20070ca0
   82198:	20070ce4 	.word	0x20070ce4
   8219c:	20070ca4 	.word	0x20070ca4
   821a0:	20070cd5 	.word	0x20070cd5
   821a4:	20070cb0 	.word	0x20070cb0
   821a8:	000825bd 	.word	0x000825bd
   821ac:	00082669 	.word	0x00082669
   821b0:	00081195 	.word	0x00081195
   821b4:	40084000 	.word	0x40084000
   821b8:	00081209 	.word	0x00081209
   821bc:	20070400 	.word	0x20070400
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   821c0:	4ba8      	ldr	r3, [pc, #672]	; (82464 <main+0x634>)
   821c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   821c6:	601a      	str	r2, [r3, #0]
					start_acidpump();
   821c8:	4ba7      	ldr	r3, [pc, #668]	; (82468 <main+0x638>)
   821ca:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   821cc:	4ba7      	ldr	r3, [pc, #668]	; (8246c <main+0x63c>)
   821ce:	2203      	movs	r2, #3
   821d0:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   821d2:	4ba7      	ldr	r3, [pc, #668]	; (82470 <main+0x640>)
   821d4:	2200      	movs	r2, #0
   821d6:	701a      	strb	r2, [r3, #0]
				break;
   821d8:	e1d5      	b.n	82586 <main+0x756>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   821da:	4ba6      	ldr	r3, [pc, #664]	; (82474 <main+0x644>)
   821dc:	681b      	ldr	r3, [r3, #0]
   821de:	2b01      	cmp	r3, #1
   821e0:	d102      	bne.n	821e8 <main+0x3b8>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   821e2:	4ba2      	ldr	r3, [pc, #648]	; (8246c <main+0x63c>)
   821e4:	2201      	movs	r2, #1
   821e6:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   821e8:	4ba1      	ldr	r3, [pc, #644]	; (82470 <main+0x640>)
   821ea:	2200      	movs	r2, #0
   821ec:	701a      	strb	r2, [r3, #0]
				break;
   821ee:	e1ca      	b.n	82586 <main+0x756>
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   821f0:	4ba1      	ldr	r3, [pc, #644]	; (82478 <main+0x648>)
   821f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   821f6:	601a      	str	r2, [r3, #0]
					start_bicarpump();
   821f8:	4ba0      	ldr	r3, [pc, #640]	; (8247c <main+0x64c>)
   821fa:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   821fc:	4b9b      	ldr	r3, [pc, #620]	; (8246c <main+0x63c>)
   821fe:	2204      	movs	r2, #4
   82200:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   82202:	4b9b      	ldr	r3, [pc, #620]	; (82470 <main+0x640>)
   82204:	2200      	movs	r2, #0
   82206:	701a      	strb	r2, [r3, #0]
				break;
   82208:	e1bd      	b.n	82586 <main+0x756>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   8220a:	4b9d      	ldr	r3, [pc, #628]	; (82480 <main+0x650>)
   8220c:	681b      	ldr	r3, [r3, #0]
   8220e:	2b01      	cmp	r3, #1
   82210:	d102      	bne.n	82218 <main+0x3e8>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   82212:	4b96      	ldr	r3, [pc, #600]	; (8246c <main+0x63c>)
   82214:	2205      	movs	r2, #5
   82216:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82218:	4b95      	ldr	r3, [pc, #596]	; (82470 <main+0x640>)
   8221a:	2200      	movs	r2, #0
   8221c:	701a      	strb	r2, [r3, #0]
				break;
   8221e:	e1b2      	b.n	82586 <main+0x756>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   82220:	4b98      	ldr	r3, [pc, #608]	; (82484 <main+0x654>)
   82222:	781b      	ldrb	r3, [r3, #0]
   82224:	b2db      	uxtb	r3, r3
   82226:	2b01      	cmp	r3, #1
   82228:	f47f ae9e 	bne.w	81f68 <main+0x138>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   8222c:	4b96      	ldr	r3, [pc, #600]	; (82488 <main+0x658>)
   8222e:	781b      	ldrb	r3, [r3, #0]
   82230:	71fb      	strb	r3, [r7, #7]
						switch (dummy)
   82232:	79fb      	ldrb	r3, [r7, #7]
   82234:	3b01      	subs	r3, #1
   82236:	2b0c      	cmp	r3, #12
   82238:	f200 819a 	bhi.w	82570 <main+0x740>
   8223c:	a201      	add	r2, pc, #4	; (adr r2, 82244 <main+0x414>)
   8223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82242:	bf00      	nop
   82244:	000822cb 	.word	0x000822cb
   82248:	00082321 	.word	0x00082321
   8224c:	0008255f 	.word	0x0008255f
   82250:	000822e5 	.word	0x000822e5
   82254:	000822f7 	.word	0x000822f7
   82258:	00082303 	.word	0x00082303
   8225c:	00082315 	.word	0x00082315
   82260:	00082291 	.word	0x00082291
   82264:	000822b3 	.word	0x000822b3
   82268:	00082571 	.word	0x00082571
   8226c:	00082571 	.word	0x00082571
   82270:	00082279 	.word	0x00082279
   82274:	00082285 	.word	0x00082285
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   82278:	4b7a      	ldr	r3, [pc, #488]	; (82464 <main+0x634>)
   8227a:	22d2      	movs	r2, #210	; 0xd2
   8227c:	601a      	str	r2, [r3, #0]
															start_acidpump();
   8227e:	4b7a      	ldr	r3, [pc, #488]	; (82468 <main+0x638>)
   82280:	4798      	blx	r3
							
							break;
   82282:	e176      	b.n	82572 <main+0x742>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   82284:	4b7c      	ldr	r3, [pc, #496]	; (82478 <main+0x648>)
   82286:	22d2      	movs	r2, #210	; 0xd2
   82288:	601a      	str	r2, [r3, #0]
															start_bicarpump();
   8228a:	4b7c      	ldr	r3, [pc, #496]	; (8247c <main+0x64c>)
   8228c:	4798      	blx	r3
							
							break;
   8228e:	e170      	b.n	82572 <main+0x742>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
								rc=210;
   82290:	4b74      	ldr	r3, [pc, #464]	; (82464 <main+0x634>)
   82292:	22d2      	movs	r2, #210	; 0xd2
   82294:	601a      	str	r2, [r3, #0]
								bic_rc=210;
   82296:	4b78      	ldr	r3, [pc, #480]	; (82478 <main+0x648>)
   82298:	22d2      	movs	r2, #210	; 0xd2
   8229a:	601a      	str	r2, [r3, #0]
								start_acidpump();
   8229c:	4b72      	ldr	r3, [pc, #456]	; (82468 <main+0x638>)
   8229e:	4798      	blx	r3
								start_bicarpump();
   822a0:	4b76      	ldr	r3, [pc, #472]	; (8247c <main+0x64c>)
   822a2:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   822a4:	4b71      	ldr	r3, [pc, #452]	; (8246c <main+0x63c>)
   822a6:	2205      	movs	r2, #5
   822a8:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   822aa:	4b78      	ldr	r3, [pc, #480]	; (8248c <main+0x65c>)
   822ac:	2201      	movs	r2, #1
   822ae:	701a      	strb	r2, [r3, #0]
							break;
   822b0:	e15f      	b.n	82572 <main+0x742>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
								stop_pump();
   822b2:	4b77      	ldr	r3, [pc, #476]	; (82490 <main+0x660>)
   822b4:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   822b6:	4b6d      	ldr	r3, [pc, #436]	; (8246c <main+0x63c>)
   822b8:	2205      	movs	r2, #5
   822ba:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   822bc:	4b6c      	ldr	r3, [pc, #432]	; (82470 <main+0x640>)
   822be:	2200      	movs	r2, #0
   822c0:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   822c2:	4b72      	ldr	r3, [pc, #456]	; (8248c <main+0x65c>)
   822c4:	2200      	movs	r2, #0
   822c6:	701a      	strb	r2, [r3, #0]
							break;
   822c8:	e153      	b.n	82572 <main+0x742>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_1=0;
   822ca:	4b6a      	ldr	r3, [pc, #424]	; (82474 <main+0x644>)
   822cc:	2200      	movs	r2, #0
   822ce:	601a      	str	r2, [r3, #0]
							flag_1b=0;
   822d0:	4b6b      	ldr	r3, [pc, #428]	; (82480 <main+0x650>)
   822d2:	2200      	movs	r2, #0
   822d4:	601a      	str	r2, [r3, #0]
							flag_nrmal=0;
   822d6:	4b66      	ldr	r3, [pc, #408]	; (82470 <main+0x640>)
   822d8:	2200      	movs	r2, #0
   822da:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   822dc:	4b63      	ldr	r3, [pc, #396]	; (8246c <main+0x63c>)
   822de:	2200      	movs	r2, #0
   822e0:	701a      	strb	r2, [r3, #0]
							break;
   822e2:	e146      	b.n	82572 <main+0x742>
							case PROP_START_DISINFECTION:
								rc=210;
   822e4:	4b5f      	ldr	r3, [pc, #380]	; (82464 <main+0x634>)
   822e6:	22d2      	movs	r2, #210	; 0xd2
   822e8:	601a      	str	r2, [r3, #0]
								start_acidpump();
   822ea:	4b5f      	ldr	r3, [pc, #380]	; (82468 <main+0x638>)
   822ec:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822ee:	4b5f      	ldr	r3, [pc, #380]	; (8246c <main+0x63c>)
   822f0:	2205      	movs	r2, #5
   822f2:	701a      	strb	r2, [r3, #0]
							break;
   822f4:	e13d      	b.n	82572 <main+0x742>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   822f6:	4b66      	ldr	r3, [pc, #408]	; (82490 <main+0x660>)
   822f8:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   822fa:	4b5c      	ldr	r3, [pc, #368]	; (8246c <main+0x63c>)
   822fc:	2205      	movs	r2, #5
   822fe:	701a      	strb	r2, [r3, #0]
							break;
   82300:	e137      	b.n	82572 <main+0x742>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   82302:	4b5d      	ldr	r3, [pc, #372]	; (82478 <main+0x648>)
   82304:	22d2      	movs	r2, #210	; 0xd2
   82306:	601a      	str	r2, [r3, #0]
								start_bicarpump();
   82308:	4b5c      	ldr	r3, [pc, #368]	; (8247c <main+0x64c>)
   8230a:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8230c:	4b57      	ldr	r3, [pc, #348]	; (8246c <main+0x63c>)
   8230e:	2205      	movs	r2, #5
   82310:	701a      	strb	r2, [r3, #0]
							break;
   82312:	e12e      	b.n	82572 <main+0x742>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82314:	4b5e      	ldr	r3, [pc, #376]	; (82490 <main+0x660>)
   82316:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82318:	4b54      	ldr	r3, [pc, #336]	; (8246c <main+0x63c>)
   8231a:	2205      	movs	r2, #5
   8231c:	701a      	strb	r2, [r3, #0]
							break;
   8231e:	e128      	b.n	82572 <main+0x742>
							case PROP_START_MIXING:
							OneSecFlag = 1 ;
   82320:	4b5c      	ldr	r3, [pc, #368]	; (82494 <main+0x664>)
   82322:	2201      	movs	r2, #1
   82324:	701a      	strb	r2, [r3, #0]
								switch(User_setConductivity)
   82326:	4b5c      	ldr	r3, [pc, #368]	; (82498 <main+0x668>)
   82328:	881b      	ldrh	r3, [r3, #0]
   8232a:	b29b      	uxth	r3, r3
   8232c:	3b87      	subs	r3, #135	; 0x87
   8232e:	2b18      	cmp	r3, #24
   82330:	f200 8101 	bhi.w	82536 <main+0x706>
   82334:	a201      	add	r2, pc, #4	; (adr r2, 8233c <main+0x50c>)
   82336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8233a:	bf00      	nop
   8233c:	000823a1 	.word	0x000823a1
   82340:	000823af 	.word	0x000823af
   82344:	000823bd 	.word	0x000823bd
   82348:	000823cb 	.word	0x000823cb
   8234c:	000823d9 	.word	0x000823d9
   82350:	000823e7 	.word	0x000823e7
   82354:	000823f5 	.word	0x000823f5
   82358:	00082403 	.word	0x00082403
   8235c:	00082411 	.word	0x00082411
   82360:	0008241f 	.word	0x0008241f
   82364:	0008242d 	.word	0x0008242d
   82368:	0008243b 	.word	0x0008243b
   8236c:	00082449 	.word	0x00082449
   82370:	00082457 	.word	0x00082457
   82374:	0008249d 	.word	0x0008249d
   82378:	000824ab 	.word	0x000824ab
   8237c:	000824b9 	.word	0x000824b9
   82380:	000824c7 	.word	0x000824c7
   82384:	000824d5 	.word	0x000824d5
   82388:	000824e3 	.word	0x000824e3
   8238c:	000824f1 	.word	0x000824f1
   82390:	000824ff 	.word	0x000824ff
   82394:	0008250d 	.word	0x0008250d
   82398:	0008251b 	.word	0x0008251b
   8239c:	00082529 	.word	0x00082529
									{
										case 135:
											rc= 213;
   823a0:	4b30      	ldr	r3, [pc, #192]	; (82464 <main+0x634>)
   823a2:	22d5      	movs	r2, #213	; 0xd5
   823a4:	601a      	str	r2, [r3, #0]
											bic_rc = 213;
   823a6:	4b34      	ldr	r3, [pc, #208]	; (82478 <main+0x648>)
   823a8:	22d5      	movs	r2, #213	; 0xd5
   823aa:	601a      	str	r2, [r3, #0]
										break;
   823ac:	e0c3      	b.n	82536 <main+0x706>
										
										case 136:
 											rc= 210;
   823ae:	4b2d      	ldr	r3, [pc, #180]	; (82464 <main+0x634>)
   823b0:	22d2      	movs	r2, #210	; 0xd2
   823b2:	601a      	str	r2, [r3, #0]
 											bic_rc = 210;
   823b4:	4b30      	ldr	r3, [pc, #192]	; (82478 <main+0x648>)
   823b6:	22d2      	movs	r2, #210	; 0xd2
   823b8:	601a      	str	r2, [r3, #0]
 										break;
   823ba:	e0bc      	b.n	82536 <main+0x706>
									
 										case 137:
 											rc= 210;
   823bc:	4b29      	ldr	r3, [pc, #164]	; (82464 <main+0x634>)
   823be:	22d2      	movs	r2, #210	; 0xd2
   823c0:	601a      	str	r2, [r3, #0]
 											bic_rc = 210;
   823c2:	4b2d      	ldr	r3, [pc, #180]	; (82478 <main+0x648>)
   823c4:	22d2      	movs	r2, #210	; 0xd2
   823c6:	601a      	str	r2, [r3, #0]
 										break;
   823c8:	e0b5      	b.n	82536 <main+0x706>
 										
										case 138:
											rc= 207;
   823ca:	4b26      	ldr	r3, [pc, #152]	; (82464 <main+0x634>)
   823cc:	22cf      	movs	r2, #207	; 0xcf
   823ce:	601a      	str	r2, [r3, #0]
											bic_rc = 207;
   823d0:	4b29      	ldr	r3, [pc, #164]	; (82478 <main+0x648>)
   823d2:	22cf      	movs	r2, #207	; 0xcf
   823d4:	601a      	str	r2, [r3, #0]
										break;
   823d6:	e0ae      	b.n	82536 <main+0x706>
										
										case 139:
											rc= 207;
   823d8:	4b22      	ldr	r3, [pc, #136]	; (82464 <main+0x634>)
   823da:	22cf      	movs	r2, #207	; 0xcf
   823dc:	601a      	str	r2, [r3, #0]
											bic_rc = 207;
   823de:	4b26      	ldr	r3, [pc, #152]	; (82478 <main+0x648>)
   823e0:	22cf      	movs	r2, #207	; 0xcf
   823e2:	601a      	str	r2, [r3, #0]
										break;
   823e4:	e0a7      	b.n	82536 <main+0x706>
										
										case 140:
											rc= 204;
   823e6:	4b1f      	ldr	r3, [pc, #124]	; (82464 <main+0x634>)
   823e8:	22cc      	movs	r2, #204	; 0xcc
   823ea:	601a      	str	r2, [r3, #0]
											bic_rc = 204;
   823ec:	4b22      	ldr	r3, [pc, #136]	; (82478 <main+0x648>)
   823ee:	22cc      	movs	r2, #204	; 0xcc
   823f0:	601a      	str	r2, [r3, #0]
										break;
   823f2:	e0a0      	b.n	82536 <main+0x706>
										
										case 141:
											rc= 204;
   823f4:	4b1b      	ldr	r3, [pc, #108]	; (82464 <main+0x634>)
   823f6:	22cc      	movs	r2, #204	; 0xcc
   823f8:	601a      	str	r2, [r3, #0]
											bic_rc = 204;
   823fa:	4b1f      	ldr	r3, [pc, #124]	; (82478 <main+0x648>)
   823fc:	22cc      	movs	r2, #204	; 0xcc
   823fe:	601a      	str	r2, [r3, #0]
										break;
   82400:	e099      	b.n	82536 <main+0x706>
										
										case 142:
											rc= 201;
   82402:	4b18      	ldr	r3, [pc, #96]	; (82464 <main+0x634>)
   82404:	22c9      	movs	r2, #201	; 0xc9
   82406:	601a      	str	r2, [r3, #0]
											bic_rc = 201;
   82408:	4b1b      	ldr	r3, [pc, #108]	; (82478 <main+0x648>)
   8240a:	22c9      	movs	r2, #201	; 0xc9
   8240c:	601a      	str	r2, [r3, #0]
										break;
   8240e:	e092      	b.n	82536 <main+0x706>
										
										case 143:
											rc= 201;
   82410:	4b14      	ldr	r3, [pc, #80]	; (82464 <main+0x634>)
   82412:	22c9      	movs	r2, #201	; 0xc9
   82414:	601a      	str	r2, [r3, #0]
											bic_rc = 201;
   82416:	4b18      	ldr	r3, [pc, #96]	; (82478 <main+0x648>)
   82418:	22c9      	movs	r2, #201	; 0xc9
   8241a:	601a      	str	r2, [r3, #0]
										break;
   8241c:	e08b      	b.n	82536 <main+0x706>
										
										case 144:
											rc= 198;
   8241e:	4b11      	ldr	r3, [pc, #68]	; (82464 <main+0x634>)
   82420:	22c6      	movs	r2, #198	; 0xc6
   82422:	601a      	str	r2, [r3, #0]
											bic_rc = 198;
   82424:	4b14      	ldr	r3, [pc, #80]	; (82478 <main+0x648>)
   82426:	22c6      	movs	r2, #198	; 0xc6
   82428:	601a      	str	r2, [r3, #0]
										break;
   8242a:	e084      	b.n	82536 <main+0x706>
										
										case 145:
											rc= 198;
   8242c:	4b0d      	ldr	r3, [pc, #52]	; (82464 <main+0x634>)
   8242e:	22c6      	movs	r2, #198	; 0xc6
   82430:	601a      	str	r2, [r3, #0]
											bic_rc = 198;
   82432:	4b11      	ldr	r3, [pc, #68]	; (82478 <main+0x648>)
   82434:	22c6      	movs	r2, #198	; 0xc6
   82436:	601a      	str	r2, [r3, #0]
										break;		
   82438:	e07d      	b.n	82536 <main+0x706>
												case 146:
												rc= 195;
   8243a:	4b0a      	ldr	r3, [pc, #40]	; (82464 <main+0x634>)
   8243c:	22c3      	movs	r2, #195	; 0xc3
   8243e:	601a      	str	r2, [r3, #0]
												bic_rc = 195;
   82440:	4b0d      	ldr	r3, [pc, #52]	; (82478 <main+0x648>)
   82442:	22c3      	movs	r2, #195	; 0xc3
   82444:	601a      	str	r2, [r3, #0]
												break;
   82446:	e076      	b.n	82536 <main+0x706>
												
												case 147:
												rc= 195;
   82448:	4b06      	ldr	r3, [pc, #24]	; (82464 <main+0x634>)
   8244a:	22c3      	movs	r2, #195	; 0xc3
   8244c:	601a      	str	r2, [r3, #0]
												bic_rc = 195;
   8244e:	4b0a      	ldr	r3, [pc, #40]	; (82478 <main+0x648>)
   82450:	22c3      	movs	r2, #195	; 0xc3
   82452:	601a      	str	r2, [r3, #0]
												break;
   82454:	e06f      	b.n	82536 <main+0x706>
												
												case 148:
												rc= 192;
   82456:	4b03      	ldr	r3, [pc, #12]	; (82464 <main+0x634>)
   82458:	22c0      	movs	r2, #192	; 0xc0
   8245a:	601a      	str	r2, [r3, #0]
												bic_rc = 192;
   8245c:	4b06      	ldr	r3, [pc, #24]	; (82478 <main+0x648>)
   8245e:	22c0      	movs	r2, #192	; 0xc0
   82460:	601a      	str	r2, [r3, #0]
												break;
   82462:	e068      	b.n	82536 <main+0x706>
   82464:	20070cd8 	.word	0x20070cd8
   82468:	000825bd 	.word	0x000825bd
   8246c:	20070400 	.word	0x20070400
   82470:	20070cd5 	.word	0x20070cd5
   82474:	20070d00 	.word	0x20070d00
   82478:	2007120c 	.word	0x2007120c
   8247c:	00082669 	.word	0x00082669
   82480:	20070d0c 	.word	0x20070d0c
   82484:	20070df0 	.word	0x20070df0
   82488:	20070c94 	.word	0x20070c94
   8248c:	20070cd4 	.word	0x20070cd4
   82490:	00082709 	.word	0x00082709
   82494:	20070cb0 	.word	0x20070cb0
   82498:	20070dca 	.word	0x20070dca
												
												case 149:
												rc= 192;
   8249c:	4b3a      	ldr	r3, [pc, #232]	; (82588 <main+0x758>)
   8249e:	22c0      	movs	r2, #192	; 0xc0
   824a0:	601a      	str	r2, [r3, #0]
												bic_rc = 192;
   824a2:	4b3a      	ldr	r3, [pc, #232]	; (8258c <main+0x75c>)
   824a4:	22c0      	movs	r2, #192	; 0xc0
   824a6:	601a      	str	r2, [r3, #0]
												break;
   824a8:	e045      	b.n	82536 <main+0x706>
												
												case 150:
												rc= 189;
   824aa:	4b37      	ldr	r3, [pc, #220]	; (82588 <main+0x758>)
   824ac:	22bd      	movs	r2, #189	; 0xbd
   824ae:	601a      	str	r2, [r3, #0]
												bic_rc = 189;
   824b0:	4b36      	ldr	r3, [pc, #216]	; (8258c <main+0x75c>)
   824b2:	22bd      	movs	r2, #189	; 0xbd
   824b4:	601a      	str	r2, [r3, #0]
												break;
   824b6:	e03e      	b.n	82536 <main+0x706>
												
												case 151:
												rc= 189;
   824b8:	4b33      	ldr	r3, [pc, #204]	; (82588 <main+0x758>)
   824ba:	22bd      	movs	r2, #189	; 0xbd
   824bc:	601a      	str	r2, [r3, #0]
												bic_rc = 189;
   824be:	4b33      	ldr	r3, [pc, #204]	; (8258c <main+0x75c>)
   824c0:	22bd      	movs	r2, #189	; 0xbd
   824c2:	601a      	str	r2, [r3, #0]
												break;
   824c4:	e037      	b.n	82536 <main+0x706>
												
												case 152:
												rc= 186;
   824c6:	4b30      	ldr	r3, [pc, #192]	; (82588 <main+0x758>)
   824c8:	22ba      	movs	r2, #186	; 0xba
   824ca:	601a      	str	r2, [r3, #0]
												bic_rc = 186;
   824cc:	4b2f      	ldr	r3, [pc, #188]	; (8258c <main+0x75c>)
   824ce:	22ba      	movs	r2, #186	; 0xba
   824d0:	601a      	str	r2, [r3, #0]
												break;
   824d2:	e030      	b.n	82536 <main+0x706>
												
												case 153:
												rc= 186;
   824d4:	4b2c      	ldr	r3, [pc, #176]	; (82588 <main+0x758>)
   824d6:	22ba      	movs	r2, #186	; 0xba
   824d8:	601a      	str	r2, [r3, #0]
												bic_rc = 186;
   824da:	4b2c      	ldr	r3, [pc, #176]	; (8258c <main+0x75c>)
   824dc:	22ba      	movs	r2, #186	; 0xba
   824de:	601a      	str	r2, [r3, #0]
												break;
   824e0:	e029      	b.n	82536 <main+0x706>
												
												case 154:
												rc= 183;
   824e2:	4b29      	ldr	r3, [pc, #164]	; (82588 <main+0x758>)
   824e4:	22b7      	movs	r2, #183	; 0xb7
   824e6:	601a      	str	r2, [r3, #0]
												bic_rc = 183;
   824e8:	4b28      	ldr	r3, [pc, #160]	; (8258c <main+0x75c>)
   824ea:	22b7      	movs	r2, #183	; 0xb7
   824ec:	601a      	str	r2, [r3, #0]
												break;	
   824ee:	e022      	b.n	82536 <main+0x706>
												case 155:
												rc= 183;
   824f0:	4b25      	ldr	r3, [pc, #148]	; (82588 <main+0x758>)
   824f2:	22b7      	movs	r2, #183	; 0xb7
   824f4:	601a      	str	r2, [r3, #0]
												bic_rc = 183;
   824f6:	4b25      	ldr	r3, [pc, #148]	; (8258c <main+0x75c>)
   824f8:	22b7      	movs	r2, #183	; 0xb7
   824fa:	601a      	str	r2, [r3, #0]
												break;
   824fc:	e01b      	b.n	82536 <main+0x706>
												
												case 156:
												rc= 180;
   824fe:	4b22      	ldr	r3, [pc, #136]	; (82588 <main+0x758>)
   82500:	22b4      	movs	r2, #180	; 0xb4
   82502:	601a      	str	r2, [r3, #0]
												bic_rc = 180;
   82504:	4b21      	ldr	r3, [pc, #132]	; (8258c <main+0x75c>)
   82506:	22b4      	movs	r2, #180	; 0xb4
   82508:	601a      	str	r2, [r3, #0]
												break;
   8250a:	e014      	b.n	82536 <main+0x706>
												
												case 157:
												rc= 180;
   8250c:	4b1e      	ldr	r3, [pc, #120]	; (82588 <main+0x758>)
   8250e:	22b4      	movs	r2, #180	; 0xb4
   82510:	601a      	str	r2, [r3, #0]
												bic_rc = 180;
   82512:	4b1e      	ldr	r3, [pc, #120]	; (8258c <main+0x75c>)
   82514:	22b4      	movs	r2, #180	; 0xb4
   82516:	601a      	str	r2, [r3, #0]
												break;
   82518:	e00d      	b.n	82536 <main+0x706>
												
												case 158:
												rc= 177;
   8251a:	4b1b      	ldr	r3, [pc, #108]	; (82588 <main+0x758>)
   8251c:	22b1      	movs	r2, #177	; 0xb1
   8251e:	601a      	str	r2, [r3, #0]
												bic_rc = 177;
   82520:	4b1a      	ldr	r3, [pc, #104]	; (8258c <main+0x75c>)
   82522:	22b1      	movs	r2, #177	; 0xb1
   82524:	601a      	str	r2, [r3, #0]
												break;
   82526:	e006      	b.n	82536 <main+0x706>
												
												case 159:
												rc= 177;
   82528:	4b17      	ldr	r3, [pc, #92]	; (82588 <main+0x758>)
   8252a:	22b1      	movs	r2, #177	; 0xb1
   8252c:	601a      	str	r2, [r3, #0]
												bic_rc = 177;
   8252e:	4b17      	ldr	r3, [pc, #92]	; (8258c <main+0x75c>)
   82530:	22b1      	movs	r2, #177	; 0xb1
   82532:	601a      	str	r2, [r3, #0]
												break;
   82534:	bf00      	nop
												
														
									}
						
							feedcount_flag = 1; // test - to be removed
   82536:	4b16      	ldr	r3, [pc, #88]	; (82590 <main+0x760>)
   82538:	2201      	movs	r2, #1
   8253a:	701a      	strb	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   8253c:	693b      	ldr	r3, [r7, #16]
   8253e:	221d      	movs	r2, #29
   82540:	2102      	movs	r1, #2
   82542:	4814      	ldr	r0, [pc, #80]	; (82594 <main+0x764>)
   82544:	4c14      	ldr	r4, [pc, #80]	; (82598 <main+0x768>)
   82546:	47a0      	blx	r4
								//rc=184;
								//bic_rc=184;
// 								rc=195;   //273, 205 = 4 rotations per sec, 164 = 5rps, 136 =6 rps, 195 = 4.2 rps
// 								bic_rc=195;   
						
								start_acidpump();
   82548:	4b14      	ldr	r3, [pc, #80]	; (8259c <main+0x76c>)
   8254a:	4798      	blx	r3
								start_bicarpump();
   8254c:	4b14      	ldr	r3, [pc, #80]	; (825a0 <main+0x770>)
   8254e:	4798      	blx	r3
								flag_nrmal=1;
   82550:	4b14      	ldr	r3, [pc, #80]	; (825a4 <main+0x774>)
   82552:	2201      	movs	r2, #1
   82554:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   82556:	4b14      	ldr	r3, [pc, #80]	; (825a8 <main+0x778>)
   82558:	2205      	movs	r2, #5
   8255a:	701a      	strb	r2, [r3, #0]
							break;
   8255c:	e009      	b.n	82572 <main+0x742>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   8255e:	4b13      	ldr	r3, [pc, #76]	; (825ac <main+0x77c>)
   82560:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   82562:	4b11      	ldr	r3, [pc, #68]	; (825a8 <main+0x778>)
   82564:	2205      	movs	r2, #5
   82566:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82568:	4b0e      	ldr	r3, [pc, #56]	; (825a4 <main+0x774>)
   8256a:	2200      	movs	r2, #0
   8256c:	701a      	strb	r2, [r3, #0]
							break;
   8256e:	e000      	b.n	82572 <main+0x742>
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   82570:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   82572:	4b0f      	ldr	r3, [pc, #60]	; (825b0 <main+0x780>)
   82574:	2200      	movs	r2, #0
   82576:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   82578:	4b0e      	ldr	r3, [pc, #56]	; (825b4 <main+0x784>)
   8257a:	2200      	movs	r2, #0
   8257c:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   8257e:	4b0e      	ldr	r3, [pc, #56]	; (825b8 <main+0x788>)
   82580:	2200      	movs	r2, #0
   82582:	601a      	str	r2, [r3, #0]
				break;
   82584:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   82586:	e4ef      	b.n	81f68 <main+0x138>
   82588:	20070cd8 	.word	0x20070cd8
   8258c:	2007120c 	.word	0x2007120c
   82590:	20070cdc 	.word	0x20070cdc
   82594:	40080000 	.word	0x40080000
   82598:	00081195 	.word	0x00081195
   8259c:	000825bd 	.word	0x000825bd
   825a0:	00082669 	.word	0x00082669
   825a4:	20070cd5 	.word	0x20070cd5
   825a8:	20070400 	.word	0x20070400
   825ac:	00082709 	.word	0x00082709
   825b0:	20070c94 	.word	0x20070c94
   825b4:	20070df0 	.word	0x20070df0
   825b8:	20070c8e 	.word	0x20070c8e

000825bc <start_acidpump>:
	}
	
void start_acidpump()
{
   825bc:	b598      	push	{r3, r4, r7, lr}
   825be:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   825c0:	4b1f      	ldr	r3, [pc, #124]	; (82640 <start_acidpump+0x84>)
   825c2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   825c6:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   825c8:	4b1e      	ldr	r3, [pc, #120]	; (82644 <start_acidpump+0x88>)
   825ca:	2203      	movs	r2, #3
   825cc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   825ce:	4b1e      	ldr	r3, [pc, #120]	; (82648 <start_acidpump+0x8c>)
   825d0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   825d4:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   825d6:	4b1b      	ldr	r3, [pc, #108]	; (82644 <start_acidpump+0x88>)
   825d8:	4a1c      	ldr	r2, [pc, #112]	; (8264c <start_acidpump+0x90>)
   825da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   825de:	4b1a      	ldr	r3, [pc, #104]	; (82648 <start_acidpump+0x8c>)
   825e0:	4a1a      	ldr	r2, [pc, #104]	; (8264c <start_acidpump+0x90>)
   825e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   825e6:	4b17      	ldr	r3, [pc, #92]	; (82644 <start_acidpump+0x88>)
   825e8:	2203      	movs	r2, #3
   825ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   825ee:	4b15      	ldr	r3, [pc, #84]	; (82644 <start_acidpump+0x88>)
   825f0:	220c      	movs	r2, #12
   825f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   825f6:	4b14      	ldr	r3, [pc, #80]	; (82648 <start_acidpump+0x8c>)
   825f8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   825fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   82600:	4b11      	ldr	r3, [pc, #68]	; (82648 <start_acidpump+0x8c>)
   82602:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82606:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   8260a:	4a0e      	ldr	r2, [pc, #56]	; (82644 <start_acidpump+0x88>)
   8260c:	4b10      	ldr	r3, [pc, #64]	; (82650 <start_acidpump+0x94>)
   8260e:	681b      	ldr	r3, [r3, #0]
   82610:	4910      	ldr	r1, [pc, #64]	; (82654 <start_acidpump+0x98>)
   82612:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82616:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   82618:	4a0b      	ldr	r2, [pc, #44]	; (82648 <start_acidpump+0x8c>)
   8261a:	4b0d      	ldr	r3, [pc, #52]	; (82650 <start_acidpump+0x94>)
   8261c:	681b      	ldr	r3, [r3, #0]
   8261e:	490d      	ldr	r1, [pc, #52]	; (82654 <start_acidpump+0x98>)
   82620:	00db      	lsls	r3, r3, #3
   82622:	440b      	add	r3, r1
   82624:	685b      	ldr	r3, [r3, #4]
   82626:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   82628:	2001      	movs	r0, #1
   8262a:	4b0b      	ldr	r3, [pc, #44]	; (82658 <start_acidpump+0x9c>)
   8262c:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   8262e:	4b0b      	ldr	r3, [pc, #44]	; (8265c <start_acidpump+0xa0>)
   82630:	681b      	ldr	r3, [r3, #0]
   82632:	221b      	movs	r2, #27
   82634:	2100      	movs	r1, #0
   82636:	480a      	ldr	r0, [pc, #40]	; (82660 <start_acidpump+0xa4>)
   82638:	4c0a      	ldr	r4, [pc, #40]	; (82664 <start_acidpump+0xa8>)
   8263a:	47a0      	blx	r4
}
   8263c:	bf00      	nop
   8263e:	bd98      	pop	{r3, r4, r7, pc}
   82640:	400e0e00 	.word	0x400e0e00
   82644:	400e1400 	.word	0x400e1400
   82648:	400e1200 	.word	0x400e1200
   8264c:	50494f00 	.word	0x50494f00
   82650:	20070ccc 	.word	0x20070ccc
   82654:	20070000 	.word	0x20070000
   82658:	00081279 	.word	0x00081279
   8265c:	20070cd8 	.word	0x20070cd8
   82660:	40080000 	.word	0x40080000
   82664:	000810b5 	.word	0x000810b5

00082668 <start_bicarpump>:

void start_bicarpump()
{
   82668:	b598      	push	{r3, r4, r7, lr}
   8266a:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   8266c:	4b1c      	ldr	r3, [pc, #112]	; (826e0 <start_bicarpump+0x78>)
   8266e:	4a1d      	ldr	r2, [pc, #116]	; (826e4 <start_bicarpump+0x7c>)
   82670:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   82674:	4b1c      	ldr	r3, [pc, #112]	; (826e8 <start_bicarpump+0x80>)
   82676:	4a1b      	ldr	r2, [pc, #108]	; (826e4 <start_bicarpump+0x7c>)
   82678:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   8267c:	4b18      	ldr	r3, [pc, #96]	; (826e0 <start_bicarpump+0x78>)
   8267e:	220c      	movs	r2, #12
   82680:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   82684:	4b16      	ldr	r3, [pc, #88]	; (826e0 <start_bicarpump+0x78>)
   82686:	2203      	movs	r2, #3
   82688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   8268c:	4b16      	ldr	r3, [pc, #88]	; (826e8 <start_bicarpump+0x80>)
   8268e:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82692:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   82696:	4b14      	ldr	r3, [pc, #80]	; (826e8 <start_bicarpump+0x80>)
   82698:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8269c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   826a0:	4b12      	ldr	r3, [pc, #72]	; (826ec <start_bicarpump+0x84>)
   826a2:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   826a6:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   826a8:	4a0d      	ldr	r2, [pc, #52]	; (826e0 <start_bicarpump+0x78>)
   826aa:	4b11      	ldr	r3, [pc, #68]	; (826f0 <start_bicarpump+0x88>)
   826ac:	681b      	ldr	r3, [r3, #0]
   826ae:	4911      	ldr	r1, [pc, #68]	; (826f4 <start_bicarpump+0x8c>)
   826b0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   826b4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   826b6:	4a0c      	ldr	r2, [pc, #48]	; (826e8 <start_bicarpump+0x80>)
   826b8:	4b0d      	ldr	r3, [pc, #52]	; (826f0 <start_bicarpump+0x88>)
   826ba:	681b      	ldr	r3, [r3, #0]
   826bc:	490d      	ldr	r1, [pc, #52]	; (826f4 <start_bicarpump+0x8c>)
   826be:	00db      	lsls	r3, r3, #3
   826c0:	440b      	add	r3, r1
   826c2:	685b      	ldr	r3, [r3, #4]
   826c4:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   826c6:	2002      	movs	r0, #2
   826c8:	4b0b      	ldr	r3, [pc, #44]	; (826f8 <start_bicarpump+0x90>)
   826ca:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   826cc:	4b0b      	ldr	r3, [pc, #44]	; (826fc <start_bicarpump+0x94>)
   826ce:	681b      	ldr	r3, [r3, #0]
   826d0:	221c      	movs	r2, #28
   826d2:	2101      	movs	r1, #1
   826d4:	480a      	ldr	r0, [pc, #40]	; (82700 <start_bicarpump+0x98>)
   826d6:	4c0b      	ldr	r4, [pc, #44]	; (82704 <start_bicarpump+0x9c>)
   826d8:	47a0      	blx	r4
}
   826da:	bf00      	nop
   826dc:	bd98      	pop	{r3, r4, r7, pc}
   826de:	bf00      	nop
   826e0:	400e1400 	.word	0x400e1400
   826e4:	50494f00 	.word	0x50494f00
   826e8:	400e1200 	.word	0x400e1200
   826ec:	400e1000 	.word	0x400e1000
   826f0:	20070cd0 	.word	0x20070cd0
   826f4:	20070200 	.word	0x20070200
   826f8:	00081279 	.word	0x00081279
   826fc:	2007120c 	.word	0x2007120c
   82700:	40080000 	.word	0x40080000
   82704:	00081125 	.word	0x00081125

00082708 <stop_pump>:

void stop_pump()
{
   82708:	b580      	push	{r7, lr}
   8270a:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   8270c:	2000      	movs	r0, #0
   8270e:	4b06      	ldr	r3, [pc, #24]	; (82728 <stop_pump+0x20>)
   82710:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82712:	2001      	movs	r0, #1
   82714:	4b04      	ldr	r3, [pc, #16]	; (82728 <stop_pump+0x20>)
   82716:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   82718:	2003      	movs	r0, #3
   8271a:	4b03      	ldr	r3, [pc, #12]	; (82728 <stop_pump+0x20>)
   8271c:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   8271e:	2004      	movs	r0, #4
   82720:	4b01      	ldr	r3, [pc, #4]	; (82728 <stop_pump+0x20>)
   82722:	4798      	blx	r3
}
   82724:	bf00      	nop
   82726:	bd80      	pop	{r7, pc}
   82728:	00081309 	.word	0x00081309

0008272c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   8272c:	b580      	push	{r7, lr}
   8272e:	b082      	sub	sp, #8
   82730:	af00      	add	r7, sp, #0
   82732:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82734:	687b      	ldr	r3, [r7, #4]
   82736:	2b07      	cmp	r3, #7
   82738:	d831      	bhi.n	8279e <osc_enable+0x72>
   8273a:	a201      	add	r2, pc, #4	; (adr r2, 82740 <osc_enable+0x14>)
   8273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82740:	0008279d 	.word	0x0008279d
   82744:	00082761 	.word	0x00082761
   82748:	00082769 	.word	0x00082769
   8274c:	00082771 	.word	0x00082771
   82750:	00082779 	.word	0x00082779
   82754:	00082781 	.word	0x00082781
   82758:	00082789 	.word	0x00082789
   8275c:	00082793 	.word	0x00082793
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82760:	2000      	movs	r0, #0
   82762:	4b11      	ldr	r3, [pc, #68]	; (827a8 <osc_enable+0x7c>)
   82764:	4798      	blx	r3
		break;
   82766:	e01a      	b.n	8279e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82768:	2001      	movs	r0, #1
   8276a:	4b0f      	ldr	r3, [pc, #60]	; (827a8 <osc_enable+0x7c>)
   8276c:	4798      	blx	r3
		break;
   8276e:	e016      	b.n	8279e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82770:	2000      	movs	r0, #0
   82772:	4b0e      	ldr	r3, [pc, #56]	; (827ac <osc_enable+0x80>)
   82774:	4798      	blx	r3
		break;
   82776:	e012      	b.n	8279e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82778:	2010      	movs	r0, #16
   8277a:	4b0c      	ldr	r3, [pc, #48]	; (827ac <osc_enable+0x80>)
   8277c:	4798      	blx	r3
		break;
   8277e:	e00e      	b.n	8279e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82780:	2020      	movs	r0, #32
   82782:	4b0a      	ldr	r3, [pc, #40]	; (827ac <osc_enable+0x80>)
   82784:	4798      	blx	r3
		break;
   82786:	e00a      	b.n	8279e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82788:	213e      	movs	r1, #62	; 0x3e
   8278a:	2000      	movs	r0, #0
   8278c:	4b08      	ldr	r3, [pc, #32]	; (827b0 <osc_enable+0x84>)
   8278e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82790:	e005      	b.n	8279e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82792:	213e      	movs	r1, #62	; 0x3e
   82794:	2001      	movs	r0, #1
   82796:	4b06      	ldr	r3, [pc, #24]	; (827b0 <osc_enable+0x84>)
   82798:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8279a:	e000      	b.n	8279e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   8279c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   8279e:	bf00      	nop
   827a0:	3708      	adds	r7, #8
   827a2:	46bd      	mov	sp, r7
   827a4:	bd80      	pop	{r7, pc}
   827a6:	bf00      	nop
   827a8:	000830d9 	.word	0x000830d9
   827ac:	00083145 	.word	0x00083145
   827b0:	000831e5 	.word	0x000831e5

000827b4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   827b4:	b580      	push	{r7, lr}
   827b6:	b082      	sub	sp, #8
   827b8:	af00      	add	r7, sp, #0
   827ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   827bc:	687b      	ldr	r3, [r7, #4]
   827be:	2b07      	cmp	r3, #7
   827c0:	d826      	bhi.n	82810 <osc_is_ready+0x5c>
   827c2:	a201      	add	r2, pc, #4	; (adr r2, 827c8 <osc_is_ready+0x14>)
   827c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   827c8:	000827e9 	.word	0x000827e9
   827cc:	000827ed 	.word	0x000827ed
   827d0:	000827ed 	.word	0x000827ed
   827d4:	000827ff 	.word	0x000827ff
   827d8:	000827ff 	.word	0x000827ff
   827dc:	000827ff 	.word	0x000827ff
   827e0:	000827ff 	.word	0x000827ff
   827e4:	000827ff 	.word	0x000827ff
	case OSC_SLCK_32K_RC:
		return 1;
   827e8:	2301      	movs	r3, #1
   827ea:	e012      	b.n	82812 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   827ec:	4b0b      	ldr	r3, [pc, #44]	; (8281c <osc_is_ready+0x68>)
   827ee:	4798      	blx	r3
   827f0:	4603      	mov	r3, r0
   827f2:	2b00      	cmp	r3, #0
   827f4:	bf14      	ite	ne
   827f6:	2301      	movne	r3, #1
   827f8:	2300      	moveq	r3, #0
   827fa:	b2db      	uxtb	r3, r3
   827fc:	e009      	b.n	82812 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   827fe:	4b08      	ldr	r3, [pc, #32]	; (82820 <osc_is_ready+0x6c>)
   82800:	4798      	blx	r3
   82802:	4603      	mov	r3, r0
   82804:	2b00      	cmp	r3, #0
   82806:	bf14      	ite	ne
   82808:	2301      	movne	r3, #1
   8280a:	2300      	moveq	r3, #0
   8280c:	b2db      	uxtb	r3, r3
   8280e:	e000      	b.n	82812 <osc_is_ready+0x5e>
	}

	return 0;
   82810:	2300      	movs	r3, #0
}
   82812:	4618      	mov	r0, r3
   82814:	3708      	adds	r7, #8
   82816:	46bd      	mov	sp, r7
   82818:	bd80      	pop	{r7, pc}
   8281a:	bf00      	nop
   8281c:	00083111 	.word	0x00083111
   82820:	0008325d 	.word	0x0008325d

00082824 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82824:	b480      	push	{r7}
   82826:	b083      	sub	sp, #12
   82828:	af00      	add	r7, sp, #0
   8282a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8282c:	687b      	ldr	r3, [r7, #4]
   8282e:	2b07      	cmp	r3, #7
   82830:	d825      	bhi.n	8287e <osc_get_rate+0x5a>
   82832:	a201      	add	r2, pc, #4	; (adr r2, 82838 <osc_get_rate+0x14>)
   82834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82838:	00082859 	.word	0x00082859
   8283c:	0008285f 	.word	0x0008285f
   82840:	00082865 	.word	0x00082865
   82844:	0008286b 	.word	0x0008286b
   82848:	0008286f 	.word	0x0008286f
   8284c:	00082873 	.word	0x00082873
   82850:	00082877 	.word	0x00082877
   82854:	0008287b 	.word	0x0008287b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82858:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8285c:	e010      	b.n	82880 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8285e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82862:	e00d      	b.n	82880 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82868:	e00a      	b.n	82880 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8286a:	4b08      	ldr	r3, [pc, #32]	; (8288c <osc_get_rate+0x68>)
   8286c:	e008      	b.n	82880 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8286e:	4b08      	ldr	r3, [pc, #32]	; (82890 <osc_get_rate+0x6c>)
   82870:	e006      	b.n	82880 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82872:	4b08      	ldr	r3, [pc, #32]	; (82894 <osc_get_rate+0x70>)
   82874:	e004      	b.n	82880 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82876:	4b07      	ldr	r3, [pc, #28]	; (82894 <osc_get_rate+0x70>)
   82878:	e002      	b.n	82880 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8287a:	4b06      	ldr	r3, [pc, #24]	; (82894 <osc_get_rate+0x70>)
   8287c:	e000      	b.n	82880 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8287e:	2300      	movs	r3, #0
}
   82880:	4618      	mov	r0, r3
   82882:	370c      	adds	r7, #12
   82884:	46bd      	mov	sp, r7
   82886:	bc80      	pop	{r7}
   82888:	4770      	bx	lr
   8288a:	bf00      	nop
   8288c:	003d0900 	.word	0x003d0900
   82890:	007a1200 	.word	0x007a1200
   82894:	00b71b00 	.word	0x00b71b00

00082898 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82898:	b580      	push	{r7, lr}
   8289a:	b082      	sub	sp, #8
   8289c:	af00      	add	r7, sp, #0
   8289e:	4603      	mov	r3, r0
   828a0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   828a2:	bf00      	nop
   828a4:	79fb      	ldrb	r3, [r7, #7]
   828a6:	4618      	mov	r0, r3
   828a8:	4b05      	ldr	r3, [pc, #20]	; (828c0 <osc_wait_ready+0x28>)
   828aa:	4798      	blx	r3
   828ac:	4603      	mov	r3, r0
   828ae:	f083 0301 	eor.w	r3, r3, #1
   828b2:	b2db      	uxtb	r3, r3
   828b4:	2b00      	cmp	r3, #0
   828b6:	d1f5      	bne.n	828a4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   828b8:	bf00      	nop
   828ba:	3708      	adds	r7, #8
   828bc:	46bd      	mov	sp, r7
   828be:	bd80      	pop	{r7, pc}
   828c0:	000827b5 	.word	0x000827b5

000828c4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   828c4:	b580      	push	{r7, lr}
   828c6:	b086      	sub	sp, #24
   828c8:	af00      	add	r7, sp, #0
   828ca:	60f8      	str	r0, [r7, #12]
   828cc:	607a      	str	r2, [r7, #4]
   828ce:	603b      	str	r3, [r7, #0]
   828d0:	460b      	mov	r3, r1
   828d2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   828d4:	687b      	ldr	r3, [r7, #4]
   828d6:	2b00      	cmp	r3, #0
   828d8:	d107      	bne.n	828ea <pll_config_init+0x26>
   828da:	683b      	ldr	r3, [r7, #0]
   828dc:	2b00      	cmp	r3, #0
   828de:	d104      	bne.n	828ea <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   828e0:	68fb      	ldr	r3, [r7, #12]
   828e2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   828e6:	601a      	str	r2, [r3, #0]
   828e8:	e019      	b.n	8291e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   828ea:	7afb      	ldrb	r3, [r7, #11]
   828ec:	4618      	mov	r0, r3
   828ee:	4b0e      	ldr	r3, [pc, #56]	; (82928 <pll_config_init+0x64>)
   828f0:	4798      	blx	r3
   828f2:	4602      	mov	r2, r0
   828f4:	687b      	ldr	r3, [r7, #4]
   828f6:	fbb2 f3f3 	udiv	r3, r2, r3
   828fa:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   828fc:	697b      	ldr	r3, [r7, #20]
   828fe:	683a      	ldr	r2, [r7, #0]
   82900:	fb02 f303 	mul.w	r3, r2, r3
   82904:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82906:	683b      	ldr	r3, [r7, #0]
   82908:	3b01      	subs	r3, #1
   8290a:	041a      	lsls	r2, r3, #16
   8290c:	4b07      	ldr	r3, [pc, #28]	; (8292c <pll_config_init+0x68>)
   8290e:	4013      	ands	r3, r2
   82910:	687a      	ldr	r2, [r7, #4]
   82912:	b2d2      	uxtb	r2, r2
   82914:	4313      	orrs	r3, r2
   82916:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8291a:	68fb      	ldr	r3, [r7, #12]
   8291c:	601a      	str	r2, [r3, #0]
	}
}
   8291e:	bf00      	nop
   82920:	3718      	adds	r7, #24
   82922:	46bd      	mov	sp, r7
   82924:	bd80      	pop	{r7, pc}
   82926:	bf00      	nop
   82928:	00082825 	.word	0x00082825
   8292c:	07ff0000 	.word	0x07ff0000

00082930 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82930:	b580      	push	{r7, lr}
   82932:	b082      	sub	sp, #8
   82934:	af00      	add	r7, sp, #0
   82936:	6078      	str	r0, [r7, #4]
   82938:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8293a:	683b      	ldr	r3, [r7, #0]
   8293c:	2b00      	cmp	r3, #0
   8293e:	d108      	bne.n	82952 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82940:	4b09      	ldr	r3, [pc, #36]	; (82968 <pll_enable+0x38>)
   82942:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82944:	4a09      	ldr	r2, [pc, #36]	; (8296c <pll_enable+0x3c>)
   82946:	687b      	ldr	r3, [r7, #4]
   82948:	681b      	ldr	r3, [r3, #0]
   8294a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8294e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82950:	e005      	b.n	8295e <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82952:	4a06      	ldr	r2, [pc, #24]	; (8296c <pll_enable+0x3c>)
   82954:	687b      	ldr	r3, [r7, #4]
   82956:	681b      	ldr	r3, [r3, #0]
   82958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8295c:	61d3      	str	r3, [r2, #28]
	}
}
   8295e:	bf00      	nop
   82960:	3708      	adds	r7, #8
   82962:	46bd      	mov	sp, r7
   82964:	bd80      	pop	{r7, pc}
   82966:	bf00      	nop
   82968:	00083275 	.word	0x00083275
   8296c:	400e0600 	.word	0x400e0600

00082970 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82970:	b580      	push	{r7, lr}
   82972:	b082      	sub	sp, #8
   82974:	af00      	add	r7, sp, #0
   82976:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82978:	687b      	ldr	r3, [r7, #4]
   8297a:	2b00      	cmp	r3, #0
   8297c:	d103      	bne.n	82986 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8297e:	4b05      	ldr	r3, [pc, #20]	; (82994 <pll_is_locked+0x24>)
   82980:	4798      	blx	r3
   82982:	4603      	mov	r3, r0
   82984:	e002      	b.n	8298c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82986:	4b04      	ldr	r3, [pc, #16]	; (82998 <pll_is_locked+0x28>)
   82988:	4798      	blx	r3
   8298a:	4603      	mov	r3, r0
	}
}
   8298c:	4618      	mov	r0, r3
   8298e:	3708      	adds	r7, #8
   82990:	46bd      	mov	sp, r7
   82992:	bd80      	pop	{r7, pc}
   82994:	0008328d 	.word	0x0008328d
   82998:	000832a5 	.word	0x000832a5

0008299c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8299c:	b580      	push	{r7, lr}
   8299e:	b082      	sub	sp, #8
   829a0:	af00      	add	r7, sp, #0
   829a2:	4603      	mov	r3, r0
   829a4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   829a6:	79fb      	ldrb	r3, [r7, #7]
   829a8:	3b03      	subs	r3, #3
   829aa:	2b04      	cmp	r3, #4
   829ac:	d808      	bhi.n	829c0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   829ae:	79fb      	ldrb	r3, [r7, #7]
   829b0:	4618      	mov	r0, r3
   829b2:	4b06      	ldr	r3, [pc, #24]	; (829cc <pll_enable_source+0x30>)
   829b4:	4798      	blx	r3
		osc_wait_ready(e_src);
   829b6:	79fb      	ldrb	r3, [r7, #7]
   829b8:	4618      	mov	r0, r3
   829ba:	4b05      	ldr	r3, [pc, #20]	; (829d0 <pll_enable_source+0x34>)
   829bc:	4798      	blx	r3
		break;
   829be:	e000      	b.n	829c2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   829c0:	bf00      	nop
	}
}
   829c2:	bf00      	nop
   829c4:	3708      	adds	r7, #8
   829c6:	46bd      	mov	sp, r7
   829c8:	bd80      	pop	{r7, pc}
   829ca:	bf00      	nop
   829cc:	0008272d 	.word	0x0008272d
   829d0:	00082899 	.word	0x00082899

000829d4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   829d4:	b580      	push	{r7, lr}
   829d6:	b082      	sub	sp, #8
   829d8:	af00      	add	r7, sp, #0
   829da:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   829dc:	bf00      	nop
   829de:	6878      	ldr	r0, [r7, #4]
   829e0:	4b04      	ldr	r3, [pc, #16]	; (829f4 <pll_wait_for_lock+0x20>)
   829e2:	4798      	blx	r3
   829e4:	4603      	mov	r3, r0
   829e6:	2b00      	cmp	r3, #0
   829e8:	d0f9      	beq.n	829de <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   829ea:	2300      	movs	r3, #0
}
   829ec:	4618      	mov	r0, r3
   829ee:	3708      	adds	r7, #8
   829f0:	46bd      	mov	sp, r7
   829f2:	bd80      	pop	{r7, pc}
   829f4:	00082971 	.word	0x00082971

000829f8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   829f8:	b580      	push	{r7, lr}
   829fa:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   829fc:	2006      	movs	r0, #6
   829fe:	4b04      	ldr	r3, [pc, #16]	; (82a10 <sysclk_get_main_hz+0x18>)
   82a00:	4798      	blx	r3
   82a02:	4602      	mov	r2, r0
   82a04:	4613      	mov	r3, r2
   82a06:	00db      	lsls	r3, r3, #3
   82a08:	1a9b      	subs	r3, r3, r2
   82a0a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82a0c:	4618      	mov	r0, r3
   82a0e:	bd80      	pop	{r7, pc}
   82a10:	00082825 	.word	0x00082825

00082a14 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82a14:	b580      	push	{r7, lr}
   82a16:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82a18:	4b02      	ldr	r3, [pc, #8]	; (82a24 <sysclk_get_cpu_hz+0x10>)
   82a1a:	4798      	blx	r3
   82a1c:	4603      	mov	r3, r0
   82a1e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82a20:	4618      	mov	r0, r3
   82a22:	bd80      	pop	{r7, pc}
   82a24:	000829f9 	.word	0x000829f9

00082a28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82a28:	b590      	push	{r4, r7, lr}
   82a2a:	b083      	sub	sp, #12
   82a2c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82a2e:	4b10      	ldr	r3, [pc, #64]	; (82a70 <sysclk_init+0x48>)
   82a30:	4798      	blx	r3
   82a32:	4603      	mov	r3, r0
   82a34:	4618      	mov	r0, r3
   82a36:	4b0f      	ldr	r3, [pc, #60]	; (82a74 <sysclk_init+0x4c>)
   82a38:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82a3a:	2006      	movs	r0, #6
   82a3c:	4b0e      	ldr	r3, [pc, #56]	; (82a78 <sysclk_init+0x50>)
   82a3e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82a40:	1d38      	adds	r0, r7, #4
   82a42:	230e      	movs	r3, #14
   82a44:	2201      	movs	r2, #1
   82a46:	2106      	movs	r1, #6
   82a48:	4c0c      	ldr	r4, [pc, #48]	; (82a7c <sysclk_init+0x54>)
   82a4a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82a4c:	1d3b      	adds	r3, r7, #4
   82a4e:	2100      	movs	r1, #0
   82a50:	4618      	mov	r0, r3
   82a52:	4b0b      	ldr	r3, [pc, #44]	; (82a80 <sysclk_init+0x58>)
   82a54:	4798      	blx	r3
		pll_wait_for_lock(0);
   82a56:	2000      	movs	r0, #0
   82a58:	4b0a      	ldr	r3, [pc, #40]	; (82a84 <sysclk_init+0x5c>)
   82a5a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82a5c:	2010      	movs	r0, #16
   82a5e:	4b0a      	ldr	r3, [pc, #40]	; (82a88 <sysclk_init+0x60>)
   82a60:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82a62:	4b0a      	ldr	r3, [pc, #40]	; (82a8c <sysclk_init+0x64>)
   82a64:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82a66:	bf00      	nop
   82a68:	370c      	adds	r7, #12
   82a6a:	46bd      	mov	sp, r7
   82a6c:	bd90      	pop	{r4, r7, pc}
   82a6e:	bf00      	nop
   82a70:	00082a15 	.word	0x00082a15
   82a74:	000835a9 	.word	0x000835a9
   82a78:	0008299d 	.word	0x0008299d
   82a7c:	000828c5 	.word	0x000828c5
   82a80:	00082931 	.word	0x00082931
   82a84:	000829d5 	.word	0x000829d5
   82a88:	00083059 	.word	0x00083059
   82a8c:	00083425 	.word	0x00083425

00082a90 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82a90:	b580      	push	{r7, lr}
   82a92:	b082      	sub	sp, #8
   82a94:	af00      	add	r7, sp, #0
   82a96:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82a98:	6878      	ldr	r0, [r7, #4]
   82a9a:	4b03      	ldr	r3, [pc, #12]	; (82aa8 <sysclk_enable_peripheral_clock+0x18>)
   82a9c:	4798      	blx	r3
}
   82a9e:	bf00      	nop
   82aa0:	3708      	adds	r7, #8
   82aa2:	46bd      	mov	sp, r7
   82aa4:	bd80      	pop	{r7, pc}
   82aa6:	bf00      	nop
   82aa8:	000832bd 	.word	0x000832bd

00082aac <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82aac:	b580      	push	{r7, lr}
   82aae:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82ab0:	200b      	movs	r0, #11
   82ab2:	4b06      	ldr	r3, [pc, #24]	; (82acc <ioport_init+0x20>)
   82ab4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82ab6:	200c      	movs	r0, #12
   82ab8:	4b04      	ldr	r3, [pc, #16]	; (82acc <ioport_init+0x20>)
   82aba:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   82abc:	200d      	movs	r0, #13
   82abe:	4b03      	ldr	r3, [pc, #12]	; (82acc <ioport_init+0x20>)
   82ac0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   82ac2:	200e      	movs	r0, #14
   82ac4:	4b01      	ldr	r3, [pc, #4]	; (82acc <ioport_init+0x20>)
   82ac6:	4798      	blx	r3
	arch_ioport_init();
}
   82ac8:	bf00      	nop
   82aca:	bd80      	pop	{r7, pc}
   82acc:	00082a91 	.word	0x00082a91

00082ad0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82ad0:	b580      	push	{r7, lr}
   82ad2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82ad4:	4b17      	ldr	r3, [pc, #92]	; (82b34 <board_init+0x64>)
   82ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82ada:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82adc:	4b16      	ldr	r3, [pc, #88]	; (82b38 <board_init+0x68>)
   82ade:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82ae0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82ae4:	203b      	movs	r0, #59	; 0x3b
   82ae6:	4b15      	ldr	r3, [pc, #84]	; (82b3c <board_init+0x6c>)
   82ae8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82aea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82aee:	2055      	movs	r0, #85	; 0x55
   82af0:	4b12      	ldr	r3, [pc, #72]	; (82b3c <board_init+0x6c>)
   82af2:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82af4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82af8:	2056      	movs	r0, #86	; 0x56
   82afa:	4b10      	ldr	r3, [pc, #64]	; (82b3c <board_init+0x6c>)
   82afc:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82afe:	4910      	ldr	r1, [pc, #64]	; (82b40 <board_init+0x70>)
   82b00:	2068      	movs	r0, #104	; 0x68
   82b02:	4b0e      	ldr	r3, [pc, #56]	; (82b3c <board_init+0x6c>)
   82b04:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82b06:	490f      	ldr	r1, [pc, #60]	; (82b44 <board_init+0x74>)
   82b08:	205c      	movs	r0, #92	; 0x5c
   82b0a:	4b0c      	ldr	r3, [pc, #48]	; (82b3c <board_init+0x6c>)
   82b0c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82b12:	f44f 7140 	mov.w	r1, #768	; 0x300
   82b16:	480c      	ldr	r0, [pc, #48]	; (82b48 <board_init+0x78>)
   82b18:	4b0c      	ldr	r3, [pc, #48]	; (82b4c <board_init+0x7c>)
   82b1a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82b1c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b20:	202b      	movs	r0, #43	; 0x2b
   82b22:	4b06      	ldr	r3, [pc, #24]	; (82b3c <board_init+0x6c>)
   82b24:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82b26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b2a:	202a      	movs	r0, #42	; 0x2a
   82b2c:	4b03      	ldr	r3, [pc, #12]	; (82b3c <board_init+0x6c>)
   82b2e:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82b30:	bf00      	nop
   82b32:	bd80      	pop	{r7, pc}
   82b34:	400e1a50 	.word	0x400e1a50
   82b38:	00082aad 	.word	0x00082aad
   82b3c:	00082d2d 	.word	0x00082d2d
   82b40:	28000079 	.word	0x28000079
   82b44:	28000001 	.word	0x28000001
   82b48:	400e0e00 	.word	0x400e0e00
   82b4c:	00082e69 	.word	0x00082e69

00082b50 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82b50:	b480      	push	{r7}
   82b52:	b085      	sub	sp, #20
   82b54:	af00      	add	r7, sp, #0
   82b56:	60f8      	str	r0, [r7, #12]
   82b58:	60b9      	str	r1, [r7, #8]
   82b5a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82b5c:	687b      	ldr	r3, [r7, #4]
   82b5e:	2b00      	cmp	r3, #0
   82b60:	d003      	beq.n	82b6a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82b62:	68fb      	ldr	r3, [r7, #12]
   82b64:	68ba      	ldr	r2, [r7, #8]
   82b66:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82b68:	e002      	b.n	82b70 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82b6a:	68fb      	ldr	r3, [r7, #12]
   82b6c:	68ba      	ldr	r2, [r7, #8]
   82b6e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82b70:	bf00      	nop
   82b72:	3714      	adds	r7, #20
   82b74:	46bd      	mov	sp, r7
   82b76:	bc80      	pop	{r7}
   82b78:	4770      	bx	lr
   82b7a:	bf00      	nop

00082b7c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82b7c:	b480      	push	{r7}
   82b7e:	b087      	sub	sp, #28
   82b80:	af00      	add	r7, sp, #0
   82b82:	60f8      	str	r0, [r7, #12]
   82b84:	60b9      	str	r1, [r7, #8]
   82b86:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82b88:	68fb      	ldr	r3, [r7, #12]
   82b8a:	687a      	ldr	r2, [r7, #4]
   82b8c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82b8e:	68bb      	ldr	r3, [r7, #8]
   82b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b94:	d01f      	beq.n	82bd6 <pio_set_peripheral+0x5a>
   82b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82b9a:	d805      	bhi.n	82ba8 <pio_set_peripheral+0x2c>
   82b9c:	2b00      	cmp	r3, #0
   82b9e:	d027      	beq.n	82bf0 <pio_set_peripheral+0x74>
   82ba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82ba4:	d00a      	beq.n	82bbc <pio_set_peripheral+0x40>
   82ba6:	e01f      	b.n	82be8 <pio_set_peripheral+0x6c>
   82ba8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82bac:	d020      	beq.n	82bf0 <pio_set_peripheral+0x74>
   82bae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82bb2:	d01d      	beq.n	82bf0 <pio_set_peripheral+0x74>
   82bb4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82bb8:	d01a      	beq.n	82bf0 <pio_set_peripheral+0x74>
   82bba:	e015      	b.n	82be8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82bbc:	68fb      	ldr	r3, [r7, #12]
   82bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82bc0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82bc2:	68fb      	ldr	r3, [r7, #12]
   82bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82bc6:	687b      	ldr	r3, [r7, #4]
   82bc8:	43d9      	mvns	r1, r3
   82bca:	697b      	ldr	r3, [r7, #20]
   82bcc:	400b      	ands	r3, r1
   82bce:	401a      	ands	r2, r3
   82bd0:	68fb      	ldr	r3, [r7, #12]
   82bd2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82bd4:	e008      	b.n	82be8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82bd6:	68fb      	ldr	r3, [r7, #12]
   82bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82bda:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82bdc:	687a      	ldr	r2, [r7, #4]
   82bde:	697b      	ldr	r3, [r7, #20]
   82be0:	431a      	orrs	r2, r3
   82be2:	68fb      	ldr	r3, [r7, #12]
   82be4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82be6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82be8:	68fb      	ldr	r3, [r7, #12]
   82bea:	687a      	ldr	r2, [r7, #4]
   82bec:	605a      	str	r2, [r3, #4]
   82bee:	e000      	b.n	82bf2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82bf0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82bf2:	371c      	adds	r7, #28
   82bf4:	46bd      	mov	sp, r7
   82bf6:	bc80      	pop	{r7}
   82bf8:	4770      	bx	lr
   82bfa:	bf00      	nop

00082bfc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82bfc:	b580      	push	{r7, lr}
   82bfe:	b084      	sub	sp, #16
   82c00:	af00      	add	r7, sp, #0
   82c02:	60f8      	str	r0, [r7, #12]
   82c04:	60b9      	str	r1, [r7, #8]
   82c06:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82c08:	68b9      	ldr	r1, [r7, #8]
   82c0a:	68f8      	ldr	r0, [r7, #12]
   82c0c:	4b19      	ldr	r3, [pc, #100]	; (82c74 <pio_set_input+0x78>)
   82c0e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82c10:	687b      	ldr	r3, [r7, #4]
   82c12:	f003 0301 	and.w	r3, r3, #1
   82c16:	461a      	mov	r2, r3
   82c18:	68b9      	ldr	r1, [r7, #8]
   82c1a:	68f8      	ldr	r0, [r7, #12]
   82c1c:	4b16      	ldr	r3, [pc, #88]	; (82c78 <pio_set_input+0x7c>)
   82c1e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82c20:	687b      	ldr	r3, [r7, #4]
   82c22:	f003 030a 	and.w	r3, r3, #10
   82c26:	2b00      	cmp	r3, #0
   82c28:	d003      	beq.n	82c32 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	68ba      	ldr	r2, [r7, #8]
   82c2e:	621a      	str	r2, [r3, #32]
   82c30:	e002      	b.n	82c38 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82c32:	68fb      	ldr	r3, [r7, #12]
   82c34:	68ba      	ldr	r2, [r7, #8]
   82c36:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82c38:	687b      	ldr	r3, [r7, #4]
   82c3a:	f003 0302 	and.w	r3, r3, #2
   82c3e:	2b00      	cmp	r3, #0
   82c40:	d004      	beq.n	82c4c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82c42:	68fb      	ldr	r3, [r7, #12]
   82c44:	68ba      	ldr	r2, [r7, #8]
   82c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82c4a:	e008      	b.n	82c5e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82c4c:	687b      	ldr	r3, [r7, #4]
   82c4e:	f003 0308 	and.w	r3, r3, #8
   82c52:	2b00      	cmp	r3, #0
   82c54:	d003      	beq.n	82c5e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82c56:	68fb      	ldr	r3, [r7, #12]
   82c58:	68ba      	ldr	r2, [r7, #8]
   82c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82c5e:	68fb      	ldr	r3, [r7, #12]
   82c60:	68ba      	ldr	r2, [r7, #8]
   82c62:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82c64:	68fb      	ldr	r3, [r7, #12]
   82c66:	68ba      	ldr	r2, [r7, #8]
   82c68:	601a      	str	r2, [r3, #0]
}
   82c6a:	bf00      	nop
   82c6c:	3710      	adds	r7, #16
   82c6e:	46bd      	mov	sp, r7
   82c70:	bd80      	pop	{r7, pc}
   82c72:	bf00      	nop
   82c74:	00082ce1 	.word	0x00082ce1
   82c78:	00082b51 	.word	0x00082b51

00082c7c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82c7c:	b580      	push	{r7, lr}
   82c7e:	b084      	sub	sp, #16
   82c80:	af00      	add	r7, sp, #0
   82c82:	60f8      	str	r0, [r7, #12]
   82c84:	60b9      	str	r1, [r7, #8]
   82c86:	607a      	str	r2, [r7, #4]
   82c88:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82c8a:	68b9      	ldr	r1, [r7, #8]
   82c8c:	68f8      	ldr	r0, [r7, #12]
   82c8e:	4b12      	ldr	r3, [pc, #72]	; (82cd8 <pio_set_output+0x5c>)
   82c90:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82c92:	69ba      	ldr	r2, [r7, #24]
   82c94:	68b9      	ldr	r1, [r7, #8]
   82c96:	68f8      	ldr	r0, [r7, #12]
   82c98:	4b10      	ldr	r3, [pc, #64]	; (82cdc <pio_set_output+0x60>)
   82c9a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82c9c:	683b      	ldr	r3, [r7, #0]
   82c9e:	2b00      	cmp	r3, #0
   82ca0:	d003      	beq.n	82caa <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82ca2:	68fb      	ldr	r3, [r7, #12]
   82ca4:	68ba      	ldr	r2, [r7, #8]
   82ca6:	651a      	str	r2, [r3, #80]	; 0x50
   82ca8:	e002      	b.n	82cb0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82caa:	68fb      	ldr	r3, [r7, #12]
   82cac:	68ba      	ldr	r2, [r7, #8]
   82cae:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82cb0:	687b      	ldr	r3, [r7, #4]
   82cb2:	2b00      	cmp	r3, #0
   82cb4:	d003      	beq.n	82cbe <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82cb6:	68fb      	ldr	r3, [r7, #12]
   82cb8:	68ba      	ldr	r2, [r7, #8]
   82cba:	631a      	str	r2, [r3, #48]	; 0x30
   82cbc:	e002      	b.n	82cc4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82cbe:	68fb      	ldr	r3, [r7, #12]
   82cc0:	68ba      	ldr	r2, [r7, #8]
   82cc2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82cc4:	68fb      	ldr	r3, [r7, #12]
   82cc6:	68ba      	ldr	r2, [r7, #8]
   82cc8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82cca:	68fb      	ldr	r3, [r7, #12]
   82ccc:	68ba      	ldr	r2, [r7, #8]
   82cce:	601a      	str	r2, [r3, #0]
}
   82cd0:	bf00      	nop
   82cd2:	3710      	adds	r7, #16
   82cd4:	46bd      	mov	sp, r7
   82cd6:	bd80      	pop	{r7, pc}
   82cd8:	00082ce1 	.word	0x00082ce1
   82cdc:	00082b51 	.word	0x00082b51

00082ce0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   82ce0:	b480      	push	{r7}
   82ce2:	b083      	sub	sp, #12
   82ce4:	af00      	add	r7, sp, #0
   82ce6:	6078      	str	r0, [r7, #4]
   82ce8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82cea:	687b      	ldr	r3, [r7, #4]
   82cec:	683a      	ldr	r2, [r7, #0]
   82cee:	645a      	str	r2, [r3, #68]	; 0x44
}
   82cf0:	bf00      	nop
   82cf2:	370c      	adds	r7, #12
   82cf4:	46bd      	mov	sp, r7
   82cf6:	bc80      	pop	{r7}
   82cf8:	4770      	bx	lr
   82cfa:	bf00      	nop

00082cfc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82cfc:	b480      	push	{r7}
   82cfe:	b083      	sub	sp, #12
   82d00:	af00      	add	r7, sp, #0
   82d02:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82d04:	687b      	ldr	r3, [r7, #4]
   82d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82d08:	4618      	mov	r0, r3
   82d0a:	370c      	adds	r7, #12
   82d0c:	46bd      	mov	sp, r7
   82d0e:	bc80      	pop	{r7}
   82d10:	4770      	bx	lr
   82d12:	bf00      	nop

00082d14 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82d14:	b480      	push	{r7}
   82d16:	b083      	sub	sp, #12
   82d18:	af00      	add	r7, sp, #0
   82d1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82d1c:	687b      	ldr	r3, [r7, #4]
   82d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82d20:	4618      	mov	r0, r3
   82d22:	370c      	adds	r7, #12
   82d24:	46bd      	mov	sp, r7
   82d26:	bc80      	pop	{r7}
   82d28:	4770      	bx	lr
   82d2a:	bf00      	nop

00082d2c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82d2c:	b590      	push	{r4, r7, lr}
   82d2e:	b087      	sub	sp, #28
   82d30:	af02      	add	r7, sp, #8
   82d32:	6078      	str	r0, [r7, #4]
   82d34:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82d36:	687b      	ldr	r3, [r7, #4]
   82d38:	095b      	lsrs	r3, r3, #5
   82d3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82d3e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82d42:	025b      	lsls	r3, r3, #9
   82d44:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82d46:	683b      	ldr	r3, [r7, #0]
   82d48:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82d4c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d50:	d046      	beq.n	82de0 <pio_configure_pin+0xb4>
   82d52:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d56:	d806      	bhi.n	82d66 <pio_configure_pin+0x3a>
   82d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82d5c:	d00a      	beq.n	82d74 <pio_configure_pin+0x48>
   82d5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82d62:	d022      	beq.n	82daa <pio_configure_pin+0x7e>
   82d64:	e070      	b.n	82e48 <pio_configure_pin+0x11c>
   82d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d6a:	d045      	beq.n	82df8 <pio_configure_pin+0xcc>
   82d6c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d70:	d042      	beq.n	82df8 <pio_configure_pin+0xcc>
   82d72:	e069      	b.n	82e48 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82d74:	687b      	ldr	r3, [r7, #4]
   82d76:	f003 031f 	and.w	r3, r3, #31
   82d7a:	2201      	movs	r2, #1
   82d7c:	fa02 f303 	lsl.w	r3, r2, r3
   82d80:	461a      	mov	r2, r3
   82d82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d86:	68f8      	ldr	r0, [r7, #12]
   82d88:	4b33      	ldr	r3, [pc, #204]	; (82e58 <pio_configure_pin+0x12c>)
   82d8a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82d8c:	687b      	ldr	r3, [r7, #4]
   82d8e:	f003 031f 	and.w	r3, r3, #31
   82d92:	2201      	movs	r2, #1
   82d94:	fa02 f303 	lsl.w	r3, r2, r3
   82d98:	4619      	mov	r1, r3
   82d9a:	683b      	ldr	r3, [r7, #0]
   82d9c:	f003 0301 	and.w	r3, r3, #1
   82da0:	461a      	mov	r2, r3
   82da2:	68f8      	ldr	r0, [r7, #12]
   82da4:	4b2d      	ldr	r3, [pc, #180]	; (82e5c <pio_configure_pin+0x130>)
   82da6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82da8:	e050      	b.n	82e4c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82daa:	687b      	ldr	r3, [r7, #4]
   82dac:	f003 031f 	and.w	r3, r3, #31
   82db0:	2201      	movs	r2, #1
   82db2:	fa02 f303 	lsl.w	r3, r2, r3
   82db6:	461a      	mov	r2, r3
   82db8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82dbc:	68f8      	ldr	r0, [r7, #12]
   82dbe:	4b26      	ldr	r3, [pc, #152]	; (82e58 <pio_configure_pin+0x12c>)
   82dc0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82dc2:	687b      	ldr	r3, [r7, #4]
   82dc4:	f003 031f 	and.w	r3, r3, #31
   82dc8:	2201      	movs	r2, #1
   82dca:	fa02 f303 	lsl.w	r3, r2, r3
   82dce:	4619      	mov	r1, r3
   82dd0:	683b      	ldr	r3, [r7, #0]
   82dd2:	f003 0301 	and.w	r3, r3, #1
   82dd6:	461a      	mov	r2, r3
   82dd8:	68f8      	ldr	r0, [r7, #12]
   82dda:	4b20      	ldr	r3, [pc, #128]	; (82e5c <pio_configure_pin+0x130>)
   82ddc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82dde:	e035      	b.n	82e4c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82de0:	687b      	ldr	r3, [r7, #4]
   82de2:	f003 031f 	and.w	r3, r3, #31
   82de6:	2201      	movs	r2, #1
   82de8:	fa02 f303 	lsl.w	r3, r2, r3
   82dec:	683a      	ldr	r2, [r7, #0]
   82dee:	4619      	mov	r1, r3
   82df0:	68f8      	ldr	r0, [r7, #12]
   82df2:	4b1b      	ldr	r3, [pc, #108]	; (82e60 <pio_configure_pin+0x134>)
   82df4:	4798      	blx	r3
		break;
   82df6:	e029      	b.n	82e4c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82df8:	687b      	ldr	r3, [r7, #4]
   82dfa:	f003 031f 	and.w	r3, r3, #31
   82dfe:	2201      	movs	r2, #1
   82e00:	fa02 f303 	lsl.w	r3, r2, r3
   82e04:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82e06:	683b      	ldr	r3, [r7, #0]
   82e08:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e10:	bf0c      	ite	eq
   82e12:	2301      	moveq	r3, #1
   82e14:	2300      	movne	r3, #0
   82e16:	b2db      	uxtb	r3, r3
   82e18:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82e1a:	683b      	ldr	r3, [r7, #0]
   82e1c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e20:	2b00      	cmp	r3, #0
   82e22:	bf14      	ite	ne
   82e24:	2301      	movne	r3, #1
   82e26:	2300      	moveq	r3, #0
   82e28:	b2db      	uxtb	r3, r3
   82e2a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82e2c:	683b      	ldr	r3, [r7, #0]
   82e2e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82e32:	2b00      	cmp	r3, #0
   82e34:	bf14      	ite	ne
   82e36:	2301      	movne	r3, #1
   82e38:	2300      	moveq	r3, #0
   82e3a:	b2db      	uxtb	r3, r3
   82e3c:	9300      	str	r3, [sp, #0]
   82e3e:	4603      	mov	r3, r0
   82e40:	68f8      	ldr	r0, [r7, #12]
   82e42:	4c08      	ldr	r4, [pc, #32]	; (82e64 <pio_configure_pin+0x138>)
   82e44:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82e46:	e001      	b.n	82e4c <pio_configure_pin+0x120>

	default:
		return 0;
   82e48:	2300      	movs	r3, #0
   82e4a:	e000      	b.n	82e4e <pio_configure_pin+0x122>
	}

	return 1;
   82e4c:	2301      	movs	r3, #1
}
   82e4e:	4618      	mov	r0, r3
   82e50:	3714      	adds	r7, #20
   82e52:	46bd      	mov	sp, r7
   82e54:	bd90      	pop	{r4, r7, pc}
   82e56:	bf00      	nop
   82e58:	00082b7d 	.word	0x00082b7d
   82e5c:	00082b51 	.word	0x00082b51
   82e60:	00082bfd 	.word	0x00082bfd
   82e64:	00082c7d 	.word	0x00082c7d

00082e68 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82e68:	b590      	push	{r4, r7, lr}
   82e6a:	b087      	sub	sp, #28
   82e6c:	af02      	add	r7, sp, #8
   82e6e:	60f8      	str	r0, [r7, #12]
   82e70:	60b9      	str	r1, [r7, #8]
   82e72:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82e74:	687b      	ldr	r3, [r7, #4]
   82e76:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82e7a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e7e:	d02e      	beq.n	82ede <pio_configure_pin_group+0x76>
   82e80:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82e84:	d806      	bhi.n	82e94 <pio_configure_pin_group+0x2c>
   82e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82e8a:	d00a      	beq.n	82ea2 <pio_configure_pin_group+0x3a>
   82e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82e90:	d016      	beq.n	82ec0 <pio_configure_pin_group+0x58>
   82e92:	e04c      	b.n	82f2e <pio_configure_pin_group+0xc6>
   82e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82e98:	d027      	beq.n	82eea <pio_configure_pin_group+0x82>
   82e9a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e9e:	d024      	beq.n	82eea <pio_configure_pin_group+0x82>
   82ea0:	e045      	b.n	82f2e <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82ea2:	68ba      	ldr	r2, [r7, #8]
   82ea4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ea8:	68f8      	ldr	r0, [r7, #12]
   82eaa:	4b24      	ldr	r3, [pc, #144]	; (82f3c <pio_configure_pin_group+0xd4>)
   82eac:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82eae:	687b      	ldr	r3, [r7, #4]
   82eb0:	f003 0301 	and.w	r3, r3, #1
   82eb4:	461a      	mov	r2, r3
   82eb6:	68b9      	ldr	r1, [r7, #8]
   82eb8:	68f8      	ldr	r0, [r7, #12]
   82eba:	4b21      	ldr	r3, [pc, #132]	; (82f40 <pio_configure_pin_group+0xd8>)
   82ebc:	4798      	blx	r3
		break;
   82ebe:	e038      	b.n	82f32 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82ec0:	68ba      	ldr	r2, [r7, #8]
   82ec2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82ec6:	68f8      	ldr	r0, [r7, #12]
   82ec8:	4b1c      	ldr	r3, [pc, #112]	; (82f3c <pio_configure_pin_group+0xd4>)
   82eca:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82ecc:	687b      	ldr	r3, [r7, #4]
   82ece:	f003 0301 	and.w	r3, r3, #1
   82ed2:	461a      	mov	r2, r3
   82ed4:	68b9      	ldr	r1, [r7, #8]
   82ed6:	68f8      	ldr	r0, [r7, #12]
   82ed8:	4b19      	ldr	r3, [pc, #100]	; (82f40 <pio_configure_pin_group+0xd8>)
   82eda:	4798      	blx	r3
		break;
   82edc:	e029      	b.n	82f32 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82ede:	687a      	ldr	r2, [r7, #4]
   82ee0:	68b9      	ldr	r1, [r7, #8]
   82ee2:	68f8      	ldr	r0, [r7, #12]
   82ee4:	4b17      	ldr	r3, [pc, #92]	; (82f44 <pio_configure_pin_group+0xdc>)
   82ee6:	4798      	blx	r3
		break;
   82ee8:	e023      	b.n	82f32 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82eea:	687b      	ldr	r3, [r7, #4]
   82eec:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82ef0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82ef4:	bf0c      	ite	eq
   82ef6:	2301      	moveq	r3, #1
   82ef8:	2300      	movne	r3, #0
   82efa:	b2db      	uxtb	r3, r3
   82efc:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82efe:	687b      	ldr	r3, [r7, #4]
   82f00:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82f04:	2b00      	cmp	r3, #0
   82f06:	bf14      	ite	ne
   82f08:	2301      	movne	r3, #1
   82f0a:	2300      	moveq	r3, #0
   82f0c:	b2db      	uxtb	r3, r3
   82f0e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82f10:	687b      	ldr	r3, [r7, #4]
   82f12:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82f16:	2b00      	cmp	r3, #0
   82f18:	bf14      	ite	ne
   82f1a:	2301      	movne	r3, #1
   82f1c:	2300      	moveq	r3, #0
   82f1e:	b2db      	uxtb	r3, r3
   82f20:	9300      	str	r3, [sp, #0]
   82f22:	460b      	mov	r3, r1
   82f24:	68b9      	ldr	r1, [r7, #8]
   82f26:	68f8      	ldr	r0, [r7, #12]
   82f28:	4c07      	ldr	r4, [pc, #28]	; (82f48 <pio_configure_pin_group+0xe0>)
   82f2a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82f2c:	e001      	b.n	82f32 <pio_configure_pin_group+0xca>

	default:
		return 0;
   82f2e:	2300      	movs	r3, #0
   82f30:	e000      	b.n	82f34 <pio_configure_pin_group+0xcc>
	}

	return 1;
   82f32:	2301      	movs	r3, #1
}
   82f34:	4618      	mov	r0, r3
   82f36:	3714      	adds	r7, #20
   82f38:	46bd      	mov	sp, r7
   82f3a:	bd90      	pop	{r4, r7, pc}
   82f3c:	00082b7d 	.word	0x00082b7d
   82f40:	00082b51 	.word	0x00082b51
   82f44:	00082bfd 	.word	0x00082bfd
   82f48:	00082c7d 	.word	0x00082c7d

00082f4c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82f4c:	b580      	push	{r7, lr}
   82f4e:	b084      	sub	sp, #16
   82f50:	af00      	add	r7, sp, #0
   82f52:	6078      	str	r0, [r7, #4]
   82f54:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82f56:	6878      	ldr	r0, [r7, #4]
   82f58:	4b24      	ldr	r3, [pc, #144]	; (82fec <pio_handler_process+0xa0>)
   82f5a:	4798      	blx	r3
   82f5c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82f5e:	6878      	ldr	r0, [r7, #4]
   82f60:	4b23      	ldr	r3, [pc, #140]	; (82ff0 <pio_handler_process+0xa4>)
   82f62:	4798      	blx	r3
   82f64:	4602      	mov	r2, r0
   82f66:	68fb      	ldr	r3, [r7, #12]
   82f68:	4013      	ands	r3, r2
   82f6a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82f6c:	68fb      	ldr	r3, [r7, #12]
   82f6e:	2b00      	cmp	r3, #0
   82f70:	d037      	beq.n	82fe2 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   82f72:	2300      	movs	r3, #0
   82f74:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82f76:	e031      	b.n	82fdc <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82f78:	4a1e      	ldr	r2, [pc, #120]	; (82ff4 <pio_handler_process+0xa8>)
   82f7a:	68bb      	ldr	r3, [r7, #8]
   82f7c:	011b      	lsls	r3, r3, #4
   82f7e:	4413      	add	r3, r2
   82f80:	681a      	ldr	r2, [r3, #0]
   82f82:	683b      	ldr	r3, [r7, #0]
   82f84:	429a      	cmp	r2, r3
   82f86:	d126      	bne.n	82fd6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82f88:	4a1a      	ldr	r2, [pc, #104]	; (82ff4 <pio_handler_process+0xa8>)
   82f8a:	68bb      	ldr	r3, [r7, #8]
   82f8c:	011b      	lsls	r3, r3, #4
   82f8e:	4413      	add	r3, r2
   82f90:	3304      	adds	r3, #4
   82f92:	681a      	ldr	r2, [r3, #0]
   82f94:	68fb      	ldr	r3, [r7, #12]
   82f96:	4013      	ands	r3, r2
   82f98:	2b00      	cmp	r3, #0
   82f9a:	d01c      	beq.n	82fd6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82f9c:	4a15      	ldr	r2, [pc, #84]	; (82ff4 <pio_handler_process+0xa8>)
   82f9e:	68bb      	ldr	r3, [r7, #8]
   82fa0:	011b      	lsls	r3, r3, #4
   82fa2:	4413      	add	r3, r2
   82fa4:	330c      	adds	r3, #12
   82fa6:	681b      	ldr	r3, [r3, #0]
   82fa8:	4912      	ldr	r1, [pc, #72]	; (82ff4 <pio_handler_process+0xa8>)
   82faa:	68ba      	ldr	r2, [r7, #8]
   82fac:	0112      	lsls	r2, r2, #4
   82fae:	440a      	add	r2, r1
   82fb0:	6810      	ldr	r0, [r2, #0]
   82fb2:	4910      	ldr	r1, [pc, #64]	; (82ff4 <pio_handler_process+0xa8>)
   82fb4:	68ba      	ldr	r2, [r7, #8]
   82fb6:	0112      	lsls	r2, r2, #4
   82fb8:	440a      	add	r2, r1
   82fba:	3204      	adds	r2, #4
   82fbc:	6812      	ldr	r2, [r2, #0]
   82fbe:	4611      	mov	r1, r2
   82fc0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82fc2:	4a0c      	ldr	r2, [pc, #48]	; (82ff4 <pio_handler_process+0xa8>)
   82fc4:	68bb      	ldr	r3, [r7, #8]
   82fc6:	011b      	lsls	r3, r3, #4
   82fc8:	4413      	add	r3, r2
   82fca:	3304      	adds	r3, #4
   82fcc:	681b      	ldr	r3, [r3, #0]
   82fce:	43db      	mvns	r3, r3
   82fd0:	68fa      	ldr	r2, [r7, #12]
   82fd2:	4013      	ands	r3, r2
   82fd4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82fd6:	68bb      	ldr	r3, [r7, #8]
   82fd8:	3301      	adds	r3, #1
   82fda:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82fdc:	68fb      	ldr	r3, [r7, #12]
   82fde:	2b00      	cmp	r3, #0
   82fe0:	d1ca      	bne.n	82f78 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82fe2:	bf00      	nop
   82fe4:	3710      	adds	r7, #16
   82fe6:	46bd      	mov	sp, r7
   82fe8:	bd80      	pop	{r7, pc}
   82fea:	bf00      	nop
   82fec:	00082cfd 	.word	0x00082cfd
   82ff0:	00082d15 	.word	0x00082d15
   82ff4:	20070d14 	.word	0x20070d14

00082ff8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82ff8:	b580      	push	{r7, lr}
   82ffa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82ffc:	210b      	movs	r1, #11
   82ffe:	4802      	ldr	r0, [pc, #8]	; (83008 <PIOA_Handler+0x10>)
   83000:	4b02      	ldr	r3, [pc, #8]	; (8300c <PIOA_Handler+0x14>)
   83002:	4798      	blx	r3
}
   83004:	bf00      	nop
   83006:	bd80      	pop	{r7, pc}
   83008:	400e0e00 	.word	0x400e0e00
   8300c:	00082f4d 	.word	0x00082f4d

00083010 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83010:	b580      	push	{r7, lr}
   83012:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   83014:	210c      	movs	r1, #12
   83016:	4802      	ldr	r0, [pc, #8]	; (83020 <PIOB_Handler+0x10>)
   83018:	4b02      	ldr	r3, [pc, #8]	; (83024 <PIOB_Handler+0x14>)
   8301a:	4798      	blx	r3
}
   8301c:	bf00      	nop
   8301e:	bd80      	pop	{r7, pc}
   83020:	400e1000 	.word	0x400e1000
   83024:	00082f4d 	.word	0x00082f4d

00083028 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83028:	b580      	push	{r7, lr}
   8302a:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   8302c:	210d      	movs	r1, #13
   8302e:	4802      	ldr	r0, [pc, #8]	; (83038 <PIOC_Handler+0x10>)
   83030:	4b02      	ldr	r3, [pc, #8]	; (8303c <PIOC_Handler+0x14>)
   83032:	4798      	blx	r3
}
   83034:	bf00      	nop
   83036:	bd80      	pop	{r7, pc}
   83038:	400e1200 	.word	0x400e1200
   8303c:	00082f4d 	.word	0x00082f4d

00083040 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83040:	b580      	push	{r7, lr}
   83042:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   83044:	210e      	movs	r1, #14
   83046:	4802      	ldr	r0, [pc, #8]	; (83050 <PIOD_Handler+0x10>)
   83048:	4b02      	ldr	r3, [pc, #8]	; (83054 <PIOD_Handler+0x14>)
   8304a:	4798      	blx	r3
}
   8304c:	bf00      	nop
   8304e:	bd80      	pop	{r7, pc}
   83050:	400e1400 	.word	0x400e1400
   83054:	00082f4d 	.word	0x00082f4d

00083058 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83058:	b480      	push	{r7}
   8305a:	b085      	sub	sp, #20
   8305c:	af00      	add	r7, sp, #0
   8305e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83060:	491c      	ldr	r1, [pc, #112]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   83062:	4b1c      	ldr	r3, [pc, #112]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   83064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8306a:	687b      	ldr	r3, [r7, #4]
   8306c:	4313      	orrs	r3, r2
   8306e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83070:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83074:	60fb      	str	r3, [r7, #12]
   83076:	e007      	b.n	83088 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83078:	68fb      	ldr	r3, [r7, #12]
   8307a:	2b00      	cmp	r3, #0
   8307c:	d101      	bne.n	83082 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8307e:	2301      	movs	r3, #1
   83080:	e023      	b.n	830ca <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83082:	68fb      	ldr	r3, [r7, #12]
   83084:	3b01      	subs	r3, #1
   83086:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83088:	4b12      	ldr	r3, [pc, #72]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   8308a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8308c:	f003 0308 	and.w	r3, r3, #8
   83090:	2b00      	cmp	r3, #0
   83092:	d0f1      	beq.n	83078 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83094:	4a0f      	ldr	r2, [pc, #60]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   83096:	4b0f      	ldr	r3, [pc, #60]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   83098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8309a:	f023 0303 	bic.w	r3, r3, #3
   8309e:	f043 0302 	orr.w	r3, r3, #2
   830a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   830a8:	60fb      	str	r3, [r7, #12]
   830aa:	e007      	b.n	830bc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   830ac:	68fb      	ldr	r3, [r7, #12]
   830ae:	2b00      	cmp	r3, #0
   830b0:	d101      	bne.n	830b6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   830b2:	2301      	movs	r3, #1
   830b4:	e009      	b.n	830ca <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   830b6:	68fb      	ldr	r3, [r7, #12]
   830b8:	3b01      	subs	r3, #1
   830ba:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   830bc:	4b05      	ldr	r3, [pc, #20]	; (830d4 <pmc_switch_mck_to_pllack+0x7c>)
   830be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   830c0:	f003 0308 	and.w	r3, r3, #8
   830c4:	2b00      	cmp	r3, #0
   830c6:	d0f1      	beq.n	830ac <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   830c8:	2300      	movs	r3, #0
}
   830ca:	4618      	mov	r0, r3
   830cc:	3714      	adds	r7, #20
   830ce:	46bd      	mov	sp, r7
   830d0:	bc80      	pop	{r7}
   830d2:	4770      	bx	lr
   830d4:	400e0600 	.word	0x400e0600

000830d8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   830d8:	b480      	push	{r7}
   830da:	b083      	sub	sp, #12
   830dc:	af00      	add	r7, sp, #0
   830de:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   830e0:	687b      	ldr	r3, [r7, #4]
   830e2:	2b01      	cmp	r3, #1
   830e4:	d107      	bne.n	830f6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   830e6:	4a08      	ldr	r2, [pc, #32]	; (83108 <pmc_switch_sclk_to_32kxtal+0x30>)
   830e8:	4b07      	ldr	r3, [pc, #28]	; (83108 <pmc_switch_sclk_to_32kxtal+0x30>)
   830ea:	689b      	ldr	r3, [r3, #8]
   830ec:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   830f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   830f4:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   830f6:	4b04      	ldr	r3, [pc, #16]	; (83108 <pmc_switch_sclk_to_32kxtal+0x30>)
   830f8:	4a04      	ldr	r2, [pc, #16]	; (8310c <pmc_switch_sclk_to_32kxtal+0x34>)
   830fa:	601a      	str	r2, [r3, #0]
}
   830fc:	bf00      	nop
   830fe:	370c      	adds	r7, #12
   83100:	46bd      	mov	sp, r7
   83102:	bc80      	pop	{r7}
   83104:	4770      	bx	lr
   83106:	bf00      	nop
   83108:	400e1a10 	.word	0x400e1a10
   8310c:	a5000008 	.word	0xa5000008

00083110 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83110:	b480      	push	{r7}
   83112:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83114:	4b09      	ldr	r3, [pc, #36]	; (8313c <pmc_osc_is_ready_32kxtal+0x2c>)
   83116:	695b      	ldr	r3, [r3, #20]
   83118:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8311c:	2b00      	cmp	r3, #0
   8311e:	d007      	beq.n	83130 <pmc_osc_is_ready_32kxtal+0x20>
   83120:	4b07      	ldr	r3, [pc, #28]	; (83140 <pmc_osc_is_ready_32kxtal+0x30>)
   83122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83124:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83128:	2b00      	cmp	r3, #0
   8312a:	d001      	beq.n	83130 <pmc_osc_is_ready_32kxtal+0x20>
   8312c:	2301      	movs	r3, #1
   8312e:	e000      	b.n	83132 <pmc_osc_is_ready_32kxtal+0x22>
   83130:	2300      	movs	r3, #0
}
   83132:	4618      	mov	r0, r3
   83134:	46bd      	mov	sp, r7
   83136:	bc80      	pop	{r7}
   83138:	4770      	bx	lr
   8313a:	bf00      	nop
   8313c:	400e1a10 	.word	0x400e1a10
   83140:	400e0600 	.word	0x400e0600

00083144 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83144:	b480      	push	{r7}
   83146:	b085      	sub	sp, #20
   83148:	af00      	add	r7, sp, #0
   8314a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   8314c:	2300      	movs	r3, #0
   8314e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   83150:	4b21      	ldr	r3, [pc, #132]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   83152:	6a1b      	ldr	r3, [r3, #32]
   83154:	f003 0301 	and.w	r3, r3, #1
   83158:	2b00      	cmp	r3, #0
   8315a:	d00e      	beq.n	8317a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8315c:	491e      	ldr	r1, [pc, #120]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   8315e:	4b1e      	ldr	r3, [pc, #120]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   83160:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   83162:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83166:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8316a:	687a      	ldr	r2, [r7, #4]
   8316c:	4313      	orrs	r3, r2
   8316e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83172:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83176:	620b      	str	r3, [r1, #32]
   83178:	e00b      	b.n	83192 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8317a:	2301      	movs	r3, #1
   8317c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8317e:	4916      	ldr	r1, [pc, #88]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   83180:	4b15      	ldr	r3, [pc, #84]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   83182:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83184:	4b15      	ldr	r3, [pc, #84]	; (831dc <pmc_switch_mainck_to_fastrc+0x98>)
   83186:	4013      	ands	r3, r2
   83188:	687a      	ldr	r2, [r7, #4]
   8318a:	431a      	orrs	r2, r3
   8318c:	4b14      	ldr	r3, [pc, #80]	; (831e0 <pmc_switch_mainck_to_fastrc+0x9c>)
   8318e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83190:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83192:	bf00      	nop
   83194:	4b10      	ldr	r3, [pc, #64]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   83196:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8319c:	2b00      	cmp	r3, #0
   8319e:	d0f9      	beq.n	83194 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   831a0:	4a0d      	ldr	r2, [pc, #52]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   831a2:	4b0d      	ldr	r3, [pc, #52]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   831a4:	6a1b      	ldr	r3, [r3, #32]
   831a6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   831aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   831ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   831b2:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   831b4:	68fb      	ldr	r3, [r7, #12]
   831b6:	2b00      	cmp	r3, #0
   831b8:	d009      	beq.n	831ce <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   831ba:	4a07      	ldr	r2, [pc, #28]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   831bc:	4b06      	ldr	r3, [pc, #24]	; (831d8 <pmc_switch_mainck_to_fastrc+0x94>)
   831be:	6a1b      	ldr	r3, [r3, #32]
   831c0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   831c4:	f023 0301 	bic.w	r3, r3, #1
   831c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   831cc:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   831ce:	bf00      	nop
   831d0:	3714      	adds	r7, #20
   831d2:	46bd      	mov	sp, r7
   831d4:	bc80      	pop	{r7}
   831d6:	4770      	bx	lr
   831d8:	400e0600 	.word	0x400e0600
   831dc:	ffc80086 	.word	0xffc80086
   831e0:	0037ff09 	.word	0x0037ff09

000831e4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   831e4:	b480      	push	{r7}
   831e6:	b083      	sub	sp, #12
   831e8:	af00      	add	r7, sp, #0
   831ea:	6078      	str	r0, [r7, #4]
   831ec:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   831ee:	687b      	ldr	r3, [r7, #4]
   831f0:	2b00      	cmp	r3, #0
   831f2:	d008      	beq.n	83206 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   831f4:	4916      	ldr	r1, [pc, #88]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   831f6:	4b16      	ldr	r3, [pc, #88]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   831f8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   831fa:	4a16      	ldr	r2, [pc, #88]	; (83254 <pmc_switch_mainck_to_xtal+0x70>)
   831fc:	401a      	ands	r2, r3
   831fe:	4b16      	ldr	r3, [pc, #88]	; (83258 <pmc_switch_mainck_to_xtal+0x74>)
   83200:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83202:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   83204:	e01e      	b.n	83244 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83206:	4912      	ldr	r1, [pc, #72]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   83208:	4b11      	ldr	r3, [pc, #68]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   8320a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8320c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83210:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83214:	683a      	ldr	r2, [r7, #0]
   83216:	0212      	lsls	r2, r2, #8
   83218:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8321a:	4313      	orrs	r3, r2
   8321c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83220:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83224:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83226:	bf00      	nop
   83228:	4b09      	ldr	r3, [pc, #36]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   8322a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8322c:	f003 0301 	and.w	r3, r3, #1
   83230:	2b00      	cmp	r3, #0
   83232:	d0f9      	beq.n	83228 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   83234:	4a06      	ldr	r2, [pc, #24]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   83236:	4b06      	ldr	r3, [pc, #24]	; (83250 <pmc_switch_mainck_to_xtal+0x6c>)
   83238:	6a1b      	ldr	r3, [r3, #32]
   8323a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8323e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83242:	6213      	str	r3, [r2, #32]
	}
}
   83244:	bf00      	nop
   83246:	370c      	adds	r7, #12
   83248:	46bd      	mov	sp, r7
   8324a:	bc80      	pop	{r7}
   8324c:	4770      	bx	lr
   8324e:	bf00      	nop
   83250:	400e0600 	.word	0x400e0600
   83254:	fec8fffc 	.word	0xfec8fffc
   83258:	01370002 	.word	0x01370002

0008325c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8325c:	b480      	push	{r7}
   8325e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83260:	4b03      	ldr	r3, [pc, #12]	; (83270 <pmc_osc_is_ready_mainck+0x14>)
   83262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83268:	4618      	mov	r0, r3
   8326a:	46bd      	mov	sp, r7
   8326c:	bc80      	pop	{r7}
   8326e:	4770      	bx	lr
   83270:	400e0600 	.word	0x400e0600

00083274 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83274:	b480      	push	{r7}
   83276:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83278:	4b03      	ldr	r3, [pc, #12]	; (83288 <pmc_disable_pllack+0x14>)
   8327a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8327e:	629a      	str	r2, [r3, #40]	; 0x28
}
   83280:	bf00      	nop
   83282:	46bd      	mov	sp, r7
   83284:	bc80      	pop	{r7}
   83286:	4770      	bx	lr
   83288:	400e0600 	.word	0x400e0600

0008328c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8328c:	b480      	push	{r7}
   8328e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83290:	4b03      	ldr	r3, [pc, #12]	; (832a0 <pmc_is_locked_pllack+0x14>)
   83292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83294:	f003 0302 	and.w	r3, r3, #2
}
   83298:	4618      	mov	r0, r3
   8329a:	46bd      	mov	sp, r7
   8329c:	bc80      	pop	{r7}
   8329e:	4770      	bx	lr
   832a0:	400e0600 	.word	0x400e0600

000832a4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   832a4:	b480      	push	{r7}
   832a6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   832a8:	4b03      	ldr	r3, [pc, #12]	; (832b8 <pmc_is_locked_upll+0x14>)
   832aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   832ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   832b0:	4618      	mov	r0, r3
   832b2:	46bd      	mov	sp, r7
   832b4:	bc80      	pop	{r7}
   832b6:	4770      	bx	lr
   832b8:	400e0600 	.word	0x400e0600

000832bc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   832bc:	b480      	push	{r7}
   832be:	b083      	sub	sp, #12
   832c0:	af00      	add	r7, sp, #0
   832c2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   832c4:	687b      	ldr	r3, [r7, #4]
   832c6:	2b2c      	cmp	r3, #44	; 0x2c
   832c8:	d901      	bls.n	832ce <pmc_enable_periph_clk+0x12>
		return 1;
   832ca:	2301      	movs	r3, #1
   832cc:	e02f      	b.n	8332e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   832ce:	687b      	ldr	r3, [r7, #4]
   832d0:	2b1f      	cmp	r3, #31
   832d2:	d813      	bhi.n	832fc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   832d4:	4b18      	ldr	r3, [pc, #96]	; (83338 <pmc_enable_periph_clk+0x7c>)
   832d6:	699a      	ldr	r2, [r3, #24]
   832d8:	2101      	movs	r1, #1
   832da:	687b      	ldr	r3, [r7, #4]
   832dc:	fa01 f303 	lsl.w	r3, r1, r3
   832e0:	401a      	ands	r2, r3
   832e2:	2101      	movs	r1, #1
   832e4:	687b      	ldr	r3, [r7, #4]
   832e6:	fa01 f303 	lsl.w	r3, r1, r3
   832ea:	429a      	cmp	r2, r3
   832ec:	d01e      	beq.n	8332c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   832ee:	4a12      	ldr	r2, [pc, #72]	; (83338 <pmc_enable_periph_clk+0x7c>)
   832f0:	2101      	movs	r1, #1
   832f2:	687b      	ldr	r3, [r7, #4]
   832f4:	fa01 f303 	lsl.w	r3, r1, r3
   832f8:	6113      	str	r3, [r2, #16]
   832fa:	e017      	b.n	8332c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   832fc:	687b      	ldr	r3, [r7, #4]
   832fe:	3b20      	subs	r3, #32
   83300:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83302:	4b0d      	ldr	r3, [pc, #52]	; (83338 <pmc_enable_periph_clk+0x7c>)
   83304:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83308:	2101      	movs	r1, #1
   8330a:	687b      	ldr	r3, [r7, #4]
   8330c:	fa01 f303 	lsl.w	r3, r1, r3
   83310:	401a      	ands	r2, r3
   83312:	2101      	movs	r1, #1
   83314:	687b      	ldr	r3, [r7, #4]
   83316:	fa01 f303 	lsl.w	r3, r1, r3
   8331a:	429a      	cmp	r2, r3
   8331c:	d006      	beq.n	8332c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8331e:	4a06      	ldr	r2, [pc, #24]	; (83338 <pmc_enable_periph_clk+0x7c>)
   83320:	2101      	movs	r1, #1
   83322:	687b      	ldr	r3, [r7, #4]
   83324:	fa01 f303 	lsl.w	r3, r1, r3
   83328:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8332c:	2300      	movs	r3, #0
}
   8332e:	4618      	mov	r0, r3
   83330:	370c      	adds	r7, #12
   83332:	46bd      	mov	sp, r7
   83334:	bc80      	pop	{r7}
   83336:	4770      	bx	lr
   83338:	400e0600 	.word	0x400e0600

0008333c <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   8333c:	b480      	push	{r7}
   8333e:	b083      	sub	sp, #12
   83340:	af00      	add	r7, sp, #0
   83342:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83344:	687b      	ldr	r3, [r7, #4]
   83346:	2b00      	cmp	r3, #0
   83348:	d004      	beq.n	83354 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   8334a:	4b07      	ldr	r3, [pc, #28]	; (83368 <pmc_set_writeprotect+0x2c>)
   8334c:	4a07      	ldr	r2, [pc, #28]	; (8336c <pmc_set_writeprotect+0x30>)
   8334e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   83352:	e003      	b.n	8335c <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83354:	4b04      	ldr	r3, [pc, #16]	; (83368 <pmc_set_writeprotect+0x2c>)
   83356:	4a06      	ldr	r2, [pc, #24]	; (83370 <pmc_set_writeprotect+0x34>)
   83358:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   8335c:	bf00      	nop
   8335e:	370c      	adds	r7, #12
   83360:	46bd      	mov	sp, r7
   83362:	bc80      	pop	{r7}
   83364:	4770      	bx	lr
   83366:	bf00      	nop
   83368:	400e0600 	.word	0x400e0600
   8336c:	504d4301 	.word	0x504d4301
   83370:	504d4300 	.word	0x504d4300

00083374 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83374:	b480      	push	{r7}
   83376:	af00      	add	r7, sp, #0
	while (1) {
	}
   83378:	e7fe      	b.n	83378 <Dummy_Handler+0x4>
   8337a:	bf00      	nop

0008337c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8337c:	b580      	push	{r7, lr}
   8337e:	b082      	sub	sp, #8
   83380:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83382:	4b1e      	ldr	r3, [pc, #120]	; (833fc <Reset_Handler+0x80>)
   83384:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83386:	4b1e      	ldr	r3, [pc, #120]	; (83400 <Reset_Handler+0x84>)
   83388:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8338a:	687a      	ldr	r2, [r7, #4]
   8338c:	683b      	ldr	r3, [r7, #0]
   8338e:	429a      	cmp	r2, r3
   83390:	d00c      	beq.n	833ac <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83392:	e007      	b.n	833a4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83394:	683b      	ldr	r3, [r7, #0]
   83396:	1d1a      	adds	r2, r3, #4
   83398:	603a      	str	r2, [r7, #0]
   8339a:	687a      	ldr	r2, [r7, #4]
   8339c:	1d11      	adds	r1, r2, #4
   8339e:	6079      	str	r1, [r7, #4]
   833a0:	6812      	ldr	r2, [r2, #0]
   833a2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   833a4:	683b      	ldr	r3, [r7, #0]
   833a6:	4a17      	ldr	r2, [pc, #92]	; (83404 <Reset_Handler+0x88>)
   833a8:	4293      	cmp	r3, r2
   833aa:	d3f3      	bcc.n	83394 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   833ac:	4b16      	ldr	r3, [pc, #88]	; (83408 <Reset_Handler+0x8c>)
   833ae:	603b      	str	r3, [r7, #0]
   833b0:	e004      	b.n	833bc <Reset_Handler+0x40>
		*pDest++ = 0;
   833b2:	683b      	ldr	r3, [r7, #0]
   833b4:	1d1a      	adds	r2, r3, #4
   833b6:	603a      	str	r2, [r7, #0]
   833b8:	2200      	movs	r2, #0
   833ba:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   833bc:	683b      	ldr	r3, [r7, #0]
   833be:	4a13      	ldr	r2, [pc, #76]	; (8340c <Reset_Handler+0x90>)
   833c0:	4293      	cmp	r3, r2
   833c2:	d3f6      	bcc.n	833b2 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   833c4:	4b12      	ldr	r3, [pc, #72]	; (83410 <Reset_Handler+0x94>)
   833c6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   833c8:	4a12      	ldr	r2, [pc, #72]	; (83414 <Reset_Handler+0x98>)
   833ca:	687b      	ldr	r3, [r7, #4]
   833cc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   833d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   833d4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   833d6:	687b      	ldr	r3, [r7, #4]
   833d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   833dc:	d309      	bcc.n	833f2 <Reset_Handler+0x76>
   833de:	687b      	ldr	r3, [r7, #4]
   833e0:	4a0d      	ldr	r2, [pc, #52]	; (83418 <Reset_Handler+0x9c>)
   833e2:	4293      	cmp	r3, r2
   833e4:	d805      	bhi.n	833f2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   833e6:	4a0b      	ldr	r2, [pc, #44]	; (83414 <Reset_Handler+0x98>)
   833e8:	4b0a      	ldr	r3, [pc, #40]	; (83414 <Reset_Handler+0x98>)
   833ea:	689b      	ldr	r3, [r3, #8]
   833ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   833f0:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   833f2:	4b0a      	ldr	r3, [pc, #40]	; (8341c <Reset_Handler+0xa0>)
   833f4:	4798      	blx	r3

	/* Branch to main function */
	main();
   833f6:	4b0a      	ldr	r3, [pc, #40]	; (83420 <Reset_Handler+0xa4>)
   833f8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   833fa:	e7fe      	b.n	833fa <Reset_Handler+0x7e>
   833fc:	00086af8 	.word	0x00086af8
   83400:	20070000 	.word	0x20070000
   83404:	20070c6c 	.word	0x20070c6c
   83408:	20070c6c 	.word	0x20070c6c
   8340c:	2007124c 	.word	0x2007124c
   83410:	00080000 	.word	0x00080000
   83414:	e000ed00 	.word	0xe000ed00
   83418:	200fffff 	.word	0x200fffff
   8341c:	00083ab5 	.word	0x00083ab5
   83420:	00081e31 	.word	0x00081e31

00083424 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83424:	b480      	push	{r7}
   83426:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83428:	4b57      	ldr	r3, [pc, #348]	; (83588 <SystemCoreClockUpdate+0x164>)
   8342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8342c:	f003 0303 	and.w	r3, r3, #3
   83430:	2b03      	cmp	r3, #3
   83432:	f200 808a 	bhi.w	8354a <SystemCoreClockUpdate+0x126>
   83436:	a201      	add	r2, pc, #4	; (adr r2, 8343c <SystemCoreClockUpdate+0x18>)
   83438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8343c:	0008344d 	.word	0x0008344d
   83440:	0008346d 	.word	0x0008346d
   83444:	000834bd 	.word	0x000834bd
   83448:	000834bd 	.word	0x000834bd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8344c:	4b4f      	ldr	r3, [pc, #316]	; (8358c <SystemCoreClockUpdate+0x168>)
   8344e:	695b      	ldr	r3, [r3, #20]
   83450:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83454:	2b00      	cmp	r3, #0
   83456:	d004      	beq.n	83462 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83458:	4b4d      	ldr	r3, [pc, #308]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8345a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8345e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83460:	e073      	b.n	8354a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83462:	4b4b      	ldr	r3, [pc, #300]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83464:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83468:	601a      	str	r2, [r3, #0]
		}
		break;
   8346a:	e06e      	b.n	8354a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8346c:	4b46      	ldr	r3, [pc, #280]	; (83588 <SystemCoreClockUpdate+0x164>)
   8346e:	6a1b      	ldr	r3, [r3, #32]
   83470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83474:	2b00      	cmp	r3, #0
   83476:	d003      	beq.n	83480 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83478:	4b45      	ldr	r3, [pc, #276]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8347a:	4a46      	ldr	r2, [pc, #280]	; (83594 <SystemCoreClockUpdate+0x170>)
   8347c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8347e:	e064      	b.n	8354a <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83480:	4b43      	ldr	r3, [pc, #268]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83482:	4a45      	ldr	r2, [pc, #276]	; (83598 <SystemCoreClockUpdate+0x174>)
   83484:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83486:	4b40      	ldr	r3, [pc, #256]	; (83588 <SystemCoreClockUpdate+0x164>)
   83488:	6a1b      	ldr	r3, [r3, #32]
   8348a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8348e:	2b10      	cmp	r3, #16
   83490:	d004      	beq.n	8349c <SystemCoreClockUpdate+0x78>
   83492:	2b20      	cmp	r3, #32
   83494:	d008      	beq.n	834a8 <SystemCoreClockUpdate+0x84>
   83496:	2b00      	cmp	r3, #0
   83498:	d00e      	beq.n	834b8 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8349a:	e00e      	b.n	834ba <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8349c:	4b3c      	ldr	r3, [pc, #240]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8349e:	681b      	ldr	r3, [r3, #0]
   834a0:	005b      	lsls	r3, r3, #1
   834a2:	4a3b      	ldr	r2, [pc, #236]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834a4:	6013      	str	r3, [r2, #0]
				break;
   834a6:	e008      	b.n	834ba <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   834a8:	4b39      	ldr	r3, [pc, #228]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834aa:	681a      	ldr	r2, [r3, #0]
   834ac:	4613      	mov	r3, r2
   834ae:	005b      	lsls	r3, r3, #1
   834b0:	4413      	add	r3, r2
   834b2:	4a37      	ldr	r2, [pc, #220]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834b4:	6013      	str	r3, [r2, #0]
				break;
   834b6:	e000      	b.n	834ba <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   834b8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   834ba:	e046      	b.n	8354a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   834bc:	4b32      	ldr	r3, [pc, #200]	; (83588 <SystemCoreClockUpdate+0x164>)
   834be:	6a1b      	ldr	r3, [r3, #32]
   834c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   834c4:	2b00      	cmp	r3, #0
   834c6:	d003      	beq.n	834d0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   834c8:	4b31      	ldr	r3, [pc, #196]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834ca:	4a32      	ldr	r2, [pc, #200]	; (83594 <SystemCoreClockUpdate+0x170>)
   834cc:	601a      	str	r2, [r3, #0]
   834ce:	e01c      	b.n	8350a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   834d0:	4b2f      	ldr	r3, [pc, #188]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834d2:	4a31      	ldr	r2, [pc, #196]	; (83598 <SystemCoreClockUpdate+0x174>)
   834d4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   834d6:	4b2c      	ldr	r3, [pc, #176]	; (83588 <SystemCoreClockUpdate+0x164>)
   834d8:	6a1b      	ldr	r3, [r3, #32]
   834da:	f003 0370 	and.w	r3, r3, #112	; 0x70
   834de:	2b10      	cmp	r3, #16
   834e0:	d004      	beq.n	834ec <SystemCoreClockUpdate+0xc8>
   834e2:	2b20      	cmp	r3, #32
   834e4:	d008      	beq.n	834f8 <SystemCoreClockUpdate+0xd4>
   834e6:	2b00      	cmp	r3, #0
   834e8:	d00e      	beq.n	83508 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   834ea:	e00e      	b.n	8350a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   834ec:	4b28      	ldr	r3, [pc, #160]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834ee:	681b      	ldr	r3, [r3, #0]
   834f0:	005b      	lsls	r3, r3, #1
   834f2:	4a27      	ldr	r2, [pc, #156]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834f4:	6013      	str	r3, [r2, #0]
				break;
   834f6:	e008      	b.n	8350a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   834f8:	4b25      	ldr	r3, [pc, #148]	; (83590 <SystemCoreClockUpdate+0x16c>)
   834fa:	681a      	ldr	r2, [r3, #0]
   834fc:	4613      	mov	r3, r2
   834fe:	005b      	lsls	r3, r3, #1
   83500:	4413      	add	r3, r2
   83502:	4a23      	ldr	r2, [pc, #140]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83504:	6013      	str	r3, [r2, #0]
				break;
   83506:	e000      	b.n	8350a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83508:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8350a:	4b1f      	ldr	r3, [pc, #124]	; (83588 <SystemCoreClockUpdate+0x164>)
   8350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8350e:	f003 0303 	and.w	r3, r3, #3
   83512:	2b02      	cmp	r3, #2
   83514:	d115      	bne.n	83542 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83516:	4b1c      	ldr	r3, [pc, #112]	; (83588 <SystemCoreClockUpdate+0x164>)
   83518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8351a:	4b20      	ldr	r3, [pc, #128]	; (8359c <SystemCoreClockUpdate+0x178>)
   8351c:	4013      	ands	r3, r2
   8351e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83520:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83522:	4a1b      	ldr	r2, [pc, #108]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83524:	6812      	ldr	r2, [r2, #0]
   83526:	fb02 f303 	mul.w	r3, r2, r3
   8352a:	4a19      	ldr	r2, [pc, #100]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8352c:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8352e:	4b16      	ldr	r3, [pc, #88]	; (83588 <SystemCoreClockUpdate+0x164>)
   83530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83532:	b2db      	uxtb	r3, r3
   83534:	4a16      	ldr	r2, [pc, #88]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83536:	6812      	ldr	r2, [r2, #0]
   83538:	fbb2 f3f3 	udiv	r3, r2, r3
   8353c:	4a14      	ldr	r2, [pc, #80]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8353e:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83540:	e002      	b.n	83548 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83542:	4b13      	ldr	r3, [pc, #76]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83544:	4a16      	ldr	r2, [pc, #88]	; (835a0 <SystemCoreClockUpdate+0x17c>)
   83546:	601a      	str	r2, [r3, #0]
		}
		break;
   83548:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8354a:	4b0f      	ldr	r3, [pc, #60]	; (83588 <SystemCoreClockUpdate+0x164>)
   8354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8354e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83552:	2b70      	cmp	r3, #112	; 0x70
   83554:	d108      	bne.n	83568 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83556:	4b0e      	ldr	r3, [pc, #56]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83558:	681b      	ldr	r3, [r3, #0]
   8355a:	4a12      	ldr	r2, [pc, #72]	; (835a4 <SystemCoreClockUpdate+0x180>)
   8355c:	fba2 2303 	umull	r2, r3, r2, r3
   83560:	085b      	lsrs	r3, r3, #1
   83562:	4a0b      	ldr	r2, [pc, #44]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83564:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   83566:	e00a      	b.n	8357e <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83568:	4b07      	ldr	r3, [pc, #28]	; (83588 <SystemCoreClockUpdate+0x164>)
   8356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8356c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83570:	091b      	lsrs	r3, r3, #4
   83572:	4a07      	ldr	r2, [pc, #28]	; (83590 <SystemCoreClockUpdate+0x16c>)
   83574:	6812      	ldr	r2, [r2, #0]
   83576:	fa22 f303 	lsr.w	r3, r2, r3
   8357a:	4a05      	ldr	r2, [pc, #20]	; (83590 <SystemCoreClockUpdate+0x16c>)
   8357c:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   8357e:	bf00      	nop
   83580:	46bd      	mov	sp, r7
   83582:	bc80      	pop	{r7}
   83584:	4770      	bx	lr
   83586:	bf00      	nop
   83588:	400e0600 	.word	0x400e0600
   8358c:	400e1a10 	.word	0x400e1a10
   83590:	20070404 	.word	0x20070404
   83594:	00b71b00 	.word	0x00b71b00
   83598:	003d0900 	.word	0x003d0900
   8359c:	07ff0000 	.word	0x07ff0000
   835a0:	0e4e1c00 	.word	0x0e4e1c00
   835a4:	aaaaaaab 	.word	0xaaaaaaab

000835a8 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   835a8:	b480      	push	{r7}
   835aa:	b083      	sub	sp, #12
   835ac:	af00      	add	r7, sp, #0
   835ae:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   835b0:	687b      	ldr	r3, [r7, #4]
   835b2:	4a25      	ldr	r2, [pc, #148]	; (83648 <system_init_flash+0xa0>)
   835b4:	4293      	cmp	r3, r2
   835b6:	d806      	bhi.n	835c6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   835b8:	4b24      	ldr	r3, [pc, #144]	; (8364c <system_init_flash+0xa4>)
   835ba:	2200      	movs	r2, #0
   835bc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   835be:	4b24      	ldr	r3, [pc, #144]	; (83650 <system_init_flash+0xa8>)
   835c0:	2200      	movs	r2, #0
   835c2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   835c4:	e03b      	b.n	8363e <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   835c6:	687b      	ldr	r3, [r7, #4]
   835c8:	4a22      	ldr	r2, [pc, #136]	; (83654 <system_init_flash+0xac>)
   835ca:	4293      	cmp	r3, r2
   835cc:	d808      	bhi.n	835e0 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   835ce:	4b1f      	ldr	r3, [pc, #124]	; (8364c <system_init_flash+0xa4>)
   835d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   835d4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   835d6:	4b1e      	ldr	r3, [pc, #120]	; (83650 <system_init_flash+0xa8>)
   835d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   835dc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   835de:	e02e      	b.n	8363e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   835e0:	687b      	ldr	r3, [r7, #4]
   835e2:	4a1d      	ldr	r2, [pc, #116]	; (83658 <system_init_flash+0xb0>)
   835e4:	4293      	cmp	r3, r2
   835e6:	d808      	bhi.n	835fa <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   835e8:	4b18      	ldr	r3, [pc, #96]	; (8364c <system_init_flash+0xa4>)
   835ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   835ee:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   835f0:	4b17      	ldr	r3, [pc, #92]	; (83650 <system_init_flash+0xa8>)
   835f2:	f44f 7200 	mov.w	r2, #512	; 0x200
   835f6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   835f8:	e021      	b.n	8363e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   835fa:	687b      	ldr	r3, [r7, #4]
   835fc:	4a17      	ldr	r2, [pc, #92]	; (8365c <system_init_flash+0xb4>)
   835fe:	4293      	cmp	r3, r2
   83600:	d808      	bhi.n	83614 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83602:	4b12      	ldr	r3, [pc, #72]	; (8364c <system_init_flash+0xa4>)
   83604:	f44f 7240 	mov.w	r2, #768	; 0x300
   83608:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8360a:	4b11      	ldr	r3, [pc, #68]	; (83650 <system_init_flash+0xa8>)
   8360c:	f44f 7240 	mov.w	r2, #768	; 0x300
   83610:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83612:	e014      	b.n	8363e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83614:	687b      	ldr	r3, [r7, #4]
   83616:	4a12      	ldr	r2, [pc, #72]	; (83660 <system_init_flash+0xb8>)
   83618:	4293      	cmp	r3, r2
   8361a:	d808      	bhi.n	8362e <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8361c:	4b0b      	ldr	r3, [pc, #44]	; (8364c <system_init_flash+0xa4>)
   8361e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83622:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   83624:	4b0a      	ldr	r3, [pc, #40]	; (83650 <system_init_flash+0xa8>)
   83626:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8362a:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8362c:	e007      	b.n	8363e <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8362e:	4b07      	ldr	r3, [pc, #28]	; (8364c <system_init_flash+0xa4>)
   83630:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83634:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   83636:	4b06      	ldr	r3, [pc, #24]	; (83650 <system_init_flash+0xa8>)
   83638:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   8363c:	601a      	str	r2, [r3, #0]
	}
}
   8363e:	bf00      	nop
   83640:	370c      	adds	r7, #12
   83642:	46bd      	mov	sp, r7
   83644:	bc80      	pop	{r7}
   83646:	4770      	bx	lr
   83648:	0121eabf 	.word	0x0121eabf
   8364c:	400e0a00 	.word	0x400e0a00
   83650:	400e0c00 	.word	0x400e0c00
   83654:	02faf07f 	.word	0x02faf07f
   83658:	03d08fff 	.word	0x03d08fff
   8365c:	04c4b3ff 	.word	0x04c4b3ff
   83660:	055d4a7f 	.word	0x055d4a7f

00083664 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83664:	b480      	push	{r7}
   83666:	b085      	sub	sp, #20
   83668:	af00      	add	r7, sp, #0
   8366a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   8366c:	4b0a      	ldr	r3, [pc, #40]	; (83698 <_sbrk+0x34>)
   8366e:	681b      	ldr	r3, [r3, #0]
   83670:	2b00      	cmp	r3, #0
   83672:	d102      	bne.n	8367a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   83674:	4b08      	ldr	r3, [pc, #32]	; (83698 <_sbrk+0x34>)
   83676:	4a09      	ldr	r2, [pc, #36]	; (8369c <_sbrk+0x38>)
   83678:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8367a:	4b07      	ldr	r3, [pc, #28]	; (83698 <_sbrk+0x34>)
   8367c:	681b      	ldr	r3, [r3, #0]
   8367e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   83680:	4b05      	ldr	r3, [pc, #20]	; (83698 <_sbrk+0x34>)
   83682:	681a      	ldr	r2, [r3, #0]
   83684:	687b      	ldr	r3, [r7, #4]
   83686:	4413      	add	r3, r2
   83688:	4a03      	ldr	r2, [pc, #12]	; (83698 <_sbrk+0x34>)
   8368a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8368c:	68fb      	ldr	r3, [r7, #12]
}
   8368e:	4618      	mov	r0, r3
   83690:	3714      	adds	r7, #20
   83692:	46bd      	mov	sp, r7
   83694:	bc80      	pop	{r7}
   83696:	4770      	bx	lr
   83698:	20070d84 	.word	0x20070d84
   8369c:	20073250 	.word	0x20073250

000836a0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   836a0:	b480      	push	{r7}
   836a2:	b083      	sub	sp, #12
   836a4:	af00      	add	r7, sp, #0
   836a6:	6078      	str	r0, [r7, #4]
	return -1;
   836a8:	f04f 33ff 	mov.w	r3, #4294967295
}
   836ac:	4618      	mov	r0, r3
   836ae:	370c      	adds	r7, #12
   836b0:	46bd      	mov	sp, r7
   836b2:	bc80      	pop	{r7}
   836b4:	4770      	bx	lr
   836b6:	bf00      	nop

000836b8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   836b8:	b480      	push	{r7}
   836ba:	b083      	sub	sp, #12
   836bc:	af00      	add	r7, sp, #0
   836be:	6078      	str	r0, [r7, #4]
   836c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   836c2:	683b      	ldr	r3, [r7, #0]
   836c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   836c8:	605a      	str	r2, [r3, #4]

	return 0;
   836ca:	2300      	movs	r3, #0
}
   836cc:	4618      	mov	r0, r3
   836ce:	370c      	adds	r7, #12
   836d0:	46bd      	mov	sp, r7
   836d2:	bc80      	pop	{r7}
   836d4:	4770      	bx	lr
   836d6:	bf00      	nop

000836d8 <_isatty>:

extern int _isatty(int file)
{
   836d8:	b480      	push	{r7}
   836da:	b083      	sub	sp, #12
   836dc:	af00      	add	r7, sp, #0
   836de:	6078      	str	r0, [r7, #4]
	return 1;
   836e0:	2301      	movs	r3, #1
}
   836e2:	4618      	mov	r0, r3
   836e4:	370c      	adds	r7, #12
   836e6:	46bd      	mov	sp, r7
   836e8:	bc80      	pop	{r7}
   836ea:	4770      	bx	lr

000836ec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   836ec:	b480      	push	{r7}
   836ee:	b085      	sub	sp, #20
   836f0:	af00      	add	r7, sp, #0
   836f2:	60f8      	str	r0, [r7, #12]
   836f4:	60b9      	str	r1, [r7, #8]
   836f6:	607a      	str	r2, [r7, #4]
	return 0;
   836f8:	2300      	movs	r3, #0
}
   836fa:	4618      	mov	r0, r3
   836fc:	3714      	adds	r7, #20
   836fe:	46bd      	mov	sp, r7
   83700:	bc80      	pop	{r7}
   83702:	4770      	bx	lr

00083704 <__aeabi_drsub>:
   83704:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83708:	e002      	b.n	83710 <__adddf3>
   8370a:	bf00      	nop

0008370c <__aeabi_dsub>:
   8370c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083710 <__adddf3>:
   83710:	b530      	push	{r4, r5, lr}
   83712:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83716:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8371a:	ea94 0f05 	teq	r4, r5
   8371e:	bf08      	it	eq
   83720:	ea90 0f02 	teqeq	r0, r2
   83724:	bf1f      	itttt	ne
   83726:	ea54 0c00 	orrsne.w	ip, r4, r0
   8372a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8372e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83732:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83736:	f000 80e2 	beq.w	838fe <__adddf3+0x1ee>
   8373a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8373e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83742:	bfb8      	it	lt
   83744:	426d      	neglt	r5, r5
   83746:	dd0c      	ble.n	83762 <__adddf3+0x52>
   83748:	442c      	add	r4, r5
   8374a:	ea80 0202 	eor.w	r2, r0, r2
   8374e:	ea81 0303 	eor.w	r3, r1, r3
   83752:	ea82 0000 	eor.w	r0, r2, r0
   83756:	ea83 0101 	eor.w	r1, r3, r1
   8375a:	ea80 0202 	eor.w	r2, r0, r2
   8375e:	ea81 0303 	eor.w	r3, r1, r3
   83762:	2d36      	cmp	r5, #54	; 0x36
   83764:	bf88      	it	hi
   83766:	bd30      	pophi	{r4, r5, pc}
   83768:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8376c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83770:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83774:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83778:	d002      	beq.n	83780 <__adddf3+0x70>
   8377a:	4240      	negs	r0, r0
   8377c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83780:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83784:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83788:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8378c:	d002      	beq.n	83794 <__adddf3+0x84>
   8378e:	4252      	negs	r2, r2
   83790:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83794:	ea94 0f05 	teq	r4, r5
   83798:	f000 80a7 	beq.w	838ea <__adddf3+0x1da>
   8379c:	f1a4 0401 	sub.w	r4, r4, #1
   837a0:	f1d5 0e20 	rsbs	lr, r5, #32
   837a4:	db0d      	blt.n	837c2 <__adddf3+0xb2>
   837a6:	fa02 fc0e 	lsl.w	ip, r2, lr
   837aa:	fa22 f205 	lsr.w	r2, r2, r5
   837ae:	1880      	adds	r0, r0, r2
   837b0:	f141 0100 	adc.w	r1, r1, #0
   837b4:	fa03 f20e 	lsl.w	r2, r3, lr
   837b8:	1880      	adds	r0, r0, r2
   837ba:	fa43 f305 	asr.w	r3, r3, r5
   837be:	4159      	adcs	r1, r3
   837c0:	e00e      	b.n	837e0 <__adddf3+0xd0>
   837c2:	f1a5 0520 	sub.w	r5, r5, #32
   837c6:	f10e 0e20 	add.w	lr, lr, #32
   837ca:	2a01      	cmp	r2, #1
   837cc:	fa03 fc0e 	lsl.w	ip, r3, lr
   837d0:	bf28      	it	cs
   837d2:	f04c 0c02 	orrcs.w	ip, ip, #2
   837d6:	fa43 f305 	asr.w	r3, r3, r5
   837da:	18c0      	adds	r0, r0, r3
   837dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   837e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   837e4:	d507      	bpl.n	837f6 <__adddf3+0xe6>
   837e6:	f04f 0e00 	mov.w	lr, #0
   837ea:	f1dc 0c00 	rsbs	ip, ip, #0
   837ee:	eb7e 0000 	sbcs.w	r0, lr, r0
   837f2:	eb6e 0101 	sbc.w	r1, lr, r1
   837f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   837fa:	d31b      	bcc.n	83834 <__adddf3+0x124>
   837fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83800:	d30c      	bcc.n	8381c <__adddf3+0x10c>
   83802:	0849      	lsrs	r1, r1, #1
   83804:	ea5f 0030 	movs.w	r0, r0, rrx
   83808:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8380c:	f104 0401 	add.w	r4, r4, #1
   83810:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83814:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83818:	f080 809a 	bcs.w	83950 <__adddf3+0x240>
   8381c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83820:	bf08      	it	eq
   83822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83826:	f150 0000 	adcs.w	r0, r0, #0
   8382a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8382e:	ea41 0105 	orr.w	r1, r1, r5
   83832:	bd30      	pop	{r4, r5, pc}
   83834:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83838:	4140      	adcs	r0, r0
   8383a:	eb41 0101 	adc.w	r1, r1, r1
   8383e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83842:	f1a4 0401 	sub.w	r4, r4, #1
   83846:	d1e9      	bne.n	8381c <__adddf3+0x10c>
   83848:	f091 0f00 	teq	r1, #0
   8384c:	bf04      	itt	eq
   8384e:	4601      	moveq	r1, r0
   83850:	2000      	moveq	r0, #0
   83852:	fab1 f381 	clz	r3, r1
   83856:	bf08      	it	eq
   83858:	3320      	addeq	r3, #32
   8385a:	f1a3 030b 	sub.w	r3, r3, #11
   8385e:	f1b3 0220 	subs.w	r2, r3, #32
   83862:	da0c      	bge.n	8387e <__adddf3+0x16e>
   83864:	320c      	adds	r2, #12
   83866:	dd08      	ble.n	8387a <__adddf3+0x16a>
   83868:	f102 0c14 	add.w	ip, r2, #20
   8386c:	f1c2 020c 	rsb	r2, r2, #12
   83870:	fa01 f00c 	lsl.w	r0, r1, ip
   83874:	fa21 f102 	lsr.w	r1, r1, r2
   83878:	e00c      	b.n	83894 <__adddf3+0x184>
   8387a:	f102 0214 	add.w	r2, r2, #20
   8387e:	bfd8      	it	le
   83880:	f1c2 0c20 	rsble	ip, r2, #32
   83884:	fa01 f102 	lsl.w	r1, r1, r2
   83888:	fa20 fc0c 	lsr.w	ip, r0, ip
   8388c:	bfdc      	itt	le
   8388e:	ea41 010c 	orrle.w	r1, r1, ip
   83892:	4090      	lslle	r0, r2
   83894:	1ae4      	subs	r4, r4, r3
   83896:	bfa2      	ittt	ge
   83898:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8389c:	4329      	orrge	r1, r5
   8389e:	bd30      	popge	{r4, r5, pc}
   838a0:	ea6f 0404 	mvn.w	r4, r4
   838a4:	3c1f      	subs	r4, #31
   838a6:	da1c      	bge.n	838e2 <__adddf3+0x1d2>
   838a8:	340c      	adds	r4, #12
   838aa:	dc0e      	bgt.n	838ca <__adddf3+0x1ba>
   838ac:	f104 0414 	add.w	r4, r4, #20
   838b0:	f1c4 0220 	rsb	r2, r4, #32
   838b4:	fa20 f004 	lsr.w	r0, r0, r4
   838b8:	fa01 f302 	lsl.w	r3, r1, r2
   838bc:	ea40 0003 	orr.w	r0, r0, r3
   838c0:	fa21 f304 	lsr.w	r3, r1, r4
   838c4:	ea45 0103 	orr.w	r1, r5, r3
   838c8:	bd30      	pop	{r4, r5, pc}
   838ca:	f1c4 040c 	rsb	r4, r4, #12
   838ce:	f1c4 0220 	rsb	r2, r4, #32
   838d2:	fa20 f002 	lsr.w	r0, r0, r2
   838d6:	fa01 f304 	lsl.w	r3, r1, r4
   838da:	ea40 0003 	orr.w	r0, r0, r3
   838de:	4629      	mov	r1, r5
   838e0:	bd30      	pop	{r4, r5, pc}
   838e2:	fa21 f004 	lsr.w	r0, r1, r4
   838e6:	4629      	mov	r1, r5
   838e8:	bd30      	pop	{r4, r5, pc}
   838ea:	f094 0f00 	teq	r4, #0
   838ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   838f2:	bf06      	itte	eq
   838f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   838f8:	3401      	addeq	r4, #1
   838fa:	3d01      	subne	r5, #1
   838fc:	e74e      	b.n	8379c <__adddf3+0x8c>
   838fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83902:	bf18      	it	ne
   83904:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83908:	d029      	beq.n	8395e <__adddf3+0x24e>
   8390a:	ea94 0f05 	teq	r4, r5
   8390e:	bf08      	it	eq
   83910:	ea90 0f02 	teqeq	r0, r2
   83914:	d005      	beq.n	83922 <__adddf3+0x212>
   83916:	ea54 0c00 	orrs.w	ip, r4, r0
   8391a:	bf04      	itt	eq
   8391c:	4619      	moveq	r1, r3
   8391e:	4610      	moveq	r0, r2
   83920:	bd30      	pop	{r4, r5, pc}
   83922:	ea91 0f03 	teq	r1, r3
   83926:	bf1e      	ittt	ne
   83928:	2100      	movne	r1, #0
   8392a:	2000      	movne	r0, #0
   8392c:	bd30      	popne	{r4, r5, pc}
   8392e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83932:	d105      	bne.n	83940 <__adddf3+0x230>
   83934:	0040      	lsls	r0, r0, #1
   83936:	4149      	adcs	r1, r1
   83938:	bf28      	it	cs
   8393a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8393e:	bd30      	pop	{r4, r5, pc}
   83940:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83944:	bf3c      	itt	cc
   83946:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8394a:	bd30      	popcc	{r4, r5, pc}
   8394c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83950:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83954:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83958:	f04f 0000 	mov.w	r0, #0
   8395c:	bd30      	pop	{r4, r5, pc}
   8395e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83962:	bf1a      	itte	ne
   83964:	4619      	movne	r1, r3
   83966:	4610      	movne	r0, r2
   83968:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8396c:	bf1c      	itt	ne
   8396e:	460b      	movne	r3, r1
   83970:	4602      	movne	r2, r0
   83972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83976:	bf06      	itte	eq
   83978:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8397c:	ea91 0f03 	teqeq	r1, r3
   83980:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83984:	bd30      	pop	{r4, r5, pc}
   83986:	bf00      	nop

00083988 <__aeabi_ui2d>:
   83988:	f090 0f00 	teq	r0, #0
   8398c:	bf04      	itt	eq
   8398e:	2100      	moveq	r1, #0
   83990:	4770      	bxeq	lr
   83992:	b530      	push	{r4, r5, lr}
   83994:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83998:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8399c:	f04f 0500 	mov.w	r5, #0
   839a0:	f04f 0100 	mov.w	r1, #0
   839a4:	e750      	b.n	83848 <__adddf3+0x138>
   839a6:	bf00      	nop

000839a8 <__aeabi_i2d>:
   839a8:	f090 0f00 	teq	r0, #0
   839ac:	bf04      	itt	eq
   839ae:	2100      	moveq	r1, #0
   839b0:	4770      	bxeq	lr
   839b2:	b530      	push	{r4, r5, lr}
   839b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   839b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   839bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   839c0:	bf48      	it	mi
   839c2:	4240      	negmi	r0, r0
   839c4:	f04f 0100 	mov.w	r1, #0
   839c8:	e73e      	b.n	83848 <__adddf3+0x138>
   839ca:	bf00      	nop

000839cc <__aeabi_f2d>:
   839cc:	0042      	lsls	r2, r0, #1
   839ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
   839d2:	ea4f 0131 	mov.w	r1, r1, rrx
   839d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   839da:	bf1f      	itttt	ne
   839dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   839e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   839e8:	4770      	bxne	lr
   839ea:	f092 0f00 	teq	r2, #0
   839ee:	bf14      	ite	ne
   839f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   839f4:	4770      	bxeq	lr
   839f6:	b530      	push	{r4, r5, lr}
   839f8:	f44f 7460 	mov.w	r4, #896	; 0x380
   839fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83a00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83a04:	e720      	b.n	83848 <__adddf3+0x138>
   83a06:	bf00      	nop

00083a08 <__aeabi_ul2d>:
   83a08:	ea50 0201 	orrs.w	r2, r0, r1
   83a0c:	bf08      	it	eq
   83a0e:	4770      	bxeq	lr
   83a10:	b530      	push	{r4, r5, lr}
   83a12:	f04f 0500 	mov.w	r5, #0
   83a16:	e00a      	b.n	83a2e <__aeabi_l2d+0x16>

00083a18 <__aeabi_l2d>:
   83a18:	ea50 0201 	orrs.w	r2, r0, r1
   83a1c:	bf08      	it	eq
   83a1e:	4770      	bxeq	lr
   83a20:	b530      	push	{r4, r5, lr}
   83a22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83a26:	d502      	bpl.n	83a2e <__aeabi_l2d+0x16>
   83a28:	4240      	negs	r0, r0
   83a2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83a2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83a32:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83a36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83a3a:	f43f aedc 	beq.w	837f6 <__adddf3+0xe6>
   83a3e:	f04f 0203 	mov.w	r2, #3
   83a42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a46:	bf18      	it	ne
   83a48:	3203      	addne	r2, #3
   83a4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83a4e:	bf18      	it	ne
   83a50:	3203      	addne	r2, #3
   83a52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83a56:	f1c2 0320 	rsb	r3, r2, #32
   83a5a:	fa00 fc03 	lsl.w	ip, r0, r3
   83a5e:	fa20 f002 	lsr.w	r0, r0, r2
   83a62:	fa01 fe03 	lsl.w	lr, r1, r3
   83a66:	ea40 000e 	orr.w	r0, r0, lr
   83a6a:	fa21 f102 	lsr.w	r1, r1, r2
   83a6e:	4414      	add	r4, r2
   83a70:	e6c1      	b.n	837f6 <__adddf3+0xe6>
   83a72:	bf00      	nop

00083a74 <__aeabi_d2uiz>:
   83a74:	004a      	lsls	r2, r1, #1
   83a76:	d211      	bcs.n	83a9c <__aeabi_d2uiz+0x28>
   83a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83a7c:	d211      	bcs.n	83aa2 <__aeabi_d2uiz+0x2e>
   83a7e:	d50d      	bpl.n	83a9c <__aeabi_d2uiz+0x28>
   83a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83a88:	d40e      	bmi.n	83aa8 <__aeabi_d2uiz+0x34>
   83a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83a96:	fa23 f002 	lsr.w	r0, r3, r2
   83a9a:	4770      	bx	lr
   83a9c:	f04f 0000 	mov.w	r0, #0
   83aa0:	4770      	bx	lr
   83aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83aa6:	d102      	bne.n	83aae <__aeabi_d2uiz+0x3a>
   83aa8:	f04f 30ff 	mov.w	r0, #4294967295
   83aac:	4770      	bx	lr
   83aae:	f04f 0000 	mov.w	r0, #0
   83ab2:	4770      	bx	lr

00083ab4 <__libc_init_array>:
   83ab4:	b570      	push	{r4, r5, r6, lr}
   83ab6:	4e0f      	ldr	r6, [pc, #60]	; (83af4 <__libc_init_array+0x40>)
   83ab8:	4d0f      	ldr	r5, [pc, #60]	; (83af8 <__libc_init_array+0x44>)
   83aba:	1b76      	subs	r6, r6, r5
   83abc:	10b6      	asrs	r6, r6, #2
   83abe:	bf18      	it	ne
   83ac0:	2400      	movne	r4, #0
   83ac2:	d005      	beq.n	83ad0 <__libc_init_array+0x1c>
   83ac4:	3401      	adds	r4, #1
   83ac6:	f855 3b04 	ldr.w	r3, [r5], #4
   83aca:	4798      	blx	r3
   83acc:	42a6      	cmp	r6, r4
   83ace:	d1f9      	bne.n	83ac4 <__libc_init_array+0x10>
   83ad0:	4e0a      	ldr	r6, [pc, #40]	; (83afc <__libc_init_array+0x48>)
   83ad2:	4d0b      	ldr	r5, [pc, #44]	; (83b00 <__libc_init_array+0x4c>)
   83ad4:	f002 fffa 	bl	86acc <_init>
   83ad8:	1b76      	subs	r6, r6, r5
   83ada:	10b6      	asrs	r6, r6, #2
   83adc:	bf18      	it	ne
   83ade:	2400      	movne	r4, #0
   83ae0:	d006      	beq.n	83af0 <__libc_init_array+0x3c>
   83ae2:	3401      	adds	r4, #1
   83ae4:	f855 3b04 	ldr.w	r3, [r5], #4
   83ae8:	4798      	blx	r3
   83aea:	42a6      	cmp	r6, r4
   83aec:	d1f9      	bne.n	83ae2 <__libc_init_array+0x2e>
   83aee:	bd70      	pop	{r4, r5, r6, pc}
   83af0:	bd70      	pop	{r4, r5, r6, pc}
   83af2:	bf00      	nop
   83af4:	00086ad8 	.word	0x00086ad8
   83af8:	00086ad8 	.word	0x00086ad8
   83afc:	00086ae0 	.word	0x00086ae0
   83b00:	00086ad8 	.word	0x00086ad8

00083b04 <iprintf>:
   83b04:	b40f      	push	{r0, r1, r2, r3}
   83b06:	b510      	push	{r4, lr}
   83b08:	4b07      	ldr	r3, [pc, #28]	; (83b28 <iprintf+0x24>)
   83b0a:	b082      	sub	sp, #8
   83b0c:	ac04      	add	r4, sp, #16
   83b0e:	f854 2b04 	ldr.w	r2, [r4], #4
   83b12:	6818      	ldr	r0, [r3, #0]
   83b14:	4623      	mov	r3, r4
   83b16:	6881      	ldr	r1, [r0, #8]
   83b18:	9401      	str	r4, [sp, #4]
   83b1a:	f000 f96f 	bl	83dfc <_vfiprintf_r>
   83b1e:	b002      	add	sp, #8
   83b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b24:	b004      	add	sp, #16
   83b26:	4770      	bx	lr
   83b28:	20070830 	.word	0x20070830

00083b2c <memset>:
   83b2c:	b470      	push	{r4, r5, r6}
   83b2e:	0784      	lsls	r4, r0, #30
   83b30:	d046      	beq.n	83bc0 <memset+0x94>
   83b32:	1e54      	subs	r4, r2, #1
   83b34:	2a00      	cmp	r2, #0
   83b36:	d041      	beq.n	83bbc <memset+0x90>
   83b38:	b2cd      	uxtb	r5, r1
   83b3a:	4603      	mov	r3, r0
   83b3c:	e002      	b.n	83b44 <memset+0x18>
   83b3e:	1e62      	subs	r2, r4, #1
   83b40:	b3e4      	cbz	r4, 83bbc <memset+0x90>
   83b42:	4614      	mov	r4, r2
   83b44:	f803 5b01 	strb.w	r5, [r3], #1
   83b48:	079a      	lsls	r2, r3, #30
   83b4a:	d1f8      	bne.n	83b3e <memset+0x12>
   83b4c:	2c03      	cmp	r4, #3
   83b4e:	d92e      	bls.n	83bae <memset+0x82>
   83b50:	b2cd      	uxtb	r5, r1
   83b52:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83b56:	2c0f      	cmp	r4, #15
   83b58:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83b5c:	d919      	bls.n	83b92 <memset+0x66>
   83b5e:	4626      	mov	r6, r4
   83b60:	f103 0210 	add.w	r2, r3, #16
   83b64:	3e10      	subs	r6, #16
   83b66:	2e0f      	cmp	r6, #15
   83b68:	f842 5c10 	str.w	r5, [r2, #-16]
   83b6c:	f842 5c0c 	str.w	r5, [r2, #-12]
   83b70:	f842 5c08 	str.w	r5, [r2, #-8]
   83b74:	f842 5c04 	str.w	r5, [r2, #-4]
   83b78:	f102 0210 	add.w	r2, r2, #16
   83b7c:	d8f2      	bhi.n	83b64 <memset+0x38>
   83b7e:	f1a4 0210 	sub.w	r2, r4, #16
   83b82:	f022 020f 	bic.w	r2, r2, #15
   83b86:	f004 040f 	and.w	r4, r4, #15
   83b8a:	3210      	adds	r2, #16
   83b8c:	2c03      	cmp	r4, #3
   83b8e:	4413      	add	r3, r2
   83b90:	d90d      	bls.n	83bae <memset+0x82>
   83b92:	461e      	mov	r6, r3
   83b94:	4622      	mov	r2, r4
   83b96:	3a04      	subs	r2, #4
   83b98:	2a03      	cmp	r2, #3
   83b9a:	f846 5b04 	str.w	r5, [r6], #4
   83b9e:	d8fa      	bhi.n	83b96 <memset+0x6a>
   83ba0:	1f22      	subs	r2, r4, #4
   83ba2:	f022 0203 	bic.w	r2, r2, #3
   83ba6:	3204      	adds	r2, #4
   83ba8:	4413      	add	r3, r2
   83baa:	f004 0403 	and.w	r4, r4, #3
   83bae:	b12c      	cbz	r4, 83bbc <memset+0x90>
   83bb0:	b2c9      	uxtb	r1, r1
   83bb2:	441c      	add	r4, r3
   83bb4:	f803 1b01 	strb.w	r1, [r3], #1
   83bb8:	42a3      	cmp	r3, r4
   83bba:	d1fb      	bne.n	83bb4 <memset+0x88>
   83bbc:	bc70      	pop	{r4, r5, r6}
   83bbe:	4770      	bx	lr
   83bc0:	4614      	mov	r4, r2
   83bc2:	4603      	mov	r3, r0
   83bc4:	e7c2      	b.n	83b4c <memset+0x20>
   83bc6:	bf00      	nop

00083bc8 <setbuf>:
   83bc8:	2900      	cmp	r1, #0
   83bca:	bf0c      	ite	eq
   83bcc:	2202      	moveq	r2, #2
   83bce:	2200      	movne	r2, #0
   83bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bd4:	f000 b800 	b.w	83bd8 <setvbuf>

00083bd8 <setvbuf>:
   83bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83bdc:	4d51      	ldr	r5, [pc, #324]	; (83d24 <setvbuf+0x14c>)
   83bde:	b083      	sub	sp, #12
   83be0:	682d      	ldr	r5, [r5, #0]
   83be2:	4604      	mov	r4, r0
   83be4:	460f      	mov	r7, r1
   83be6:	4690      	mov	r8, r2
   83be8:	461e      	mov	r6, r3
   83bea:	b115      	cbz	r5, 83bf2 <setvbuf+0x1a>
   83bec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83bee:	2b00      	cmp	r3, #0
   83bf0:	d079      	beq.n	83ce6 <setvbuf+0x10e>
   83bf2:	f1b8 0f02 	cmp.w	r8, #2
   83bf6:	d004      	beq.n	83c02 <setvbuf+0x2a>
   83bf8:	f1b8 0f01 	cmp.w	r8, #1
   83bfc:	d87f      	bhi.n	83cfe <setvbuf+0x126>
   83bfe:	2e00      	cmp	r6, #0
   83c00:	db7d      	blt.n	83cfe <setvbuf+0x126>
   83c02:	4621      	mov	r1, r4
   83c04:	4628      	mov	r0, r5
   83c06:	f001 f93b 	bl	84e80 <_fflush_r>
   83c0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83c0c:	b141      	cbz	r1, 83c20 <setvbuf+0x48>
   83c0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83c12:	4299      	cmp	r1, r3
   83c14:	d002      	beq.n	83c1c <setvbuf+0x44>
   83c16:	4628      	mov	r0, r5
   83c18:	f001 fa8e 	bl	85138 <_free_r>
   83c1c:	2300      	movs	r3, #0
   83c1e:	6323      	str	r3, [r4, #48]	; 0x30
   83c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c24:	2200      	movs	r2, #0
   83c26:	61a2      	str	r2, [r4, #24]
   83c28:	6062      	str	r2, [r4, #4]
   83c2a:	061a      	lsls	r2, r3, #24
   83c2c:	d454      	bmi.n	83cd8 <setvbuf+0x100>
   83c2e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83c32:	f023 0303 	bic.w	r3, r3, #3
   83c36:	f1b8 0f02 	cmp.w	r8, #2
   83c3a:	81a3      	strh	r3, [r4, #12]
   83c3c:	d039      	beq.n	83cb2 <setvbuf+0xda>
   83c3e:	ab01      	add	r3, sp, #4
   83c40:	466a      	mov	r2, sp
   83c42:	4621      	mov	r1, r4
   83c44:	4628      	mov	r0, r5
   83c46:	f001 fd15 	bl	85674 <__swhatbuf_r>
   83c4a:	89a3      	ldrh	r3, [r4, #12]
   83c4c:	4318      	orrs	r0, r3
   83c4e:	81a0      	strh	r0, [r4, #12]
   83c50:	b326      	cbz	r6, 83c9c <setvbuf+0xc4>
   83c52:	b327      	cbz	r7, 83c9e <setvbuf+0xc6>
   83c54:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83c56:	2b00      	cmp	r3, #0
   83c58:	d04d      	beq.n	83cf6 <setvbuf+0x11e>
   83c5a:	9b00      	ldr	r3, [sp, #0]
   83c5c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83c60:	429e      	cmp	r6, r3
   83c62:	bf1c      	itt	ne
   83c64:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   83c68:	81a0      	strhne	r0, [r4, #12]
   83c6a:	f1b8 0f01 	cmp.w	r8, #1
   83c6e:	bf08      	it	eq
   83c70:	f040 0001 	orreq.w	r0, r0, #1
   83c74:	b283      	uxth	r3, r0
   83c76:	bf08      	it	eq
   83c78:	81a0      	strheq	r0, [r4, #12]
   83c7a:	f003 0008 	and.w	r0, r3, #8
   83c7e:	b280      	uxth	r0, r0
   83c80:	6027      	str	r7, [r4, #0]
   83c82:	6127      	str	r7, [r4, #16]
   83c84:	6166      	str	r6, [r4, #20]
   83c86:	b318      	cbz	r0, 83cd0 <setvbuf+0xf8>
   83c88:	f013 0001 	ands.w	r0, r3, #1
   83c8c:	d02f      	beq.n	83cee <setvbuf+0x116>
   83c8e:	2000      	movs	r0, #0
   83c90:	4276      	negs	r6, r6
   83c92:	61a6      	str	r6, [r4, #24]
   83c94:	60a0      	str	r0, [r4, #8]
   83c96:	b003      	add	sp, #12
   83c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83c9c:	9e00      	ldr	r6, [sp, #0]
   83c9e:	4630      	mov	r0, r6
   83ca0:	f001 fd5c 	bl	8575c <malloc>
   83ca4:	4607      	mov	r7, r0
   83ca6:	b368      	cbz	r0, 83d04 <setvbuf+0x12c>
   83ca8:	89a3      	ldrh	r3, [r4, #12]
   83caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83cae:	81a3      	strh	r3, [r4, #12]
   83cb0:	e7d0      	b.n	83c54 <setvbuf+0x7c>
   83cb2:	2000      	movs	r0, #0
   83cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83cb8:	f043 0302 	orr.w	r3, r3, #2
   83cbc:	2500      	movs	r5, #0
   83cbe:	2101      	movs	r1, #1
   83cc0:	81a3      	strh	r3, [r4, #12]
   83cc2:	60a5      	str	r5, [r4, #8]
   83cc4:	6022      	str	r2, [r4, #0]
   83cc6:	6122      	str	r2, [r4, #16]
   83cc8:	6161      	str	r1, [r4, #20]
   83cca:	b003      	add	sp, #12
   83ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83cd0:	60a0      	str	r0, [r4, #8]
   83cd2:	b003      	add	sp, #12
   83cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83cd8:	6921      	ldr	r1, [r4, #16]
   83cda:	4628      	mov	r0, r5
   83cdc:	f001 fa2c 	bl	85138 <_free_r>
   83ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ce4:	e7a3      	b.n	83c2e <setvbuf+0x56>
   83ce6:	4628      	mov	r0, r5
   83ce8:	f001 f95e 	bl	84fa8 <__sinit>
   83cec:	e781      	b.n	83bf2 <setvbuf+0x1a>
   83cee:	60a6      	str	r6, [r4, #8]
   83cf0:	b003      	add	sp, #12
   83cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83cf6:	4628      	mov	r0, r5
   83cf8:	f001 f956 	bl	84fa8 <__sinit>
   83cfc:	e7ad      	b.n	83c5a <setvbuf+0x82>
   83cfe:	f04f 30ff 	mov.w	r0, #4294967295
   83d02:	e7e2      	b.n	83cca <setvbuf+0xf2>
   83d04:	f8dd 9000 	ldr.w	r9, [sp]
   83d08:	45b1      	cmp	r9, r6
   83d0a:	d006      	beq.n	83d1a <setvbuf+0x142>
   83d0c:	4648      	mov	r0, r9
   83d0e:	f001 fd25 	bl	8575c <malloc>
   83d12:	4607      	mov	r7, r0
   83d14:	b108      	cbz	r0, 83d1a <setvbuf+0x142>
   83d16:	464e      	mov	r6, r9
   83d18:	e7c6      	b.n	83ca8 <setvbuf+0xd0>
   83d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d1e:	f04f 30ff 	mov.w	r0, #4294967295
   83d22:	e7c7      	b.n	83cb4 <setvbuf+0xdc>
   83d24:	20070830 	.word	0x20070830

00083d28 <strlen>:
   83d28:	f020 0103 	bic.w	r1, r0, #3
   83d2c:	f010 0003 	ands.w	r0, r0, #3
   83d30:	f1c0 0000 	rsb	r0, r0, #0
   83d34:	f851 3b04 	ldr.w	r3, [r1], #4
   83d38:	f100 0c04 	add.w	ip, r0, #4
   83d3c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83d40:	f06f 0200 	mvn.w	r2, #0
   83d44:	bf1c      	itt	ne
   83d46:	fa22 f20c 	lsrne.w	r2, r2, ip
   83d4a:	4313      	orrne	r3, r2
   83d4c:	f04f 0c01 	mov.w	ip, #1
   83d50:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83d54:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83d58:	eba3 020c 	sub.w	r2, r3, ip
   83d5c:	ea22 0203 	bic.w	r2, r2, r3
   83d60:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83d64:	bf04      	itt	eq
   83d66:	f851 3b04 	ldreq.w	r3, [r1], #4
   83d6a:	3004      	addeq	r0, #4
   83d6c:	d0f4      	beq.n	83d58 <strlen+0x30>
   83d6e:	f1c2 0100 	rsb	r1, r2, #0
   83d72:	ea02 0201 	and.w	r2, r2, r1
   83d76:	fab2 f282 	clz	r2, r2
   83d7a:	f1c2 021f 	rsb	r2, r2, #31
   83d7e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83d82:	4770      	bx	lr

00083d84 <__sprint_r.part.0>:
   83d84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83d86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83d8a:	049c      	lsls	r4, r3, #18
   83d8c:	4692      	mov	sl, r2
   83d8e:	d52c      	bpl.n	83dea <__sprint_r.part.0+0x66>
   83d90:	6893      	ldr	r3, [r2, #8]
   83d92:	6812      	ldr	r2, [r2, #0]
   83d94:	b33b      	cbz	r3, 83de6 <__sprint_r.part.0+0x62>
   83d96:	460f      	mov	r7, r1
   83d98:	4680      	mov	r8, r0
   83d9a:	f102 0908 	add.w	r9, r2, #8
   83d9e:	e919 0060 	ldmdb	r9, {r5, r6}
   83da2:	08b6      	lsrs	r6, r6, #2
   83da4:	d017      	beq.n	83dd6 <__sprint_r.part.0+0x52>
   83da6:	3d04      	subs	r5, #4
   83da8:	2400      	movs	r4, #0
   83daa:	e001      	b.n	83db0 <__sprint_r.part.0+0x2c>
   83dac:	42a6      	cmp	r6, r4
   83dae:	d010      	beq.n	83dd2 <__sprint_r.part.0+0x4e>
   83db0:	463a      	mov	r2, r7
   83db2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83db6:	4640      	mov	r0, r8
   83db8:	f001 f95e 	bl	85078 <_fputwc_r>
   83dbc:	1c43      	adds	r3, r0, #1
   83dbe:	f104 0401 	add.w	r4, r4, #1
   83dc2:	d1f3      	bne.n	83dac <__sprint_r.part.0+0x28>
   83dc4:	2300      	movs	r3, #0
   83dc6:	f8ca 3008 	str.w	r3, [sl, #8]
   83dca:	f8ca 3004 	str.w	r3, [sl, #4]
   83dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dd2:	f8da 3008 	ldr.w	r3, [sl, #8]
   83dd6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83dda:	f8ca 3008 	str.w	r3, [sl, #8]
   83dde:	f109 0908 	add.w	r9, r9, #8
   83de2:	2b00      	cmp	r3, #0
   83de4:	d1db      	bne.n	83d9e <__sprint_r.part.0+0x1a>
   83de6:	2000      	movs	r0, #0
   83de8:	e7ec      	b.n	83dc4 <__sprint_r.part.0+0x40>
   83dea:	f001 fa8d 	bl	85308 <__sfvwrite_r>
   83dee:	2300      	movs	r3, #0
   83df0:	f8ca 3008 	str.w	r3, [sl, #8]
   83df4:	f8ca 3004 	str.w	r3, [sl, #4]
   83df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083dfc <_vfiprintf_r>:
   83dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83e00:	b0ab      	sub	sp, #172	; 0xac
   83e02:	461c      	mov	r4, r3
   83e04:	9100      	str	r1, [sp, #0]
   83e06:	4690      	mov	r8, r2
   83e08:	9304      	str	r3, [sp, #16]
   83e0a:	9005      	str	r0, [sp, #20]
   83e0c:	b118      	cbz	r0, 83e16 <_vfiprintf_r+0x1a>
   83e0e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83e10:	2b00      	cmp	r3, #0
   83e12:	f000 80de 	beq.w	83fd2 <_vfiprintf_r+0x1d6>
   83e16:	9800      	ldr	r0, [sp, #0]
   83e18:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83e1c:	b28a      	uxth	r2, r1
   83e1e:	0495      	lsls	r5, r2, #18
   83e20:	d407      	bmi.n	83e32 <_vfiprintf_r+0x36>
   83e22:	6e43      	ldr	r3, [r0, #100]	; 0x64
   83e24:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83e2c:	8182      	strh	r2, [r0, #12]
   83e2e:	6643      	str	r3, [r0, #100]	; 0x64
   83e30:	b292      	uxth	r2, r2
   83e32:	0711      	lsls	r1, r2, #28
   83e34:	f140 80b1 	bpl.w	83f9a <_vfiprintf_r+0x19e>
   83e38:	9b00      	ldr	r3, [sp, #0]
   83e3a:	691b      	ldr	r3, [r3, #16]
   83e3c:	2b00      	cmp	r3, #0
   83e3e:	f000 80ac 	beq.w	83f9a <_vfiprintf_r+0x19e>
   83e42:	f002 021a 	and.w	r2, r2, #26
   83e46:	2a0a      	cmp	r2, #10
   83e48:	f000 80b5 	beq.w	83fb6 <_vfiprintf_r+0x1ba>
   83e4c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83e50:	46d3      	mov	fp, sl
   83e52:	2300      	movs	r3, #0
   83e54:	9302      	str	r3, [sp, #8]
   83e56:	930f      	str	r3, [sp, #60]	; 0x3c
   83e58:	930e      	str	r3, [sp, #56]	; 0x38
   83e5a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83e5e:	f898 3000 	ldrb.w	r3, [r8]
   83e62:	4644      	mov	r4, r8
   83e64:	b1fb      	cbz	r3, 83ea6 <_vfiprintf_r+0xaa>
   83e66:	2b25      	cmp	r3, #37	; 0x25
   83e68:	d102      	bne.n	83e70 <_vfiprintf_r+0x74>
   83e6a:	e01c      	b.n	83ea6 <_vfiprintf_r+0xaa>
   83e6c:	2b25      	cmp	r3, #37	; 0x25
   83e6e:	d003      	beq.n	83e78 <_vfiprintf_r+0x7c>
   83e70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83e74:	2b00      	cmp	r3, #0
   83e76:	d1f9      	bne.n	83e6c <_vfiprintf_r+0x70>
   83e78:	ebc8 0504 	rsb	r5, r8, r4
   83e7c:	b19d      	cbz	r5, 83ea6 <_vfiprintf_r+0xaa>
   83e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e82:	3301      	adds	r3, #1
   83e84:	442a      	add	r2, r5
   83e86:	2b07      	cmp	r3, #7
   83e88:	f8cb 8000 	str.w	r8, [fp]
   83e8c:	f8cb 5004 	str.w	r5, [fp, #4]
   83e90:	920f      	str	r2, [sp, #60]	; 0x3c
   83e92:	930e      	str	r3, [sp, #56]	; 0x38
   83e94:	dd7b      	ble.n	83f8e <_vfiprintf_r+0x192>
   83e96:	2a00      	cmp	r2, #0
   83e98:	f040 851f 	bne.w	848da <_vfiprintf_r+0xade>
   83e9c:	46d3      	mov	fp, sl
   83e9e:	9b02      	ldr	r3, [sp, #8]
   83ea0:	920e      	str	r2, [sp, #56]	; 0x38
   83ea2:	442b      	add	r3, r5
   83ea4:	9302      	str	r3, [sp, #8]
   83ea6:	7823      	ldrb	r3, [r4, #0]
   83ea8:	2b00      	cmp	r3, #0
   83eaa:	f000 843b 	beq.w	84724 <_vfiprintf_r+0x928>
   83eae:	f04f 0300 	mov.w	r3, #0
   83eb2:	2100      	movs	r1, #0
   83eb4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83eb8:	f104 0801 	add.w	r8, r4, #1
   83ebc:	7863      	ldrb	r3, [r4, #1]
   83ebe:	4608      	mov	r0, r1
   83ec0:	460e      	mov	r6, r1
   83ec2:	460c      	mov	r4, r1
   83ec4:	f04f 32ff 	mov.w	r2, #4294967295
   83ec8:	9201      	str	r2, [sp, #4]
   83eca:	f108 0801 	add.w	r8, r8, #1
   83ece:	f1a3 0220 	sub.w	r2, r3, #32
   83ed2:	2a58      	cmp	r2, #88	; 0x58
   83ed4:	f200 838b 	bhi.w	845ee <_vfiprintf_r+0x7f2>
   83ed8:	e8df f012 	tbh	[pc, r2, lsl #1]
   83edc:	0389033d 	.word	0x0389033d
   83ee0:	03450389 	.word	0x03450389
   83ee4:	03890389 	.word	0x03890389
   83ee8:	03890389 	.word	0x03890389
   83eec:	03890389 	.word	0x03890389
   83ef0:	026b007e 	.word	0x026b007e
   83ef4:	00860389 	.word	0x00860389
   83ef8:	03890270 	.word	0x03890270
   83efc:	025d01cc 	.word	0x025d01cc
   83f00:	025d025d 	.word	0x025d025d
   83f04:	025d025d 	.word	0x025d025d
   83f08:	025d025d 	.word	0x025d025d
   83f0c:	025d025d 	.word	0x025d025d
   83f10:	03890389 	.word	0x03890389
   83f14:	03890389 	.word	0x03890389
   83f18:	03890389 	.word	0x03890389
   83f1c:	03890389 	.word	0x03890389
   83f20:	03890389 	.word	0x03890389
   83f24:	038901d1 	.word	0x038901d1
   83f28:	03890389 	.word	0x03890389
   83f2c:	03890389 	.word	0x03890389
   83f30:	03890389 	.word	0x03890389
   83f34:	03890389 	.word	0x03890389
   83f38:	021a0389 	.word	0x021a0389
   83f3c:	03890389 	.word	0x03890389
   83f40:	03890389 	.word	0x03890389
   83f44:	02e50389 	.word	0x02e50389
   83f48:	03890389 	.word	0x03890389
   83f4c:	03890308 	.word	0x03890308
   83f50:	03890389 	.word	0x03890389
   83f54:	03890389 	.word	0x03890389
   83f58:	03890389 	.word	0x03890389
   83f5c:	03890389 	.word	0x03890389
   83f60:	032b0389 	.word	0x032b0389
   83f64:	03890382 	.word	0x03890382
   83f68:	03890389 	.word	0x03890389
   83f6c:	0382035e 	.word	0x0382035e
   83f70:	03890389 	.word	0x03890389
   83f74:	03890363 	.word	0x03890363
   83f78:	028d0370 	.word	0x028d0370
   83f7c:	02e0008b 	.word	0x02e0008b
   83f80:	02930389 	.word	0x02930389
   83f84:	02b20389 	.word	0x02b20389
   83f88:	03890389 	.word	0x03890389
   83f8c:	034a      	.short	0x034a
   83f8e:	f10b 0b08 	add.w	fp, fp, #8
   83f92:	9b02      	ldr	r3, [sp, #8]
   83f94:	442b      	add	r3, r5
   83f96:	9302      	str	r3, [sp, #8]
   83f98:	e785      	b.n	83ea6 <_vfiprintf_r+0xaa>
   83f9a:	9900      	ldr	r1, [sp, #0]
   83f9c:	9805      	ldr	r0, [sp, #20]
   83f9e:	f000 fe57 	bl	84c50 <__swsetup_r>
   83fa2:	2800      	cmp	r0, #0
   83fa4:	f040 8545 	bne.w	84a32 <_vfiprintf_r+0xc36>
   83fa8:	9b00      	ldr	r3, [sp, #0]
   83faa:	899a      	ldrh	r2, [r3, #12]
   83fac:	f002 021a 	and.w	r2, r2, #26
   83fb0:	2a0a      	cmp	r2, #10
   83fb2:	f47f af4b 	bne.w	83e4c <_vfiprintf_r+0x50>
   83fb6:	9900      	ldr	r1, [sp, #0]
   83fb8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83fbc:	2b00      	cmp	r3, #0
   83fbe:	f6ff af45 	blt.w	83e4c <_vfiprintf_r+0x50>
   83fc2:	4623      	mov	r3, r4
   83fc4:	4642      	mov	r2, r8
   83fc6:	9805      	ldr	r0, [sp, #20]
   83fc8:	f000 fe0c 	bl	84be4 <__sbprintf>
   83fcc:	b02b      	add	sp, #172	; 0xac
   83fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fd2:	f000 ffe9 	bl	84fa8 <__sinit>
   83fd6:	e71e      	b.n	83e16 <_vfiprintf_r+0x1a>
   83fd8:	9a04      	ldr	r2, [sp, #16]
   83fda:	4613      	mov	r3, r2
   83fdc:	6814      	ldr	r4, [r2, #0]
   83fde:	3304      	adds	r3, #4
   83fe0:	2c00      	cmp	r4, #0
   83fe2:	9304      	str	r3, [sp, #16]
   83fe4:	da02      	bge.n	83fec <_vfiprintf_r+0x1f0>
   83fe6:	4264      	negs	r4, r4
   83fe8:	f046 0604 	orr.w	r6, r6, #4
   83fec:	f898 3000 	ldrb.w	r3, [r8]
   83ff0:	e76b      	b.n	83eca <_vfiprintf_r+0xce>
   83ff2:	f04f 0300 	mov.w	r3, #0
   83ff6:	9804      	ldr	r0, [sp, #16]
   83ff8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83ffc:	4603      	mov	r3, r0
   83ffe:	2130      	movs	r1, #48	; 0x30
   84000:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   84004:	9901      	ldr	r1, [sp, #4]
   84006:	2278      	movs	r2, #120	; 0x78
   84008:	2900      	cmp	r1, #0
   8400a:	9406      	str	r4, [sp, #24]
   8400c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   84010:	6804      	ldr	r4, [r0, #0]
   84012:	f103 0304 	add.w	r3, r3, #4
   84016:	f04f 0500 	mov.w	r5, #0
   8401a:	f046 0202 	orr.w	r2, r6, #2
   8401e:	f2c0 850c 	blt.w	84a3a <_vfiprintf_r+0xc3e>
   84022:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84026:	ea54 0205 	orrs.w	r2, r4, r5
   8402a:	f046 0602 	orr.w	r6, r6, #2
   8402e:	9304      	str	r3, [sp, #16]
   84030:	f040 84b5 	bne.w	8499e <_vfiprintf_r+0xba2>
   84034:	48b3      	ldr	r0, [pc, #716]	; (84304 <_vfiprintf_r+0x508>)
   84036:	9b01      	ldr	r3, [sp, #4]
   84038:	2b00      	cmp	r3, #0
   8403a:	f040 8462 	bne.w	84902 <_vfiprintf_r+0xb06>
   8403e:	4699      	mov	r9, r3
   84040:	4657      	mov	r7, sl
   84042:	2300      	movs	r3, #0
   84044:	9301      	str	r3, [sp, #4]
   84046:	9303      	str	r3, [sp, #12]
   84048:	9b01      	ldr	r3, [sp, #4]
   8404a:	9a03      	ldr	r2, [sp, #12]
   8404c:	4293      	cmp	r3, r2
   8404e:	bfb8      	it	lt
   84050:	4613      	movlt	r3, r2
   84052:	461d      	mov	r5, r3
   84054:	f1b9 0f00 	cmp.w	r9, #0
   84058:	d000      	beq.n	8405c <_vfiprintf_r+0x260>
   8405a:	3501      	adds	r5, #1
   8405c:	f016 0302 	ands.w	r3, r6, #2
   84060:	9307      	str	r3, [sp, #28]
   84062:	bf18      	it	ne
   84064:	3502      	addne	r5, #2
   84066:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   8406a:	9308      	str	r3, [sp, #32]
   8406c:	f040 82e8 	bne.w	84640 <_vfiprintf_r+0x844>
   84070:	9b06      	ldr	r3, [sp, #24]
   84072:	1b5c      	subs	r4, r3, r5
   84074:	2c00      	cmp	r4, #0
   84076:	f340 82e3 	ble.w	84640 <_vfiprintf_r+0x844>
   8407a:	2c10      	cmp	r4, #16
   8407c:	f340 853c 	ble.w	84af8 <_vfiprintf_r+0xcfc>
   84080:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84308 <_vfiprintf_r+0x50c>
   84084:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84088:	46dc      	mov	ip, fp
   8408a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8408c:	46c3      	mov	fp, r8
   8408e:	2310      	movs	r3, #16
   84090:	46a8      	mov	r8, r5
   84092:	4670      	mov	r0, lr
   84094:	464d      	mov	r5, r9
   84096:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8409a:	e007      	b.n	840ac <_vfiprintf_r+0x2b0>
   8409c:	f100 0e02 	add.w	lr, r0, #2
   840a0:	4608      	mov	r0, r1
   840a2:	f10c 0c08 	add.w	ip, ip, #8
   840a6:	3c10      	subs	r4, #16
   840a8:	2c10      	cmp	r4, #16
   840aa:	dd13      	ble.n	840d4 <_vfiprintf_r+0x2d8>
   840ac:	1c41      	adds	r1, r0, #1
   840ae:	3210      	adds	r2, #16
   840b0:	2907      	cmp	r1, #7
   840b2:	920f      	str	r2, [sp, #60]	; 0x3c
   840b4:	f8cc 5000 	str.w	r5, [ip]
   840b8:	f8cc 3004 	str.w	r3, [ip, #4]
   840bc:	910e      	str	r1, [sp, #56]	; 0x38
   840be:	dded      	ble.n	8409c <_vfiprintf_r+0x2a0>
   840c0:	2a00      	cmp	r2, #0
   840c2:	f040 82a5 	bne.w	84610 <_vfiprintf_r+0x814>
   840c6:	3c10      	subs	r4, #16
   840c8:	2c10      	cmp	r4, #16
   840ca:	4610      	mov	r0, r2
   840cc:	f04f 0e01 	mov.w	lr, #1
   840d0:	46d4      	mov	ip, sl
   840d2:	dceb      	bgt.n	840ac <_vfiprintf_r+0x2b0>
   840d4:	46a9      	mov	r9, r5
   840d6:	4670      	mov	r0, lr
   840d8:	4645      	mov	r5, r8
   840da:	46d8      	mov	r8, fp
   840dc:	46e3      	mov	fp, ip
   840de:	4422      	add	r2, r4
   840e0:	2807      	cmp	r0, #7
   840e2:	920f      	str	r2, [sp, #60]	; 0x3c
   840e4:	f8cb 9000 	str.w	r9, [fp]
   840e8:	f8cb 4004 	str.w	r4, [fp, #4]
   840ec:	900e      	str	r0, [sp, #56]	; 0x38
   840ee:	f300 836d 	bgt.w	847cc <_vfiprintf_r+0x9d0>
   840f2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   840f6:	f10b 0b08 	add.w	fp, fp, #8
   840fa:	f100 0e01 	add.w	lr, r0, #1
   840fe:	2b00      	cmp	r3, #0
   84100:	f040 82a7 	bne.w	84652 <_vfiprintf_r+0x856>
   84104:	9b07      	ldr	r3, [sp, #28]
   84106:	2b00      	cmp	r3, #0
   84108:	f000 82ba 	beq.w	84680 <_vfiprintf_r+0x884>
   8410c:	3202      	adds	r2, #2
   8410e:	a90c      	add	r1, sp, #48	; 0x30
   84110:	2302      	movs	r3, #2
   84112:	f1be 0f07 	cmp.w	lr, #7
   84116:	920f      	str	r2, [sp, #60]	; 0x3c
   84118:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8411c:	e88b 000a 	stmia.w	fp, {r1, r3}
   84120:	f340 8370 	ble.w	84804 <_vfiprintf_r+0xa08>
   84124:	2a00      	cmp	r2, #0
   84126:	f040 8400 	bne.w	8492a <_vfiprintf_r+0xb2e>
   8412a:	9b08      	ldr	r3, [sp, #32]
   8412c:	f04f 0e01 	mov.w	lr, #1
   84130:	2b80      	cmp	r3, #128	; 0x80
   84132:	4610      	mov	r0, r2
   84134:	46d3      	mov	fp, sl
   84136:	f040 82a7 	bne.w	84688 <_vfiprintf_r+0x88c>
   8413a:	9b06      	ldr	r3, [sp, #24]
   8413c:	1b5c      	subs	r4, r3, r5
   8413e:	2c00      	cmp	r4, #0
   84140:	f340 82a2 	ble.w	84688 <_vfiprintf_r+0x88c>
   84144:	2c10      	cmp	r4, #16
   84146:	f340 84f8 	ble.w	84b3a <_vfiprintf_r+0xd3e>
   8414a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8430c <_vfiprintf_r+0x510>
   8414e:	46de      	mov	lr, fp
   84150:	2310      	movs	r3, #16
   84152:	46c3      	mov	fp, r8
   84154:	46a8      	mov	r8, r5
   84156:	464d      	mov	r5, r9
   84158:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8415c:	e007      	b.n	8416e <_vfiprintf_r+0x372>
   8415e:	f100 0c02 	add.w	ip, r0, #2
   84162:	4608      	mov	r0, r1
   84164:	f10e 0e08 	add.w	lr, lr, #8
   84168:	3c10      	subs	r4, #16
   8416a:	2c10      	cmp	r4, #16
   8416c:	dd13      	ble.n	84196 <_vfiprintf_r+0x39a>
   8416e:	1c41      	adds	r1, r0, #1
   84170:	3210      	adds	r2, #16
   84172:	2907      	cmp	r1, #7
   84174:	920f      	str	r2, [sp, #60]	; 0x3c
   84176:	f8ce 5000 	str.w	r5, [lr]
   8417a:	f8ce 3004 	str.w	r3, [lr, #4]
   8417e:	910e      	str	r1, [sp, #56]	; 0x38
   84180:	dded      	ble.n	8415e <_vfiprintf_r+0x362>
   84182:	2a00      	cmp	r2, #0
   84184:	f040 830c 	bne.w	847a0 <_vfiprintf_r+0x9a4>
   84188:	3c10      	subs	r4, #16
   8418a:	2c10      	cmp	r4, #16
   8418c:	f04f 0c01 	mov.w	ip, #1
   84190:	4610      	mov	r0, r2
   84192:	46d6      	mov	lr, sl
   84194:	dceb      	bgt.n	8416e <_vfiprintf_r+0x372>
   84196:	46a9      	mov	r9, r5
   84198:	4645      	mov	r5, r8
   8419a:	46d8      	mov	r8, fp
   8419c:	46f3      	mov	fp, lr
   8419e:	4422      	add	r2, r4
   841a0:	f1bc 0f07 	cmp.w	ip, #7
   841a4:	920f      	str	r2, [sp, #60]	; 0x3c
   841a6:	f8cb 9000 	str.w	r9, [fp]
   841aa:	f8cb 4004 	str.w	r4, [fp, #4]
   841ae:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   841b2:	f300 83c8 	bgt.w	84946 <_vfiprintf_r+0xb4a>
   841b6:	9b01      	ldr	r3, [sp, #4]
   841b8:	9903      	ldr	r1, [sp, #12]
   841ba:	f10b 0b08 	add.w	fp, fp, #8
   841be:	1a5c      	subs	r4, r3, r1
   841c0:	2c00      	cmp	r4, #0
   841c2:	f10c 0e01 	add.w	lr, ip, #1
   841c6:	4660      	mov	r0, ip
   841c8:	f300 8264 	bgt.w	84694 <_vfiprintf_r+0x898>
   841cc:	9903      	ldr	r1, [sp, #12]
   841ce:	f1be 0f07 	cmp.w	lr, #7
   841d2:	440a      	add	r2, r1
   841d4:	920f      	str	r2, [sp, #60]	; 0x3c
   841d6:	f8cb 7000 	str.w	r7, [fp]
   841da:	f8cb 1004 	str.w	r1, [fp, #4]
   841de:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   841e2:	f340 82c5 	ble.w	84770 <_vfiprintf_r+0x974>
   841e6:	2a00      	cmp	r2, #0
   841e8:	f040 8332 	bne.w	84850 <_vfiprintf_r+0xa54>
   841ec:	0770      	lsls	r0, r6, #29
   841ee:	920e      	str	r2, [sp, #56]	; 0x38
   841f0:	d538      	bpl.n	84264 <_vfiprintf_r+0x468>
   841f2:	9b06      	ldr	r3, [sp, #24]
   841f4:	1b5c      	subs	r4, r3, r5
   841f6:	2c00      	cmp	r4, #0
   841f8:	dd34      	ble.n	84264 <_vfiprintf_r+0x468>
   841fa:	46d3      	mov	fp, sl
   841fc:	2c10      	cmp	r4, #16
   841fe:	f340 8496 	ble.w	84b2e <_vfiprintf_r+0xd32>
   84202:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84308 <_vfiprintf_r+0x50c>
   84206:	990e      	ldr	r1, [sp, #56]	; 0x38
   84208:	464f      	mov	r7, r9
   8420a:	2610      	movs	r6, #16
   8420c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84210:	e006      	b.n	84220 <_vfiprintf_r+0x424>
   84212:	1c88      	adds	r0, r1, #2
   84214:	4619      	mov	r1, r3
   84216:	f10b 0b08 	add.w	fp, fp, #8
   8421a:	3c10      	subs	r4, #16
   8421c:	2c10      	cmp	r4, #16
   8421e:	dd13      	ble.n	84248 <_vfiprintf_r+0x44c>
   84220:	1c4b      	adds	r3, r1, #1
   84222:	3210      	adds	r2, #16
   84224:	2b07      	cmp	r3, #7
   84226:	920f      	str	r2, [sp, #60]	; 0x3c
   84228:	f8cb 7000 	str.w	r7, [fp]
   8422c:	f8cb 6004 	str.w	r6, [fp, #4]
   84230:	930e      	str	r3, [sp, #56]	; 0x38
   84232:	ddee      	ble.n	84212 <_vfiprintf_r+0x416>
   84234:	2a00      	cmp	r2, #0
   84236:	f040 8285 	bne.w	84744 <_vfiprintf_r+0x948>
   8423a:	3c10      	subs	r4, #16
   8423c:	2c10      	cmp	r4, #16
   8423e:	f04f 0001 	mov.w	r0, #1
   84242:	4611      	mov	r1, r2
   84244:	46d3      	mov	fp, sl
   84246:	dceb      	bgt.n	84220 <_vfiprintf_r+0x424>
   84248:	46b9      	mov	r9, r7
   8424a:	4422      	add	r2, r4
   8424c:	2807      	cmp	r0, #7
   8424e:	920f      	str	r2, [sp, #60]	; 0x3c
   84250:	f8cb 9000 	str.w	r9, [fp]
   84254:	f8cb 4004 	str.w	r4, [fp, #4]
   84258:	900e      	str	r0, [sp, #56]	; 0x38
   8425a:	f340 8292 	ble.w	84782 <_vfiprintf_r+0x986>
   8425e:	2a00      	cmp	r2, #0
   84260:	f040 840c 	bne.w	84a7c <_vfiprintf_r+0xc80>
   84264:	9b02      	ldr	r3, [sp, #8]
   84266:	9a06      	ldr	r2, [sp, #24]
   84268:	42aa      	cmp	r2, r5
   8426a:	bfac      	ite	ge
   8426c:	189b      	addge	r3, r3, r2
   8426e:	195b      	addlt	r3, r3, r5
   84270:	9302      	str	r3, [sp, #8]
   84272:	e290      	b.n	84796 <_vfiprintf_r+0x99a>
   84274:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   84278:	f898 3000 	ldrb.w	r3, [r8]
   8427c:	e625      	b.n	83eca <_vfiprintf_r+0xce>
   8427e:	9406      	str	r4, [sp, #24]
   84280:	2900      	cmp	r1, #0
   84282:	f040 8485 	bne.w	84b90 <_vfiprintf_r+0xd94>
   84286:	f046 0610 	orr.w	r6, r6, #16
   8428a:	06b3      	lsls	r3, r6, #26
   8428c:	f140 8304 	bpl.w	84898 <_vfiprintf_r+0xa9c>
   84290:	9904      	ldr	r1, [sp, #16]
   84292:	3107      	adds	r1, #7
   84294:	f021 0107 	bic.w	r1, r1, #7
   84298:	e9d1 2300 	ldrd	r2, r3, [r1]
   8429c:	4614      	mov	r4, r2
   8429e:	461d      	mov	r5, r3
   842a0:	3108      	adds	r1, #8
   842a2:	9104      	str	r1, [sp, #16]
   842a4:	2a00      	cmp	r2, #0
   842a6:	f173 0300 	sbcs.w	r3, r3, #0
   842aa:	f2c0 837c 	blt.w	849a6 <_vfiprintf_r+0xbaa>
   842ae:	9b01      	ldr	r3, [sp, #4]
   842b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   842b4:	2b00      	cmp	r3, #0
   842b6:	f2c0 830b 	blt.w	848d0 <_vfiprintf_r+0xad4>
   842ba:	ea54 0305 	orrs.w	r3, r4, r5
   842be:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   842c2:	f000 80de 	beq.w	84482 <_vfiprintf_r+0x686>
   842c6:	2d00      	cmp	r5, #0
   842c8:	bf08      	it	eq
   842ca:	2c0a      	cmpeq	r4, #10
   842cc:	f0c0 80de 	bcc.w	8448c <_vfiprintf_r+0x690>
   842d0:	4657      	mov	r7, sl
   842d2:	4620      	mov	r0, r4
   842d4:	4629      	mov	r1, r5
   842d6:	220a      	movs	r2, #10
   842d8:	2300      	movs	r3, #0
   842da:	f002 f9f3 	bl	866c4 <__aeabi_uldivmod>
   842de:	3230      	adds	r2, #48	; 0x30
   842e0:	f807 2d01 	strb.w	r2, [r7, #-1]!
   842e4:	4620      	mov	r0, r4
   842e6:	4629      	mov	r1, r5
   842e8:	2300      	movs	r3, #0
   842ea:	220a      	movs	r2, #10
   842ec:	f002 f9ea 	bl	866c4 <__aeabi_uldivmod>
   842f0:	4604      	mov	r4, r0
   842f2:	460d      	mov	r5, r1
   842f4:	ea54 0305 	orrs.w	r3, r4, r5
   842f8:	d1eb      	bne.n	842d2 <_vfiprintf_r+0x4d6>
   842fa:	ebc7 030a 	rsb	r3, r7, sl
   842fe:	9303      	str	r3, [sp, #12]
   84300:	e6a2      	b.n	84048 <_vfiprintf_r+0x24c>
   84302:	bf00      	nop
   84304:	00086aa0 	.word	0x00086aa0
   84308:	00086abc 	.word	0x00086abc
   8430c:	00086a7c 	.word	0x00086a7c
   84310:	9406      	str	r4, [sp, #24]
   84312:	2900      	cmp	r1, #0
   84314:	f040 8438 	bne.w	84b88 <_vfiprintf_r+0xd8c>
   84318:	f046 0610 	orr.w	r6, r6, #16
   8431c:	f016 0320 	ands.w	r3, r6, #32
   84320:	f000 82a1 	beq.w	84866 <_vfiprintf_r+0xa6a>
   84324:	f04f 0200 	mov.w	r2, #0
   84328:	9b04      	ldr	r3, [sp, #16]
   8432a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8432e:	3307      	adds	r3, #7
   84330:	f023 0307 	bic.w	r3, r3, #7
   84334:	f103 0208 	add.w	r2, r3, #8
   84338:	e9d3 4500 	ldrd	r4, r5, [r3]
   8433c:	9b01      	ldr	r3, [sp, #4]
   8433e:	9204      	str	r2, [sp, #16]
   84340:	2b00      	cmp	r3, #0
   84342:	db0a      	blt.n	8435a <_vfiprintf_r+0x55e>
   84344:	ea54 0305 	orrs.w	r3, r4, r5
   84348:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8434c:	d105      	bne.n	8435a <_vfiprintf_r+0x55e>
   8434e:	9b01      	ldr	r3, [sp, #4]
   84350:	2b00      	cmp	r3, #0
   84352:	f000 8427 	beq.w	84ba4 <_vfiprintf_r+0xda8>
   84356:	2400      	movs	r4, #0
   84358:	2500      	movs	r5, #0
   8435a:	f04f 0900 	mov.w	r9, #0
   8435e:	4657      	mov	r7, sl
   84360:	08e2      	lsrs	r2, r4, #3
   84362:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84366:	08e9      	lsrs	r1, r5, #3
   84368:	f004 0307 	and.w	r3, r4, #7
   8436c:	460d      	mov	r5, r1
   8436e:	4614      	mov	r4, r2
   84370:	3330      	adds	r3, #48	; 0x30
   84372:	ea54 0205 	orrs.w	r2, r4, r5
   84376:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8437a:	d1f1      	bne.n	84360 <_vfiprintf_r+0x564>
   8437c:	07f4      	lsls	r4, r6, #31
   8437e:	d5bc      	bpl.n	842fa <_vfiprintf_r+0x4fe>
   84380:	2b30      	cmp	r3, #48	; 0x30
   84382:	d0ba      	beq.n	842fa <_vfiprintf_r+0x4fe>
   84384:	2230      	movs	r2, #48	; 0x30
   84386:	1e7b      	subs	r3, r7, #1
   84388:	f807 2c01 	strb.w	r2, [r7, #-1]
   8438c:	ebc3 020a 	rsb	r2, r3, sl
   84390:	9203      	str	r2, [sp, #12]
   84392:	461f      	mov	r7, r3
   84394:	e658      	b.n	84048 <_vfiprintf_r+0x24c>
   84396:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8439a:	2400      	movs	r4, #0
   8439c:	f818 3b01 	ldrb.w	r3, [r8], #1
   843a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   843a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   843a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   843ac:	2a09      	cmp	r2, #9
   843ae:	d9f5      	bls.n	8439c <_vfiprintf_r+0x5a0>
   843b0:	e58d      	b.n	83ece <_vfiprintf_r+0xd2>
   843b2:	f898 3000 	ldrb.w	r3, [r8]
   843b6:	2101      	movs	r1, #1
   843b8:	202b      	movs	r0, #43	; 0x2b
   843ba:	e586      	b.n	83eca <_vfiprintf_r+0xce>
   843bc:	f898 3000 	ldrb.w	r3, [r8]
   843c0:	f108 0501 	add.w	r5, r8, #1
   843c4:	2b2a      	cmp	r3, #42	; 0x2a
   843c6:	f000 83cc 	beq.w	84b62 <_vfiprintf_r+0xd66>
   843ca:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   843ce:	2a09      	cmp	r2, #9
   843d0:	46a8      	mov	r8, r5
   843d2:	bf98      	it	ls
   843d4:	2500      	movls	r5, #0
   843d6:	f200 83b5 	bhi.w	84b44 <_vfiprintf_r+0xd48>
   843da:	f818 3b01 	ldrb.w	r3, [r8], #1
   843de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   843e2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   843e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   843ea:	2a09      	cmp	r2, #9
   843ec:	d9f5      	bls.n	843da <_vfiprintf_r+0x5de>
   843ee:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   843f2:	9201      	str	r2, [sp, #4]
   843f4:	e56b      	b.n	83ece <_vfiprintf_r+0xd2>
   843f6:	9406      	str	r4, [sp, #24]
   843f8:	2900      	cmp	r1, #0
   843fa:	d08f      	beq.n	8431c <_vfiprintf_r+0x520>
   843fc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84400:	e78c      	b.n	8431c <_vfiprintf_r+0x520>
   84402:	f04f 0300 	mov.w	r3, #0
   84406:	9a04      	ldr	r2, [sp, #16]
   84408:	9406      	str	r4, [sp, #24]
   8440a:	6817      	ldr	r7, [r2, #0]
   8440c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84410:	1d14      	adds	r4, r2, #4
   84412:	9b01      	ldr	r3, [sp, #4]
   84414:	2f00      	cmp	r7, #0
   84416:	f000 837f 	beq.w	84b18 <_vfiprintf_r+0xd1c>
   8441a:	2b00      	cmp	r3, #0
   8441c:	f2c0 8353 	blt.w	84ac6 <_vfiprintf_r+0xcca>
   84420:	461a      	mov	r2, r3
   84422:	2100      	movs	r1, #0
   84424:	4638      	mov	r0, r7
   84426:	f001 fc4d 	bl	85cc4 <memchr>
   8442a:	2800      	cmp	r0, #0
   8442c:	f000 838e 	beq.w	84b4c <_vfiprintf_r+0xd50>
   84430:	1bc3      	subs	r3, r0, r7
   84432:	9303      	str	r3, [sp, #12]
   84434:	2300      	movs	r3, #0
   84436:	9404      	str	r4, [sp, #16]
   84438:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8443c:	9301      	str	r3, [sp, #4]
   8443e:	e603      	b.n	84048 <_vfiprintf_r+0x24c>
   84440:	9406      	str	r4, [sp, #24]
   84442:	2900      	cmp	r1, #0
   84444:	f040 839d 	bne.w	84b82 <_vfiprintf_r+0xd86>
   84448:	f016 0920 	ands.w	r9, r6, #32
   8444c:	d134      	bne.n	844b8 <_vfiprintf_r+0x6bc>
   8444e:	f016 0310 	ands.w	r3, r6, #16
   84452:	d103      	bne.n	8445c <_vfiprintf_r+0x660>
   84454:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84458:	f040 831f 	bne.w	84a9a <_vfiprintf_r+0xc9e>
   8445c:	9a04      	ldr	r2, [sp, #16]
   8445e:	2500      	movs	r5, #0
   84460:	4613      	mov	r3, r2
   84462:	6814      	ldr	r4, [r2, #0]
   84464:	9a01      	ldr	r2, [sp, #4]
   84466:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8446a:	2a00      	cmp	r2, #0
   8446c:	f103 0304 	add.w	r3, r3, #4
   84470:	f2c0 8327 	blt.w	84ac2 <_vfiprintf_r+0xcc6>
   84474:	ea54 0205 	orrs.w	r2, r4, r5
   84478:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8447c:	9304      	str	r3, [sp, #16]
   8447e:	f47f af22 	bne.w	842c6 <_vfiprintf_r+0x4ca>
   84482:	9b01      	ldr	r3, [sp, #4]
   84484:	2b00      	cmp	r3, #0
   84486:	f43f addb 	beq.w	84040 <_vfiprintf_r+0x244>
   8448a:	2400      	movs	r4, #0
   8448c:	af2a      	add	r7, sp, #168	; 0xa8
   8448e:	3430      	adds	r4, #48	; 0x30
   84490:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84494:	ebc7 030a 	rsb	r3, r7, sl
   84498:	9303      	str	r3, [sp, #12]
   8449a:	e5d5      	b.n	84048 <_vfiprintf_r+0x24c>
   8449c:	f046 0620 	orr.w	r6, r6, #32
   844a0:	f898 3000 	ldrb.w	r3, [r8]
   844a4:	e511      	b.n	83eca <_vfiprintf_r+0xce>
   844a6:	9406      	str	r4, [sp, #24]
   844a8:	2900      	cmp	r1, #0
   844aa:	f040 8375 	bne.w	84b98 <_vfiprintf_r+0xd9c>
   844ae:	f046 0610 	orr.w	r6, r6, #16
   844b2:	f016 0920 	ands.w	r9, r6, #32
   844b6:	d0ca      	beq.n	8444e <_vfiprintf_r+0x652>
   844b8:	f04f 0200 	mov.w	r2, #0
   844bc:	9b04      	ldr	r3, [sp, #16]
   844be:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   844c2:	3307      	adds	r3, #7
   844c4:	f023 0307 	bic.w	r3, r3, #7
   844c8:	f103 0208 	add.w	r2, r3, #8
   844cc:	e9d3 4500 	ldrd	r4, r5, [r3]
   844d0:	9b01      	ldr	r3, [sp, #4]
   844d2:	9204      	str	r2, [sp, #16]
   844d4:	2b00      	cmp	r3, #0
   844d6:	f2c0 81f9 	blt.w	848cc <_vfiprintf_r+0xad0>
   844da:	ea54 0305 	orrs.w	r3, r4, r5
   844de:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   844e2:	f04f 0900 	mov.w	r9, #0
   844e6:	f47f aeee 	bne.w	842c6 <_vfiprintf_r+0x4ca>
   844ea:	e7ca      	b.n	84482 <_vfiprintf_r+0x686>
   844ec:	9406      	str	r4, [sp, #24]
   844ee:	2900      	cmp	r1, #0
   844f0:	f040 8355 	bne.w	84b9e <_vfiprintf_r+0xda2>
   844f4:	06b2      	lsls	r2, r6, #26
   844f6:	48b2      	ldr	r0, [pc, #712]	; (847c0 <_vfiprintf_r+0x9c4>)
   844f8:	d541      	bpl.n	8457e <_vfiprintf_r+0x782>
   844fa:	9a04      	ldr	r2, [sp, #16]
   844fc:	3207      	adds	r2, #7
   844fe:	f022 0207 	bic.w	r2, r2, #7
   84502:	f102 0108 	add.w	r1, r2, #8
   84506:	9104      	str	r1, [sp, #16]
   84508:	e9d2 4500 	ldrd	r4, r5, [r2]
   8450c:	f016 0901 	ands.w	r9, r6, #1
   84510:	f000 817e 	beq.w	84810 <_vfiprintf_r+0xa14>
   84514:	ea54 0205 	orrs.w	r2, r4, r5
   84518:	f040 822b 	bne.w	84972 <_vfiprintf_r+0xb76>
   8451c:	f04f 0300 	mov.w	r3, #0
   84520:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84524:	9b01      	ldr	r3, [sp, #4]
   84526:	2b00      	cmp	r3, #0
   84528:	f2c0 82f3 	blt.w	84b12 <_vfiprintf_r+0xd16>
   8452c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84530:	e581      	b.n	84036 <_vfiprintf_r+0x23a>
   84532:	9a04      	ldr	r2, [sp, #16]
   84534:	f04f 0100 	mov.w	r1, #0
   84538:	6813      	ldr	r3, [r2, #0]
   8453a:	2501      	movs	r5, #1
   8453c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84540:	4613      	mov	r3, r2
   84542:	3304      	adds	r3, #4
   84544:	9406      	str	r4, [sp, #24]
   84546:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8454a:	9304      	str	r3, [sp, #16]
   8454c:	9503      	str	r5, [sp, #12]
   8454e:	af10      	add	r7, sp, #64	; 0x40
   84550:	2300      	movs	r3, #0
   84552:	9301      	str	r3, [sp, #4]
   84554:	e582      	b.n	8405c <_vfiprintf_r+0x260>
   84556:	f898 3000 	ldrb.w	r3, [r8]
   8455a:	2800      	cmp	r0, #0
   8455c:	f47f acb5 	bne.w	83eca <_vfiprintf_r+0xce>
   84560:	2101      	movs	r1, #1
   84562:	2020      	movs	r0, #32
   84564:	e4b1      	b.n	83eca <_vfiprintf_r+0xce>
   84566:	f046 0601 	orr.w	r6, r6, #1
   8456a:	f898 3000 	ldrb.w	r3, [r8]
   8456e:	e4ac      	b.n	83eca <_vfiprintf_r+0xce>
   84570:	9406      	str	r4, [sp, #24]
   84572:	2900      	cmp	r1, #0
   84574:	f040 832a 	bne.w	84bcc <_vfiprintf_r+0xdd0>
   84578:	06b2      	lsls	r2, r6, #26
   8457a:	4892      	ldr	r0, [pc, #584]	; (847c4 <_vfiprintf_r+0x9c8>)
   8457c:	d4bd      	bmi.n	844fa <_vfiprintf_r+0x6fe>
   8457e:	9904      	ldr	r1, [sp, #16]
   84580:	06f7      	lsls	r7, r6, #27
   84582:	460a      	mov	r2, r1
   84584:	f100 819d 	bmi.w	848c2 <_vfiprintf_r+0xac6>
   84588:	0675      	lsls	r5, r6, #25
   8458a:	f140 819a 	bpl.w	848c2 <_vfiprintf_r+0xac6>
   8458e:	3204      	adds	r2, #4
   84590:	880c      	ldrh	r4, [r1, #0]
   84592:	9204      	str	r2, [sp, #16]
   84594:	2500      	movs	r5, #0
   84596:	e7b9      	b.n	8450c <_vfiprintf_r+0x710>
   84598:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   8459c:	f898 3000 	ldrb.w	r3, [r8]
   845a0:	e493      	b.n	83eca <_vfiprintf_r+0xce>
   845a2:	f898 3000 	ldrb.w	r3, [r8]
   845a6:	2b6c      	cmp	r3, #108	; 0x6c
   845a8:	bf03      	ittte	eq
   845aa:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   845ae:	f046 0620 	orreq.w	r6, r6, #32
   845b2:	f108 0801 	addeq.w	r8, r8, #1
   845b6:	f046 0610 	orrne.w	r6, r6, #16
   845ba:	e486      	b.n	83eca <_vfiprintf_r+0xce>
   845bc:	2900      	cmp	r1, #0
   845be:	f040 8302 	bne.w	84bc6 <_vfiprintf_r+0xdca>
   845c2:	06b4      	lsls	r4, r6, #26
   845c4:	f140 8220 	bpl.w	84a08 <_vfiprintf_r+0xc0c>
   845c8:	9a04      	ldr	r2, [sp, #16]
   845ca:	4613      	mov	r3, r2
   845cc:	3304      	adds	r3, #4
   845ce:	9304      	str	r3, [sp, #16]
   845d0:	9b02      	ldr	r3, [sp, #8]
   845d2:	6811      	ldr	r1, [r2, #0]
   845d4:	17dd      	asrs	r5, r3, #31
   845d6:	461a      	mov	r2, r3
   845d8:	462b      	mov	r3, r5
   845da:	e9c1 2300 	strd	r2, r3, [r1]
   845de:	e43e      	b.n	83e5e <_vfiprintf_r+0x62>
   845e0:	9406      	str	r4, [sp, #24]
   845e2:	2900      	cmp	r1, #0
   845e4:	f43f ae51 	beq.w	8428a <_vfiprintf_r+0x48e>
   845e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   845ec:	e64d      	b.n	8428a <_vfiprintf_r+0x48e>
   845ee:	9406      	str	r4, [sp, #24]
   845f0:	2900      	cmp	r1, #0
   845f2:	f040 82e5 	bne.w	84bc0 <_vfiprintf_r+0xdc4>
   845f6:	2b00      	cmp	r3, #0
   845f8:	f000 8094 	beq.w	84724 <_vfiprintf_r+0x928>
   845fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84600:	f04f 0300 	mov.w	r3, #0
   84604:	2501      	movs	r5, #1
   84606:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8460a:	9503      	str	r5, [sp, #12]
   8460c:	af10      	add	r7, sp, #64	; 0x40
   8460e:	e79f      	b.n	84550 <_vfiprintf_r+0x754>
   84610:	aa0d      	add	r2, sp, #52	; 0x34
   84612:	9900      	ldr	r1, [sp, #0]
   84614:	4648      	mov	r0, r9
   84616:	9309      	str	r3, [sp, #36]	; 0x24
   84618:	f7ff fbb4 	bl	83d84 <__sprint_r.part.0>
   8461c:	2800      	cmp	r0, #0
   8461e:	f040 8088 	bne.w	84732 <_vfiprintf_r+0x936>
   84622:	980e      	ldr	r0, [sp, #56]	; 0x38
   84624:	46d4      	mov	ip, sl
   84626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84628:	f100 0e01 	add.w	lr, r0, #1
   8462c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8462e:	e53a      	b.n	840a6 <_vfiprintf_r+0x2aa>
   84630:	aa0d      	add	r2, sp, #52	; 0x34
   84632:	9900      	ldr	r1, [sp, #0]
   84634:	9805      	ldr	r0, [sp, #20]
   84636:	f7ff fba5 	bl	83d84 <__sprint_r.part.0>
   8463a:	2800      	cmp	r0, #0
   8463c:	d179      	bne.n	84732 <_vfiprintf_r+0x936>
   8463e:	46d3      	mov	fp, sl
   84640:	980e      	ldr	r0, [sp, #56]	; 0x38
   84642:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84648:	f100 0e01 	add.w	lr, r0, #1
   8464c:	2b00      	cmp	r3, #0
   8464e:	f43f ad59 	beq.w	84104 <_vfiprintf_r+0x308>
   84652:	3201      	adds	r2, #1
   84654:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84658:	2301      	movs	r3, #1
   8465a:	f1be 0f07 	cmp.w	lr, #7
   8465e:	920f      	str	r2, [sp, #60]	; 0x3c
   84660:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84664:	e88b 000a 	stmia.w	fp, {r1, r3}
   84668:	f340 80c0 	ble.w	847ec <_vfiprintf_r+0x9f0>
   8466c:	2a00      	cmp	r2, #0
   8466e:	f040 814d 	bne.w	8490c <_vfiprintf_r+0xb10>
   84672:	9907      	ldr	r1, [sp, #28]
   84674:	2900      	cmp	r1, #0
   84676:	f040 80bf 	bne.w	847f8 <_vfiprintf_r+0x9fc>
   8467a:	469e      	mov	lr, r3
   8467c:	4610      	mov	r0, r2
   8467e:	46d3      	mov	fp, sl
   84680:	9b08      	ldr	r3, [sp, #32]
   84682:	2b80      	cmp	r3, #128	; 0x80
   84684:	f43f ad59 	beq.w	8413a <_vfiprintf_r+0x33e>
   84688:	9b01      	ldr	r3, [sp, #4]
   8468a:	9903      	ldr	r1, [sp, #12]
   8468c:	1a5c      	subs	r4, r3, r1
   8468e:	2c00      	cmp	r4, #0
   84690:	f77f ad9c 	ble.w	841cc <_vfiprintf_r+0x3d0>
   84694:	2c10      	cmp	r4, #16
   84696:	f8df 9130 	ldr.w	r9, [pc, #304]	; 847c8 <_vfiprintf_r+0x9cc>
   8469a:	dd25      	ble.n	846e8 <_vfiprintf_r+0x8ec>
   8469c:	46dc      	mov	ip, fp
   8469e:	2310      	movs	r3, #16
   846a0:	46c3      	mov	fp, r8
   846a2:	46a8      	mov	r8, r5
   846a4:	464d      	mov	r5, r9
   846a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   846aa:	e007      	b.n	846bc <_vfiprintf_r+0x8c0>
   846ac:	f100 0e02 	add.w	lr, r0, #2
   846b0:	4608      	mov	r0, r1
   846b2:	f10c 0c08 	add.w	ip, ip, #8
   846b6:	3c10      	subs	r4, #16
   846b8:	2c10      	cmp	r4, #16
   846ba:	dd11      	ble.n	846e0 <_vfiprintf_r+0x8e4>
   846bc:	1c41      	adds	r1, r0, #1
   846be:	3210      	adds	r2, #16
   846c0:	2907      	cmp	r1, #7
   846c2:	920f      	str	r2, [sp, #60]	; 0x3c
   846c4:	f8cc 5000 	str.w	r5, [ip]
   846c8:	f8cc 3004 	str.w	r3, [ip, #4]
   846cc:	910e      	str	r1, [sp, #56]	; 0x38
   846ce:	dded      	ble.n	846ac <_vfiprintf_r+0x8b0>
   846d0:	b9d2      	cbnz	r2, 84708 <_vfiprintf_r+0x90c>
   846d2:	3c10      	subs	r4, #16
   846d4:	2c10      	cmp	r4, #16
   846d6:	f04f 0e01 	mov.w	lr, #1
   846da:	4610      	mov	r0, r2
   846dc:	46d4      	mov	ip, sl
   846de:	dced      	bgt.n	846bc <_vfiprintf_r+0x8c0>
   846e0:	46a9      	mov	r9, r5
   846e2:	4645      	mov	r5, r8
   846e4:	46d8      	mov	r8, fp
   846e6:	46e3      	mov	fp, ip
   846e8:	4422      	add	r2, r4
   846ea:	f1be 0f07 	cmp.w	lr, #7
   846ee:	920f      	str	r2, [sp, #60]	; 0x3c
   846f0:	f8cb 9000 	str.w	r9, [fp]
   846f4:	f8cb 4004 	str.w	r4, [fp, #4]
   846f8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   846fc:	dc2e      	bgt.n	8475c <_vfiprintf_r+0x960>
   846fe:	f10b 0b08 	add.w	fp, fp, #8
   84702:	f10e 0e01 	add.w	lr, lr, #1
   84706:	e561      	b.n	841cc <_vfiprintf_r+0x3d0>
   84708:	aa0d      	add	r2, sp, #52	; 0x34
   8470a:	9900      	ldr	r1, [sp, #0]
   8470c:	4648      	mov	r0, r9
   8470e:	9301      	str	r3, [sp, #4]
   84710:	f7ff fb38 	bl	83d84 <__sprint_r.part.0>
   84714:	b968      	cbnz	r0, 84732 <_vfiprintf_r+0x936>
   84716:	980e      	ldr	r0, [sp, #56]	; 0x38
   84718:	46d4      	mov	ip, sl
   8471a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8471c:	f100 0e01 	add.w	lr, r0, #1
   84720:	9b01      	ldr	r3, [sp, #4]
   84722:	e7c8      	b.n	846b6 <_vfiprintf_r+0x8ba>
   84724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84726:	b123      	cbz	r3, 84732 <_vfiprintf_r+0x936>
   84728:	9805      	ldr	r0, [sp, #20]
   8472a:	aa0d      	add	r2, sp, #52	; 0x34
   8472c:	9900      	ldr	r1, [sp, #0]
   8472e:	f7ff fb29 	bl	83d84 <__sprint_r.part.0>
   84732:	9b00      	ldr	r3, [sp, #0]
   84734:	899b      	ldrh	r3, [r3, #12]
   84736:	065a      	lsls	r2, r3, #25
   84738:	f100 817b 	bmi.w	84a32 <_vfiprintf_r+0xc36>
   8473c:	9802      	ldr	r0, [sp, #8]
   8473e:	b02b      	add	sp, #172	; 0xac
   84740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84744:	aa0d      	add	r2, sp, #52	; 0x34
   84746:	9900      	ldr	r1, [sp, #0]
   84748:	4648      	mov	r0, r9
   8474a:	f7ff fb1b 	bl	83d84 <__sprint_r.part.0>
   8474e:	2800      	cmp	r0, #0
   84750:	d1ef      	bne.n	84732 <_vfiprintf_r+0x936>
   84752:	990e      	ldr	r1, [sp, #56]	; 0x38
   84754:	46d3      	mov	fp, sl
   84756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84758:	1c48      	adds	r0, r1, #1
   8475a:	e55e      	b.n	8421a <_vfiprintf_r+0x41e>
   8475c:	2a00      	cmp	r2, #0
   8475e:	f040 80fa 	bne.w	84956 <_vfiprintf_r+0xb5a>
   84762:	46d3      	mov	fp, sl
   84764:	9a03      	ldr	r2, [sp, #12]
   84766:	2301      	movs	r3, #1
   84768:	921b      	str	r2, [sp, #108]	; 0x6c
   8476a:	920f      	str	r2, [sp, #60]	; 0x3c
   8476c:	971a      	str	r7, [sp, #104]	; 0x68
   8476e:	930e      	str	r3, [sp, #56]	; 0x38
   84770:	f10b 0b08 	add.w	fp, fp, #8
   84774:	0771      	lsls	r1, r6, #29
   84776:	d504      	bpl.n	84782 <_vfiprintf_r+0x986>
   84778:	9b06      	ldr	r3, [sp, #24]
   8477a:	1b5c      	subs	r4, r3, r5
   8477c:	2c00      	cmp	r4, #0
   8477e:	f73f ad3d 	bgt.w	841fc <_vfiprintf_r+0x400>
   84782:	9b02      	ldr	r3, [sp, #8]
   84784:	9906      	ldr	r1, [sp, #24]
   84786:	42a9      	cmp	r1, r5
   84788:	bfac      	ite	ge
   8478a:	185b      	addge	r3, r3, r1
   8478c:	195b      	addlt	r3, r3, r5
   8478e:	9302      	str	r3, [sp, #8]
   84790:	2a00      	cmp	r2, #0
   84792:	f040 80ad 	bne.w	848f0 <_vfiprintf_r+0xaf4>
   84796:	2300      	movs	r3, #0
   84798:	930e      	str	r3, [sp, #56]	; 0x38
   8479a:	46d3      	mov	fp, sl
   8479c:	f7ff bb5f 	b.w	83e5e <_vfiprintf_r+0x62>
   847a0:	aa0d      	add	r2, sp, #52	; 0x34
   847a2:	9900      	ldr	r1, [sp, #0]
   847a4:	4648      	mov	r0, r9
   847a6:	9307      	str	r3, [sp, #28]
   847a8:	f7ff faec 	bl	83d84 <__sprint_r.part.0>
   847ac:	2800      	cmp	r0, #0
   847ae:	d1c0      	bne.n	84732 <_vfiprintf_r+0x936>
   847b0:	980e      	ldr	r0, [sp, #56]	; 0x38
   847b2:	46d6      	mov	lr, sl
   847b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   847b6:	f100 0c01 	add.w	ip, r0, #1
   847ba:	9b07      	ldr	r3, [sp, #28]
   847bc:	e4d4      	b.n	84168 <_vfiprintf_r+0x36c>
   847be:	bf00      	nop
   847c0:	00086a8c 	.word	0x00086a8c
   847c4:	00086aa0 	.word	0x00086aa0
   847c8:	00086a7c 	.word	0x00086a7c
   847cc:	2a00      	cmp	r2, #0
   847ce:	f47f af2f 	bne.w	84630 <_vfiprintf_r+0x834>
   847d2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   847d6:	2b00      	cmp	r3, #0
   847d8:	f000 80f3 	beq.w	849c2 <_vfiprintf_r+0xbc6>
   847dc:	2301      	movs	r3, #1
   847de:	461a      	mov	r2, r3
   847e0:	469e      	mov	lr, r3
   847e2:	46d3      	mov	fp, sl
   847e4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   847e8:	931b      	str	r3, [sp, #108]	; 0x6c
   847ea:	911a      	str	r1, [sp, #104]	; 0x68
   847ec:	4670      	mov	r0, lr
   847ee:	f10b 0b08 	add.w	fp, fp, #8
   847f2:	f10e 0e01 	add.w	lr, lr, #1
   847f6:	e485      	b.n	84104 <_vfiprintf_r+0x308>
   847f8:	469e      	mov	lr, r3
   847fa:	46d3      	mov	fp, sl
   847fc:	a90c      	add	r1, sp, #48	; 0x30
   847fe:	2202      	movs	r2, #2
   84800:	911a      	str	r1, [sp, #104]	; 0x68
   84802:	921b      	str	r2, [sp, #108]	; 0x6c
   84804:	4670      	mov	r0, lr
   84806:	f10b 0b08 	add.w	fp, fp, #8
   8480a:	f10e 0e01 	add.w	lr, lr, #1
   8480e:	e737      	b.n	84680 <_vfiprintf_r+0x884>
   84810:	9b01      	ldr	r3, [sp, #4]
   84812:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84816:	2b00      	cmp	r3, #0
   84818:	f2c0 811b 	blt.w	84a52 <_vfiprintf_r+0xc56>
   8481c:	ea54 0305 	orrs.w	r3, r4, r5
   84820:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84824:	f43f ac07 	beq.w	84036 <_vfiprintf_r+0x23a>
   84828:	4657      	mov	r7, sl
   8482a:	0923      	lsrs	r3, r4, #4
   8482c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84830:	0929      	lsrs	r1, r5, #4
   84832:	f004 020f 	and.w	r2, r4, #15
   84836:	460d      	mov	r5, r1
   84838:	461c      	mov	r4, r3
   8483a:	5c83      	ldrb	r3, [r0, r2]
   8483c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84840:	ea54 0305 	orrs.w	r3, r4, r5
   84844:	d1f1      	bne.n	8482a <_vfiprintf_r+0xa2e>
   84846:	ebc7 030a 	rsb	r3, r7, sl
   8484a:	9303      	str	r3, [sp, #12]
   8484c:	f7ff bbfc 	b.w	84048 <_vfiprintf_r+0x24c>
   84850:	aa0d      	add	r2, sp, #52	; 0x34
   84852:	9900      	ldr	r1, [sp, #0]
   84854:	9805      	ldr	r0, [sp, #20]
   84856:	f7ff fa95 	bl	83d84 <__sprint_r.part.0>
   8485a:	2800      	cmp	r0, #0
   8485c:	f47f af69 	bne.w	84732 <_vfiprintf_r+0x936>
   84860:	46d3      	mov	fp, sl
   84862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84864:	e786      	b.n	84774 <_vfiprintf_r+0x978>
   84866:	f016 0210 	ands.w	r2, r6, #16
   8486a:	f000 80b5 	beq.w	849d8 <_vfiprintf_r+0xbdc>
   8486e:	9904      	ldr	r1, [sp, #16]
   84870:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84874:	460a      	mov	r2, r1
   84876:	680c      	ldr	r4, [r1, #0]
   84878:	9901      	ldr	r1, [sp, #4]
   8487a:	3204      	adds	r2, #4
   8487c:	2900      	cmp	r1, #0
   8487e:	f04f 0500 	mov.w	r5, #0
   84882:	f2c0 8152 	blt.w	84b2a <_vfiprintf_r+0xd2e>
   84886:	ea54 0105 	orrs.w	r1, r4, r5
   8488a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8488e:	9204      	str	r2, [sp, #16]
   84890:	f43f ad5d 	beq.w	8434e <_vfiprintf_r+0x552>
   84894:	4699      	mov	r9, r3
   84896:	e562      	b.n	8435e <_vfiprintf_r+0x562>
   84898:	9a04      	ldr	r2, [sp, #16]
   8489a:	06f7      	lsls	r7, r6, #27
   8489c:	4613      	mov	r3, r2
   8489e:	d409      	bmi.n	848b4 <_vfiprintf_r+0xab8>
   848a0:	0675      	lsls	r5, r6, #25
   848a2:	d507      	bpl.n	848b4 <_vfiprintf_r+0xab8>
   848a4:	f9b2 4000 	ldrsh.w	r4, [r2]
   848a8:	3304      	adds	r3, #4
   848aa:	17e5      	asrs	r5, r4, #31
   848ac:	9304      	str	r3, [sp, #16]
   848ae:	4622      	mov	r2, r4
   848b0:	462b      	mov	r3, r5
   848b2:	e4f7      	b.n	842a4 <_vfiprintf_r+0x4a8>
   848b4:	681c      	ldr	r4, [r3, #0]
   848b6:	3304      	adds	r3, #4
   848b8:	17e5      	asrs	r5, r4, #31
   848ba:	9304      	str	r3, [sp, #16]
   848bc:	4622      	mov	r2, r4
   848be:	462b      	mov	r3, r5
   848c0:	e4f0      	b.n	842a4 <_vfiprintf_r+0x4a8>
   848c2:	6814      	ldr	r4, [r2, #0]
   848c4:	3204      	adds	r2, #4
   848c6:	9204      	str	r2, [sp, #16]
   848c8:	2500      	movs	r5, #0
   848ca:	e61f      	b.n	8450c <_vfiprintf_r+0x710>
   848cc:	f04f 0900 	mov.w	r9, #0
   848d0:	ea54 0305 	orrs.w	r3, r4, r5
   848d4:	f47f acf7 	bne.w	842c6 <_vfiprintf_r+0x4ca>
   848d8:	e5d8      	b.n	8448c <_vfiprintf_r+0x690>
   848da:	aa0d      	add	r2, sp, #52	; 0x34
   848dc:	9900      	ldr	r1, [sp, #0]
   848de:	9805      	ldr	r0, [sp, #20]
   848e0:	f7ff fa50 	bl	83d84 <__sprint_r.part.0>
   848e4:	2800      	cmp	r0, #0
   848e6:	f47f af24 	bne.w	84732 <_vfiprintf_r+0x936>
   848ea:	46d3      	mov	fp, sl
   848ec:	f7ff bb51 	b.w	83f92 <_vfiprintf_r+0x196>
   848f0:	aa0d      	add	r2, sp, #52	; 0x34
   848f2:	9900      	ldr	r1, [sp, #0]
   848f4:	9805      	ldr	r0, [sp, #20]
   848f6:	f7ff fa45 	bl	83d84 <__sprint_r.part.0>
   848fa:	2800      	cmp	r0, #0
   848fc:	f43f af4b 	beq.w	84796 <_vfiprintf_r+0x99a>
   84900:	e717      	b.n	84732 <_vfiprintf_r+0x936>
   84902:	2400      	movs	r4, #0
   84904:	2500      	movs	r5, #0
   84906:	f04f 0900 	mov.w	r9, #0
   8490a:	e78d      	b.n	84828 <_vfiprintf_r+0xa2c>
   8490c:	aa0d      	add	r2, sp, #52	; 0x34
   8490e:	9900      	ldr	r1, [sp, #0]
   84910:	9805      	ldr	r0, [sp, #20]
   84912:	f7ff fa37 	bl	83d84 <__sprint_r.part.0>
   84916:	2800      	cmp	r0, #0
   84918:	f47f af0b 	bne.w	84732 <_vfiprintf_r+0x936>
   8491c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8491e:	46d3      	mov	fp, sl
   84920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84922:	f100 0e01 	add.w	lr, r0, #1
   84926:	f7ff bbed 	b.w	84104 <_vfiprintf_r+0x308>
   8492a:	aa0d      	add	r2, sp, #52	; 0x34
   8492c:	9900      	ldr	r1, [sp, #0]
   8492e:	9805      	ldr	r0, [sp, #20]
   84930:	f7ff fa28 	bl	83d84 <__sprint_r.part.0>
   84934:	2800      	cmp	r0, #0
   84936:	f47f aefc 	bne.w	84732 <_vfiprintf_r+0x936>
   8493a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8493c:	46d3      	mov	fp, sl
   8493e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84940:	f100 0e01 	add.w	lr, r0, #1
   84944:	e69c      	b.n	84680 <_vfiprintf_r+0x884>
   84946:	2a00      	cmp	r2, #0
   84948:	f040 80c8 	bne.w	84adc <_vfiprintf_r+0xce0>
   8494c:	f04f 0e01 	mov.w	lr, #1
   84950:	4610      	mov	r0, r2
   84952:	46d3      	mov	fp, sl
   84954:	e698      	b.n	84688 <_vfiprintf_r+0x88c>
   84956:	aa0d      	add	r2, sp, #52	; 0x34
   84958:	9900      	ldr	r1, [sp, #0]
   8495a:	9805      	ldr	r0, [sp, #20]
   8495c:	f7ff fa12 	bl	83d84 <__sprint_r.part.0>
   84960:	2800      	cmp	r0, #0
   84962:	f47f aee6 	bne.w	84732 <_vfiprintf_r+0x936>
   84966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84968:	46d3      	mov	fp, sl
   8496a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8496c:	f103 0e01 	add.w	lr, r3, #1
   84970:	e42c      	b.n	841cc <_vfiprintf_r+0x3d0>
   84972:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84976:	f04f 0300 	mov.w	r3, #0
   8497a:	2230      	movs	r2, #48	; 0x30
   8497c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84980:	9a01      	ldr	r2, [sp, #4]
   84982:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84986:	2a00      	cmp	r2, #0
   84988:	f046 0302 	orr.w	r3, r6, #2
   8498c:	f2c0 80bb 	blt.w	84b06 <_vfiprintf_r+0xd0a>
   84990:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84994:	f046 0602 	orr.w	r6, r6, #2
   84998:	f04f 0900 	mov.w	r9, #0
   8499c:	e744      	b.n	84828 <_vfiprintf_r+0xa2c>
   8499e:	f04f 0900 	mov.w	r9, #0
   849a2:	488c      	ldr	r0, [pc, #560]	; (84bd4 <_vfiprintf_r+0xdd8>)
   849a4:	e740      	b.n	84828 <_vfiprintf_r+0xa2c>
   849a6:	9b01      	ldr	r3, [sp, #4]
   849a8:	4264      	negs	r4, r4
   849aa:	f04f 092d 	mov.w	r9, #45	; 0x2d
   849ae:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   849b2:	2b00      	cmp	r3, #0
   849b4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   849b8:	f6ff ac85 	blt.w	842c6 <_vfiprintf_r+0x4ca>
   849bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   849c0:	e481      	b.n	842c6 <_vfiprintf_r+0x4ca>
   849c2:	9b07      	ldr	r3, [sp, #28]
   849c4:	2b00      	cmp	r3, #0
   849c6:	d063      	beq.n	84a90 <_vfiprintf_r+0xc94>
   849c8:	ab0c      	add	r3, sp, #48	; 0x30
   849ca:	2202      	movs	r2, #2
   849cc:	931a      	str	r3, [sp, #104]	; 0x68
   849ce:	921b      	str	r2, [sp, #108]	; 0x6c
   849d0:	f04f 0e01 	mov.w	lr, #1
   849d4:	46d3      	mov	fp, sl
   849d6:	e715      	b.n	84804 <_vfiprintf_r+0xa08>
   849d8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   849dc:	d03b      	beq.n	84a56 <_vfiprintf_r+0xc5a>
   849de:	9904      	ldr	r1, [sp, #16]
   849e0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   849e4:	460b      	mov	r3, r1
   849e6:	880c      	ldrh	r4, [r1, #0]
   849e8:	9901      	ldr	r1, [sp, #4]
   849ea:	3304      	adds	r3, #4
   849ec:	2900      	cmp	r1, #0
   849ee:	f04f 0500 	mov.w	r5, #0
   849f2:	f2c0 808c 	blt.w	84b0e <_vfiprintf_r+0xd12>
   849f6:	ea54 0105 	orrs.w	r1, r4, r5
   849fa:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   849fe:	9304      	str	r3, [sp, #16]
   84a00:	f43f aca5 	beq.w	8434e <_vfiprintf_r+0x552>
   84a04:	4691      	mov	r9, r2
   84a06:	e4aa      	b.n	8435e <_vfiprintf_r+0x562>
   84a08:	06f0      	lsls	r0, r6, #27
   84a0a:	d40a      	bmi.n	84a22 <_vfiprintf_r+0xc26>
   84a0c:	0671      	lsls	r1, r6, #25
   84a0e:	d508      	bpl.n	84a22 <_vfiprintf_r+0xc26>
   84a10:	9a04      	ldr	r2, [sp, #16]
   84a12:	6813      	ldr	r3, [r2, #0]
   84a14:	3204      	adds	r2, #4
   84a16:	9204      	str	r2, [sp, #16]
   84a18:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84a1c:	801a      	strh	r2, [r3, #0]
   84a1e:	f7ff ba1e 	b.w	83e5e <_vfiprintf_r+0x62>
   84a22:	9a04      	ldr	r2, [sp, #16]
   84a24:	6813      	ldr	r3, [r2, #0]
   84a26:	3204      	adds	r2, #4
   84a28:	9204      	str	r2, [sp, #16]
   84a2a:	9a02      	ldr	r2, [sp, #8]
   84a2c:	601a      	str	r2, [r3, #0]
   84a2e:	f7ff ba16 	b.w	83e5e <_vfiprintf_r+0x62>
   84a32:	f04f 30ff 	mov.w	r0, #4294967295
   84a36:	f7ff bac9 	b.w	83fcc <_vfiprintf_r+0x1d0>
   84a3a:	4616      	mov	r6, r2
   84a3c:	4865      	ldr	r0, [pc, #404]	; (84bd4 <_vfiprintf_r+0xdd8>)
   84a3e:	ea54 0205 	orrs.w	r2, r4, r5
   84a42:	9304      	str	r3, [sp, #16]
   84a44:	f04f 0900 	mov.w	r9, #0
   84a48:	f47f aeee 	bne.w	84828 <_vfiprintf_r+0xa2c>
   84a4c:	2400      	movs	r4, #0
   84a4e:	2500      	movs	r5, #0
   84a50:	e6ea      	b.n	84828 <_vfiprintf_r+0xa2c>
   84a52:	9b04      	ldr	r3, [sp, #16]
   84a54:	e7f3      	b.n	84a3e <_vfiprintf_r+0xc42>
   84a56:	9a04      	ldr	r2, [sp, #16]
   84a58:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84a5c:	4613      	mov	r3, r2
   84a5e:	6814      	ldr	r4, [r2, #0]
   84a60:	9a01      	ldr	r2, [sp, #4]
   84a62:	3304      	adds	r3, #4
   84a64:	2a00      	cmp	r2, #0
   84a66:	f04f 0500 	mov.w	r5, #0
   84a6a:	db50      	blt.n	84b0e <_vfiprintf_r+0xd12>
   84a6c:	ea54 0205 	orrs.w	r2, r4, r5
   84a70:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84a74:	9304      	str	r3, [sp, #16]
   84a76:	f47f ac72 	bne.w	8435e <_vfiprintf_r+0x562>
   84a7a:	e468      	b.n	8434e <_vfiprintf_r+0x552>
   84a7c:	aa0d      	add	r2, sp, #52	; 0x34
   84a7e:	9900      	ldr	r1, [sp, #0]
   84a80:	9805      	ldr	r0, [sp, #20]
   84a82:	f7ff f97f 	bl	83d84 <__sprint_r.part.0>
   84a86:	2800      	cmp	r0, #0
   84a88:	f47f ae53 	bne.w	84732 <_vfiprintf_r+0x936>
   84a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a8e:	e678      	b.n	84782 <_vfiprintf_r+0x986>
   84a90:	4610      	mov	r0, r2
   84a92:	f04f 0e01 	mov.w	lr, #1
   84a96:	46d3      	mov	fp, sl
   84a98:	e5f6      	b.n	84688 <_vfiprintf_r+0x88c>
   84a9a:	9904      	ldr	r1, [sp, #16]
   84a9c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84aa0:	460a      	mov	r2, r1
   84aa2:	880c      	ldrh	r4, [r1, #0]
   84aa4:	9901      	ldr	r1, [sp, #4]
   84aa6:	3204      	adds	r2, #4
   84aa8:	2900      	cmp	r1, #0
   84aaa:	f04f 0500 	mov.w	r5, #0
   84aae:	db55      	blt.n	84b5c <_vfiprintf_r+0xd60>
   84ab0:	ea54 0105 	orrs.w	r1, r4, r5
   84ab4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84ab8:	9204      	str	r2, [sp, #16]
   84aba:	4699      	mov	r9, r3
   84abc:	f47f ac03 	bne.w	842c6 <_vfiprintf_r+0x4ca>
   84ac0:	e4df      	b.n	84482 <_vfiprintf_r+0x686>
   84ac2:	9304      	str	r3, [sp, #16]
   84ac4:	e704      	b.n	848d0 <_vfiprintf_r+0xad4>
   84ac6:	4638      	mov	r0, r7
   84ac8:	9404      	str	r4, [sp, #16]
   84aca:	f7ff f92d 	bl	83d28 <strlen>
   84ace:	2300      	movs	r3, #0
   84ad0:	9003      	str	r0, [sp, #12]
   84ad2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84ad6:	9301      	str	r3, [sp, #4]
   84ad8:	f7ff bab6 	b.w	84048 <_vfiprintf_r+0x24c>
   84adc:	aa0d      	add	r2, sp, #52	; 0x34
   84ade:	9900      	ldr	r1, [sp, #0]
   84ae0:	9805      	ldr	r0, [sp, #20]
   84ae2:	f7ff f94f 	bl	83d84 <__sprint_r.part.0>
   84ae6:	2800      	cmp	r0, #0
   84ae8:	f47f ae23 	bne.w	84732 <_vfiprintf_r+0x936>
   84aec:	980e      	ldr	r0, [sp, #56]	; 0x38
   84aee:	46d3      	mov	fp, sl
   84af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84af2:	f100 0e01 	add.w	lr, r0, #1
   84af6:	e5c7      	b.n	84688 <_vfiprintf_r+0x88c>
   84af8:	980e      	ldr	r0, [sp, #56]	; 0x38
   84afa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84afc:	3001      	adds	r0, #1
   84afe:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 84bdc <_vfiprintf_r+0xde0>
   84b02:	f7ff baec 	b.w	840de <_vfiprintf_r+0x2e2>
   84b06:	461e      	mov	r6, r3
   84b08:	f04f 0900 	mov.w	r9, #0
   84b0c:	e68c      	b.n	84828 <_vfiprintf_r+0xa2c>
   84b0e:	9304      	str	r3, [sp, #16]
   84b10:	e423      	b.n	8435a <_vfiprintf_r+0x55e>
   84b12:	f04f 0900 	mov.w	r9, #0
   84b16:	e799      	b.n	84a4c <_vfiprintf_r+0xc50>
   84b18:	2b06      	cmp	r3, #6
   84b1a:	bf28      	it	cs
   84b1c:	2306      	movcs	r3, #6
   84b1e:	9303      	str	r3, [sp, #12]
   84b20:	9404      	str	r4, [sp, #16]
   84b22:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   84b26:	4f2c      	ldr	r7, [pc, #176]	; (84bd8 <_vfiprintf_r+0xddc>)
   84b28:	e512      	b.n	84550 <_vfiprintf_r+0x754>
   84b2a:	9204      	str	r2, [sp, #16]
   84b2c:	e415      	b.n	8435a <_vfiprintf_r+0x55e>
   84b2e:	980e      	ldr	r0, [sp, #56]	; 0x38
   84b30:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 84bdc <_vfiprintf_r+0xde0>
   84b34:	3001      	adds	r0, #1
   84b36:	f7ff bb88 	b.w	8424a <_vfiprintf_r+0x44e>
   84b3a:	46f4      	mov	ip, lr
   84b3c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 84be0 <_vfiprintf_r+0xde4>
   84b40:	f7ff bb2d 	b.w	8419e <_vfiprintf_r+0x3a2>
   84b44:	2200      	movs	r2, #0
   84b46:	9201      	str	r2, [sp, #4]
   84b48:	f7ff b9c1 	b.w	83ece <_vfiprintf_r+0xd2>
   84b4c:	9b01      	ldr	r3, [sp, #4]
   84b4e:	9404      	str	r4, [sp, #16]
   84b50:	9303      	str	r3, [sp, #12]
   84b52:	9001      	str	r0, [sp, #4]
   84b54:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84b58:	f7ff ba76 	b.w	84048 <_vfiprintf_r+0x24c>
   84b5c:	9204      	str	r2, [sp, #16]
   84b5e:	4699      	mov	r9, r3
   84b60:	e6b6      	b.n	848d0 <_vfiprintf_r+0xad4>
   84b62:	9a04      	ldr	r2, [sp, #16]
   84b64:	6813      	ldr	r3, [r2, #0]
   84b66:	3204      	adds	r2, #4
   84b68:	2b00      	cmp	r3, #0
   84b6a:	9301      	str	r3, [sp, #4]
   84b6c:	9204      	str	r2, [sp, #16]
   84b6e:	f898 3001 	ldrb.w	r3, [r8, #1]
   84b72:	46a8      	mov	r8, r5
   84b74:	f6bf a9a9 	bge.w	83eca <_vfiprintf_r+0xce>
   84b78:	f04f 32ff 	mov.w	r2, #4294967295
   84b7c:	9201      	str	r2, [sp, #4]
   84b7e:	f7ff b9a4 	b.w	83eca <_vfiprintf_r+0xce>
   84b82:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b86:	e45f      	b.n	84448 <_vfiprintf_r+0x64c>
   84b88:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b8c:	f7ff bbc4 	b.w	84318 <_vfiprintf_r+0x51c>
   84b90:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b94:	f7ff bb77 	b.w	84286 <_vfiprintf_r+0x48a>
   84b98:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84b9c:	e487      	b.n	844ae <_vfiprintf_r+0x6b2>
   84b9e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84ba2:	e4a7      	b.n	844f4 <_vfiprintf_r+0x6f8>
   84ba4:	4699      	mov	r9, r3
   84ba6:	07f3      	lsls	r3, r6, #31
   84ba8:	d505      	bpl.n	84bb6 <_vfiprintf_r+0xdba>
   84baa:	af2a      	add	r7, sp, #168	; 0xa8
   84bac:	2330      	movs	r3, #48	; 0x30
   84bae:	f807 3d41 	strb.w	r3, [r7, #-65]!
   84bb2:	f7ff bba2 	b.w	842fa <_vfiprintf_r+0x4fe>
   84bb6:	9b01      	ldr	r3, [sp, #4]
   84bb8:	4657      	mov	r7, sl
   84bba:	9303      	str	r3, [sp, #12]
   84bbc:	f7ff ba44 	b.w	84048 <_vfiprintf_r+0x24c>
   84bc0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84bc4:	e517      	b.n	845f6 <_vfiprintf_r+0x7fa>
   84bc6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84bca:	e4fa      	b.n	845c2 <_vfiprintf_r+0x7c6>
   84bcc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84bd0:	e4d2      	b.n	84578 <_vfiprintf_r+0x77c>
   84bd2:	bf00      	nop
   84bd4:	00086aa0 	.word	0x00086aa0
   84bd8:	00086ab4 	.word	0x00086ab4
   84bdc:	00086abc 	.word	0x00086abc
   84be0:	00086a7c 	.word	0x00086a7c

00084be4 <__sbprintf>:
   84be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   84be6:	460c      	mov	r4, r1
   84be8:	8989      	ldrh	r1, [r1, #12]
   84bea:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84bee:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84bf0:	f021 0102 	bic.w	r1, r1, #2
   84bf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84bf6:	f8ad 100c 	strh.w	r1, [sp, #12]
   84bfa:	69e1      	ldr	r1, [r4, #28]
   84bfc:	89e7      	ldrh	r7, [r4, #14]
   84bfe:	9519      	str	r5, [sp, #100]	; 0x64
   84c00:	2500      	movs	r5, #0
   84c02:	9107      	str	r1, [sp, #28]
   84c04:	9609      	str	r6, [sp, #36]	; 0x24
   84c06:	9506      	str	r5, [sp, #24]
   84c08:	ae1a      	add	r6, sp, #104	; 0x68
   84c0a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84c0e:	4669      	mov	r1, sp
   84c10:	9600      	str	r6, [sp, #0]
   84c12:	9604      	str	r6, [sp, #16]
   84c14:	9502      	str	r5, [sp, #8]
   84c16:	9505      	str	r5, [sp, #20]
   84c18:	f8ad 700e 	strh.w	r7, [sp, #14]
   84c1c:	4606      	mov	r6, r0
   84c1e:	f7ff f8ed 	bl	83dfc <_vfiprintf_r>
   84c22:	1e05      	subs	r5, r0, #0
   84c24:	db07      	blt.n	84c36 <__sbprintf+0x52>
   84c26:	4630      	mov	r0, r6
   84c28:	4669      	mov	r1, sp
   84c2a:	f000 f929 	bl	84e80 <_fflush_r>
   84c2e:	2800      	cmp	r0, #0
   84c30:	bf18      	it	ne
   84c32:	f04f 35ff 	movne.w	r5, #4294967295
   84c36:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84c3a:	065b      	lsls	r3, r3, #25
   84c3c:	d503      	bpl.n	84c46 <__sbprintf+0x62>
   84c3e:	89a3      	ldrh	r3, [r4, #12]
   84c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c44:	81a3      	strh	r3, [r4, #12]
   84c46:	4628      	mov	r0, r5
   84c48:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84c4e:	bf00      	nop

00084c50 <__swsetup_r>:
   84c50:	b538      	push	{r3, r4, r5, lr}
   84c52:	4b30      	ldr	r3, [pc, #192]	; (84d14 <__swsetup_r+0xc4>)
   84c54:	4605      	mov	r5, r0
   84c56:	6818      	ldr	r0, [r3, #0]
   84c58:	460c      	mov	r4, r1
   84c5a:	b110      	cbz	r0, 84c62 <__swsetup_r+0x12>
   84c5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84c5e:	2b00      	cmp	r3, #0
   84c60:	d038      	beq.n	84cd4 <__swsetup_r+0x84>
   84c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84c66:	b293      	uxth	r3, r2
   84c68:	0718      	lsls	r0, r3, #28
   84c6a:	d50c      	bpl.n	84c86 <__swsetup_r+0x36>
   84c6c:	6920      	ldr	r0, [r4, #16]
   84c6e:	b1a8      	cbz	r0, 84c9c <__swsetup_r+0x4c>
   84c70:	f013 0201 	ands.w	r2, r3, #1
   84c74:	d01e      	beq.n	84cb4 <__swsetup_r+0x64>
   84c76:	6963      	ldr	r3, [r4, #20]
   84c78:	2200      	movs	r2, #0
   84c7a:	425b      	negs	r3, r3
   84c7c:	61a3      	str	r3, [r4, #24]
   84c7e:	60a2      	str	r2, [r4, #8]
   84c80:	b1f0      	cbz	r0, 84cc0 <__swsetup_r+0x70>
   84c82:	2000      	movs	r0, #0
   84c84:	bd38      	pop	{r3, r4, r5, pc}
   84c86:	06d9      	lsls	r1, r3, #27
   84c88:	d53b      	bpl.n	84d02 <__swsetup_r+0xb2>
   84c8a:	0758      	lsls	r0, r3, #29
   84c8c:	d425      	bmi.n	84cda <__swsetup_r+0x8a>
   84c8e:	6920      	ldr	r0, [r4, #16]
   84c90:	f042 0308 	orr.w	r3, r2, #8
   84c94:	81a3      	strh	r3, [r4, #12]
   84c96:	b29b      	uxth	r3, r3
   84c98:	2800      	cmp	r0, #0
   84c9a:	d1e9      	bne.n	84c70 <__swsetup_r+0x20>
   84c9c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84ca0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84ca4:	d0e4      	beq.n	84c70 <__swsetup_r+0x20>
   84ca6:	4628      	mov	r0, r5
   84ca8:	4621      	mov	r1, r4
   84caa:	f000 fd13 	bl	856d4 <__smakebuf_r>
   84cae:	89a3      	ldrh	r3, [r4, #12]
   84cb0:	6920      	ldr	r0, [r4, #16]
   84cb2:	e7dd      	b.n	84c70 <__swsetup_r+0x20>
   84cb4:	0799      	lsls	r1, r3, #30
   84cb6:	bf58      	it	pl
   84cb8:	6962      	ldrpl	r2, [r4, #20]
   84cba:	60a2      	str	r2, [r4, #8]
   84cbc:	2800      	cmp	r0, #0
   84cbe:	d1e0      	bne.n	84c82 <__swsetup_r+0x32>
   84cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84cc4:	061a      	lsls	r2, r3, #24
   84cc6:	d5dd      	bpl.n	84c84 <__swsetup_r+0x34>
   84cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84ccc:	81a3      	strh	r3, [r4, #12]
   84cce:	f04f 30ff 	mov.w	r0, #4294967295
   84cd2:	bd38      	pop	{r3, r4, r5, pc}
   84cd4:	f000 f968 	bl	84fa8 <__sinit>
   84cd8:	e7c3      	b.n	84c62 <__swsetup_r+0x12>
   84cda:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84cdc:	b151      	cbz	r1, 84cf4 <__swsetup_r+0xa4>
   84cde:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84ce2:	4299      	cmp	r1, r3
   84ce4:	d004      	beq.n	84cf0 <__swsetup_r+0xa0>
   84ce6:	4628      	mov	r0, r5
   84ce8:	f000 fa26 	bl	85138 <_free_r>
   84cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84cf0:	2300      	movs	r3, #0
   84cf2:	6323      	str	r3, [r4, #48]	; 0x30
   84cf4:	6920      	ldr	r0, [r4, #16]
   84cf6:	2300      	movs	r3, #0
   84cf8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84cfc:	e884 0009 	stmia.w	r4, {r0, r3}
   84d00:	e7c6      	b.n	84c90 <__swsetup_r+0x40>
   84d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84d06:	2309      	movs	r3, #9
   84d08:	602b      	str	r3, [r5, #0]
   84d0a:	f04f 30ff 	mov.w	r0, #4294967295
   84d0e:	81a2      	strh	r2, [r4, #12]
   84d10:	bd38      	pop	{r3, r4, r5, pc}
   84d12:	bf00      	nop
   84d14:	20070830 	.word	0x20070830

00084d18 <register_fini>:
   84d18:	4b02      	ldr	r3, [pc, #8]	; (84d24 <register_fini+0xc>)
   84d1a:	b113      	cbz	r3, 84d22 <register_fini+0xa>
   84d1c:	4802      	ldr	r0, [pc, #8]	; (84d28 <register_fini+0x10>)
   84d1e:	f000 b805 	b.w	84d2c <atexit>
   84d22:	4770      	bx	lr
   84d24:	00000000 	.word	0x00000000
   84d28:	00084fbd 	.word	0x00084fbd

00084d2c <atexit>:
   84d2c:	2300      	movs	r3, #0
   84d2e:	4601      	mov	r1, r0
   84d30:	461a      	mov	r2, r3
   84d32:	4618      	mov	r0, r3
   84d34:	f001 bbce 	b.w	864d4 <__register_exitproc>

00084d38 <__sflush_r>:
   84d38:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d40:	b29a      	uxth	r2, r3
   84d42:	460d      	mov	r5, r1
   84d44:	0711      	lsls	r1, r2, #28
   84d46:	4680      	mov	r8, r0
   84d48:	d43c      	bmi.n	84dc4 <__sflush_r+0x8c>
   84d4a:	686a      	ldr	r2, [r5, #4]
   84d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84d50:	2a00      	cmp	r2, #0
   84d52:	81ab      	strh	r3, [r5, #12]
   84d54:	dd73      	ble.n	84e3e <__sflush_r+0x106>
   84d56:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84d58:	2c00      	cmp	r4, #0
   84d5a:	d04b      	beq.n	84df4 <__sflush_r+0xbc>
   84d5c:	b29b      	uxth	r3, r3
   84d5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84d62:	2100      	movs	r1, #0
   84d64:	b292      	uxth	r2, r2
   84d66:	f8d8 6000 	ldr.w	r6, [r8]
   84d6a:	f8c8 1000 	str.w	r1, [r8]
   84d6e:	2a00      	cmp	r2, #0
   84d70:	d069      	beq.n	84e46 <__sflush_r+0x10e>
   84d72:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84d74:	075f      	lsls	r7, r3, #29
   84d76:	d505      	bpl.n	84d84 <__sflush_r+0x4c>
   84d78:	6869      	ldr	r1, [r5, #4]
   84d7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84d7c:	1a52      	subs	r2, r2, r1
   84d7e:	b10b      	cbz	r3, 84d84 <__sflush_r+0x4c>
   84d80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84d82:	1ad2      	subs	r2, r2, r3
   84d84:	2300      	movs	r3, #0
   84d86:	69e9      	ldr	r1, [r5, #28]
   84d88:	4640      	mov	r0, r8
   84d8a:	47a0      	blx	r4
   84d8c:	1c44      	adds	r4, r0, #1
   84d8e:	d03c      	beq.n	84e0a <__sflush_r+0xd2>
   84d90:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84d94:	6929      	ldr	r1, [r5, #16]
   84d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84d9a:	2200      	movs	r2, #0
   84d9c:	81ab      	strh	r3, [r5, #12]
   84d9e:	04db      	lsls	r3, r3, #19
   84da0:	e885 0006 	stmia.w	r5, {r1, r2}
   84da4:	d449      	bmi.n	84e3a <__sflush_r+0x102>
   84da6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84da8:	f8c8 6000 	str.w	r6, [r8]
   84dac:	b311      	cbz	r1, 84df4 <__sflush_r+0xbc>
   84dae:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84db2:	4299      	cmp	r1, r3
   84db4:	d002      	beq.n	84dbc <__sflush_r+0x84>
   84db6:	4640      	mov	r0, r8
   84db8:	f000 f9be 	bl	85138 <_free_r>
   84dbc:	2000      	movs	r0, #0
   84dbe:	6328      	str	r0, [r5, #48]	; 0x30
   84dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84dc4:	692e      	ldr	r6, [r5, #16]
   84dc6:	b1ae      	cbz	r6, 84df4 <__sflush_r+0xbc>
   84dc8:	0790      	lsls	r0, r2, #30
   84dca:	682c      	ldr	r4, [r5, #0]
   84dcc:	bf0c      	ite	eq
   84dce:	696b      	ldreq	r3, [r5, #20]
   84dd0:	2300      	movne	r3, #0
   84dd2:	602e      	str	r6, [r5, #0]
   84dd4:	1ba4      	subs	r4, r4, r6
   84dd6:	60ab      	str	r3, [r5, #8]
   84dd8:	e00a      	b.n	84df0 <__sflush_r+0xb8>
   84dda:	4623      	mov	r3, r4
   84ddc:	4632      	mov	r2, r6
   84dde:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84de0:	69e9      	ldr	r1, [r5, #28]
   84de2:	4640      	mov	r0, r8
   84de4:	47b8      	blx	r7
   84de6:	2800      	cmp	r0, #0
   84de8:	eba4 0400 	sub.w	r4, r4, r0
   84dec:	4406      	add	r6, r0
   84dee:	dd04      	ble.n	84dfa <__sflush_r+0xc2>
   84df0:	2c00      	cmp	r4, #0
   84df2:	dcf2      	bgt.n	84dda <__sflush_r+0xa2>
   84df4:	2000      	movs	r0, #0
   84df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84dfa:	89ab      	ldrh	r3, [r5, #12]
   84dfc:	f04f 30ff 	mov.w	r0, #4294967295
   84e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e04:	81ab      	strh	r3, [r5, #12]
   84e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e0a:	f8d8 2000 	ldr.w	r2, [r8]
   84e0e:	2a1d      	cmp	r2, #29
   84e10:	d8f3      	bhi.n	84dfa <__sflush_r+0xc2>
   84e12:	4b1a      	ldr	r3, [pc, #104]	; (84e7c <__sflush_r+0x144>)
   84e14:	40d3      	lsrs	r3, r2
   84e16:	f003 0301 	and.w	r3, r3, #1
   84e1a:	f083 0401 	eor.w	r4, r3, #1
   84e1e:	2b00      	cmp	r3, #0
   84e20:	d0eb      	beq.n	84dfa <__sflush_r+0xc2>
   84e22:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84e26:	6929      	ldr	r1, [r5, #16]
   84e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84e2c:	6029      	str	r1, [r5, #0]
   84e2e:	04d9      	lsls	r1, r3, #19
   84e30:	606c      	str	r4, [r5, #4]
   84e32:	81ab      	strh	r3, [r5, #12]
   84e34:	d5b7      	bpl.n	84da6 <__sflush_r+0x6e>
   84e36:	2a00      	cmp	r2, #0
   84e38:	d1b5      	bne.n	84da6 <__sflush_r+0x6e>
   84e3a:	6528      	str	r0, [r5, #80]	; 0x50
   84e3c:	e7b3      	b.n	84da6 <__sflush_r+0x6e>
   84e3e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84e40:	2a00      	cmp	r2, #0
   84e42:	dc88      	bgt.n	84d56 <__sflush_r+0x1e>
   84e44:	e7d6      	b.n	84df4 <__sflush_r+0xbc>
   84e46:	2301      	movs	r3, #1
   84e48:	69e9      	ldr	r1, [r5, #28]
   84e4a:	4640      	mov	r0, r8
   84e4c:	47a0      	blx	r4
   84e4e:	1c43      	adds	r3, r0, #1
   84e50:	4602      	mov	r2, r0
   84e52:	d002      	beq.n	84e5a <__sflush_r+0x122>
   84e54:	89ab      	ldrh	r3, [r5, #12]
   84e56:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84e58:	e78c      	b.n	84d74 <__sflush_r+0x3c>
   84e5a:	f8d8 3000 	ldr.w	r3, [r8]
   84e5e:	2b00      	cmp	r3, #0
   84e60:	d0f8      	beq.n	84e54 <__sflush_r+0x11c>
   84e62:	2b1d      	cmp	r3, #29
   84e64:	d001      	beq.n	84e6a <__sflush_r+0x132>
   84e66:	2b16      	cmp	r3, #22
   84e68:	d102      	bne.n	84e70 <__sflush_r+0x138>
   84e6a:	f8c8 6000 	str.w	r6, [r8]
   84e6e:	e7c1      	b.n	84df4 <__sflush_r+0xbc>
   84e70:	89ab      	ldrh	r3, [r5, #12]
   84e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e76:	81ab      	strh	r3, [r5, #12]
   84e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84e7c:	20400001 	.word	0x20400001

00084e80 <_fflush_r>:
   84e80:	b510      	push	{r4, lr}
   84e82:	4604      	mov	r4, r0
   84e84:	b082      	sub	sp, #8
   84e86:	b108      	cbz	r0, 84e8c <_fflush_r+0xc>
   84e88:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e8a:	b153      	cbz	r3, 84ea2 <_fflush_r+0x22>
   84e8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84e90:	b908      	cbnz	r0, 84e96 <_fflush_r+0x16>
   84e92:	b002      	add	sp, #8
   84e94:	bd10      	pop	{r4, pc}
   84e96:	4620      	mov	r0, r4
   84e98:	b002      	add	sp, #8
   84e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84e9e:	f7ff bf4b 	b.w	84d38 <__sflush_r>
   84ea2:	9101      	str	r1, [sp, #4]
   84ea4:	f000 f880 	bl	84fa8 <__sinit>
   84ea8:	9901      	ldr	r1, [sp, #4]
   84eaa:	e7ef      	b.n	84e8c <_fflush_r+0xc>

00084eac <_cleanup_r>:
   84eac:	4901      	ldr	r1, [pc, #4]	; (84eb4 <_cleanup_r+0x8>)
   84eae:	f000 bbaf 	b.w	85610 <_fwalk_reent>
   84eb2:	bf00      	nop
   84eb4:	0008659d 	.word	0x0008659d

00084eb8 <__sinit.part.1>:
   84eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ebc:	4607      	mov	r7, r0
   84ebe:	4835      	ldr	r0, [pc, #212]	; (84f94 <__sinit.part.1+0xdc>)
   84ec0:	687d      	ldr	r5, [r7, #4]
   84ec2:	2400      	movs	r4, #0
   84ec4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84ec8:	2304      	movs	r3, #4
   84eca:	2103      	movs	r1, #3
   84ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
   84ece:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84ed2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84ed6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84eda:	b083      	sub	sp, #12
   84edc:	602c      	str	r4, [r5, #0]
   84ede:	606c      	str	r4, [r5, #4]
   84ee0:	60ac      	str	r4, [r5, #8]
   84ee2:	666c      	str	r4, [r5, #100]	; 0x64
   84ee4:	81ec      	strh	r4, [r5, #14]
   84ee6:	612c      	str	r4, [r5, #16]
   84ee8:	616c      	str	r4, [r5, #20]
   84eea:	61ac      	str	r4, [r5, #24]
   84eec:	81ab      	strh	r3, [r5, #12]
   84eee:	4621      	mov	r1, r4
   84ef0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84ef4:	2208      	movs	r2, #8
   84ef6:	f7fe fe19 	bl	83b2c <memset>
   84efa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84f98 <__sinit.part.1+0xe0>
   84efe:	68be      	ldr	r6, [r7, #8]
   84f00:	f8df a098 	ldr.w	sl, [pc, #152]	; 84f9c <__sinit.part.1+0xe4>
   84f04:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84fa0 <__sinit.part.1+0xe8>
   84f08:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84fa4 <__sinit.part.1+0xec>
   84f0c:	2301      	movs	r3, #1
   84f0e:	2209      	movs	r2, #9
   84f10:	f8c5 b020 	str.w	fp, [r5, #32]
   84f14:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84f18:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84f1c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84f20:	61ed      	str	r5, [r5, #28]
   84f22:	4621      	mov	r1, r4
   84f24:	81f3      	strh	r3, [r6, #14]
   84f26:	81b2      	strh	r2, [r6, #12]
   84f28:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84f2c:	6034      	str	r4, [r6, #0]
   84f2e:	6074      	str	r4, [r6, #4]
   84f30:	60b4      	str	r4, [r6, #8]
   84f32:	6674      	str	r4, [r6, #100]	; 0x64
   84f34:	6134      	str	r4, [r6, #16]
   84f36:	6174      	str	r4, [r6, #20]
   84f38:	61b4      	str	r4, [r6, #24]
   84f3a:	2208      	movs	r2, #8
   84f3c:	9301      	str	r3, [sp, #4]
   84f3e:	f7fe fdf5 	bl	83b2c <memset>
   84f42:	68fd      	ldr	r5, [r7, #12]
   84f44:	2012      	movs	r0, #18
   84f46:	2202      	movs	r2, #2
   84f48:	61f6      	str	r6, [r6, #28]
   84f4a:	f8c6 b020 	str.w	fp, [r6, #32]
   84f4e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84f52:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84f56:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84f5a:	4621      	mov	r1, r4
   84f5c:	81a8      	strh	r0, [r5, #12]
   84f5e:	81ea      	strh	r2, [r5, #14]
   84f60:	602c      	str	r4, [r5, #0]
   84f62:	606c      	str	r4, [r5, #4]
   84f64:	60ac      	str	r4, [r5, #8]
   84f66:	666c      	str	r4, [r5, #100]	; 0x64
   84f68:	612c      	str	r4, [r5, #16]
   84f6a:	616c      	str	r4, [r5, #20]
   84f6c:	61ac      	str	r4, [r5, #24]
   84f6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84f72:	2208      	movs	r2, #8
   84f74:	f7fe fdda 	bl	83b2c <memset>
   84f78:	9b01      	ldr	r3, [sp, #4]
   84f7a:	61ed      	str	r5, [r5, #28]
   84f7c:	f8c5 b020 	str.w	fp, [r5, #32]
   84f80:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84f84:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84f88:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   84f8e:	b003      	add	sp, #12
   84f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f94:	00084ead 	.word	0x00084ead
   84f98:	00086305 	.word	0x00086305
   84f9c:	00086329 	.word	0x00086329
   84fa0:	00086365 	.word	0x00086365
   84fa4:	00086385 	.word	0x00086385

00084fa8 <__sinit>:
   84fa8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84faa:	b103      	cbz	r3, 84fae <__sinit+0x6>
   84fac:	4770      	bx	lr
   84fae:	f7ff bf83 	b.w	84eb8 <__sinit.part.1>
   84fb2:	bf00      	nop

00084fb4 <__sfp_lock_acquire>:
   84fb4:	4770      	bx	lr
   84fb6:	bf00      	nop

00084fb8 <__sfp_lock_release>:
   84fb8:	4770      	bx	lr
   84fba:	bf00      	nop

00084fbc <__libc_fini_array>:
   84fbc:	b538      	push	{r3, r4, r5, lr}
   84fbe:	4d07      	ldr	r5, [pc, #28]	; (84fdc <__libc_fini_array+0x20>)
   84fc0:	4c07      	ldr	r4, [pc, #28]	; (84fe0 <__libc_fini_array+0x24>)
   84fc2:	1b2c      	subs	r4, r5, r4
   84fc4:	10a4      	asrs	r4, r4, #2
   84fc6:	d005      	beq.n	84fd4 <__libc_fini_array+0x18>
   84fc8:	3c01      	subs	r4, #1
   84fca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84fce:	4798      	blx	r3
   84fd0:	2c00      	cmp	r4, #0
   84fd2:	d1f9      	bne.n	84fc8 <__libc_fini_array+0xc>
   84fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84fd8:	f001 bd82 	b.w	86ae0 <_fini>
   84fdc:	00086af0 	.word	0x00086af0
   84fe0:	00086aec 	.word	0x00086aec

00084fe4 <__fputwc>:
   84fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84fe8:	b082      	sub	sp, #8
   84fea:	4606      	mov	r6, r0
   84fec:	460f      	mov	r7, r1
   84fee:	4614      	mov	r4, r2
   84ff0:	f000 fb3a 	bl	85668 <__locale_mb_cur_max>
   84ff4:	2801      	cmp	r0, #1
   84ff6:	d032      	beq.n	8505e <__fputwc+0x7a>
   84ff8:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84ffc:	463a      	mov	r2, r7
   84ffe:	a901      	add	r1, sp, #4
   85000:	4630      	mov	r0, r6
   85002:	f001 fa19 	bl	86438 <_wcrtomb_r>
   85006:	f1b0 3fff 	cmp.w	r0, #4294967295
   8500a:	4680      	mov	r8, r0
   8500c:	d020      	beq.n	85050 <__fputwc+0x6c>
   8500e:	b370      	cbz	r0, 8506e <__fputwc+0x8a>
   85010:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85014:	2500      	movs	r5, #0
   85016:	e008      	b.n	8502a <__fputwc+0x46>
   85018:	6823      	ldr	r3, [r4, #0]
   8501a:	1c5a      	adds	r2, r3, #1
   8501c:	6022      	str	r2, [r4, #0]
   8501e:	7019      	strb	r1, [r3, #0]
   85020:	3501      	adds	r5, #1
   85022:	4545      	cmp	r5, r8
   85024:	d223      	bcs.n	8506e <__fputwc+0x8a>
   85026:	ab01      	add	r3, sp, #4
   85028:	5d59      	ldrb	r1, [r3, r5]
   8502a:	68a3      	ldr	r3, [r4, #8]
   8502c:	3b01      	subs	r3, #1
   8502e:	2b00      	cmp	r3, #0
   85030:	60a3      	str	r3, [r4, #8]
   85032:	daf1      	bge.n	85018 <__fputwc+0x34>
   85034:	69a2      	ldr	r2, [r4, #24]
   85036:	4293      	cmp	r3, r2
   85038:	db01      	blt.n	8503e <__fputwc+0x5a>
   8503a:	290a      	cmp	r1, #10
   8503c:	d1ec      	bne.n	85018 <__fputwc+0x34>
   8503e:	4622      	mov	r2, r4
   85040:	4630      	mov	r0, r6
   85042:	f001 f9a3 	bl	8638c <__swbuf_r>
   85046:	1c43      	adds	r3, r0, #1
   85048:	d1ea      	bne.n	85020 <__fputwc+0x3c>
   8504a:	b002      	add	sp, #8
   8504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85050:	89a3      	ldrh	r3, [r4, #12]
   85052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85056:	81a3      	strh	r3, [r4, #12]
   85058:	b002      	add	sp, #8
   8505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8505e:	1e7b      	subs	r3, r7, #1
   85060:	2bfe      	cmp	r3, #254	; 0xfe
   85062:	d8c9      	bhi.n	84ff8 <__fputwc+0x14>
   85064:	b2f9      	uxtb	r1, r7
   85066:	4680      	mov	r8, r0
   85068:	f88d 1004 	strb.w	r1, [sp, #4]
   8506c:	e7d2      	b.n	85014 <__fputwc+0x30>
   8506e:	4638      	mov	r0, r7
   85070:	b002      	add	sp, #8
   85072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85076:	bf00      	nop

00085078 <_fputwc_r>:
   85078:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8507c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85080:	d10a      	bne.n	85098 <_fputwc_r+0x20>
   85082:	b410      	push	{r4}
   85084:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8508a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   8508e:	6654      	str	r4, [r2, #100]	; 0x64
   85090:	8193      	strh	r3, [r2, #12]
   85092:	bc10      	pop	{r4}
   85094:	f7ff bfa6 	b.w	84fe4 <__fputwc>
   85098:	f7ff bfa4 	b.w	84fe4 <__fputwc>

0008509c <_malloc_trim_r>:
   8509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8509e:	460c      	mov	r4, r1
   850a0:	4f22      	ldr	r7, [pc, #136]	; (8512c <_malloc_trim_r+0x90>)
   850a2:	4606      	mov	r6, r0
   850a4:	f000 ff2e 	bl	85f04 <__malloc_lock>
   850a8:	68bb      	ldr	r3, [r7, #8]
   850aa:	685d      	ldr	r5, [r3, #4]
   850ac:	f025 0503 	bic.w	r5, r5, #3
   850b0:	1b29      	subs	r1, r5, r4
   850b2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   850b6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   850ba:	f021 010f 	bic.w	r1, r1, #15
   850be:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   850c2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   850c6:	db07      	blt.n	850d8 <_malloc_trim_r+0x3c>
   850c8:	2100      	movs	r1, #0
   850ca:	4630      	mov	r0, r6
   850cc:	f001 f908 	bl	862e0 <_sbrk_r>
   850d0:	68bb      	ldr	r3, [r7, #8]
   850d2:	442b      	add	r3, r5
   850d4:	4298      	cmp	r0, r3
   850d6:	d004      	beq.n	850e2 <_malloc_trim_r+0x46>
   850d8:	4630      	mov	r0, r6
   850da:	f000 ff15 	bl	85f08 <__malloc_unlock>
   850de:	2000      	movs	r0, #0
   850e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   850e2:	4261      	negs	r1, r4
   850e4:	4630      	mov	r0, r6
   850e6:	f001 f8fb 	bl	862e0 <_sbrk_r>
   850ea:	3001      	adds	r0, #1
   850ec:	d00d      	beq.n	8510a <_malloc_trim_r+0x6e>
   850ee:	4b10      	ldr	r3, [pc, #64]	; (85130 <_malloc_trim_r+0x94>)
   850f0:	68ba      	ldr	r2, [r7, #8]
   850f2:	6819      	ldr	r1, [r3, #0]
   850f4:	1b2d      	subs	r5, r5, r4
   850f6:	f045 0501 	orr.w	r5, r5, #1
   850fa:	4630      	mov	r0, r6
   850fc:	1b09      	subs	r1, r1, r4
   850fe:	6055      	str	r5, [r2, #4]
   85100:	6019      	str	r1, [r3, #0]
   85102:	f000 ff01 	bl	85f08 <__malloc_unlock>
   85106:	2001      	movs	r0, #1
   85108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8510a:	2100      	movs	r1, #0
   8510c:	4630      	mov	r0, r6
   8510e:	f001 f8e7 	bl	862e0 <_sbrk_r>
   85112:	68ba      	ldr	r2, [r7, #8]
   85114:	1a83      	subs	r3, r0, r2
   85116:	2b0f      	cmp	r3, #15
   85118:	ddde      	ble.n	850d8 <_malloc_trim_r+0x3c>
   8511a:	4c06      	ldr	r4, [pc, #24]	; (85134 <_malloc_trim_r+0x98>)
   8511c:	4904      	ldr	r1, [pc, #16]	; (85130 <_malloc_trim_r+0x94>)
   8511e:	6824      	ldr	r4, [r4, #0]
   85120:	f043 0301 	orr.w	r3, r3, #1
   85124:	1b00      	subs	r0, r0, r4
   85126:	6053      	str	r3, [r2, #4]
   85128:	6008      	str	r0, [r1, #0]
   8512a:	e7d5      	b.n	850d8 <_malloc_trim_r+0x3c>
   8512c:	20070858 	.word	0x20070858
   85130:	20070d94 	.word	0x20070d94
   85134:	20070c64 	.word	0x20070c64

00085138 <_free_r>:
   85138:	2900      	cmp	r1, #0
   8513a:	d045      	beq.n	851c8 <_free_r+0x90>
   8513c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85140:	460d      	mov	r5, r1
   85142:	4680      	mov	r8, r0
   85144:	f000 fede 	bl	85f04 <__malloc_lock>
   85148:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8514c:	496a      	ldr	r1, [pc, #424]	; (852f8 <_free_r+0x1c0>)
   8514e:	f1a5 0408 	sub.w	r4, r5, #8
   85152:	f027 0301 	bic.w	r3, r7, #1
   85156:	18e2      	adds	r2, r4, r3
   85158:	688e      	ldr	r6, [r1, #8]
   8515a:	6850      	ldr	r0, [r2, #4]
   8515c:	42b2      	cmp	r2, r6
   8515e:	f020 0003 	bic.w	r0, r0, #3
   85162:	d062      	beq.n	8522a <_free_r+0xf2>
   85164:	07fe      	lsls	r6, r7, #31
   85166:	6050      	str	r0, [r2, #4]
   85168:	d40b      	bmi.n	85182 <_free_r+0x4a>
   8516a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8516e:	f101 0e08 	add.w	lr, r1, #8
   85172:	1be4      	subs	r4, r4, r7
   85174:	68a5      	ldr	r5, [r4, #8]
   85176:	443b      	add	r3, r7
   85178:	4575      	cmp	r5, lr
   8517a:	d06f      	beq.n	8525c <_free_r+0x124>
   8517c:	68e7      	ldr	r7, [r4, #12]
   8517e:	60ef      	str	r7, [r5, #12]
   85180:	60bd      	str	r5, [r7, #8]
   85182:	1815      	adds	r5, r2, r0
   85184:	686d      	ldr	r5, [r5, #4]
   85186:	07ed      	lsls	r5, r5, #31
   85188:	d542      	bpl.n	85210 <_free_r+0xd8>
   8518a:	f043 0201 	orr.w	r2, r3, #1
   8518e:	6062      	str	r2, [r4, #4]
   85190:	50e3      	str	r3, [r4, r3]
   85192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85196:	d218      	bcs.n	851ca <_free_r+0x92>
   85198:	08db      	lsrs	r3, r3, #3
   8519a:	6848      	ldr	r0, [r1, #4]
   8519c:	109d      	asrs	r5, r3, #2
   8519e:	2201      	movs	r2, #1
   851a0:	3301      	adds	r3, #1
   851a2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   851a6:	fa02 f505 	lsl.w	r5, r2, r5
   851aa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   851ae:	4328      	orrs	r0, r5
   851b0:	3a08      	subs	r2, #8
   851b2:	60e2      	str	r2, [r4, #12]
   851b4:	60a7      	str	r7, [r4, #8]
   851b6:	6048      	str	r0, [r1, #4]
   851b8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   851bc:	60fc      	str	r4, [r7, #12]
   851be:	4640      	mov	r0, r8
   851c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   851c4:	f000 bea0 	b.w	85f08 <__malloc_unlock>
   851c8:	4770      	bx	lr
   851ca:	0a5a      	lsrs	r2, r3, #9
   851cc:	2a04      	cmp	r2, #4
   851ce:	d853      	bhi.n	85278 <_free_r+0x140>
   851d0:	099a      	lsrs	r2, r3, #6
   851d2:	f102 0739 	add.w	r7, r2, #57	; 0x39
   851d6:	007f      	lsls	r7, r7, #1
   851d8:	f102 0538 	add.w	r5, r2, #56	; 0x38
   851dc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   851e0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   851e4:	3808      	subs	r0, #8
   851e6:	4290      	cmp	r0, r2
   851e8:	4943      	ldr	r1, [pc, #268]	; (852f8 <_free_r+0x1c0>)
   851ea:	d04d      	beq.n	85288 <_free_r+0x150>
   851ec:	6851      	ldr	r1, [r2, #4]
   851ee:	f021 0103 	bic.w	r1, r1, #3
   851f2:	428b      	cmp	r3, r1
   851f4:	d202      	bcs.n	851fc <_free_r+0xc4>
   851f6:	6892      	ldr	r2, [r2, #8]
   851f8:	4290      	cmp	r0, r2
   851fa:	d1f7      	bne.n	851ec <_free_r+0xb4>
   851fc:	68d0      	ldr	r0, [r2, #12]
   851fe:	60e0      	str	r0, [r4, #12]
   85200:	60a2      	str	r2, [r4, #8]
   85202:	6084      	str	r4, [r0, #8]
   85204:	60d4      	str	r4, [r2, #12]
   85206:	4640      	mov	r0, r8
   85208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8520c:	f000 be7c 	b.w	85f08 <__malloc_unlock>
   85210:	6895      	ldr	r5, [r2, #8]
   85212:	4f3a      	ldr	r7, [pc, #232]	; (852fc <_free_r+0x1c4>)
   85214:	4403      	add	r3, r0
   85216:	42bd      	cmp	r5, r7
   85218:	d03f      	beq.n	8529a <_free_r+0x162>
   8521a:	68d0      	ldr	r0, [r2, #12]
   8521c:	f043 0201 	orr.w	r2, r3, #1
   85220:	60e8      	str	r0, [r5, #12]
   85222:	6085      	str	r5, [r0, #8]
   85224:	6062      	str	r2, [r4, #4]
   85226:	50e3      	str	r3, [r4, r3]
   85228:	e7b3      	b.n	85192 <_free_r+0x5a>
   8522a:	07ff      	lsls	r7, r7, #31
   8522c:	4403      	add	r3, r0
   8522e:	d407      	bmi.n	85240 <_free_r+0x108>
   85230:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85234:	1b64      	subs	r4, r4, r5
   85236:	68e2      	ldr	r2, [r4, #12]
   85238:	68a0      	ldr	r0, [r4, #8]
   8523a:	442b      	add	r3, r5
   8523c:	60c2      	str	r2, [r0, #12]
   8523e:	6090      	str	r0, [r2, #8]
   85240:	4a2f      	ldr	r2, [pc, #188]	; (85300 <_free_r+0x1c8>)
   85242:	f043 0001 	orr.w	r0, r3, #1
   85246:	6812      	ldr	r2, [r2, #0]
   85248:	6060      	str	r0, [r4, #4]
   8524a:	4293      	cmp	r3, r2
   8524c:	608c      	str	r4, [r1, #8]
   8524e:	d3b6      	bcc.n	851be <_free_r+0x86>
   85250:	4b2c      	ldr	r3, [pc, #176]	; (85304 <_free_r+0x1cc>)
   85252:	4640      	mov	r0, r8
   85254:	6819      	ldr	r1, [r3, #0]
   85256:	f7ff ff21 	bl	8509c <_malloc_trim_r>
   8525a:	e7b0      	b.n	851be <_free_r+0x86>
   8525c:	1811      	adds	r1, r2, r0
   8525e:	6849      	ldr	r1, [r1, #4]
   85260:	07c9      	lsls	r1, r1, #31
   85262:	d444      	bmi.n	852ee <_free_r+0x1b6>
   85264:	6891      	ldr	r1, [r2, #8]
   85266:	4403      	add	r3, r0
   85268:	68d2      	ldr	r2, [r2, #12]
   8526a:	f043 0001 	orr.w	r0, r3, #1
   8526e:	60ca      	str	r2, [r1, #12]
   85270:	6091      	str	r1, [r2, #8]
   85272:	6060      	str	r0, [r4, #4]
   85274:	50e3      	str	r3, [r4, r3]
   85276:	e7a2      	b.n	851be <_free_r+0x86>
   85278:	2a14      	cmp	r2, #20
   8527a:	d817      	bhi.n	852ac <_free_r+0x174>
   8527c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85280:	007f      	lsls	r7, r7, #1
   85282:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85286:	e7a9      	b.n	851dc <_free_r+0xa4>
   85288:	10aa      	asrs	r2, r5, #2
   8528a:	684b      	ldr	r3, [r1, #4]
   8528c:	2501      	movs	r5, #1
   8528e:	fa05 f202 	lsl.w	r2, r5, r2
   85292:	4313      	orrs	r3, r2
   85294:	604b      	str	r3, [r1, #4]
   85296:	4602      	mov	r2, r0
   85298:	e7b1      	b.n	851fe <_free_r+0xc6>
   8529a:	f043 0201 	orr.w	r2, r3, #1
   8529e:	614c      	str	r4, [r1, #20]
   852a0:	610c      	str	r4, [r1, #16]
   852a2:	60e5      	str	r5, [r4, #12]
   852a4:	60a5      	str	r5, [r4, #8]
   852a6:	6062      	str	r2, [r4, #4]
   852a8:	50e3      	str	r3, [r4, r3]
   852aa:	e788      	b.n	851be <_free_r+0x86>
   852ac:	2a54      	cmp	r2, #84	; 0x54
   852ae:	d806      	bhi.n	852be <_free_r+0x186>
   852b0:	0b1a      	lsrs	r2, r3, #12
   852b2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   852b6:	007f      	lsls	r7, r7, #1
   852b8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   852bc:	e78e      	b.n	851dc <_free_r+0xa4>
   852be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   852c2:	d806      	bhi.n	852d2 <_free_r+0x19a>
   852c4:	0bda      	lsrs	r2, r3, #15
   852c6:	f102 0778 	add.w	r7, r2, #120	; 0x78
   852ca:	007f      	lsls	r7, r7, #1
   852cc:	f102 0577 	add.w	r5, r2, #119	; 0x77
   852d0:	e784      	b.n	851dc <_free_r+0xa4>
   852d2:	f240 5054 	movw	r0, #1364	; 0x554
   852d6:	4282      	cmp	r2, r0
   852d8:	d806      	bhi.n	852e8 <_free_r+0x1b0>
   852da:	0c9a      	lsrs	r2, r3, #18
   852dc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   852e0:	007f      	lsls	r7, r7, #1
   852e2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   852e6:	e779      	b.n	851dc <_free_r+0xa4>
   852e8:	27fe      	movs	r7, #254	; 0xfe
   852ea:	257e      	movs	r5, #126	; 0x7e
   852ec:	e776      	b.n	851dc <_free_r+0xa4>
   852ee:	f043 0201 	orr.w	r2, r3, #1
   852f2:	6062      	str	r2, [r4, #4]
   852f4:	50e3      	str	r3, [r4, r3]
   852f6:	e762      	b.n	851be <_free_r+0x86>
   852f8:	20070858 	.word	0x20070858
   852fc:	20070860 	.word	0x20070860
   85300:	20070c60 	.word	0x20070c60
   85304:	20070d90 	.word	0x20070d90

00085308 <__sfvwrite_r>:
   85308:	6893      	ldr	r3, [r2, #8]
   8530a:	2b00      	cmp	r3, #0
   8530c:	f000 80ab 	beq.w	85466 <__sfvwrite_r+0x15e>
   85310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85314:	898b      	ldrh	r3, [r1, #12]
   85316:	b085      	sub	sp, #20
   85318:	460c      	mov	r4, r1
   8531a:	0719      	lsls	r1, r3, #28
   8531c:	9002      	str	r0, [sp, #8]
   8531e:	4616      	mov	r6, r2
   85320:	d528      	bpl.n	85374 <__sfvwrite_r+0x6c>
   85322:	6922      	ldr	r2, [r4, #16]
   85324:	b332      	cbz	r2, 85374 <__sfvwrite_r+0x6c>
   85326:	f003 0802 	and.w	r8, r3, #2
   8532a:	fa1f f088 	uxth.w	r0, r8
   8532e:	6835      	ldr	r5, [r6, #0]
   85330:	b378      	cbz	r0, 85392 <__sfvwrite_r+0x8a>
   85332:	f04f 0900 	mov.w	r9, #0
   85336:	46c8      	mov	r8, r9
   85338:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8560c <__sfvwrite_r+0x304>
   8533c:	f1b8 0f00 	cmp.w	r8, #0
   85340:	f000 808b 	beq.w	8545a <__sfvwrite_r+0x152>
   85344:	45d0      	cmp	r8, sl
   85346:	4643      	mov	r3, r8
   85348:	464a      	mov	r2, r9
   8534a:	bf28      	it	cs
   8534c:	4653      	movcs	r3, sl
   8534e:	69e1      	ldr	r1, [r4, #28]
   85350:	9802      	ldr	r0, [sp, #8]
   85352:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85354:	47b8      	blx	r7
   85356:	2800      	cmp	r0, #0
   85358:	f340 80a5 	ble.w	854a6 <__sfvwrite_r+0x19e>
   8535c:	68b3      	ldr	r3, [r6, #8]
   8535e:	4481      	add	r9, r0
   85360:	1a1b      	subs	r3, r3, r0
   85362:	ebc0 0808 	rsb	r8, r0, r8
   85366:	60b3      	str	r3, [r6, #8]
   85368:	2b00      	cmp	r3, #0
   8536a:	d1e7      	bne.n	8533c <__sfvwrite_r+0x34>
   8536c:	2000      	movs	r0, #0
   8536e:	b005      	add	sp, #20
   85370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85374:	4621      	mov	r1, r4
   85376:	9802      	ldr	r0, [sp, #8]
   85378:	f7ff fc6a 	bl	84c50 <__swsetup_r>
   8537c:	2800      	cmp	r0, #0
   8537e:	f040 813c 	bne.w	855fa <__sfvwrite_r+0x2f2>
   85382:	89a3      	ldrh	r3, [r4, #12]
   85384:	6835      	ldr	r5, [r6, #0]
   85386:	f003 0802 	and.w	r8, r3, #2
   8538a:	fa1f f088 	uxth.w	r0, r8
   8538e:	2800      	cmp	r0, #0
   85390:	d1cf      	bne.n	85332 <__sfvwrite_r+0x2a>
   85392:	f013 0901 	ands.w	r9, r3, #1
   85396:	f040 8090 	bne.w	854ba <__sfvwrite_r+0x1b2>
   8539a:	464f      	mov	r7, r9
   8539c:	9601      	str	r6, [sp, #4]
   8539e:	2f00      	cmp	r7, #0
   853a0:	d056      	beq.n	85450 <__sfvwrite_r+0x148>
   853a2:	059a      	lsls	r2, r3, #22
   853a4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   853a8:	d55f      	bpl.n	8546a <__sfvwrite_r+0x162>
   853aa:	4547      	cmp	r7, r8
   853ac:	46c2      	mov	sl, r8
   853ae:	f0c0 80bf 	bcc.w	85530 <__sfvwrite_r+0x228>
   853b2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   853b6:	f000 80bd 	beq.w	85534 <__sfvwrite_r+0x22c>
   853ba:	6962      	ldr	r2, [r4, #20]
   853bc:	6820      	ldr	r0, [r4, #0]
   853be:	6921      	ldr	r1, [r4, #16]
   853c0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   853c4:	ebc1 0a00 	rsb	sl, r1, r0
   853c8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   853cc:	f10a 0001 	add.w	r0, sl, #1
   853d0:	ea4f 0868 	mov.w	r8, r8, asr #1
   853d4:	4438      	add	r0, r7
   853d6:	4540      	cmp	r0, r8
   853d8:	4642      	mov	r2, r8
   853da:	bf84      	itt	hi
   853dc:	4680      	movhi	r8, r0
   853de:	4642      	movhi	r2, r8
   853e0:	055b      	lsls	r3, r3, #21
   853e2:	f140 80f2 	bpl.w	855ca <__sfvwrite_r+0x2c2>
   853e6:	4611      	mov	r1, r2
   853e8:	9802      	ldr	r0, [sp, #8]
   853ea:	f000 f9bf 	bl	8576c <_malloc_r>
   853ee:	4683      	mov	fp, r0
   853f0:	2800      	cmp	r0, #0
   853f2:	f000 8105 	beq.w	85600 <__sfvwrite_r+0x2f8>
   853f6:	4652      	mov	r2, sl
   853f8:	6921      	ldr	r1, [r4, #16]
   853fa:	f000 fca9 	bl	85d50 <memcpy>
   853fe:	89a3      	ldrh	r3, [r4, #12]
   85400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85408:	81a3      	strh	r3, [r4, #12]
   8540a:	ebca 0308 	rsb	r3, sl, r8
   8540e:	eb0b 000a 	add.w	r0, fp, sl
   85412:	f8c4 8014 	str.w	r8, [r4, #20]
   85416:	46ba      	mov	sl, r7
   85418:	46b8      	mov	r8, r7
   8541a:	f8c4 b010 	str.w	fp, [r4, #16]
   8541e:	6020      	str	r0, [r4, #0]
   85420:	60a3      	str	r3, [r4, #8]
   85422:	4652      	mov	r2, sl
   85424:	4649      	mov	r1, r9
   85426:	f000 fd09 	bl	85e3c <memmove>
   8542a:	68a0      	ldr	r0, [r4, #8]
   8542c:	6823      	ldr	r3, [r4, #0]
   8542e:	ebc8 0000 	rsb	r0, r8, r0
   85432:	60a0      	str	r0, [r4, #8]
   85434:	4638      	mov	r0, r7
   85436:	4453      	add	r3, sl
   85438:	6023      	str	r3, [r4, #0]
   8543a:	9a01      	ldr	r2, [sp, #4]
   8543c:	4481      	add	r9, r0
   8543e:	6893      	ldr	r3, [r2, #8]
   85440:	1a3f      	subs	r7, r7, r0
   85442:	1a1b      	subs	r3, r3, r0
   85444:	6093      	str	r3, [r2, #8]
   85446:	2b00      	cmp	r3, #0
   85448:	d090      	beq.n	8536c <__sfvwrite_r+0x64>
   8544a:	89a3      	ldrh	r3, [r4, #12]
   8544c:	2f00      	cmp	r7, #0
   8544e:	d1a8      	bne.n	853a2 <__sfvwrite_r+0x9a>
   85450:	f8d5 9000 	ldr.w	r9, [r5]
   85454:	686f      	ldr	r7, [r5, #4]
   85456:	3508      	adds	r5, #8
   85458:	e7a1      	b.n	8539e <__sfvwrite_r+0x96>
   8545a:	f8d5 9000 	ldr.w	r9, [r5]
   8545e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85462:	3508      	adds	r5, #8
   85464:	e76a      	b.n	8533c <__sfvwrite_r+0x34>
   85466:	2000      	movs	r0, #0
   85468:	4770      	bx	lr
   8546a:	6820      	ldr	r0, [r4, #0]
   8546c:	6923      	ldr	r3, [r4, #16]
   8546e:	4298      	cmp	r0, r3
   85470:	d803      	bhi.n	8547a <__sfvwrite_r+0x172>
   85472:	6962      	ldr	r2, [r4, #20]
   85474:	4297      	cmp	r7, r2
   85476:	f080 8083 	bcs.w	85580 <__sfvwrite_r+0x278>
   8547a:	45b8      	cmp	r8, r7
   8547c:	bf28      	it	cs
   8547e:	46b8      	movcs	r8, r7
   85480:	4649      	mov	r1, r9
   85482:	4642      	mov	r2, r8
   85484:	f000 fcda 	bl	85e3c <memmove>
   85488:	68a3      	ldr	r3, [r4, #8]
   8548a:	6822      	ldr	r2, [r4, #0]
   8548c:	ebc8 0303 	rsb	r3, r8, r3
   85490:	4442      	add	r2, r8
   85492:	60a3      	str	r3, [r4, #8]
   85494:	6022      	str	r2, [r4, #0]
   85496:	2b00      	cmp	r3, #0
   85498:	d148      	bne.n	8552c <__sfvwrite_r+0x224>
   8549a:	4621      	mov	r1, r4
   8549c:	9802      	ldr	r0, [sp, #8]
   8549e:	f7ff fcef 	bl	84e80 <_fflush_r>
   854a2:	2800      	cmp	r0, #0
   854a4:	d042      	beq.n	8552c <__sfvwrite_r+0x224>
   854a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   854aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   854ae:	f04f 30ff 	mov.w	r0, #4294967295
   854b2:	81a3      	strh	r3, [r4, #12]
   854b4:	b005      	add	sp, #20
   854b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854ba:	4680      	mov	r8, r0
   854bc:	4682      	mov	sl, r0
   854be:	4681      	mov	r9, r0
   854c0:	9001      	str	r0, [sp, #4]
   854c2:	f1b9 0f00 	cmp.w	r9, #0
   854c6:	d029      	beq.n	8551c <__sfvwrite_r+0x214>
   854c8:	9b01      	ldr	r3, [sp, #4]
   854ca:	2b00      	cmp	r3, #0
   854cc:	d04b      	beq.n	85566 <__sfvwrite_r+0x25e>
   854ce:	45c8      	cmp	r8, r9
   854d0:	46c3      	mov	fp, r8
   854d2:	bf28      	it	cs
   854d4:	46cb      	movcs	fp, r9
   854d6:	6820      	ldr	r0, [r4, #0]
   854d8:	6923      	ldr	r3, [r4, #16]
   854da:	465f      	mov	r7, fp
   854dc:	4298      	cmp	r0, r3
   854de:	6962      	ldr	r2, [r4, #20]
   854e0:	d903      	bls.n	854ea <__sfvwrite_r+0x1e2>
   854e2:	68a3      	ldr	r3, [r4, #8]
   854e4:	4413      	add	r3, r2
   854e6:	459b      	cmp	fp, r3
   854e8:	dc5c      	bgt.n	855a4 <__sfvwrite_r+0x29c>
   854ea:	4593      	cmp	fp, r2
   854ec:	db24      	blt.n	85538 <__sfvwrite_r+0x230>
   854ee:	4613      	mov	r3, r2
   854f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   854f2:	4652      	mov	r2, sl
   854f4:	69e1      	ldr	r1, [r4, #28]
   854f6:	9802      	ldr	r0, [sp, #8]
   854f8:	47b8      	blx	r7
   854fa:	1e07      	subs	r7, r0, #0
   854fc:	ddd3      	ble.n	854a6 <__sfvwrite_r+0x19e>
   854fe:	ebb8 0807 	subs.w	r8, r8, r7
   85502:	d027      	beq.n	85554 <__sfvwrite_r+0x24c>
   85504:	68b3      	ldr	r3, [r6, #8]
   85506:	44ba      	add	sl, r7
   85508:	1bdb      	subs	r3, r3, r7
   8550a:	ebc7 0909 	rsb	r9, r7, r9
   8550e:	60b3      	str	r3, [r6, #8]
   85510:	2b00      	cmp	r3, #0
   85512:	f43f af2b 	beq.w	8536c <__sfvwrite_r+0x64>
   85516:	f1b9 0f00 	cmp.w	r9, #0
   8551a:	d1d5      	bne.n	854c8 <__sfvwrite_r+0x1c0>
   8551c:	2300      	movs	r3, #0
   8551e:	f8d5 a000 	ldr.w	sl, [r5]
   85522:	f8d5 9004 	ldr.w	r9, [r5, #4]
   85526:	9301      	str	r3, [sp, #4]
   85528:	3508      	adds	r5, #8
   8552a:	e7ca      	b.n	854c2 <__sfvwrite_r+0x1ba>
   8552c:	4640      	mov	r0, r8
   8552e:	e784      	b.n	8543a <__sfvwrite_r+0x132>
   85530:	46b8      	mov	r8, r7
   85532:	46ba      	mov	sl, r7
   85534:	6820      	ldr	r0, [r4, #0]
   85536:	e774      	b.n	85422 <__sfvwrite_r+0x11a>
   85538:	465a      	mov	r2, fp
   8553a:	4651      	mov	r1, sl
   8553c:	f000 fc7e 	bl	85e3c <memmove>
   85540:	68a2      	ldr	r2, [r4, #8]
   85542:	6823      	ldr	r3, [r4, #0]
   85544:	ebcb 0202 	rsb	r2, fp, r2
   85548:	445b      	add	r3, fp
   8554a:	ebb8 0807 	subs.w	r8, r8, r7
   8554e:	60a2      	str	r2, [r4, #8]
   85550:	6023      	str	r3, [r4, #0]
   85552:	d1d7      	bne.n	85504 <__sfvwrite_r+0x1fc>
   85554:	4621      	mov	r1, r4
   85556:	9802      	ldr	r0, [sp, #8]
   85558:	f7ff fc92 	bl	84e80 <_fflush_r>
   8555c:	2800      	cmp	r0, #0
   8555e:	d1a2      	bne.n	854a6 <__sfvwrite_r+0x19e>
   85560:	f8cd 8004 	str.w	r8, [sp, #4]
   85564:	e7ce      	b.n	85504 <__sfvwrite_r+0x1fc>
   85566:	464a      	mov	r2, r9
   85568:	210a      	movs	r1, #10
   8556a:	4650      	mov	r0, sl
   8556c:	f000 fbaa 	bl	85cc4 <memchr>
   85570:	2800      	cmp	r0, #0
   85572:	d03d      	beq.n	855f0 <__sfvwrite_r+0x2e8>
   85574:	3001      	adds	r0, #1
   85576:	2301      	movs	r3, #1
   85578:	ebca 0800 	rsb	r8, sl, r0
   8557c:	9301      	str	r3, [sp, #4]
   8557e:	e7a6      	b.n	854ce <__sfvwrite_r+0x1c6>
   85580:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85584:	42bb      	cmp	r3, r7
   85586:	bf28      	it	cs
   85588:	463b      	movcs	r3, r7
   8558a:	fb93 f3f2 	sdiv	r3, r3, r2
   8558e:	69e1      	ldr	r1, [r4, #28]
   85590:	fb02 f303 	mul.w	r3, r2, r3
   85594:	9802      	ldr	r0, [sp, #8]
   85596:	464a      	mov	r2, r9
   85598:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8559a:	47b0      	blx	r6
   8559c:	2800      	cmp	r0, #0
   8559e:	f73f af4c 	bgt.w	8543a <__sfvwrite_r+0x132>
   855a2:	e780      	b.n	854a6 <__sfvwrite_r+0x19e>
   855a4:	461a      	mov	r2, r3
   855a6:	4651      	mov	r1, sl
   855a8:	9303      	str	r3, [sp, #12]
   855aa:	f000 fc47 	bl	85e3c <memmove>
   855ae:	6822      	ldr	r2, [r4, #0]
   855b0:	9b03      	ldr	r3, [sp, #12]
   855b2:	4621      	mov	r1, r4
   855b4:	441a      	add	r2, r3
   855b6:	6022      	str	r2, [r4, #0]
   855b8:	9802      	ldr	r0, [sp, #8]
   855ba:	f7ff fc61 	bl	84e80 <_fflush_r>
   855be:	9b03      	ldr	r3, [sp, #12]
   855c0:	2800      	cmp	r0, #0
   855c2:	f47f af70 	bne.w	854a6 <__sfvwrite_r+0x19e>
   855c6:	461f      	mov	r7, r3
   855c8:	e799      	b.n	854fe <__sfvwrite_r+0x1f6>
   855ca:	9802      	ldr	r0, [sp, #8]
   855cc:	f000 fc9e 	bl	85f0c <_realloc_r>
   855d0:	4683      	mov	fp, r0
   855d2:	2800      	cmp	r0, #0
   855d4:	f47f af19 	bne.w	8540a <__sfvwrite_r+0x102>
   855d8:	9d02      	ldr	r5, [sp, #8]
   855da:	6921      	ldr	r1, [r4, #16]
   855dc:	4628      	mov	r0, r5
   855de:	f7ff fdab 	bl	85138 <_free_r>
   855e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   855e6:	220c      	movs	r2, #12
   855e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   855ec:	602a      	str	r2, [r5, #0]
   855ee:	e75c      	b.n	854aa <__sfvwrite_r+0x1a2>
   855f0:	2301      	movs	r3, #1
   855f2:	f109 0801 	add.w	r8, r9, #1
   855f6:	9301      	str	r3, [sp, #4]
   855f8:	e769      	b.n	854ce <__sfvwrite_r+0x1c6>
   855fa:	f04f 30ff 	mov.w	r0, #4294967295
   855fe:	e6b6      	b.n	8536e <__sfvwrite_r+0x66>
   85600:	9a02      	ldr	r2, [sp, #8]
   85602:	230c      	movs	r3, #12
   85604:	6013      	str	r3, [r2, #0]
   85606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8560a:	e74e      	b.n	854aa <__sfvwrite_r+0x1a2>
   8560c:	7ffffc00 	.word	0x7ffffc00

00085610 <_fwalk_reent>:
   85610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85614:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85618:	d01e      	beq.n	85658 <_fwalk_reent+0x48>
   8561a:	4688      	mov	r8, r1
   8561c:	4607      	mov	r7, r0
   8561e:	f04f 0900 	mov.w	r9, #0
   85622:	6875      	ldr	r5, [r6, #4]
   85624:	68b4      	ldr	r4, [r6, #8]
   85626:	3d01      	subs	r5, #1
   85628:	d410      	bmi.n	8564c <_fwalk_reent+0x3c>
   8562a:	89a3      	ldrh	r3, [r4, #12]
   8562c:	3d01      	subs	r5, #1
   8562e:	2b01      	cmp	r3, #1
   85630:	d908      	bls.n	85644 <_fwalk_reent+0x34>
   85632:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85636:	3301      	adds	r3, #1
   85638:	d004      	beq.n	85644 <_fwalk_reent+0x34>
   8563a:	4621      	mov	r1, r4
   8563c:	4638      	mov	r0, r7
   8563e:	47c0      	blx	r8
   85640:	ea49 0900 	orr.w	r9, r9, r0
   85644:	1c6b      	adds	r3, r5, #1
   85646:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8564a:	d1ee      	bne.n	8562a <_fwalk_reent+0x1a>
   8564c:	6836      	ldr	r6, [r6, #0]
   8564e:	2e00      	cmp	r6, #0
   85650:	d1e7      	bne.n	85622 <_fwalk_reent+0x12>
   85652:	4648      	mov	r0, r9
   85654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85658:	46b1      	mov	r9, r6
   8565a:	4648      	mov	r0, r9
   8565c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085660 <__locale_charset>:
   85660:	4800      	ldr	r0, [pc, #0]	; (85664 <__locale_charset+0x4>)
   85662:	4770      	bx	lr
   85664:	20070834 	.word	0x20070834

00085668 <__locale_mb_cur_max>:
   85668:	4b01      	ldr	r3, [pc, #4]	; (85670 <__locale_mb_cur_max+0x8>)
   8566a:	6818      	ldr	r0, [r3, #0]
   8566c:	4770      	bx	lr
   8566e:	bf00      	nop
   85670:	20070854 	.word	0x20070854

00085674 <__swhatbuf_r>:
   85674:	b570      	push	{r4, r5, r6, lr}
   85676:	460e      	mov	r6, r1
   85678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8567c:	b090      	sub	sp, #64	; 0x40
   8567e:	2900      	cmp	r1, #0
   85680:	4614      	mov	r4, r2
   85682:	461d      	mov	r5, r3
   85684:	db14      	blt.n	856b0 <__swhatbuf_r+0x3c>
   85686:	aa01      	add	r2, sp, #4
   85688:	f000 ffca 	bl	86620 <_fstat_r>
   8568c:	2800      	cmp	r0, #0
   8568e:	db0f      	blt.n	856b0 <__swhatbuf_r+0x3c>
   85690:	9a02      	ldr	r2, [sp, #8]
   85692:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8569a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8569e:	fab2 f282 	clz	r2, r2
   856a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   856a6:	0952      	lsrs	r2, r2, #5
   856a8:	602a      	str	r2, [r5, #0]
   856aa:	6023      	str	r3, [r4, #0]
   856ac:	b010      	add	sp, #64	; 0x40
   856ae:	bd70      	pop	{r4, r5, r6, pc}
   856b0:	89b2      	ldrh	r2, [r6, #12]
   856b2:	2000      	movs	r0, #0
   856b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   856b8:	b292      	uxth	r2, r2
   856ba:	6028      	str	r0, [r5, #0]
   856bc:	b11a      	cbz	r2, 856c6 <__swhatbuf_r+0x52>
   856be:	2340      	movs	r3, #64	; 0x40
   856c0:	6023      	str	r3, [r4, #0]
   856c2:	b010      	add	sp, #64	; 0x40
   856c4:	bd70      	pop	{r4, r5, r6, pc}
   856c6:	4610      	mov	r0, r2
   856c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   856cc:	6023      	str	r3, [r4, #0]
   856ce:	b010      	add	sp, #64	; 0x40
   856d0:	bd70      	pop	{r4, r5, r6, pc}
   856d2:	bf00      	nop

000856d4 <__smakebuf_r>:
   856d4:	898a      	ldrh	r2, [r1, #12]
   856d6:	460b      	mov	r3, r1
   856d8:	0792      	lsls	r2, r2, #30
   856da:	d506      	bpl.n	856ea <__smakebuf_r+0x16>
   856dc:	f101 0243 	add.w	r2, r1, #67	; 0x43
   856e0:	2101      	movs	r1, #1
   856e2:	601a      	str	r2, [r3, #0]
   856e4:	611a      	str	r2, [r3, #16]
   856e6:	6159      	str	r1, [r3, #20]
   856e8:	4770      	bx	lr
   856ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   856ec:	b083      	sub	sp, #12
   856ee:	ab01      	add	r3, sp, #4
   856f0:	466a      	mov	r2, sp
   856f2:	460c      	mov	r4, r1
   856f4:	4605      	mov	r5, r0
   856f6:	f7ff ffbd 	bl	85674 <__swhatbuf_r>
   856fa:	9900      	ldr	r1, [sp, #0]
   856fc:	4606      	mov	r6, r0
   856fe:	4628      	mov	r0, r5
   85700:	f000 f834 	bl	8576c <_malloc_r>
   85704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85708:	b1d0      	cbz	r0, 85740 <__smakebuf_r+0x6c>
   8570a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8570e:	4f12      	ldr	r7, [pc, #72]	; (85758 <__smakebuf_r+0x84>)
   85710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85714:	63ef      	str	r7, [r5, #60]	; 0x3c
   85716:	81a3      	strh	r3, [r4, #12]
   85718:	6020      	str	r0, [r4, #0]
   8571a:	6120      	str	r0, [r4, #16]
   8571c:	6161      	str	r1, [r4, #20]
   8571e:	b91a      	cbnz	r2, 85728 <__smakebuf_r+0x54>
   85720:	4333      	orrs	r3, r6
   85722:	81a3      	strh	r3, [r4, #12]
   85724:	b003      	add	sp, #12
   85726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85728:	4628      	mov	r0, r5
   8572a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8572e:	f000 ff8b 	bl	86648 <_isatty_r>
   85732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85736:	2800      	cmp	r0, #0
   85738:	d0f2      	beq.n	85720 <__smakebuf_r+0x4c>
   8573a:	f043 0301 	orr.w	r3, r3, #1
   8573e:	e7ef      	b.n	85720 <__smakebuf_r+0x4c>
   85740:	059a      	lsls	r2, r3, #22
   85742:	d4ef      	bmi.n	85724 <__smakebuf_r+0x50>
   85744:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85748:	f043 0302 	orr.w	r3, r3, #2
   8574c:	2101      	movs	r1, #1
   8574e:	81a3      	strh	r3, [r4, #12]
   85750:	6022      	str	r2, [r4, #0]
   85752:	6122      	str	r2, [r4, #16]
   85754:	6161      	str	r1, [r4, #20]
   85756:	e7e5      	b.n	85724 <__smakebuf_r+0x50>
   85758:	00084ead 	.word	0x00084ead

0008575c <malloc>:
   8575c:	4b02      	ldr	r3, [pc, #8]	; (85768 <malloc+0xc>)
   8575e:	4601      	mov	r1, r0
   85760:	6818      	ldr	r0, [r3, #0]
   85762:	f000 b803 	b.w	8576c <_malloc_r>
   85766:	bf00      	nop
   85768:	20070830 	.word	0x20070830

0008576c <_malloc_r>:
   8576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85770:	f101 050b 	add.w	r5, r1, #11
   85774:	2d16      	cmp	r5, #22
   85776:	b083      	sub	sp, #12
   85778:	4606      	mov	r6, r0
   8577a:	f240 80a0 	bls.w	858be <_malloc_r+0x152>
   8577e:	f035 0507 	bics.w	r5, r5, #7
   85782:	f100 80c0 	bmi.w	85906 <_malloc_r+0x19a>
   85786:	42a9      	cmp	r1, r5
   85788:	f200 80bd 	bhi.w	85906 <_malloc_r+0x19a>
   8578c:	f000 fbba 	bl	85f04 <__malloc_lock>
   85790:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85794:	f0c0 8290 	bcc.w	85cb8 <_malloc_r+0x54c>
   85798:	0a6b      	lsrs	r3, r5, #9
   8579a:	f000 80bb 	beq.w	85914 <_malloc_r+0x1a8>
   8579e:	2b04      	cmp	r3, #4
   857a0:	f200 8177 	bhi.w	85a92 <_malloc_r+0x326>
   857a4:	09a8      	lsrs	r0, r5, #6
   857a6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   857aa:	ea4f 014e 	mov.w	r1, lr, lsl #1
   857ae:	3038      	adds	r0, #56	; 0x38
   857b0:	4fbe      	ldr	r7, [pc, #760]	; (85aac <_malloc_r+0x340>)
   857b2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   857b6:	684c      	ldr	r4, [r1, #4]
   857b8:	3908      	subs	r1, #8
   857ba:	42a1      	cmp	r1, r4
   857bc:	d107      	bne.n	857ce <_malloc_r+0x62>
   857be:	e0ae      	b.n	8591e <_malloc_r+0x1b2>
   857c0:	2a00      	cmp	r2, #0
   857c2:	f280 80ae 	bge.w	85922 <_malloc_r+0x1b6>
   857c6:	68e4      	ldr	r4, [r4, #12]
   857c8:	42a1      	cmp	r1, r4
   857ca:	f000 80a8 	beq.w	8591e <_malloc_r+0x1b2>
   857ce:	6863      	ldr	r3, [r4, #4]
   857d0:	f023 0303 	bic.w	r3, r3, #3
   857d4:	1b5a      	subs	r2, r3, r5
   857d6:	2a0f      	cmp	r2, #15
   857d8:	ddf2      	ble.n	857c0 <_malloc_r+0x54>
   857da:	49b4      	ldr	r1, [pc, #720]	; (85aac <_malloc_r+0x340>)
   857dc:	693c      	ldr	r4, [r7, #16]
   857de:	f101 0e08 	add.w	lr, r1, #8
   857e2:	4574      	cmp	r4, lr
   857e4:	f000 81a8 	beq.w	85b38 <_malloc_r+0x3cc>
   857e8:	6863      	ldr	r3, [r4, #4]
   857ea:	f023 0303 	bic.w	r3, r3, #3
   857ee:	1b5a      	subs	r2, r3, r5
   857f0:	2a0f      	cmp	r2, #15
   857f2:	f300 818e 	bgt.w	85b12 <_malloc_r+0x3a6>
   857f6:	2a00      	cmp	r2, #0
   857f8:	f8c1 e014 	str.w	lr, [r1, #20]
   857fc:	f8c1 e010 	str.w	lr, [r1, #16]
   85800:	f280 8093 	bge.w	8592a <_malloc_r+0x1be>
   85804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85808:	f080 815c 	bcs.w	85ac4 <_malloc_r+0x358>
   8580c:	08db      	lsrs	r3, r3, #3
   8580e:	684a      	ldr	r2, [r1, #4]
   85810:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85814:	f04f 0c01 	mov.w	ip, #1
   85818:	3301      	adds	r3, #1
   8581a:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   8581e:	fa0c f909 	lsl.w	r9, ip, r9
   85822:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   85826:	ea49 0202 	orr.w	r2, r9, r2
   8582a:	f1ac 0c08 	sub.w	ip, ip, #8
   8582e:	f8c4 c00c 	str.w	ip, [r4, #12]
   85832:	f8c4 8008 	str.w	r8, [r4, #8]
   85836:	604a      	str	r2, [r1, #4]
   85838:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8583c:	f8c8 400c 	str.w	r4, [r8, #12]
   85840:	1083      	asrs	r3, r0, #2
   85842:	2401      	movs	r4, #1
   85844:	409c      	lsls	r4, r3
   85846:	4294      	cmp	r4, r2
   85848:	d87c      	bhi.n	85944 <_malloc_r+0x1d8>
   8584a:	4214      	tst	r4, r2
   8584c:	d106      	bne.n	8585c <_malloc_r+0xf0>
   8584e:	f020 0003 	bic.w	r0, r0, #3
   85852:	0064      	lsls	r4, r4, #1
   85854:	4214      	tst	r4, r2
   85856:	f100 0004 	add.w	r0, r0, #4
   8585a:	d0fa      	beq.n	85852 <_malloc_r+0xe6>
   8585c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85860:	46cc      	mov	ip, r9
   85862:	4680      	mov	r8, r0
   85864:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85868:	458c      	cmp	ip, r1
   8586a:	d107      	bne.n	8587c <_malloc_r+0x110>
   8586c:	e166      	b.n	85b3c <_malloc_r+0x3d0>
   8586e:	2a00      	cmp	r2, #0
   85870:	f280 8174 	bge.w	85b5c <_malloc_r+0x3f0>
   85874:	68c9      	ldr	r1, [r1, #12]
   85876:	458c      	cmp	ip, r1
   85878:	f000 8160 	beq.w	85b3c <_malloc_r+0x3d0>
   8587c:	684b      	ldr	r3, [r1, #4]
   8587e:	f023 0303 	bic.w	r3, r3, #3
   85882:	1b5a      	subs	r2, r3, r5
   85884:	2a0f      	cmp	r2, #15
   85886:	ddf2      	ble.n	8586e <_malloc_r+0x102>
   85888:	460c      	mov	r4, r1
   8588a:	68cb      	ldr	r3, [r1, #12]
   8588c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85890:	f045 0801 	orr.w	r8, r5, #1
   85894:	f8c1 8004 	str.w	r8, [r1, #4]
   85898:	440d      	add	r5, r1
   8589a:	f042 0101 	orr.w	r1, r2, #1
   8589e:	f8cc 300c 	str.w	r3, [ip, #12]
   858a2:	4630      	mov	r0, r6
   858a4:	f8c3 c008 	str.w	ip, [r3, #8]
   858a8:	617d      	str	r5, [r7, #20]
   858aa:	613d      	str	r5, [r7, #16]
   858ac:	f8c5 e00c 	str.w	lr, [r5, #12]
   858b0:	f8c5 e008 	str.w	lr, [r5, #8]
   858b4:	6069      	str	r1, [r5, #4]
   858b6:	50aa      	str	r2, [r5, r2]
   858b8:	f000 fb26 	bl	85f08 <__malloc_unlock>
   858bc:	e01f      	b.n	858fe <_malloc_r+0x192>
   858be:	2910      	cmp	r1, #16
   858c0:	d821      	bhi.n	85906 <_malloc_r+0x19a>
   858c2:	f000 fb1f 	bl	85f04 <__malloc_lock>
   858c6:	2510      	movs	r5, #16
   858c8:	2306      	movs	r3, #6
   858ca:	2002      	movs	r0, #2
   858cc:	4f77      	ldr	r7, [pc, #476]	; (85aac <_malloc_r+0x340>)
   858ce:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   858d2:	685c      	ldr	r4, [r3, #4]
   858d4:	f1a3 0208 	sub.w	r2, r3, #8
   858d8:	4294      	cmp	r4, r2
   858da:	f000 8138 	beq.w	85b4e <_malloc_r+0x3e2>
   858de:	6863      	ldr	r3, [r4, #4]
   858e0:	68e1      	ldr	r1, [r4, #12]
   858e2:	f023 0303 	bic.w	r3, r3, #3
   858e6:	4423      	add	r3, r4
   858e8:	685a      	ldr	r2, [r3, #4]
   858ea:	68a5      	ldr	r5, [r4, #8]
   858ec:	f042 0201 	orr.w	r2, r2, #1
   858f0:	60e9      	str	r1, [r5, #12]
   858f2:	4630      	mov	r0, r6
   858f4:	608d      	str	r5, [r1, #8]
   858f6:	605a      	str	r2, [r3, #4]
   858f8:	f000 fb06 	bl	85f08 <__malloc_unlock>
   858fc:	3408      	adds	r4, #8
   858fe:	4620      	mov	r0, r4
   85900:	b003      	add	sp, #12
   85902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85906:	2400      	movs	r4, #0
   85908:	4620      	mov	r0, r4
   8590a:	230c      	movs	r3, #12
   8590c:	6033      	str	r3, [r6, #0]
   8590e:	b003      	add	sp, #12
   85910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85914:	2180      	movs	r1, #128	; 0x80
   85916:	f04f 0e40 	mov.w	lr, #64	; 0x40
   8591a:	203f      	movs	r0, #63	; 0x3f
   8591c:	e748      	b.n	857b0 <_malloc_r+0x44>
   8591e:	4670      	mov	r0, lr
   85920:	e75b      	b.n	857da <_malloc_r+0x6e>
   85922:	4423      	add	r3, r4
   85924:	685a      	ldr	r2, [r3, #4]
   85926:	68e1      	ldr	r1, [r4, #12]
   85928:	e7df      	b.n	858ea <_malloc_r+0x17e>
   8592a:	4423      	add	r3, r4
   8592c:	685a      	ldr	r2, [r3, #4]
   8592e:	4630      	mov	r0, r6
   85930:	f042 0201 	orr.w	r2, r2, #1
   85934:	605a      	str	r2, [r3, #4]
   85936:	3408      	adds	r4, #8
   85938:	f000 fae6 	bl	85f08 <__malloc_unlock>
   8593c:	4620      	mov	r0, r4
   8593e:	b003      	add	sp, #12
   85940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85944:	68bc      	ldr	r4, [r7, #8]
   85946:	6863      	ldr	r3, [r4, #4]
   85948:	f023 0803 	bic.w	r8, r3, #3
   8594c:	45a8      	cmp	r8, r5
   8594e:	d304      	bcc.n	8595a <_malloc_r+0x1ee>
   85950:	ebc5 0308 	rsb	r3, r5, r8
   85954:	2b0f      	cmp	r3, #15
   85956:	f300 808c 	bgt.w	85a72 <_malloc_r+0x306>
   8595a:	4b55      	ldr	r3, [pc, #340]	; (85ab0 <_malloc_r+0x344>)
   8595c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85ac0 <_malloc_r+0x354>
   85960:	681a      	ldr	r2, [r3, #0]
   85962:	f8d9 3000 	ldr.w	r3, [r9]
   85966:	442a      	add	r2, r5
   85968:	3301      	adds	r3, #1
   8596a:	eb04 0a08 	add.w	sl, r4, r8
   8596e:	f000 8160 	beq.w	85c32 <_malloc_r+0x4c6>
   85972:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85976:	320f      	adds	r2, #15
   85978:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8597c:	f022 020f 	bic.w	r2, r2, #15
   85980:	4611      	mov	r1, r2
   85982:	4630      	mov	r0, r6
   85984:	9201      	str	r2, [sp, #4]
   85986:	f000 fcab 	bl	862e0 <_sbrk_r>
   8598a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8598e:	4683      	mov	fp, r0
   85990:	9a01      	ldr	r2, [sp, #4]
   85992:	f000 8158 	beq.w	85c46 <_malloc_r+0x4da>
   85996:	4582      	cmp	sl, r0
   85998:	f200 80fc 	bhi.w	85b94 <_malloc_r+0x428>
   8599c:	4b45      	ldr	r3, [pc, #276]	; (85ab4 <_malloc_r+0x348>)
   8599e:	45da      	cmp	sl, fp
   859a0:	6819      	ldr	r1, [r3, #0]
   859a2:	4411      	add	r1, r2
   859a4:	6019      	str	r1, [r3, #0]
   859a6:	f000 8153 	beq.w	85c50 <_malloc_r+0x4e4>
   859aa:	f8d9 0000 	ldr.w	r0, [r9]
   859ae:	f8df e110 	ldr.w	lr, [pc, #272]	; 85ac0 <_malloc_r+0x354>
   859b2:	3001      	adds	r0, #1
   859b4:	bf1b      	ittet	ne
   859b6:	ebca 0a0b 	rsbne	sl, sl, fp
   859ba:	4451      	addne	r1, sl
   859bc:	f8ce b000 	streq.w	fp, [lr]
   859c0:	6019      	strne	r1, [r3, #0]
   859c2:	f01b 0107 	ands.w	r1, fp, #7
   859c6:	f000 8117 	beq.w	85bf8 <_malloc_r+0x48c>
   859ca:	f1c1 0008 	rsb	r0, r1, #8
   859ce:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   859d2:	4483      	add	fp, r0
   859d4:	3108      	adds	r1, #8
   859d6:	445a      	add	r2, fp
   859d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
   859dc:	ebc2 0901 	rsb	r9, r2, r1
   859e0:	4649      	mov	r1, r9
   859e2:	4630      	mov	r0, r6
   859e4:	9301      	str	r3, [sp, #4]
   859e6:	f000 fc7b 	bl	862e0 <_sbrk_r>
   859ea:	1c43      	adds	r3, r0, #1
   859ec:	9b01      	ldr	r3, [sp, #4]
   859ee:	f000 813f 	beq.w	85c70 <_malloc_r+0x504>
   859f2:	ebcb 0200 	rsb	r2, fp, r0
   859f6:	444a      	add	r2, r9
   859f8:	f042 0201 	orr.w	r2, r2, #1
   859fc:	6819      	ldr	r1, [r3, #0]
   859fe:	42bc      	cmp	r4, r7
   85a00:	4449      	add	r1, r9
   85a02:	f8c7 b008 	str.w	fp, [r7, #8]
   85a06:	6019      	str	r1, [r3, #0]
   85a08:	f8cb 2004 	str.w	r2, [fp, #4]
   85a0c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85ab4 <_malloc_r+0x348>
   85a10:	d016      	beq.n	85a40 <_malloc_r+0x2d4>
   85a12:	f1b8 0f0f 	cmp.w	r8, #15
   85a16:	f240 80fd 	bls.w	85c14 <_malloc_r+0x4a8>
   85a1a:	6862      	ldr	r2, [r4, #4]
   85a1c:	f1a8 030c 	sub.w	r3, r8, #12
   85a20:	f023 0307 	bic.w	r3, r3, #7
   85a24:	f002 0201 	and.w	r2, r2, #1
   85a28:	18e0      	adds	r0, r4, r3
   85a2a:	f04f 0e05 	mov.w	lr, #5
   85a2e:	431a      	orrs	r2, r3
   85a30:	2b0f      	cmp	r3, #15
   85a32:	6062      	str	r2, [r4, #4]
   85a34:	f8c0 e004 	str.w	lr, [r0, #4]
   85a38:	f8c0 e008 	str.w	lr, [r0, #8]
   85a3c:	f200 811c 	bhi.w	85c78 <_malloc_r+0x50c>
   85a40:	4b1d      	ldr	r3, [pc, #116]	; (85ab8 <_malloc_r+0x34c>)
   85a42:	68bc      	ldr	r4, [r7, #8]
   85a44:	681a      	ldr	r2, [r3, #0]
   85a46:	4291      	cmp	r1, r2
   85a48:	bf88      	it	hi
   85a4a:	6019      	strhi	r1, [r3, #0]
   85a4c:	4b1b      	ldr	r3, [pc, #108]	; (85abc <_malloc_r+0x350>)
   85a4e:	681a      	ldr	r2, [r3, #0]
   85a50:	4291      	cmp	r1, r2
   85a52:	6862      	ldr	r2, [r4, #4]
   85a54:	bf88      	it	hi
   85a56:	6019      	strhi	r1, [r3, #0]
   85a58:	f022 0203 	bic.w	r2, r2, #3
   85a5c:	4295      	cmp	r5, r2
   85a5e:	eba2 0305 	sub.w	r3, r2, r5
   85a62:	d801      	bhi.n	85a68 <_malloc_r+0x2fc>
   85a64:	2b0f      	cmp	r3, #15
   85a66:	dc04      	bgt.n	85a72 <_malloc_r+0x306>
   85a68:	4630      	mov	r0, r6
   85a6a:	f000 fa4d 	bl	85f08 <__malloc_unlock>
   85a6e:	2400      	movs	r4, #0
   85a70:	e745      	b.n	858fe <_malloc_r+0x192>
   85a72:	f045 0201 	orr.w	r2, r5, #1
   85a76:	f043 0301 	orr.w	r3, r3, #1
   85a7a:	4425      	add	r5, r4
   85a7c:	6062      	str	r2, [r4, #4]
   85a7e:	4630      	mov	r0, r6
   85a80:	60bd      	str	r5, [r7, #8]
   85a82:	3408      	adds	r4, #8
   85a84:	606b      	str	r3, [r5, #4]
   85a86:	f000 fa3f 	bl	85f08 <__malloc_unlock>
   85a8a:	4620      	mov	r0, r4
   85a8c:	b003      	add	sp, #12
   85a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a92:	2b14      	cmp	r3, #20
   85a94:	d971      	bls.n	85b7a <_malloc_r+0x40e>
   85a96:	2b54      	cmp	r3, #84	; 0x54
   85a98:	f200 80a4 	bhi.w	85be4 <_malloc_r+0x478>
   85a9c:	0b28      	lsrs	r0, r5, #12
   85a9e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   85aa2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85aa6:	306e      	adds	r0, #110	; 0x6e
   85aa8:	e682      	b.n	857b0 <_malloc_r+0x44>
   85aaa:	bf00      	nop
   85aac:	20070858 	.word	0x20070858
   85ab0:	20070d90 	.word	0x20070d90
   85ab4:	20070d94 	.word	0x20070d94
   85ab8:	20070d8c 	.word	0x20070d8c
   85abc:	20070d88 	.word	0x20070d88
   85ac0:	20070c64 	.word	0x20070c64
   85ac4:	0a5a      	lsrs	r2, r3, #9
   85ac6:	2a04      	cmp	r2, #4
   85ac8:	d95e      	bls.n	85b88 <_malloc_r+0x41c>
   85aca:	2a14      	cmp	r2, #20
   85acc:	f200 80b3 	bhi.w	85c36 <_malloc_r+0x4ca>
   85ad0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85ad4:	0049      	lsls	r1, r1, #1
   85ad6:	325b      	adds	r2, #91	; 0x5b
   85ad8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85adc:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85ae0:	f1ac 0c08 	sub.w	ip, ip, #8
   85ae4:	458c      	cmp	ip, r1
   85ae6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 85cc0 <_malloc_r+0x554>
   85aea:	f000 8088 	beq.w	85bfe <_malloc_r+0x492>
   85aee:	684a      	ldr	r2, [r1, #4]
   85af0:	f022 0203 	bic.w	r2, r2, #3
   85af4:	4293      	cmp	r3, r2
   85af6:	d202      	bcs.n	85afe <_malloc_r+0x392>
   85af8:	6889      	ldr	r1, [r1, #8]
   85afa:	458c      	cmp	ip, r1
   85afc:	d1f7      	bne.n	85aee <_malloc_r+0x382>
   85afe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85b02:	687a      	ldr	r2, [r7, #4]
   85b04:	f8c4 c00c 	str.w	ip, [r4, #12]
   85b08:	60a1      	str	r1, [r4, #8]
   85b0a:	f8cc 4008 	str.w	r4, [ip, #8]
   85b0e:	60cc      	str	r4, [r1, #12]
   85b10:	e696      	b.n	85840 <_malloc_r+0xd4>
   85b12:	f045 0701 	orr.w	r7, r5, #1
   85b16:	f042 0301 	orr.w	r3, r2, #1
   85b1a:	4425      	add	r5, r4
   85b1c:	6067      	str	r7, [r4, #4]
   85b1e:	4630      	mov	r0, r6
   85b20:	614d      	str	r5, [r1, #20]
   85b22:	610d      	str	r5, [r1, #16]
   85b24:	f8c5 e00c 	str.w	lr, [r5, #12]
   85b28:	f8c5 e008 	str.w	lr, [r5, #8]
   85b2c:	606b      	str	r3, [r5, #4]
   85b2e:	50aa      	str	r2, [r5, r2]
   85b30:	3408      	adds	r4, #8
   85b32:	f000 f9e9 	bl	85f08 <__malloc_unlock>
   85b36:	e6e2      	b.n	858fe <_malloc_r+0x192>
   85b38:	684a      	ldr	r2, [r1, #4]
   85b3a:	e681      	b.n	85840 <_malloc_r+0xd4>
   85b3c:	f108 0801 	add.w	r8, r8, #1
   85b40:	f018 0f03 	tst.w	r8, #3
   85b44:	f10c 0c08 	add.w	ip, ip, #8
   85b48:	f47f ae8c 	bne.w	85864 <_malloc_r+0xf8>
   85b4c:	e030      	b.n	85bb0 <_malloc_r+0x444>
   85b4e:	68dc      	ldr	r4, [r3, #12]
   85b50:	42a3      	cmp	r3, r4
   85b52:	bf08      	it	eq
   85b54:	3002      	addeq	r0, #2
   85b56:	f43f ae40 	beq.w	857da <_malloc_r+0x6e>
   85b5a:	e6c0      	b.n	858de <_malloc_r+0x172>
   85b5c:	460c      	mov	r4, r1
   85b5e:	440b      	add	r3, r1
   85b60:	685a      	ldr	r2, [r3, #4]
   85b62:	68c9      	ldr	r1, [r1, #12]
   85b64:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85b68:	f042 0201 	orr.w	r2, r2, #1
   85b6c:	605a      	str	r2, [r3, #4]
   85b6e:	4630      	mov	r0, r6
   85b70:	60e9      	str	r1, [r5, #12]
   85b72:	608d      	str	r5, [r1, #8]
   85b74:	f000 f9c8 	bl	85f08 <__malloc_unlock>
   85b78:	e6c1      	b.n	858fe <_malloc_r+0x192>
   85b7a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85b7e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85b82:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85b86:	e613      	b.n	857b0 <_malloc_r+0x44>
   85b88:	099a      	lsrs	r2, r3, #6
   85b8a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85b8e:	0049      	lsls	r1, r1, #1
   85b90:	3238      	adds	r2, #56	; 0x38
   85b92:	e7a1      	b.n	85ad8 <_malloc_r+0x36c>
   85b94:	42bc      	cmp	r4, r7
   85b96:	4b4a      	ldr	r3, [pc, #296]	; (85cc0 <_malloc_r+0x554>)
   85b98:	f43f af00 	beq.w	8599c <_malloc_r+0x230>
   85b9c:	689c      	ldr	r4, [r3, #8]
   85b9e:	6862      	ldr	r2, [r4, #4]
   85ba0:	f022 0203 	bic.w	r2, r2, #3
   85ba4:	e75a      	b.n	85a5c <_malloc_r+0x2f0>
   85ba6:	f859 3908 	ldr.w	r3, [r9], #-8
   85baa:	4599      	cmp	r9, r3
   85bac:	f040 8082 	bne.w	85cb4 <_malloc_r+0x548>
   85bb0:	f010 0f03 	tst.w	r0, #3
   85bb4:	f100 30ff 	add.w	r0, r0, #4294967295
   85bb8:	d1f5      	bne.n	85ba6 <_malloc_r+0x43a>
   85bba:	687b      	ldr	r3, [r7, #4]
   85bbc:	ea23 0304 	bic.w	r3, r3, r4
   85bc0:	607b      	str	r3, [r7, #4]
   85bc2:	0064      	lsls	r4, r4, #1
   85bc4:	429c      	cmp	r4, r3
   85bc6:	f63f aebd 	bhi.w	85944 <_malloc_r+0x1d8>
   85bca:	2c00      	cmp	r4, #0
   85bcc:	f43f aeba 	beq.w	85944 <_malloc_r+0x1d8>
   85bd0:	421c      	tst	r4, r3
   85bd2:	4640      	mov	r0, r8
   85bd4:	f47f ae42 	bne.w	8585c <_malloc_r+0xf0>
   85bd8:	0064      	lsls	r4, r4, #1
   85bda:	421c      	tst	r4, r3
   85bdc:	f100 0004 	add.w	r0, r0, #4
   85be0:	d0fa      	beq.n	85bd8 <_malloc_r+0x46c>
   85be2:	e63b      	b.n	8585c <_malloc_r+0xf0>
   85be4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85be8:	d818      	bhi.n	85c1c <_malloc_r+0x4b0>
   85bea:	0be8      	lsrs	r0, r5, #15
   85bec:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85bf0:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85bf4:	3077      	adds	r0, #119	; 0x77
   85bf6:	e5db      	b.n	857b0 <_malloc_r+0x44>
   85bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85bfc:	e6eb      	b.n	859d6 <_malloc_r+0x26a>
   85bfe:	2101      	movs	r1, #1
   85c00:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85c04:	1092      	asrs	r2, r2, #2
   85c06:	fa01 f202 	lsl.w	r2, r1, r2
   85c0a:	431a      	orrs	r2, r3
   85c0c:	f8c8 2004 	str.w	r2, [r8, #4]
   85c10:	4661      	mov	r1, ip
   85c12:	e777      	b.n	85b04 <_malloc_r+0x398>
   85c14:	2301      	movs	r3, #1
   85c16:	f8cb 3004 	str.w	r3, [fp, #4]
   85c1a:	e725      	b.n	85a68 <_malloc_r+0x2fc>
   85c1c:	f240 5254 	movw	r2, #1364	; 0x554
   85c20:	4293      	cmp	r3, r2
   85c22:	d820      	bhi.n	85c66 <_malloc_r+0x4fa>
   85c24:	0ca8      	lsrs	r0, r5, #18
   85c26:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85c2a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85c2e:	307c      	adds	r0, #124	; 0x7c
   85c30:	e5be      	b.n	857b0 <_malloc_r+0x44>
   85c32:	3210      	adds	r2, #16
   85c34:	e6a4      	b.n	85980 <_malloc_r+0x214>
   85c36:	2a54      	cmp	r2, #84	; 0x54
   85c38:	d826      	bhi.n	85c88 <_malloc_r+0x51c>
   85c3a:	0b1a      	lsrs	r2, r3, #12
   85c3c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85c40:	0049      	lsls	r1, r1, #1
   85c42:	326e      	adds	r2, #110	; 0x6e
   85c44:	e748      	b.n	85ad8 <_malloc_r+0x36c>
   85c46:	68bc      	ldr	r4, [r7, #8]
   85c48:	6862      	ldr	r2, [r4, #4]
   85c4a:	f022 0203 	bic.w	r2, r2, #3
   85c4e:	e705      	b.n	85a5c <_malloc_r+0x2f0>
   85c50:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85c54:	2800      	cmp	r0, #0
   85c56:	f47f aea8 	bne.w	859aa <_malloc_r+0x23e>
   85c5a:	4442      	add	r2, r8
   85c5c:	68bb      	ldr	r3, [r7, #8]
   85c5e:	f042 0201 	orr.w	r2, r2, #1
   85c62:	605a      	str	r2, [r3, #4]
   85c64:	e6ec      	b.n	85a40 <_malloc_r+0x2d4>
   85c66:	21fe      	movs	r1, #254	; 0xfe
   85c68:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85c6c:	207e      	movs	r0, #126	; 0x7e
   85c6e:	e59f      	b.n	857b0 <_malloc_r+0x44>
   85c70:	2201      	movs	r2, #1
   85c72:	f04f 0900 	mov.w	r9, #0
   85c76:	e6c1      	b.n	859fc <_malloc_r+0x290>
   85c78:	f104 0108 	add.w	r1, r4, #8
   85c7c:	4630      	mov	r0, r6
   85c7e:	f7ff fa5b 	bl	85138 <_free_r>
   85c82:	f8d9 1000 	ldr.w	r1, [r9]
   85c86:	e6db      	b.n	85a40 <_malloc_r+0x2d4>
   85c88:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85c8c:	d805      	bhi.n	85c9a <_malloc_r+0x52e>
   85c8e:	0bda      	lsrs	r2, r3, #15
   85c90:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85c94:	0049      	lsls	r1, r1, #1
   85c96:	3277      	adds	r2, #119	; 0x77
   85c98:	e71e      	b.n	85ad8 <_malloc_r+0x36c>
   85c9a:	f240 5154 	movw	r1, #1364	; 0x554
   85c9e:	428a      	cmp	r2, r1
   85ca0:	d805      	bhi.n	85cae <_malloc_r+0x542>
   85ca2:	0c9a      	lsrs	r2, r3, #18
   85ca4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85ca8:	0049      	lsls	r1, r1, #1
   85caa:	327c      	adds	r2, #124	; 0x7c
   85cac:	e714      	b.n	85ad8 <_malloc_r+0x36c>
   85cae:	21fe      	movs	r1, #254	; 0xfe
   85cb0:	227e      	movs	r2, #126	; 0x7e
   85cb2:	e711      	b.n	85ad8 <_malloc_r+0x36c>
   85cb4:	687b      	ldr	r3, [r7, #4]
   85cb6:	e784      	b.n	85bc2 <_malloc_r+0x456>
   85cb8:	08e8      	lsrs	r0, r5, #3
   85cba:	1c43      	adds	r3, r0, #1
   85cbc:	005b      	lsls	r3, r3, #1
   85cbe:	e605      	b.n	858cc <_malloc_r+0x160>
   85cc0:	20070858 	.word	0x20070858

00085cc4 <memchr>:
   85cc4:	0783      	lsls	r3, r0, #30
   85cc6:	b470      	push	{r4, r5, r6}
   85cc8:	b2cd      	uxtb	r5, r1
   85cca:	d03d      	beq.n	85d48 <memchr+0x84>
   85ccc:	1e53      	subs	r3, r2, #1
   85cce:	b302      	cbz	r2, 85d12 <memchr+0x4e>
   85cd0:	7802      	ldrb	r2, [r0, #0]
   85cd2:	42aa      	cmp	r2, r5
   85cd4:	d01e      	beq.n	85d14 <memchr+0x50>
   85cd6:	1c42      	adds	r2, r0, #1
   85cd8:	e004      	b.n	85ce4 <memchr+0x20>
   85cda:	b1d3      	cbz	r3, 85d12 <memchr+0x4e>
   85cdc:	7804      	ldrb	r4, [r0, #0]
   85cde:	3b01      	subs	r3, #1
   85ce0:	42ac      	cmp	r4, r5
   85ce2:	d017      	beq.n	85d14 <memchr+0x50>
   85ce4:	f012 0f03 	tst.w	r2, #3
   85ce8:	4610      	mov	r0, r2
   85cea:	f102 0201 	add.w	r2, r2, #1
   85cee:	d1f4      	bne.n	85cda <memchr+0x16>
   85cf0:	2b03      	cmp	r3, #3
   85cf2:	d811      	bhi.n	85d18 <memchr+0x54>
   85cf4:	b353      	cbz	r3, 85d4c <memchr+0x88>
   85cf6:	7802      	ldrb	r2, [r0, #0]
   85cf8:	42aa      	cmp	r2, r5
   85cfa:	d00b      	beq.n	85d14 <memchr+0x50>
   85cfc:	4403      	add	r3, r0
   85cfe:	1c42      	adds	r2, r0, #1
   85d00:	e002      	b.n	85d08 <memchr+0x44>
   85d02:	7801      	ldrb	r1, [r0, #0]
   85d04:	42a9      	cmp	r1, r5
   85d06:	d005      	beq.n	85d14 <memchr+0x50>
   85d08:	4293      	cmp	r3, r2
   85d0a:	4610      	mov	r0, r2
   85d0c:	f102 0201 	add.w	r2, r2, #1
   85d10:	d1f7      	bne.n	85d02 <memchr+0x3e>
   85d12:	2000      	movs	r0, #0
   85d14:	bc70      	pop	{r4, r5, r6}
   85d16:	4770      	bx	lr
   85d18:	4604      	mov	r4, r0
   85d1a:	020e      	lsls	r6, r1, #8
   85d1c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85d20:	432e      	orrs	r6, r5
   85d22:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85d26:	6822      	ldr	r2, [r4, #0]
   85d28:	4620      	mov	r0, r4
   85d2a:	4072      	eors	r2, r6
   85d2c:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85d30:	ea21 0202 	bic.w	r2, r1, r2
   85d34:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85d38:	f104 0404 	add.w	r4, r4, #4
   85d3c:	d1db      	bne.n	85cf6 <memchr+0x32>
   85d3e:	3b04      	subs	r3, #4
   85d40:	2b03      	cmp	r3, #3
   85d42:	4620      	mov	r0, r4
   85d44:	d8ef      	bhi.n	85d26 <memchr+0x62>
   85d46:	e7d5      	b.n	85cf4 <memchr+0x30>
   85d48:	4613      	mov	r3, r2
   85d4a:	e7d1      	b.n	85cf0 <memchr+0x2c>
   85d4c:	4618      	mov	r0, r3
   85d4e:	e7e1      	b.n	85d14 <memchr+0x50>

00085d50 <memcpy>:
   85d50:	4684      	mov	ip, r0
   85d52:	ea41 0300 	orr.w	r3, r1, r0
   85d56:	f013 0303 	ands.w	r3, r3, #3
   85d5a:	d149      	bne.n	85df0 <memcpy+0xa0>
   85d5c:	3a40      	subs	r2, #64	; 0x40
   85d5e:	d323      	bcc.n	85da8 <memcpy+0x58>
   85d60:	680b      	ldr	r3, [r1, #0]
   85d62:	6003      	str	r3, [r0, #0]
   85d64:	684b      	ldr	r3, [r1, #4]
   85d66:	6043      	str	r3, [r0, #4]
   85d68:	688b      	ldr	r3, [r1, #8]
   85d6a:	6083      	str	r3, [r0, #8]
   85d6c:	68cb      	ldr	r3, [r1, #12]
   85d6e:	60c3      	str	r3, [r0, #12]
   85d70:	690b      	ldr	r3, [r1, #16]
   85d72:	6103      	str	r3, [r0, #16]
   85d74:	694b      	ldr	r3, [r1, #20]
   85d76:	6143      	str	r3, [r0, #20]
   85d78:	698b      	ldr	r3, [r1, #24]
   85d7a:	6183      	str	r3, [r0, #24]
   85d7c:	69cb      	ldr	r3, [r1, #28]
   85d7e:	61c3      	str	r3, [r0, #28]
   85d80:	6a0b      	ldr	r3, [r1, #32]
   85d82:	6203      	str	r3, [r0, #32]
   85d84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85d86:	6243      	str	r3, [r0, #36]	; 0x24
   85d88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85d8a:	6283      	str	r3, [r0, #40]	; 0x28
   85d8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
   85d90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85d92:	6303      	str	r3, [r0, #48]	; 0x30
   85d94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85d96:	6343      	str	r3, [r0, #52]	; 0x34
   85d98:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85d9a:	6383      	str	r3, [r0, #56]	; 0x38
   85d9c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85d9e:	63c3      	str	r3, [r0, #60]	; 0x3c
   85da0:	3040      	adds	r0, #64	; 0x40
   85da2:	3140      	adds	r1, #64	; 0x40
   85da4:	3a40      	subs	r2, #64	; 0x40
   85da6:	d2db      	bcs.n	85d60 <memcpy+0x10>
   85da8:	3230      	adds	r2, #48	; 0x30
   85daa:	d30b      	bcc.n	85dc4 <memcpy+0x74>
   85dac:	680b      	ldr	r3, [r1, #0]
   85dae:	6003      	str	r3, [r0, #0]
   85db0:	684b      	ldr	r3, [r1, #4]
   85db2:	6043      	str	r3, [r0, #4]
   85db4:	688b      	ldr	r3, [r1, #8]
   85db6:	6083      	str	r3, [r0, #8]
   85db8:	68cb      	ldr	r3, [r1, #12]
   85dba:	60c3      	str	r3, [r0, #12]
   85dbc:	3010      	adds	r0, #16
   85dbe:	3110      	adds	r1, #16
   85dc0:	3a10      	subs	r2, #16
   85dc2:	d2f3      	bcs.n	85dac <memcpy+0x5c>
   85dc4:	320c      	adds	r2, #12
   85dc6:	d305      	bcc.n	85dd4 <memcpy+0x84>
   85dc8:	f851 3b04 	ldr.w	r3, [r1], #4
   85dcc:	f840 3b04 	str.w	r3, [r0], #4
   85dd0:	3a04      	subs	r2, #4
   85dd2:	d2f9      	bcs.n	85dc8 <memcpy+0x78>
   85dd4:	3204      	adds	r2, #4
   85dd6:	d008      	beq.n	85dea <memcpy+0x9a>
   85dd8:	07d2      	lsls	r2, r2, #31
   85dda:	bf1c      	itt	ne
   85ddc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85de0:	f800 3b01 	strbne.w	r3, [r0], #1
   85de4:	d301      	bcc.n	85dea <memcpy+0x9a>
   85de6:	880b      	ldrh	r3, [r1, #0]
   85de8:	8003      	strh	r3, [r0, #0]
   85dea:	4660      	mov	r0, ip
   85dec:	4770      	bx	lr
   85dee:	bf00      	nop
   85df0:	2a08      	cmp	r2, #8
   85df2:	d313      	bcc.n	85e1c <memcpy+0xcc>
   85df4:	078b      	lsls	r3, r1, #30
   85df6:	d0b1      	beq.n	85d5c <memcpy+0xc>
   85df8:	f010 0303 	ands.w	r3, r0, #3
   85dfc:	d0ae      	beq.n	85d5c <memcpy+0xc>
   85dfe:	f1c3 0304 	rsb	r3, r3, #4
   85e02:	1ad2      	subs	r2, r2, r3
   85e04:	07db      	lsls	r3, r3, #31
   85e06:	bf1c      	itt	ne
   85e08:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e0c:	f800 3b01 	strbne.w	r3, [r0], #1
   85e10:	d3a4      	bcc.n	85d5c <memcpy+0xc>
   85e12:	f831 3b02 	ldrh.w	r3, [r1], #2
   85e16:	f820 3b02 	strh.w	r3, [r0], #2
   85e1a:	e79f      	b.n	85d5c <memcpy+0xc>
   85e1c:	3a04      	subs	r2, #4
   85e1e:	d3d9      	bcc.n	85dd4 <memcpy+0x84>
   85e20:	3a01      	subs	r2, #1
   85e22:	f811 3b01 	ldrb.w	r3, [r1], #1
   85e26:	f800 3b01 	strb.w	r3, [r0], #1
   85e2a:	d2f9      	bcs.n	85e20 <memcpy+0xd0>
   85e2c:	780b      	ldrb	r3, [r1, #0]
   85e2e:	7003      	strb	r3, [r0, #0]
   85e30:	784b      	ldrb	r3, [r1, #1]
   85e32:	7043      	strb	r3, [r0, #1]
   85e34:	788b      	ldrb	r3, [r1, #2]
   85e36:	7083      	strb	r3, [r0, #2]
   85e38:	4660      	mov	r0, ip
   85e3a:	4770      	bx	lr

00085e3c <memmove>:
   85e3c:	4288      	cmp	r0, r1
   85e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85e40:	d90d      	bls.n	85e5e <memmove+0x22>
   85e42:	188b      	adds	r3, r1, r2
   85e44:	4298      	cmp	r0, r3
   85e46:	d20a      	bcs.n	85e5e <memmove+0x22>
   85e48:	1881      	adds	r1, r0, r2
   85e4a:	2a00      	cmp	r2, #0
   85e4c:	d051      	beq.n	85ef2 <memmove+0xb6>
   85e4e:	1a9a      	subs	r2, r3, r2
   85e50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85e54:	4293      	cmp	r3, r2
   85e56:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85e5a:	d1f9      	bne.n	85e50 <memmove+0x14>
   85e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85e5e:	2a0f      	cmp	r2, #15
   85e60:	d948      	bls.n	85ef4 <memmove+0xb8>
   85e62:	ea41 0300 	orr.w	r3, r1, r0
   85e66:	079b      	lsls	r3, r3, #30
   85e68:	d146      	bne.n	85ef8 <memmove+0xbc>
   85e6a:	4615      	mov	r5, r2
   85e6c:	f100 0410 	add.w	r4, r0, #16
   85e70:	f101 0310 	add.w	r3, r1, #16
   85e74:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85e78:	3d10      	subs	r5, #16
   85e7a:	f844 6c10 	str.w	r6, [r4, #-16]
   85e7e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85e82:	2d0f      	cmp	r5, #15
   85e84:	f844 6c0c 	str.w	r6, [r4, #-12]
   85e88:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85e8c:	f104 0410 	add.w	r4, r4, #16
   85e90:	f844 6c18 	str.w	r6, [r4, #-24]
   85e94:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85e98:	f103 0310 	add.w	r3, r3, #16
   85e9c:	f844 6c14 	str.w	r6, [r4, #-20]
   85ea0:	d8e8      	bhi.n	85e74 <memmove+0x38>
   85ea2:	f1a2 0310 	sub.w	r3, r2, #16
   85ea6:	f023 030f 	bic.w	r3, r3, #15
   85eaa:	f002 0e0f 	and.w	lr, r2, #15
   85eae:	3310      	adds	r3, #16
   85eb0:	f1be 0f03 	cmp.w	lr, #3
   85eb4:	4419      	add	r1, r3
   85eb6:	4403      	add	r3, r0
   85eb8:	d921      	bls.n	85efe <memmove+0xc2>
   85eba:	460e      	mov	r6, r1
   85ebc:	4674      	mov	r4, lr
   85ebe:	1f1d      	subs	r5, r3, #4
   85ec0:	f856 7b04 	ldr.w	r7, [r6], #4
   85ec4:	3c04      	subs	r4, #4
   85ec6:	2c03      	cmp	r4, #3
   85ec8:	f845 7f04 	str.w	r7, [r5, #4]!
   85ecc:	d8f8      	bhi.n	85ec0 <memmove+0x84>
   85ece:	f1ae 0404 	sub.w	r4, lr, #4
   85ed2:	f024 0403 	bic.w	r4, r4, #3
   85ed6:	3404      	adds	r4, #4
   85ed8:	4423      	add	r3, r4
   85eda:	4421      	add	r1, r4
   85edc:	f002 0203 	and.w	r2, r2, #3
   85ee0:	b162      	cbz	r2, 85efc <memmove+0xc0>
   85ee2:	3b01      	subs	r3, #1
   85ee4:	440a      	add	r2, r1
   85ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
   85eea:	428a      	cmp	r2, r1
   85eec:	f803 4f01 	strb.w	r4, [r3, #1]!
   85ef0:	d1f9      	bne.n	85ee6 <memmove+0xaa>
   85ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85ef4:	4603      	mov	r3, r0
   85ef6:	e7f3      	b.n	85ee0 <memmove+0xa4>
   85ef8:	4603      	mov	r3, r0
   85efa:	e7f2      	b.n	85ee2 <memmove+0xa6>
   85efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85efe:	4672      	mov	r2, lr
   85f00:	e7ee      	b.n	85ee0 <memmove+0xa4>
   85f02:	bf00      	nop

00085f04 <__malloc_lock>:
   85f04:	4770      	bx	lr
   85f06:	bf00      	nop

00085f08 <__malloc_unlock>:
   85f08:	4770      	bx	lr
   85f0a:	bf00      	nop

00085f0c <_realloc_r>:
   85f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85f10:	4617      	mov	r7, r2
   85f12:	b083      	sub	sp, #12
   85f14:	2900      	cmp	r1, #0
   85f16:	f000 808f 	beq.w	86038 <_realloc_r+0x12c>
   85f1a:	460d      	mov	r5, r1
   85f1c:	4681      	mov	r9, r0
   85f1e:	f107 040b 	add.w	r4, r7, #11
   85f22:	f7ff ffef 	bl	85f04 <__malloc_lock>
   85f26:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85f2a:	2c16      	cmp	r4, #22
   85f2c:	f02e 0603 	bic.w	r6, lr, #3
   85f30:	f1a5 0808 	sub.w	r8, r5, #8
   85f34:	d83c      	bhi.n	85fb0 <_realloc_r+0xa4>
   85f36:	2210      	movs	r2, #16
   85f38:	4614      	mov	r4, r2
   85f3a:	42a7      	cmp	r7, r4
   85f3c:	d83d      	bhi.n	85fba <_realloc_r+0xae>
   85f3e:	4296      	cmp	r6, r2
   85f40:	da42      	bge.n	85fc8 <_realloc_r+0xbc>
   85f42:	4bc6      	ldr	r3, [pc, #792]	; (8625c <_realloc_r+0x350>)
   85f44:	eb08 0006 	add.w	r0, r8, r6
   85f48:	6899      	ldr	r1, [r3, #8]
   85f4a:	4288      	cmp	r0, r1
   85f4c:	6841      	ldr	r1, [r0, #4]
   85f4e:	f000 80d7 	beq.w	86100 <_realloc_r+0x1f4>
   85f52:	f021 0301 	bic.w	r3, r1, #1
   85f56:	4403      	add	r3, r0
   85f58:	685b      	ldr	r3, [r3, #4]
   85f5a:	07db      	lsls	r3, r3, #31
   85f5c:	d54c      	bpl.n	85ff8 <_realloc_r+0xec>
   85f5e:	f01e 0f01 	tst.w	lr, #1
   85f62:	f000 809d 	beq.w	860a0 <_realloc_r+0x194>
   85f66:	4639      	mov	r1, r7
   85f68:	4648      	mov	r0, r9
   85f6a:	f7ff fbff 	bl	8576c <_malloc_r>
   85f6e:	4607      	mov	r7, r0
   85f70:	2800      	cmp	r0, #0
   85f72:	d03a      	beq.n	85fea <_realloc_r+0xde>
   85f74:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85f78:	f1a0 0208 	sub.w	r2, r0, #8
   85f7c:	f023 0301 	bic.w	r3, r3, #1
   85f80:	4443      	add	r3, r8
   85f82:	429a      	cmp	r2, r3
   85f84:	f000 813e 	beq.w	86204 <_realloc_r+0x2f8>
   85f88:	1f32      	subs	r2, r6, #4
   85f8a:	2a24      	cmp	r2, #36	; 0x24
   85f8c:	f200 812b 	bhi.w	861e6 <_realloc_r+0x2da>
   85f90:	2a13      	cmp	r2, #19
   85f92:	f200 80ff 	bhi.w	86194 <_realloc_r+0x288>
   85f96:	4603      	mov	r3, r0
   85f98:	462a      	mov	r2, r5
   85f9a:	6811      	ldr	r1, [r2, #0]
   85f9c:	6019      	str	r1, [r3, #0]
   85f9e:	6851      	ldr	r1, [r2, #4]
   85fa0:	6059      	str	r1, [r3, #4]
   85fa2:	6892      	ldr	r2, [r2, #8]
   85fa4:	609a      	str	r2, [r3, #8]
   85fa6:	4629      	mov	r1, r5
   85fa8:	4648      	mov	r0, r9
   85faa:	f7ff f8c5 	bl	85138 <_free_r>
   85fae:	e01c      	b.n	85fea <_realloc_r+0xde>
   85fb0:	f024 0407 	bic.w	r4, r4, #7
   85fb4:	2c00      	cmp	r4, #0
   85fb6:	4622      	mov	r2, r4
   85fb8:	dabf      	bge.n	85f3a <_realloc_r+0x2e>
   85fba:	230c      	movs	r3, #12
   85fbc:	2000      	movs	r0, #0
   85fbe:	f8c9 3000 	str.w	r3, [r9]
   85fc2:	b003      	add	sp, #12
   85fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85fc8:	462f      	mov	r7, r5
   85fca:	1b33      	subs	r3, r6, r4
   85fcc:	2b0f      	cmp	r3, #15
   85fce:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85fd2:	d81d      	bhi.n	86010 <_realloc_r+0x104>
   85fd4:	f002 0201 	and.w	r2, r2, #1
   85fd8:	4332      	orrs	r2, r6
   85fda:	eb08 0106 	add.w	r1, r8, r6
   85fde:	f8c8 2004 	str.w	r2, [r8, #4]
   85fe2:	684b      	ldr	r3, [r1, #4]
   85fe4:	f043 0301 	orr.w	r3, r3, #1
   85fe8:	604b      	str	r3, [r1, #4]
   85fea:	4648      	mov	r0, r9
   85fec:	f7ff ff8c 	bl	85f08 <__malloc_unlock>
   85ff0:	4638      	mov	r0, r7
   85ff2:	b003      	add	sp, #12
   85ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ff8:	f021 0103 	bic.w	r1, r1, #3
   85ffc:	4431      	add	r1, r6
   85ffe:	4291      	cmp	r1, r2
   86000:	db20      	blt.n	86044 <_realloc_r+0x138>
   86002:	68c3      	ldr	r3, [r0, #12]
   86004:	6882      	ldr	r2, [r0, #8]
   86006:	462f      	mov	r7, r5
   86008:	60d3      	str	r3, [r2, #12]
   8600a:	460e      	mov	r6, r1
   8600c:	609a      	str	r2, [r3, #8]
   8600e:	e7dc      	b.n	85fca <_realloc_r+0xbe>
   86010:	f002 0201 	and.w	r2, r2, #1
   86014:	eb08 0104 	add.w	r1, r8, r4
   86018:	4314      	orrs	r4, r2
   8601a:	f043 0201 	orr.w	r2, r3, #1
   8601e:	f8c8 4004 	str.w	r4, [r8, #4]
   86022:	440b      	add	r3, r1
   86024:	604a      	str	r2, [r1, #4]
   86026:	685a      	ldr	r2, [r3, #4]
   86028:	3108      	adds	r1, #8
   8602a:	f042 0201 	orr.w	r2, r2, #1
   8602e:	605a      	str	r2, [r3, #4]
   86030:	4648      	mov	r0, r9
   86032:	f7ff f881 	bl	85138 <_free_r>
   86036:	e7d8      	b.n	85fea <_realloc_r+0xde>
   86038:	4611      	mov	r1, r2
   8603a:	b003      	add	sp, #12
   8603c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86040:	f7ff bb94 	b.w	8576c <_malloc_r>
   86044:	f01e 0f01 	tst.w	lr, #1
   86048:	d18d      	bne.n	85f66 <_realloc_r+0x5a>
   8604a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8604e:	ebc3 0a08 	rsb	sl, r3, r8
   86052:	f8da 3004 	ldr.w	r3, [sl, #4]
   86056:	f023 0c03 	bic.w	ip, r3, #3
   8605a:	eb01 0e0c 	add.w	lr, r1, ip
   8605e:	4596      	cmp	lr, r2
   86060:	db26      	blt.n	860b0 <_realloc_r+0x1a4>
   86062:	4657      	mov	r7, sl
   86064:	68c3      	ldr	r3, [r0, #12]
   86066:	6881      	ldr	r1, [r0, #8]
   86068:	1f32      	subs	r2, r6, #4
   8606a:	60cb      	str	r3, [r1, #12]
   8606c:	6099      	str	r1, [r3, #8]
   8606e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86072:	f8da 300c 	ldr.w	r3, [sl, #12]
   86076:	2a24      	cmp	r2, #36	; 0x24
   86078:	60cb      	str	r3, [r1, #12]
   8607a:	6099      	str	r1, [r3, #8]
   8607c:	f200 80c9 	bhi.w	86212 <_realloc_r+0x306>
   86080:	2a13      	cmp	r2, #19
   86082:	f240 8092 	bls.w	861aa <_realloc_r+0x29e>
   86086:	682b      	ldr	r3, [r5, #0]
   86088:	2a1b      	cmp	r2, #27
   8608a:	f8ca 3008 	str.w	r3, [sl, #8]
   8608e:	686b      	ldr	r3, [r5, #4]
   86090:	f8ca 300c 	str.w	r3, [sl, #12]
   86094:	f200 80cd 	bhi.w	86232 <_realloc_r+0x326>
   86098:	3508      	adds	r5, #8
   8609a:	f10a 0310 	add.w	r3, sl, #16
   8609e:	e085      	b.n	861ac <_realloc_r+0x2a0>
   860a0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   860a4:	ebc3 0a08 	rsb	sl, r3, r8
   860a8:	f8da 3004 	ldr.w	r3, [sl, #4]
   860ac:	f023 0c03 	bic.w	ip, r3, #3
   860b0:	eb06 030c 	add.w	r3, r6, ip
   860b4:	4293      	cmp	r3, r2
   860b6:	f6ff af56 	blt.w	85f66 <_realloc_r+0x5a>
   860ba:	4657      	mov	r7, sl
   860bc:	f8da 100c 	ldr.w	r1, [sl, #12]
   860c0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   860c4:	1f32      	subs	r2, r6, #4
   860c6:	2a24      	cmp	r2, #36	; 0x24
   860c8:	60c1      	str	r1, [r0, #12]
   860ca:	6088      	str	r0, [r1, #8]
   860cc:	f200 80aa 	bhi.w	86224 <_realloc_r+0x318>
   860d0:	2a13      	cmp	r2, #19
   860d2:	f240 80a5 	bls.w	86220 <_realloc_r+0x314>
   860d6:	6829      	ldr	r1, [r5, #0]
   860d8:	2a1b      	cmp	r2, #27
   860da:	f8ca 1008 	str.w	r1, [sl, #8]
   860de:	6869      	ldr	r1, [r5, #4]
   860e0:	f8ca 100c 	str.w	r1, [sl, #12]
   860e4:	f200 80bc 	bhi.w	86260 <_realloc_r+0x354>
   860e8:	3508      	adds	r5, #8
   860ea:	f10a 0210 	add.w	r2, sl, #16
   860ee:	6829      	ldr	r1, [r5, #0]
   860f0:	461e      	mov	r6, r3
   860f2:	6011      	str	r1, [r2, #0]
   860f4:	6869      	ldr	r1, [r5, #4]
   860f6:	46d0      	mov	r8, sl
   860f8:	6051      	str	r1, [r2, #4]
   860fa:	68ab      	ldr	r3, [r5, #8]
   860fc:	6093      	str	r3, [r2, #8]
   860fe:	e764      	b.n	85fca <_realloc_r+0xbe>
   86100:	f021 0b03 	bic.w	fp, r1, #3
   86104:	f104 0010 	add.w	r0, r4, #16
   86108:	44b3      	add	fp, r6
   8610a:	4583      	cmp	fp, r0
   8610c:	da57      	bge.n	861be <_realloc_r+0x2b2>
   8610e:	f01e 0f01 	tst.w	lr, #1
   86112:	f47f af28 	bne.w	85f66 <_realloc_r+0x5a>
   86116:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8611a:	ebc1 0a08 	rsb	sl, r1, r8
   8611e:	f8da 1004 	ldr.w	r1, [sl, #4]
   86122:	f021 0c03 	bic.w	ip, r1, #3
   86126:	44e3      	add	fp, ip
   86128:	4558      	cmp	r0, fp
   8612a:	dcc1      	bgt.n	860b0 <_realloc_r+0x1a4>
   8612c:	4657      	mov	r7, sl
   8612e:	f8da 100c 	ldr.w	r1, [sl, #12]
   86132:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86136:	1f32      	subs	r2, r6, #4
   86138:	2a24      	cmp	r2, #36	; 0x24
   8613a:	60c1      	str	r1, [r0, #12]
   8613c:	6088      	str	r0, [r1, #8]
   8613e:	f200 80b1 	bhi.w	862a4 <_realloc_r+0x398>
   86142:	2a13      	cmp	r2, #19
   86144:	f240 80a2 	bls.w	8628c <_realloc_r+0x380>
   86148:	6829      	ldr	r1, [r5, #0]
   8614a:	2a1b      	cmp	r2, #27
   8614c:	f8ca 1008 	str.w	r1, [sl, #8]
   86150:	6869      	ldr	r1, [r5, #4]
   86152:	f8ca 100c 	str.w	r1, [sl, #12]
   86156:	f200 80ac 	bhi.w	862b2 <_realloc_r+0x3a6>
   8615a:	3508      	adds	r5, #8
   8615c:	f10a 0210 	add.w	r2, sl, #16
   86160:	6829      	ldr	r1, [r5, #0]
   86162:	6011      	str	r1, [r2, #0]
   86164:	6869      	ldr	r1, [r5, #4]
   86166:	6051      	str	r1, [r2, #4]
   86168:	68a9      	ldr	r1, [r5, #8]
   8616a:	6091      	str	r1, [r2, #8]
   8616c:	ebc4 020b 	rsb	r2, r4, fp
   86170:	eb0a 0104 	add.w	r1, sl, r4
   86174:	f042 0201 	orr.w	r2, r2, #1
   86178:	6099      	str	r1, [r3, #8]
   8617a:	604a      	str	r2, [r1, #4]
   8617c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86180:	4648      	mov	r0, r9
   86182:	f003 0301 	and.w	r3, r3, #1
   86186:	431c      	orrs	r4, r3
   86188:	f8ca 4004 	str.w	r4, [sl, #4]
   8618c:	f7ff febc 	bl	85f08 <__malloc_unlock>
   86190:	4638      	mov	r0, r7
   86192:	e72e      	b.n	85ff2 <_realloc_r+0xe6>
   86194:	682b      	ldr	r3, [r5, #0]
   86196:	2a1b      	cmp	r2, #27
   86198:	6003      	str	r3, [r0, #0]
   8619a:	686b      	ldr	r3, [r5, #4]
   8619c:	6043      	str	r3, [r0, #4]
   8619e:	d826      	bhi.n	861ee <_realloc_r+0x2e2>
   861a0:	f100 0308 	add.w	r3, r0, #8
   861a4:	f105 0208 	add.w	r2, r5, #8
   861a8:	e6f7      	b.n	85f9a <_realloc_r+0x8e>
   861aa:	463b      	mov	r3, r7
   861ac:	682a      	ldr	r2, [r5, #0]
   861ae:	4676      	mov	r6, lr
   861b0:	601a      	str	r2, [r3, #0]
   861b2:	686a      	ldr	r2, [r5, #4]
   861b4:	46d0      	mov	r8, sl
   861b6:	605a      	str	r2, [r3, #4]
   861b8:	68aa      	ldr	r2, [r5, #8]
   861ba:	609a      	str	r2, [r3, #8]
   861bc:	e705      	b.n	85fca <_realloc_r+0xbe>
   861be:	ebc4 0b0b 	rsb	fp, r4, fp
   861c2:	eb08 0104 	add.w	r1, r8, r4
   861c6:	f04b 0201 	orr.w	r2, fp, #1
   861ca:	6099      	str	r1, [r3, #8]
   861cc:	604a      	str	r2, [r1, #4]
   861ce:	f855 3c04 	ldr.w	r3, [r5, #-4]
   861d2:	4648      	mov	r0, r9
   861d4:	f003 0301 	and.w	r3, r3, #1
   861d8:	431c      	orrs	r4, r3
   861da:	f845 4c04 	str.w	r4, [r5, #-4]
   861de:	f7ff fe93 	bl	85f08 <__malloc_unlock>
   861e2:	4628      	mov	r0, r5
   861e4:	e705      	b.n	85ff2 <_realloc_r+0xe6>
   861e6:	4629      	mov	r1, r5
   861e8:	f7ff fe28 	bl	85e3c <memmove>
   861ec:	e6db      	b.n	85fa6 <_realloc_r+0x9a>
   861ee:	68ab      	ldr	r3, [r5, #8]
   861f0:	2a24      	cmp	r2, #36	; 0x24
   861f2:	6083      	str	r3, [r0, #8]
   861f4:	68eb      	ldr	r3, [r5, #12]
   861f6:	60c3      	str	r3, [r0, #12]
   861f8:	d027      	beq.n	8624a <_realloc_r+0x33e>
   861fa:	f100 0310 	add.w	r3, r0, #16
   861fe:	f105 0210 	add.w	r2, r5, #16
   86202:	e6ca      	b.n	85f9a <_realloc_r+0x8e>
   86204:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86208:	462f      	mov	r7, r5
   8620a:	f023 0303 	bic.w	r3, r3, #3
   8620e:	441e      	add	r6, r3
   86210:	e6db      	b.n	85fca <_realloc_r+0xbe>
   86212:	4629      	mov	r1, r5
   86214:	4638      	mov	r0, r7
   86216:	4676      	mov	r6, lr
   86218:	46d0      	mov	r8, sl
   8621a:	f7ff fe0f 	bl	85e3c <memmove>
   8621e:	e6d4      	b.n	85fca <_realloc_r+0xbe>
   86220:	463a      	mov	r2, r7
   86222:	e764      	b.n	860ee <_realloc_r+0x1e2>
   86224:	4629      	mov	r1, r5
   86226:	4638      	mov	r0, r7
   86228:	461e      	mov	r6, r3
   8622a:	46d0      	mov	r8, sl
   8622c:	f7ff fe06 	bl	85e3c <memmove>
   86230:	e6cb      	b.n	85fca <_realloc_r+0xbe>
   86232:	68ab      	ldr	r3, [r5, #8]
   86234:	2a24      	cmp	r2, #36	; 0x24
   86236:	f8ca 3010 	str.w	r3, [sl, #16]
   8623a:	68eb      	ldr	r3, [r5, #12]
   8623c:	f8ca 3014 	str.w	r3, [sl, #20]
   86240:	d01a      	beq.n	86278 <_realloc_r+0x36c>
   86242:	3510      	adds	r5, #16
   86244:	f10a 0318 	add.w	r3, sl, #24
   86248:	e7b0      	b.n	861ac <_realloc_r+0x2a0>
   8624a:	692a      	ldr	r2, [r5, #16]
   8624c:	f100 0318 	add.w	r3, r0, #24
   86250:	6102      	str	r2, [r0, #16]
   86252:	6969      	ldr	r1, [r5, #20]
   86254:	f105 0218 	add.w	r2, r5, #24
   86258:	6141      	str	r1, [r0, #20]
   8625a:	e69e      	b.n	85f9a <_realloc_r+0x8e>
   8625c:	20070858 	.word	0x20070858
   86260:	68a9      	ldr	r1, [r5, #8]
   86262:	2a24      	cmp	r2, #36	; 0x24
   86264:	f8ca 1010 	str.w	r1, [sl, #16]
   86268:	68e9      	ldr	r1, [r5, #12]
   8626a:	f8ca 1014 	str.w	r1, [sl, #20]
   8626e:	d00f      	beq.n	86290 <_realloc_r+0x384>
   86270:	3510      	adds	r5, #16
   86272:	f10a 0218 	add.w	r2, sl, #24
   86276:	e73a      	b.n	860ee <_realloc_r+0x1e2>
   86278:	692a      	ldr	r2, [r5, #16]
   8627a:	f10a 0320 	add.w	r3, sl, #32
   8627e:	f8ca 2018 	str.w	r2, [sl, #24]
   86282:	696a      	ldr	r2, [r5, #20]
   86284:	3518      	adds	r5, #24
   86286:	f8ca 201c 	str.w	r2, [sl, #28]
   8628a:	e78f      	b.n	861ac <_realloc_r+0x2a0>
   8628c:	463a      	mov	r2, r7
   8628e:	e767      	b.n	86160 <_realloc_r+0x254>
   86290:	6929      	ldr	r1, [r5, #16]
   86292:	f10a 0220 	add.w	r2, sl, #32
   86296:	f8ca 1018 	str.w	r1, [sl, #24]
   8629a:	6969      	ldr	r1, [r5, #20]
   8629c:	3518      	adds	r5, #24
   8629e:	f8ca 101c 	str.w	r1, [sl, #28]
   862a2:	e724      	b.n	860ee <_realloc_r+0x1e2>
   862a4:	4629      	mov	r1, r5
   862a6:	4638      	mov	r0, r7
   862a8:	9301      	str	r3, [sp, #4]
   862aa:	f7ff fdc7 	bl	85e3c <memmove>
   862ae:	9b01      	ldr	r3, [sp, #4]
   862b0:	e75c      	b.n	8616c <_realloc_r+0x260>
   862b2:	68a9      	ldr	r1, [r5, #8]
   862b4:	2a24      	cmp	r2, #36	; 0x24
   862b6:	f8ca 1010 	str.w	r1, [sl, #16]
   862ba:	68e9      	ldr	r1, [r5, #12]
   862bc:	f8ca 1014 	str.w	r1, [sl, #20]
   862c0:	d003      	beq.n	862ca <_realloc_r+0x3be>
   862c2:	3510      	adds	r5, #16
   862c4:	f10a 0218 	add.w	r2, sl, #24
   862c8:	e74a      	b.n	86160 <_realloc_r+0x254>
   862ca:	6929      	ldr	r1, [r5, #16]
   862cc:	f10a 0220 	add.w	r2, sl, #32
   862d0:	f8ca 1018 	str.w	r1, [sl, #24]
   862d4:	6969      	ldr	r1, [r5, #20]
   862d6:	3518      	adds	r5, #24
   862d8:	f8ca 101c 	str.w	r1, [sl, #28]
   862dc:	e740      	b.n	86160 <_realloc_r+0x254>
   862de:	bf00      	nop

000862e0 <_sbrk_r>:
   862e0:	b538      	push	{r3, r4, r5, lr}
   862e2:	4c07      	ldr	r4, [pc, #28]	; (86300 <_sbrk_r+0x20>)
   862e4:	2300      	movs	r3, #0
   862e6:	4605      	mov	r5, r0
   862e8:	4608      	mov	r0, r1
   862ea:	6023      	str	r3, [r4, #0]
   862ec:	f7fd f9ba 	bl	83664 <_sbrk>
   862f0:	1c43      	adds	r3, r0, #1
   862f2:	d000      	beq.n	862f6 <_sbrk_r+0x16>
   862f4:	bd38      	pop	{r3, r4, r5, pc}
   862f6:	6823      	ldr	r3, [r4, #0]
   862f8:	2b00      	cmp	r3, #0
   862fa:	d0fb      	beq.n	862f4 <_sbrk_r+0x14>
   862fc:	602b      	str	r3, [r5, #0]
   862fe:	bd38      	pop	{r3, r4, r5, pc}
   86300:	20071248 	.word	0x20071248

00086304 <__sread>:
   86304:	b510      	push	{r4, lr}
   86306:	460c      	mov	r4, r1
   86308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8630c:	f000 f9c4 	bl	86698 <_read_r>
   86310:	2800      	cmp	r0, #0
   86312:	db03      	blt.n	8631c <__sread+0x18>
   86314:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86316:	4403      	add	r3, r0
   86318:	6523      	str	r3, [r4, #80]	; 0x50
   8631a:	bd10      	pop	{r4, pc}
   8631c:	89a3      	ldrh	r3, [r4, #12]
   8631e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86322:	81a3      	strh	r3, [r4, #12]
   86324:	bd10      	pop	{r4, pc}
   86326:	bf00      	nop

00086328 <__swrite>:
   86328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8632c:	460c      	mov	r4, r1
   8632e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86332:	461f      	mov	r7, r3
   86334:	05cb      	lsls	r3, r1, #23
   86336:	4616      	mov	r6, r2
   86338:	4605      	mov	r5, r0
   8633a:	d507      	bpl.n	8634c <__swrite+0x24>
   8633c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86340:	2302      	movs	r3, #2
   86342:	2200      	movs	r2, #0
   86344:	f000 f992 	bl	8666c <_lseek_r>
   86348:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8634c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86350:	81a1      	strh	r1, [r4, #12]
   86352:	463b      	mov	r3, r7
   86354:	4632      	mov	r2, r6
   86356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8635a:	4628      	mov	r0, r5
   8635c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86360:	f000 b8a2 	b.w	864a8 <_write_r>

00086364 <__sseek>:
   86364:	b510      	push	{r4, lr}
   86366:	460c      	mov	r4, r1
   86368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8636c:	f000 f97e 	bl	8666c <_lseek_r>
   86370:	89a3      	ldrh	r3, [r4, #12]
   86372:	1c42      	adds	r2, r0, #1
   86374:	bf0e      	itee	eq
   86376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8637a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8637e:	6520      	strne	r0, [r4, #80]	; 0x50
   86380:	81a3      	strh	r3, [r4, #12]
   86382:	bd10      	pop	{r4, pc}

00086384 <__sclose>:
   86384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86388:	f000 b8f6 	b.w	86578 <_close_r>

0008638c <__swbuf_r>:
   8638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8638e:	460e      	mov	r6, r1
   86390:	4614      	mov	r4, r2
   86392:	4607      	mov	r7, r0
   86394:	b110      	cbz	r0, 8639c <__swbuf_r+0x10>
   86396:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86398:	2b00      	cmp	r3, #0
   8639a:	d04a      	beq.n	86432 <__swbuf_r+0xa6>
   8639c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   863a0:	69a3      	ldr	r3, [r4, #24]
   863a2:	b291      	uxth	r1, r2
   863a4:	0708      	lsls	r0, r1, #28
   863a6:	60a3      	str	r3, [r4, #8]
   863a8:	d538      	bpl.n	8641c <__swbuf_r+0x90>
   863aa:	6923      	ldr	r3, [r4, #16]
   863ac:	2b00      	cmp	r3, #0
   863ae:	d035      	beq.n	8641c <__swbuf_r+0x90>
   863b0:	0489      	lsls	r1, r1, #18
   863b2:	b2f5      	uxtb	r5, r6
   863b4:	d515      	bpl.n	863e2 <__swbuf_r+0x56>
   863b6:	6822      	ldr	r2, [r4, #0]
   863b8:	6961      	ldr	r1, [r4, #20]
   863ba:	1ad3      	subs	r3, r2, r3
   863bc:	428b      	cmp	r3, r1
   863be:	da1c      	bge.n	863fa <__swbuf_r+0x6e>
   863c0:	3301      	adds	r3, #1
   863c2:	68a1      	ldr	r1, [r4, #8]
   863c4:	1c50      	adds	r0, r2, #1
   863c6:	3901      	subs	r1, #1
   863c8:	60a1      	str	r1, [r4, #8]
   863ca:	6020      	str	r0, [r4, #0]
   863cc:	7016      	strb	r6, [r2, #0]
   863ce:	6962      	ldr	r2, [r4, #20]
   863d0:	429a      	cmp	r2, r3
   863d2:	d01a      	beq.n	8640a <__swbuf_r+0x7e>
   863d4:	89a3      	ldrh	r3, [r4, #12]
   863d6:	07db      	lsls	r3, r3, #31
   863d8:	d501      	bpl.n	863de <__swbuf_r+0x52>
   863da:	2d0a      	cmp	r5, #10
   863dc:	d015      	beq.n	8640a <__swbuf_r+0x7e>
   863de:	4628      	mov	r0, r5
   863e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   863e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   863e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   863e8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   863ec:	81a2      	strh	r2, [r4, #12]
   863ee:	6822      	ldr	r2, [r4, #0]
   863f0:	6661      	str	r1, [r4, #100]	; 0x64
   863f2:	6961      	ldr	r1, [r4, #20]
   863f4:	1ad3      	subs	r3, r2, r3
   863f6:	428b      	cmp	r3, r1
   863f8:	dbe2      	blt.n	863c0 <__swbuf_r+0x34>
   863fa:	4621      	mov	r1, r4
   863fc:	4638      	mov	r0, r7
   863fe:	f7fe fd3f 	bl	84e80 <_fflush_r>
   86402:	b940      	cbnz	r0, 86416 <__swbuf_r+0x8a>
   86404:	6822      	ldr	r2, [r4, #0]
   86406:	2301      	movs	r3, #1
   86408:	e7db      	b.n	863c2 <__swbuf_r+0x36>
   8640a:	4621      	mov	r1, r4
   8640c:	4638      	mov	r0, r7
   8640e:	f7fe fd37 	bl	84e80 <_fflush_r>
   86412:	2800      	cmp	r0, #0
   86414:	d0e3      	beq.n	863de <__swbuf_r+0x52>
   86416:	f04f 30ff 	mov.w	r0, #4294967295
   8641a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8641c:	4621      	mov	r1, r4
   8641e:	4638      	mov	r0, r7
   86420:	f7fe fc16 	bl	84c50 <__swsetup_r>
   86424:	2800      	cmp	r0, #0
   86426:	d1f6      	bne.n	86416 <__swbuf_r+0x8a>
   86428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8642c:	6923      	ldr	r3, [r4, #16]
   8642e:	b291      	uxth	r1, r2
   86430:	e7be      	b.n	863b0 <__swbuf_r+0x24>
   86432:	f7fe fdb9 	bl	84fa8 <__sinit>
   86436:	e7b1      	b.n	8639c <__swbuf_r+0x10>

00086438 <_wcrtomb_r>:
   86438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8643c:	4605      	mov	r5, r0
   8643e:	b086      	sub	sp, #24
   86440:	461e      	mov	r6, r3
   86442:	460c      	mov	r4, r1
   86444:	b1a1      	cbz	r1, 86470 <_wcrtomb_r+0x38>
   86446:	4b10      	ldr	r3, [pc, #64]	; (86488 <_wcrtomb_r+0x50>)
   86448:	4617      	mov	r7, r2
   8644a:	f8d3 8000 	ldr.w	r8, [r3]
   8644e:	f7ff f907 	bl	85660 <__locale_charset>
   86452:	9600      	str	r6, [sp, #0]
   86454:	4603      	mov	r3, r0
   86456:	463a      	mov	r2, r7
   86458:	4621      	mov	r1, r4
   8645a:	4628      	mov	r0, r5
   8645c:	47c0      	blx	r8
   8645e:	1c43      	adds	r3, r0, #1
   86460:	d103      	bne.n	8646a <_wcrtomb_r+0x32>
   86462:	2200      	movs	r2, #0
   86464:	238a      	movs	r3, #138	; 0x8a
   86466:	6032      	str	r2, [r6, #0]
   86468:	602b      	str	r3, [r5, #0]
   8646a:	b006      	add	sp, #24
   8646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86470:	4b05      	ldr	r3, [pc, #20]	; (86488 <_wcrtomb_r+0x50>)
   86472:	681f      	ldr	r7, [r3, #0]
   86474:	f7ff f8f4 	bl	85660 <__locale_charset>
   86478:	9600      	str	r6, [sp, #0]
   8647a:	4603      	mov	r3, r0
   8647c:	4622      	mov	r2, r4
   8647e:	a903      	add	r1, sp, #12
   86480:	4628      	mov	r0, r5
   86482:	47b8      	blx	r7
   86484:	e7eb      	b.n	8645e <_wcrtomb_r+0x26>
   86486:	bf00      	nop
   86488:	20070c68 	.word	0x20070c68

0008648c <__ascii_wctomb>:
   8648c:	b121      	cbz	r1, 86498 <__ascii_wctomb+0xc>
   8648e:	2aff      	cmp	r2, #255	; 0xff
   86490:	d804      	bhi.n	8649c <__ascii_wctomb+0x10>
   86492:	700a      	strb	r2, [r1, #0]
   86494:	2001      	movs	r0, #1
   86496:	4770      	bx	lr
   86498:	4608      	mov	r0, r1
   8649a:	4770      	bx	lr
   8649c:	238a      	movs	r3, #138	; 0x8a
   8649e:	6003      	str	r3, [r0, #0]
   864a0:	f04f 30ff 	mov.w	r0, #4294967295
   864a4:	4770      	bx	lr
   864a6:	bf00      	nop

000864a8 <_write_r>:
   864a8:	b570      	push	{r4, r5, r6, lr}
   864aa:	460d      	mov	r5, r1
   864ac:	4c08      	ldr	r4, [pc, #32]	; (864d0 <_write_r+0x28>)
   864ae:	4611      	mov	r1, r2
   864b0:	4606      	mov	r6, r0
   864b2:	461a      	mov	r2, r3
   864b4:	4628      	mov	r0, r5
   864b6:	2300      	movs	r3, #0
   864b8:	6023      	str	r3, [r4, #0]
   864ba:	f7fa ff5f 	bl	8137c <_write>
   864be:	1c43      	adds	r3, r0, #1
   864c0:	d000      	beq.n	864c4 <_write_r+0x1c>
   864c2:	bd70      	pop	{r4, r5, r6, pc}
   864c4:	6823      	ldr	r3, [r4, #0]
   864c6:	2b00      	cmp	r3, #0
   864c8:	d0fb      	beq.n	864c2 <_write_r+0x1a>
   864ca:	6033      	str	r3, [r6, #0]
   864cc:	bd70      	pop	{r4, r5, r6, pc}
   864ce:	bf00      	nop
   864d0:	20071248 	.word	0x20071248

000864d4 <__register_exitproc>:
   864d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   864d8:	4c25      	ldr	r4, [pc, #148]	; (86570 <__register_exitproc+0x9c>)
   864da:	4606      	mov	r6, r0
   864dc:	6825      	ldr	r5, [r4, #0]
   864de:	4688      	mov	r8, r1
   864e0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   864e4:	4692      	mov	sl, r2
   864e6:	4699      	mov	r9, r3
   864e8:	b3c4      	cbz	r4, 8655c <__register_exitproc+0x88>
   864ea:	6860      	ldr	r0, [r4, #4]
   864ec:	281f      	cmp	r0, #31
   864ee:	dc17      	bgt.n	86520 <__register_exitproc+0x4c>
   864f0:	1c41      	adds	r1, r0, #1
   864f2:	b176      	cbz	r6, 86512 <__register_exitproc+0x3e>
   864f4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   864f8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   864fc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86500:	2201      	movs	r2, #1
   86502:	4082      	lsls	r2, r0
   86504:	4315      	orrs	r5, r2
   86506:	2e02      	cmp	r6, #2
   86508:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8650c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86510:	d01e      	beq.n	86550 <__register_exitproc+0x7c>
   86512:	1c83      	adds	r3, r0, #2
   86514:	6061      	str	r1, [r4, #4]
   86516:	2000      	movs	r0, #0
   86518:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8651c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86520:	4b14      	ldr	r3, [pc, #80]	; (86574 <__register_exitproc+0xa0>)
   86522:	b303      	cbz	r3, 86566 <__register_exitproc+0x92>
   86524:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86528:	f7ff f918 	bl	8575c <malloc>
   8652c:	4604      	mov	r4, r0
   8652e:	b1d0      	cbz	r0, 86566 <__register_exitproc+0x92>
   86530:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86534:	2700      	movs	r7, #0
   86536:	e884 0088 	stmia.w	r4, {r3, r7}
   8653a:	4638      	mov	r0, r7
   8653c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86540:	2101      	movs	r1, #1
   86542:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86546:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8654a:	2e00      	cmp	r6, #0
   8654c:	d0e1      	beq.n	86512 <__register_exitproc+0x3e>
   8654e:	e7d1      	b.n	864f4 <__register_exitproc+0x20>
   86550:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86554:	431a      	orrs	r2, r3
   86556:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8655a:	e7da      	b.n	86512 <__register_exitproc+0x3e>
   8655c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86560:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86564:	e7c1      	b.n	864ea <__register_exitproc+0x16>
   86566:	f04f 30ff 	mov.w	r0, #4294967295
   8656a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8656e:	bf00      	nop
   86570:	00086a78 	.word	0x00086a78
   86574:	0008575d 	.word	0x0008575d

00086578 <_close_r>:
   86578:	b538      	push	{r3, r4, r5, lr}
   8657a:	4c07      	ldr	r4, [pc, #28]	; (86598 <_close_r+0x20>)
   8657c:	2300      	movs	r3, #0
   8657e:	4605      	mov	r5, r0
   86580:	4608      	mov	r0, r1
   86582:	6023      	str	r3, [r4, #0]
   86584:	f7fd f88c 	bl	836a0 <_close>
   86588:	1c43      	adds	r3, r0, #1
   8658a:	d000      	beq.n	8658e <_close_r+0x16>
   8658c:	bd38      	pop	{r3, r4, r5, pc}
   8658e:	6823      	ldr	r3, [r4, #0]
   86590:	2b00      	cmp	r3, #0
   86592:	d0fb      	beq.n	8658c <_close_r+0x14>
   86594:	602b      	str	r3, [r5, #0]
   86596:	bd38      	pop	{r3, r4, r5, pc}
   86598:	20071248 	.word	0x20071248

0008659c <_fclose_r>:
   8659c:	2900      	cmp	r1, #0
   8659e:	d03d      	beq.n	8661c <_fclose_r+0x80>
   865a0:	b570      	push	{r4, r5, r6, lr}
   865a2:	4605      	mov	r5, r0
   865a4:	460c      	mov	r4, r1
   865a6:	b108      	cbz	r0, 865ac <_fclose_r+0x10>
   865a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   865aa:	b37b      	cbz	r3, 8660c <_fclose_r+0x70>
   865ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   865b0:	b90b      	cbnz	r3, 865b6 <_fclose_r+0x1a>
   865b2:	2000      	movs	r0, #0
   865b4:	bd70      	pop	{r4, r5, r6, pc}
   865b6:	4621      	mov	r1, r4
   865b8:	4628      	mov	r0, r5
   865ba:	f7fe fbbd 	bl	84d38 <__sflush_r>
   865be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   865c0:	4606      	mov	r6, r0
   865c2:	b133      	cbz	r3, 865d2 <_fclose_r+0x36>
   865c4:	69e1      	ldr	r1, [r4, #28]
   865c6:	4628      	mov	r0, r5
   865c8:	4798      	blx	r3
   865ca:	2800      	cmp	r0, #0
   865cc:	bfb8      	it	lt
   865ce:	f04f 36ff 	movlt.w	r6, #4294967295
   865d2:	89a3      	ldrh	r3, [r4, #12]
   865d4:	061b      	lsls	r3, r3, #24
   865d6:	d41c      	bmi.n	86612 <_fclose_r+0x76>
   865d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   865da:	b141      	cbz	r1, 865ee <_fclose_r+0x52>
   865dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   865e0:	4299      	cmp	r1, r3
   865e2:	d002      	beq.n	865ea <_fclose_r+0x4e>
   865e4:	4628      	mov	r0, r5
   865e6:	f7fe fda7 	bl	85138 <_free_r>
   865ea:	2300      	movs	r3, #0
   865ec:	6323      	str	r3, [r4, #48]	; 0x30
   865ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
   865f0:	b121      	cbz	r1, 865fc <_fclose_r+0x60>
   865f2:	4628      	mov	r0, r5
   865f4:	f7fe fda0 	bl	85138 <_free_r>
   865f8:	2300      	movs	r3, #0
   865fa:	6463      	str	r3, [r4, #68]	; 0x44
   865fc:	f7fe fcda 	bl	84fb4 <__sfp_lock_acquire>
   86600:	2300      	movs	r3, #0
   86602:	81a3      	strh	r3, [r4, #12]
   86604:	f7fe fcd8 	bl	84fb8 <__sfp_lock_release>
   86608:	4630      	mov	r0, r6
   8660a:	bd70      	pop	{r4, r5, r6, pc}
   8660c:	f7fe fccc 	bl	84fa8 <__sinit>
   86610:	e7cc      	b.n	865ac <_fclose_r+0x10>
   86612:	6921      	ldr	r1, [r4, #16]
   86614:	4628      	mov	r0, r5
   86616:	f7fe fd8f 	bl	85138 <_free_r>
   8661a:	e7dd      	b.n	865d8 <_fclose_r+0x3c>
   8661c:	2000      	movs	r0, #0
   8661e:	4770      	bx	lr

00086620 <_fstat_r>:
   86620:	b538      	push	{r3, r4, r5, lr}
   86622:	460b      	mov	r3, r1
   86624:	4c07      	ldr	r4, [pc, #28]	; (86644 <_fstat_r+0x24>)
   86626:	4605      	mov	r5, r0
   86628:	4611      	mov	r1, r2
   8662a:	4618      	mov	r0, r3
   8662c:	2300      	movs	r3, #0
   8662e:	6023      	str	r3, [r4, #0]
   86630:	f7fd f842 	bl	836b8 <_fstat>
   86634:	1c43      	adds	r3, r0, #1
   86636:	d000      	beq.n	8663a <_fstat_r+0x1a>
   86638:	bd38      	pop	{r3, r4, r5, pc}
   8663a:	6823      	ldr	r3, [r4, #0]
   8663c:	2b00      	cmp	r3, #0
   8663e:	d0fb      	beq.n	86638 <_fstat_r+0x18>
   86640:	602b      	str	r3, [r5, #0]
   86642:	bd38      	pop	{r3, r4, r5, pc}
   86644:	20071248 	.word	0x20071248

00086648 <_isatty_r>:
   86648:	b538      	push	{r3, r4, r5, lr}
   8664a:	4c07      	ldr	r4, [pc, #28]	; (86668 <_isatty_r+0x20>)
   8664c:	2300      	movs	r3, #0
   8664e:	4605      	mov	r5, r0
   86650:	4608      	mov	r0, r1
   86652:	6023      	str	r3, [r4, #0]
   86654:	f7fd f840 	bl	836d8 <_isatty>
   86658:	1c43      	adds	r3, r0, #1
   8665a:	d000      	beq.n	8665e <_isatty_r+0x16>
   8665c:	bd38      	pop	{r3, r4, r5, pc}
   8665e:	6823      	ldr	r3, [r4, #0]
   86660:	2b00      	cmp	r3, #0
   86662:	d0fb      	beq.n	8665c <_isatty_r+0x14>
   86664:	602b      	str	r3, [r5, #0]
   86666:	bd38      	pop	{r3, r4, r5, pc}
   86668:	20071248 	.word	0x20071248

0008666c <_lseek_r>:
   8666c:	b570      	push	{r4, r5, r6, lr}
   8666e:	460d      	mov	r5, r1
   86670:	4c08      	ldr	r4, [pc, #32]	; (86694 <_lseek_r+0x28>)
   86672:	4611      	mov	r1, r2
   86674:	4606      	mov	r6, r0
   86676:	461a      	mov	r2, r3
   86678:	4628      	mov	r0, r5
   8667a:	2300      	movs	r3, #0
   8667c:	6023      	str	r3, [r4, #0]
   8667e:	f7fd f835 	bl	836ec <_lseek>
   86682:	1c43      	adds	r3, r0, #1
   86684:	d000      	beq.n	86688 <_lseek_r+0x1c>
   86686:	bd70      	pop	{r4, r5, r6, pc}
   86688:	6823      	ldr	r3, [r4, #0]
   8668a:	2b00      	cmp	r3, #0
   8668c:	d0fb      	beq.n	86686 <_lseek_r+0x1a>
   8668e:	6033      	str	r3, [r6, #0]
   86690:	bd70      	pop	{r4, r5, r6, pc}
   86692:	bf00      	nop
   86694:	20071248 	.word	0x20071248

00086698 <_read_r>:
   86698:	b570      	push	{r4, r5, r6, lr}
   8669a:	460d      	mov	r5, r1
   8669c:	4c08      	ldr	r4, [pc, #32]	; (866c0 <_read_r+0x28>)
   8669e:	4611      	mov	r1, r2
   866a0:	4606      	mov	r6, r0
   866a2:	461a      	mov	r2, r3
   866a4:	4628      	mov	r0, r5
   866a6:	2300      	movs	r3, #0
   866a8:	6023      	str	r3, [r4, #0]
   866aa:	f7fa fe3d 	bl	81328 <_read>
   866ae:	1c43      	adds	r3, r0, #1
   866b0:	d000      	beq.n	866b4 <_read_r+0x1c>
   866b2:	bd70      	pop	{r4, r5, r6, pc}
   866b4:	6823      	ldr	r3, [r4, #0]
   866b6:	2b00      	cmp	r3, #0
   866b8:	d0fb      	beq.n	866b2 <_read_r+0x1a>
   866ba:	6033      	str	r3, [r6, #0]
   866bc:	bd70      	pop	{r4, r5, r6, pc}
   866be:	bf00      	nop
   866c0:	20071248 	.word	0x20071248

000866c4 <__aeabi_uldivmod>:
   866c4:	b953      	cbnz	r3, 866dc <__aeabi_uldivmod+0x18>
   866c6:	b94a      	cbnz	r2, 866dc <__aeabi_uldivmod+0x18>
   866c8:	2900      	cmp	r1, #0
   866ca:	bf08      	it	eq
   866cc:	2800      	cmpeq	r0, #0
   866ce:	bf1c      	itt	ne
   866d0:	f04f 31ff 	movne.w	r1, #4294967295
   866d4:	f04f 30ff 	movne.w	r0, #4294967295
   866d8:	f000 b982 	b.w	869e0 <__aeabi_idiv0>
   866dc:	f1ad 0c08 	sub.w	ip, sp, #8
   866e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   866e4:	f000 f806 	bl	866f4 <__udivmoddi4>
   866e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   866ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   866f0:	b004      	add	sp, #16
   866f2:	4770      	bx	lr

000866f4 <__udivmoddi4>:
   866f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   866f8:	468c      	mov	ip, r1
   866fa:	460c      	mov	r4, r1
   866fc:	4605      	mov	r5, r0
   866fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
   86700:	2b00      	cmp	r3, #0
   86702:	d14f      	bne.n	867a4 <__udivmoddi4+0xb0>
   86704:	428a      	cmp	r2, r1
   86706:	4617      	mov	r7, r2
   86708:	d96b      	bls.n	867e2 <__udivmoddi4+0xee>
   8670a:	fab2 fe82 	clz	lr, r2
   8670e:	f1be 0f00 	cmp.w	lr, #0
   86712:	d00b      	beq.n	8672c <__udivmoddi4+0x38>
   86714:	f1ce 0520 	rsb	r5, lr, #32
   86718:	fa20 f505 	lsr.w	r5, r0, r5
   8671c:	fa01 f30e 	lsl.w	r3, r1, lr
   86720:	ea45 0c03 	orr.w	ip, r5, r3
   86724:	fa02 f70e 	lsl.w	r7, r2, lr
   86728:	fa00 f50e 	lsl.w	r5, r0, lr
   8672c:	0c39      	lsrs	r1, r7, #16
   8672e:	fbbc f0f1 	udiv	r0, ip, r1
   86732:	b2ba      	uxth	r2, r7
   86734:	fb01 c310 	mls	r3, r1, r0, ip
   86738:	fb00 f802 	mul.w	r8, r0, r2
   8673c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86740:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   86744:	45a0      	cmp	r8, r4
   86746:	d909      	bls.n	8675c <__udivmoddi4+0x68>
   86748:	19e4      	adds	r4, r4, r7
   8674a:	f100 33ff 	add.w	r3, r0, #4294967295
   8674e:	f080 8128 	bcs.w	869a2 <__udivmoddi4+0x2ae>
   86752:	45a0      	cmp	r8, r4
   86754:	f240 8125 	bls.w	869a2 <__udivmoddi4+0x2ae>
   86758:	3802      	subs	r0, #2
   8675a:	443c      	add	r4, r7
   8675c:	ebc8 0404 	rsb	r4, r8, r4
   86760:	fbb4 f3f1 	udiv	r3, r4, r1
   86764:	fb01 4c13 	mls	ip, r1, r3, r4
   86768:	fb03 f202 	mul.w	r2, r3, r2
   8676c:	b2ac      	uxth	r4, r5
   8676e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   86772:	428a      	cmp	r2, r1
   86774:	d909      	bls.n	8678a <__udivmoddi4+0x96>
   86776:	19c9      	adds	r1, r1, r7
   86778:	f103 34ff 	add.w	r4, r3, #4294967295
   8677c:	f080 810f 	bcs.w	8699e <__udivmoddi4+0x2aa>
   86780:	428a      	cmp	r2, r1
   86782:	f240 810c 	bls.w	8699e <__udivmoddi4+0x2aa>
   86786:	3b02      	subs	r3, #2
   86788:	4439      	add	r1, r7
   8678a:	1a8a      	subs	r2, r1, r2
   8678c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86790:	2100      	movs	r1, #0
   86792:	2e00      	cmp	r6, #0
   86794:	d063      	beq.n	8685e <__udivmoddi4+0x16a>
   86796:	fa22 f20e 	lsr.w	r2, r2, lr
   8679a:	2300      	movs	r3, #0
   8679c:	e886 000c 	stmia.w	r6, {r2, r3}
   867a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867a4:	428b      	cmp	r3, r1
   867a6:	d907      	bls.n	867b8 <__udivmoddi4+0xc4>
   867a8:	2e00      	cmp	r6, #0
   867aa:	d056      	beq.n	8685a <__udivmoddi4+0x166>
   867ac:	2100      	movs	r1, #0
   867ae:	e886 0011 	stmia.w	r6, {r0, r4}
   867b2:	4608      	mov	r0, r1
   867b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867b8:	fab3 f183 	clz	r1, r3
   867bc:	2900      	cmp	r1, #0
   867be:	f040 8093 	bne.w	868e8 <__udivmoddi4+0x1f4>
   867c2:	42a3      	cmp	r3, r4
   867c4:	d302      	bcc.n	867cc <__udivmoddi4+0xd8>
   867c6:	4282      	cmp	r2, r0
   867c8:	f200 80fe 	bhi.w	869c8 <__udivmoddi4+0x2d4>
   867cc:	1a85      	subs	r5, r0, r2
   867ce:	eb64 0303 	sbc.w	r3, r4, r3
   867d2:	469c      	mov	ip, r3
   867d4:	2001      	movs	r0, #1
   867d6:	2e00      	cmp	r6, #0
   867d8:	d041      	beq.n	8685e <__udivmoddi4+0x16a>
   867da:	e886 1020 	stmia.w	r6, {r5, ip}
   867de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   867e2:	b912      	cbnz	r2, 867ea <__udivmoddi4+0xf6>
   867e4:	2701      	movs	r7, #1
   867e6:	fbb7 f7f2 	udiv	r7, r7, r2
   867ea:	fab7 fe87 	clz	lr, r7
   867ee:	f1be 0f00 	cmp.w	lr, #0
   867f2:	d136      	bne.n	86862 <__udivmoddi4+0x16e>
   867f4:	1be4      	subs	r4, r4, r7
   867f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   867fa:	fa1f f987 	uxth.w	r9, r7
   867fe:	2101      	movs	r1, #1
   86800:	fbb4 f3f8 	udiv	r3, r4, r8
   86804:	fb08 4413 	mls	r4, r8, r3, r4
   86808:	fb09 f203 	mul.w	r2, r9, r3
   8680c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86810:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   86814:	42a2      	cmp	r2, r4
   86816:	d907      	bls.n	86828 <__udivmoddi4+0x134>
   86818:	19e4      	adds	r4, r4, r7
   8681a:	f103 30ff 	add.w	r0, r3, #4294967295
   8681e:	d202      	bcs.n	86826 <__udivmoddi4+0x132>
   86820:	42a2      	cmp	r2, r4
   86822:	f200 80d3 	bhi.w	869cc <__udivmoddi4+0x2d8>
   86826:	4603      	mov	r3, r0
   86828:	1aa4      	subs	r4, r4, r2
   8682a:	fbb4 f0f8 	udiv	r0, r4, r8
   8682e:	fb08 4810 	mls	r8, r8, r0, r4
   86832:	fb09 f900 	mul.w	r9, r9, r0
   86836:	b2ac      	uxth	r4, r5
   86838:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   8683c:	4591      	cmp	r9, r2
   8683e:	d907      	bls.n	86850 <__udivmoddi4+0x15c>
   86840:	19d2      	adds	r2, r2, r7
   86842:	f100 34ff 	add.w	r4, r0, #4294967295
   86846:	d202      	bcs.n	8684e <__udivmoddi4+0x15a>
   86848:	4591      	cmp	r9, r2
   8684a:	f200 80ba 	bhi.w	869c2 <__udivmoddi4+0x2ce>
   8684e:	4620      	mov	r0, r4
   86850:	ebc9 0202 	rsb	r2, r9, r2
   86854:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86858:	e79b      	b.n	86792 <__udivmoddi4+0x9e>
   8685a:	4631      	mov	r1, r6
   8685c:	4630      	mov	r0, r6
   8685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86862:	fa07 f70e 	lsl.w	r7, r7, lr
   86866:	f1ce 0c20 	rsb	ip, lr, #32
   8686a:	fa24 f30c 	lsr.w	r3, r4, ip
   8686e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86872:	fbb3 faf8 	udiv	sl, r3, r8
   86876:	fa1f f987 	uxth.w	r9, r7
   8687a:	fb08 351a 	mls	r5, r8, sl, r3
   8687e:	fa20 fc0c 	lsr.w	ip, r0, ip
   86882:	fa04 f40e 	lsl.w	r4, r4, lr
   86886:	fb0a fb09 	mul.w	fp, sl, r9
   8688a:	ea4c 0c04 	orr.w	ip, ip, r4
   8688e:	ea4f 421c 	mov.w	r2, ip, lsr #16
   86892:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   86896:	459b      	cmp	fp, r3
   86898:	fa00 f50e 	lsl.w	r5, r0, lr
   8689c:	d90a      	bls.n	868b4 <__udivmoddi4+0x1c0>
   8689e:	19db      	adds	r3, r3, r7
   868a0:	f10a 32ff 	add.w	r2, sl, #4294967295
   868a4:	f080 808b 	bcs.w	869be <__udivmoddi4+0x2ca>
   868a8:	459b      	cmp	fp, r3
   868aa:	f240 8088 	bls.w	869be <__udivmoddi4+0x2ca>
   868ae:	f1aa 0a02 	sub.w	sl, sl, #2
   868b2:	443b      	add	r3, r7
   868b4:	ebcb 0303 	rsb	r3, fp, r3
   868b8:	fbb3 f0f8 	udiv	r0, r3, r8
   868bc:	fb08 3310 	mls	r3, r8, r0, r3
   868c0:	fb00 f409 	mul.w	r4, r0, r9
   868c4:	fa1f fc8c 	uxth.w	ip, ip
   868c8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   868cc:	429c      	cmp	r4, r3
   868ce:	d907      	bls.n	868e0 <__udivmoddi4+0x1ec>
   868d0:	19db      	adds	r3, r3, r7
   868d2:	f100 32ff 	add.w	r2, r0, #4294967295
   868d6:	d26e      	bcs.n	869b6 <__udivmoddi4+0x2c2>
   868d8:	429c      	cmp	r4, r3
   868da:	d96c      	bls.n	869b6 <__udivmoddi4+0x2c2>
   868dc:	3802      	subs	r0, #2
   868de:	443b      	add	r3, r7
   868e0:	1b1c      	subs	r4, r3, r4
   868e2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   868e6:	e78b      	b.n	86800 <__udivmoddi4+0x10c>
   868e8:	f1c1 0e20 	rsb	lr, r1, #32
   868ec:	408b      	lsls	r3, r1
   868ee:	fa22 fc0e 	lsr.w	ip, r2, lr
   868f2:	ea4c 0c03 	orr.w	ip, ip, r3
   868f6:	fa24 f70e 	lsr.w	r7, r4, lr
   868fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
   868fe:	fbb7 faf9 	udiv	sl, r7, r9
   86902:	fa1f f38c 	uxth.w	r3, ip
   86906:	fb09 771a 	mls	r7, r9, sl, r7
   8690a:	fa20 f80e 	lsr.w	r8, r0, lr
   8690e:	408c      	lsls	r4, r1
   86910:	fb0a f503 	mul.w	r5, sl, r3
   86914:	ea48 0404 	orr.w	r4, r8, r4
   86918:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8691c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86920:	42bd      	cmp	r5, r7
   86922:	fa02 f201 	lsl.w	r2, r2, r1
   86926:	fa00 fb01 	lsl.w	fp, r0, r1
   8692a:	d909      	bls.n	86940 <__udivmoddi4+0x24c>
   8692c:	eb17 070c 	adds.w	r7, r7, ip
   86930:	f10a 30ff 	add.w	r0, sl, #4294967295
   86934:	d241      	bcs.n	869ba <__udivmoddi4+0x2c6>
   86936:	42bd      	cmp	r5, r7
   86938:	d93f      	bls.n	869ba <__udivmoddi4+0x2c6>
   8693a:	f1aa 0a02 	sub.w	sl, sl, #2
   8693e:	4467      	add	r7, ip
   86940:	1b7f      	subs	r7, r7, r5
   86942:	fbb7 f5f9 	udiv	r5, r7, r9
   86946:	fb09 7715 	mls	r7, r9, r5, r7
   8694a:	fb05 f303 	mul.w	r3, r5, r3
   8694e:	b2a4      	uxth	r4, r4
   86950:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86954:	42bb      	cmp	r3, r7
   86956:	d908      	bls.n	8696a <__udivmoddi4+0x276>
   86958:	eb17 070c 	adds.w	r7, r7, ip
   8695c:	f105 30ff 	add.w	r0, r5, #4294967295
   86960:	d227      	bcs.n	869b2 <__udivmoddi4+0x2be>
   86962:	42bb      	cmp	r3, r7
   86964:	d925      	bls.n	869b2 <__udivmoddi4+0x2be>
   86966:	3d02      	subs	r5, #2
   86968:	4467      	add	r7, ip
   8696a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8696e:	fba0 8902 	umull	r8, r9, r0, r2
   86972:	1aff      	subs	r7, r7, r3
   86974:	454f      	cmp	r7, r9
   86976:	4645      	mov	r5, r8
   86978:	464c      	mov	r4, r9
   8697a:	d314      	bcc.n	869a6 <__udivmoddi4+0x2b2>
   8697c:	d029      	beq.n	869d2 <__udivmoddi4+0x2de>
   8697e:	b366      	cbz	r6, 869da <__udivmoddi4+0x2e6>
   86980:	ebbb 0305 	subs.w	r3, fp, r5
   86984:	eb67 0704 	sbc.w	r7, r7, r4
   86988:	fa07 fe0e 	lsl.w	lr, r7, lr
   8698c:	40cb      	lsrs	r3, r1
   8698e:	40cf      	lsrs	r7, r1
   86990:	ea4e 0303 	orr.w	r3, lr, r3
   86994:	e886 0088 	stmia.w	r6, {r3, r7}
   86998:	2100      	movs	r1, #0
   8699a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8699e:	4623      	mov	r3, r4
   869a0:	e6f3      	b.n	8678a <__udivmoddi4+0x96>
   869a2:	4618      	mov	r0, r3
   869a4:	e6da      	b.n	8675c <__udivmoddi4+0x68>
   869a6:	ebb8 0502 	subs.w	r5, r8, r2
   869aa:	eb69 040c 	sbc.w	r4, r9, ip
   869ae:	3801      	subs	r0, #1
   869b0:	e7e5      	b.n	8697e <__udivmoddi4+0x28a>
   869b2:	4605      	mov	r5, r0
   869b4:	e7d9      	b.n	8696a <__udivmoddi4+0x276>
   869b6:	4610      	mov	r0, r2
   869b8:	e792      	b.n	868e0 <__udivmoddi4+0x1ec>
   869ba:	4682      	mov	sl, r0
   869bc:	e7c0      	b.n	86940 <__udivmoddi4+0x24c>
   869be:	4692      	mov	sl, r2
   869c0:	e778      	b.n	868b4 <__udivmoddi4+0x1c0>
   869c2:	3802      	subs	r0, #2
   869c4:	443a      	add	r2, r7
   869c6:	e743      	b.n	86850 <__udivmoddi4+0x15c>
   869c8:	4608      	mov	r0, r1
   869ca:	e704      	b.n	867d6 <__udivmoddi4+0xe2>
   869cc:	3b02      	subs	r3, #2
   869ce:	443c      	add	r4, r7
   869d0:	e72a      	b.n	86828 <__udivmoddi4+0x134>
   869d2:	45c3      	cmp	fp, r8
   869d4:	d3e7      	bcc.n	869a6 <__udivmoddi4+0x2b2>
   869d6:	463c      	mov	r4, r7
   869d8:	e7d1      	b.n	8697e <__udivmoddi4+0x28a>
   869da:	4631      	mov	r1, r6
   869dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000869e0 <__aeabi_idiv0>:
   869e0:	4770      	bx	lr
   869e2:	bf00      	nop

000869e4 <can_bit_time>:
   869e4:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   869f4:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   86a04:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86a14:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86a24:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86a34:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86a44:	0718 0808 4304 0819 0808 4404               .....C.....D

00086a50 <uart_serial_options>:
   86a50:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86a60:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86a70:	0000 0000 0043 0000                         ....C...

00086a78 <_global_impure_ptr>:
   86a78:	0408 2007                                   ... 

00086a7c <zeroes.6993>:
   86a7c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86a8c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86a9c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   86aac:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00086abc <blanks.6992>:
   86abc:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086acc <_init>:
   86acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ace:	bf00      	nop
   86ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86ad2:	bc08      	pop	{r3}
   86ad4:	469e      	mov	lr, r3
   86ad6:	4770      	bx	lr

00086ad8 <__init_array_start>:
   86ad8:	00084d19 	.word	0x00084d19

00086adc <__frame_dummy_init_array_entry>:
   86adc:	00080119                                ....

00086ae0 <_fini>:
   86ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ae2:	bf00      	nop
   86ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86ae6:	bc08      	pop	{r3}
   86ae8:	469e      	mov	lr, r3
   86aea:	4770      	bx	lr

00086aec <__fini_array_start>:
   86aec:	000800f5 	.word	0x000800f5
