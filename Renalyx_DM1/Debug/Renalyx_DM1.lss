
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028acc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000015f4  20070000  000a8acc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001238  200715f4  000aa0c0  000415f4  2**2
                  ALLOC
  3 .stack        00002004  2007282c  000ab2f8  000415f4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000415f4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0004161d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005754e  00000000  00000000  00041676  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a09d  00000000  00000000  00098bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011073  00000000  00000000  000a2c61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000022a8  00000000  00000000  000b3cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001ed0  00000000  00000000  000b5f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00034f92  00000000  00000000  000b7e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005d205  00000000  00000000  000ecdde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00074fe5  00000000  00000000  00149fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008bfc  00000000  00000000  001befc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20074830 	.word	0x20074830
   80004:	0009b0d1 	.word	0x0009b0d1
   80008:	0009b0c9 	.word	0x0009b0c9
   8000c:	0009b0c9 	.word	0x0009b0c9
   80010:	0009b0c9 	.word	0x0009b0c9
   80014:	0009b0c9 	.word	0x0009b0c9
   80018:	0009b0c9 	.word	0x0009b0c9
	...
   8002c:	0009b0c9 	.word	0x0009b0c9
   80030:	0009b0c9 	.word	0x0009b0c9
   80034:	00000000 	.word	0x00000000
   80038:	0009b0c9 	.word	0x0009b0c9
   8003c:	000970c9 	.word	0x000970c9
   80040:	0009b0c9 	.word	0x0009b0c9
   80044:	0009b0c9 	.word	0x0009b0c9
   80048:	0009b0c9 	.word	0x0009b0c9
   8004c:	0009b0c9 	.word	0x0009b0c9
   80050:	0009b0c9 	.word	0x0009b0c9
   80054:	0009b0c9 	.word	0x0009b0c9
   80058:	0009b0c9 	.word	0x0009b0c9
   8005c:	0009b0c9 	.word	0x0009b0c9
   80060:	00097011 	.word	0x00097011
   80064:	0009b0c9 	.word	0x0009b0c9
   80068:	00000000 	.word	0x00000000
   8006c:	0009a909 	.word	0x0009a909
   80070:	0009a921 	.word	0x0009a921
   80074:	0009a939 	.word	0x0009a939
   80078:	0009a951 	.word	0x0009a951
	...
   80084:	0009b0c9 	.word	0x0009b0c9
   80088:	0009b0c9 	.word	0x0009b0c9
   8008c:	0009b0c9 	.word	0x0009b0c9
   80090:	0009b0c9 	.word	0x0009b0c9
   80094:	0009b0c9 	.word	0x0009b0c9
   80098:	0009b0c9 	.word	0x0009b0c9
   8009c:	0009b0c9 	.word	0x0009b0c9
   800a0:	0009b0c9 	.word	0x0009b0c9
   800a4:	00000000 	.word	0x00000000
   800a8:	0009b0c9 	.word	0x0009b0c9
   800ac:	0009704d 	.word	0x0009704d
   800b0:	0009bf71 	.word	0x0009bf71
   800b4:	0009b0c9 	.word	0x0009b0c9
   800b8:	000970a5 	.word	0x000970a5
   800bc:	0009b0c9 	.word	0x0009b0c9
   800c0:	0009b0c9 	.word	0x0009b0c9
   800c4:	00097081 	.word	0x00097081
   800c8:	0009b0c9 	.word	0x0009b0c9
   800cc:	0009b0c9 	.word	0x0009b0c9
   800d0:	0009b0c9 	.word	0x0009b0c9
   800d4:	0009b0c9 	.word	0x0009b0c9
   800d8:	0009b0c9 	.word	0x0009b0c9
   800dc:	0009b0c9 	.word	0x0009b0c9
   800e0:	0009b0c9 	.word	0x0009b0c9
   800e4:	0009b0c9 	.word	0x0009b0c9
   800e8:	0009b0c9 	.word	0x0009b0c9
   800ec:	00096259 	.word	0x00096259
   800f0:	0009b0c9 	.word	0x0009b0c9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200715f4 	.word	0x200715f4
   80110:	00000000 	.word	0x00000000
   80114:	000a8acc 	.word	0x000a8acc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200715f8 	.word	0x200715f8
   80144:	000a8acc 	.word	0x000a8acc
   80148:	000a8acc 	.word	0x000a8acc
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d831      	bhi.n	801c2 <osc_enable+0x72>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b11      	ldr	r3, [pc, #68]	; (801cc <osc_enable+0x7c>)
   80188:	4798      	blx	r3
		break;
   8018a:	e01a      	b.n	801c2 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0f      	ldr	r3, [pc, #60]	; (801cc <osc_enable+0x7c>)
   80190:	4798      	blx	r3
		break;
   80192:	e016      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0e      	ldr	r3, [pc, #56]	; (801d0 <osc_enable+0x80>)
   80198:	4798      	blx	r3
		break;
   8019a:	e012      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <osc_enable+0x80>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00e      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b0a      	ldr	r3, [pc, #40]	; (801d0 <osc_enable+0x80>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e00a      	b.n	801c2 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	213e      	movs	r1, #62	; 0x3e
   801ae:	2000      	movs	r0, #0
   801b0:	4b08      	ldr	r3, [pc, #32]	; (801d4 <osc_enable+0x84>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e005      	b.n	801c2 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	213e      	movs	r1, #62	; 0x3e
   801b8:	2001      	movs	r0, #1
   801ba:	4b06      	ldr	r3, [pc, #24]	; (801d4 <osc_enable+0x84>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	e000      	b.n	801c2 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   801c0:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   801c2:	bf00      	nop
   801c4:	3708      	adds	r7, #8
   801c6:	46bd      	mov	sp, r7
   801c8:	bd80      	pop	{r7, pc}
   801ca:	bf00      	nop
   801cc:	0009a9e9 	.word	0x0009a9e9
   801d0:	0009aa55 	.word	0x0009aa55
   801d4:	0009aaf5 	.word	0x0009aaf5

000801d8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d826      	bhi.n	80234 <osc_is_ready+0x5c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_is_ready+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	0008020d 	.word	0x0008020d
   801f0:	00080211 	.word	0x00080211
   801f4:	00080211 	.word	0x00080211
   801f8:	00080223 	.word	0x00080223
   801fc:	00080223 	.word	0x00080223
   80200:	00080223 	.word	0x00080223
   80204:	00080223 	.word	0x00080223
   80208:	00080223 	.word	0x00080223
	case OSC_SLCK_32K_RC:
		return 1;
   8020c:	2301      	movs	r3, #1
   8020e:	e012      	b.n	80236 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80210:	4b0b      	ldr	r3, [pc, #44]	; (80240 <osc_is_ready+0x68>)
   80212:	4798      	blx	r3
   80214:	4603      	mov	r3, r0
   80216:	2b00      	cmp	r3, #0
   80218:	bf14      	ite	ne
   8021a:	2301      	movne	r3, #1
   8021c:	2300      	moveq	r3, #0
   8021e:	b2db      	uxtb	r3, r3
   80220:	e009      	b.n	80236 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80222:	4b08      	ldr	r3, [pc, #32]	; (80244 <osc_is_ready+0x6c>)
   80224:	4798      	blx	r3
   80226:	4603      	mov	r3, r0
   80228:	2b00      	cmp	r3, #0
   8022a:	bf14      	ite	ne
   8022c:	2301      	movne	r3, #1
   8022e:	2300      	moveq	r3, #0
   80230:	b2db      	uxtb	r3, r3
   80232:	e000      	b.n	80236 <osc_is_ready+0x5e>
	}

	return 0;
   80234:	2300      	movs	r3, #0
}
   80236:	4618      	mov	r0, r3
   80238:	3708      	adds	r7, #8
   8023a:	46bd      	mov	sp, r7
   8023c:	bd80      	pop	{r7, pc}
   8023e:	bf00      	nop
   80240:	0009aa21 	.word	0x0009aa21
   80244:	0009ab6d 	.word	0x0009ab6d

00080248 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80248:	b480      	push	{r7}
   8024a:	b083      	sub	sp, #12
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80250:	687b      	ldr	r3, [r7, #4]
   80252:	2b07      	cmp	r3, #7
   80254:	d825      	bhi.n	802a2 <osc_get_rate+0x5a>
   80256:	a201      	add	r2, pc, #4	; (adr r2, 8025c <osc_get_rate+0x14>)
   80258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8025c:	0008027d 	.word	0x0008027d
   80260:	00080283 	.word	0x00080283
   80264:	00080289 	.word	0x00080289
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
   80278:	0008029f 	.word	0x0008029f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8027c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80280:	e010      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80286:	e00d      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8028c:	e00a      	b.n	802a4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x68>)
   80290:	e008      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x6c>)
   80294:	e006      	b.n	802a4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80296:	4b08      	ldr	r3, [pc, #32]	; (802b8 <osc_get_rate+0x70>)
   80298:	e004      	b.n	802a4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8029a:	4b07      	ldr	r3, [pc, #28]	; (802b8 <osc_get_rate+0x70>)
   8029c:	e002      	b.n	802a4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029e:	4b06      	ldr	r3, [pc, #24]	; (802b8 <osc_get_rate+0x70>)
   802a0:	e000      	b.n	802a4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   802a2:	2300      	movs	r3, #0
}
   802a4:	4618      	mov	r0, r3
   802a6:	370c      	adds	r7, #12
   802a8:	46bd      	mov	sp, r7
   802aa:	bc80      	pop	{r7}
   802ac:	4770      	bx	lr
   802ae:	bf00      	nop
   802b0:	003d0900 	.word	0x003d0900
   802b4:	007a1200 	.word	0x007a1200
   802b8:	00b71b00 	.word	0x00b71b00

000802bc <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802bc:	b580      	push	{r7, lr}
   802be:	b082      	sub	sp, #8
   802c0:	af00      	add	r7, sp, #0
   802c2:	4603      	mov	r3, r0
   802c4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c6:	bf00      	nop
   802c8:	79fb      	ldrb	r3, [r7, #7]
   802ca:	4618      	mov	r0, r3
   802cc:	4b05      	ldr	r3, [pc, #20]	; (802e4 <osc_wait_ready+0x28>)
   802ce:	4798      	blx	r3
   802d0:	4603      	mov	r3, r0
   802d2:	f083 0301 	eor.w	r3, r3, #1
   802d6:	b2db      	uxtb	r3, r3
   802d8:	2b00      	cmp	r3, #0
   802da:	d1f5      	bne.n	802c8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802dc:	bf00      	nop
   802de:	3708      	adds	r7, #8
   802e0:	46bd      	mov	sp, r7
   802e2:	bd80      	pop	{r7, pc}
   802e4:	000801d9 	.word	0x000801d9

000802e8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e8:	b580      	push	{r7, lr}
   802ea:	b086      	sub	sp, #24
   802ec:	af00      	add	r7, sp, #0
   802ee:	60f8      	str	r0, [r7, #12]
   802f0:	607a      	str	r2, [r7, #4]
   802f2:	603b      	str	r3, [r7, #0]
   802f4:	460b      	mov	r3, r1
   802f6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f8:	687b      	ldr	r3, [r7, #4]
   802fa:	2b00      	cmp	r3, #0
   802fc:	d107      	bne.n	8030e <pll_config_init+0x26>
   802fe:	683b      	ldr	r3, [r7, #0]
   80300:	2b00      	cmp	r3, #0
   80302:	d104      	bne.n	8030e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80304:	68fb      	ldr	r3, [r7, #12]
   80306:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8030a:	601a      	str	r2, [r3, #0]
   8030c:	e019      	b.n	80342 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030e:	7afb      	ldrb	r3, [r7, #11]
   80310:	4618      	mov	r0, r3
   80312:	4b0e      	ldr	r3, [pc, #56]	; (8034c <pll_config_init+0x64>)
   80314:	4798      	blx	r3
   80316:	4602      	mov	r2, r0
   80318:	687b      	ldr	r3, [r7, #4]
   8031a:	fbb2 f3f3 	udiv	r3, r2, r3
   8031e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   80320:	697b      	ldr	r3, [r7, #20]
   80322:	683a      	ldr	r2, [r7, #0]
   80324:	fb02 f303 	mul.w	r3, r2, r3
   80328:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8032a:	683b      	ldr	r3, [r7, #0]
   8032c:	3b01      	subs	r3, #1
   8032e:	041a      	lsls	r2, r3, #16
   80330:	4b07      	ldr	r3, [pc, #28]	; (80350 <pll_config_init+0x68>)
   80332:	4013      	ands	r3, r2
   80334:	687a      	ldr	r2, [r7, #4]
   80336:	b2d2      	uxtb	r2, r2
   80338:	4313      	orrs	r3, r2
   8033a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033e:	68fb      	ldr	r3, [r7, #12]
   80340:	601a      	str	r2, [r3, #0]
	}
}
   80342:	bf00      	nop
   80344:	3718      	adds	r7, #24
   80346:	46bd      	mov	sp, r7
   80348:	bd80      	pop	{r7, pc}
   8034a:	bf00      	nop
   8034c:	00080249 	.word	0x00080249
   80350:	07ff0000 	.word	0x07ff0000

00080354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80354:	b580      	push	{r7, lr}
   80356:	b082      	sub	sp, #8
   80358:	af00      	add	r7, sp, #0
   8035a:	6078      	str	r0, [r7, #4]
   8035c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8035e:	683b      	ldr	r3, [r7, #0]
   80360:	2b00      	cmp	r3, #0
   80362:	d108      	bne.n	80376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80364:	4b09      	ldr	r3, [pc, #36]	; (8038c <pll_enable+0x38>)
   80366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80368:	4a09      	ldr	r2, [pc, #36]	; (80390 <pll_enable+0x3c>)
   8036a:	687b      	ldr	r3, [r7, #4]
   8036c:	681b      	ldr	r3, [r3, #0]
   8036e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80372:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80374:	e005      	b.n	80382 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80376:	4a06      	ldr	r2, [pc, #24]	; (80390 <pll_enable+0x3c>)
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	681b      	ldr	r3, [r3, #0]
   8037c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80380:	61d3      	str	r3, [r2, #28]
	}
}
   80382:	bf00      	nop
   80384:	3708      	adds	r7, #8
   80386:	46bd      	mov	sp, r7
   80388:	bd80      	pop	{r7, pc}
   8038a:	bf00      	nop
   8038c:	0009ab85 	.word	0x0009ab85
   80390:	400e0600 	.word	0x400e0600

00080394 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80394:	b580      	push	{r7, lr}
   80396:	b082      	sub	sp, #8
   80398:	af00      	add	r7, sp, #0
   8039a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b00      	cmp	r3, #0
   803a0:	d103      	bne.n	803aa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   803a2:	4b05      	ldr	r3, [pc, #20]	; (803b8 <pll_is_locked+0x24>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	e002      	b.n	803b0 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   803aa:	4b04      	ldr	r3, [pc, #16]	; (803bc <pll_is_locked+0x28>)
   803ac:	4798      	blx	r3
   803ae:	4603      	mov	r3, r0
	}
}
   803b0:	4618      	mov	r0, r3
   803b2:	3708      	adds	r7, #8
   803b4:	46bd      	mov	sp, r7
   803b6:	bd80      	pop	{r7, pc}
   803b8:	0009ab9d 	.word	0x0009ab9d
   803bc:	0009abb5 	.word	0x0009abb5

000803c0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803c0:	b580      	push	{r7, lr}
   803c2:	b082      	sub	sp, #8
   803c4:	af00      	add	r7, sp, #0
   803c6:	4603      	mov	r3, r0
   803c8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803ca:	79fb      	ldrb	r3, [r7, #7]
   803cc:	3b03      	subs	r3, #3
   803ce:	2b04      	cmp	r3, #4
   803d0:	d808      	bhi.n	803e4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803d2:	79fb      	ldrb	r3, [r7, #7]
   803d4:	4618      	mov	r0, r3
   803d6:	4b06      	ldr	r3, [pc, #24]	; (803f0 <pll_enable_source+0x30>)
   803d8:	4798      	blx	r3
		osc_wait_ready(e_src);
   803da:	79fb      	ldrb	r3, [r7, #7]
   803dc:	4618      	mov	r0, r3
   803de:	4b05      	ldr	r3, [pc, #20]	; (803f4 <pll_enable_source+0x34>)
   803e0:	4798      	blx	r3
		break;
   803e2:	e000      	b.n	803e6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803e4:	bf00      	nop
	}
}
   803e6:	bf00      	nop
   803e8:	3708      	adds	r7, #8
   803ea:	46bd      	mov	sp, r7
   803ec:	bd80      	pop	{r7, pc}
   803ee:	bf00      	nop
   803f0:	00080151 	.word	0x00080151
   803f4:	000802bd 	.word	0x000802bd

000803f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803f8:	b580      	push	{r7, lr}
   803fa:	b082      	sub	sp, #8
   803fc:	af00      	add	r7, sp, #0
   803fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80400:	bf00      	nop
   80402:	6878      	ldr	r0, [r7, #4]
   80404:	4b04      	ldr	r3, [pc, #16]	; (80418 <pll_wait_for_lock+0x20>)
   80406:	4798      	blx	r3
   80408:	4603      	mov	r3, r0
   8040a:	2b00      	cmp	r3, #0
   8040c:	d0f9      	beq.n	80402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8040e:	2300      	movs	r3, #0
}
   80410:	4618      	mov	r0, r3
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00080395 	.word	0x00080395

0008041c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80420:	2006      	movs	r0, #6
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <sysclk_get_main_hz+0x18>)
   80424:	4798      	blx	r3
   80426:	4602      	mov	r2, r0
   80428:	4613      	mov	r3, r2
   8042a:	00db      	lsls	r3, r3, #3
   8042c:	1a9b      	subs	r3, r3, r2
   8042e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80430:	4618      	mov	r0, r3
   80432:	bd80      	pop	{r7, pc}
   80434:	00080249 	.word	0x00080249

00080438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80438:	b580      	push	{r7, lr}
   8043a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8043c:	4b02      	ldr	r3, [pc, #8]	; (80448 <sysclk_get_cpu_hz+0x10>)
   8043e:	4798      	blx	r3
   80440:	4603      	mov	r3, r0
   80442:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80444:	4618      	mov	r0, r3
   80446:	bd80      	pop	{r7, pc}
   80448:	0008041d 	.word	0x0008041d

0008044c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8044c:	b590      	push	{r4, r7, lr}
   8044e:	b083      	sub	sp, #12
   80450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80452:	4b10      	ldr	r3, [pc, #64]	; (80494 <sysclk_init+0x48>)
   80454:	4798      	blx	r3
   80456:	4603      	mov	r3, r0
   80458:	4618      	mov	r0, r3
   8045a:	4b0f      	ldr	r3, [pc, #60]	; (80498 <sysclk_init+0x4c>)
   8045c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8045e:	2006      	movs	r0, #6
   80460:	4b0e      	ldr	r3, [pc, #56]	; (8049c <sysclk_init+0x50>)
   80462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80464:	1d38      	adds	r0, r7, #4
   80466:	230e      	movs	r3, #14
   80468:	2201      	movs	r2, #1
   8046a:	2106      	movs	r1, #6
   8046c:	4c0c      	ldr	r4, [pc, #48]	; (804a0 <sysclk_init+0x54>)
   8046e:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80470:	1d3b      	adds	r3, r7, #4
   80472:	2100      	movs	r1, #0
   80474:	4618      	mov	r0, r3
   80476:	4b0b      	ldr	r3, [pc, #44]	; (804a4 <sysclk_init+0x58>)
   80478:	4798      	blx	r3
		pll_wait_for_lock(0);
   8047a:	2000      	movs	r0, #0
   8047c:	4b0a      	ldr	r3, [pc, #40]	; (804a8 <sysclk_init+0x5c>)
   8047e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80480:	2010      	movs	r0, #16
   80482:	4b0a      	ldr	r3, [pc, #40]	; (804ac <sysclk_init+0x60>)
   80484:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80486:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <sysclk_init+0x64>)
   80488:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8048a:	bf00      	nop
   8048c:	370c      	adds	r7, #12
   8048e:	46bd      	mov	sp, r7
   80490:	bd90      	pop	{r4, r7, pc}
   80492:	bf00      	nop
   80494:	00080439 	.word	0x00080439
   80498:	0009b2fd 	.word	0x0009b2fd
   8049c:	000803c1 	.word	0x000803c1
   804a0:	000802e9 	.word	0x000802e9
   804a4:	00080355 	.word	0x00080355
   804a8:	000803f9 	.word	0x000803f9
   804ac:	0009a969 	.word	0x0009a969
   804b0:	0009b179 	.word	0x0009b179

000804b4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804b4:	b580      	push	{r7, lr}
   804b6:	b084      	sub	sp, #16
   804b8:	af00      	add	r7, sp, #0
   804ba:	60f8      	str	r0, [r7, #12]
   804bc:	60b9      	str	r1, [r7, #8]
   804be:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	021b      	lsls	r3, r3, #8
   804c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804c8:	68bb      	ldr	r3, [r7, #8]
   804ca:	4313      	orrs	r3, r2
   804cc:	4619      	mov	r1, r3
   804ce:	68f8      	ldr	r0, [r7, #12]
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <efc_init+0x2c>)
   804d2:	4798      	blx	r3
	return EFC_RC_OK;
   804d4:	2300      	movs	r3, #0
}
   804d6:	4618      	mov	r0, r3
   804d8:	3710      	adds	r7, #16
   804da:	46bd      	mov	sp, r7
   804dc:	bd80      	pop	{r7, pc}
   804de:	bf00      	nop
   804e0:	200700b5 	.word	0x200700b5

000804e4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804e4:	b580      	push	{r7, lr}
   804e6:	b084      	sub	sp, #16
   804e8:	af00      	add	r7, sp, #0
   804ea:	6078      	str	r0, [r7, #4]
   804ec:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804ee:	687b      	ldr	r3, [r7, #4]
   804f0:	681b      	ldr	r3, [r3, #0]
   804f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804f6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804f8:	683b      	ldr	r3, [r7, #0]
   804fa:	021b      	lsls	r3, r3, #8
   804fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	4313      	orrs	r3, r2
   80504:	4619      	mov	r1, r3
   80506:	6878      	ldr	r0, [r7, #4]
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <efc_set_wait_state+0x30>)
   8050a:	4798      	blx	r3
}
   8050c:	bf00      	nop
   8050e:	3710      	adds	r7, #16
   80510:	46bd      	mov	sp, r7
   80512:	bd80      	pop	{r7, pc}
   80514:	200700b5 	.word	0x200700b5

00080518 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80518:	b480      	push	{r7}
   8051a:	b083      	sub	sp, #12
   8051c:	af00      	add	r7, sp, #0
   8051e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80520:	687b      	ldr	r3, [r7, #4]
   80522:	681b      	ldr	r3, [r3, #0]
   80524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80528:	0a1b      	lsrs	r3, r3, #8
}
   8052a:	4618      	mov	r0, r3
   8052c:	370c      	adds	r7, #12
   8052e:	46bd      	mov	sp, r7
   80530:	bc80      	pop	{r7}
   80532:	4770      	bx	lr

00080534 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80534:	b580      	push	{r7, lr}
   80536:	b086      	sub	sp, #24
   80538:	af00      	add	r7, sp, #0
   8053a:	60f8      	str	r0, [r7, #12]
   8053c:	60b9      	str	r1, [r7, #8]
   8053e:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80540:	68bb      	ldr	r3, [r7, #8]
   80542:	2b0e      	cmp	r3, #14
   80544:	d002      	beq.n	8054c <efc_perform_command+0x18>
   80546:	68bb      	ldr	r3, [r7, #8]
   80548:	2b0f      	cmp	r3, #15
   8054a:	d102      	bne.n	80552 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   8054c:	f04f 33ff 	mov.w	r3, #4294967295
   80550:	e020      	b.n	80594 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80552:	68fb      	ldr	r3, [r7, #12]
   80554:	4a11      	ldr	r2, [pc, #68]	; (8059c <efc_perform_command+0x68>)
   80556:	4293      	cmp	r3, r2
   80558:	bf14      	ite	ne
   8055a:	2301      	movne	r3, #1
   8055c:	2300      	moveq	r3, #0
   8055e:	b2db      	uxtb	r3, r3
   80560:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80562:	4b0f      	ldr	r3, [pc, #60]	; (805a0 <efc_perform_command+0x6c>)
   80564:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   80566:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   80568:	4b0e      	ldr	r3, [pc, #56]	; (805a4 <efc_perform_command+0x70>)
   8056a:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   8056c:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <efc_perform_command+0x70>)
   8056e:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80570:	687b      	ldr	r3, [r7, #4]
   80572:	021b      	lsls	r3, r3, #8
   80574:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   80578:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   8057c:	68b9      	ldr	r1, [r7, #8]
   8057e:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80580:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80582:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   80586:	4619      	mov	r1, r3
   80588:	6978      	ldr	r0, [r7, #20]
   8058a:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	689b      	ldr	r3, [r3, #8]
   80590:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80594:	4618      	mov	r0, r3
   80596:	3718      	adds	r7, #24
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	400e0a00 	.word	0x400e0a00
   805a0:	00100008 	.word	0x00100008
   805a4:	20071610 	.word	0x20071610

000805a8 <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   805a8:	b480      	push	{r7}
   805aa:	b083      	sub	sp, #12
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805b0:	687b      	ldr	r3, [r7, #4]
   805b2:	68db      	ldr	r3, [r3, #12]
}
   805b4:	4618      	mov	r0, r3
   805b6:	370c      	adds	r7, #12
   805b8:	46bd      	mov	sp, r7
   805ba:	bc80      	pop	{r7}
   805bc:	4770      	bx	lr
   805be:	bf00      	nop

000805c0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805c0:	b580      	push	{r7, lr}
   805c2:	b082      	sub	sp, #8
   805c4:	af00      	add	r7, sp, #0
   805c6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805c8:	6878      	ldr	r0, [r7, #4]
   805ca:	4b03      	ldr	r3, [pc, #12]	; (805d8 <sysclk_enable_peripheral_clock+0x18>)
   805cc:	4798      	blx	r3
}
   805ce:	bf00      	nop
   805d0:	3708      	adds	r7, #8
   805d2:	46bd      	mov	sp, r7
   805d4:	bd80      	pop	{r7, pc}
   805d6:	bf00      	nop
   805d8:	0009abcd 	.word	0x0009abcd

000805dc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805dc:	b580      	push	{r7, lr}
   805de:	b082      	sub	sp, #8
   805e0:	af00      	add	r7, sp, #0
   805e2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805e4:	687b      	ldr	r3, [r7, #4]
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <spi_enable_clock+0x20>)
   805e8:	4293      	cmp	r3, r2
   805ea:	d102      	bne.n	805f2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805ec:	2018      	movs	r0, #24
   805ee:	4b04      	ldr	r3, [pc, #16]	; (80600 <spi_enable_clock+0x24>)
   805f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805f2:	bf00      	nop
   805f4:	3708      	adds	r7, #8
   805f6:	46bd      	mov	sp, r7
   805f8:	bd80      	pop	{r7, pc}
   805fa:	bf00      	nop
   805fc:	40008000 	.word	0x40008000
   80600:	000805c1 	.word	0x000805c1

00080604 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   80604:	b480      	push	{r7}
   80606:	b083      	sub	sp, #12
   80608:	af00      	add	r7, sp, #0
   8060a:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8060c:	687b      	ldr	r3, [r7, #4]
   8060e:	2208      	movs	r2, #8
   80610:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80612:	687b      	ldr	r3, [r7, #4]
   80614:	2220      	movs	r2, #32
   80616:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80618:	687b      	ldr	r3, [r7, #4]
   8061a:	2204      	movs	r2, #4
   8061c:	601a      	str	r2, [r3, #0]
}
   8061e:	bf00      	nop
   80620:	370c      	adds	r7, #12
   80622:	46bd      	mov	sp, r7
   80624:	bc80      	pop	{r7}
   80626:	4770      	bx	lr

00080628 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80628:	b580      	push	{r7, lr}
   8062a:	b084      	sub	sp, #16
   8062c:	af00      	add	r7, sp, #0
   8062e:	6078      	str	r0, [r7, #4]
   80630:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   80632:	2300      	movs	r3, #0
   80634:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80636:	687b      	ldr	r3, [r7, #4]
   80638:	f04f 32ff 	mov.w	r2, #4294967295
   8063c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8063e:	687b      	ldr	r3, [r7, #4]
   80640:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4b0e      	ldr	r3, [pc, #56]	; (80680 <twi_master_init+0x58>)
   80646:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80648:	6878      	ldr	r0, [r7, #4]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <twi_master_init+0x5c>)
   8064c:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8064e:	683b      	ldr	r3, [r7, #0]
   80650:	6859      	ldr	r1, [r3, #4]
   80652:	683b      	ldr	r3, [r7, #0]
   80654:	681b      	ldr	r3, [r3, #0]
   80656:	461a      	mov	r2, r3
   80658:	6878      	ldr	r0, [r7, #4]
   8065a:	4b0b      	ldr	r3, [pc, #44]	; (80688 <twi_master_init+0x60>)
   8065c:	4798      	blx	r3
   8065e:	4603      	mov	r3, r0
   80660:	2b01      	cmp	r3, #1
   80662:	d101      	bne.n	80668 <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80664:	2301      	movs	r3, #1
   80666:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	7a5b      	ldrb	r3, [r3, #9]
   8066c:	2b01      	cmp	r3, #1
   8066e:	d102      	bne.n	80676 <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	2240      	movs	r2, #64	; 0x40
   80674:	601a      	str	r2, [r3, #0]
	}

	return status;
   80676:	68fb      	ldr	r3, [r7, #12]
}
   80678:	4618      	mov	r0, r3
   8067a:	3710      	adds	r7, #16
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	00080705 	.word	0x00080705
   80684:	00080605 	.word	0x00080605
   80688:	0008068d 	.word	0x0008068d

0008068c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8068c:	b480      	push	{r7}
   8068e:	b087      	sub	sp, #28
   80690:	af00      	add	r7, sp, #0
   80692:	60f8      	str	r0, [r7, #12]
   80694:	60b9      	str	r1, [r7, #8]
   80696:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80698:	2300      	movs	r3, #0
   8069a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8069c:	68bb      	ldr	r3, [r7, #8]
   8069e:	4a17      	ldr	r2, [pc, #92]	; (806fc <twi_set_speed+0x70>)
   806a0:	4293      	cmp	r3, r2
   806a2:	d901      	bls.n	806a8 <twi_set_speed+0x1c>
		return FAIL;
   806a4:	2301      	movs	r3, #1
   806a6:	e024      	b.n	806f2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   806a8:	68bb      	ldr	r3, [r7, #8]
   806aa:	005b      	lsls	r3, r3, #1
   806ac:	687a      	ldr	r2, [r7, #4]
   806ae:	fbb2 f3f3 	udiv	r3, r2, r3
   806b2:	3b04      	subs	r3, #4
   806b4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b6:	e005      	b.n	806c4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806b8:	697b      	ldr	r3, [r7, #20]
   806ba:	3301      	adds	r3, #1
   806bc:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806be:	693b      	ldr	r3, [r7, #16]
   806c0:	085b      	lsrs	r3, r3, #1
   806c2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c4:	693b      	ldr	r3, [r7, #16]
   806c6:	2bff      	cmp	r3, #255	; 0xff
   806c8:	d902      	bls.n	806d0 <twi_set_speed+0x44>
   806ca:	697b      	ldr	r3, [r7, #20]
   806cc:	2b06      	cmp	r3, #6
   806ce:	d9f3      	bls.n	806b8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806d0:	4a0b      	ldr	r2, [pc, #44]	; (80700 <twi_set_speed+0x74>)
   806d2:	693b      	ldr	r3, [r7, #16]
   806d4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806d6:	693b      	ldr	r3, [r7, #16]
   806d8:	b2da      	uxtb	r2, r3
   806da:	693b      	ldr	r3, [r7, #16]
   806dc:	021b      	lsls	r3, r3, #8
   806de:	b29b      	uxth	r3, r3
   806e0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806e2:	697b      	ldr	r3, [r7, #20]
   806e4:	041b      	lsls	r3, r3, #16
   806e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ea:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806ec:	68fb      	ldr	r3, [r7, #12]
   806ee:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806f0:	2300      	movs	r3, #0
}
   806f2:	4618      	mov	r0, r3
   806f4:	371c      	adds	r7, #28
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr
   806fc:	00061a80 	.word	0x00061a80
   80700:	20071614 	.word	0x20071614

00080704 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   80704:	b480      	push	{r7}
   80706:	b083      	sub	sp, #12
   80708:	af00      	add	r7, sp, #0
   8070a:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8070c:	687b      	ldr	r3, [r7, #4]
   8070e:	2280      	movs	r2, #128	; 0x80
   80710:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80712:	687b      	ldr	r3, [r7, #4]
   80714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   80716:	bf00      	nop
   80718:	370c      	adds	r7, #12
   8071a:	46bd      	mov	sp, r7
   8071c:	bc80      	pop	{r7}
   8071e:	4770      	bx	lr

00080720 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80720:	b480      	push	{r7}
   80722:	b087      	sub	sp, #28
   80724:	af00      	add	r7, sp, #0
   80726:	60f8      	str	r0, [r7, #12]
   80728:	60b9      	str	r1, [r7, #8]
   8072a:	607a      	str	r2, [r7, #4]
   8072c:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   8072e:	68bb      	ldr	r3, [r7, #8]
   80730:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   80734:	d30b      	bcc.n	8074e <translate_address+0x2e>
		p_efc = EFC1;
   80736:	4b17      	ldr	r3, [pc, #92]	; (80794 <translate_address+0x74>)
   80738:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8073a:	68bb      	ldr	r3, [r7, #8]
   8073c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80740:	0a1b      	lsrs	r3, r3, #8
   80742:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80744:	68bb      	ldr	r3, [r7, #8]
   80746:	b29b      	uxth	r3, r3
   80748:	b2db      	uxtb	r3, r3
   8074a:	823b      	strh	r3, [r7, #16]
   8074c:	e00a      	b.n	80764 <translate_address+0x44>
	} else {
		p_efc = EFC0;
   8074e:	4b12      	ldr	r3, [pc, #72]	; (80798 <translate_address+0x78>)
   80750:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80752:	68bb      	ldr	r3, [r7, #8]
   80754:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   80758:	0a1b      	lsrs	r3, r3, #8
   8075a:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   8075c:	68bb      	ldr	r3, [r7, #8]
   8075e:	b29b      	uxth	r3, r3
   80760:	b2db      	uxtb	r3, r3
   80762:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   80764:	68fb      	ldr	r3, [r7, #12]
   80766:	2b00      	cmp	r3, #0
   80768:	d002      	beq.n	80770 <translate_address+0x50>
		*pp_efc = p_efc;
   8076a:	68fb      	ldr	r3, [r7, #12]
   8076c:	697a      	ldr	r2, [r7, #20]
   8076e:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80770:	687b      	ldr	r3, [r7, #4]
   80772:	2b00      	cmp	r3, #0
   80774:	d002      	beq.n	8077c <translate_address+0x5c>
		*pus_page = us_page;
   80776:	687b      	ldr	r3, [r7, #4]
   80778:	8a7a      	ldrh	r2, [r7, #18]
   8077a:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   8077c:	683b      	ldr	r3, [r7, #0]
   8077e:	2b00      	cmp	r3, #0
   80780:	d002      	beq.n	80788 <translate_address+0x68>
		*pus_offset = us_offset;
   80782:	683b      	ldr	r3, [r7, #0]
   80784:	8a3a      	ldrh	r2, [r7, #16]
   80786:	801a      	strh	r2, [r3, #0]
	}
}
   80788:	bf00      	nop
   8078a:	371c      	adds	r7, #28
   8078c:	46bd      	mov	sp, r7
   8078e:	bc80      	pop	{r7}
   80790:	4770      	bx	lr
   80792:	bf00      	nop
   80794:	400e0c00 	.word	0x400e0c00
   80798:	400e0a00 	.word	0x400e0a00

0008079c <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   8079c:	b480      	push	{r7}
   8079e:	b087      	sub	sp, #28
   807a0:	af00      	add	r7, sp, #0
   807a2:	60f8      	str	r0, [r7, #12]
   807a4:	607b      	str	r3, [r7, #4]
   807a6:	460b      	mov	r3, r1
   807a8:	817b      	strh	r3, [r7, #10]
   807aa:	4613      	mov	r3, r2
   807ac:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807ae:	68fb      	ldr	r3, [r7, #12]
   807b0:	4a0d      	ldr	r2, [pc, #52]	; (807e8 <compute_address+0x4c>)
   807b2:	4293      	cmp	r3, r2
   807b4:	d106      	bne.n	807c4 <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   807b6:	897b      	ldrh	r3, [r7, #10]
   807b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   807bc:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807be:	893b      	ldrh	r3, [r7, #8]
   807c0:	4413      	add	r3, r2
   807c2:	e005      	b.n	807d0 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   807c4:	897b      	ldrh	r3, [r7, #10]
   807c6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   807ca:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807cc:	893b      	ldrh	r3, [r7, #8]
   807ce:	4413      	add	r3, r2
   807d0:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   807d2:	687b      	ldr	r3, [r7, #4]
   807d4:	2b00      	cmp	r3, #0
   807d6:	d002      	beq.n	807de <compute_address+0x42>
		*pul_addr = ul_addr;
   807d8:	687b      	ldr	r3, [r7, #4]
   807da:	697a      	ldr	r2, [r7, #20]
   807dc:	601a      	str	r2, [r3, #0]
	}
}
   807de:	bf00      	nop
   807e0:	371c      	adds	r7, #28
   807e2:	46bd      	mov	sp, r7
   807e4:	bc80      	pop	{r7}
   807e6:	4770      	bx	lr
   807e8:	400e0a00 	.word	0x400e0a00

000807ec <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807ec:	b480      	push	{r7}
   807ee:	b087      	sub	sp, #28
   807f0:	af00      	add	r7, sp, #0
   807f2:	60f8      	str	r0, [r7, #12]
   807f4:	60b9      	str	r1, [r7, #8]
   807f6:	607a      	str	r2, [r7, #4]
   807f8:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807fa:	68fb      	ldr	r3, [r7, #12]
   807fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80804:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   80806:	68bb      	ldr	r3, [r7, #8]
   80808:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   8080c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80810:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   80814:	333f      	adds	r3, #63	; 0x3f
   80816:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   80818:	687b      	ldr	r3, [r7, #4]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d002      	beq.n	80824 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   8081e:	687b      	ldr	r3, [r7, #4]
   80820:	697a      	ldr	r2, [r7, #20]
   80822:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   80824:	683b      	ldr	r3, [r7, #0]
   80826:	2b00      	cmp	r3, #0
   80828:	d002      	beq.n	80830 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   8082a:	683b      	ldr	r3, [r7, #0]
   8082c:	693a      	ldr	r2, [r7, #16]
   8082e:	601a      	str	r2, [r3, #0]
	}
}
   80830:	bf00      	nop
   80832:	371c      	adds	r7, #28
   80834:	46bd      	mov	sp, r7
   80836:	bc80      	pop	{r7}
   80838:	4770      	bx	lr
   8083a:	bf00      	nop

0008083c <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   8083c:	b580      	push	{r7, lr}
   8083e:	b082      	sub	sp, #8
   80840:	af00      	add	r7, sp, #0
   80842:	6078      	str	r0, [r7, #4]
   80844:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   80846:	683a      	ldr	r2, [r7, #0]
   80848:	6879      	ldr	r1, [r7, #4]
   8084a:	4806      	ldr	r0, [pc, #24]	; (80864 <flash_init+0x28>)
   8084c:	4b06      	ldr	r3, [pc, #24]	; (80868 <flash_init+0x2c>)
   8084e:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80850:	683a      	ldr	r2, [r7, #0]
   80852:	6879      	ldr	r1, [r7, #4]
   80854:	4805      	ldr	r0, [pc, #20]	; (8086c <flash_init+0x30>)
   80856:	4b04      	ldr	r3, [pc, #16]	; (80868 <flash_init+0x2c>)
   80858:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   8085a:	2300      	movs	r3, #0
}
   8085c:	4618      	mov	r0, r3
   8085e:	3708      	adds	r7, #8
   80860:	46bd      	mov	sp, r7
   80862:	bd80      	pop	{r7, pc}
   80864:	400e0a00 	.word	0x400e0a00
   80868:	000804b5 	.word	0x000804b5
   8086c:	400e0c00 	.word	0x400e0c00

00080870 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80870:	b590      	push	{r4, r7, lr}
   80872:	b08f      	sub	sp, #60	; 0x3c
   80874:	af00      	add	r7, sp, #0
   80876:	60f8      	str	r0, [r7, #12]
   80878:	60b9      	str	r1, [r7, #8]
   8087a:	607a      	str	r2, [r7, #4]
   8087c:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   8087e:	4b4a      	ldr	r3, [pc, #296]	; (809a8 <flash_write+0x138>)
   80880:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   80882:	f107 0314 	add.w	r3, r7, #20
   80886:	f107 0216 	add.w	r2, r7, #22
   8088a:	f107 0018 	add.w	r0, r7, #24
   8088e:	68f9      	ldr	r1, [r7, #12]
   80890:	4c46      	ldr	r4, [pc, #280]	; (809ac <flash_write+0x13c>)
   80892:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   80894:	69bb      	ldr	r3, [r7, #24]
   80896:	4618      	mov	r0, r3
   80898:	4b45      	ldr	r3, [pc, #276]	; (809b0 <flash_write+0x140>)
   8089a:	4798      	blx	r3
   8089c:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   8089e:	69bb      	ldr	r3, [r7, #24]
   808a0:	2106      	movs	r1, #6
   808a2:	4618      	mov	r0, r3
   808a4:	4b43      	ldr	r3, [pc, #268]	; (809b4 <flash_write+0x144>)
   808a6:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   808a8:	e071      	b.n	8098e <flash_write+0x11e>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   808aa:	8abb      	ldrh	r3, [r7, #20]
   808ac:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   808b0:	687b      	ldr	r3, [r7, #4]
   808b2:	4293      	cmp	r3, r2
   808b4:	bf28      	it	cs
   808b6:	4613      	movcs	r3, r2
   808b8:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   808ba:	69b8      	ldr	r0, [r7, #24]
   808bc:	8af9      	ldrh	r1, [r7, #22]
   808be:	f107 0310 	add.w	r3, r7, #16
   808c2:	2200      	movs	r2, #0
   808c4:	4c3c      	ldr	r4, [pc, #240]	; (809b8 <flash_write+0x148>)
   808c6:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   808c8:	8abb      	ldrh	r3, [r7, #20]
   808ca:	425b      	negs	r3, r3
   808cc:	b29a      	uxth	r2, r3
   808ce:	6a3b      	ldr	r3, [r7, #32]
   808d0:	b29b      	uxth	r3, r3
   808d2:	1ad3      	subs	r3, r2, r3
   808d4:	b29b      	uxth	r3, r3
   808d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
   808da:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   808dc:	693b      	ldr	r3, [r7, #16]
   808de:	4619      	mov	r1, r3
   808e0:	8abb      	ldrh	r3, [r7, #20]
   808e2:	461a      	mov	r2, r3
   808e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808e6:	4b35      	ldr	r3, [pc, #212]	; (809bc <flash_write+0x14c>)
   808e8:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808ea:	8abb      	ldrh	r3, [r7, #20]
   808ec:	461a      	mov	r2, r3
   808ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808f0:	4413      	add	r3, r2
   808f2:	6a3a      	ldr	r2, [r7, #32]
   808f4:	68b9      	ldr	r1, [r7, #8]
   808f6:	4618      	mov	r0, r3
   808f8:	4b30      	ldr	r3, [pc, #192]	; (809bc <flash_write+0x14c>)
   808fa:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808fc:	8abb      	ldrh	r3, [r7, #20]
   808fe:	461a      	mov	r2, r3
   80900:	6a3b      	ldr	r3, [r7, #32]
   80902:	4413      	add	r3, r2
   80904:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80906:	18d0      	adds	r0, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80908:	8abb      	ldrh	r3, [r7, #20]
   8090a:	461a      	mov	r2, r3
   8090c:	693b      	ldr	r3, [r7, #16]
   8090e:	441a      	add	r2, r3
   80910:	6a3b      	ldr	r3, [r7, #32]
   80912:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80914:	4619      	mov	r1, r3
   80916:	8bfb      	ldrh	r3, [r7, #30]
   80918:	461a      	mov	r2, r3
   8091a:	4b28      	ldr	r3, [pc, #160]	; (809bc <flash_write+0x14c>)
   8091c:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   8091e:	693b      	ldr	r3, [r7, #16]
   80920:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80922:	2300      	movs	r3, #0
   80924:	633b      	str	r3, [r7, #48]	; 0x30
   80926:	e00a      	b.n	8093e <flash_write+0xce>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8092a:	1d1a      	adds	r2, r3, #4
   8092c:	62fa      	str	r2, [r7, #44]	; 0x2c
   8092e:	491e      	ldr	r1, [pc, #120]	; (809a8 <flash_write+0x138>)
   80930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80936:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8093a:	3301      	adds	r3, #1
   8093c:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80940:	2b3f      	cmp	r3, #63	; 0x3f
   80942:	d9f1      	bls.n	80928 <flash_write+0xb8>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80944:	683b      	ldr	r3, [r7, #0]
   80946:	2b00      	cmp	r3, #0
   80948:	d007      	beq.n	8095a <flash_write+0xea>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8094a:	69bb      	ldr	r3, [r7, #24]
   8094c:	8afa      	ldrh	r2, [r7, #22]
   8094e:	2103      	movs	r1, #3
   80950:	4618      	mov	r0, r3
   80952:	4b1b      	ldr	r3, [pc, #108]	; (809c0 <flash_write+0x150>)
   80954:	4798      	blx	r3
   80956:	6378      	str	r0, [r7, #52]	; 0x34
   80958:	e006      	b.n	80968 <flash_write+0xf8>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8095a:	69bb      	ldr	r3, [r7, #24]
   8095c:	8afa      	ldrh	r2, [r7, #22]
   8095e:	2101      	movs	r1, #1
   80960:	4618      	mov	r0, r3
   80962:	4b17      	ldr	r3, [pc, #92]	; (809c0 <flash_write+0x150>)
   80964:	4798      	blx	r3
   80966:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8096a:	2b00      	cmp	r3, #0
   8096c:	d001      	beq.n	80972 <flash_write+0x102>
			return ul_error;
   8096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80970:	e016      	b.n	809a0 <flash_write+0x130>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80972:	68ba      	ldr	r2, [r7, #8]
   80974:	6a3b      	ldr	r3, [r7, #32]
   80976:	4413      	add	r3, r2
   80978:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8097a:	687a      	ldr	r2, [r7, #4]
   8097c:	6a3b      	ldr	r3, [r7, #32]
   8097e:	1ad3      	subs	r3, r2, r3
   80980:	607b      	str	r3, [r7, #4]
		us_page++;
   80982:	8afb      	ldrh	r3, [r7, #22]
   80984:	3301      	adds	r3, #1
   80986:	b29b      	uxth	r3, r3
   80988:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8098a:	2300      	movs	r3, #0
   8098c:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   8098e:	687b      	ldr	r3, [r7, #4]
   80990:	2b00      	cmp	r3, #0
   80992:	d18a      	bne.n	808aa <flash_write+0x3a>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80994:	69bb      	ldr	r3, [r7, #24]
   80996:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80998:	4618      	mov	r0, r3
   8099a:	4b06      	ldr	r3, [pc, #24]	; (809b4 <flash_write+0x144>)
   8099c:	4798      	blx	r3

	return FLASH_RC_OK;
   8099e:	2300      	movs	r3, #0
}
   809a0:	4618      	mov	r0, r3
   809a2:	373c      	adds	r7, #60	; 0x3c
   809a4:	46bd      	mov	sp, r7
   809a6:	bd90      	pop	{r4, r7, pc}
   809a8:	20071618 	.word	0x20071618
   809ac:	00080721 	.word	0x00080721
   809b0:	00080519 	.word	0x00080519
   809b4:	000804e5 	.word	0x000804e5
   809b8:	0008079d 	.word	0x0008079d
   809bc:	000a69f9 	.word	0x000a69f9
   809c0:	00080535 	.word	0x00080535

000809c4 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   809c4:	b590      	push	{r4, r7, lr}
   809c6:	b08b      	sub	sp, #44	; 0x2c
   809c8:	af00      	add	r7, sp, #0
   809ca:	60f8      	str	r0, [r7, #12]
   809cc:	60b9      	str	r1, [r7, #8]
   809ce:	607a      	str	r2, [r7, #4]
   809d0:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   809d2:	2340      	movs	r3, #64	; 0x40
   809d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   809d6:	f107 0314 	add.w	r3, r7, #20
   809da:	f107 0218 	add.w	r2, r7, #24
   809de:	68b9      	ldr	r1, [r7, #8]
   809e0:	68f8      	ldr	r0, [r7, #12]
   809e2:	4c1c      	ldr	r4, [pc, #112]	; (80a54 <flash_lock+0x90>)
   809e4:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809e6:	687b      	ldr	r3, [r7, #4]
   809e8:	2b00      	cmp	r3, #0
   809ea:	d002      	beq.n	809f2 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809ec:	69ba      	ldr	r2, [r7, #24]
   809ee:	687b      	ldr	r3, [r7, #4]
   809f0:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809f2:	683b      	ldr	r3, [r7, #0]
   809f4:	2b00      	cmp	r3, #0
   809f6:	d002      	beq.n	809fe <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809f8:	697a      	ldr	r2, [r7, #20]
   809fa:	683b      	ldr	r3, [r7, #0]
   809fc:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809fe:	69b9      	ldr	r1, [r7, #24]
   80a00:	f107 0212 	add.w	r2, r7, #18
   80a04:	f107 001c 	add.w	r0, r7, #28
   80a08:	2300      	movs	r3, #0
   80a0a:	4c13      	ldr	r4, [pc, #76]	; (80a58 <flash_lock+0x94>)
   80a0c:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a0e:	6979      	ldr	r1, [r7, #20]
   80a10:	f107 0210 	add.w	r2, r7, #16
   80a14:	2300      	movs	r3, #0
   80a16:	2000      	movs	r0, #0
   80a18:	4c0f      	ldr	r4, [pc, #60]	; (80a58 <flash_lock+0x94>)
   80a1a:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a1c:	e010      	b.n	80a40 <flash_lock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80a1e:	69fb      	ldr	r3, [r7, #28]
   80a20:	8a7a      	ldrh	r2, [r7, #18]
   80a22:	2108      	movs	r1, #8
   80a24:	4618      	mov	r0, r3
   80a26:	4b0d      	ldr	r3, [pc, #52]	; (80a5c <flash_lock+0x98>)
   80a28:	4798      	blx	r3
   80a2a:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80a2c:	6a3b      	ldr	r3, [r7, #32]
   80a2e:	2b00      	cmp	r3, #0
   80a30:	d001      	beq.n	80a36 <flash_lock+0x72>
			return ul_error;
   80a32:	6a3b      	ldr	r3, [r7, #32]
   80a34:	e009      	b.n	80a4a <flash_lock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80a36:	8a7a      	ldrh	r2, [r7, #18]
   80a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a3a:	4413      	add	r3, r2
   80a3c:	b29b      	uxth	r3, r3
   80a3e:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a40:	8a7a      	ldrh	r2, [r7, #18]
   80a42:	8a3b      	ldrh	r3, [r7, #16]
   80a44:	429a      	cmp	r2, r3
   80a46:	d3ea      	bcc.n	80a1e <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a48:	2300      	movs	r3, #0
}
   80a4a:	4618      	mov	r0, r3
   80a4c:	372c      	adds	r7, #44	; 0x2c
   80a4e:	46bd      	mov	sp, r7
   80a50:	bd90      	pop	{r4, r7, pc}
   80a52:	bf00      	nop
   80a54:	000807ed 	.word	0x000807ed
   80a58:	00080721 	.word	0x00080721
   80a5c:	00080535 	.word	0x00080535

00080a60 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a60:	b590      	push	{r4, r7, lr}
   80a62:	b08b      	sub	sp, #44	; 0x2c
   80a64:	af00      	add	r7, sp, #0
   80a66:	60f8      	str	r0, [r7, #12]
   80a68:	60b9      	str	r1, [r7, #8]
   80a6a:	607a      	str	r2, [r7, #4]
   80a6c:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a6e:	2340      	movs	r3, #64	; 0x40
   80a70:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a72:	f107 0314 	add.w	r3, r7, #20
   80a76:	f107 0218 	add.w	r2, r7, #24
   80a7a:	68b9      	ldr	r1, [r7, #8]
   80a7c:	68f8      	ldr	r0, [r7, #12]
   80a7e:	4c1c      	ldr	r4, [pc, #112]	; (80af0 <flash_unlock+0x90>)
   80a80:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a82:	687b      	ldr	r3, [r7, #4]
   80a84:	2b00      	cmp	r3, #0
   80a86:	d002      	beq.n	80a8e <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a88:	69ba      	ldr	r2, [r7, #24]
   80a8a:	687b      	ldr	r3, [r7, #4]
   80a8c:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a8e:	683b      	ldr	r3, [r7, #0]
   80a90:	2b00      	cmp	r3, #0
   80a92:	d002      	beq.n	80a9a <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a94:	697a      	ldr	r2, [r7, #20]
   80a96:	683b      	ldr	r3, [r7, #0]
   80a98:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80a9a:	69b9      	ldr	r1, [r7, #24]
   80a9c:	f107 0212 	add.w	r2, r7, #18
   80aa0:	f107 001c 	add.w	r0, r7, #28
   80aa4:	2300      	movs	r3, #0
   80aa6:	4c13      	ldr	r4, [pc, #76]	; (80af4 <flash_unlock+0x94>)
   80aa8:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80aaa:	6979      	ldr	r1, [r7, #20]
   80aac:	f107 0210 	add.w	r2, r7, #16
   80ab0:	2300      	movs	r3, #0
   80ab2:	2000      	movs	r0, #0
   80ab4:	4c0f      	ldr	r4, [pc, #60]	; (80af4 <flash_unlock+0x94>)
   80ab6:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80ab8:	e010      	b.n	80adc <flash_unlock+0x7c>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80aba:	69fb      	ldr	r3, [r7, #28]
   80abc:	8a7a      	ldrh	r2, [r7, #18]
   80abe:	2109      	movs	r1, #9
   80ac0:	4618      	mov	r0, r3
   80ac2:	4b0d      	ldr	r3, [pc, #52]	; (80af8 <flash_unlock+0x98>)
   80ac4:	4798      	blx	r3
   80ac6:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80ac8:	6a3b      	ldr	r3, [r7, #32]
   80aca:	2b00      	cmp	r3, #0
   80acc:	d001      	beq.n	80ad2 <flash_unlock+0x72>
			return ul_error;
   80ace:	6a3b      	ldr	r3, [r7, #32]
   80ad0:	e009      	b.n	80ae6 <flash_unlock+0x86>
		}
		us_start_page += us_num_pages_in_region;
   80ad2:	8a7a      	ldrh	r2, [r7, #18]
   80ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80ad6:	4413      	add	r3, r2
   80ad8:	b29b      	uxth	r3, r3
   80ada:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80adc:	8a7a      	ldrh	r2, [r7, #18]
   80ade:	8a3b      	ldrh	r3, [r7, #16]
   80ae0:	429a      	cmp	r2, r3
   80ae2:	d3ea      	bcc.n	80aba <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80ae4:	2300      	movs	r3, #0
}
   80ae6:	4618      	mov	r0, r3
   80ae8:	372c      	adds	r7, #44	; 0x2c
   80aea:	46bd      	mov	sp, r7
   80aec:	bd90      	pop	{r4, r7, pc}
   80aee:	bf00      	nop
   80af0:	000807ed 	.word	0x000807ed
   80af4:	00080721 	.word	0x00080721
   80af8:	00080535 	.word	0x00080535

00080afc <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80afc:	b580      	push	{r7, lr}
   80afe:	b082      	sub	sp, #8
   80b00:	af00      	add	r7, sp, #0
   80b02:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b04:	687b      	ldr	r3, [r7, #4]
   80b06:	2b02      	cmp	r3, #2
   80b08:	d901      	bls.n	80b0e <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80b0a:	2311      	movs	r3, #17
   80b0c:	e012      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80b0e:	6878      	ldr	r0, [r7, #4]
   80b10:	4b0a      	ldr	r3, [pc, #40]	; (80b3c <flash_set_gpnvm+0x40>)
   80b12:	4798      	blx	r3
   80b14:	4603      	mov	r3, r0
   80b16:	2b01      	cmp	r3, #1
   80b18:	d101      	bne.n	80b1e <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80b1a:	2300      	movs	r3, #0
   80b1c:	e00a      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80b1e:	687a      	ldr	r2, [r7, #4]
   80b20:	210b      	movs	r1, #11
   80b22:	4807      	ldr	r0, [pc, #28]	; (80b40 <flash_set_gpnvm+0x44>)
   80b24:	4b07      	ldr	r3, [pc, #28]	; (80b44 <flash_set_gpnvm+0x48>)
   80b26:	4798      	blx	r3
   80b28:	4603      	mov	r3, r0
   80b2a:	2b00      	cmp	r3, #0
   80b2c:	d101      	bne.n	80b32 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b2e:	2300      	movs	r3, #0
   80b30:	e000      	b.n	80b34 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b32:	2310      	movs	r3, #16
}
   80b34:	4618      	mov	r0, r3
   80b36:	3708      	adds	r7, #8
   80b38:	46bd      	mov	sp, r7
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080b49 	.word	0x00080b49
   80b40:	400e0a00 	.word	0x400e0a00
   80b44:	00080535 	.word	0x00080535

00080b48 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b48:	b580      	push	{r7, lr}
   80b4a:	b084      	sub	sp, #16
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b50:	687b      	ldr	r3, [r7, #4]
   80b52:	2b02      	cmp	r3, #2
   80b54:	d901      	bls.n	80b5a <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b56:	2311      	movs	r3, #17
   80b58:	e019      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b5a:	2200      	movs	r2, #0
   80b5c:	210d      	movs	r1, #13
   80b5e:	480e      	ldr	r0, [pc, #56]	; (80b98 <flash_is_gpnvm_set+0x50>)
   80b60:	4b0e      	ldr	r3, [pc, #56]	; (80b9c <flash_is_gpnvm_set+0x54>)
   80b62:	4798      	blx	r3
   80b64:	4603      	mov	r3, r0
   80b66:	2b00      	cmp	r3, #0
   80b68:	d001      	beq.n	80b6e <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b6a:	2310      	movs	r3, #16
   80b6c:	e00f      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b6e:	480a      	ldr	r0, [pc, #40]	; (80b98 <flash_is_gpnvm_set+0x50>)
   80b70:	4b0b      	ldr	r3, [pc, #44]	; (80ba0 <flash_is_gpnvm_set+0x58>)
   80b72:	4798      	blx	r3
   80b74:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b76:	2201      	movs	r2, #1
   80b78:	687b      	ldr	r3, [r7, #4]
   80b7a:	fa02 f303 	lsl.w	r3, r2, r3
   80b7e:	461a      	mov	r2, r3
   80b80:	68fb      	ldr	r3, [r7, #12]
   80b82:	4013      	ands	r3, r2
   80b84:	2b00      	cmp	r3, #0
   80b86:	d001      	beq.n	80b8c <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b88:	2301      	movs	r3, #1
   80b8a:	e000      	b.n	80b8e <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b8c:	2300      	movs	r3, #0
}
   80b8e:	4618      	mov	r0, r3
   80b90:	3710      	adds	r7, #16
   80b92:	46bd      	mov	sp, r7
   80b94:	bd80      	pop	{r7, pc}
   80b96:	bf00      	nop
   80b98:	400e0a00 	.word	0x400e0a00
   80b9c:	00080535 	.word	0x00080535
   80ba0:	000805a9 	.word	0x000805a9

00080ba4 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80ba4:	b580      	push	{r7, lr}
   80ba6:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80ba8:	2000      	movs	r0, #0
   80baa:	4b02      	ldr	r3, [pc, #8]	; (80bb4 <flash_enable_security_bit+0x10>)
   80bac:	4798      	blx	r3
   80bae:	4603      	mov	r3, r0
}
   80bb0:	4618      	mov	r0, r3
   80bb2:	bd80      	pop	{r7, pc}
   80bb4:	00080afd 	.word	0x00080afd

00080bb8 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80bb8:	b580      	push	{r7, lr}
   80bba:	b082      	sub	sp, #8
   80bbc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80bbe:	2304      	movs	r3, #4
   80bc0:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80bc2:	4b10      	ldr	r3, [pc, #64]	; (80c04 <Cl_Init_Alarms+0x4c>)
   80bc4:	4798      	blx	r3
   80bc6:	4603      	mov	r3, r0
   80bc8:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bca:	79fb      	ldrb	r3, [r7, #7]
   80bcc:	2b00      	cmp	r3, #0
   80bce:	d001      	beq.n	80bd4 <Cl_Init_Alarms+0x1c>
   80bd0:	4b0d      	ldr	r3, [pc, #52]	; (80c08 <Cl_Init_Alarms+0x50>)
   80bd2:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80bd4:	4b0d      	ldr	r3, [pc, #52]	; (80c0c <Cl_Init_Alarms+0x54>)
   80bd6:	4798      	blx	r3
   80bd8:	4603      	mov	r3, r0
   80bda:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bdc:	79fb      	ldrb	r3, [r7, #7]
   80bde:	2b00      	cmp	r3, #0
   80be0:	d001      	beq.n	80be6 <Cl_Init_Alarms+0x2e>
   80be2:	4b09      	ldr	r3, [pc, #36]	; (80c08 <Cl_Init_Alarms+0x50>)
   80be4:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80be6:	4b0a      	ldr	r3, [pc, #40]	; (80c10 <Cl_Init_Alarms+0x58>)
   80be8:	4798      	blx	r3
   80bea:	4603      	mov	r3, r0
   80bec:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bee:	79fb      	ldrb	r3, [r7, #7]
   80bf0:	2b00      	cmp	r3, #0
   80bf2:	d001      	beq.n	80bf8 <Cl_Init_Alarms+0x40>
   80bf4:	4b04      	ldr	r3, [pc, #16]	; (80c08 <Cl_Init_Alarms+0x50>)
   80bf6:	4798      	blx	r3
	return CL_OK;
   80bf8:	2300      	movs	r3, #0
	
}
   80bfa:	4618      	mov	r0, r3
   80bfc:	3708      	adds	r7, #8
   80bfe:	46bd      	mov	sp, r7
   80c00:	bd80      	pop	{r7, pc}
   80c02:	bf00      	nop
   80c04:	00080c15 	.word	0x00080c15
   80c08:	00088e75 	.word	0x00088e75
   80c0c:	000900a5 	.word	0x000900a5
   80c10:	0008fbe5 	.word	0x0008fbe5

00080c14 <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80c14:	b480      	push	{r7}
   80c16:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 13.0;
   80c18:	4b3b      	ldr	r3, [pc, #236]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c1a:	220d      	movs	r2, #13
   80c1c:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 14.5;
   80c1e:	4b3a      	ldr	r3, [pc, #232]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c20:	220e      	movs	r2, #14
   80c22:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80c24:	4b38      	ldr	r3, [pc, #224]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c26:	2200      	movs	r2, #0
   80c28:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80c2a:	4b37      	ldr	r3, [pc, #220]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c2c:	f242 7210 	movw	r2, #10000	; 0x2710
   80c30:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80c32:	4b35      	ldr	r3, [pc, #212]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c34:	4a35      	ldr	r2, [pc, #212]	; (80d0c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c36:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80c38:	4b33      	ldr	r3, [pc, #204]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c3a:	4a35      	ldr	r2, [pc, #212]	; (80d10 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c3c:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80c3e:	4b32      	ldr	r3, [pc, #200]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c40:	4a32      	ldr	r2, [pc, #200]	; (80d0c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c42:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80c44:	4b30      	ldr	r3, [pc, #192]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c46:	4a32      	ldr	r2, [pc, #200]	; (80d10 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c48:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80c4a:	4b2f      	ldr	r3, [pc, #188]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c4c:	4a31      	ldr	r2, [pc, #196]	; (80d14 <Cl_LoadAlarmThresholdTable+0x100>)
   80c4e:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80c50:	4b2d      	ldr	r3, [pc, #180]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c52:	4a31      	ldr	r2, [pc, #196]	; (80d18 <Cl_LoadAlarmThresholdTable+0x104>)
   80c54:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80c56:	4b2c      	ldr	r3, [pc, #176]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c58:	4a2e      	ldr	r2, [pc, #184]	; (80d14 <Cl_LoadAlarmThresholdTable+0x100>)
   80c5a:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80c5c:	4b2a      	ldr	r3, [pc, #168]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c5e:	4a2c      	ldr	r2, [pc, #176]	; (80d10 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c60:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1000;
   80c62:	4b29      	ldr	r3, [pc, #164]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c64:	4a2d      	ldr	r2, [pc, #180]	; (80d1c <Cl_LoadAlarmThresholdTable+0x108>)
   80c66:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c68:	4b27      	ldr	r3, [pc, #156]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c6a:	4a29      	ldr	r2, [pc, #164]	; (80d10 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c6c:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80c6e:	4b26      	ldr	r3, [pc, #152]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c70:	4a2b      	ldr	r2, [pc, #172]	; (80d20 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c72:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80c74:	4b24      	ldr	r3, [pc, #144]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c76:	4a2b      	ldr	r2, [pc, #172]	; (80d24 <Cl_LoadAlarmThresholdTable+0x110>)
   80c78:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80c7a:	4b23      	ldr	r3, [pc, #140]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c7c:	4a2a      	ldr	r2, [pc, #168]	; (80d28 <Cl_LoadAlarmThresholdTable+0x114>)
   80c7e:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80c80:	4b21      	ldr	r3, [pc, #132]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c82:	4a28      	ldr	r2, [pc, #160]	; (80d24 <Cl_LoadAlarmThresholdTable+0x110>)
   80c84:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 80;
   80c86:	4b20      	ldr	r3, [pc, #128]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c88:	4a27      	ldr	r2, [pc, #156]	; (80d28 <Cl_LoadAlarmThresholdTable+0x114>)
   80c8a:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 25;
   80c8c:	4b1e      	ldr	r3, [pc, #120]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c8e:	4a25      	ldr	r2, [pc, #148]	; (80d24 <Cl_LoadAlarmThresholdTable+0x110>)
   80c90:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80c92:	4b1d      	ldr	r3, [pc, #116]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c94:	4a25      	ldr	r2, [pc, #148]	; (80d2c <Cl_LoadAlarmThresholdTable+0x118>)
   80c96:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80c98:	4b1b      	ldr	r3, [pc, #108]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80c9a:	f242 7210 	movw	r2, #10000	; 0x2710
   80c9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80ca2:	4b19      	ldr	r3, [pc, #100]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80ca4:	2200      	movs	r2, #0
   80ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80caa:	4b17      	ldr	r3, [pc, #92]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cac:	f242 7210 	movw	r2, #10000	; 0x2710
   80cb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80cb4:	4b14      	ldr	r3, [pc, #80]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cb6:	2200      	movs	r2, #0
   80cb8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80cbc:	4b12      	ldr	r3, [pc, #72]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cbe:	f242 7210 	movw	r2, #10000	; 0x2710
   80cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80cc6:	4b10      	ldr	r3, [pc, #64]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cc8:	2200      	movs	r2, #0
   80cca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80cce:	4b0e      	ldr	r3, [pc, #56]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cd0:	2205      	movs	r2, #5
   80cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80cd6:	4b0c      	ldr	r3, [pc, #48]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cd8:	2214      	movs	r2, #20
   80cda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80cde:	4b0a      	ldr	r3, [pc, #40]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80ce0:	221e      	movs	r2, #30
   80ce2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80ce6:	4b08      	ldr	r3, [pc, #32]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80ce8:	2205      	movs	r2, #5
   80cea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80cee:	4b06      	ldr	r3, [pc, #24]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cf0:	221e      	movs	r2, #30
   80cf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <Cl_LoadAlarmThresholdTable+0xf4>)
   80cf8:	2205      	movs	r2, #5
   80cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		
		return CL_OK ;
   80cfe:	2300      	movs	r3, #0
}
   80d00:	4618      	mov	r0, r3
   80d02:	46bd      	mov	sp, r7
   80d04:	bc80      	pop	{r7}
   80d06:	4770      	bx	lr
   80d08:	200720f4 	.word	0x200720f4
   80d0c:	43fa0000 	.word	0x43fa0000
   80d10:	c3960000 	.word	0xc3960000
   80d14:	43c80000 	.word	0x43c80000
   80d18:	c3480000 	.word	0xc3480000
   80d1c:	447a0000 	.word	0x447a0000
   80d20:	42140000 	.word	0x42140000
   80d24:	41c80000 	.word	0x41c80000
   80d28:	42a00000 	.word	0x42a00000
   80d2c:	42340000 	.word	0x42340000

00080d30 <Cl_Alarm_translate_sensor_values>:
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
  
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void)
{							
   80d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   80d32:	b08b      	sub	sp, #44	; 0x2c
   80d34:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80d36:	2304      	movs	r3, #4
   80d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float temp;
	Cl_Uint16Type sensordata = 0;
   80d3c:	2300      	movs	r3, #0
   80d3e:	80fb      	strh	r3, [r7, #6]
	{
		ps3 = prev_ps3val;
	}
	#endif
	
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80d40:	4b99      	ldr	r3, [pc, #612]	; (80fa8 <Cl_Alarm_translate_sensor_values+0x278>)
   80d42:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80d44:	461a      	mov	r2, r3
   80d46:	f640 43e4 	movw	r3, #3300	; 0xce4
   80d4a:	fb03 f302 	mul.w	r3, r3, r2
   80d4e:	2b00      	cmp	r3, #0
   80d50:	da01      	bge.n	80d56 <Cl_Alarm_translate_sensor_values+0x26>
   80d52:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80d56:	131b      	asrs	r3, r3, #12
   80d58:	461a      	mov	r2, r3
   80d5a:	4b94      	ldr	r3, [pc, #592]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80d5c:	4610      	mov	r0, r2
   80d5e:	4798      	blx	r3
   80d60:	4603      	mov	r3, r0
   80d62:	623b      	str	r3, [r7, #32]
	calibration_ps1(temp);
   80d64:	4b92      	ldr	r3, [pc, #584]	; (80fb0 <Cl_Alarm_translate_sensor_values+0x280>)
   80d66:	6a38      	ldr	r0, [r7, #32]
   80d68:	4798      	blx	r3
   80d6a:	4603      	mov	r3, r0
   80d6c:	b21b      	sxth	r3, r3
   80d6e:	4618      	mov	r0, r3
   80d70:	4b90      	ldr	r3, [pc, #576]	; (80fb4 <Cl_Alarm_translate_sensor_values+0x284>)
   80d72:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS1STATUS].test_flag == true)
   80d74:	4b90      	ldr	r3, [pc, #576]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80d76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80d7a:	2b00      	cmp	r3, #0
   80d7c:	d017      	beq.n	80dae <Cl_Alarm_translate_sensor_values+0x7e>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS1",5);
   80d7e:	2205      	movs	r2, #5
   80d80:	498e      	ldr	r1, [pc, #568]	; (80fbc <Cl_Alarm_translate_sensor_values+0x28c>)
   80d82:	2018      	movs	r0, #24
   80d84:	4b8e      	ldr	r3, [pc, #568]	; (80fc0 <Cl_Alarm_translate_sensor_values+0x290>)
   80d86:	4798      	blx	r3
   80d88:	4603      	mov	r3, r0
   80d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80d92:	2b00      	cmp	r3, #0
   80d94:	d001      	beq.n	80d9a <Cl_Alarm_translate_sensor_values+0x6a>
   80d96:	4b8b      	ldr	r3, [pc, #556]	; (80fc4 <Cl_Alarm_translate_sensor_values+0x294>)
   80d98:	4798      	blx	r3
		ps1 =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   80d9a:	4b87      	ldr	r3, [pc, #540]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80d9c:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
   80da0:	4b82      	ldr	r3, [pc, #520]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80da2:	4610      	mov	r0, r2
   80da4:	4798      	blx	r3
   80da6:	4602      	mov	r2, r0
   80da8:	4b87      	ldr	r3, [pc, #540]	; (80fc8 <Cl_Alarm_translate_sensor_values+0x298>)
   80daa:	601a      	str	r2, [r3, #0]
   80dac:	e038      	b.n	80e20 <Cl_Alarm_translate_sensor_values+0xf0>
	else
	{
		
		//ps1 = ((ps1* 49) + pressure_final_ps1)/50;
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   80dae:	1d3b      	adds	r3, r7, #4
   80db0:	4619      	mov	r1, r3
   80db2:	200e      	movs	r0, #14
   80db4:	4b85      	ldr	r3, [pc, #532]	; (80fcc <Cl_Alarm_translate_sensor_values+0x29c>)
   80db6:	4798      	blx	r3

		if (Ps1 >32268)
   80db8:	88bb      	ldrh	r3, [r7, #4]
   80dba:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80dbe:	4293      	cmp	r3, r2
   80dc0:	d909      	bls.n	80dd6 <Cl_Alarm_translate_sensor_values+0xa6>
		{
			ps1 = (65536 - Ps1) *(-1);
   80dc2:	88bb      	ldrh	r3, [r7, #4]
   80dc4:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80dc8:	4b78      	ldr	r3, [pc, #480]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80dca:	4610      	mov	r0, r2
   80dcc:	4798      	blx	r3
   80dce:	4602      	mov	r2, r0
   80dd0:	4b7d      	ldr	r3, [pc, #500]	; (80fc8 <Cl_Alarm_translate_sensor_values+0x298>)
   80dd2:	601a      	str	r2, [r3, #0]
   80dd4:	e006      	b.n	80de4 <Cl_Alarm_translate_sensor_values+0xb4>
		}
		else
		ps1 = (float)Ps1;
   80dd6:	88ba      	ldrh	r2, [r7, #4]
   80dd8:	4b7d      	ldr	r3, [pc, #500]	; (80fd0 <Cl_Alarm_translate_sensor_values+0x2a0>)
   80dda:	4610      	mov	r0, r2
   80ddc:	4798      	blx	r3
   80dde:	4602      	mov	r2, r0
   80de0:	4b79      	ldr	r3, [pc, #484]	; (80fc8 <Cl_Alarm_translate_sensor_values+0x298>)
   80de2:	601a      	str	r2, [r3, #0]
		
		ps1 = (0.091009 * ps1) + 491.794;
   80de4:	4b78      	ldr	r3, [pc, #480]	; (80fc8 <Cl_Alarm_translate_sensor_values+0x298>)
   80de6:	681a      	ldr	r2, [r3, #0]
   80de8:	4b7a      	ldr	r3, [pc, #488]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x2a4>)
   80dea:	4610      	mov	r0, r2
   80dec:	4798      	blx	r3
   80dee:	4c7a      	ldr	r4, [pc, #488]	; (80fd8 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80df0:	a369      	add	r3, pc, #420	; (adr r3, 80f98 <Cl_Alarm_translate_sensor_values+0x268>)
   80df2:	e9d3 2300 	ldrd	r2, r3, [r3]
   80df6:	47a0      	blx	r4
   80df8:	4603      	mov	r3, r0
   80dfa:	460c      	mov	r4, r1
   80dfc:	4618      	mov	r0, r3
   80dfe:	4621      	mov	r1, r4
   80e00:	4c76      	ldr	r4, [pc, #472]	; (80fdc <Cl_Alarm_translate_sensor_values+0x2ac>)
   80e02:	a367      	add	r3, pc, #412	; (adr r3, 80fa0 <Cl_Alarm_translate_sensor_values+0x270>)
   80e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e08:	47a0      	blx	r4
   80e0a:	4603      	mov	r3, r0
   80e0c:	460c      	mov	r4, r1
   80e0e:	4619      	mov	r1, r3
   80e10:	4622      	mov	r2, r4
   80e12:	4b73      	ldr	r3, [pc, #460]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x2b0>)
   80e14:	4608      	mov	r0, r1
   80e16:	4611      	mov	r1, r2
   80e18:	4798      	blx	r3
   80e1a:	4602      	mov	r2, r0
   80e1c:	4b6a      	ldr	r3, [pc, #424]	; (80fc8 <Cl_Alarm_translate_sensor_values+0x298>)
   80e1e:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80e20:	4b61      	ldr	r3, [pc, #388]	; (80fa8 <Cl_Alarm_translate_sensor_values+0x278>)
   80e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80e24:	461a      	mov	r2, r3
   80e26:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e2a:	fb03 f302 	mul.w	r3, r3, r2
   80e2e:	2b00      	cmp	r3, #0
   80e30:	da01      	bge.n	80e36 <Cl_Alarm_translate_sensor_values+0x106>
   80e32:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e36:	131b      	asrs	r3, r3, #12
   80e38:	461a      	mov	r2, r3
   80e3a:	4b5c      	ldr	r3, [pc, #368]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80e3c:	4610      	mov	r0, r2
   80e3e:	4798      	blx	r3
   80e40:	4603      	mov	r3, r0
   80e42:	623b      	str	r3, [r7, #32]
	calibration_ps2(temp);
   80e44:	4b5a      	ldr	r3, [pc, #360]	; (80fb0 <Cl_Alarm_translate_sensor_values+0x280>)
   80e46:	6a38      	ldr	r0, [r7, #32]
   80e48:	4798      	blx	r3
   80e4a:	4603      	mov	r3, r0
   80e4c:	b21b      	sxth	r3, r3
   80e4e:	4618      	mov	r0, r3
   80e50:	4b64      	ldr	r3, [pc, #400]	; (80fe4 <Cl_Alarm_translate_sensor_values+0x2b4>)
   80e52:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS2STATUS].test_flag == true)
   80e54:	4b58      	ldr	r3, [pc, #352]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80e5a:	2b00      	cmp	r3, #0
   80e5c:	d017      	beq.n	80e8e <Cl_Alarm_translate_sensor_values+0x15e>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS2",5);
   80e5e:	2205      	movs	r2, #5
   80e60:	4961      	ldr	r1, [pc, #388]	; (80fe8 <Cl_Alarm_translate_sensor_values+0x2b8>)
   80e62:	2018      	movs	r0, #24
   80e64:	4b56      	ldr	r3, [pc, #344]	; (80fc0 <Cl_Alarm_translate_sensor_values+0x290>)
   80e66:	4798      	blx	r3
   80e68:	4603      	mov	r3, r0
   80e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80e72:	2b00      	cmp	r3, #0
   80e74:	d001      	beq.n	80e7a <Cl_Alarm_translate_sensor_values+0x14a>
   80e76:	4b53      	ldr	r3, [pc, #332]	; (80fc4 <Cl_Alarm_translate_sensor_values+0x294>)
   80e78:	4798      	blx	r3
		ps2 =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   80e7a:	4b4f      	ldr	r3, [pc, #316]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80e7c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   80e80:	4b4a      	ldr	r3, [pc, #296]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80e82:	4610      	mov	r0, r2
   80e84:	4798      	blx	r3
   80e86:	4602      	mov	r2, r0
   80e88:	4b58      	ldr	r3, [pc, #352]	; (80fec <Cl_Alarm_translate_sensor_values+0x2bc>)
   80e8a:	601a      	str	r2, [r3, #0]
   80e8c:	e038      	b.n	80f00 <Cl_Alarm_translate_sensor_values+0x1d0>
		
	}
	else
	{
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps2);
   80e8e:	1cbb      	adds	r3, r7, #2
   80e90:	4619      	mov	r1, r3
   80e92:	200e      	movs	r0, #14
   80e94:	4b4d      	ldr	r3, [pc, #308]	; (80fcc <Cl_Alarm_translate_sensor_values+0x29c>)
   80e96:	4798      	blx	r3

		if (Ps2 >32268)
   80e98:	887b      	ldrh	r3, [r7, #2]
   80e9a:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80e9e:	4293      	cmp	r3, r2
   80ea0:	d909      	bls.n	80eb6 <Cl_Alarm_translate_sensor_values+0x186>
		{
			ps2 = (65536 - Ps2) *(-1);
   80ea2:	887b      	ldrh	r3, [r7, #2]
   80ea4:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80ea8:	4b40      	ldr	r3, [pc, #256]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80eaa:	4610      	mov	r0, r2
   80eac:	4798      	blx	r3
   80eae:	4602      	mov	r2, r0
   80eb0:	4b4e      	ldr	r3, [pc, #312]	; (80fec <Cl_Alarm_translate_sensor_values+0x2bc>)
   80eb2:	601a      	str	r2, [r3, #0]
   80eb4:	e006      	b.n	80ec4 <Cl_Alarm_translate_sensor_values+0x194>
		}
		else
		ps2 = (float)Ps2;
   80eb6:	887a      	ldrh	r2, [r7, #2]
   80eb8:	4b45      	ldr	r3, [pc, #276]	; (80fd0 <Cl_Alarm_translate_sensor_values+0x2a0>)
   80eba:	4610      	mov	r0, r2
   80ebc:	4798      	blx	r3
   80ebe:	4602      	mov	r2, r0
   80ec0:	4b4a      	ldr	r3, [pc, #296]	; (80fec <Cl_Alarm_translate_sensor_values+0x2bc>)
   80ec2:	601a      	str	r2, [r3, #0]
		
		ps2 = (0.091009 * ps2) + 491.794;
   80ec4:	4b49      	ldr	r3, [pc, #292]	; (80fec <Cl_Alarm_translate_sensor_values+0x2bc>)
   80ec6:	681a      	ldr	r2, [r3, #0]
   80ec8:	4b42      	ldr	r3, [pc, #264]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x2a4>)
   80eca:	4610      	mov	r0, r2
   80ecc:	4798      	blx	r3
   80ece:	4c42      	ldr	r4, [pc, #264]	; (80fd8 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80ed0:	a331      	add	r3, pc, #196	; (adr r3, 80f98 <Cl_Alarm_translate_sensor_values+0x268>)
   80ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ed6:	47a0      	blx	r4
   80ed8:	4603      	mov	r3, r0
   80eda:	460c      	mov	r4, r1
   80edc:	4618      	mov	r0, r3
   80ede:	4621      	mov	r1, r4
   80ee0:	4c3e      	ldr	r4, [pc, #248]	; (80fdc <Cl_Alarm_translate_sensor_values+0x2ac>)
   80ee2:	a32f      	add	r3, pc, #188	; (adr r3, 80fa0 <Cl_Alarm_translate_sensor_values+0x270>)
   80ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ee8:	47a0      	blx	r4
   80eea:	4603      	mov	r3, r0
   80eec:	460c      	mov	r4, r1
   80eee:	4619      	mov	r1, r3
   80ef0:	4622      	mov	r2, r4
   80ef2:	4b3b      	ldr	r3, [pc, #236]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x2b0>)
   80ef4:	4608      	mov	r0, r1
   80ef6:	4611      	mov	r1, r2
   80ef8:	4798      	blx	r3
   80efa:	4602      	mov	r2, r0
   80efc:	4b3b      	ldr	r3, [pc, #236]	; (80fec <Cl_Alarm_translate_sensor_values+0x2bc>)
   80efe:	601a      	str	r2, [r3, #0]
		
		//ps2 = ((ps2* 49) + pressure_final_ps2)/50;
	}
	
	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80f00:	4b29      	ldr	r3, [pc, #164]	; (80fa8 <Cl_Alarm_translate_sensor_values+0x278>)
   80f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80f04:	461a      	mov	r2, r3
   80f06:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f0a:	fb03 f302 	mul.w	r3, r3, r2
   80f0e:	2b00      	cmp	r3, #0
   80f10:	da01      	bge.n	80f16 <Cl_Alarm_translate_sensor_values+0x1e6>
   80f12:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f16:	131b      	asrs	r3, r3, #12
   80f18:	461a      	mov	r2, r3
   80f1a:	4b24      	ldr	r3, [pc, #144]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80f1c:	4610      	mov	r0, r2
   80f1e:	4798      	blx	r3
   80f20:	4603      	mov	r3, r0
   80f22:	623b      	str	r3, [r7, #32]
	calibration_ps3(temp);
   80f24:	4b22      	ldr	r3, [pc, #136]	; (80fb0 <Cl_Alarm_translate_sensor_values+0x280>)
   80f26:	6a38      	ldr	r0, [r7, #32]
   80f28:	4798      	blx	r3
   80f2a:	4603      	mov	r3, r0
   80f2c:	b21b      	sxth	r3, r3
   80f2e:	4618      	mov	r0, r3
   80f30:	4b2f      	ldr	r3, [pc, #188]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2c0>)
   80f32:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS3STATUS].test_flag == true)
   80f34:	4b20      	ldr	r3, [pc, #128]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80f36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80f3a:	2b00      	cmp	r3, #0
   80f3c:	d017      	beq.n	80f6e <Cl_Alarm_translate_sensor_values+0x23e>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS3",5);
   80f3e:	2205      	movs	r2, #5
   80f40:	492c      	ldr	r1, [pc, #176]	; (80ff4 <Cl_Alarm_translate_sensor_values+0x2c4>)
   80f42:	2018      	movs	r0, #24
   80f44:	4b1e      	ldr	r3, [pc, #120]	; (80fc0 <Cl_Alarm_translate_sensor_values+0x290>)
   80f46:	4798      	blx	r3
   80f48:	4603      	mov	r3, r0
   80f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80f52:	2b00      	cmp	r3, #0
   80f54:	d001      	beq.n	80f5a <Cl_Alarm_translate_sensor_values+0x22a>
   80f56:	4b1b      	ldr	r3, [pc, #108]	; (80fc4 <Cl_Alarm_translate_sensor_values+0x294>)
   80f58:	4798      	blx	r3
		ps3 =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;			
   80f5a:	4b17      	ldr	r3, [pc, #92]	; (80fb8 <Cl_Alarm_translate_sensor_values+0x288>)
   80f5c:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   80f60:	4b12      	ldr	r3, [pc, #72]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80f62:	4610      	mov	r0, r2
   80f64:	4798      	blx	r3
   80f66:	4602      	mov	r2, r0
   80f68:	4b23      	ldr	r3, [pc, #140]	; (80ff8 <Cl_Alarm_translate_sensor_values+0x2c8>)
   80f6a:	601a      	str	r2, [r3, #0]
   80f6c:	e06b      	b.n	81046 <Cl_Alarm_translate_sensor_values+0x316>
	}
	else
	{
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps3);
   80f6e:	463b      	mov	r3, r7
   80f70:	4619      	mov	r1, r3
   80f72:	200e      	movs	r0, #14
   80f74:	4b15      	ldr	r3, [pc, #84]	; (80fcc <Cl_Alarm_translate_sensor_values+0x29c>)
   80f76:	4798      	blx	r3

		if (Ps3 >32268)
   80f78:	883b      	ldrh	r3, [r7, #0]
   80f7a:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80f7e:	4293      	cmp	r3, r2
   80f80:	d93c      	bls.n	80ffc <Cl_Alarm_translate_sensor_values+0x2cc>
		{
			ps3 = (65536 - Ps3) *(-1);
   80f82:	883b      	ldrh	r3, [r7, #0]
   80f84:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80f88:	4b08      	ldr	r3, [pc, #32]	; (80fac <Cl_Alarm_translate_sensor_values+0x27c>)
   80f8a:	4610      	mov	r0, r2
   80f8c:	4798      	blx	r3
   80f8e:	4602      	mov	r2, r0
   80f90:	4b19      	ldr	r3, [pc, #100]	; (80ff8 <Cl_Alarm_translate_sensor_values+0x2c8>)
   80f92:	601a      	str	r2, [r3, #0]
   80f94:	e039      	b.n	8100a <Cl_Alarm_translate_sensor_values+0x2da>
   80f96:	bf00      	nop
   80f98:	a6a44418 	.word	0xa6a44418
   80f9c:	3fb74c5d 	.word	0x3fb74c5d
   80fa0:	39581062 	.word	0x39581062
   80fa4:	407ebcb4 	.word	0x407ebcb4
   80fa8:	2007221c 	.word	0x2007221c
   80fac:	000a64e9 	.word	0x000a64e9
   80fb0:	000a691d 	.word	0x000a691d
   80fb4:	000843b9 	.word	0x000843b9
   80fb8:	200725b8 	.word	0x200725b8
   80fbc:	000a8554 	.word	0x000a8554
   80fc0:	0009b805 	.word	0x0009b805
   80fc4:	00088e75 	.word	0x00088e75
   80fc8:	20071730 	.word	0x20071730
   80fcc:	0008e6a1 	.word	0x0008e6a1
   80fd0:	000a64e1 	.word	0x000a64e1
   80fd4:	000a5c69 	.word	0x000a5c69
   80fd8:	000a5d11 	.word	0x000a5d11
   80fdc:	000a59ad 	.word	0x000a59ad
   80fe0:	000a62d5 	.word	0x000a62d5
   80fe4:	000844c9 	.word	0x000844c9
   80fe8:	000a855c 	.word	0x000a855c
   80fec:	20071734 	.word	0x20071734
   80ff0:	000845d9 	.word	0x000845d9
   80ff4:	000a8564 	.word	0x000a8564
   80ff8:	20071738 	.word	0x20071738
		}
		else
		ps3 = (float)Ps3;
   80ffc:	883a      	ldrh	r2, [r7, #0]
   80ffe:	4b88      	ldr	r3, [pc, #544]	; (81220 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81000:	4610      	mov	r0, r2
   81002:	4798      	blx	r3
   81004:	4602      	mov	r2, r0
   81006:	4b87      	ldr	r3, [pc, #540]	; (81224 <Cl_Alarm_translate_sensor_values+0x4f4>)
   81008:	601a      	str	r2, [r3, #0]
		
		ps3 = (0.091009 * ps3) + 491.794;
   8100a:	4b86      	ldr	r3, [pc, #536]	; (81224 <Cl_Alarm_translate_sensor_values+0x4f4>)
   8100c:	681a      	ldr	r2, [r3, #0]
   8100e:	4b86      	ldr	r3, [pc, #536]	; (81228 <Cl_Alarm_translate_sensor_values+0x4f8>)
   81010:	4610      	mov	r0, r2
   81012:	4798      	blx	r3
   81014:	4c85      	ldr	r4, [pc, #532]	; (8122c <Cl_Alarm_translate_sensor_values+0x4fc>)
   81016:	a37e      	add	r3, pc, #504	; (adr r3, 81210 <Cl_Alarm_translate_sensor_values+0x4e0>)
   81018:	e9d3 2300 	ldrd	r2, r3, [r3]
   8101c:	47a0      	blx	r4
   8101e:	4603      	mov	r3, r0
   81020:	460c      	mov	r4, r1
   81022:	4618      	mov	r0, r3
   81024:	4621      	mov	r1, r4
   81026:	4c82      	ldr	r4, [pc, #520]	; (81230 <Cl_Alarm_translate_sensor_values+0x500>)
   81028:	a37b      	add	r3, pc, #492	; (adr r3, 81218 <Cl_Alarm_translate_sensor_values+0x4e8>)
   8102a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8102e:	47a0      	blx	r4
   81030:	4603      	mov	r3, r0
   81032:	460c      	mov	r4, r1
   81034:	4619      	mov	r1, r3
   81036:	4622      	mov	r2, r4
   81038:	4b7e      	ldr	r3, [pc, #504]	; (81234 <Cl_Alarm_translate_sensor_values+0x504>)
   8103a:	4608      	mov	r0, r1
   8103c:	4611      	mov	r1, r2
   8103e:	4798      	blx	r3
   81040:	4602      	mov	r2, r0
   81042:	4b78      	ldr	r3, [pc, #480]	; (81224 <Cl_Alarm_translate_sensor_values+0x4f4>)
   81044:	601a      	str	r2, [r3, #0]
		//ps3 = ((ps3* 49) + pressure_final_ps3)/50;
	}
				
	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   81046:	4b7c      	ldr	r3, [pc, #496]	; (81238 <Cl_Alarm_translate_sensor_values+0x508>)
   81048:	8a1b      	ldrh	r3, [r3, #16]
   8104a:	461a      	mov	r2, r3
   8104c:	f640 43e4 	movw	r3, #3300	; 0xce4
   81050:	fb03 f302 	mul.w	r3, r3, r2
   81054:	2b00      	cmp	r3, #0
   81056:	da01      	bge.n	8105c <Cl_Alarm_translate_sensor_values+0x32c>
   81058:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   8105c:	131b      	asrs	r3, r3, #12
   8105e:	461a      	mov	r2, r3
   81060:	4b76      	ldr	r3, [pc, #472]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   81062:	4610      	mov	r0, r2
   81064:	4798      	blx	r3
   81066:	4603      	mov	r3, r0
   81068:	623b      	str	r3, [r7, #32]
	calibration_apt(temp);
   8106a:	4b75      	ldr	r3, [pc, #468]	; (81240 <Cl_Alarm_translate_sensor_values+0x510>)
   8106c:	6a38      	ldr	r0, [r7, #32]
   8106e:	4798      	blx	r3
   81070:	4603      	mov	r3, r0
   81072:	b21b      	sxth	r3, r3
   81074:	4618      	mov	r0, r3
   81076:	4b73      	ldr	r3, [pc, #460]	; (81244 <Cl_Alarm_translate_sensor_values+0x514>)
   81078:	4798      	blx	r3
	if(test_sensor_status[SENSOR_APTSTATUS].test_flag == true)
   8107a:	4b73      	ldr	r3, [pc, #460]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   8107c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   81080:	2b00      	cmp	r3, #0
   81082:	d00e      	beq.n	810a2 <Cl_Alarm_translate_sensor_values+0x372>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   81084:	2205      	movs	r2, #5
   81086:	4971      	ldr	r1, [pc, #452]	; (8124c <Cl_Alarm_translate_sensor_values+0x51c>)
   81088:	2018      	movs	r0, #24
   8108a:	4b71      	ldr	r3, [pc, #452]	; (81250 <Cl_Alarm_translate_sensor_values+0x520>)
   8108c:	4798      	blx	r3
		apt =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8108e:	4b6e      	ldr	r3, [pc, #440]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   81090:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   81094:	4b69      	ldr	r3, [pc, #420]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   81096:	4610      	mov	r0, r2
   81098:	4798      	blx	r3
   8109a:	4602      	mov	r2, r0
   8109c:	4b6d      	ldr	r3, [pc, #436]	; (81254 <Cl_Alarm_translate_sensor_values+0x524>)
   8109e:	601a      	str	r2, [r3, #0]
   810a0:	e016      	b.n	810d0 <Cl_Alarm_translate_sensor_values+0x3a0>
	}
	else
	{
		apt = ((apt* 49) + pressure_final_apt)/50;
   810a2:	4b6c      	ldr	r3, [pc, #432]	; (81254 <Cl_Alarm_translate_sensor_values+0x524>)
   810a4:	681a      	ldr	r2, [r3, #0]
   810a6:	4b6c      	ldr	r3, [pc, #432]	; (81258 <Cl_Alarm_translate_sensor_values+0x528>)
   810a8:	496c      	ldr	r1, [pc, #432]	; (8125c <Cl_Alarm_translate_sensor_values+0x52c>)
   810aa:	4610      	mov	r0, r2
   810ac:	4798      	blx	r3
   810ae:	4603      	mov	r3, r0
   810b0:	4618      	mov	r0, r3
   810b2:	4b6b      	ldr	r3, [pc, #428]	; (81260 <Cl_Alarm_translate_sensor_values+0x530>)
   810b4:	681a      	ldr	r2, [r3, #0]
   810b6:	4b6b      	ldr	r3, [pc, #428]	; (81264 <Cl_Alarm_translate_sensor_values+0x534>)
   810b8:	4611      	mov	r1, r2
   810ba:	4798      	blx	r3
   810bc:	4603      	mov	r3, r0
   810be:	461a      	mov	r2, r3
   810c0:	4b69      	ldr	r3, [pc, #420]	; (81268 <Cl_Alarm_translate_sensor_values+0x538>)
   810c2:	496a      	ldr	r1, [pc, #424]	; (8126c <Cl_Alarm_translate_sensor_values+0x53c>)
   810c4:	4610      	mov	r0, r2
   810c6:	4798      	blx	r3
   810c8:	4603      	mov	r3, r0
   810ca:	461a      	mov	r2, r3
   810cc:	4b61      	ldr	r3, [pc, #388]	; (81254 <Cl_Alarm_translate_sensor_values+0x524>)
   810ce:	601a      	str	r2, [r3, #0]
	}

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   810d0:	4b59      	ldr	r3, [pc, #356]	; (81238 <Cl_Alarm_translate_sensor_values+0x508>)
   810d2:	8a5b      	ldrh	r3, [r3, #18]
   810d4:	461a      	mov	r2, r3
   810d6:	f640 43e4 	movw	r3, #3300	; 0xce4
   810da:	fb03 f302 	mul.w	r3, r3, r2
   810de:	2b00      	cmp	r3, #0
   810e0:	da01      	bge.n	810e6 <Cl_Alarm_translate_sensor_values+0x3b6>
   810e2:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   810e6:	131b      	asrs	r3, r3, #12
   810e8:	461a      	mov	r2, r3
   810ea:	4b54      	ldr	r3, [pc, #336]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   810ec:	4610      	mov	r0, r2
   810ee:	4798      	blx	r3
   810f0:	4603      	mov	r3, r0
   810f2:	623b      	str	r3, [r7, #32]
	calibration_vpt(temp);
   810f4:	4b52      	ldr	r3, [pc, #328]	; (81240 <Cl_Alarm_translate_sensor_values+0x510>)
   810f6:	6a38      	ldr	r0, [r7, #32]
   810f8:	4798      	blx	r3
   810fa:	4603      	mov	r3, r0
   810fc:	b21b      	sxth	r3, r3
   810fe:	4618      	mov	r0, r3
   81100:	4b5b      	ldr	r3, [pc, #364]	; (81270 <Cl_Alarm_translate_sensor_values+0x540>)
   81102:	4798      	blx	r3
	if(test_sensor_status[SENSOR_VPTSTATUS].test_flag == true)
   81104:	4b50      	ldr	r3, [pc, #320]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   81106:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8110a:	2b00      	cmp	r3, #0
   8110c:	d00e      	beq.n	8112c <Cl_Alarm_translate_sensor_values+0x3fc>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   8110e:	2205      	movs	r2, #5
   81110:	494e      	ldr	r1, [pc, #312]	; (8124c <Cl_Alarm_translate_sensor_values+0x51c>)
   81112:	2018      	movs	r0, #24
   81114:	4b4e      	ldr	r3, [pc, #312]	; (81250 <Cl_Alarm_translate_sensor_values+0x520>)
   81116:	4798      	blx	r3
		vpt =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   81118:	4b4b      	ldr	r3, [pc, #300]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   8111a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
   8111e:	4b47      	ldr	r3, [pc, #284]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   81120:	4610      	mov	r0, r2
   81122:	4798      	blx	r3
   81124:	4602      	mov	r2, r0
   81126:	4b53      	ldr	r3, [pc, #332]	; (81274 <Cl_Alarm_translate_sensor_values+0x544>)
   81128:	601a      	str	r2, [r3, #0]
   8112a:	e016      	b.n	8115a <Cl_Alarm_translate_sensor_values+0x42a>
	}
	else
	{
		vpt = ((vpt* 49) + pressure_final_vpt)/50;
   8112c:	4b51      	ldr	r3, [pc, #324]	; (81274 <Cl_Alarm_translate_sensor_values+0x544>)
   8112e:	681a      	ldr	r2, [r3, #0]
   81130:	4b49      	ldr	r3, [pc, #292]	; (81258 <Cl_Alarm_translate_sensor_values+0x528>)
   81132:	494a      	ldr	r1, [pc, #296]	; (8125c <Cl_Alarm_translate_sensor_values+0x52c>)
   81134:	4610      	mov	r0, r2
   81136:	4798      	blx	r3
   81138:	4603      	mov	r3, r0
   8113a:	4618      	mov	r0, r3
   8113c:	4b4e      	ldr	r3, [pc, #312]	; (81278 <Cl_Alarm_translate_sensor_values+0x548>)
   8113e:	681a      	ldr	r2, [r3, #0]
   81140:	4b48      	ldr	r3, [pc, #288]	; (81264 <Cl_Alarm_translate_sensor_values+0x534>)
   81142:	4611      	mov	r1, r2
   81144:	4798      	blx	r3
   81146:	4603      	mov	r3, r0
   81148:	461a      	mov	r2, r3
   8114a:	4b47      	ldr	r3, [pc, #284]	; (81268 <Cl_Alarm_translate_sensor_values+0x538>)
   8114c:	4947      	ldr	r1, [pc, #284]	; (8126c <Cl_Alarm_translate_sensor_values+0x53c>)
   8114e:	4610      	mov	r0, r2
   81150:	4798      	blx	r3
   81152:	4603      	mov	r3, r0
   81154:	461a      	mov	r2, r3
   81156:	4b47      	ldr	r3, [pc, #284]	; (81274 <Cl_Alarm_translate_sensor_values+0x544>)
   81158:	601a      	str	r2, [r3, #0]
	}

// 	temp = cl_sys_statbuffer.Temp1status * 0.805;
// 	calibration_tmp(temp,TS1);
	if(test_sensor_status[SENSOR_TEMP1STATUS].test_flag == true)
   8115a:	4b3b      	ldr	r3, [pc, #236]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   8115c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   81160:	2b00      	cmp	r3, #0
   81162:	d00e      	beq.n	81182 <Cl_Alarm_translate_sensor_values+0x452>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT1",7);
   81164:	2207      	movs	r2, #7
   81166:	4945      	ldr	r1, [pc, #276]	; (8127c <Cl_Alarm_translate_sensor_values+0x54c>)
   81168:	2018      	movs	r0, #24
   8116a:	4b39      	ldr	r3, [pc, #228]	; (81250 <Cl_Alarm_translate_sensor_values+0x520>)
   8116c:	4798      	blx	r3
		temp1 =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8116e:	4b36      	ldr	r3, [pc, #216]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   81170:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
   81174:	4b31      	ldr	r3, [pc, #196]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   81176:	4610      	mov	r0, r2
   81178:	4798      	blx	r3
   8117a:	4602      	mov	r2, r0
   8117c:	4b40      	ldr	r3, [pc, #256]	; (81280 <Cl_Alarm_translate_sensor_values+0x550>)
   8117e:	601a      	str	r2, [r3, #0]
   81180:	e011      	b.n	811a6 <Cl_Alarm_translate_sensor_values+0x476>
		uint16_t temp = res_temp_value/100;
		temp = temp - 2.5- 0.25;
								
		temp1 = ((temp1* 4) +temp)/5;
		//temp1=temp1*10; */
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   81182:	1dbb      	adds	r3, r7, #6
   81184:	4619      	mov	r1, r3
   81186:	2012      	movs	r0, #18
   81188:	4b3e      	ldr	r3, [pc, #248]	; (81284 <Cl_Alarm_translate_sensor_values+0x554>)
   8118a:	4798      	blx	r3
			{
				
				temp1 = (float)sensordata/10;
   8118c:	88fa      	ldrh	r2, [r7, #6]
   8118e:	4b24      	ldr	r3, [pc, #144]	; (81220 <Cl_Alarm_translate_sensor_values+0x4f0>)
   81190:	4610      	mov	r0, r2
   81192:	4798      	blx	r3
   81194:	4602      	mov	r2, r0
   81196:	4b34      	ldr	r3, [pc, #208]	; (81268 <Cl_Alarm_translate_sensor_values+0x538>)
   81198:	493b      	ldr	r1, [pc, #236]	; (81288 <Cl_Alarm_translate_sensor_values+0x558>)
   8119a:	4610      	mov	r0, r2
   8119c:	4798      	blx	r3
   8119e:	4603      	mov	r3, r0
   811a0:	461a      	mov	r2, r3
   811a2:	4b37      	ldr	r3, [pc, #220]	; (81280 <Cl_Alarm_translate_sensor_values+0x550>)
   811a4:	601a      	str	r2, [r3, #0]
				
			}
	}
	

	if(test_sensor_status[SENSOR_TEMP2STATUS].test_flag == true)
   811a6:	4b28      	ldr	r3, [pc, #160]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   811a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   811ac:	2b00      	cmp	r3, #0
   811ae:	d00e      	beq.n	811ce <Cl_Alarm_translate_sensor_values+0x49e>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT2",7);
   811b0:	2207      	movs	r2, #7
   811b2:	4936      	ldr	r1, [pc, #216]	; (8128c <Cl_Alarm_translate_sensor_values+0x55c>)
   811b4:	2018      	movs	r0, #24
   811b6:	4b26      	ldr	r3, [pc, #152]	; (81250 <Cl_Alarm_translate_sensor_values+0x520>)
   811b8:	4798      	blx	r3
		temp2 =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   811ba:	4b23      	ldr	r3, [pc, #140]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   811bc:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
   811c0:	4b1e      	ldr	r3, [pc, #120]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   811c2:	4610      	mov	r0, r2
   811c4:	4798      	blx	r3
   811c6:	4602      	mov	r2, r0
   811c8:	4b31      	ldr	r3, [pc, #196]	; (81290 <Cl_Alarm_translate_sensor_values+0x560>)
   811ca:	601a      	str	r2, [r3, #0]
   811cc:	e011      	b.n	811f2 <Cl_Alarm_translate_sensor_values+0x4c2>
				
				
				temp2 = ((temp2* 4) +temp)/5;
		//temp2=temp2*10;
		*/
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   811ce:	1dbb      	adds	r3, r7, #6
   811d0:	4619      	mov	r1, r3
   811d2:	2013      	movs	r0, #19
   811d4:	4b2b      	ldr	r3, [pc, #172]	; (81284 <Cl_Alarm_translate_sensor_values+0x554>)
   811d6:	4798      	blx	r3
			{
				
				temp2 = (float)sensordata/10;
   811d8:	88fa      	ldrh	r2, [r7, #6]
   811da:	4b11      	ldr	r3, [pc, #68]	; (81220 <Cl_Alarm_translate_sensor_values+0x4f0>)
   811dc:	4610      	mov	r0, r2
   811de:	4798      	blx	r3
   811e0:	4602      	mov	r2, r0
   811e2:	4b21      	ldr	r3, [pc, #132]	; (81268 <Cl_Alarm_translate_sensor_values+0x538>)
   811e4:	4928      	ldr	r1, [pc, #160]	; (81288 <Cl_Alarm_translate_sensor_values+0x558>)
   811e6:	4610      	mov	r0, r2
   811e8:	4798      	blx	r3
   811ea:	4603      	mov	r3, r0
   811ec:	461a      	mov	r2, r3
   811ee:	4b28      	ldr	r3, [pc, #160]	; (81290 <Cl_Alarm_translate_sensor_values+0x560>)
   811f0:	601a      	str	r2, [r3, #0]

				
			}
	}

	if(test_sensor_status[SENSOR_TEMP3STATUS].test_flag == true)
   811f2:	4b15      	ldr	r3, [pc, #84]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   811f4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   811f8:	2b00      	cmp	r3, #0
   811fa:	d04d      	beq.n	81298 <Cl_Alarm_translate_sensor_values+0x568>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT3",7);
		temp3 =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   811fc:	4b12      	ldr	r3, [pc, #72]	; (81248 <Cl_Alarm_translate_sensor_values+0x518>)
   811fe:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
   81202:	4b0e      	ldr	r3, [pc, #56]	; (8123c <Cl_Alarm_translate_sensor_values+0x50c>)
   81204:	4610      	mov	r0, r2
   81206:	4798      	blx	r3
   81208:	4602      	mov	r2, r0
   8120a:	4b22      	ldr	r3, [pc, #136]	; (81294 <Cl_Alarm_translate_sensor_values+0x564>)
   8120c:	601a      	str	r2, [r3, #0]
   8120e:	e055      	b.n	812bc <Cl_Alarm_translate_sensor_values+0x58c>
   81210:	a6a44418 	.word	0xa6a44418
   81214:	3fb74c5d 	.word	0x3fb74c5d
   81218:	39581062 	.word	0x39581062
   8121c:	407ebcb4 	.word	0x407ebcb4
   81220:	000a64e1 	.word	0x000a64e1
   81224:	20071738 	.word	0x20071738
   81228:	000a5c69 	.word	0x000a5c69
   8122c:	000a5d11 	.word	0x000a5d11
   81230:	000a59ad 	.word	0x000a59ad
   81234:	000a62d5 	.word	0x000a62d5
   81238:	2007221c 	.word	0x2007221c
   8123c:	000a64e9 	.word	0x000a64e9
   81240:	000a691d 	.word	0x000a691d
   81244:	000840b5 	.word	0x000840b5
   81248:	200725b8 	.word	0x200725b8
   8124c:	000a856c 	.word	0x000a856c
   81250:	0009b805 	.word	0x0009b805
   81254:	200720ec 	.word	0x200720ec
   81258:	000a6591 	.word	0x000a6591
   8125c:	42440000 	.word	0x42440000
   81260:	20072160 	.word	0x20072160
   81264:	000a6381 	.word	0x000a6381
   81268:	000a66f9 	.word	0x000a66f9
   8126c:	42480000 	.word	0x42480000
   81270:	00084235 	.word	0x00084235
   81274:	2007172c 	.word	0x2007172c
   81278:	20071774 	.word	0x20071774
   8127c:	000a8574 	.word	0x000a8574
   81280:	2007173c 	.word	0x2007173c
   81284:	0008e6a1 	.word	0x0008e6a1
   81288:	41200000 	.word	0x41200000
   8128c:	000a857c 	.word	0x000a857c
   81290:	20071740 	.word	0x20071740
   81294:	20071744 	.word	0x20071744
				temp = temp - 0.4;
				
				temp3 = ((temp3* 4) +temp)/5;
		//temp3=temp3*10; */
			
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   81298:	1dbb      	adds	r3, r7, #6
   8129a:	4619      	mov	r1, r3
   8129c:	2014      	movs	r0, #20
   8129e:	4b80      	ldr	r3, [pc, #512]	; (814a0 <Cl_Alarm_translate_sensor_values+0x770>)
   812a0:	4798      	blx	r3
				{
					
					temp3 = (float)sensordata/10;
   812a2:	88fa      	ldrh	r2, [r7, #6]
   812a4:	4b7f      	ldr	r3, [pc, #508]	; (814a4 <Cl_Alarm_translate_sensor_values+0x774>)
   812a6:	4610      	mov	r0, r2
   812a8:	4798      	blx	r3
   812aa:	4602      	mov	r2, r0
   812ac:	4b7e      	ldr	r3, [pc, #504]	; (814a8 <Cl_Alarm_translate_sensor_values+0x778>)
   812ae:	497f      	ldr	r1, [pc, #508]	; (814ac <Cl_Alarm_translate_sensor_values+0x77c>)
   812b0:	4610      	mov	r0, r2
   812b2:	4798      	blx	r3
   812b4:	4603      	mov	r3, r0
   812b6:	461a      	mov	r2, r3
   812b8:	4b7d      	ldr	r3, [pc, #500]	; (814b0 <Cl_Alarm_translate_sensor_values+0x780>)
   812ba:	601a      	str	r2, [r3, #0]
			
	}
	

	
	if(test_sensor_status[SENSOR_COND_STATUS].test_flag == true)
   812bc:	4b7d      	ldr	r3, [pc, #500]	; (814b4 <Cl_Alarm_translate_sensor_values+0x784>)
   812be:	7f9b      	ldrb	r3, [r3, #30]
   812c0:	2b00      	cmp	r3, #0
   812c2:	d00e      	beq.n	812e2 <Cl_Alarm_translate_sensor_values+0x5b2>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTCOND",5);
   812c4:	2205      	movs	r2, #5
   812c6:	497c      	ldr	r1, [pc, #496]	; (814b8 <Cl_Alarm_translate_sensor_values+0x788>)
   812c8:	2018      	movs	r0, #24
   812ca:	4b7c      	ldr	r3, [pc, #496]	; (814bc <Cl_Alarm_translate_sensor_values+0x78c>)
   812cc:	4798      	blx	r3
		cond_final =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   812ce:	4b79      	ldr	r3, [pc, #484]	; (814b4 <Cl_Alarm_translate_sensor_values+0x784>)
   812d0:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   812d4:	4b7a      	ldr	r3, [pc, #488]	; (814c0 <Cl_Alarm_translate_sensor_values+0x790>)
   812d6:	4610      	mov	r0, r2
   812d8:	4798      	blx	r3
   812da:	4602      	mov	r2, r0
   812dc:	4b79      	ldr	r3, [pc, #484]	; (814c4 <Cl_Alarm_translate_sensor_values+0x794>)
   812de:	601a      	str	r2, [r3, #0]
   812e0:	e0c1      	b.n	81466 <Cl_Alarm_translate_sensor_values+0x736>
	{
		
/*		cond1 =  -0.0001 * cl_sys_statbuffer.cond_status * cl_sys_statbuffer.cond_status   + 0.36 * cl_sys_statbuffer.cond_status  - 38.39 ;
		cond_final= (cond1/(1+(temp3-25.0)*0.020)/10);
*/
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   812e2:	1dbb      	adds	r3, r7, #6
   812e4:	4619      	mov	r1, r3
   812e6:	2007      	movs	r0, #7
   812e8:	4b6d      	ldr	r3, [pc, #436]	; (814a0 <Cl_Alarm_translate_sensor_values+0x770>)
   812ea:	4798      	blx	r3
	{
		
		float cond_comp=0;
   812ec:	f04f 0300 	mov.w	r3, #0
   812f0:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   812f2:	f04f 0300 	mov.w	r3, #0
   812f6:	61bb      	str	r3, [r7, #24]
		float	 cond1,	cond_final, cond1x100, cond_final_X10000;
		sensordata = sensordata/10;
   812f8:	88fb      	ldrh	r3, [r7, #6]
   812fa:	4a73      	ldr	r2, [pc, #460]	; (814c8 <Cl_Alarm_translate_sensor_values+0x798>)
   812fc:	fba2 2303 	umull	r2, r3, r2, r3
   81300:	08db      	lsrs	r3, r3, #3
   81302:	b29b      	uxth	r3, r3
   81304:	80fb      	strh	r3, [r7, #6]
		if (sensordata > 50)
   81306:	88fb      	ldrh	r3, [r7, #6]
   81308:	2b32      	cmp	r3, #50	; 0x32
   8130a:	f240 80a9 	bls.w	81460 <Cl_Alarm_translate_sensor_values+0x730>
		{
			
			cond1 = sensordata/100;
   8130e:	88fb      	ldrh	r3, [r7, #6]
   81310:	4a6e      	ldr	r2, [pc, #440]	; (814cc <Cl_Alarm_translate_sensor_values+0x79c>)
   81312:	fba2 2303 	umull	r2, r3, r2, r3
   81316:	095b      	lsrs	r3, r3, #5
   81318:	b29b      	uxth	r3, r3
   8131a:	461a      	mov	r2, r3
   8131c:	4b68      	ldr	r3, [pc, #416]	; (814c0 <Cl_Alarm_translate_sensor_values+0x790>)
   8131e:	4610      	mov	r0, r2
   81320:	4798      	blx	r3
   81322:	4603      	mov	r3, r0
   81324:	617b      	str	r3, [r7, #20]
			cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   81326:	4b6a      	ldr	r3, [pc, #424]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81328:	6978      	ldr	r0, [r7, #20]
   8132a:	4798      	blx	r3
   8132c:	4c69      	ldr	r4, [pc, #420]	; (814d4 <Cl_Alarm_translate_sensor_values+0x7a4>)
   8132e:	a350      	add	r3, pc, #320	; (adr r3, 81470 <Cl_Alarm_translate_sensor_values+0x740>)
   81330:	e9d3 2300 	ldrd	r2, r3, [r3]
   81334:	47a0      	blx	r4
   81336:	4603      	mov	r3, r0
   81338:	460c      	mov	r4, r1
   8133a:	461d      	mov	r5, r3
   8133c:	4626      	mov	r6, r4
   8133e:	4b64      	ldr	r3, [pc, #400]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81340:	6978      	ldr	r0, [r7, #20]
   81342:	4798      	blx	r3
   81344:	4602      	mov	r2, r0
   81346:	460b      	mov	r3, r1
   81348:	4c62      	ldr	r4, [pc, #392]	; (814d4 <Cl_Alarm_translate_sensor_values+0x7a4>)
   8134a:	4628      	mov	r0, r5
   8134c:	4631      	mov	r1, r6
   8134e:	47a0      	blx	r4
   81350:	4603      	mov	r3, r0
   81352:	460c      	mov	r4, r1
   81354:	461d      	mov	r5, r3
   81356:	4626      	mov	r6, r4
   81358:	4b5d      	ldr	r3, [pc, #372]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   8135a:	6978      	ldr	r0, [r7, #20]
   8135c:	4798      	blx	r3
   8135e:	4c5d      	ldr	r4, [pc, #372]	; (814d4 <Cl_Alarm_translate_sensor_values+0x7a4>)
   81360:	a345      	add	r3, pc, #276	; (adr r3, 81478 <Cl_Alarm_translate_sensor_values+0x748>)
   81362:	e9d3 2300 	ldrd	r2, r3, [r3]
   81366:	47a0      	blx	r4
   81368:	4603      	mov	r3, r0
   8136a:	460c      	mov	r4, r1
   8136c:	461a      	mov	r2, r3
   8136e:	4623      	mov	r3, r4
   81370:	4c59      	ldr	r4, [pc, #356]	; (814d8 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81372:	4628      	mov	r0, r5
   81374:	4631      	mov	r1, r6
   81376:	47a0      	blx	r4
   81378:	4603      	mov	r3, r0
   8137a:	460c      	mov	r4, r1
   8137c:	4618      	mov	r0, r3
   8137e:	4621      	mov	r1, r4
   81380:	4c55      	ldr	r4, [pc, #340]	; (814d8 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81382:	a33f      	add	r3, pc, #252	; (adr r3, 81480 <Cl_Alarm_translate_sensor_values+0x750>)
   81384:	e9d3 2300 	ldrd	r2, r3, [r3]
   81388:	47a0      	blx	r4
   8138a:	4603      	mov	r3, r0
   8138c:	460c      	mov	r4, r1
   8138e:	4618      	mov	r0, r3
   81390:	4621      	mov	r1, r4
   81392:	4c51      	ldr	r4, [pc, #324]	; (814d8 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81394:	a33c      	add	r3, pc, #240	; (adr r3, 81488 <Cl_Alarm_translate_sensor_values+0x758>)
   81396:	e9d3 2300 	ldrd	r2, r3, [r3]
   8139a:	47a0      	blx	r4
   8139c:	4603      	mov	r3, r0
   8139e:	460c      	mov	r4, r1
   813a0:	4619      	mov	r1, r3
   813a2:	4622      	mov	r2, r4
   813a4:	4b4d      	ldr	r3, [pc, #308]	; (814dc <Cl_Alarm_translate_sensor_values+0x7ac>)
   813a6:	4608      	mov	r0, r1
   813a8:	4611      	mov	r1, r2
   813aa:	4798      	blx	r3
   813ac:	4603      	mov	r3, r0
   813ae:	613b      	str	r3, [r7, #16]
			cond1x100 = cond_final*100; ;
   813b0:	4b4b      	ldr	r3, [pc, #300]	; (814e0 <Cl_Alarm_translate_sensor_values+0x7b0>)
   813b2:	494c      	ldr	r1, [pc, #304]	; (814e4 <Cl_Alarm_translate_sensor_values+0x7b4>)
   813b4:	6938      	ldr	r0, [r7, #16]
   813b6:	4798      	blx	r3
   813b8:	4603      	mov	r3, r0
   813ba:	60fb      	str	r3, [r7, #12]
			cond_final_X10000= (cond1x100/(1+(temp3/10  -25.0)*0.021));
   813bc:	4b44      	ldr	r3, [pc, #272]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   813be:	68f8      	ldr	r0, [r7, #12]
   813c0:	4798      	blx	r3
   813c2:	4605      	mov	r5, r0
   813c4:	460e      	mov	r6, r1
   813c6:	4b3a      	ldr	r3, [pc, #232]	; (814b0 <Cl_Alarm_translate_sensor_values+0x780>)
   813c8:	681a      	ldr	r2, [r3, #0]
   813ca:	4b37      	ldr	r3, [pc, #220]	; (814a8 <Cl_Alarm_translate_sensor_values+0x778>)
   813cc:	4937      	ldr	r1, [pc, #220]	; (814ac <Cl_Alarm_translate_sensor_values+0x77c>)
   813ce:	4610      	mov	r0, r2
   813d0:	4798      	blx	r3
   813d2:	4603      	mov	r3, r0
   813d4:	461a      	mov	r2, r3
   813d6:	4b3e      	ldr	r3, [pc, #248]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   813d8:	4610      	mov	r0, r2
   813da:	4798      	blx	r3
   813dc:	4c42      	ldr	r4, [pc, #264]	; (814e8 <Cl_Alarm_translate_sensor_values+0x7b8>)
   813de:	f04f 0200 	mov.w	r2, #0
   813e2:	4b42      	ldr	r3, [pc, #264]	; (814ec <Cl_Alarm_translate_sensor_values+0x7bc>)
   813e4:	47a0      	blx	r4
   813e6:	4603      	mov	r3, r0
   813e8:	460c      	mov	r4, r1
   813ea:	4618      	mov	r0, r3
   813ec:	4621      	mov	r1, r4
   813ee:	4c39      	ldr	r4, [pc, #228]	; (814d4 <Cl_Alarm_translate_sensor_values+0x7a4>)
   813f0:	a327      	add	r3, pc, #156	; (adr r3, 81490 <Cl_Alarm_translate_sensor_values+0x760>)
   813f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   813f6:	47a0      	blx	r4
   813f8:	4603      	mov	r3, r0
   813fa:	460c      	mov	r4, r1
   813fc:	4618      	mov	r0, r3
   813fe:	4621      	mov	r1, r4
   81400:	4c35      	ldr	r4, [pc, #212]	; (814d8 <Cl_Alarm_translate_sensor_values+0x7a8>)
   81402:	f04f 0200 	mov.w	r2, #0
   81406:	4b3a      	ldr	r3, [pc, #232]	; (814f0 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81408:	47a0      	blx	r4
   8140a:	4603      	mov	r3, r0
   8140c:	460c      	mov	r4, r1
   8140e:	461a      	mov	r2, r3
   81410:	4623      	mov	r3, r4
   81412:	4c38      	ldr	r4, [pc, #224]	; (814f4 <Cl_Alarm_translate_sensor_values+0x7c4>)
   81414:	4628      	mov	r0, r5
   81416:	4631      	mov	r1, r6
   81418:	47a0      	blx	r4
   8141a:	4603      	mov	r3, r0
   8141c:	460c      	mov	r4, r1
   8141e:	4619      	mov	r1, r3
   81420:	4622      	mov	r2, r4
   81422:	4b2e      	ldr	r3, [pc, #184]	; (814dc <Cl_Alarm_translate_sensor_values+0x7ac>)
   81424:	4608      	mov	r0, r1
   81426:	4611      	mov	r1, r2
   81428:	4798      	blx	r3
   8142a:	4603      	mov	r3, r0
   8142c:	60bb      	str	r3, [r7, #8]
			cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   8142e:	4b28      	ldr	r3, [pc, #160]	; (814d0 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81430:	68b8      	ldr	r0, [r7, #8]
   81432:	4798      	blx	r3
   81434:	4c27      	ldr	r4, [pc, #156]	; (814d4 <Cl_Alarm_translate_sensor_values+0x7a4>)
   81436:	a318      	add	r3, pc, #96	; (adr r3, 81498 <Cl_Alarm_translate_sensor_values+0x768>)
   81438:	e9d3 2300 	ldrd	r2, r3, [r3]
   8143c:	47a0      	blx	r4
   8143e:	4603      	mov	r3, r0
   81440:	460c      	mov	r4, r1
   81442:	4619      	mov	r1, r3
   81444:	4622      	mov	r2, r4
   81446:	4b25      	ldr	r3, [pc, #148]	; (814dc <Cl_Alarm_translate_sensor_values+0x7ac>)
   81448:	4608      	mov	r0, r1
   8144a:	4611      	mov	r1, r2
   8144c:	4798      	blx	r3
   8144e:	4603      	mov	r3, r0
   81450:	60bb      	str	r3, [r7, #8]
			
			
			//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
			//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
			cond_final = (cond_final_X10000/10);
   81452:	4b15      	ldr	r3, [pc, #84]	; (814a8 <Cl_Alarm_translate_sensor_values+0x778>)
   81454:	4915      	ldr	r1, [pc, #84]	; (814ac <Cl_Alarm_translate_sensor_values+0x77c>)
   81456:	68b8      	ldr	r0, [r7, #8]
   81458:	4798      	blx	r3
   8145a:	4603      	mov	r3, r0
   8145c:	613b      	str	r3, [r7, #16]
   8145e:	e002      	b.n	81466 <Cl_Alarm_translate_sensor_values+0x736>
			
		}
		else
		{
			cond_final = 0;
   81460:	f04f 0300 	mov.w	r3, #0
   81464:	613b      	str	r3, [r7, #16]
		
	}										

	}
	
}
   81466:	bf00      	nop
   81468:	4618      	mov	r0, r3
   8146a:	372c      	adds	r7, #44	; 0x2c
   8146c:	46bd      	mov	sp, r7
   8146e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81470:	eb1c432d 	.word	0xeb1c432d
   81474:	3f1a36e2 	.word	0x3f1a36e2
   81478:	d2f1a9fc 	.word	0xd2f1a9fc
   8147c:	3fa0624d 	.word	0x3fa0624d
   81480:	51eb851f 	.word	0x51eb851f
   81484:	3fed1eb8 	.word	0x3fed1eb8
   81488:	9999999a 	.word	0x9999999a
   8148c:	3fd99999 	.word	0x3fd99999
   81490:	24dd2f1b 	.word	0x24dd2f1b
   81494:	3f958106 	.word	0x3f958106
   81498:	33333333 	.word	0x33333333
   8149c:	40153333 	.word	0x40153333
   814a0:	0008e6a1 	.word	0x0008e6a1
   814a4:	000a64e1 	.word	0x000a64e1
   814a8:	000a66f9 	.word	0x000a66f9
   814ac:	41200000 	.word	0x41200000
   814b0:	20071744 	.word	0x20071744
   814b4:	200725b8 	.word	0x200725b8
   814b8:	000a8584 	.word	0x000a8584
   814bc:	0009b805 	.word	0x0009b805
   814c0:	000a64e9 	.word	0x000a64e9
   814c4:	20071748 	.word	0x20071748
   814c8:	cccccccd 	.word	0xcccccccd
   814cc:	51eb851f 	.word	0x51eb851f
   814d0:	000a5c69 	.word	0x000a5c69
   814d4:	000a5d11 	.word	0x000a5d11
   814d8:	000a59ad 	.word	0x000a59ad
   814dc:	000a62d5 	.word	0x000a62d5
   814e0:	000a6591 	.word	0x000a6591
   814e4:	42c80000 	.word	0x42c80000
   814e8:	000a59a9 	.word	0x000a59a9
   814ec:	40390000 	.word	0x40390000
   814f0:	3ff00000 	.word	0x3ff00000
   814f4:	000a5f65 	.word	0x000a5f65

000814f8 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   814f8:	b580      	push	{r7, lr}
   814fa:	b082      	sub	sp, #8
   814fc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   814fe:	4b97      	ldr	r3, [pc, #604]	; (8175c <Cl_alarms_scanforAlarms+0x264>)
   81500:	4798      	blx	r3
   81502:	4603      	mov	r3, r0
   81504:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   81506:	79fb      	ldrb	r3, [r7, #7]
   81508:	2b00      	cmp	r3, #0
   8150a:	d001      	beq.n	81510 <Cl_alarms_scanforAlarms+0x18>
   8150c:	4b94      	ldr	r3, [pc, #592]	; (81760 <Cl_alarms_scanforAlarms+0x268>)
   8150e:	4798      	blx	r3
	
	if(Cl_alarms_alarms[POWER_FAILURE].cl_is_enabled){
   81510:	4b94      	ldr	r3, [pc, #592]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81512:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   81516:	2b00      	cmp	r3, #0
   81518:	d033      	beq.n	81582 <Cl_alarms_scanforAlarms+0x8a>
		
		if(cl_sys_statbuffer.PowerFailure)
   8151a:	4b93      	ldr	r3, [pc, #588]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   8151c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
   81520:	2b00      	cmp	r3, #0
   81522:	d02a      	beq.n	8157a <Cl_alarms_scanforAlarms+0x82>
		{

			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_DETECTED;
   81524:	4b8f      	ldr	r3, [pc, #572]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81526:	2201      	movs	r2, #1
   81528:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=POWER_FAILURE; 
   8152c:	4b8f      	ldr	r3, [pc, #572]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   8152e:	781b      	ldrb	r3, [r3, #0]
   81530:	4a8e      	ldr	r2, [pc, #568]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81532:	3301      	adds	r3, #1
   81534:	00db      	lsls	r3, r3, #3
   81536:	4413      	add	r3, r2
   81538:	221d      	movs	r2, #29
   8153a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[POWER_FAILURE].cl_detected_count++;
   8153c:	4b89      	ldr	r3, [pc, #548]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8153e:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   81542:	3301      	adds	r3, #1
   81544:	b2da      	uxtb	r2, r3
   81546:	4b87      	ldr	r3, [pc, #540]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81548:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
			cl_alarm_triggered = true;
   8154c:	4b88      	ldr	r3, [pc, #544]	; (81770 <Cl_alarms_scanforAlarms+0x278>)
   8154e:	2201      	movs	r2, #1
   81550:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = POWER_FAILURE;
   81552:	4b88      	ldr	r3, [pc, #544]	; (81774 <Cl_alarms_scanforAlarms+0x27c>)
   81554:	221d      	movs	r2, #29
   81556:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81558:	4b84      	ldr	r3, [pc, #528]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   8155a:	781b      	ldrb	r3, [r3, #0]
   8155c:	461a      	mov	r2, r3
   8155e:	4b83      	ldr	r3, [pc, #524]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81560:	4413      	add	r3, r2
   81562:	222e      	movs	r2, #46	; 0x2e
   81564:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81566:	4b84      	ldr	r3, [pc, #528]	; (81778 <Cl_alarms_scanforAlarms+0x280>)
   81568:	4798      	blx	r3
   8156a:	4603      	mov	r3, r0
   8156c:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8156e:	79fb      	ldrb	r3, [r7, #7]
   81570:	2b00      	cmp	r3, #0
   81572:	d006      	beq.n	81582 <Cl_alarms_scanforAlarms+0x8a>
   81574:	4b7a      	ldr	r3, [pc, #488]	; (81760 <Cl_alarms_scanforAlarms+0x268>)
   81576:	4798      	blx	r3
   81578:	e003      	b.n	81582 <Cl_alarms_scanforAlarms+0x8a>
		}
		else
		{
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_INACTIVE;
   8157a:	4b7a      	ldr	r3, [pc, #488]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8157c:	2204      	movs	r2, #4
   8157e:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
		
	}
	
	
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   81582:	4b78      	ldr	r3, [pc, #480]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81584:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   81588:	2b00      	cmp	r3, #0
   8158a:	d049      	beq.n	81620 <Cl_alarms_scanforAlarms+0x128>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   8158c:	4b75      	ldr	r3, [pc, #468]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8158e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   81592:	2b01      	cmp	r3, #1
   81594:	d104      	bne.n	815a0 <Cl_alarms_scanforAlarms+0xa8>
   81596:	4b74      	ldr	r3, [pc, #464]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   81598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8159c:	2b00      	cmp	r3, #0
   8159e:	d109      	bne.n	815b4 <Cl_alarms_scanforAlarms+0xbc>
   815a0:	4b70      	ldr	r3, [pc, #448]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   815a2:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   815a6:	2b00      	cmp	r3, #0
   815a8:	d134      	bne.n	81614 <Cl_alarms_scanforAlarms+0x11c>
   815aa:	4b6f      	ldr	r3, [pc, #444]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   815ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   815b0:	2b00      	cmp	r3, #0
   815b2:	d12f      	bne.n	81614 <Cl_alarms_scanforAlarms+0x11c>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   815b4:	4b6b      	ldr	r3, [pc, #428]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   815b6:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   815ba:	2b01      	cmp	r3, #1
   815bc:	d02f      	beq.n	8161e <Cl_alarms_scanforAlarms+0x126>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   815be:	4b69      	ldr	r3, [pc, #420]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   815c0:	2201      	movs	r2, #1
   815c2:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   815c6:	4b69      	ldr	r3, [pc, #420]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   815c8:	781b      	ldrb	r3, [r3, #0]
   815ca:	4a68      	ldr	r2, [pc, #416]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   815cc:	3301      	adds	r3, #1
   815ce:	00db      	lsls	r3, r3, #3
   815d0:	4413      	add	r3, r2
   815d2:	2229      	movs	r2, #41	; 0x29
   815d4:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   815d6:	4b63      	ldr	r3, [pc, #396]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   815d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   815dc:	3301      	adds	r3, #1
   815de:	b2da      	uxtb	r2, r3
   815e0:	4b60      	ldr	r3, [pc, #384]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   815e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   815e6:	4b62      	ldr	r3, [pc, #392]	; (81770 <Cl_alarms_scanforAlarms+0x278>)
   815e8:	2201      	movs	r2, #1
   815ea:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   815ec:	4b61      	ldr	r3, [pc, #388]	; (81774 <Cl_alarms_scanforAlarms+0x27c>)
   815ee:	2229      	movs	r2, #41	; 0x29
   815f0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815f2:	4b5e      	ldr	r3, [pc, #376]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   815f4:	781b      	ldrb	r3, [r3, #0]
   815f6:	461a      	mov	r2, r3
   815f8:	4b5c      	ldr	r3, [pc, #368]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   815fa:	4413      	add	r3, r2
   815fc:	222e      	movs	r2, #46	; 0x2e
   815fe:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81600:	4b5d      	ldr	r3, [pc, #372]	; (81778 <Cl_alarms_scanforAlarms+0x280>)
   81602:	4798      	blx	r3
   81604:	4603      	mov	r3, r0
   81606:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81608:	79fb      	ldrb	r3, [r7, #7]
   8160a:	2b00      	cmp	r3, #0
   8160c:	d007      	beq.n	8161e <Cl_alarms_scanforAlarms+0x126>
   8160e:	4b54      	ldr	r3, [pc, #336]	; (81760 <Cl_alarms_scanforAlarms+0x268>)
   81610:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81612:	e004      	b.n	8161e <Cl_alarms_scanforAlarms+0x126>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81614:	4b53      	ldr	r3, [pc, #332]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81616:	2204      	movs	r2, #4
   81618:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   8161c:	e000      	b.n	81620 <Cl_alarms_scanforAlarms+0x128>
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8161e:	bf00      	nop
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   81620:	4b50      	ldr	r3, [pc, #320]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81622:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   81626:	2b00      	cmp	r3, #0
   81628:	d049      	beq.n	816be <Cl_alarms_scanforAlarms+0x1c6>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   8162a:	4b4e      	ldr	r3, [pc, #312]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8162c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81630:	2b01      	cmp	r3, #1
   81632:	d104      	bne.n	8163e <Cl_alarms_scanforAlarms+0x146>
   81634:	4b4c      	ldr	r3, [pc, #304]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   81636:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8163a:	2b00      	cmp	r3, #0
   8163c:	d109      	bne.n	81652 <Cl_alarms_scanforAlarms+0x15a>
   8163e:	4b49      	ldr	r3, [pc, #292]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81640:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81644:	2b00      	cmp	r3, #0
   81646:	d134      	bne.n	816b2 <Cl_alarms_scanforAlarms+0x1ba>
   81648:	4b47      	ldr	r3, [pc, #284]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   8164a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8164e:	2b00      	cmp	r3, #0
   81650:	d12f      	bne.n	816b2 <Cl_alarms_scanforAlarms+0x1ba>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81652:	4b44      	ldr	r3, [pc, #272]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81654:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   81658:	2b01      	cmp	r3, #1
   8165a:	d02f      	beq.n	816bc <Cl_alarms_scanforAlarms+0x1c4>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   8165c:	4b41      	ldr	r3, [pc, #260]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8165e:	2201      	movs	r2, #1
   81660:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   81664:	4b41      	ldr	r3, [pc, #260]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81666:	781b      	ldrb	r3, [r3, #0]
   81668:	4a40      	ldr	r2, [pc, #256]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   8166a:	3301      	adds	r3, #1
   8166c:	00db      	lsls	r3, r3, #3
   8166e:	4413      	add	r3, r2
   81670:	2229      	movs	r2, #41	; 0x29
   81672:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   81674:	4b3b      	ldr	r3, [pc, #236]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81676:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   8167a:	3301      	adds	r3, #1
   8167c:	b2da      	uxtb	r2, r3
   8167e:	4b39      	ldr	r3, [pc, #228]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81680:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   81684:	4b3a      	ldr	r3, [pc, #232]	; (81770 <Cl_alarms_scanforAlarms+0x278>)
   81686:	2201      	movs	r2, #1
   81688:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   8168a:	4b3a      	ldr	r3, [pc, #232]	; (81774 <Cl_alarms_scanforAlarms+0x27c>)
   8168c:	222a      	movs	r2, #42	; 0x2a
   8168e:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81690:	4b36      	ldr	r3, [pc, #216]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81692:	781b      	ldrb	r3, [r3, #0]
   81694:	461a      	mov	r2, r3
   81696:	4b35      	ldr	r3, [pc, #212]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81698:	4413      	add	r3, r2
   8169a:	222e      	movs	r2, #46	; 0x2e
   8169c:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8169e:	4b36      	ldr	r3, [pc, #216]	; (81778 <Cl_alarms_scanforAlarms+0x280>)
   816a0:	4798      	blx	r3
   816a2:	4603      	mov	r3, r0
   816a4:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   816a6:	79fb      	ldrb	r3, [r7, #7]
   816a8:	2b00      	cmp	r3, #0
   816aa:	d007      	beq.n	816bc <Cl_alarms_scanforAlarms+0x1c4>
   816ac:	4b2c      	ldr	r3, [pc, #176]	; (81760 <Cl_alarms_scanforAlarms+0x268>)
   816ae:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   816b0:	e004      	b.n	816bc <Cl_alarms_scanforAlarms+0x1c4>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   816b2:	4b2c      	ldr	r3, [pc, #176]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816b4:	2204      	movs	r2, #4
   816b6:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
   816ba:	e000      	b.n	816be <Cl_alarms_scanforAlarms+0x1c6>
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   816bc:	bf00      	nop
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   816be:	4b29      	ldr	r3, [pc, #164]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816c0:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   816c4:	2b00      	cmp	r3, #0
   816c6:	d05a      	beq.n	8177e <Cl_alarms_scanforAlarms+0x286>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   816c8:	4b26      	ldr	r3, [pc, #152]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816ca:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   816ce:	2b01      	cmp	r3, #1
   816d0:	d104      	bne.n	816dc <Cl_alarms_scanforAlarms+0x1e4>
   816d2:	4b25      	ldr	r3, [pc, #148]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   816d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   816d8:	2b00      	cmp	r3, #0
   816da:	d109      	bne.n	816f0 <Cl_alarms_scanforAlarms+0x1f8>
   816dc:	4b21      	ldr	r3, [pc, #132]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816de:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   816e2:	2b00      	cmp	r3, #0
   816e4:	d134      	bne.n	81750 <Cl_alarms_scanforAlarms+0x258>
   816e6:	4b20      	ldr	r3, [pc, #128]	; (81768 <Cl_alarms_scanforAlarms+0x270>)
   816e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   816ec:	2b00      	cmp	r3, #0
   816ee:	d12f      	bne.n	81750 <Cl_alarms_scanforAlarms+0x258>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   816f0:	4b1c      	ldr	r3, [pc, #112]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816f2:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   816f6:	2b01      	cmp	r3, #1
   816f8:	d040      	beq.n	8177c <Cl_alarms_scanforAlarms+0x284>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   816fa:	4b1a      	ldr	r3, [pc, #104]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   816fc:	2201      	movs	r2, #1
   816fe:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   81702:	4b1a      	ldr	r3, [pc, #104]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81704:	781b      	ldrb	r3, [r3, #0]
   81706:	4a19      	ldr	r2, [pc, #100]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81708:	3301      	adds	r3, #1
   8170a:	00db      	lsls	r3, r3, #3
   8170c:	4413      	add	r3, r2
   8170e:	222b      	movs	r2, #43	; 0x2b
   81710:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   81712:	4b14      	ldr	r3, [pc, #80]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81714:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   81718:	3301      	adds	r3, #1
   8171a:	b2da      	uxtb	r2, r3
   8171c:	4b11      	ldr	r3, [pc, #68]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   8171e:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   81722:	4b13      	ldr	r3, [pc, #76]	; (81770 <Cl_alarms_scanforAlarms+0x278>)
   81724:	2201      	movs	r2, #1
   81726:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   81728:	4b12      	ldr	r3, [pc, #72]	; (81774 <Cl_alarms_scanforAlarms+0x27c>)
   8172a:	222b      	movs	r2, #43	; 0x2b
   8172c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8172e:	4b0f      	ldr	r3, [pc, #60]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81730:	781b      	ldrb	r3, [r3, #0]
   81732:	461a      	mov	r2, r3
   81734:	4b0d      	ldr	r3, [pc, #52]	; (8176c <Cl_alarms_scanforAlarms+0x274>)
   81736:	4413      	add	r3, r2
   81738:	222e      	movs	r2, #46	; 0x2e
   8173a:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8173c:	4b0e      	ldr	r3, [pc, #56]	; (81778 <Cl_alarms_scanforAlarms+0x280>)
   8173e:	4798      	blx	r3
   81740:	4603      	mov	r3, r0
   81742:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81744:	79fb      	ldrb	r3, [r7, #7]
   81746:	2b00      	cmp	r3, #0
   81748:	d018      	beq.n	8177c <Cl_alarms_scanforAlarms+0x284>
   8174a:	4b05      	ldr	r3, [pc, #20]	; (81760 <Cl_alarms_scanforAlarms+0x268>)
   8174c:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8174e:	e015      	b.n	8177c <Cl_alarms_scanforAlarms+0x284>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81750:	4b04      	ldr	r3, [pc, #16]	; (81764 <Cl_alarms_scanforAlarms+0x26c>)
   81752:	2204      	movs	r2, #4
   81754:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
   81758:	e011      	b.n	8177e <Cl_alarms_scanforAlarms+0x286>
   8175a:	bf00      	nop
   8175c:	00080d31 	.word	0x00080d31
   81760:	00088e75 	.word	0x00088e75
   81764:	20071cfc 	.word	0x20071cfc
   81768:	2007221c 	.word	0x2007221c
   8176c:	200722b8 	.word	0x200722b8
   81770:	20071729 	.word	0x20071729
   81774:	200720f0 	.word	0x200720f0
   81778:	00082d15 	.word	0x00082d15
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8177c:	bf00      	nop
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   8177e:	4b98      	ldr	r3, [pc, #608]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81780:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   81784:	2b00      	cmp	r3, #0
   81786:	d049      	beq.n	8181c <Cl_alarms_scanforAlarms+0x324>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   81788:	4b95      	ldr	r3, [pc, #596]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8178a:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   8178e:	2b01      	cmp	r3, #1
   81790:	d104      	bne.n	8179c <Cl_alarms_scanforAlarms+0x2a4>
   81792:	4b94      	ldr	r3, [pc, #592]	; (819e4 <Cl_alarms_scanforAlarms+0x4ec>)
   81794:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81798:	2b00      	cmp	r3, #0
   8179a:	d109      	bne.n	817b0 <Cl_alarms_scanforAlarms+0x2b8>
   8179c:	4b90      	ldr	r3, [pc, #576]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8179e:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   817a2:	2b00      	cmp	r3, #0
   817a4:	d134      	bne.n	81810 <Cl_alarms_scanforAlarms+0x318>
   817a6:	4b8f      	ldr	r3, [pc, #572]	; (819e4 <Cl_alarms_scanforAlarms+0x4ec>)
   817a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817ac:	2b00      	cmp	r3, #0
   817ae:	d12f      	bne.n	81810 <Cl_alarms_scanforAlarms+0x318>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   817b0:	4b8b      	ldr	r3, [pc, #556]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   817b2:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   817b6:	2b01      	cmp	r3, #1
   817b8:	d02f      	beq.n	8181a <Cl_alarms_scanforAlarms+0x322>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   817ba:	4b89      	ldr	r3, [pc, #548]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   817bc:	2201      	movs	r2, #1
   817be:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   817c2:	4b89      	ldr	r3, [pc, #548]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   817c4:	781b      	ldrb	r3, [r3, #0]
   817c6:	4a88      	ldr	r2, [pc, #544]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   817c8:	3301      	adds	r3, #1
   817ca:	00db      	lsls	r3, r3, #3
   817cc:	4413      	add	r3, r2
   817ce:	222c      	movs	r2, #44	; 0x2c
   817d0:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   817d2:	4b83      	ldr	r3, [pc, #524]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   817d4:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   817d8:	3301      	adds	r3, #1
   817da:	b2da      	uxtb	r2, r3
   817dc:	4b80      	ldr	r3, [pc, #512]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   817de:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   817e2:	4b82      	ldr	r3, [pc, #520]	; (819ec <Cl_alarms_scanforAlarms+0x4f4>)
   817e4:	2201      	movs	r2, #1
   817e6:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   817e8:	4b81      	ldr	r3, [pc, #516]	; (819f0 <Cl_alarms_scanforAlarms+0x4f8>)
   817ea:	222c      	movs	r2, #44	; 0x2c
   817ec:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   817ee:	4b7e      	ldr	r3, [pc, #504]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   817f0:	781b      	ldrb	r3, [r3, #0]
   817f2:	461a      	mov	r2, r3
   817f4:	4b7c      	ldr	r3, [pc, #496]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   817f6:	4413      	add	r3, r2
   817f8:	222e      	movs	r2, #46	; 0x2e
   817fa:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   817fc:	4b7d      	ldr	r3, [pc, #500]	; (819f4 <Cl_alarms_scanforAlarms+0x4fc>)
   817fe:	4798      	blx	r3
   81800:	4603      	mov	r3, r0
   81802:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81804:	79fb      	ldrb	r3, [r7, #7]
   81806:	2b00      	cmp	r3, #0
   81808:	d007      	beq.n	8181a <Cl_alarms_scanforAlarms+0x322>
   8180a:	4b7b      	ldr	r3, [pc, #492]	; (819f8 <Cl_alarms_scanforAlarms+0x500>)
   8180c:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8180e:	e004      	b.n	8181a <Cl_alarms_scanforAlarms+0x322>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81810:	4b73      	ldr	r3, [pc, #460]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81812:	2204      	movs	r2, #4
   81814:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
   81818:	e000      	b.n	8181c <Cl_alarms_scanforAlarms+0x324>
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   8181a:	bf00      	nop
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   8181c:	4b70      	ldr	r3, [pc, #448]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8181e:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   81822:	2b00      	cmp	r3, #0
   81824:	d032      	beq.n	8188c <Cl_alarms_scanforAlarms+0x394>
	{
		
		if(cl_sys_statbuffer.abdstatus)
   81826:	4b6f      	ldr	r3, [pc, #444]	; (819e4 <Cl_alarms_scanforAlarms+0x4ec>)
   81828:	8b1b      	ldrh	r3, [r3, #24]
   8182a:	2b00      	cmp	r3, #0
   8182c:	d02a      	beq.n	81884 <Cl_alarms_scanforAlarms+0x38c>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8182e:	4b6c      	ldr	r3, [pc, #432]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81830:	2201      	movs	r2, #1
   81832:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ABD_EVENT; 
   81836:	4b6c      	ldr	r3, [pc, #432]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81838:	781b      	ldrb	r3, [r3, #0]
   8183a:	4a6b      	ldr	r2, [pc, #428]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   8183c:	3301      	adds	r3, #1
   8183e:	00db      	lsls	r3, r3, #3
   81840:	4413      	add	r3, r2
   81842:	2220      	movs	r2, #32
   81844:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   81846:	4b66      	ldr	r3, [pc, #408]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81848:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   8184c:	3301      	adds	r3, #1
   8184e:	b2da      	uxtb	r2, r3
   81850:	4b63      	ldr	r3, [pc, #396]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81852:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   81856:	4b65      	ldr	r3, [pc, #404]	; (819ec <Cl_alarms_scanforAlarms+0x4f4>)
   81858:	2201      	movs	r2, #1
   8185a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   8185c:	4b64      	ldr	r3, [pc, #400]	; (819f0 <Cl_alarms_scanforAlarms+0x4f8>)
   8185e:	2220      	movs	r2, #32
   81860:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81862:	4b61      	ldr	r3, [pc, #388]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81864:	781b      	ldrb	r3, [r3, #0]
   81866:	461a      	mov	r2, r3
   81868:	4b5f      	ldr	r3, [pc, #380]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   8186a:	4413      	add	r3, r2
   8186c:	222e      	movs	r2, #46	; 0x2e
   8186e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81870:	4b60      	ldr	r3, [pc, #384]	; (819f4 <Cl_alarms_scanforAlarms+0x4fc>)
   81872:	4798      	blx	r3
   81874:	4603      	mov	r3, r0
   81876:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81878:	79fb      	ldrb	r3, [r7, #7]
   8187a:	2b00      	cmp	r3, #0
   8187c:	d006      	beq.n	8188c <Cl_alarms_scanforAlarms+0x394>
   8187e:	4b5e      	ldr	r3, [pc, #376]	; (819f8 <Cl_alarms_scanforAlarms+0x500>)
   81880:	4798      	blx	r3
   81882:	e003      	b.n	8188c <Cl_alarms_scanforAlarms+0x394>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81884:	4b56      	ldr	r3, [pc, #344]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81886:	2204      	movs	r2, #4
   81888:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   8188c:	4b54      	ldr	r3, [pc, #336]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8188e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   81892:	2b00      	cmp	r3, #0
   81894:	d032      	beq.n	818fc <Cl_alarms_scanforAlarms+0x404>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   81896:	4b53      	ldr	r3, [pc, #332]	; (819e4 <Cl_alarms_scanforAlarms+0x4ec>)
   81898:	8b5b      	ldrh	r3, [r3, #26]
   8189a:	2b00      	cmp	r3, #0
   8189c:	d02a      	beq.n	818f4 <Cl_alarms_scanforAlarms+0x3fc>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8189e:	4b50      	ldr	r3, [pc, #320]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   818a0:	2201      	movs	r2, #1
   818a2:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BD_EVENT; 
   818a6:	4b50      	ldr	r3, [pc, #320]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   818a8:	781b      	ldrb	r3, [r3, #0]
   818aa:	4a4f      	ldr	r2, [pc, #316]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   818ac:	3301      	adds	r3, #1
   818ae:	00db      	lsls	r3, r3, #3
   818b0:	4413      	add	r3, r2
   818b2:	2221      	movs	r2, #33	; 0x21
   818b4:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   818b6:	4b4a      	ldr	r3, [pc, #296]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   818b8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   818bc:	3301      	adds	r3, #1
   818be:	b2da      	uxtb	r2, r3
   818c0:	4b47      	ldr	r3, [pc, #284]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   818c2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   818c6:	4b49      	ldr	r3, [pc, #292]	; (819ec <Cl_alarms_scanforAlarms+0x4f4>)
   818c8:	2201      	movs	r2, #1
   818ca:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   818cc:	4b48      	ldr	r3, [pc, #288]	; (819f0 <Cl_alarms_scanforAlarms+0x4f8>)
   818ce:	2221      	movs	r2, #33	; 0x21
   818d0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   818d2:	4b45      	ldr	r3, [pc, #276]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   818d4:	781b      	ldrb	r3, [r3, #0]
   818d6:	461a      	mov	r2, r3
   818d8:	4b43      	ldr	r3, [pc, #268]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   818da:	4413      	add	r3, r2
   818dc:	222e      	movs	r2, #46	; 0x2e
   818de:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   818e0:	4b44      	ldr	r3, [pc, #272]	; (819f4 <Cl_alarms_scanforAlarms+0x4fc>)
   818e2:	4798      	blx	r3
   818e4:	4603      	mov	r3, r0
   818e6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   818e8:	79fb      	ldrb	r3, [r7, #7]
   818ea:	2b00      	cmp	r3, #0
   818ec:	d006      	beq.n	818fc <Cl_alarms_scanforAlarms+0x404>
   818ee:	4b42      	ldr	r3, [pc, #264]	; (819f8 <Cl_alarms_scanforAlarms+0x500>)
   818f0:	4798      	blx	r3
   818f2:	e003      	b.n	818fc <Cl_alarms_scanforAlarms+0x404>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   818f4:	4b3a      	ldr	r3, [pc, #232]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   818f6:	2204      	movs	r2, #4
   818f8:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   818fc:	4b38      	ldr	r3, [pc, #224]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   818fe:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   81902:	2b00      	cmp	r3, #0
   81904:	d032      	beq.n	8196c <Cl_alarms_scanforAlarms+0x474>
	{
				if(cl_sys_statbuffer.bldstatus)
   81906:	4b37      	ldr	r3, [pc, #220]	; (819e4 <Cl_alarms_scanforAlarms+0x4ec>)
   81908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8190a:	2b00      	cmp	r3, #0
   8190c:	d02a      	beq.n	81964 <Cl_alarms_scanforAlarms+0x46c>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   8190e:	4b34      	ldr	r3, [pc, #208]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81910:	2201      	movs	r2, #1
   81912:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLD_EVENT; 
   81916:	4b34      	ldr	r3, [pc, #208]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81918:	781b      	ldrb	r3, [r3, #0]
   8191a:	4a33      	ldr	r2, [pc, #204]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   8191c:	3301      	adds	r3, #1
   8191e:	00db      	lsls	r3, r3, #3
   81920:	4413      	add	r3, r2
   81922:	2222      	movs	r2, #34	; 0x22
   81924:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   81926:	4b2e      	ldr	r3, [pc, #184]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81928:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   8192c:	3301      	adds	r3, #1
   8192e:	b2da      	uxtb	r2, r3
   81930:	4b2b      	ldr	r3, [pc, #172]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81932:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   81936:	4b2d      	ldr	r3, [pc, #180]	; (819ec <Cl_alarms_scanforAlarms+0x4f4>)
   81938:	2201      	movs	r2, #1
   8193a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   8193c:	4b2c      	ldr	r3, [pc, #176]	; (819f0 <Cl_alarms_scanforAlarms+0x4f8>)
   8193e:	2222      	movs	r2, #34	; 0x22
   81940:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81942:	4b29      	ldr	r3, [pc, #164]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81944:	781b      	ldrb	r3, [r3, #0]
   81946:	461a      	mov	r2, r3
   81948:	4b27      	ldr	r3, [pc, #156]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   8194a:	4413      	add	r3, r2
   8194c:	222e      	movs	r2, #46	; 0x2e
   8194e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81950:	4b28      	ldr	r3, [pc, #160]	; (819f4 <Cl_alarms_scanforAlarms+0x4fc>)
   81952:	4798      	blx	r3
   81954:	4603      	mov	r3, r0
   81956:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81958:	79fb      	ldrb	r3, [r7, #7]
   8195a:	2b00      	cmp	r3, #0
   8195c:	d006      	beq.n	8196c <Cl_alarms_scanforAlarms+0x474>
   8195e:	4b26      	ldr	r3, [pc, #152]	; (819f8 <Cl_alarms_scanforAlarms+0x500>)
   81960:	4798      	blx	r3
   81962:	e003      	b.n	8196c <Cl_alarms_scanforAlarms+0x474>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   81964:	4b1e      	ldr	r3, [pc, #120]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   81966:	2204      	movs	r2, #4
   81968:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   8196c:	4b1c      	ldr	r3, [pc, #112]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8196e:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   81972:	2b00      	cmp	r3, #0
   81974:	d051      	beq.n	81a1a <Cl_alarms_scanforAlarms+0x522>
	{
		
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   81976:	4b21      	ldr	r3, [pc, #132]	; (819fc <Cl_alarms_scanforAlarms+0x504>)
   81978:	689a      	ldr	r2, [r3, #8]
   8197a:	4b21      	ldr	r3, [pc, #132]	; (81a00 <Cl_alarms_scanforAlarms+0x508>)
   8197c:	6819      	ldr	r1, [r3, #0]
   8197e:	4b21      	ldr	r3, [pc, #132]	; (81a04 <Cl_alarms_scanforAlarms+0x50c>)
   81980:	4610      	mov	r0, r2
   81982:	4798      	blx	r3
   81984:	4603      	mov	r3, r0
   81986:	2b00      	cmp	r3, #0
   81988:	d03e      	beq.n	81a08 <Cl_alarms_scanforAlarms+0x510>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   8198a:	4b15      	ldr	r3, [pc, #84]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   8198c:	2201      	movs	r2, #1
   8198e:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   81992:	4b15      	ldr	r3, [pc, #84]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81994:	781b      	ldrb	r3, [r3, #0]
   81996:	4a14      	ldr	r2, [pc, #80]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   81998:	3301      	adds	r3, #1
   8199a:	00db      	lsls	r3, r3, #3
   8199c:	4413      	add	r3, r2
   8199e:	2224      	movs	r2, #36	; 0x24
   819a0:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   819a2:	4b0f      	ldr	r3, [pc, #60]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   819a4:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   819a8:	3301      	adds	r3, #1
   819aa:	b2da      	uxtb	r2, r3
   819ac:	4b0c      	ldr	r3, [pc, #48]	; (819e0 <Cl_alarms_scanforAlarms+0x4e8>)
   819ae:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   819b2:	4b0e      	ldr	r3, [pc, #56]	; (819ec <Cl_alarms_scanforAlarms+0x4f4>)
   819b4:	2201      	movs	r2, #1
   819b6:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   819b8:	4b0d      	ldr	r3, [pc, #52]	; (819f0 <Cl_alarms_scanforAlarms+0x4f8>)
   819ba:	2224      	movs	r2, #36	; 0x24
   819bc:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   819be:	4b0a      	ldr	r3, [pc, #40]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   819c0:	781b      	ldrb	r3, [r3, #0]
   819c2:	461a      	mov	r2, r3
   819c4:	4b08      	ldr	r3, [pc, #32]	; (819e8 <Cl_alarms_scanforAlarms+0x4f0>)
   819c6:	4413      	add	r3, r2
   819c8:	222e      	movs	r2, #46	; 0x2e
   819ca:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   819cc:	4b09      	ldr	r3, [pc, #36]	; (819f4 <Cl_alarms_scanforAlarms+0x4fc>)
   819ce:	4798      	blx	r3
   819d0:	4603      	mov	r3, r0
   819d2:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   819d4:	79fb      	ldrb	r3, [r7, #7]
   819d6:	2b00      	cmp	r3, #0
   819d8:	d01f      	beq.n	81a1a <Cl_alarms_scanforAlarms+0x522>
   819da:	4b07      	ldr	r3, [pc, #28]	; (819f8 <Cl_alarms_scanforAlarms+0x500>)
   819dc:	4798      	blx	r3
   819de:	e01c      	b.n	81a1a <Cl_alarms_scanforAlarms+0x522>
   819e0:	20071cfc 	.word	0x20071cfc
   819e4:	2007221c 	.word	0x2007221c
   819e8:	200722b8 	.word	0x200722b8
   819ec:	20071729 	.word	0x20071729
   819f0:	200720f0 	.word	0x200720f0
   819f4:	00082d15 	.word	0x00082d15
   819f8:	00088e75 	.word	0x00088e75
   819fc:	200720f4 	.word	0x200720f4
   81a00:	200720ec 	.word	0x200720ec
   81a04:	000a68cd 	.word	0x000a68cd
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81a08:	4b93      	ldr	r3, [pc, #588]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a0a:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   81a0e:	2b01      	cmp	r3, #1
   81a10:	d103      	bne.n	81a1a <Cl_alarms_scanforAlarms+0x522>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81a12:	4b91      	ldr	r3, [pc, #580]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a14:	2204      	movs	r2, #4
   81a16:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   81a1a:	4b8f      	ldr	r3, [pc, #572]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a1c:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   81a20:	2b00      	cmp	r3, #0
   81a22:	d042      	beq.n	81aaa <Cl_alarms_scanforAlarms+0x5b2>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
   81a24:	220b      	movs	r2, #11
   81a26:	498d      	ldr	r1, [pc, #564]	; (81c5c <Cl_alarms_scanforAlarms+0x764>)
   81a28:	2018      	movs	r0, #24
   81a2a:	4b8d      	ldr	r3, [pc, #564]	; (81c60 <Cl_alarms_scanforAlarms+0x768>)
   81a2c:	4798      	blx	r3
		if(apt < Cl_alarmThresholdTable.apt_low_threshold)
   81a2e:	4b8d      	ldr	r3, [pc, #564]	; (81c64 <Cl_alarms_scanforAlarms+0x76c>)
   81a30:	68da      	ldr	r2, [r3, #12]
   81a32:	4b8d      	ldr	r3, [pc, #564]	; (81c68 <Cl_alarms_scanforAlarms+0x770>)
   81a34:	6819      	ldr	r1, [r3, #0]
   81a36:	4b8d      	ldr	r3, [pc, #564]	; (81c6c <Cl_alarms_scanforAlarms+0x774>)
   81a38:	4610      	mov	r0, r2
   81a3a:	4798      	blx	r3
   81a3c:	4603      	mov	r3, r0
   81a3e:	2b00      	cmp	r3, #0
   81a40:	d02a      	beq.n	81a98 <Cl_alarms_scanforAlarms+0x5a0>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81a42:	4b85      	ldr	r3, [pc, #532]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a44:	2201      	movs	r2, #1
   81a46:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81a4a:	4b89      	ldr	r3, [pc, #548]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81a4c:	781b      	ldrb	r3, [r3, #0]
   81a4e:	4a88      	ldr	r2, [pc, #544]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81a50:	3301      	adds	r3, #1
   81a52:	00db      	lsls	r3, r3, #3
   81a54:	4413      	add	r3, r2
   81a56:	2223      	movs	r2, #35	; 0x23
   81a58:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81a5a:	4b7f      	ldr	r3, [pc, #508]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a5c:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81a60:	3301      	adds	r3, #1
   81a62:	b2da      	uxtb	r2, r3
   81a64:	4b7c      	ldr	r3, [pc, #496]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a66:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81a6a:	4b82      	ldr	r3, [pc, #520]	; (81c74 <Cl_alarms_scanforAlarms+0x77c>)
   81a6c:	2201      	movs	r2, #1
   81a6e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81a70:	4b81      	ldr	r3, [pc, #516]	; (81c78 <Cl_alarms_scanforAlarms+0x780>)
   81a72:	2223      	movs	r2, #35	; 0x23
   81a74:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a76:	4b7e      	ldr	r3, [pc, #504]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81a78:	781b      	ldrb	r3, [r3, #0]
   81a7a:	461a      	mov	r2, r3
   81a7c:	4b7c      	ldr	r3, [pc, #496]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81a7e:	4413      	add	r3, r2
   81a80:	222e      	movs	r2, #46	; 0x2e
   81a82:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a84:	4b7d      	ldr	r3, [pc, #500]	; (81c7c <Cl_alarms_scanforAlarms+0x784>)
   81a86:	4798      	blx	r3
   81a88:	4603      	mov	r3, r0
   81a8a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81a8c:	79fb      	ldrb	r3, [r7, #7]
   81a8e:	2b00      	cmp	r3, #0
   81a90:	d00b      	beq.n	81aaa <Cl_alarms_scanforAlarms+0x5b2>
   81a92:	4b7b      	ldr	r3, [pc, #492]	; (81c80 <Cl_alarms_scanforAlarms+0x788>)
   81a94:	4798      	blx	r3
   81a96:	e008      	b.n	81aaa <Cl_alarms_scanforAlarms+0x5b2>
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81a98:	4b6f      	ldr	r3, [pc, #444]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81a9a:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81a9e:	2b01      	cmp	r3, #1
   81aa0:	d103      	bne.n	81aaa <Cl_alarms_scanforAlarms+0x5b2>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81aa2:	4b6d      	ldr	r3, [pc, #436]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81aa4:	2204      	movs	r2, #4
   81aa6:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81aaa:	4b6b      	ldr	r3, [pc, #428]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81aac:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81ab0:	2b00      	cmp	r3, #0
   81ab2:	d047      	beq.n	81b44 <Cl_alarms_scanforAlarms+0x64c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81ab4:	2207      	movs	r2, #7
   81ab6:	4973      	ldr	r1, [pc, #460]	; (81c84 <Cl_alarms_scanforAlarms+0x78c>)
   81ab8:	2018      	movs	r0, #24
   81aba:	4b69      	ldr	r3, [pc, #420]	; (81c60 <Cl_alarms_scanforAlarms+0x768>)
   81abc:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   81abe:	79fb      	ldrb	r3, [r7, #7]
   81ac0:	2b00      	cmp	r3, #0
   81ac2:	d001      	beq.n	81ac8 <Cl_alarms_scanforAlarms+0x5d0>
   81ac4:	4b6e      	ldr	r3, [pc, #440]	; (81c80 <Cl_alarms_scanforAlarms+0x788>)
   81ac6:	4798      	blx	r3
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81ac8:	4b66      	ldr	r3, [pc, #408]	; (81c64 <Cl_alarms_scanforAlarms+0x76c>)
   81aca:	691a      	ldr	r2, [r3, #16]
   81acc:	4b6e      	ldr	r3, [pc, #440]	; (81c88 <Cl_alarms_scanforAlarms+0x790>)
   81ace:	6819      	ldr	r1, [r3, #0]
   81ad0:	4b6e      	ldr	r3, [pc, #440]	; (81c8c <Cl_alarms_scanforAlarms+0x794>)
   81ad2:	4610      	mov	r0, r2
   81ad4:	4798      	blx	r3
   81ad6:	4603      	mov	r3, r0
   81ad8:	2b00      	cmp	r3, #0
   81ada:	d02a      	beq.n	81b32 <Cl_alarms_scanforAlarms+0x63a>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81adc:	4b5e      	ldr	r3, [pc, #376]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81ade:	2201      	movs	r2, #1
   81ae0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81ae4:	4b62      	ldr	r3, [pc, #392]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81ae6:	781b      	ldrb	r3, [r3, #0]
   81ae8:	4a61      	ldr	r2, [pc, #388]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81aea:	3301      	adds	r3, #1
   81aec:	00db      	lsls	r3, r3, #3
   81aee:	4413      	add	r3, r2
   81af0:	2226      	movs	r2, #38	; 0x26
   81af2:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81af4:	4b58      	ldr	r3, [pc, #352]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81af6:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   81afa:	3301      	adds	r3, #1
   81afc:	b2da      	uxtb	r2, r3
   81afe:	4b56      	ldr	r3, [pc, #344]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b00:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   81b04:	4b5b      	ldr	r3, [pc, #364]	; (81c74 <Cl_alarms_scanforAlarms+0x77c>)
   81b06:	2201      	movs	r2, #1
   81b08:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   81b0a:	4b5b      	ldr	r3, [pc, #364]	; (81c78 <Cl_alarms_scanforAlarms+0x780>)
   81b0c:	2226      	movs	r2, #38	; 0x26
   81b0e:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b10:	4b57      	ldr	r3, [pc, #348]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b12:	781b      	ldrb	r3, [r3, #0]
   81b14:	461a      	mov	r2, r3
   81b16:	4b56      	ldr	r3, [pc, #344]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b18:	4413      	add	r3, r2
   81b1a:	222e      	movs	r2, #46	; 0x2e
   81b1c:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81b1e:	4b57      	ldr	r3, [pc, #348]	; (81c7c <Cl_alarms_scanforAlarms+0x784>)
   81b20:	4798      	blx	r3
   81b22:	4603      	mov	r3, r0
   81b24:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81b26:	79fb      	ldrb	r3, [r7, #7]
   81b28:	2b00      	cmp	r3, #0
   81b2a:	d00b      	beq.n	81b44 <Cl_alarms_scanforAlarms+0x64c>
   81b2c:	4b54      	ldr	r3, [pc, #336]	; (81c80 <Cl_alarms_scanforAlarms+0x788>)
   81b2e:	4798      	blx	r3
   81b30:	e008      	b.n	81b44 <Cl_alarms_scanforAlarms+0x64c>
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81b32:	4b49      	ldr	r3, [pc, #292]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b34:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81b38:	2b01      	cmp	r3, #1
   81b3a:	d103      	bne.n	81b44 <Cl_alarms_scanforAlarms+0x64c>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81b3c:	4b46      	ldr	r3, [pc, #280]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b3e:	2204      	movs	r2, #4
   81b40:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   81b44:	4b44      	ldr	r3, [pc, #272]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b46:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81b4a:	2b00      	cmp	r3, #0
   81b4c:	d03d      	beq.n	81bca <Cl_alarms_scanforAlarms+0x6d2>
	{
		
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   81b4e:	4b45      	ldr	r3, [pc, #276]	; (81c64 <Cl_alarms_scanforAlarms+0x76c>)
   81b50:	695a      	ldr	r2, [r3, #20]
   81b52:	4b4d      	ldr	r3, [pc, #308]	; (81c88 <Cl_alarms_scanforAlarms+0x790>)
   81b54:	6819      	ldr	r1, [r3, #0]
   81b56:	4b45      	ldr	r3, [pc, #276]	; (81c6c <Cl_alarms_scanforAlarms+0x774>)
   81b58:	4610      	mov	r0, r2
   81b5a:	4798      	blx	r3
   81b5c:	4603      	mov	r3, r0
   81b5e:	2b00      	cmp	r3, #0
   81b60:	d02a      	beq.n	81bb8 <Cl_alarms_scanforAlarms+0x6c0>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81b62:	4b3d      	ldr	r3, [pc, #244]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b64:	2201      	movs	r2, #1
   81b66:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   81b6a:	4b41      	ldr	r3, [pc, #260]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b6c:	781b      	ldrb	r3, [r3, #0]
   81b6e:	4a40      	ldr	r2, [pc, #256]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b70:	3301      	adds	r3, #1
   81b72:	00db      	lsls	r3, r3, #3
   81b74:	4413      	add	r3, r2
   81b76:	2225      	movs	r2, #37	; 0x25
   81b78:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   81b7a:	4b37      	ldr	r3, [pc, #220]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b7c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81b80:	3301      	adds	r3, #1
   81b82:	b2da      	uxtb	r2, r3
   81b84:	4b34      	ldr	r3, [pc, #208]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81b86:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   81b8a:	4b3a      	ldr	r3, [pc, #232]	; (81c74 <Cl_alarms_scanforAlarms+0x77c>)
   81b8c:	2201      	movs	r2, #1
   81b8e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   81b90:	4b39      	ldr	r3, [pc, #228]	; (81c78 <Cl_alarms_scanforAlarms+0x780>)
   81b92:	2226      	movs	r2, #38	; 0x26
   81b94:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b96:	4b36      	ldr	r3, [pc, #216]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b98:	781b      	ldrb	r3, [r3, #0]
   81b9a:	461a      	mov	r2, r3
   81b9c:	4b34      	ldr	r3, [pc, #208]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81b9e:	4413      	add	r3, r2
   81ba0:	222e      	movs	r2, #46	; 0x2e
   81ba2:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ba4:	4b35      	ldr	r3, [pc, #212]	; (81c7c <Cl_alarms_scanforAlarms+0x784>)
   81ba6:	4798      	blx	r3
   81ba8:	4603      	mov	r3, r0
   81baa:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81bac:	79fb      	ldrb	r3, [r7, #7]
   81bae:	2b00      	cmp	r3, #0
   81bb0:	d00b      	beq.n	81bca <Cl_alarms_scanforAlarms+0x6d2>
   81bb2:	4b33      	ldr	r3, [pc, #204]	; (81c80 <Cl_alarms_scanforAlarms+0x788>)
   81bb4:	4798      	blx	r3
   81bb6:	e008      	b.n	81bca <Cl_alarms_scanforAlarms+0x6d2>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81bb8:	4b27      	ldr	r3, [pc, #156]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81bba:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   81bbe:	2b01      	cmp	r3, #1
   81bc0:	d103      	bne.n	81bca <Cl_alarms_scanforAlarms+0x6d2>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81bc2:	4b25      	ldr	r3, [pc, #148]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81bc4:	2204      	movs	r2, #4
   81bc6:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   81bca:	4b23      	ldr	r3, [pc, #140]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81bcc:	7f9b      	ldrb	r3, [r3, #30]
   81bce:	2b00      	cmp	r3, #0
   81bd0:	d061      	beq.n	81c96 <Cl_alarms_scanforAlarms+0x79e>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81bd2:	4b21      	ldr	r3, [pc, #132]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81bd4:	7c5b      	ldrb	r3, [r3, #17]
   81bd6:	2b01      	cmp	r3, #1
   81bd8:	d103      	bne.n	81be2 <Cl_alarms_scanforAlarms+0x6ea>
   81bda:	4b2d      	ldr	r3, [pc, #180]	; (81c90 <Cl_alarms_scanforAlarms+0x798>)
   81bdc:	781b      	ldrb	r3, [r3, #0]
   81bde:	2b00      	cmp	r3, #0
   81be0:	d10a      	bne.n	81bf8 <Cl_alarms_scanforAlarms+0x700>
   81be2:	4b1d      	ldr	r3, [pc, #116]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81be4:	7c5b      	ldrb	r3, [r3, #17]
   81be6:	2b00      	cmp	r3, #0
   81be8:	d132      	bne.n	81c50 <Cl_alarms_scanforAlarms+0x758>
   81bea:	4b29      	ldr	r3, [pc, #164]	; (81c90 <Cl_alarms_scanforAlarms+0x798>)
   81bec:	781b      	ldrb	r3, [r3, #0]
   81bee:	f083 0301 	eor.w	r3, r3, #1
   81bf2:	b2db      	uxtb	r3, r3
   81bf4:	2b00      	cmp	r3, #0
   81bf6:	d02b      	beq.n	81c50 <Cl_alarms_scanforAlarms+0x758>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81bf8:	4b17      	ldr	r3, [pc, #92]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81bfa:	7c9b      	ldrb	r3, [r3, #18]
   81bfc:	2b01      	cmp	r3, #1
   81bfe:	d049      	beq.n	81c94 <Cl_alarms_scanforAlarms+0x79c>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81c00:	4b15      	ldr	r3, [pc, #84]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81c02:	2201      	movs	r2, #1
   81c04:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81c06:	4b1a      	ldr	r3, [pc, #104]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81c08:	781b      	ldrb	r3, [r3, #0]
   81c0a:	4a19      	ldr	r2, [pc, #100]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81c0c:	3301      	adds	r3, #1
   81c0e:	00db      	lsls	r3, r3, #3
   81c10:	4413      	add	r3, r2
   81c12:	2201      	movs	r2, #1
   81c14:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81c16:	4b10      	ldr	r3, [pc, #64]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81c18:	7f5b      	ldrb	r3, [r3, #29]
   81c1a:	3301      	adds	r3, #1
   81c1c:	b2da      	uxtb	r2, r3
   81c1e:	4b0e      	ldr	r3, [pc, #56]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81c20:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81c22:	4b14      	ldr	r3, [pc, #80]	; (81c74 <Cl_alarms_scanforAlarms+0x77c>)
   81c24:	2201      	movs	r2, #1
   81c26:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   81c28:	4b13      	ldr	r3, [pc, #76]	; (81c78 <Cl_alarms_scanforAlarms+0x780>)
   81c2a:	2201      	movs	r2, #1
   81c2c:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c2e:	4b10      	ldr	r3, [pc, #64]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81c30:	781b      	ldrb	r3, [r3, #0]
   81c32:	461a      	mov	r2, r3
   81c34:	4b0e      	ldr	r3, [pc, #56]	; (81c70 <Cl_alarms_scanforAlarms+0x778>)
   81c36:	4413      	add	r3, r2
   81c38:	222e      	movs	r2, #46	; 0x2e
   81c3a:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81c3c:	4b0f      	ldr	r3, [pc, #60]	; (81c7c <Cl_alarms_scanforAlarms+0x784>)
   81c3e:	4798      	blx	r3
   81c40:	4603      	mov	r3, r0
   81c42:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81c44:	79fb      	ldrb	r3, [r7, #7]
   81c46:	2b00      	cmp	r3, #0
   81c48:	d024      	beq.n	81c94 <Cl_alarms_scanforAlarms+0x79c>
   81c4a:	4b0d      	ldr	r3, [pc, #52]	; (81c80 <Cl_alarms_scanforAlarms+0x788>)
   81c4c:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81c4e:	e021      	b.n	81c94 <Cl_alarms_scanforAlarms+0x79c>

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81c50:	4b01      	ldr	r3, [pc, #4]	; (81c58 <Cl_alarms_scanforAlarms+0x760>)
   81c52:	2204      	movs	r2, #4
   81c54:	749a      	strb	r2, [r3, #18]
   81c56:	e01e      	b.n	81c96 <Cl_alarms_scanforAlarms+0x79e>
   81c58:	20071cfc 	.word	0x20071cfc
   81c5c:	000a8590 	.word	0x000a8590
   81c60:	0009b805 	.word	0x0009b805
   81c64:	200720f4 	.word	0x200720f4
   81c68:	200720ec 	.word	0x200720ec
   81c6c:	000a6909 	.word	0x000a6909
   81c70:	200722b8 	.word	0x200722b8
   81c74:	20071729 	.word	0x20071729
   81c78:	200720f0 	.word	0x200720f0
   81c7c:	00082d15 	.word	0x00082d15
   81c80:	00088e75 	.word	0x00088e75
   81c84:	000a859c 	.word	0x000a859c
   81c88:	2007172c 	.word	0x2007172c
   81c8c:	000a68cd 	.word	0x000a68cd
   81c90:	2007221c 	.word	0x2007221c
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81c94:	bf00      	nop
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   81c96:	4b94      	ldr	r3, [pc, #592]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81c98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81c9c:	2b00      	cmp	r3, #0
   81c9e:	d045      	beq.n	81d2c <Cl_alarms_scanforAlarms+0x834>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81ca0:	4b91      	ldr	r3, [pc, #580]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81ca6:	2b01      	cmp	r3, #1
   81ca8:	d104      	bne.n	81cb4 <Cl_alarms_scanforAlarms+0x7bc>
   81caa:	4b90      	ldr	r3, [pc, #576]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81cac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81cb0:	2b00      	cmp	r3, #0
   81cb2:	d10c      	bne.n	81cce <Cl_alarms_scanforAlarms+0x7d6>
   81cb4:	4b8c      	ldr	r3, [pc, #560]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81cb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81cba:	2b00      	cmp	r3, #0
   81cbc:	d132      	bne.n	81d24 <Cl_alarms_scanforAlarms+0x82c>
   81cbe:	4b8b      	ldr	r3, [pc, #556]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81cc4:	f083 0301 	eor.w	r3, r3, #1
   81cc8:	b2db      	uxtb	r3, r3
   81cca:	2b00      	cmp	r3, #0
   81ccc:	d02a      	beq.n	81d24 <Cl_alarms_scanforAlarms+0x82c>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81cce:	4b86      	ldr	r3, [pc, #536]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81cd0:	2201      	movs	r2, #1
   81cd2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   81cd6:	4b86      	ldr	r3, [pc, #536]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81cd8:	781b      	ldrb	r3, [r3, #0]
   81cda:	4a85      	ldr	r2, [pc, #532]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81cdc:	3301      	adds	r3, #1
   81cde:	00db      	lsls	r3, r3, #3
   81ce0:	4413      	add	r3, r2
   81ce2:	2203      	movs	r2, #3
   81ce4:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   81ce6:	4b80      	ldr	r3, [pc, #512]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81cec:	3301      	adds	r3, #1
   81cee:	b2da      	uxtb	r2, r3
   81cf0:	4b7d      	ldr	r3, [pc, #500]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   81cf6:	4b7f      	ldr	r3, [pc, #508]	; (81ef4 <Cl_alarms_scanforAlarms+0x9fc>)
   81cf8:	2201      	movs	r2, #1
   81cfa:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81cfc:	4b7e      	ldr	r3, [pc, #504]	; (81ef8 <Cl_alarms_scanforAlarms+0xa00>)
   81cfe:	2203      	movs	r2, #3
   81d00:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d02:	4b7b      	ldr	r3, [pc, #492]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81d04:	781b      	ldrb	r3, [r3, #0]
   81d06:	461a      	mov	r2, r3
   81d08:	4b79      	ldr	r3, [pc, #484]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81d0a:	4413      	add	r3, r2
   81d0c:	222e      	movs	r2, #46	; 0x2e
   81d0e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d10:	4b7a      	ldr	r3, [pc, #488]	; (81efc <Cl_alarms_scanforAlarms+0xa04>)
   81d12:	4798      	blx	r3
   81d14:	4603      	mov	r3, r0
   81d16:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81d18:	79fb      	ldrb	r3, [r7, #7]
   81d1a:	2b00      	cmp	r3, #0
   81d1c:	d006      	beq.n	81d2c <Cl_alarms_scanforAlarms+0x834>
   81d1e:	4b78      	ldr	r3, [pc, #480]	; (81f00 <Cl_alarms_scanforAlarms+0xa08>)
   81d20:	4798      	blx	r3
   81d22:	e003      	b.n	81d2c <Cl_alarms_scanforAlarms+0x834>
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   81d24:	4b70      	ldr	r3, [pc, #448]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d26:	2204      	movs	r2, #4
   81d28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81d2c:	4b6e      	ldr	r3, [pc, #440]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d2e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81d32:	2b00      	cmp	r3, #0
   81d34:	d045      	beq.n	81dc2 <Cl_alarms_scanforAlarms+0x8ca>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81d36:	4b6c      	ldr	r3, [pc, #432]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81d3c:	2b01      	cmp	r3, #1
   81d3e:	d104      	bne.n	81d4a <Cl_alarms_scanforAlarms+0x852>
   81d40:	4b6a      	ldr	r3, [pc, #424]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81d42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d46:	2b00      	cmp	r3, #0
   81d48:	d10c      	bne.n	81d64 <Cl_alarms_scanforAlarms+0x86c>
   81d4a:	4b67      	ldr	r3, [pc, #412]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81d50:	2b00      	cmp	r3, #0
   81d52:	d132      	bne.n	81dba <Cl_alarms_scanforAlarms+0x8c2>
   81d54:	4b65      	ldr	r3, [pc, #404]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d5a:	f083 0301 	eor.w	r3, r3, #1
   81d5e:	b2db      	uxtb	r3, r3
   81d60:	2b00      	cmp	r3, #0
   81d62:	d02a      	beq.n	81dba <Cl_alarms_scanforAlarms+0x8c2>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81d64:	4b60      	ldr	r3, [pc, #384]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d66:	2201      	movs	r2, #1
   81d68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81d6c:	4b60      	ldr	r3, [pc, #384]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81d6e:	781b      	ldrb	r3, [r3, #0]
   81d70:	4a5f      	ldr	r2, [pc, #380]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81d72:	3301      	adds	r3, #1
   81d74:	00db      	lsls	r3, r3, #3
   81d76:	4413      	add	r3, r2
   81d78:	2203      	movs	r2, #3
   81d7a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81d7c:	4b5a      	ldr	r3, [pc, #360]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   81d82:	3301      	adds	r3, #1
   81d84:	b2da      	uxtb	r2, r3
   81d86:	4b58      	ldr	r3, [pc, #352]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81d8c:	4b59      	ldr	r3, [pc, #356]	; (81ef4 <Cl_alarms_scanforAlarms+0x9fc>)
   81d8e:	2201      	movs	r2, #1
   81d90:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   81d92:	4b59      	ldr	r3, [pc, #356]	; (81ef8 <Cl_alarms_scanforAlarms+0xa00>)
   81d94:	2205      	movs	r2, #5
   81d96:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d98:	4b55      	ldr	r3, [pc, #340]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81d9a:	781b      	ldrb	r3, [r3, #0]
   81d9c:	461a      	mov	r2, r3
   81d9e:	4b54      	ldr	r3, [pc, #336]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81da0:	4413      	add	r3, r2
   81da2:	222e      	movs	r2, #46	; 0x2e
   81da4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81da6:	4b55      	ldr	r3, [pc, #340]	; (81efc <Cl_alarms_scanforAlarms+0xa04>)
   81da8:	4798      	blx	r3
   81daa:	4603      	mov	r3, r0
   81dac:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81dae:	79fb      	ldrb	r3, [r7, #7]
   81db0:	2b00      	cmp	r3, #0
   81db2:	d006      	beq.n	81dc2 <Cl_alarms_scanforAlarms+0x8ca>
   81db4:	4b52      	ldr	r3, [pc, #328]	; (81f00 <Cl_alarms_scanforAlarms+0xa08>)
   81db6:	4798      	blx	r3
   81db8:	e003      	b.n	81dc2 <Cl_alarms_scanforAlarms+0x8ca>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81dba:	4b4b      	ldr	r3, [pc, #300]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81dbc:	2204      	movs	r2, #4
   81dbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   81dc2:	4b49      	ldr	r3, [pc, #292]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81dc4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81dc8:	2b00      	cmp	r3, #0
   81dca:	d045      	beq.n	81e58 <Cl_alarms_scanforAlarms+0x960>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81dcc:	4b46      	ldr	r3, [pc, #280]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81dd2:	2b01      	cmp	r3, #1
   81dd4:	d104      	bne.n	81de0 <Cl_alarms_scanforAlarms+0x8e8>
   81dd6:	4b45      	ldr	r3, [pc, #276]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81ddc:	2b00      	cmp	r3, #0
   81dde:	d10c      	bne.n	81dfa <Cl_alarms_scanforAlarms+0x902>
   81de0:	4b41      	ldr	r3, [pc, #260]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81de6:	2b00      	cmp	r3, #0
   81de8:	d132      	bne.n	81e50 <Cl_alarms_scanforAlarms+0x958>
   81dea:	4b40      	ldr	r3, [pc, #256]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81df0:	f083 0301 	eor.w	r3, r3, #1
   81df4:	b2db      	uxtb	r3, r3
   81df6:	2b00      	cmp	r3, #0
   81df8:	d02a      	beq.n	81e50 <Cl_alarms_scanforAlarms+0x958>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81dfa:	4b3b      	ldr	r3, [pc, #236]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81dfc:	2201      	movs	r2, #1
   81dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81e02:	4b3b      	ldr	r3, [pc, #236]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e04:	781b      	ldrb	r3, [r3, #0]
   81e06:	4a3a      	ldr	r2, [pc, #232]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e08:	3301      	adds	r3, #1
   81e0a:	00db      	lsls	r3, r3, #3
   81e0c:	4413      	add	r3, r2
   81e0e:	2204      	movs	r2, #4
   81e10:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81e12:	4b35      	ldr	r3, [pc, #212]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e14:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81e18:	3301      	adds	r3, #1
   81e1a:	b2da      	uxtb	r2, r3
   81e1c:	4b32      	ldr	r3, [pc, #200]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81e22:	4b34      	ldr	r3, [pc, #208]	; (81ef4 <Cl_alarms_scanforAlarms+0x9fc>)
   81e24:	2201      	movs	r2, #1
   81e26:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81e28:	4b33      	ldr	r3, [pc, #204]	; (81ef8 <Cl_alarms_scanforAlarms+0xa00>)
   81e2a:	2204      	movs	r2, #4
   81e2c:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e2e:	4b30      	ldr	r3, [pc, #192]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e30:	781b      	ldrb	r3, [r3, #0]
   81e32:	461a      	mov	r2, r3
   81e34:	4b2e      	ldr	r3, [pc, #184]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e36:	4413      	add	r3, r2
   81e38:	222e      	movs	r2, #46	; 0x2e
   81e3a:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81e3c:	4b2f      	ldr	r3, [pc, #188]	; (81efc <Cl_alarms_scanforAlarms+0xa04>)
   81e3e:	4798      	blx	r3
   81e40:	4603      	mov	r3, r0
   81e42:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81e44:	79fb      	ldrb	r3, [r7, #7]
   81e46:	2b00      	cmp	r3, #0
   81e48:	d006      	beq.n	81e58 <Cl_alarms_scanforAlarms+0x960>
   81e4a:	4b2d      	ldr	r3, [pc, #180]	; (81f00 <Cl_alarms_scanforAlarms+0xa08>)
   81e4c:	4798      	blx	r3
   81e4e:	e003      	b.n	81e58 <Cl_alarms_scanforAlarms+0x960>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81e50:	4b25      	ldr	r3, [pc, #148]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e52:	2204      	movs	r2, #4
   81e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81e58:	4b23      	ldr	r3, [pc, #140]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e5a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81e5e:	2b00      	cmp	r3, #0
   81e60:	d054      	beq.n	81f0c <Cl_alarms_scanforAlarms+0xa14>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81e62:	4b21      	ldr	r3, [pc, #132]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e64:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81e68:	2b01      	cmp	r3, #1
   81e6a:	d104      	bne.n	81e76 <Cl_alarms_scanforAlarms+0x97e>
   81e6c:	4b1f      	ldr	r3, [pc, #124]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e72:	2b00      	cmp	r3, #0
   81e74:	d10c      	bne.n	81e90 <Cl_alarms_scanforAlarms+0x998>
   81e76:	4b1c      	ldr	r3, [pc, #112]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e78:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81e7c:	2b00      	cmp	r3, #0
   81e7e:	d141      	bne.n	81f04 <Cl_alarms_scanforAlarms+0xa0c>
   81e80:	4b1a      	ldr	r3, [pc, #104]	; (81eec <Cl_alarms_scanforAlarms+0x9f4>)
   81e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e86:	f083 0301 	eor.w	r3, r3, #1
   81e8a:	b2db      	uxtb	r3, r3
   81e8c:	2b00      	cmp	r3, #0
   81e8e:	d039      	beq.n	81f04 <Cl_alarms_scanforAlarms+0xa0c>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81e90:	4b15      	ldr	r3, [pc, #84]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81e92:	2201      	movs	r2, #1
   81e94:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81e98:	4b15      	ldr	r3, [pc, #84]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e9a:	781b      	ldrb	r3, [r3, #0]
   81e9c:	4a14      	ldr	r2, [pc, #80]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81e9e:	3301      	adds	r3, #1
   81ea0:	00db      	lsls	r3, r3, #3
   81ea2:	4413      	add	r3, r2
   81ea4:	2206      	movs	r2, #6
   81ea6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81ea8:	4b0f      	ldr	r3, [pc, #60]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81eaa:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81eae:	3301      	adds	r3, #1
   81eb0:	b2da      	uxtb	r2, r3
   81eb2:	4b0d      	ldr	r3, [pc, #52]	; (81ee8 <Cl_alarms_scanforAlarms+0x9f0>)
   81eb4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81eb8:	4b0e      	ldr	r3, [pc, #56]	; (81ef4 <Cl_alarms_scanforAlarms+0x9fc>)
   81eba:	2201      	movs	r2, #1
   81ebc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81ebe:	4b0e      	ldr	r3, [pc, #56]	; (81ef8 <Cl_alarms_scanforAlarms+0xa00>)
   81ec0:	2206      	movs	r2, #6
   81ec2:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ec4:	4b0a      	ldr	r3, [pc, #40]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81ec6:	781b      	ldrb	r3, [r3, #0]
   81ec8:	461a      	mov	r2, r3
   81eca:	4b09      	ldr	r3, [pc, #36]	; (81ef0 <Cl_alarms_scanforAlarms+0x9f8>)
   81ecc:	4413      	add	r3, r2
   81ece:	222e      	movs	r2, #46	; 0x2e
   81ed0:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ed2:	4b0a      	ldr	r3, [pc, #40]	; (81efc <Cl_alarms_scanforAlarms+0xa04>)
   81ed4:	4798      	blx	r3
   81ed6:	4603      	mov	r3, r0
   81ed8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81eda:	79fb      	ldrb	r3, [r7, #7]
   81edc:	2b00      	cmp	r3, #0
   81ede:	d015      	beq.n	81f0c <Cl_alarms_scanforAlarms+0xa14>
   81ee0:	4b07      	ldr	r3, [pc, #28]	; (81f00 <Cl_alarms_scanforAlarms+0xa08>)
   81ee2:	4798      	blx	r3
   81ee4:	e012      	b.n	81f0c <Cl_alarms_scanforAlarms+0xa14>
   81ee6:	bf00      	nop
   81ee8:	20071cfc 	.word	0x20071cfc
   81eec:	2007221c 	.word	0x2007221c
   81ef0:	200722b8 	.word	0x200722b8
   81ef4:	20071729 	.word	0x20071729
   81ef8:	200720f0 	.word	0x200720f0
   81efc:	00082d15 	.word	0x00082d15
   81f00:	00088e75 	.word	0x00088e75
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81f04:	4b97      	ldr	r3, [pc, #604]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f06:	2204      	movs	r2, #4
   81f08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   81f0c:	4b96      	ldr	r3, [pc, #600]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81f0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   81f10:	2b00      	cmp	r3, #0
   81f12:	d002      	beq.n	81f1a <Cl_alarms_scanforAlarms+0xa22>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   81f14:	4b95      	ldr	r3, [pc, #596]	; (8216c <Cl_alarms_scanforAlarms+0xc74>)
   81f16:	2201      	movs	r2, #1
   81f18:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   81f1a:	4b93      	ldr	r3, [pc, #588]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81f1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d102      	bne.n	81f28 <Cl_alarms_scanforAlarms+0xa30>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   81f22:	4b92      	ldr	r3, [pc, #584]	; (8216c <Cl_alarms_scanforAlarms+0xc74>)
   81f24:	2202      	movs	r2, #2
   81f26:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   81f28:	4b8e      	ldr	r3, [pc, #568]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f2a:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d046      	beq.n	81fc0 <Cl_alarms_scanforAlarms+0xac8>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81f32:	4b8d      	ldr	r3, [pc, #564]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81f34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81f38:	2b00      	cmp	r3, #0
   81f3a:	d004      	beq.n	81f46 <Cl_alarms_scanforAlarms+0xa4e>
   81f3c:	4b89      	ldr	r3, [pc, #548]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f3e:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81f42:	2b01      	cmp	r3, #1
   81f44:	d00c      	beq.n	81f60 <Cl_alarms_scanforAlarms+0xa68>
   81f46:	4b88      	ldr	r3, [pc, #544]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81f48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81f4c:	f083 0301 	eor.w	r3, r3, #1
   81f50:	b2db      	uxtb	r3, r3
   81f52:	2b00      	cmp	r3, #0
   81f54:	d034      	beq.n	81fc0 <Cl_alarms_scanforAlarms+0xac8>
   81f56:	4b83      	ldr	r3, [pc, #524]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f58:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81f5c:	2b00      	cmp	r3, #0
   81f5e:	d12f      	bne.n	81fc0 <Cl_alarms_scanforAlarms+0xac8>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   81f60:	4b80      	ldr	r3, [pc, #512]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f62:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   81f66:	2b01      	cmp	r3, #1
   81f68:	d020      	beq.n	81fac <Cl_alarms_scanforAlarms+0xab4>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   81f6a:	4b7e      	ldr	r3, [pc, #504]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f6c:	2202      	movs	r2, #2
   81f6e:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   81f72:	4b7c      	ldr	r3, [pc, #496]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81f74:	2201      	movs	r2, #1
   81f76:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   81f7a:	4b7d      	ldr	r3, [pc, #500]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   81f7c:	781b      	ldrb	r3, [r3, #0]
   81f7e:	4a7c      	ldr	r2, [pc, #496]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   81f80:	3301      	adds	r3, #1
   81f82:	00db      	lsls	r3, r3, #3
   81f84:	4413      	add	r3, r2
   81f86:	223d      	movs	r2, #61	; 0x3d
   81f88:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   81f8a:	4b7a      	ldr	r3, [pc, #488]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   81f8c:	2201      	movs	r2, #1
   81f8e:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   81f90:	4b79      	ldr	r3, [pc, #484]	; (82178 <Cl_alarms_scanforAlarms+0xc80>)
   81f92:	223d      	movs	r2, #61	; 0x3d
   81f94:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f96:	4b76      	ldr	r3, [pc, #472]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   81f98:	781b      	ldrb	r3, [r3, #0]
   81f9a:	461a      	mov	r2, r3
   81f9c:	4b74      	ldr	r3, [pc, #464]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   81f9e:	4413      	add	r3, r2
   81fa0:	222e      	movs	r2, #46	; 0x2e
   81fa2:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   81fa4:	4b75      	ldr	r3, [pc, #468]	; (8217c <Cl_alarms_scanforAlarms+0xc84>)
   81fa6:	2201      	movs	r2, #1
   81fa8:	701a      	strb	r2, [r3, #0]
   81faa:	e006      	b.n	81fba <Cl_alarms_scanforAlarms+0xac2>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   81fac:	4b6d      	ldr	r3, [pc, #436]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81fae:	2200      	movs	r2, #0
   81fb0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   81fb4:	4b6f      	ldr	r3, [pc, #444]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   81fb6:	2200      	movs	r2, #0
   81fb8:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   81fba:	4b71      	ldr	r3, [pc, #452]	; (82180 <Cl_alarms_scanforAlarms+0xc88>)
   81fbc:	2200      	movs	r2, #0
   81fbe:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   81fc0:	4b68      	ldr	r3, [pc, #416]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81fc2:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   81fc6:	2b00      	cmp	r3, #0
   81fc8:	d043      	beq.n	82052 <Cl_alarms_scanforAlarms+0xb5a>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   81fca:	4b67      	ldr	r3, [pc, #412]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81fcc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81fd0:	2b00      	cmp	r3, #0
   81fd2:	d004      	beq.n	81fde <Cl_alarms_scanforAlarms+0xae6>
   81fd4:	4b63      	ldr	r3, [pc, #396]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81fd6:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81fda:	2b01      	cmp	r3, #1
   81fdc:	d00c      	beq.n	81ff8 <Cl_alarms_scanforAlarms+0xb00>
   81fde:	4b62      	ldr	r3, [pc, #392]	; (82168 <Cl_alarms_scanforAlarms+0xc70>)
   81fe0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81fe4:	f083 0301 	eor.w	r3, r3, #1
   81fe8:	b2db      	uxtb	r3, r3
   81fea:	2b00      	cmp	r3, #0
   81fec:	d031      	beq.n	82052 <Cl_alarms_scanforAlarms+0xb5a>
   81fee:	4b5d      	ldr	r3, [pc, #372]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81ff0:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   81ff4:	2b00      	cmp	r3, #0
   81ff6:	d12c      	bne.n	82052 <Cl_alarms_scanforAlarms+0xb5a>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   81ff8:	4b5a      	ldr	r3, [pc, #360]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   81ffa:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   81ffe:	2b01      	cmp	r3, #1
   82000:	d01d      	beq.n	8203e <Cl_alarms_scanforAlarms+0xb46>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   82002:	4b58      	ldr	r3, [pc, #352]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82004:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82008:	2b00      	cmp	r3, #0
   8200a:	d01f      	beq.n	8204c <Cl_alarms_scanforAlarms+0xb54>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   8200c:	4b55      	ldr	r3, [pc, #340]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   8200e:	2202      	movs	r2, #2
   82010:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   82014:	4b53      	ldr	r3, [pc, #332]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82016:	2201      	movs	r2, #1
   82018:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   8201c:	4b55      	ldr	r3, [pc, #340]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   8201e:	2201      	movs	r2, #1
   82020:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   82022:	4b55      	ldr	r3, [pc, #340]	; (82178 <Cl_alarms_scanforAlarms+0xc80>)
   82024:	223e      	movs	r2, #62	; 0x3e
   82026:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82028:	4b51      	ldr	r3, [pc, #324]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   8202a:	781b      	ldrb	r3, [r3, #0]
   8202c:	461a      	mov	r2, r3
   8202e:	4b50      	ldr	r3, [pc, #320]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   82030:	4413      	add	r3, r2
   82032:	222e      	movs	r2, #46	; 0x2e
   82034:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   82036:	4b51      	ldr	r3, [pc, #324]	; (8217c <Cl_alarms_scanforAlarms+0xc84>)
   82038:	2202      	movs	r2, #2
   8203a:	701a      	strb	r2, [r3, #0]
   8203c:	e006      	b.n	8204c <Cl_alarms_scanforAlarms+0xb54>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   8203e:	4b49      	ldr	r3, [pc, #292]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82040:	2200      	movs	r2, #0
   82042:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   82046:	4b4b      	ldr	r3, [pc, #300]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   82048:	2200      	movs	r2, #0
   8204a:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   8204c:	4b4c      	ldr	r3, [pc, #304]	; (82180 <Cl_alarms_scanforAlarms+0xc88>)
   8204e:	2201      	movs	r2, #1
   82050:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   82052:	4b44      	ldr	r3, [pc, #272]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82054:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   82058:	2b00      	cmp	r3, #0
   8205a:	d043      	beq.n	820e4 <Cl_alarms_scanforAlarms+0xbec>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8205c:	4b41      	ldr	r3, [pc, #260]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   8205e:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   82062:	2b01      	cmp	r3, #1
   82064:	d035      	beq.n	820d2 <Cl_alarms_scanforAlarms+0xbda>
		{
				if(ps1 > Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_upper)
   82066:	4b3f      	ldr	r3, [pc, #252]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82068:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   8206c:	4b45      	ldr	r3, [pc, #276]	; (82184 <Cl_alarms_scanforAlarms+0xc8c>)
   8206e:	6819      	ldr	r1, [r3, #0]
   82070:	4b45      	ldr	r3, [pc, #276]	; (82188 <Cl_alarms_scanforAlarms+0xc90>)
   82072:	4610      	mov	r0, r2
   82074:	4798      	blx	r3
   82076:	4603      	mov	r3, r0
   82078:	2b00      	cmp	r3, #0
   8207a:	d033      	beq.n	820e4 <Cl_alarms_scanforAlarms+0xbec>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   8207c:	4b39      	ldr	r3, [pc, #228]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   8207e:	2201      	movs	r2, #1
   82080:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   82084:	4b3a      	ldr	r3, [pc, #232]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   82086:	781b      	ldrb	r3, [r3, #0]
   82088:	4a39      	ldr	r2, [pc, #228]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   8208a:	3301      	adds	r3, #1
   8208c:	00db      	lsls	r3, r3, #3
   8208e:	4413      	add	r3, r2
   82090:	2215      	movs	r2, #21
   82092:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   82094:	4b33      	ldr	r3, [pc, #204]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82096:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   8209a:	3301      	adds	r3, #1
   8209c:	b2da      	uxtb	r2, r3
   8209e:	4b31      	ldr	r3, [pc, #196]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820a0:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   820a4:	4b33      	ldr	r3, [pc, #204]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   820a6:	2201      	movs	r2, #1
   820a8:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   820aa:	4b33      	ldr	r3, [pc, #204]	; (82178 <Cl_alarms_scanforAlarms+0xc80>)
   820ac:	2215      	movs	r2, #21
   820ae:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   820b0:	4b2f      	ldr	r3, [pc, #188]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   820b2:	781b      	ldrb	r3, [r3, #0]
   820b4:	461a      	mov	r2, r3
   820b6:	4b2e      	ldr	r3, [pc, #184]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   820b8:	4413      	add	r3, r2
   820ba:	222e      	movs	r2, #46	; 0x2e
   820bc:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   820be:	4b33      	ldr	r3, [pc, #204]	; (8218c <Cl_alarms_scanforAlarms+0xc94>)
   820c0:	4798      	blx	r3
   820c2:	4603      	mov	r3, r0
   820c4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   820c6:	79fb      	ldrb	r3, [r7, #7]
   820c8:	2b00      	cmp	r3, #0
   820ca:	d00b      	beq.n	820e4 <Cl_alarms_scanforAlarms+0xbec>
   820cc:	4b30      	ldr	r3, [pc, #192]	; (82190 <Cl_alarms_scanforAlarms+0xc98>)
   820ce:	4798      	blx	r3
   820d0:	e008      	b.n	820e4 <Cl_alarms_scanforAlarms+0xbec>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   820d2:	4b24      	ldr	r3, [pc, #144]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820d4:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   820d8:	2b01      	cmp	r3, #1
   820da:	d103      	bne.n	820e4 <Cl_alarms_scanforAlarms+0xbec>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   820dc:	4b21      	ldr	r3, [pc, #132]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820de:	2204      	movs	r2, #4
   820e0:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   820e4:	4b1f      	ldr	r3, [pc, #124]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820e6:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   820ea:	2b00      	cmp	r3, #0
   820ec:	d05d      	beq.n	821aa <Cl_alarms_scanforAlarms+0xcb2>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   820ee:	4b1d      	ldr	r3, [pc, #116]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820f0:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   820f4:	2b01      	cmp	r3, #1
   820f6:	d04f      	beq.n	82198 <Cl_alarms_scanforAlarms+0xca0>
	{
		if(ps1 < Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_lower)
   820f8:	4b1a      	ldr	r3, [pc, #104]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   820fa:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   820fe:	4b21      	ldr	r3, [pc, #132]	; (82184 <Cl_alarms_scanforAlarms+0xc8c>)
   82100:	6819      	ldr	r1, [r3, #0]
   82102:	4b24      	ldr	r3, [pc, #144]	; (82194 <Cl_alarms_scanforAlarms+0xc9c>)
   82104:	4610      	mov	r0, r2
   82106:	4798      	blx	r3
   82108:	4603      	mov	r3, r0
   8210a:	2b00      	cmp	r3, #0
   8210c:	d04d      	beq.n	821aa <Cl_alarms_scanforAlarms+0xcb2>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8210e:	4b15      	ldr	r3, [pc, #84]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82110:	2201      	movs	r2, #1
   82112:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   82116:	4b16      	ldr	r3, [pc, #88]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   82118:	781b      	ldrb	r3, [r3, #0]
   8211a:	4a15      	ldr	r2, [pc, #84]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   8211c:	3301      	adds	r3, #1
   8211e:	00db      	lsls	r3, r3, #3
   82120:	4413      	add	r3, r2
   82122:	2216      	movs	r2, #22
   82124:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   82126:	4b0f      	ldr	r3, [pc, #60]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82128:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   8212c:	3301      	adds	r3, #1
   8212e:	b2da      	uxtb	r2, r3
   82130:	4b0c      	ldr	r3, [pc, #48]	; (82164 <Cl_alarms_scanforAlarms+0xc6c>)
   82132:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   82136:	4b0f      	ldr	r3, [pc, #60]	; (82174 <Cl_alarms_scanforAlarms+0xc7c>)
   82138:	2201      	movs	r2, #1
   8213a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   8213c:	4b0e      	ldr	r3, [pc, #56]	; (82178 <Cl_alarms_scanforAlarms+0xc80>)
   8213e:	2216      	movs	r2, #22
   82140:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82142:	4b0b      	ldr	r3, [pc, #44]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   82144:	781b      	ldrb	r3, [r3, #0]
   82146:	461a      	mov	r2, r3
   82148:	4b09      	ldr	r3, [pc, #36]	; (82170 <Cl_alarms_scanforAlarms+0xc78>)
   8214a:	4413      	add	r3, r2
   8214c:	222e      	movs	r2, #46	; 0x2e
   8214e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82150:	4b0e      	ldr	r3, [pc, #56]	; (8218c <Cl_alarms_scanforAlarms+0xc94>)
   82152:	4798      	blx	r3
   82154:	4603      	mov	r3, r0
   82156:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82158:	79fb      	ldrb	r3, [r7, #7]
   8215a:	2b00      	cmp	r3, #0
   8215c:	d025      	beq.n	821aa <Cl_alarms_scanforAlarms+0xcb2>
   8215e:	4b0c      	ldr	r3, [pc, #48]	; (82190 <Cl_alarms_scanforAlarms+0xc98>)
   82160:	4798      	blx	r3
   82162:	e022      	b.n	821aa <Cl_alarms_scanforAlarms+0xcb2>
   82164:	20071cfc 	.word	0x20071cfc
   82168:	2007221c 	.word	0x2007221c
   8216c:	20071ab4 	.word	0x20071ab4
   82170:	200722b8 	.word	0x200722b8
   82174:	20071729 	.word	0x20071729
   82178:	200720f0 	.word	0x200720f0
   8217c:	20071adc 	.word	0x20071adc
   82180:	20070100 	.word	0x20070100
   82184:	20071730 	.word	0x20071730
   82188:	000a68cd 	.word	0x000a68cd
   8218c:	00082d15 	.word	0x00082d15
   82190:	00088e75 	.word	0x00088e75
   82194:	000a6909 	.word	0x000a6909
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82198:	4b9b      	ldr	r3, [pc, #620]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8219a:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   8219e:	2b01      	cmp	r3, #1
   821a0:	d103      	bne.n	821aa <Cl_alarms_scanforAlarms+0xcb2>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   821a2:	4b99      	ldr	r3, [pc, #612]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821a4:	2204      	movs	r2, #4
   821a6:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   821aa:	4b97      	ldr	r3, [pc, #604]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821ac:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   821b0:	2b00      	cmp	r3, #0
   821b2:	d043      	beq.n	8223c <Cl_alarms_scanforAlarms+0xd44>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   821b4:	4b94      	ldr	r3, [pc, #592]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821b6:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   821ba:	2b01      	cmp	r3, #1
   821bc:	d035      	beq.n	8222a <Cl_alarms_scanforAlarms+0xd32>
				{
				if(ps2 > Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_upper)
   821be:	4b92      	ldr	r3, [pc, #584]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821c0:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
   821c4:	4b91      	ldr	r3, [pc, #580]	; (8240c <Cl_alarms_scanforAlarms+0xf14>)
   821c6:	6819      	ldr	r1, [r3, #0]
   821c8:	4b91      	ldr	r3, [pc, #580]	; (82410 <Cl_alarms_scanforAlarms+0xf18>)
   821ca:	4610      	mov	r0, r2
   821cc:	4798      	blx	r3
   821ce:	4603      	mov	r3, r0
   821d0:	2b00      	cmp	r3, #0
   821d2:	d033      	beq.n	8223c <Cl_alarms_scanforAlarms+0xd44>
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   821d4:	4b8c      	ldr	r3, [pc, #560]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821d6:	2201      	movs	r2, #1
   821d8:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   821dc:	4b8d      	ldr	r3, [pc, #564]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   821de:	781b      	ldrb	r3, [r3, #0]
   821e0:	4a8c      	ldr	r2, [pc, #560]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   821e2:	3301      	adds	r3, #1
   821e4:	00db      	lsls	r3, r3, #3
   821e6:	4413      	add	r3, r2
   821e8:	2217      	movs	r2, #23
   821ea:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   821ec:	4b86      	ldr	r3, [pc, #536]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821ee:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   821f2:	3301      	adds	r3, #1
   821f4:	b2da      	uxtb	r2, r3
   821f6:	4b84      	ldr	r3, [pc, #528]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   821f8:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   821fc:	4b86      	ldr	r3, [pc, #536]	; (82418 <Cl_alarms_scanforAlarms+0xf20>)
   821fe:	2201      	movs	r2, #1
   82200:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   82202:	4b86      	ldr	r3, [pc, #536]	; (8241c <Cl_alarms_scanforAlarms+0xf24>)
   82204:	2217      	movs	r2, #23
   82206:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82208:	4b82      	ldr	r3, [pc, #520]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   8220a:	781b      	ldrb	r3, [r3, #0]
   8220c:	461a      	mov	r2, r3
   8220e:	4b81      	ldr	r3, [pc, #516]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82210:	4413      	add	r3, r2
   82212:	222e      	movs	r2, #46	; 0x2e
   82214:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82216:	4b82      	ldr	r3, [pc, #520]	; (82420 <Cl_alarms_scanforAlarms+0xf28>)
   82218:	4798      	blx	r3
   8221a:	4603      	mov	r3, r0
   8221c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8221e:	79fb      	ldrb	r3, [r7, #7]
   82220:	2b00      	cmp	r3, #0
   82222:	d00b      	beq.n	8223c <Cl_alarms_scanforAlarms+0xd44>
   82224:	4b7f      	ldr	r3, [pc, #508]	; (82424 <Cl_alarms_scanforAlarms+0xf2c>)
   82226:	4798      	blx	r3
   82228:	e008      	b.n	8223c <Cl_alarms_scanforAlarms+0xd44>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8222a:	4b77      	ldr	r3, [pc, #476]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8222c:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   82230:	2b01      	cmp	r3, #1
   82232:	d103      	bne.n	8223c <Cl_alarms_scanforAlarms+0xd44>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82234:	4b74      	ldr	r3, [pc, #464]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82236:	2204      	movs	r2, #4
   82238:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   8223c:	4b72      	ldr	r3, [pc, #456]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8223e:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   82242:	2b00      	cmp	r3, #0
   82244:	d043      	beq.n	822ce <Cl_alarms_scanforAlarms+0xdd6>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82246:	4b70      	ldr	r3, [pc, #448]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82248:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8224c:	2b01      	cmp	r3, #1
   8224e:	d035      	beq.n	822bc <Cl_alarms_scanforAlarms+0xdc4>
			{
				if(ps2 < Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_lower)
   82250:	4b6d      	ldr	r3, [pc, #436]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82252:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
   82256:	4b6d      	ldr	r3, [pc, #436]	; (8240c <Cl_alarms_scanforAlarms+0xf14>)
   82258:	6819      	ldr	r1, [r3, #0]
   8225a:	4b73      	ldr	r3, [pc, #460]	; (82428 <Cl_alarms_scanforAlarms+0xf30>)
   8225c:	4610      	mov	r0, r2
   8225e:	4798      	blx	r3
   82260:	4603      	mov	r3, r0
   82262:	2b00      	cmp	r3, #0
   82264:	d033      	beq.n	822ce <Cl_alarms_scanforAlarms+0xdd6>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82266:	4b68      	ldr	r3, [pc, #416]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82268:	2201      	movs	r2, #1
   8226a:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   8226e:	4b69      	ldr	r3, [pc, #420]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82270:	781b      	ldrb	r3, [r3, #0]
   82272:	4a68      	ldr	r2, [pc, #416]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82274:	3301      	adds	r3, #1
   82276:	00db      	lsls	r3, r3, #3
   82278:	4413      	add	r3, r2
   8227a:	2218      	movs	r2, #24
   8227c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   8227e:	4b62      	ldr	r3, [pc, #392]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82280:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   82284:	3301      	adds	r3, #1
   82286:	b2da      	uxtb	r2, r3
   82288:	4b5f      	ldr	r3, [pc, #380]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8228a:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   8228e:	4b62      	ldr	r3, [pc, #392]	; (82418 <Cl_alarms_scanforAlarms+0xf20>)
   82290:	2201      	movs	r2, #1
   82292:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   82294:	4b61      	ldr	r3, [pc, #388]	; (8241c <Cl_alarms_scanforAlarms+0xf24>)
   82296:	2218      	movs	r2, #24
   82298:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8229a:	4b5e      	ldr	r3, [pc, #376]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   8229c:	781b      	ldrb	r3, [r3, #0]
   8229e:	461a      	mov	r2, r3
   822a0:	4b5c      	ldr	r3, [pc, #368]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   822a2:	4413      	add	r3, r2
   822a4:	222e      	movs	r2, #46	; 0x2e
   822a6:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   822a8:	4b5d      	ldr	r3, [pc, #372]	; (82420 <Cl_alarms_scanforAlarms+0xf28>)
   822aa:	4798      	blx	r3
   822ac:	4603      	mov	r3, r0
   822ae:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   822b0:	79fb      	ldrb	r3, [r7, #7]
   822b2:	2b00      	cmp	r3, #0
   822b4:	d00b      	beq.n	822ce <Cl_alarms_scanforAlarms+0xdd6>
   822b6:	4b5b      	ldr	r3, [pc, #364]	; (82424 <Cl_alarms_scanforAlarms+0xf2c>)
   822b8:	4798      	blx	r3
   822ba:	e008      	b.n	822ce <Cl_alarms_scanforAlarms+0xdd6>
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   822bc:	4b52      	ldr	r3, [pc, #328]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822be:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   822c2:	2b01      	cmp	r3, #1
   822c4:	d103      	bne.n	822ce <Cl_alarms_scanforAlarms+0xdd6>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   822c6:	4b50      	ldr	r3, [pc, #320]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822c8:	2204      	movs	r2, #4
   822ca:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   822ce:	4b4e      	ldr	r3, [pc, #312]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822d0:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   822d4:	2b00      	cmp	r3, #0
   822d6:	d043      	beq.n	82360 <Cl_alarms_scanforAlarms+0xe68>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_upper ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   822d8:	4b4b      	ldr	r3, [pc, #300]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822da:	f8d3 2274 	ldr.w	r2, [r3, #628]	; 0x274
   822de:	4b53      	ldr	r3, [pc, #332]	; (8242c <Cl_alarms_scanforAlarms+0xf34>)
   822e0:	6819      	ldr	r1, [r3, #0]
   822e2:	4b4b      	ldr	r3, [pc, #300]	; (82410 <Cl_alarms_scanforAlarms+0xf18>)
   822e4:	4610      	mov	r0, r2
   822e6:	4798      	blx	r3
   822e8:	4603      	mov	r3, r0
   822ea:	2b00      	cmp	r3, #0
   822ec:	d02f      	beq.n	8234e <Cl_alarms_scanforAlarms+0xe56>
   822ee:	4b46      	ldr	r3, [pc, #280]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822f0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   822f4:	2b01      	cmp	r3, #1
   822f6:	d02a      	beq.n	8234e <Cl_alarms_scanforAlarms+0xe56>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   822f8:	4b43      	ldr	r3, [pc, #268]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   822fa:	2201      	movs	r2, #1
   822fc:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   82300:	4b44      	ldr	r3, [pc, #272]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82302:	781b      	ldrb	r3, [r3, #0]
   82304:	4a43      	ldr	r2, [pc, #268]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82306:	3301      	adds	r3, #1
   82308:	00db      	lsls	r3, r3, #3
   8230a:	4413      	add	r3, r2
   8230c:	2227      	movs	r2, #39	; 0x27
   8230e:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   82310:	4b3d      	ldr	r3, [pc, #244]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82312:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   82316:	3301      	adds	r3, #1
   82318:	b2da      	uxtb	r2, r3
   8231a:	4b3b      	ldr	r3, [pc, #236]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8231c:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   82320:	4b3d      	ldr	r3, [pc, #244]	; (82418 <Cl_alarms_scanforAlarms+0xf20>)
   82322:	2201      	movs	r2, #1
   82324:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   82326:	4b3d      	ldr	r3, [pc, #244]	; (8241c <Cl_alarms_scanforAlarms+0xf24>)
   82328:	2227      	movs	r2, #39	; 0x27
   8232a:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8232c:	4b39      	ldr	r3, [pc, #228]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   8232e:	781b      	ldrb	r3, [r3, #0]
   82330:	461a      	mov	r2, r3
   82332:	4b38      	ldr	r3, [pc, #224]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   82334:	4413      	add	r3, r2
   82336:	222e      	movs	r2, #46	; 0x2e
   82338:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8233a:	4b39      	ldr	r3, [pc, #228]	; (82420 <Cl_alarms_scanforAlarms+0xf28>)
   8233c:	4798      	blx	r3
   8233e:	4603      	mov	r3, r0
   82340:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82342:	79fb      	ldrb	r3, [r7, #7]
   82344:	2b00      	cmp	r3, #0
   82346:	d00b      	beq.n	82360 <Cl_alarms_scanforAlarms+0xe68>
   82348:	4b36      	ldr	r3, [pc, #216]	; (82424 <Cl_alarms_scanforAlarms+0xf2c>)
   8234a:	4798      	blx	r3
   8234c:	e008      	b.n	82360 <Cl_alarms_scanforAlarms+0xe68>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8234e:	4b2e      	ldr	r3, [pc, #184]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82350:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   82354:	2b01      	cmp	r3, #1
   82356:	d103      	bne.n	82360 <Cl_alarms_scanforAlarms+0xe68>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82358:	4b2b      	ldr	r3, [pc, #172]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   8235a:	2204      	movs	r2, #4
   8235c:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   82360:	4b29      	ldr	r3, [pc, #164]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82362:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   82366:	2b00      	cmp	r3, #0
   82368:	d071      	beq.n	8244e <Cl_alarms_scanforAlarms+0xf56>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   8236a:	4b31      	ldr	r3, [pc, #196]	; (82430 <Cl_alarms_scanforAlarms+0xf38>)
   8236c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8236e:	4b2f      	ldr	r3, [pc, #188]	; (8242c <Cl_alarms_scanforAlarms+0xf34>)
   82370:	6819      	ldr	r1, [r3, #0]
   82372:	4b2d      	ldr	r3, [pc, #180]	; (82428 <Cl_alarms_scanforAlarms+0xf30>)
   82374:	4610      	mov	r0, r2
   82376:	4798      	blx	r3
   82378:	4603      	mov	r3, r0
   8237a:	2b00      	cmp	r3, #0
   8237c:	d05e      	beq.n	8243c <Cl_alarms_scanforAlarms+0xf44>
   8237e:	4b22      	ldr	r3, [pc, #136]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   82380:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   82384:	2b01      	cmp	r3, #1
   82386:	d059      	beq.n	8243c <Cl_alarms_scanforAlarms+0xf44>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
			
			if(ps3 < 0)
   82388:	4b28      	ldr	r3, [pc, #160]	; (8242c <Cl_alarms_scanforAlarms+0xf34>)
   8238a:	681a      	ldr	r2, [r3, #0]
   8238c:	4b20      	ldr	r3, [pc, #128]	; (82410 <Cl_alarms_scanforAlarms+0xf18>)
   8238e:	f04f 0100 	mov.w	r1, #0
   82392:	4610      	mov	r0, r2
   82394:	4798      	blx	r3
   82396:	4603      	mov	r3, r0
   82398:	2b00      	cmp	r3, #0
   8239a:	d009      	beq.n	823b0 <Cl_alarms_scanforAlarms+0xeb8>
			{
				ps3 = ps3+1000;
   8239c:	4b23      	ldr	r3, [pc, #140]	; (8242c <Cl_alarms_scanforAlarms+0xf34>)
   8239e:	681a      	ldr	r2, [r3, #0]
   823a0:	4b24      	ldr	r3, [pc, #144]	; (82434 <Cl_alarms_scanforAlarms+0xf3c>)
   823a2:	4925      	ldr	r1, [pc, #148]	; (82438 <Cl_alarms_scanforAlarms+0xf40>)
   823a4:	4610      	mov	r0, r2
   823a6:	4798      	blx	r3
   823a8:	4603      	mov	r3, r0
   823aa:	461a      	mov	r2, r3
   823ac:	4b1f      	ldr	r3, [pc, #124]	; (8242c <Cl_alarms_scanforAlarms+0xf34>)
   823ae:	601a      	str	r2, [r3, #0]
				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			}
			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   823b0:	4b15      	ldr	r3, [pc, #84]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   823b2:	2201      	movs	r2, #1
   823b4:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   823b8:	4b16      	ldr	r3, [pc, #88]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   823ba:	781b      	ldrb	r3, [r3, #0]
   823bc:	4a15      	ldr	r2, [pc, #84]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   823be:	3301      	adds	r3, #1
   823c0:	00db      	lsls	r3, r3, #3
   823c2:	4413      	add	r3, r2
   823c4:	2228      	movs	r2, #40	; 0x28
   823c6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   823c8:	4b0f      	ldr	r3, [pc, #60]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   823ca:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   823ce:	3301      	adds	r3, #1
   823d0:	b2da      	uxtb	r2, r3
   823d2:	4b0d      	ldr	r3, [pc, #52]	; (82408 <Cl_alarms_scanforAlarms+0xf10>)
   823d4:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   823d8:	4b0f      	ldr	r3, [pc, #60]	; (82418 <Cl_alarms_scanforAlarms+0xf20>)
   823da:	2201      	movs	r2, #1
   823dc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   823de:	4b0f      	ldr	r3, [pc, #60]	; (8241c <Cl_alarms_scanforAlarms+0xf24>)
   823e0:	2228      	movs	r2, #40	; 0x28
   823e2:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   823e4:	4b0b      	ldr	r3, [pc, #44]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   823e6:	781b      	ldrb	r3, [r3, #0]
   823e8:	461a      	mov	r2, r3
   823ea:	4b0a      	ldr	r3, [pc, #40]	; (82414 <Cl_alarms_scanforAlarms+0xf1c>)
   823ec:	4413      	add	r3, r2
   823ee:	222e      	movs	r2, #46	; 0x2e
   823f0:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   823f2:	4b0b      	ldr	r3, [pc, #44]	; (82420 <Cl_alarms_scanforAlarms+0xf28>)
   823f4:	4798      	blx	r3
   823f6:	4603      	mov	r3, r0
   823f8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   823fa:	79fb      	ldrb	r3, [r7, #7]
   823fc:	2b00      	cmp	r3, #0
   823fe:	d026      	beq.n	8244e <Cl_alarms_scanforAlarms+0xf56>
   82400:	4b08      	ldr	r3, [pc, #32]	; (82424 <Cl_alarms_scanforAlarms+0xf2c>)
   82402:	4798      	blx	r3
   82404:	e023      	b.n	8244e <Cl_alarms_scanforAlarms+0xf56>
   82406:	bf00      	nop
   82408:	20071cfc 	.word	0x20071cfc
   8240c:	20071734 	.word	0x20071734
   82410:	000a68cd 	.word	0x000a68cd
   82414:	200722b8 	.word	0x200722b8
   82418:	20071729 	.word	0x20071729
   8241c:	200720f0 	.word	0x200720f0
   82420:	00082d15 	.word	0x00082d15
   82424:	00088e75 	.word	0x00088e75
   82428:	000a6909 	.word	0x000a6909
   8242c:	20071738 	.word	0x20071738
   82430:	200720f4 	.word	0x200720f4
   82434:	000a6381 	.word	0x000a6381
   82438:	447a0000 	.word	0x447a0000
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8243c:	4b98      	ldr	r3, [pc, #608]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   8243e:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   82442:	2b01      	cmp	r3, #1
   82444:	d103      	bne.n	8244e <Cl_alarms_scanforAlarms+0xf56>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82446:	4b96      	ldr	r3, [pc, #600]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82448:	2204      	movs	r2, #4
   8244a:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   8244e:	4b94      	ldr	r3, [pc, #592]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82450:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   82454:	2b00      	cmp	r3, #0
   82456:	d045      	beq.n	824e4 <Cl_alarms_scanforAlarms+0xfec>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 >  Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   82458:	4b91      	ldr	r3, [pc, #580]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   8245a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
   8245e:	4b91      	ldr	r3, [pc, #580]	; (826a4 <Cl_alarms_scanforAlarms+0x11ac>)
   82460:	6819      	ldr	r1, [r3, #0]
   82462:	4b91      	ldr	r3, [pc, #580]	; (826a8 <Cl_alarms_scanforAlarms+0x11b0>)
   82464:	4610      	mov	r0, r2
   82466:	4798      	blx	r3
   82468:	4603      	mov	r3, r0
   8246a:	2b00      	cmp	r3, #0
   8246c:	d02a      	beq.n	824c4 <Cl_alarms_scanforAlarms+0xfcc>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8246e:	4b8c      	ldr	r3, [pc, #560]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82470:	2201      	movs	r2, #1
   82472:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   82476:	4b8d      	ldr	r3, [pc, #564]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82478:	781b      	ldrb	r3, [r3, #0]
   8247a:	4a8c      	ldr	r2, [pc, #560]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   8247c:	3301      	adds	r3, #1
   8247e:	00db      	lsls	r3, r3, #3
   82480:	4413      	add	r3, r2
   82482:	220f      	movs	r2, #15
   82484:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   82486:	4b86      	ldr	r3, [pc, #536]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82488:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   8248c:	3301      	adds	r3, #1
   8248e:	b2da      	uxtb	r2, r3
   82490:	4b83      	ldr	r3, [pc, #524]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82492:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   82496:	4b86      	ldr	r3, [pc, #536]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   82498:	2201      	movs	r2, #1
   8249a:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   8249c:	4b85      	ldr	r3, [pc, #532]	; (826b4 <Cl_alarms_scanforAlarms+0x11bc>)
   8249e:	220f      	movs	r2, #15
   824a0:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   824a2:	4b82      	ldr	r3, [pc, #520]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   824a4:	781b      	ldrb	r3, [r3, #0]
   824a6:	461a      	mov	r2, r3
   824a8:	4b80      	ldr	r3, [pc, #512]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   824aa:	4413      	add	r3, r2
   824ac:	222e      	movs	r2, #46	; 0x2e
   824ae:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   824b0:	4b81      	ldr	r3, [pc, #516]	; (826b8 <Cl_alarms_scanforAlarms+0x11c0>)
   824b2:	4798      	blx	r3
   824b4:	4603      	mov	r3, r0
   824b6:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   824b8:	79fb      	ldrb	r3, [r7, #7]
   824ba:	2b00      	cmp	r3, #0
   824bc:	d012      	beq.n	824e4 <Cl_alarms_scanforAlarms+0xfec>
   824be:	4b7f      	ldr	r3, [pc, #508]	; (826bc <Cl_alarms_scanforAlarms+0x11c4>)
   824c0:	4798      	blx	r3
   824c2:	e00f      	b.n	824e4 <Cl_alarms_scanforAlarms+0xfec>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   824c4:	4b76      	ldr	r3, [pc, #472]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   824c6:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   824ca:	2b01      	cmp	r3, #1
   824cc:	d10a      	bne.n	824e4 <Cl_alarms_scanforAlarms+0xfec>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   824ce:	4b74      	ldr	r3, [pc, #464]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   824d0:	2204      	movs	r2, #4
   824d2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   824d6:	4b72      	ldr	r3, [pc, #456]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   824d8:	2200      	movs	r2, #0
   824da:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   824de:	4b74      	ldr	r3, [pc, #464]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   824e0:	2200      	movs	r2, #0
   824e2:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   824e4:	4b6e      	ldr	r3, [pc, #440]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   824e6:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   824ea:	2b00      	cmp	r3, #0
   824ec:	d04a      	beq.n	82584 <Cl_alarms_scanforAlarms+0x108c>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   824ee:	4b6c      	ldr	r3, [pc, #432]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   824f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   824f4:	4b6b      	ldr	r3, [pc, #428]	; (826a4 <Cl_alarms_scanforAlarms+0x11ac>)
   824f6:	6819      	ldr	r1, [r3, #0]
   824f8:	4b71      	ldr	r3, [pc, #452]	; (826c0 <Cl_alarms_scanforAlarms+0x11c8>)
   824fa:	4610      	mov	r0, r2
   824fc:	4798      	blx	r3
   824fe:	4603      	mov	r3, r0
   82500:	2b00      	cmp	r3, #0
   82502:	d02f      	beq.n	82564 <Cl_alarms_scanforAlarms+0x106c>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82504:	4b66      	ldr	r3, [pc, #408]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82506:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   8250a:	2b01      	cmp	r3, #1
   8250c:	d03a      	beq.n	82584 <Cl_alarms_scanforAlarms+0x108c>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8250e:	4b64      	ldr	r3, [pc, #400]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82510:	2201      	movs	r2, #1
   82512:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   82516:	4b65      	ldr	r3, [pc, #404]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82518:	781b      	ldrb	r3, [r3, #0]
   8251a:	4a64      	ldr	r2, [pc, #400]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   8251c:	3301      	adds	r3, #1
   8251e:	00db      	lsls	r3, r3, #3
   82520:	4413      	add	r3, r2
   82522:	2210      	movs	r2, #16
   82524:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   82526:	4b5e      	ldr	r3, [pc, #376]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82528:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   8252c:	3301      	adds	r3, #1
   8252e:	b2da      	uxtb	r2, r3
   82530:	4b5b      	ldr	r3, [pc, #364]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82532:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   82536:	4b5e      	ldr	r3, [pc, #376]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   82538:	2201      	movs	r2, #1
   8253a:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   8253c:	4b5d      	ldr	r3, [pc, #372]	; (826b4 <Cl_alarms_scanforAlarms+0x11bc>)
   8253e:	2210      	movs	r2, #16
   82540:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82542:	4b5a      	ldr	r3, [pc, #360]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82544:	781b      	ldrb	r3, [r3, #0]
   82546:	461a      	mov	r2, r3
   82548:	4b58      	ldr	r3, [pc, #352]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   8254a:	4413      	add	r3, r2
   8254c:	222e      	movs	r2, #46	; 0x2e
   8254e:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82550:	4b59      	ldr	r3, [pc, #356]	; (826b8 <Cl_alarms_scanforAlarms+0x11c0>)
   82552:	4798      	blx	r3
   82554:	4603      	mov	r3, r0
   82556:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   82558:	79fb      	ldrb	r3, [r7, #7]
   8255a:	2b00      	cmp	r3, #0
   8255c:	d012      	beq.n	82584 <Cl_alarms_scanforAlarms+0x108c>
   8255e:	4b57      	ldr	r3, [pc, #348]	; (826bc <Cl_alarms_scanforAlarms+0x11c4>)
   82560:	4798      	blx	r3
   82562:	e00f      	b.n	82584 <Cl_alarms_scanforAlarms+0x108c>
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82564:	4b4e      	ldr	r3, [pc, #312]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82566:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   8256a:	2b01      	cmp	r3, #1
   8256c:	d10a      	bne.n	82584 <Cl_alarms_scanforAlarms+0x108c>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8256e:	4b4c      	ldr	r3, [pc, #304]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82570:	2204      	movs	r2, #4
   82572:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   82576:	4b4a      	ldr	r3, [pc, #296]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82578:	2200      	movs	r2, #0
   8257a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   8257e:	4b4c      	ldr	r3, [pc, #304]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   82580:	2200      	movs	r2, #0
   82582:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   82584:	4b46      	ldr	r3, [pc, #280]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82586:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   8258a:	2b00      	cmp	r3, #0
   8258c:	d049      	beq.n	82622 <Cl_alarms_scanforAlarms+0x112a>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   8258e:	4b4d      	ldr	r3, [pc, #308]	; (826c4 <Cl_alarms_scanforAlarms+0x11cc>)
   82590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   82592:	4b4d      	ldr	r3, [pc, #308]	; (826c8 <Cl_alarms_scanforAlarms+0x11d0>)
   82594:	6819      	ldr	r1, [r3, #0]
   82596:	4b44      	ldr	r3, [pc, #272]	; (826a8 <Cl_alarms_scanforAlarms+0x11b0>)
   82598:	4610      	mov	r0, r2
   8259a:	4798      	blx	r3
   8259c:	4603      	mov	r3, r0
   8259e:	2b00      	cmp	r3, #0
   825a0:	d02f      	beq.n	82602 <Cl_alarms_scanforAlarms+0x110a>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   825a2:	4b3f      	ldr	r3, [pc, #252]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   825a4:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   825a8:	2b01      	cmp	r3, #1
   825aa:	d03a      	beq.n	82622 <Cl_alarms_scanforAlarms+0x112a>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   825ac:	4b3c      	ldr	r3, [pc, #240]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   825ae:	2201      	movs	r2, #1
   825b0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   825b4:	4b3d      	ldr	r3, [pc, #244]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   825b6:	781b      	ldrb	r3, [r3, #0]
   825b8:	4a3c      	ldr	r2, [pc, #240]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   825ba:	3301      	adds	r3, #1
   825bc:	00db      	lsls	r3, r3, #3
   825be:	4413      	add	r3, r2
   825c0:	2213      	movs	r2, #19
   825c2:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   825c4:	4b36      	ldr	r3, [pc, #216]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   825c6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   825ca:	3301      	adds	r3, #1
   825cc:	b2da      	uxtb	r2, r3
   825ce:	4b34      	ldr	r3, [pc, #208]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   825d0:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   825d4:	4b36      	ldr	r3, [pc, #216]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   825d6:	2201      	movs	r2, #1
   825d8:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   825da:	4b36      	ldr	r3, [pc, #216]	; (826b4 <Cl_alarms_scanforAlarms+0x11bc>)
   825dc:	2213      	movs	r2, #19
   825de:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   825e0:	4b32      	ldr	r3, [pc, #200]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   825e2:	781b      	ldrb	r3, [r3, #0]
   825e4:	461a      	mov	r2, r3
   825e6:	4b31      	ldr	r3, [pc, #196]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   825e8:	4413      	add	r3, r2
   825ea:	222e      	movs	r2, #46	; 0x2e
   825ec:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   825ee:	4b32      	ldr	r3, [pc, #200]	; (826b8 <Cl_alarms_scanforAlarms+0x11c0>)
   825f0:	4798      	blx	r3
   825f2:	4603      	mov	r3, r0
   825f4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   825f6:	79fb      	ldrb	r3, [r7, #7]
   825f8:	2b00      	cmp	r3, #0
   825fa:	d012      	beq.n	82622 <Cl_alarms_scanforAlarms+0x112a>
   825fc:	4b2f      	ldr	r3, [pc, #188]	; (826bc <Cl_alarms_scanforAlarms+0x11c4>)
   825fe:	4798      	blx	r3
   82600:	e00f      	b.n	82622 <Cl_alarms_scanforAlarms+0x112a>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82602:	4b27      	ldr	r3, [pc, #156]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82604:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82608:	2b01      	cmp	r3, #1
   8260a:	d10a      	bne.n	82622 <Cl_alarms_scanforAlarms+0x112a>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8260c:	4b24      	ldr	r3, [pc, #144]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   8260e:	2204      	movs	r2, #4
   82610:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   82614:	4b22      	ldr	r3, [pc, #136]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82616:	2200      	movs	r2, #0
   82618:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   8261c:	4b24      	ldr	r3, [pc, #144]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   8261e:	2200      	movs	r2, #0
   82620:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   82622:	4b1f      	ldr	r3, [pc, #124]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82624:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   82628:	2b00      	cmp	r3, #0
   8262a:	d05f      	beq.n	826ec <Cl_alarms_scanforAlarms+0x11f4>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   8262c:	4b25      	ldr	r3, [pc, #148]	; (826c4 <Cl_alarms_scanforAlarms+0x11cc>)
   8262e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   82630:	4b25      	ldr	r3, [pc, #148]	; (826c8 <Cl_alarms_scanforAlarms+0x11d0>)
   82632:	6819      	ldr	r1, [r3, #0]
   82634:	4b22      	ldr	r3, [pc, #136]	; (826c0 <Cl_alarms_scanforAlarms+0x11c8>)
   82636:	4610      	mov	r0, r2
   82638:	4798      	blx	r3
   8263a:	4603      	mov	r3, r0
   8263c:	2b00      	cmp	r3, #0
   8263e:	d045      	beq.n	826cc <Cl_alarms_scanforAlarms+0x11d4>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   82640:	4b17      	ldr	r3, [pc, #92]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82642:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   82646:	2b01      	cmp	r3, #1
   82648:	d050      	beq.n	826ec <Cl_alarms_scanforAlarms+0x11f4>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8264a:	4b15      	ldr	r3, [pc, #84]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   8264c:	2201      	movs	r2, #1
   8264e:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   82652:	4b16      	ldr	r3, [pc, #88]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82654:	781b      	ldrb	r3, [r3, #0]
   82656:	4a15      	ldr	r2, [pc, #84]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82658:	3301      	adds	r3, #1
   8265a:	00db      	lsls	r3, r3, #3
   8265c:	4413      	add	r3, r2
   8265e:	2214      	movs	r2, #20
   82660:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   82662:	4b0f      	ldr	r3, [pc, #60]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   82664:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   82668:	3301      	adds	r3, #1
   8266a:	b2da      	uxtb	r2, r3
   8266c:	4b0c      	ldr	r3, [pc, #48]	; (826a0 <Cl_alarms_scanforAlarms+0x11a8>)
   8266e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   82672:	4b0f      	ldr	r3, [pc, #60]	; (826b0 <Cl_alarms_scanforAlarms+0x11b8>)
   82674:	2201      	movs	r2, #1
   82676:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   82678:	4b0e      	ldr	r3, [pc, #56]	; (826b4 <Cl_alarms_scanforAlarms+0x11bc>)
   8267a:	2214      	movs	r2, #20
   8267c:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8267e:	4b0b      	ldr	r3, [pc, #44]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82680:	781b      	ldrb	r3, [r3, #0]
   82682:	461a      	mov	r2, r3
   82684:	4b09      	ldr	r3, [pc, #36]	; (826ac <Cl_alarms_scanforAlarms+0x11b4>)
   82686:	4413      	add	r3, r2
   82688:	222e      	movs	r2, #46	; 0x2e
   8268a:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8268c:	4b0a      	ldr	r3, [pc, #40]	; (826b8 <Cl_alarms_scanforAlarms+0x11c0>)
   8268e:	4798      	blx	r3
   82690:	4603      	mov	r3, r0
   82692:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   82694:	79fb      	ldrb	r3, [r7, #7]
   82696:	2b00      	cmp	r3, #0
   82698:	d028      	beq.n	826ec <Cl_alarms_scanforAlarms+0x11f4>
   8269a:	4b08      	ldr	r3, [pc, #32]	; (826bc <Cl_alarms_scanforAlarms+0x11c4>)
   8269c:	4798      	blx	r3
   8269e:	e025      	b.n	826ec <Cl_alarms_scanforAlarms+0x11f4>
   826a0:	20071cfc 	.word	0x20071cfc
   826a4:	2007173c 	.word	0x2007173c
   826a8:	000a68cd 	.word	0x000a68cd
   826ac:	200722b8 	.word	0x200722b8
   826b0:	20071729 	.word	0x20071729
   826b4:	200720f0 	.word	0x200720f0
   826b8:	00082d15 	.word	0x00082d15
   826bc:	00088e75 	.word	0x00088e75
   826c0:	000a6909 	.word	0x000a6909
   826c4:	200720f4 	.word	0x200720f4
   826c8:	20071744 	.word	0x20071744
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   826cc:	4b9d      	ldr	r3, [pc, #628]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   826ce:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   826d2:	2b01      	cmp	r3, #1
   826d4:	d10a      	bne.n	826ec <Cl_alarms_scanforAlarms+0x11f4>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   826d6:	4b9b      	ldr	r3, [pc, #620]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   826d8:	2204      	movs	r2, #4
   826da:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   826de:	4b99      	ldr	r3, [pc, #612]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   826e0:	2200      	movs	r2, #0
   826e2:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   826e6:	4b98      	ldr	r3, [pc, #608]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   826e8:	2200      	movs	r2, #0
   826ea:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   826ec:	4b95      	ldr	r3, [pc, #596]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   826ee:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   826f2:	2b00      	cmp	r3, #0
   826f4:	d04a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x1294>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   826f6:	4b93      	ldr	r3, [pc, #588]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   826f8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
   826fc:	4b93      	ldr	r3, [pc, #588]	; (8294c <Cl_alarms_scanforAlarms+0x1454>)
   826fe:	6819      	ldr	r1, [r3, #0]
   82700:	4b93      	ldr	r3, [pc, #588]	; (82950 <Cl_alarms_scanforAlarms+0x1458>)
   82702:	4610      	mov	r0, r2
   82704:	4798      	blx	r3
   82706:	4603      	mov	r3, r0
   82708:	2b00      	cmp	r3, #0
   8270a:	d02f      	beq.n	8276c <Cl_alarms_scanforAlarms+0x1274>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8270c:	4b8d      	ldr	r3, [pc, #564]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8270e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   82712:	2b01      	cmp	r3, #1
   82714:	d03a      	beq.n	8278c <Cl_alarms_scanforAlarms+0x1294>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82716:	4b8b      	ldr	r3, [pc, #556]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82718:	2201      	movs	r2, #1
   8271a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   8271e:	4b8d      	ldr	r3, [pc, #564]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82720:	781b      	ldrb	r3, [r3, #0]
   82722:	4a8c      	ldr	r2, [pc, #560]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82724:	3301      	adds	r3, #1
   82726:	00db      	lsls	r3, r3, #3
   82728:	4413      	add	r3, r2
   8272a:	2211      	movs	r2, #17
   8272c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   8272e:	4b85      	ldr	r3, [pc, #532]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82730:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   82734:	3301      	adds	r3, #1
   82736:	b2da      	uxtb	r2, r3
   82738:	4b82      	ldr	r3, [pc, #520]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8273a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   8273e:	4b82      	ldr	r3, [pc, #520]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   82740:	2201      	movs	r2, #1
   82742:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   82744:	4b84      	ldr	r3, [pc, #528]	; (82958 <Cl_alarms_scanforAlarms+0x1460>)
   82746:	2211      	movs	r2, #17
   82748:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8274a:	4b82      	ldr	r3, [pc, #520]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   8274c:	781b      	ldrb	r3, [r3, #0]
   8274e:	461a      	mov	r2, r3
   82750:	4b80      	ldr	r3, [pc, #512]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82752:	4413      	add	r3, r2
   82754:	222e      	movs	r2, #46	; 0x2e
   82756:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82758:	4b80      	ldr	r3, [pc, #512]	; (8295c <Cl_alarms_scanforAlarms+0x1464>)
   8275a:	4798      	blx	r3
   8275c:	4603      	mov	r3, r0
   8275e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82760:	79fb      	ldrb	r3, [r7, #7]
   82762:	2b00      	cmp	r3, #0
   82764:	d012      	beq.n	8278c <Cl_alarms_scanforAlarms+0x1294>
   82766:	4b7e      	ldr	r3, [pc, #504]	; (82960 <Cl_alarms_scanforAlarms+0x1468>)
   82768:	4798      	blx	r3
   8276a:	e00f      	b.n	8278c <Cl_alarms_scanforAlarms+0x1294>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8276c:	4b75      	ldr	r3, [pc, #468]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8276e:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   82772:	2b01      	cmp	r3, #1
   82774:	d10a      	bne.n	8278c <Cl_alarms_scanforAlarms+0x1294>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82776:	4b73      	ldr	r3, [pc, #460]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82778:	2204      	movs	r2, #4
   8277a:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   8277e:	4b71      	ldr	r3, [pc, #452]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82780:	2200      	movs	r2, #0
   82782:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   82786:	4b70      	ldr	r3, [pc, #448]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   82788:	2200      	movs	r2, #0
   8278a:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   8278c:	4b6d      	ldr	r3, [pc, #436]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8278e:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   82792:	2b00      	cmp	r3, #0
   82794:	d04a      	beq.n	8282c <Cl_alarms_scanforAlarms+0x1334>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)//)Cl_alarmThresholdTable.temp2_low_threshold)
   82796:	4b6b      	ldr	r3, [pc, #428]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82798:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
   8279c:	4b6b      	ldr	r3, [pc, #428]	; (8294c <Cl_alarms_scanforAlarms+0x1454>)
   8279e:	6819      	ldr	r1, [r3, #0]
   827a0:	4b70      	ldr	r3, [pc, #448]	; (82964 <Cl_alarms_scanforAlarms+0x146c>)
   827a2:	4610      	mov	r0, r2
   827a4:	4798      	blx	r3
   827a6:	4603      	mov	r3, r0
   827a8:	2b00      	cmp	r3, #0
   827aa:	d02f      	beq.n	8280c <Cl_alarms_scanforAlarms+0x1314>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   827ac:	4b65      	ldr	r3, [pc, #404]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   827ae:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   827b2:	2b01      	cmp	r3, #1
   827b4:	d03a      	beq.n	8282c <Cl_alarms_scanforAlarms+0x1334>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   827b6:	4b63      	ldr	r3, [pc, #396]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   827b8:	2201      	movs	r2, #1
   827ba:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   827be:	4b65      	ldr	r3, [pc, #404]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   827c0:	781b      	ldrb	r3, [r3, #0]
   827c2:	4a64      	ldr	r2, [pc, #400]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   827c4:	3301      	adds	r3, #1
   827c6:	00db      	lsls	r3, r3, #3
   827c8:	4413      	add	r3, r2
   827ca:	2212      	movs	r2, #18
   827cc:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   827ce:	4b5d      	ldr	r3, [pc, #372]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   827d0:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   827d4:	3301      	adds	r3, #1
   827d6:	b2da      	uxtb	r2, r3
   827d8:	4b5a      	ldr	r3, [pc, #360]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   827da:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   827de:	4b5a      	ldr	r3, [pc, #360]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   827e0:	2201      	movs	r2, #1
   827e2:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   827e4:	4b5c      	ldr	r3, [pc, #368]	; (82958 <Cl_alarms_scanforAlarms+0x1460>)
   827e6:	2212      	movs	r2, #18
   827e8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   827ea:	4b5a      	ldr	r3, [pc, #360]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   827ec:	781b      	ldrb	r3, [r3, #0]
   827ee:	461a      	mov	r2, r3
   827f0:	4b58      	ldr	r3, [pc, #352]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   827f2:	4413      	add	r3, r2
   827f4:	222e      	movs	r2, #46	; 0x2e
   827f6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   827f8:	4b58      	ldr	r3, [pc, #352]	; (8295c <Cl_alarms_scanforAlarms+0x1464>)
   827fa:	4798      	blx	r3
   827fc:	4603      	mov	r3, r0
   827fe:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82800:	79fb      	ldrb	r3, [r7, #7]
   82802:	2b00      	cmp	r3, #0
   82804:	d012      	beq.n	8282c <Cl_alarms_scanforAlarms+0x1334>
   82806:	4b56      	ldr	r3, [pc, #344]	; (82960 <Cl_alarms_scanforAlarms+0x1468>)
   82808:	4798      	blx	r3
   8280a:	e00f      	b.n	8282c <Cl_alarms_scanforAlarms+0x1334>
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8280c:	4b4d      	ldr	r3, [pc, #308]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8280e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   82812:	2b01      	cmp	r3, #1
   82814:	d10a      	bne.n	8282c <Cl_alarms_scanforAlarms+0x1334>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82816:	4b4b      	ldr	r3, [pc, #300]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82818:	2204      	movs	r2, #4
   8281a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   8281e:	4b49      	ldr	r3, [pc, #292]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82820:	2200      	movs	r2, #0
   82822:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   82826:	4b48      	ldr	r3, [pc, #288]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   82828:	2200      	movs	r2, #0
   8282a:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   8282c:	4b45      	ldr	r3, [pc, #276]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8282e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   82832:	2b00      	cmp	r3, #0
   82834:	d048      	beq.n	828c8 <Cl_alarms_scanforAlarms+0x13d0>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarmThresholdTable.cond_high_threshold) //Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   82836:	4b4c      	ldr	r3, [pc, #304]	; (82968 <Cl_alarms_scanforAlarms+0x1470>)
   82838:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   8283c:	4b4b      	ldr	r3, [pc, #300]	; (8296c <Cl_alarms_scanforAlarms+0x1474>)
   8283e:	4610      	mov	r0, r2
   82840:	4798      	blx	r3
   82842:	4b4b      	ldr	r3, [pc, #300]	; (82970 <Cl_alarms_scanforAlarms+0x1478>)
   82844:	681a      	ldr	r2, [r3, #0]
   82846:	4b42      	ldr	r3, [pc, #264]	; (82950 <Cl_alarms_scanforAlarms+0x1458>)
   82848:	4611      	mov	r1, r2
   8284a:	4798      	blx	r3
   8284c:	4603      	mov	r3, r0
   8284e:	2b00      	cmp	r3, #0
   82850:	d02a      	beq.n	828a8 <Cl_alarms_scanforAlarms+0x13b0>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   82852:	4b3c      	ldr	r3, [pc, #240]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82854:	2201      	movs	r2, #1
   82856:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   8285a:	4b3e      	ldr	r3, [pc, #248]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   8285c:	781b      	ldrb	r3, [r3, #0]
   8285e:	4a3d      	ldr	r2, [pc, #244]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82860:	3301      	adds	r3, #1
   82862:	00db      	lsls	r3, r3, #3
   82864:	4413      	add	r3, r2
   82866:	2208      	movs	r2, #8
   82868:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   8286a:	4b36      	ldr	r3, [pc, #216]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   8286c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   82870:	3301      	adds	r3, #1
   82872:	b2da      	uxtb	r2, r3
   82874:	4b33      	ldr	r3, [pc, #204]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82876:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   8287a:	4b33      	ldr	r3, [pc, #204]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   8287c:	2201      	movs	r2, #1
   8287e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   82880:	4b35      	ldr	r3, [pc, #212]	; (82958 <Cl_alarms_scanforAlarms+0x1460>)
   82882:	2208      	movs	r2, #8
   82884:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82886:	4b33      	ldr	r3, [pc, #204]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82888:	781b      	ldrb	r3, [r3, #0]
   8288a:	461a      	mov	r2, r3
   8288c:	4b31      	ldr	r3, [pc, #196]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   8288e:	4413      	add	r3, r2
   82890:	222e      	movs	r2, #46	; 0x2e
   82892:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82894:	4b31      	ldr	r3, [pc, #196]	; (8295c <Cl_alarms_scanforAlarms+0x1464>)
   82896:	4798      	blx	r3
   82898:	4603      	mov	r3, r0
   8289a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8289c:	79fb      	ldrb	r3, [r7, #7]
   8289e:	2b00      	cmp	r3, #0
   828a0:	d012      	beq.n	828c8 <Cl_alarms_scanforAlarms+0x13d0>
   828a2:	4b2f      	ldr	r3, [pc, #188]	; (82960 <Cl_alarms_scanforAlarms+0x1468>)
   828a4:	4798      	blx	r3
   828a6:	e00f      	b.n	828c8 <Cl_alarms_scanforAlarms+0x13d0>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   828a8:	4b26      	ldr	r3, [pc, #152]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   828aa:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   828ae:	2b01      	cmp	r3, #1
   828b0:	d10a      	bne.n	828c8 <Cl_alarms_scanforAlarms+0x13d0>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   828b2:	4b24      	ldr	r3, [pc, #144]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   828b4:	2204      	movs	r2, #4
   828b6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   828ba:	4b22      	ldr	r3, [pc, #136]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   828bc:	2200      	movs	r2, #0
   828be:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   828c2:	4b21      	ldr	r3, [pc, #132]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   828c4:	2200      	movs	r2, #0
   828c6:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   828c8:	4b1e      	ldr	r3, [pc, #120]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   828ca:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   828ce:	2b00      	cmp	r3, #0
   828d0:	d060      	beq.n	82994 <Cl_alarms_scanforAlarms+0x149c>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarmThresholdTable.cond_low_threshold)
   828d2:	4b25      	ldr	r3, [pc, #148]	; (82968 <Cl_alarms_scanforAlarms+0x1470>)
   828d4:	f9b3 2000 	ldrsh.w	r2, [r3]
   828d8:	4b24      	ldr	r3, [pc, #144]	; (8296c <Cl_alarms_scanforAlarms+0x1474>)
   828da:	4610      	mov	r0, r2
   828dc:	4798      	blx	r3
   828de:	4b24      	ldr	r3, [pc, #144]	; (82970 <Cl_alarms_scanforAlarms+0x1478>)
   828e0:	681a      	ldr	r2, [r3, #0]
   828e2:	4b20      	ldr	r3, [pc, #128]	; (82964 <Cl_alarms_scanforAlarms+0x146c>)
   828e4:	4611      	mov	r1, r2
   828e6:	4798      	blx	r3
   828e8:	4603      	mov	r3, r0
   828ea:	2b00      	cmp	r3, #0
   828ec:	d042      	beq.n	82974 <Cl_alarms_scanforAlarms+0x147c>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   828ee:	4b15      	ldr	r3, [pc, #84]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   828f0:	2201      	movs	r2, #1
   828f2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   828f6:	4b17      	ldr	r3, [pc, #92]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   828f8:	781b      	ldrb	r3, [r3, #0]
   828fa:	4a16      	ldr	r2, [pc, #88]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   828fc:	3301      	adds	r3, #1
   828fe:	00db      	lsls	r3, r3, #3
   82900:	4413      	add	r3, r2
   82902:	2207      	movs	r2, #7
   82904:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   82906:	4b0f      	ldr	r3, [pc, #60]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82908:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   8290c:	3301      	adds	r3, #1
   8290e:	b2da      	uxtb	r2, r3
   82910:	4b0c      	ldr	r3, [pc, #48]	; (82944 <Cl_alarms_scanforAlarms+0x144c>)
   82912:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   82916:	4b0c      	ldr	r3, [pc, #48]	; (82948 <Cl_alarms_scanforAlarms+0x1450>)
   82918:	2201      	movs	r2, #1
   8291a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   8291c:	4b0e      	ldr	r3, [pc, #56]	; (82958 <Cl_alarms_scanforAlarms+0x1460>)
   8291e:	2207      	movs	r2, #7
   82920:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82922:	4b0c      	ldr	r3, [pc, #48]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   82924:	781b      	ldrb	r3, [r3, #0]
   82926:	461a      	mov	r2, r3
   82928:	4b0a      	ldr	r3, [pc, #40]	; (82954 <Cl_alarms_scanforAlarms+0x145c>)
   8292a:	4413      	add	r3, r2
   8292c:	222e      	movs	r2, #46	; 0x2e
   8292e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82930:	4b0a      	ldr	r3, [pc, #40]	; (8295c <Cl_alarms_scanforAlarms+0x1464>)
   82932:	4798      	blx	r3
   82934:	4603      	mov	r3, r0
   82936:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82938:	79fb      	ldrb	r3, [r7, #7]
   8293a:	2b00      	cmp	r3, #0
   8293c:	d02a      	beq.n	82994 <Cl_alarms_scanforAlarms+0x149c>
   8293e:	4b08      	ldr	r3, [pc, #32]	; (82960 <Cl_alarms_scanforAlarms+0x1468>)
   82940:	4798      	blx	r3
   82942:	e027      	b.n	82994 <Cl_alarms_scanforAlarms+0x149c>
   82944:	20071cfc 	.word	0x20071cfc
   82948:	20071729 	.word	0x20071729
   8294c:	20071740 	.word	0x20071740
   82950:	000a68cd 	.word	0x000a68cd
   82954:	200722b8 	.word	0x200722b8
   82958:	200720f0 	.word	0x200720f0
   8295c:	00082d15 	.word	0x00082d15
   82960:	00088e75 	.word	0x00088e75
   82964:	000a6909 	.word	0x000a6909
   82968:	200720f4 	.word	0x200720f4
   8296c:	000a64e9 	.word	0x000a64e9
   82970:	20071748 	.word	0x20071748
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   82974:	4b82      	ldr	r3, [pc, #520]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82976:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   8297a:	2b01      	cmp	r3, #1
   8297c:	d10a      	bne.n	82994 <Cl_alarms_scanforAlarms+0x149c>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   8297e:	4b80      	ldr	r3, [pc, #512]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82980:	2204      	movs	r2, #4
   82982:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   82986:	4b7e      	ldr	r3, [pc, #504]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82988:	2200      	movs	r2, #0
   8298a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   8298e:	4b7d      	ldr	r3, [pc, #500]	; (82b84 <Cl_alarms_scanforAlarms+0x168c>)
   82990:	2200      	movs	r2, #0
   82992:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   82994:	4b7a      	ldr	r3, [pc, #488]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82996:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   8299a:	2b00      	cmp	r3, #0
   8299c:	d10a      	bne.n	829b4 <Cl_alarms_scanforAlarms+0x14bc>
   8299e:	4b78      	ldr	r3, [pc, #480]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   829a0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   829a4:	2b00      	cmp	r3, #0
   829a6:	d105      	bne.n	829b4 <Cl_alarms_scanforAlarms+0x14bc>
   829a8:	4b75      	ldr	r3, [pc, #468]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   829aa:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   829ae:	2b00      	cmp	r3, #0
   829b0:	f000 80f7 	beq.w	82ba2 <Cl_alarms_scanforAlarms+0x16aa>
	{
			dac_cond_alarm = _NO_ALARM;
   829b4:	4b74      	ldr	r3, [pc, #464]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   829b6:	2200      	movs	r2, #0
   829b8:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   829ba:	4873      	ldr	r0, [pc, #460]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   829bc:	4b73      	ldr	r3, [pc, #460]	; (82b8c <Cl_alarms_scanforAlarms+0x1694>)
   829be:	4798      	blx	r3
   829c0:	4603      	mov	r3, r0
   829c2:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   829c4:	79fb      	ldrb	r3, [r7, #7]
   829c6:	2b00      	cmp	r3, #0
   829c8:	d001      	beq.n	829ce <Cl_alarms_scanforAlarms+0x14d6>
   829ca:	4b71      	ldr	r3, [pc, #452]	; (82b90 <Cl_alarms_scanforAlarms+0x1698>)
   829cc:	4798      	blx	r3
				switch(dac_cond_alarm)
   829ce:	4b6e      	ldr	r3, [pc, #440]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   829d0:	781b      	ldrb	r3, [r3, #0]
   829d2:	2b0a      	cmp	r3, #10
   829d4:	d049      	beq.n	82a6a <Cl_alarms_scanforAlarms+0x1572>
   829d6:	2b0b      	cmp	r3, #11
   829d8:	f000 808a 	beq.w	82af0 <Cl_alarms_scanforAlarms+0x15f8>
   829dc:	2b09      	cmp	r3, #9
   829de:	f040 80e0 	bne.w	82ba2 <Cl_alarms_scanforAlarms+0x16aa>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   829e2:	4b69      	ldr	r3, [pc, #420]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   829e4:	781b      	ldrb	r3, [r3, #0]
   829e6:	4a66      	ldr	r2, [pc, #408]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   829e8:	011b      	lsls	r3, r3, #4
   829ea:	4413      	add	r3, r2
   829ec:	3302      	adds	r3, #2
   829ee:	2201      	movs	r2, #1
   829f0:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   829f2:	4b63      	ldr	r3, [pc, #396]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   829f4:	2204      	movs	r2, #4
   829f6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   829fa:	4b61      	ldr	r3, [pc, #388]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   829fc:	2204      	movs	r2, #4
   829fe:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82a02:	4b64      	ldr	r3, [pc, #400]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a04:	781b      	ldrb	r3, [r3, #0]
   82a06:	4618      	mov	r0, r3
   82a08:	4b5f      	ldr	r3, [pc, #380]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82a0a:	781b      	ldrb	r3, [r3, #0]
   82a0c:	b299      	uxth	r1, r3
   82a0e:	4a61      	ldr	r2, [pc, #388]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a10:	1c43      	adds	r3, r0, #1
   82a12:	00db      	lsls	r3, r3, #3
   82a14:	4413      	add	r3, r2
   82a16:	460a      	mov	r2, r1
   82a18:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82a1a:	4b5b      	ldr	r3, [pc, #364]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82a1c:	781b      	ldrb	r3, [r3, #0]
   82a1e:	4958      	ldr	r1, [pc, #352]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82a20:	011a      	lsls	r2, r3, #4
   82a22:	440a      	add	r2, r1
   82a24:	320d      	adds	r2, #13
   82a26:	7812      	ldrb	r2, [r2, #0]
   82a28:	3201      	adds	r2, #1
   82a2a:	b2d1      	uxtb	r1, r2
   82a2c:	4a54      	ldr	r2, [pc, #336]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82a2e:	011b      	lsls	r3, r3, #4
   82a30:	4413      	add	r3, r2
   82a32:	330d      	adds	r3, #13
   82a34:	460a      	mov	r2, r1
   82a36:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82a38:	4b52      	ldr	r3, [pc, #328]	; (82b84 <Cl_alarms_scanforAlarms+0x168c>)
   82a3a:	2201      	movs	r2, #1
   82a3c:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82a3e:	4b52      	ldr	r3, [pc, #328]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82a40:	781a      	ldrb	r2, [r3, #0]
   82a42:	4b55      	ldr	r3, [pc, #340]	; (82b98 <Cl_alarms_scanforAlarms+0x16a0>)
   82a44:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82a46:	4b53      	ldr	r3, [pc, #332]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a48:	781b      	ldrb	r3, [r3, #0]
   82a4a:	461a      	mov	r2, r3
   82a4c:	4b51      	ldr	r3, [pc, #324]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a4e:	4413      	add	r3, r2
   82a50:	222e      	movs	r2, #46	; 0x2e
   82a52:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82a54:	4b51      	ldr	r3, [pc, #324]	; (82b9c <Cl_alarms_scanforAlarms+0x16a4>)
   82a56:	4798      	blx	r3
   82a58:	4603      	mov	r3, r0
   82a5a:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82a5c:	79fb      	ldrb	r3, [r7, #7]
   82a5e:	2b00      	cmp	r3, #0
   82a60:	f000 8089 	beq.w	82b76 <Cl_alarms_scanforAlarms+0x167e>
   82a64:	4b4a      	ldr	r3, [pc, #296]	; (82b90 <Cl_alarms_scanforAlarms+0x1698>)
   82a66:	4798      	blx	r3
					break;
   82a68:	e085      	b.n	82b76 <Cl_alarms_scanforAlarms+0x167e>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82a6a:	4b47      	ldr	r3, [pc, #284]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82a6c:	781b      	ldrb	r3, [r3, #0]
   82a6e:	4a44      	ldr	r2, [pc, #272]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82a70:	011b      	lsls	r3, r3, #4
   82a72:	4413      	add	r3, r2
   82a74:	3302      	adds	r3, #2
   82a76:	2201      	movs	r2, #1
   82a78:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82a7a:	4b41      	ldr	r3, [pc, #260]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82a7c:	2204      	movs	r2, #4
   82a7e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82a82:	4b3f      	ldr	r3, [pc, #252]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82a84:	2204      	movs	r2, #4
   82a86:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82a8a:	4b42      	ldr	r3, [pc, #264]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a8c:	781b      	ldrb	r3, [r3, #0]
   82a8e:	4618      	mov	r0, r3
   82a90:	4b3d      	ldr	r3, [pc, #244]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82a92:	781b      	ldrb	r3, [r3, #0]
   82a94:	b299      	uxth	r1, r3
   82a96:	4a3f      	ldr	r2, [pc, #252]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82a98:	1c43      	adds	r3, r0, #1
   82a9a:	00db      	lsls	r3, r3, #3
   82a9c:	4413      	add	r3, r2
   82a9e:	460a      	mov	r2, r1
   82aa0:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82aa2:	4b39      	ldr	r3, [pc, #228]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82aa4:	781b      	ldrb	r3, [r3, #0]
   82aa6:	4936      	ldr	r1, [pc, #216]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82aa8:	011a      	lsls	r2, r3, #4
   82aaa:	440a      	add	r2, r1
   82aac:	320d      	adds	r2, #13
   82aae:	7812      	ldrb	r2, [r2, #0]
   82ab0:	3201      	adds	r2, #1
   82ab2:	b2d1      	uxtb	r1, r2
   82ab4:	4a32      	ldr	r2, [pc, #200]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82ab6:	011b      	lsls	r3, r3, #4
   82ab8:	4413      	add	r3, r2
   82aba:	330d      	adds	r3, #13
   82abc:	460a      	mov	r2, r1
   82abe:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82ac0:	4b30      	ldr	r3, [pc, #192]	; (82b84 <Cl_alarms_scanforAlarms+0x168c>)
   82ac2:	2201      	movs	r2, #1
   82ac4:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82ac6:	4b30      	ldr	r3, [pc, #192]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82ac8:	781a      	ldrb	r2, [r3, #0]
   82aca:	4b33      	ldr	r3, [pc, #204]	; (82b98 <Cl_alarms_scanforAlarms+0x16a0>)
   82acc:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82ace:	4b31      	ldr	r3, [pc, #196]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82ad0:	781b      	ldrb	r3, [r3, #0]
   82ad2:	461a      	mov	r2, r3
   82ad4:	4b2f      	ldr	r3, [pc, #188]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82ad6:	4413      	add	r3, r2
   82ad8:	222e      	movs	r2, #46	; 0x2e
   82ada:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82adc:	4b2f      	ldr	r3, [pc, #188]	; (82b9c <Cl_alarms_scanforAlarms+0x16a4>)
   82ade:	4798      	blx	r3
   82ae0:	4603      	mov	r3, r0
   82ae2:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82ae4:	79fb      	ldrb	r3, [r7, #7]
   82ae6:	2b00      	cmp	r3, #0
   82ae8:	d047      	beq.n	82b7a <Cl_alarms_scanforAlarms+0x1682>
   82aea:	4b29      	ldr	r3, [pc, #164]	; (82b90 <Cl_alarms_scanforAlarms+0x1698>)
   82aec:	4798      	blx	r3
					break;
   82aee:	e044      	b.n	82b7a <Cl_alarms_scanforAlarms+0x1682>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82af0:	4b25      	ldr	r3, [pc, #148]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82af2:	781b      	ldrb	r3, [r3, #0]
   82af4:	4a22      	ldr	r2, [pc, #136]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82af6:	011b      	lsls	r3, r3, #4
   82af8:	4413      	add	r3, r2
   82afa:	3302      	adds	r3, #2
   82afc:	2201      	movs	r2, #1
   82afe:	701a      	strb	r2, [r3, #0]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82b00:	4b1f      	ldr	r3, [pc, #124]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82b02:	2204      	movs	r2, #4
   82b04:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82b08:	4b1d      	ldr	r3, [pc, #116]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82b0a:	2204      	movs	r2, #4
   82b0c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82b10:	4b20      	ldr	r3, [pc, #128]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82b12:	781b      	ldrb	r3, [r3, #0]
   82b14:	4618      	mov	r0, r3
   82b16:	4b1c      	ldr	r3, [pc, #112]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82b18:	781b      	ldrb	r3, [r3, #0]
   82b1a:	b299      	uxth	r1, r3
   82b1c:	4a1d      	ldr	r2, [pc, #116]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82b1e:	1c43      	adds	r3, r0, #1
   82b20:	00db      	lsls	r3, r3, #3
   82b22:	4413      	add	r3, r2
   82b24:	460a      	mov	r2, r1
   82b26:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82b28:	4b17      	ldr	r3, [pc, #92]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82b2a:	781b      	ldrb	r3, [r3, #0]
   82b2c:	4914      	ldr	r1, [pc, #80]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82b2e:	011a      	lsls	r2, r3, #4
   82b30:	440a      	add	r2, r1
   82b32:	320d      	adds	r2, #13
   82b34:	7812      	ldrb	r2, [r2, #0]
   82b36:	3201      	adds	r2, #1
   82b38:	b2d1      	uxtb	r1, r2
   82b3a:	4a11      	ldr	r2, [pc, #68]	; (82b80 <Cl_alarms_scanforAlarms+0x1688>)
   82b3c:	011b      	lsls	r3, r3, #4
   82b3e:	4413      	add	r3, r2
   82b40:	330d      	adds	r3, #13
   82b42:	460a      	mov	r2, r1
   82b44:	701a      	strb	r2, [r3, #0]
						cl_alarm_triggered = true;
   82b46:	4b0f      	ldr	r3, [pc, #60]	; (82b84 <Cl_alarms_scanforAlarms+0x168c>)
   82b48:	2201      	movs	r2, #1
   82b4a:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82b4c:	4b0e      	ldr	r3, [pc, #56]	; (82b88 <Cl_alarms_scanforAlarms+0x1690>)
   82b4e:	781a      	ldrb	r2, [r3, #0]
   82b50:	4b11      	ldr	r3, [pc, #68]	; (82b98 <Cl_alarms_scanforAlarms+0x16a0>)
   82b52:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82b54:	4b0f      	ldr	r3, [pc, #60]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82b56:	781b      	ldrb	r3, [r3, #0]
   82b58:	461a      	mov	r2, r3
   82b5a:	4b0e      	ldr	r3, [pc, #56]	; (82b94 <Cl_alarms_scanforAlarms+0x169c>)
   82b5c:	4413      	add	r3, r2
   82b5e:	222e      	movs	r2, #46	; 0x2e
   82b60:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82b62:	4b0e      	ldr	r3, [pc, #56]	; (82b9c <Cl_alarms_scanforAlarms+0x16a4>)
   82b64:	4798      	blx	r3
   82b66:	4603      	mov	r3, r0
   82b68:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82b6a:	79fb      	ldrb	r3, [r7, #7]
   82b6c:	2b00      	cmp	r3, #0
   82b6e:	d017      	beq.n	82ba0 <Cl_alarms_scanforAlarms+0x16a8>
   82b70:	4b07      	ldr	r3, [pc, #28]	; (82b90 <Cl_alarms_scanforAlarms+0x1698>)
   82b72:	4798      	blx	r3

					break;
   82b74:	e014      	b.n	82ba0 <Cl_alarms_scanforAlarms+0x16a8>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82b76:	bf00      	nop
   82b78:	e013      	b.n	82ba2 <Cl_alarms_scanforAlarms+0x16aa>
						cl_alarm_triggered = true;
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);
					break;
   82b7a:	bf00      	nop
   82b7c:	e011      	b.n	82ba2 <Cl_alarms_scanforAlarms+0x16aa>
   82b7e:	bf00      	nop
   82b80:	20071cfc 	.word	0x20071cfc
   82b84:	20071729 	.word	0x20071729
   82b88:	20071728 	.word	0x20071728
   82b8c:	00083199 	.word	0x00083199
   82b90:	00088e75 	.word	0x00088e75
   82b94:	200722b8 	.word	0x200722b8
   82b98:	200720f0 	.word	0x200720f0
   82b9c:	00082d15 	.word	0x00082d15
						cl_lastalarmid = dac_cond_alarm;
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
						ASSERT_ERROR(Cl_alarms_retcode);

					break;
   82ba0:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   82ba2:	4b50      	ldr	r3, [pc, #320]	; (82ce4 <Cl_alarms_scanforAlarms+0x17ec>)
   82ba4:	781b      	ldrb	r3, [r3, #0]
   82ba6:	2b00      	cmp	r3, #0
   82ba8:	f000 8097 	beq.w	82cda <Cl_alarms_scanforAlarms+0x17e2>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   82bac:	4b4e      	ldr	r3, [pc, #312]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82bae:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82bb2:	2b00      	cmp	r3, #0
   82bb4:	d10a      	bne.n	82bcc <Cl_alarms_scanforAlarms+0x16d4>
   82bb6:	4b4c      	ldr	r3, [pc, #304]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82bb8:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82bbc:	2b00      	cmp	r3, #0
   82bbe:	d105      	bne.n	82bcc <Cl_alarms_scanforAlarms+0x16d4>
   82bc0:	4b49      	ldr	r3, [pc, #292]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82bc2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   82bc6:	2b00      	cmp	r3, #0
   82bc8:	f000 8087 	beq.w	82cda <Cl_alarms_scanforAlarms+0x17e2>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   82bcc:	4b47      	ldr	r3, [pc, #284]	; (82cec <Cl_alarms_scanforAlarms+0x17f4>)
   82bce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82bd0:	461a      	mov	r2, r3
   82bd2:	4b47      	ldr	r3, [pc, #284]	; (82cf0 <Cl_alarms_scanforAlarms+0x17f8>)
   82bd4:	681b      	ldr	r3, [r3, #0]
   82bd6:	429a      	cmp	r2, r3
   82bd8:	d00c      	beq.n	82bf4 <Cl_alarms_scanforAlarms+0x16fc>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   82bda:	4b46      	ldr	r3, [pc, #280]	; (82cf4 <Cl_alarms_scanforAlarms+0x17fc>)
   82bdc:	2200      	movs	r2, #0
   82bde:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82be0:	4b45      	ldr	r3, [pc, #276]	; (82cf8 <Cl_alarms_scanforAlarms+0x1800>)
   82be2:	681b      	ldr	r3, [r3, #0]
   82be4:	3301      	adds	r3, #1
   82be6:	4a44      	ldr	r2, [pc, #272]	; (82cf8 <Cl_alarms_scanforAlarms+0x1800>)
   82be8:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   82bea:	4b44      	ldr	r3, [pc, #272]	; (82cfc <Cl_alarms_scanforAlarms+0x1804>)
   82bec:	681b      	ldr	r3, [r3, #0]
   82bee:	3301      	adds	r3, #1
   82bf0:	4a42      	ldr	r2, [pc, #264]	; (82cfc <Cl_alarms_scanforAlarms+0x1804>)
   82bf2:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   82bf4:	4b3f      	ldr	r3, [pc, #252]	; (82cf4 <Cl_alarms_scanforAlarms+0x17fc>)
   82bf6:	681b      	ldr	r3, [r3, #0]
   82bf8:	2b28      	cmp	r3, #40	; 0x28
   82bfa:	d932      	bls.n	82c62 <Cl_alarms_scanforAlarms+0x176a>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   82bfc:	4b3a      	ldr	r3, [pc, #232]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82bfe:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82c02:	2b01      	cmp	r3, #1
   82c04:	d02d      	beq.n	82c62 <Cl_alarms_scanforAlarms+0x176a>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82c06:	4b38      	ldr	r3, [pc, #224]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c08:	2201      	movs	r2, #1
   82c0a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82c0e:	4b3c      	ldr	r3, [pc, #240]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c10:	781b      	ldrb	r3, [r3, #0]
   82c12:	4a3b      	ldr	r2, [pc, #236]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c14:	3301      	adds	r3, #1
   82c16:	00db      	lsls	r3, r3, #3
   82c18:	4413      	add	r3, r2
   82c1a:	220c      	movs	r2, #12
   82c1c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   82c1e:	4b32      	ldr	r3, [pc, #200]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c20:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82c24:	3301      	adds	r3, #1
   82c26:	b2da      	uxtb	r2, r3
   82c28:	4b2f      	ldr	r3, [pc, #188]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c2a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82c2e:	4b2e      	ldr	r3, [pc, #184]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c30:	2204      	movs	r2, #4
   82c32:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   82c36:	4b33      	ldr	r3, [pc, #204]	; (82d04 <Cl_alarms_scanforAlarms+0x180c>)
   82c38:	2201      	movs	r2, #1
   82c3a:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82c3c:	4b32      	ldr	r3, [pc, #200]	; (82d08 <Cl_alarms_scanforAlarms+0x1810>)
   82c3e:	220c      	movs	r2, #12
   82c40:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82c42:	4b2f      	ldr	r3, [pc, #188]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c44:	781b      	ldrb	r3, [r3, #0]
   82c46:	461a      	mov	r2, r3
   82c48:	4b2d      	ldr	r3, [pc, #180]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c4a:	4413      	add	r3, r2
   82c4c:	222d      	movs	r2, #45	; 0x2d
   82c4e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82c50:	4b2e      	ldr	r3, [pc, #184]	; (82d0c <Cl_alarms_scanforAlarms+0x1814>)
   82c52:	4798      	blx	r3
   82c54:	4603      	mov	r3, r0
   82c56:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82c58:	79fb      	ldrb	r3, [r7, #7]
   82c5a:	2b00      	cmp	r3, #0
   82c5c:	d001      	beq.n	82c62 <Cl_alarms_scanforAlarms+0x176a>
   82c5e:	4b2c      	ldr	r3, [pc, #176]	; (82d10 <Cl_alarms_scanforAlarms+0x1818>)
   82c60:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   82c62:	4b25      	ldr	r3, [pc, #148]	; (82cf8 <Cl_alarms_scanforAlarms+0x1800>)
   82c64:	681b      	ldr	r3, [r3, #0]
   82c66:	2b02      	cmp	r3, #2
   82c68:	d932      	bls.n	82cd0 <Cl_alarms_scanforAlarms+0x17d8>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   82c6a:	4b1f      	ldr	r3, [pc, #124]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c6c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82c70:	2b01      	cmp	r3, #1
   82c72:	d02d      	beq.n	82cd0 <Cl_alarms_scanforAlarms+0x17d8>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82c74:	4b1c      	ldr	r3, [pc, #112]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c76:	2201      	movs	r2, #1
   82c78:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   82c7c:	4b20      	ldr	r3, [pc, #128]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c7e:	781b      	ldrb	r3, [r3, #0]
   82c80:	4a1f      	ldr	r2, [pc, #124]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82c82:	3301      	adds	r3, #1
   82c84:	00db      	lsls	r3, r3, #3
   82c86:	4413      	add	r3, r2
   82c88:	220e      	movs	r2, #14
   82c8a:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82c8c:	4b16      	ldr	r3, [pc, #88]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c8e:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   82c92:	3301      	adds	r3, #1
   82c94:	b2da      	uxtb	r2, r3
   82c96:	4b14      	ldr	r3, [pc, #80]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c98:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82c9c:	4b12      	ldr	r3, [pc, #72]	; (82ce8 <Cl_alarms_scanforAlarms+0x17f0>)
   82c9e:	2204      	movs	r2, #4
   82ca0:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   82ca4:	4b17      	ldr	r3, [pc, #92]	; (82d04 <Cl_alarms_scanforAlarms+0x180c>)
   82ca6:	2201      	movs	r2, #1
   82ca8:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   82caa:	4b17      	ldr	r3, [pc, #92]	; (82d08 <Cl_alarms_scanforAlarms+0x1810>)
   82cac:	220e      	movs	r2, #14
   82cae:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82cb0:	4b13      	ldr	r3, [pc, #76]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82cb2:	781b      	ldrb	r3, [r3, #0]
   82cb4:	461a      	mov	r2, r3
   82cb6:	4b12      	ldr	r3, [pc, #72]	; (82d00 <Cl_alarms_scanforAlarms+0x1808>)
   82cb8:	4413      	add	r3, r2
   82cba:	222d      	movs	r2, #45	; 0x2d
   82cbc:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82cbe:	4b13      	ldr	r3, [pc, #76]	; (82d0c <Cl_alarms_scanforAlarms+0x1814>)
   82cc0:	4798      	blx	r3
   82cc2:	4603      	mov	r3, r0
   82cc4:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82cc6:	79fb      	ldrb	r3, [r7, #7]
   82cc8:	2b00      	cmp	r3, #0
   82cca:	d001      	beq.n	82cd0 <Cl_alarms_scanforAlarms+0x17d8>
   82ccc:	4b10      	ldr	r3, [pc, #64]	; (82d10 <Cl_alarms_scanforAlarms+0x1818>)
   82cce:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82cd0:	4b06      	ldr	r3, [pc, #24]	; (82cec <Cl_alarms_scanforAlarms+0x17f4>)
   82cd2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82cd4:	461a      	mov	r2, r3
   82cd6:	4b06      	ldr	r3, [pc, #24]	; (82cf0 <Cl_alarms_scanforAlarms+0x17f8>)
   82cd8:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82cda:	2300      	movs	r3, #0
}
   82cdc:	4618      	mov	r0, r3
   82cde:	3708      	adds	r7, #8
   82ce0:	46bd      	mov	sp, r7
   82ce2:	bd80      	pop	{r7, pc}
   82ce4:	20071a59 	.word	0x20071a59
   82ce8:	20071cfc 	.word	0x20071cfc
   82cec:	2007221c 	.word	0x2007221c
   82cf0:	20071718 	.word	0x20071718
   82cf4:	2007171c 	.word	0x2007171c
   82cf8:	20071720 	.word	0x20071720
   82cfc:	20071724 	.word	0x20071724
   82d00:	200722b8 	.word	0x200722b8
   82d04:	20071729 	.word	0x20071729
   82d08:	200720f0 	.word	0x200720f0
   82d0c:	00082d15 	.word	0x00082d15
   82d10:	00088e75 	.word	0x00088e75

00082d14 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82d14:	b480      	push	{r7}
   82d16:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue4.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82d18:	4b0a      	ldr	r3, [pc, #40]	; (82d44 <Cl_UpdateMacAlarmEventTable+0x30>)
   82d1a:	781b      	ldrb	r3, [r3, #0]
   82d1c:	2b00      	cmp	r3, #0
   82d1e:	d00c      	beq.n	82d3a <Cl_UpdateMacAlarmEventTable+0x26>
   82d20:	4b09      	ldr	r3, [pc, #36]	; (82d48 <Cl_UpdateMacAlarmEventTable+0x34>)
   82d22:	781b      	ldrb	r3, [r3, #0]
   82d24:	2b09      	cmp	r3, #9
   82d26:	d808      	bhi.n	82d3a <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue4.Cl_MacNewEvent = true;
   82d28:	4b07      	ldr	r3, [pc, #28]	; (82d48 <Cl_UpdateMacAlarmEventTable+0x34>)
   82d2a:	2201      	movs	r2, #1
   82d2c:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount++;
   82d2e:	4b06      	ldr	r3, [pc, #24]	; (82d48 <Cl_UpdateMacAlarmEventTable+0x34>)
   82d30:	781b      	ldrb	r3, [r3, #0]
   82d32:	3301      	adds	r3, #1
   82d34:	b2da      	uxtb	r2, r3
   82d36:	4b04      	ldr	r3, [pc, #16]	; (82d48 <Cl_UpdateMacAlarmEventTable+0x34>)
   82d38:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   82d3a:	2300      	movs	r3, #0
}
   82d3c:	4618      	mov	r0, r3
   82d3e:	46bd      	mov	sp, r7
   82d40:	bc80      	pop	{r7}
   82d42:	4770      	bx	lr
   82d44:	20071729 	.word	0x20071729
   82d48:	200722b8 	.word	0x200722b8

00082d4c <Cl_UpdateMacBCEventTable>:


Cl_ReturnCodeType Cl_UpdateMacBCEventTable(void)
{
   82d4c:	b480      	push	{r7}
   82d4e:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueueBc.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82d50:	4b0a      	ldr	r3, [pc, #40]	; (82d7c <Cl_UpdateMacBCEventTable+0x30>)
   82d52:	781b      	ldrb	r3, [r3, #0]
   82d54:	2b00      	cmp	r3, #0
   82d56:	d00c      	beq.n	82d72 <Cl_UpdateMacBCEventTable+0x26>
   82d58:	4b09      	ldr	r3, [pc, #36]	; (82d80 <Cl_UpdateMacBCEventTable+0x34>)
   82d5a:	781b      	ldrb	r3, [r3, #0]
   82d5c:	2b09      	cmp	r3, #9
   82d5e:	d808      	bhi.n	82d72 <Cl_UpdateMacBCEventTable+0x26>


	{
		Cl_MacEventQueueBc.Cl_MacNewEvent = true;
   82d60:	4b07      	ldr	r3, [pc, #28]	; (82d80 <Cl_UpdateMacBCEventTable+0x34>)
   82d62:	2201      	movs	r2, #1
   82d64:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount++;
   82d66:	4b06      	ldr	r3, [pc, #24]	; (82d80 <Cl_UpdateMacBCEventTable+0x34>)
   82d68:	781b      	ldrb	r3, [r3, #0]
   82d6a:	3301      	adds	r3, #1
   82d6c:	b2da      	uxtb	r2, r3
   82d6e:	4b04      	ldr	r3, [pc, #16]	; (82d80 <Cl_UpdateMacBCEventTable+0x34>)
   82d70:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   82d72:	2300      	movs	r3, #0
}
   82d74:	4618      	mov	r0, r3
   82d76:	46bd      	mov	sp, r7
   82d78:	bc80      	pop	{r7}
   82d7a:	4770      	bx	lr
   82d7c:	20071729 	.word	0x20071729
   82d80:	200724dc 	.word	0x200724dc

00082d84 <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   82d84:	b480      	push	{r7}
   82d86:	b085      	sub	sp, #20
   82d88:	af00      	add	r7, sp, #0
   82d8a:	60ba      	str	r2, [r7, #8]
   82d8c:	607b      	str	r3, [r7, #4]
   82d8e:	4603      	mov	r3, r0
   82d90:	73fb      	strb	r3, [r7, #15]
   82d92:	460b      	mov	r3, r1
   82d94:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   82d96:	7bfb      	ldrb	r3, [r7, #15]
   82d98:	4a10      	ldr	r2, [pc, #64]	; (82ddc <Cl_AlarmConfigureAlarmType+0x58>)
   82d9a:	011b      	lsls	r3, r3, #4
   82d9c:	4413      	add	r3, r2
   82d9e:	3301      	adds	r3, #1
   82da0:	7bba      	ldrb	r2, [r7, #14]
   82da2:	701a      	strb	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   82da4:	7bfb      	ldrb	r3, [r7, #15]
   82da6:	4a0d      	ldr	r2, [pc, #52]	; (82ddc <Cl_AlarmConfigureAlarmType+0x58>)
   82da8:	011b      	lsls	r3, r3, #4
   82daa:	4413      	add	r3, r2
   82dac:	3308      	adds	r3, #8
   82dae:	687a      	ldr	r2, [r7, #4]
   82db0:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   82db2:	7bfb      	ldrb	r3, [r7, #15]
   82db4:	4a09      	ldr	r2, [pc, #36]	; (82ddc <Cl_AlarmConfigureAlarmType+0x58>)
   82db6:	011b      	lsls	r3, r3, #4
   82db8:	4413      	add	r3, r2
   82dba:	3304      	adds	r3, #4
   82dbc:	68ba      	ldr	r2, [r7, #8]
   82dbe:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   82dc0:	7bfb      	ldrb	r3, [r7, #15]
   82dc2:	4a06      	ldr	r2, [pc, #24]	; (82ddc <Cl_AlarmConfigureAlarmType+0x58>)
   82dc4:	011b      	lsls	r3, r3, #4
   82dc6:	4413      	add	r3, r2
   82dc8:	330c      	adds	r3, #12
   82dca:	7e3a      	ldrb	r2, [r7, #24]
   82dcc:	701a      	strb	r2, [r3, #0]

return CL_OK;
   82dce:	2300      	movs	r3, #0
		
}
   82dd0:	4618      	mov	r0, r3
   82dd2:	3714      	adds	r7, #20
   82dd4:	46bd      	mov	sp, r7
   82dd6:	bc80      	pop	{r7}
   82dd8:	4770      	bx	lr
   82dda:	bf00      	nop
   82ddc:	20071cfc 	.word	0x20071cfc

00082de0 <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   82de0:	b580      	push	{r7, lr}
   82de2:	b084      	sub	sp, #16
   82de4:	af00      	add	r7, sp, #0
   82de6:	4603      	mov	r3, r0
   82de8:	460a      	mov	r2, r1
   82dea:	71fb      	strb	r3, [r7, #7]
   82dec:	4613      	mov	r3, r2
   82dee:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82df0:	2300      	movs	r3, #0
   82df2:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82df4:	79fb      	ldrb	r3, [r7, #7]
   82df6:	2b00      	cmp	r3, #0
   82df8:	d059      	beq.n	82eae <Cl_AlarmActivateAlarms+0xce>
   82dfa:	79fb      	ldrb	r3, [r7, #7]
   82dfc:	2b3e      	cmp	r3, #62	; 0x3e
   82dfe:	d856      	bhi.n	82eae <Cl_AlarmActivateAlarms+0xce>
	{

	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82e00:	79fb      	ldrb	r3, [r7, #7]
   82e02:	2b3d      	cmp	r3, #61	; 0x3d
   82e04:	d005      	beq.n	82e12 <Cl_AlarmActivateAlarms+0x32>
   82e06:	79fb      	ldrb	r3, [r7, #7]
   82e08:	2b3e      	cmp	r3, #62	; 0x3e
   82e0a:	d002      	beq.n	82e12 <Cl_AlarmActivateAlarms+0x32>
   82e0c:	79fb      	ldrb	r3, [r7, #7]
   82e0e:	2b3c      	cmp	r3, #60	; 0x3c
   82e10:	d114      	bne.n	82e3c <Cl_AlarmActivateAlarms+0x5c>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82e12:	79fb      	ldrb	r3, [r7, #7]
   82e14:	4a2c      	ldr	r2, [pc, #176]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e16:	011b      	lsls	r3, r3, #4
   82e18:	4413      	add	r3, r2
   82e1a:	330e      	adds	r3, #14
   82e1c:	2201      	movs	r2, #1
   82e1e:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82e20:	79fb      	ldrb	r3, [r7, #7]
   82e22:	4a29      	ldr	r2, [pc, #164]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e24:	011b      	lsls	r3, r3, #4
   82e26:	4413      	add	r3, r2
   82e28:	3302      	adds	r3, #2
   82e2a:	2202      	movs	r2, #2
   82e2c:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82e2e:	79fb      	ldrb	r3, [r7, #7]
   82e30:	4a25      	ldr	r2, [pc, #148]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e32:	011b      	lsls	r3, r3, #4
   82e34:	4413      	add	r3, r2
   82e36:	330d      	adds	r3, #13
   82e38:	2200      	movs	r2, #0
   82e3a:	701a      	strb	r2, [r3, #0]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82e3c:	4b23      	ldr	r3, [pc, #140]	; (82ecc <Cl_AlarmActivateAlarms+0xec>)
   82e3e:	781b      	ldrb	r3, [r3, #0]
   82e40:	2b00      	cmp	r3, #0
   82e42:	d036      	beq.n	82eb2 <Cl_AlarmActivateAlarms+0xd2>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82e44:	79fb      	ldrb	r3, [r7, #7]
   82e46:	4a20      	ldr	r2, [pc, #128]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e48:	011b      	lsls	r3, r3, #4
   82e4a:	4413      	add	r3, r2
   82e4c:	79fa      	ldrb	r2, [r7, #7]
   82e4e:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82e50:	79bb      	ldrb	r3, [r7, #6]
   82e52:	2b00      	cmp	r3, #0
   82e54:	d015      	beq.n	82e82 <Cl_AlarmActivateAlarms+0xa2>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82e56:	79fb      	ldrb	r3, [r7, #7]
   82e58:	4a1b      	ldr	r2, [pc, #108]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e5a:	011b      	lsls	r3, r3, #4
   82e5c:	4413      	add	r3, r2
   82e5e:	330e      	adds	r3, #14
   82e60:	2201      	movs	r2, #1
   82e62:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82e64:	79fb      	ldrb	r3, [r7, #7]
   82e66:	4a18      	ldr	r2, [pc, #96]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e68:	011b      	lsls	r3, r3, #4
   82e6a:	4413      	add	r3, r2
   82e6c:	3302      	adds	r3, #2
   82e6e:	2202      	movs	r2, #2
   82e70:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82e72:	79fb      	ldrb	r3, [r7, #7]
   82e74:	4a14      	ldr	r2, [pc, #80]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e76:	011b      	lsls	r3, r3, #4
   82e78:	4413      	add	r3, r2
   82e7a:	330d      	adds	r3, #13
   82e7c:	2200      	movs	r2, #0
   82e7e:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82e80:	e017      	b.n	82eb2 <Cl_AlarmActivateAlarms+0xd2>
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82e82:	79fb      	ldrb	r3, [r7, #7]
   82e84:	4a10      	ldr	r2, [pc, #64]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e86:	011b      	lsls	r3, r3, #4
   82e88:	4413      	add	r3, r2
   82e8a:	330e      	adds	r3, #14
   82e8c:	2200      	movs	r2, #0
   82e8e:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82e90:	79fb      	ldrb	r3, [r7, #7]
   82e92:	4a0d      	ldr	r2, [pc, #52]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82e94:	011b      	lsls	r3, r3, #4
   82e96:	4413      	add	r3, r2
   82e98:	3302      	adds	r3, #2
   82e9a:	2204      	movs	r2, #4
   82e9c:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82e9e:	79fb      	ldrb	r3, [r7, #7]
   82ea0:	4a09      	ldr	r2, [pc, #36]	; (82ec8 <Cl_AlarmActivateAlarms+0xe8>)
   82ea2:	011b      	lsls	r3, r3, #4
   82ea4:	4413      	add	r3, r2
   82ea6:	330d      	adds	r3, #13
   82ea8:	2200      	movs	r2, #0
   82eaa:	701a      	strb	r2, [r3, #0]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82eac:	e001      	b.n	82eb2 <Cl_AlarmActivateAlarms+0xd2>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   82eae:	2304      	movs	r3, #4
   82eb0:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   82eb2:	7bfb      	ldrb	r3, [r7, #15]
   82eb4:	2b00      	cmp	r3, #0
   82eb6:	d001      	beq.n	82ebc <Cl_AlarmActivateAlarms+0xdc>
   82eb8:	4b05      	ldr	r3, [pc, #20]	; (82ed0 <Cl_AlarmActivateAlarms+0xf0>)
   82eba:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   82ebc:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82ebe:	4618      	mov	r0, r3
   82ec0:	3710      	adds	r7, #16
   82ec2:	46bd      	mov	sp, r7
   82ec4:	bd80      	pop	{r7, pc}
   82ec6:	bf00      	nop
   82ec8:	20071cfc 	.word	0x20071cfc
   82ecc:	20070a28 	.word	0x20070a28
   82ed0:	00088e75 	.word	0x00088e75

00082ed4 <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82ed4:	b480      	push	{r7}
   82ed6:	b085      	sub	sp, #20
   82ed8:	af00      	add	r7, sp, #0
   82eda:	4603      	mov	r3, r0
   82edc:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82ede:	2300      	movs	r3, #0
   82ee0:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82ee2:	79fb      	ldrb	r3, [r7, #7]
   82ee4:	2b00      	cmp	r3, #0
   82ee6:	d00c      	beq.n	82f02 <Cl_AlarmResetAlarm+0x2e>
   82ee8:	79fb      	ldrb	r3, [r7, #7]
   82eea:	2b3e      	cmp	r3, #62	; 0x3e
   82eec:	d809      	bhi.n	82f02 <Cl_AlarmResetAlarm+0x2e>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82eee:	79fb      	ldrb	r3, [r7, #7]
   82ef0:	4a08      	ldr	r2, [pc, #32]	; (82f14 <Cl_AlarmResetAlarm+0x40>)
   82ef2:	011b      	lsls	r3, r3, #4
   82ef4:	4413      	add	r3, r2
   82ef6:	3302      	adds	r3, #2
   82ef8:	2202      	movs	r2, #2
   82efa:	701a      	strb	r2, [r3, #0]
						cl_AlarmRetCode = CL_OK;
   82efc:	2300      	movs	r3, #0
   82efe:	73fb      	strb	r3, [r7, #15]
   82f00:	e001      	b.n	82f06 <Cl_AlarmResetAlarm+0x32>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   82f02:	2304      	movs	r3, #4
   82f04:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   82f06:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82f08:	4618      	mov	r0, r3
   82f0a:	3714      	adds	r7, #20
   82f0c:	46bd      	mov	sp, r7
   82f0e:	bc80      	pop	{r7}
   82f10:	4770      	bx	lr
   82f12:	bf00      	nop
   82f14:	20071cfc 	.word	0x20071cfc

00082f18 <Cl_CheckBcEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
  
 Cl_ReturnCodeType Cl_CheckBcEvent(){
   82f18:	b580      	push	{r7, lr}
   82f1a:	af00      	add	r7, sp, #0

	 
	 if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   82f1c:	4b20      	ldr	r3, [pc, #128]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f1e:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   82f22:	2b00      	cmp	r3, #0
   82f24:	d039      	beq.n	82f9a <Cl_CheckBcEvent+0x82>
	 {			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		 if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   82f26:	4b1f      	ldr	r3, [pc, #124]	; (82fa4 <Cl_CheckBcEvent+0x8c>)
   82f28:	8b9b      	ldrh	r3, [r3, #28]
   82f2a:	2b01      	cmp	r3, #1
   82f2c:	d128      	bne.n	82f80 <Cl_CheckBcEvent+0x68>
   82f2e:	4b1e      	ldr	r3, [pc, #120]	; (82fa8 <Cl_CheckBcEvent+0x90>)
   82f30:	f9b3 3000 	ldrsh.w	r3, [r3]
   82f34:	2b00      	cmp	r3, #0
   82f36:	d123      	bne.n	82f80 <Cl_CheckBcEvent+0x68>
		 {
			 
			 
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   82f38:	4b19      	ldr	r3, [pc, #100]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f3a:	2201      	movs	r2, #1
   82f3c:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_MacEventQueueBc.Cl_MacEventData[Cl_MacEventQueueBc.Cl_MacNewEventcount][0]=FPCURRENTSTATUS;
   82f40:	4b1a      	ldr	r3, [pc, #104]	; (82fac <Cl_CheckBcEvent+0x94>)
   82f42:	781b      	ldrb	r3, [r3, #0]
   82f44:	4a19      	ldr	r2, [pc, #100]	; (82fac <Cl_CheckBcEvent+0x94>)
   82f46:	3301      	adds	r3, #1
   82f48:	00db      	lsls	r3, r3, #3
   82f4a:	4413      	add	r3, r2
   82f4c:	223c      	movs	r2, #60	; 0x3c
   82f4e:	809a      	strh	r2, [r3, #4]
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   82f50:	4b13      	ldr	r3, [pc, #76]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f52:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   82f56:	3301      	adds	r3, #1
   82f58:	b2da      	uxtb	r2, r3
   82f5a:	4b11      	ldr	r3, [pc, #68]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f5c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			 cl_alarm_triggered = true;
   82f60:	4b13      	ldr	r3, [pc, #76]	; (82fb0 <Cl_CheckBcEvent+0x98>)
   82f62:	2201      	movs	r2, #1
   82f64:	701a      	strb	r2, [r3, #0]
			 cl_lastalarmid = FPCURRENTSTATUS;
   82f66:	4b13      	ldr	r3, [pc, #76]	; (82fb4 <Cl_CheckBcEvent+0x9c>)
   82f68:	223c      	movs	r2, #60	; 0x3c
   82f6a:	701a      	strb	r2, [r3, #0]
			// Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			 //Cl_UpdateMacBCEventTable();
			// ASSERT_ERROR(Cl_alarms_retcode);
			 Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   82f6c:	4b0f      	ldr	r3, [pc, #60]	; (82fac <Cl_CheckBcEvent+0x94>)
   82f6e:	781b      	ldrb	r3, [r3, #0]
   82f70:	461a      	mov	r2, r3
   82f72:	4b0e      	ldr	r3, [pc, #56]	; (82fac <Cl_CheckBcEvent+0x94>)
   82f74:	4413      	add	r3, r2
   82f76:	222f      	movs	r2, #47	; 0x2f
   82f78:	709a      	strb	r2, [r3, #2]
			 Cl_UpdateMacBCEventTable();//Cl_UpdateMacAlarmEventTable();
   82f7a:	4b0f      	ldr	r3, [pc, #60]	; (82fb8 <Cl_CheckBcEvent+0xa0>)
   82f7c:	4798      	blx	r3
   82f7e:	e007      	b.n	82f90 <Cl_CheckBcEvent+0x78>
			 
		 }
		 else
		 {

			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   82f80:	4b07      	ldr	r3, [pc, #28]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f82:	2204      	movs	r2, #4
   82f84:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   82f88:	4b05      	ldr	r3, [pc, #20]	; (82fa0 <Cl_CheckBcEvent+0x88>)
   82f8a:	2200      	movs	r2, #0
   82f8c:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

			 
		 }
		 FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   82f90:	4b04      	ldr	r3, [pc, #16]	; (82fa4 <Cl_CheckBcEvent+0x8c>)
   82f92:	8b9b      	ldrh	r3, [r3, #28]
   82f94:	b21a      	sxth	r2, r3
   82f96:	4b04      	ldr	r3, [pc, #16]	; (82fa8 <Cl_CheckBcEvent+0x90>)
   82f98:	801a      	strh	r2, [r3, #0]
		 
	 }
	 
 }
   82f9a:	bf00      	nop
   82f9c:	4618      	mov	r0, r3
   82f9e:	bd80      	pop	{r7, pc}
   82fa0:	20071cfc 	.word	0x20071cfc
   82fa4:	2007221c 	.word	0x2007221c
   82fa8:	2007172a 	.word	0x2007172a
   82fac:	200724dc 	.word	0x200724dc
   82fb0:	20071729 	.word	0x20071729
   82fb4:	200720f0 	.word	0x200720f0
   82fb8:	00082d4d 	.word	0x00082d4d

00082fbc <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   82fbc:	b580      	push	{r7, lr}
   82fbe:	b084      	sub	sp, #16
   82fc0:	af00      	add	r7, sp, #0
   82fc2:	4603      	mov	r3, r0
   82fc4:	6039      	str	r1, [r7, #0]
   82fc6:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   82fc8:	2300      	movs	r3, #0
   82fca:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82fcc:	79fb      	ldrb	r3, [r7, #7]
   82fce:	2b00      	cmp	r3, #0
   82fd0:	d01c      	beq.n	8300c <Cl_Alarm_GetAlarmStatus+0x50>
   82fd2:	79fb      	ldrb	r3, [r7, #7]
   82fd4:	2b3e      	cmp	r3, #62	; 0x3e
   82fd6:	d819      	bhi.n	8300c <Cl_Alarm_GetAlarmStatus+0x50>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   82fd8:	79fb      	ldrb	r3, [r7, #7]
   82fda:	4a12      	ldr	r2, [pc, #72]	; (83024 <Cl_Alarm_GetAlarmStatus+0x68>)
   82fdc:	011b      	lsls	r3, r3, #4
   82fde:	4413      	add	r3, r2
   82fe0:	3302      	adds	r3, #2
   82fe2:	781b      	ldrb	r3, [r3, #0]
   82fe4:	2b01      	cmp	r3, #1
   82fe6:	d007      	beq.n	82ff8 <Cl_Alarm_GetAlarmStatus+0x3c>
   82fe8:	79fb      	ldrb	r3, [r7, #7]
   82fea:	4a0e      	ldr	r2, [pc, #56]	; (83024 <Cl_Alarm_GetAlarmStatus+0x68>)
   82fec:	011b      	lsls	r3, r3, #4
   82fee:	4413      	add	r3, r2
   82ff0:	3302      	adds	r3, #2
   82ff2:	781b      	ldrb	r3, [r3, #0]
   82ff4:	2b03      	cmp	r3, #3
   82ff6:	d103      	bne.n	83000 <Cl_Alarm_GetAlarmStatus+0x44>
		 {
			 *cl_status = true;
   82ff8:	683b      	ldr	r3, [r7, #0]
   82ffa:	2201      	movs	r2, #1
   82ffc:	701a      	strb	r2, [r3, #0]
   82ffe:	e002      	b.n	83006 <Cl_Alarm_GetAlarmStatus+0x4a>
		 }
		 else
		 {
			 *cl_status = false;
   83000:	683b      	ldr	r3, [r7, #0]
   83002:	2200      	movs	r2, #0
   83004:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   83006:	2300      	movs	r3, #0
   83008:	73fb      	strb	r3, [r7, #15]
   8300a:	e001      	b.n	83010 <Cl_Alarm_GetAlarmStatus+0x54>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   8300c:	2304      	movs	r3, #4
   8300e:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   83010:	7bfb      	ldrb	r3, [r7, #15]
   83012:	2b00      	cmp	r3, #0
   83014:	d001      	beq.n	8301a <Cl_Alarm_GetAlarmStatus+0x5e>
   83016:	4b04      	ldr	r3, [pc, #16]	; (83028 <Cl_Alarm_GetAlarmStatus+0x6c>)
   83018:	4798      	blx	r3
	return cl_alarmRetCode;
   8301a:	7bfb      	ldrb	r3, [r7, #15]
	
}
   8301c:	4618      	mov	r0, r3
   8301e:	3710      	adds	r7, #16
   83020:	46bd      	mov	sp, r7
   83022:	bd80      	pop	{r7, pc}
   83024:	20071cfc 	.word	0x20071cfc
   83028:	00088e75 	.word	0x00088e75

0008302c <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   8302c:	b580      	push	{r7, lr}
   8302e:	b084      	sub	sp, #16
   83030:	af00      	add	r7, sp, #0
   83032:	4603      	mov	r3, r0
   83034:	460a      	mov	r2, r1
   83036:	71fb      	strb	r3, [r7, #7]
   83038:	4613      	mov	r3, r2
   8303a:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   8303c:	2300      	movs	r3, #0
   8303e:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   83040:	79fb      	ldrb	r3, [r7, #7]
   83042:	2b00      	cmp	r3, #0
   83044:	d063      	beq.n	8310e <Cl_Alarm_TriggerAlarm+0xe2>
   83046:	79fb      	ldrb	r3, [r7, #7]
   83048:	2b3e      	cmp	r3, #62	; 0x3e
   8304a:	d860      	bhi.n	8310e <Cl_Alarm_TriggerAlarm+0xe2>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   8304c:	79fb      	ldrb	r3, [r7, #7]
   8304e:	4a36      	ldr	r2, [pc, #216]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   83050:	011b      	lsls	r3, r3, #4
   83052:	4413      	add	r3, r2
   83054:	330e      	adds	r3, #14
   83056:	781b      	ldrb	r3, [r3, #0]
   83058:	2b00      	cmp	r3, #0
   8305a:	d055      	beq.n	83108 <Cl_Alarm_TriggerAlarm+0xdc>
	{
			if(cl_status)
   8305c:	79bb      	ldrb	r3, [r7, #6]
   8305e:	2b00      	cmp	r3, #0
   83060:	d039      	beq.n	830d6 <Cl_Alarm_TriggerAlarm+0xaa>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   83062:	79fb      	ldrb	r3, [r7, #7]
   83064:	4a30      	ldr	r2, [pc, #192]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   83066:	011b      	lsls	r3, r3, #4
   83068:	4413      	add	r3, r2
   8306a:	3302      	adds	r3, #2
   8306c:	2201      	movs	r2, #1
   8306e:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=cl_alarm_id;
   83070:	4b2e      	ldr	r3, [pc, #184]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   83072:	781b      	ldrb	r3, [r3, #0]
   83074:	79fa      	ldrb	r2, [r7, #7]
   83076:	b291      	uxth	r1, r2
   83078:	4a2c      	ldr	r2, [pc, #176]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   8307a:	3301      	adds	r3, #1
   8307c:	00db      	lsls	r3, r3, #3
   8307e:	4413      	add	r3, r2
   83080:	460a      	mov	r2, r1
   83082:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   83084:	79fb      	ldrb	r3, [r7, #7]
   83086:	4928      	ldr	r1, [pc, #160]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   83088:	011a      	lsls	r2, r3, #4
   8308a:	440a      	add	r2, r1
   8308c:	320d      	adds	r2, #13
   8308e:	7812      	ldrb	r2, [r2, #0]
   83090:	3201      	adds	r2, #1
   83092:	b2d1      	uxtb	r1, r2
   83094:	4a24      	ldr	r2, [pc, #144]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   83096:	011b      	lsls	r3, r3, #4
   83098:	4413      	add	r3, r2
   8309a:	330d      	adds	r3, #13
   8309c:	460a      	mov	r2, r1
   8309e:	701a      	strb	r2, [r3, #0]
				cl_alarm_triggered = true;
   830a0:	4b23      	ldr	r3, [pc, #140]	; (83130 <Cl_Alarm_TriggerAlarm+0x104>)
   830a2:	2201      	movs	r2, #1
   830a4:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   830a6:	4a23      	ldr	r2, [pc, #140]	; (83134 <Cl_Alarm_TriggerAlarm+0x108>)
   830a8:	79fb      	ldrb	r3, [r7, #7]
   830aa:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   830ac:	79fb      	ldrb	r3, [r7, #7]
   830ae:	2b3c      	cmp	r3, #60	; 0x3c
   830b0:	d107      	bne.n	830c2 <Cl_Alarm_TriggerAlarm+0x96>
				{
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   830b2:	4b1e      	ldr	r3, [pc, #120]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   830b4:	781b      	ldrb	r3, [r3, #0]
   830b6:	461a      	mov	r2, r3
   830b8:	4b1c      	ldr	r3, [pc, #112]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   830ba:	4413      	add	r3, r2
   830bc:	222d      	movs	r2, #45	; 0x2d
   830be:	709a      	strb	r2, [r3, #2]
   830c0:	e006      	b.n	830d0 <Cl_Alarm_TriggerAlarm+0xa4>
				}
				else
				{
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   830c2:	4b1a      	ldr	r3, [pc, #104]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   830c4:	781b      	ldrb	r3, [r3, #0]
   830c6:	461a      	mov	r2, r3
   830c8:	4b18      	ldr	r3, [pc, #96]	; (8312c <Cl_Alarm_TriggerAlarm+0x100>)
   830ca:	4413      	add	r3, r2
   830cc:	222e      	movs	r2, #46	; 0x2e
   830ce:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   830d0:	4b19      	ldr	r3, [pc, #100]	; (83138 <Cl_Alarm_TriggerAlarm+0x10c>)
   830d2:	4798      	blx	r3
   830d4:	e018      	b.n	83108 <Cl_Alarm_TriggerAlarm+0xdc>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   830d6:	79fb      	ldrb	r3, [r7, #7]
   830d8:	4a13      	ldr	r2, [pc, #76]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   830da:	011b      	lsls	r3, r3, #4
   830dc:	4413      	add	r3, r2
   830de:	3302      	adds	r3, #2
   830e0:	781b      	ldrb	r3, [r3, #0]
   830e2:	2b01      	cmp	r3, #1
   830e4:	d110      	bne.n	83108 <Cl_Alarm_TriggerAlarm+0xdc>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   830e6:	79fb      	ldrb	r3, [r7, #7]
   830e8:	4a0f      	ldr	r2, [pc, #60]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   830ea:	011b      	lsls	r3, r3, #4
   830ec:	4413      	add	r3, r2
   830ee:	3302      	adds	r3, #2
   830f0:	2204      	movs	r2, #4
   830f2:	701a      	strb	r2, [r3, #0]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   830f4:	79fb      	ldrb	r3, [r7, #7]
   830f6:	4a0c      	ldr	r2, [pc, #48]	; (83128 <Cl_Alarm_TriggerAlarm+0xfc>)
   830f8:	011b      	lsls	r3, r3, #4
   830fa:	4413      	add	r3, r2
   830fc:	330d      	adds	r3, #13
   830fe:	2200      	movs	r2, #0
   83100:	701a      	strb	r2, [r3, #0]
					cl_alarm_triggered = false;
   83102:	4b0b      	ldr	r3, [pc, #44]	; (83130 <Cl_Alarm_TriggerAlarm+0x104>)
   83104:	2200      	movs	r2, #0
   83106:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   83108:	2300      	movs	r3, #0
   8310a:	73fb      	strb	r3, [r7, #15]
   8310c:	e001      	b.n	83112 <Cl_Alarm_TriggerAlarm+0xe6>
}else
{
	cl_alarmRetCode = CL_ERROR;
   8310e:	2304      	movs	r3, #4
   83110:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   83112:	7bfb      	ldrb	r3, [r7, #15]
   83114:	2b00      	cmp	r3, #0
   83116:	d001      	beq.n	8311c <Cl_Alarm_TriggerAlarm+0xf0>
   83118:	4b08      	ldr	r3, [pc, #32]	; (8313c <Cl_Alarm_TriggerAlarm+0x110>)
   8311a:	4798      	blx	r3
return CL_OK;
   8311c:	2300      	movs	r3, #0

}
   8311e:	4618      	mov	r0, r3
   83120:	3710      	adds	r7, #16
   83122:	46bd      	mov	sp, r7
   83124:	bd80      	pop	{r7, pc}
   83126:	bf00      	nop
   83128:	20071cfc 	.word	0x20071cfc
   8312c:	200722b8 	.word	0x200722b8
   83130:	20071729 	.word	0x20071729
   83134:	200720f0 	.word	0x200720f0
   83138:	00082d15 	.word	0x00082d15
   8313c:	00088e75 	.word	0x00088e75

00083140 <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   83140:	b480      	push	{r7}
   83142:	b083      	sub	sp, #12
   83144:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   83146:	2300      	movs	r3, #0
   83148:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   8314a:	4b0f      	ldr	r3, [pc, #60]	; (83188 <Cl_Alarm_timmer_50millisec+0x48>)
   8314c:	881b      	ldrh	r3, [r3, #0]
   8314e:	3301      	adds	r3, #1
   83150:	b29a      	uxth	r2, r3
   83152:	4b0d      	ldr	r3, [pc, #52]	; (83188 <Cl_Alarm_timmer_50millisec+0x48>)
   83154:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   83156:	4b0d      	ldr	r3, [pc, #52]	; (8318c <Cl_Alarm_timmer_50millisec+0x4c>)
   83158:	2200      	movs	r2, #0
   8315a:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   8315c:	4b0c      	ldr	r3, [pc, #48]	; (83190 <Cl_Alarm_timmer_50millisec+0x50>)
   8315e:	681b      	ldr	r3, [r3, #0]
   83160:	3301      	adds	r3, #1
   83162:	4a0b      	ldr	r2, [pc, #44]	; (83190 <Cl_Alarm_timmer_50millisec+0x50>)
   83164:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   83166:	4b08      	ldr	r3, [pc, #32]	; (83188 <Cl_Alarm_timmer_50millisec+0x48>)
   83168:	881b      	ldrh	r3, [r3, #0]
   8316a:	2b14      	cmp	r3, #20
   8316c:	d905      	bls.n	8317a <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   8316e:	4b09      	ldr	r3, [pc, #36]	; (83194 <Cl_Alarm_timmer_50millisec+0x54>)
   83170:	2200      	movs	r2, #0
   83172:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   83174:	4b04      	ldr	r3, [pc, #16]	; (83188 <Cl_Alarm_timmer_50millisec+0x48>)
   83176:	2200      	movs	r2, #0
   83178:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   8317a:	2300      	movs	r3, #0
	
}
   8317c:	4618      	mov	r0, r3
   8317e:	370c      	adds	r7, #12
   83180:	46bd      	mov	sp, r7
   83182:	bc80      	pop	{r7}
   83184:	4770      	bx	lr
   83186:	bf00      	nop
   83188:	2007174c 	.word	0x2007174c
   8318c:	20071720 	.word	0x20071720
   83190:	2007171c 	.word	0x2007171c
   83194:	20071724 	.word	0x20071724

00083198 <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   83198:	b480      	push	{r7}
   8319a:	b083      	sub	sp, #12
   8319c:	af00      	add	r7, sp, #0
   8319e:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   831a0:	4b3b      	ldr	r3, [pc, #236]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   831a2:	881b      	ldrh	r3, [r3, #0]
   831a4:	461a      	mov	r2, r3
   831a6:	4613      	mov	r3, r2
   831a8:	00db      	lsls	r3, r3, #3
   831aa:	4413      	add	r3, r2
   831ac:	4a39      	ldr	r2, [pc, #228]	; (83294 <cl_get_dac_conductivity_info+0xfc>)
   831ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
   831b0:	4413      	add	r3, r2
   831b2:	4a39      	ldr	r2, [pc, #228]	; (83298 <cl_get_dac_conductivity_info+0x100>)
   831b4:	fb82 1203 	smull	r1, r2, r2, r3
   831b8:	1092      	asrs	r2, r2, #2
   831ba:	17db      	asrs	r3, r3, #31
   831bc:	1ad3      	subs	r3, r2, r3
   831be:	b29a      	uxth	r2, r3
   831c0:	4b33      	ldr	r3, [pc, #204]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   831c2:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   831c4:	4b35      	ldr	r3, [pc, #212]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   831c6:	781b      	ldrb	r3, [r3, #0]
   831c8:	2b03      	cmp	r3, #3
   831ca:	d85b      	bhi.n	83284 <cl_get_dac_conductivity_info+0xec>
   831cc:	a201      	add	r2, pc, #4	; (adr r2, 831d4 <cl_get_dac_conductivity_info+0x3c>)
   831ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   831d2:	bf00      	nop
   831d4:	000831e5 	.word	0x000831e5
   831d8:	0008321b 	.word	0x0008321b
   831dc:	000831e5 	.word	0x000831e5
   831e0:	00083247 	.word	0x00083247
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   831e4:	4b2a      	ldr	r3, [pc, #168]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   831e6:	881b      	ldrh	r3, [r3, #0]
   831e8:	2b32      	cmp	r3, #50	; 0x32
   831ea:	d90a      	bls.n	83202 <cl_get_dac_conductivity_info+0x6a>
   831ec:	4b28      	ldr	r3, [pc, #160]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   831ee:	881b      	ldrh	r3, [r3, #0]
   831f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   831f4:	d205      	bcs.n	83202 <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   831f6:	687b      	ldr	r3, [r7, #4]
   831f8:	220a      	movs	r2, #10
   831fa:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   831fc:	4b27      	ldr	r3, [pc, #156]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   831fe:	2201      	movs	r2, #1
   83200:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   83202:	4b23      	ldr	r3, [pc, #140]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   83204:	881b      	ldrh	r3, [r3, #0]
   83206:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   8320a:	d936      	bls.n	8327a <cl_get_dac_conductivity_info+0xe2>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   8320c:	687b      	ldr	r3, [r7, #4]
   8320e:	220b      	movs	r2, #11
   83210:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   83212:	4b22      	ldr	r3, [pc, #136]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   83214:	2203      	movs	r2, #3
   83216:	701a      	strb	r2, [r3, #0]
		}
		break;
   83218:	e02f      	b.n	8327a <cl_get_dac_conductivity_info+0xe2>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   8321a:	4b1d      	ldr	r3, [pc, #116]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   8321c:	881b      	ldrh	r3, [r3, #0]
   8321e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83222:	d905      	bls.n	83230 <cl_get_dac_conductivity_info+0x98>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   83224:	687b      	ldr	r3, [r7, #4]
   83226:	220b      	movs	r2, #11
   83228:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   8322a:	4b1c      	ldr	r3, [pc, #112]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   8322c:	2203      	movs	r2, #3
   8322e:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   83230:	4b17      	ldr	r3, [pc, #92]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   83232:	881b      	ldrh	r3, [r3, #0]
   83234:	2b31      	cmp	r3, #49	; 0x31
   83236:	d822      	bhi.n	8327e <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   83238:	687b      	ldr	r3, [r7, #4]
   8323a:	2209      	movs	r2, #9
   8323c:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   8323e:	4b17      	ldr	r3, [pc, #92]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   83240:	2202      	movs	r2, #2
   83242:	701a      	strb	r2, [r3, #0]
				}
		break;
   83244:	e01b      	b.n	8327e <cl_get_dac_conductivity_info+0xe6>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   83246:	4b12      	ldr	r3, [pc, #72]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   83248:	881b      	ldrh	r3, [r3, #0]
   8324a:	2b32      	cmp	r3, #50	; 0x32
   8324c:	d90a      	bls.n	83264 <cl_get_dac_conductivity_info+0xcc>
   8324e:	4b10      	ldr	r3, [pc, #64]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   83250:	881b      	ldrh	r3, [r3, #0]
   83252:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83256:	d205      	bcs.n	83264 <cl_get_dac_conductivity_info+0xcc>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   83258:	687b      	ldr	r3, [r7, #4]
   8325a:	220a      	movs	r2, #10
   8325c:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   8325e:	4b0f      	ldr	r3, [pc, #60]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   83260:	2201      	movs	r2, #1
   83262:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   83264:	4b0a      	ldr	r3, [pc, #40]	; (83290 <cl_get_dac_conductivity_info+0xf8>)
   83266:	881b      	ldrh	r3, [r3, #0]
   83268:	2b31      	cmp	r3, #49	; 0x31
   8326a:	d80a      	bhi.n	83282 <cl_get_dac_conductivity_info+0xea>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   8326c:	687b      	ldr	r3, [r7, #4]
   8326e:	2209      	movs	r2, #9
   83270:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   83272:	4b0a      	ldr	r3, [pc, #40]	; (8329c <cl_get_dac_conductivity_info+0x104>)
   83274:	2202      	movs	r2, #2
   83276:	701a      	strb	r2, [r3, #0]
				}
		break;
   83278:	e003      	b.n	83282 <cl_get_dac_conductivity_info+0xea>
		if(cl_ten_pt_dac_cond_avg > 2000)
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
		}
		break;
   8327a:	bf00      	nop
   8327c:	e002      	b.n	83284 <cl_get_dac_conductivity_info+0xec>
				if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
				}
		break;
   8327e:	bf00      	nop
   83280:	e000      	b.n	83284 <cl_get_dac_conductivity_info+0xec>
		if(cl_ten_pt_dac_cond_avg < 50)
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
				}
		break;
   83282:	bf00      	nop
	}
return CL_OK;
   83284:	2300      	movs	r3, #0
}
   83286:	4618      	mov	r0, r3
   83288:	370c      	adds	r7, #12
   8328a:	46bd      	mov	sp, r7
   8328c:	bc80      	pop	{r7}
   8328e:	4770      	bx	lr
   83290:	2007174e 	.word	0x2007174e
   83294:	2007221c 	.word	0x2007221c
   83298:	66666667 	.word	0x66666667
   8329c:	20071750 	.word	0x20071750

000832a0 <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   832a0:	b580      	push	{r7, lr}
   832a2:	b084      	sub	sp, #16
   832a4:	af00      	add	r7, sp, #0
   832a6:	4603      	mov	r3, r0
   832a8:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   832aa:	2300      	movs	r3, #0
   832ac:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   832ae:	79fb      	ldrb	r3, [r7, #7]
   832b0:	3b04      	subs	r3, #4
   832b2:	2b0c      	cmp	r3, #12
   832b4:	f200 80a8 	bhi.w	83408 <Cl_bc_controller+0x168>
   832b8:	a201      	add	r2, pc, #4	; (adr r2, 832c0 <Cl_bc_controller+0x20>)
   832ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   832be:	bf00      	nop
   832c0:	000832f5 	.word	0x000832f5
   832c4:	0008338f 	.word	0x0008338f
   832c8:	00083409 	.word	0x00083409
   832cc:	00083409 	.word	0x00083409
   832d0:	00083409 	.word	0x00083409
   832d4:	00083409 	.word	0x00083409
   832d8:	00083409 	.word	0x00083409
   832dc:	0008335f 	.word	0x0008335f
   832e0:	00083409 	.word	0x00083409
   832e4:	000833ab 	.word	0x000833ab
   832e8:	00083409 	.word	0x00083409
   832ec:	000833ef 	.word	0x000833ef
   832f0:	000833b9 	.word	0x000833b9
	{
		case	BC_EVENT_START:
		
		
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   832f4:	2007      	movs	r0, #7
   832f6:	4b99      	ldr	r3, [pc, #612]	; (8355c <Cl_bc_controller+0x2bc>)
   832f8:	4798      	blx	r3
   832fa:	4603      	mov	r3, r0
   832fc:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   832fe:	f240 414c 	movw	r1, #1100	; 0x44c
   83302:	2002      	movs	r0, #2
   83304:	4b96      	ldr	r3, [pc, #600]	; (83560 <Cl_bc_controller+0x2c0>)
   83306:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   83308:	f44f 7161 	mov.w	r1, #900	; 0x384
   8330c:	2001      	movs	r0, #1
   8330e:	4b94      	ldr	r3, [pc, #592]	; (83560 <Cl_bc_controller+0x2c0>)
   83310:	4798      	blx	r3
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   83312:	2100      	movs	r1, #0
   83314:	201a      	movs	r0, #26
   83316:	4b93      	ldr	r3, [pc, #588]	; (83564 <Cl_bc_controller+0x2c4>)
   83318:	4798      	blx	r3
			
				
				if(openfill_flag == 1){
   8331a:	4b93      	ldr	r3, [pc, #588]	; (83568 <Cl_bc_controller+0x2c8>)
   8331c:	781b      	ldrb	r3, [r3, #0]
   8331e:	2b01      	cmp	r3, #1
   83320:	d115      	bne.n	8334e <Cl_bc_controller+0xae>
					
					cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN_DIS);
   83322:	2015      	movs	r0, #21
   83324:	4b8d      	ldr	r3, [pc, #564]	; (8355c <Cl_bc_controller+0x2bc>)
   83326:	4798      	blx	r3
   83328:	4603      	mov	r3, r0
   8332a:	73fb      	strb	r3, [r7, #15]
					
					if(flag_hotcitric == 1){
   8332c:	4b8f      	ldr	r3, [pc, #572]	; (8356c <Cl_bc_controller+0x2cc>)
   8332e:	781b      	ldrb	r3, [r3, #0]
   83330:	2b01      	cmp	r3, #1
   83332:	d10c      	bne.n	8334e <Cl_bc_controller+0xae>
					
					sv_cntrl_poweronheater();
   83334:	4b8e      	ldr	r3, [pc, #568]	; (83570 <Cl_bc_controller+0x2d0>)
   83336:	4798      	blx	r3
					sv_cntrl_incheater(3500);
   83338:	f640 50ac 	movw	r0, #3500	; 0xdac
   8333c:	4b8d      	ldr	r3, [pc, #564]	; (83574 <Cl_bc_controller+0x2d4>)
   8333e:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_ON);
   83340:	2001      	movs	r0, #1
   83342:	4b8d      	ldr	r3, [pc, #564]	; (83578 <Cl_bc_controller+0x2d8>)
   83344:	4798      	blx	r3
					Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);	
   83346:	498d      	ldr	r1, [pc, #564]	; (8357c <Cl_bc_controller+0x2dc>)
   83348:	2005      	movs	r0, #5
   8334a:	4b8d      	ldr	r3, [pc, #564]	; (83580 <Cl_bc_controller+0x2e0>)
   8334c:	4798      	blx	r3
					}
					
				}
					bc_laststate = bc_state;
   8334e:	4b8d      	ldr	r3, [pc, #564]	; (83584 <Cl_bc_controller+0x2e4>)
   83350:	781a      	ldrb	r2, [r3, #0]
   83352:	4b8d      	ldr	r3, [pc, #564]	; (83588 <Cl_bc_controller+0x2e8>)
   83354:	701a      	strb	r2, [r3, #0]
					bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83356:	4b8b      	ldr	r3, [pc, #556]	; (83584 <Cl_bc_controller+0x2e4>)
   83358:	2202      	movs	r2, #2
   8335a:	701a      	strb	r2, [r3, #0]
				
		
		break;
   8335c:	e054      	b.n	83408 <Cl_bc_controller+0x168>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   8335e:	4b89      	ldr	r3, [pc, #548]	; (83584 <Cl_bc_controller+0x2e4>)
   83360:	781b      	ldrb	r3, [r3, #0]
   83362:	2b00      	cmp	r3, #0
   83364:	d14f      	bne.n	83406 <Cl_bc_controller+0x166>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83366:	2007      	movs	r0, #7
   83368:	4b7c      	ldr	r3, [pc, #496]	; (8355c <Cl_bc_controller+0x2bc>)
   8336a:	4798      	blx	r3
   8336c:	4603      	mov	r3, r0
   8336e:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   83370:	4b85      	ldr	r3, [pc, #532]	; (83588 <Cl_bc_controller+0x2e8>)
   83372:	781b      	ldrb	r3, [r3, #0]
   83374:	461a      	mov	r2, r3
   83376:	4b85      	ldr	r3, [pc, #532]	; (8358c <Cl_bc_controller+0x2ec>)
   83378:	5c9b      	ldrb	r3, [r3, r2]
   8337a:	4618      	mov	r0, r3
   8337c:	4b77      	ldr	r3, [pc, #476]	; (8355c <Cl_bc_controller+0x2bc>)
   8337e:	4798      	blx	r3
   83380:	4603      	mov	r3, r0
   83382:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   83384:	4b80      	ldr	r3, [pc, #512]	; (83588 <Cl_bc_controller+0x2e8>)
   83386:	781a      	ldrb	r2, [r3, #0]
   83388:	4b7e      	ldr	r3, [pc, #504]	; (83584 <Cl_bc_controller+0x2e4>)
   8338a:	701a      	strb	r2, [r3, #0]
				}
		break;
   8338c:	e03b      	b.n	83406 <Cl_bc_controller+0x166>
		case	BC_EVENT_STOP:
		CSeventcount = 0;
   8338e:	4b80      	ldr	r3, [pc, #512]	; (83590 <Cl_bc_controller+0x2f0>)
   83390:	2200      	movs	r2, #0
   83392:	601a      	str	r2, [r3, #0]
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   83394:	2100      	movs	r1, #0
   83396:	201a      	movs	r0, #26
   83398:	4b72      	ldr	r3, [pc, #456]	; (83564 <Cl_bc_controller+0x2c4>)
   8339a:	4798      	blx	r3
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8339c:	2011      	movs	r0, #17
   8339e:	4b6f      	ldr	r3, [pc, #444]	; (8355c <Cl_bc_controller+0x2bc>)
   833a0:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   833a2:	4b78      	ldr	r3, [pc, #480]	; (83584 <Cl_bc_controller+0x2e4>)
   833a4:	2200      	movs	r2, #0
   833a6:	701a      	strb	r2, [r3, #0]
			
		break;
   833a8:	e02e      	b.n	83408 <Cl_bc_controller+0x168>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   833aa:	4b7a      	ldr	r3, [pc, #488]	; (83594 <Cl_bc_controller+0x2f4>)
   833ac:	2200      	movs	r2, #0
   833ae:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   833b0:	4b74      	ldr	r3, [pc, #464]	; (83584 <Cl_bc_controller+0x2e4>)
   833b2:	2200      	movs	r2, #0
   833b4:	701a      	strb	r2, [r3, #0]
		break;
   833b6:	e027      	b.n	83408 <Cl_bc_controller+0x168>
		break;
		case	BC_EVENT_RESET:
		break;
		case BC_EVENT_TEST_SWITCH:
		
		cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   833b8:	2005      	movs	r0, #5
   833ba:	4b68      	ldr	r3, [pc, #416]	; (8355c <Cl_bc_controller+0x2bc>)
   833bc:	4798      	blx	r3
   833be:	4603      	mov	r3, r0
   833c0:	73fb      	strb	r3, [r7, #15]
		sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   833c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   833c6:	2002      	movs	r0, #2
   833c8:	4b65      	ldr	r3, [pc, #404]	; (83560 <Cl_bc_controller+0x2c0>)
   833ca:	4798      	blx	r3
		sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   833cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   833d0:	2001      	movs	r0, #1
   833d2:	4b63      	ldr	r3, [pc, #396]	; (83560 <Cl_bc_controller+0x2c0>)
   833d4:	4798      	blx	r3
		
		potvalue = (950 * 1024)/10000;                                 // 600
   833d6:	4b70      	ldr	r3, [pc, #448]	; (83598 <Cl_bc_controller+0x2f8>)
   833d8:	2261      	movs	r2, #97	; 0x61
   833da:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   833dc:	4b6e      	ldr	r3, [pc, #440]	; (83598 <Cl_bc_controller+0x2f8>)
   833de:	881b      	ldrh	r3, [r3, #0]
   833e0:	4618      	mov	r0, r3
   833e2:	4b6e      	ldr	r3, [pc, #440]	; (8359c <Cl_bc_controller+0x2fc>)
   833e4:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   833e6:	4b67      	ldr	r3, [pc, #412]	; (83584 <Cl_bc_controller+0x2e4>)
   833e8:	220c      	movs	r2, #12
   833ea:	701a      	strb	r2, [r3, #0]
		break;
   833ec:	e00c      	b.n	83408 <Cl_bc_controller+0x168>
		
		case BC_EVENT_DISINF_INTAKE:
		
			
			potvalue = (650 * 1024)/10000;                                 // 600
   833ee:	4b6a      	ldr	r3, [pc, #424]	; (83598 <Cl_bc_controller+0x2f8>)
   833f0:	2242      	movs	r2, #66	; 0x42
   833f2:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   833f4:	4b68      	ldr	r3, [pc, #416]	; (83598 <Cl_bc_controller+0x2f8>)
   833f6:	881b      	ldrh	r3, [r3, #0]
   833f8:	4618      	mov	r0, r3
   833fa:	4b68      	ldr	r3, [pc, #416]	; (8359c <Cl_bc_controller+0x2fc>)
   833fc:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   833fe:	4b61      	ldr	r3, [pc, #388]	; (83584 <Cl_bc_controller+0x2e4>)
   83400:	220c      	movs	r2, #12
   83402:	701a      	strb	r2, [r3, #0]
		break;
   83404:	e000      	b.n	83408 <Cl_bc_controller+0x168>
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
				}
		break;
   83406:	bf00      	nop
			sv_cs_setpotvalue(potvalue);
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
		break;
	}
	switch (bc_state)
   83408:	4b5e      	ldr	r3, [pc, #376]	; (83584 <Cl_bc_controller+0x2e4>)
   8340a:	781b      	ldrb	r3, [r3, #0]
   8340c:	2b15      	cmp	r3, #21
   8340e:	f200 85b7 	bhi.w	83f80 <Cl_bc_controller+0xce0>
   83412:	a201      	add	r2, pc, #4	; (adr r2, 83418 <Cl_bc_controller+0x178>)
   83414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83418:	00083f81 	.word	0x00083f81
   8341c:	00083f81 	.word	0x00083f81
   83420:	00083471 	.word	0x00083471
   83424:	0008352b 	.word	0x0008352b
   83428:	0008381b 	.word	0x0008381b
   8342c:	000838bd 	.word	0x000838bd
   83430:	000838d9 	.word	0x000838d9
   83434:	0008390d 	.word	0x0008390d
   83438:	00083929 	.word	0x00083929
   8343c:	0008394f 	.word	0x0008394f
   83440:	0008396b 	.word	0x0008396b
   83444:	0008399f 	.word	0x0008399f
   83448:	000839bb 	.word	0x000839bb
   8344c:	000839fb 	.word	0x000839fb
   83450:	00083c4b 	.word	0x00083c4b
   83454:	00083c7f 	.word	0x00083c7f
   83458:	00083ef9 	.word	0x00083ef9
   8345c:	00083f81 	.word	0x00083f81
   83460:	00083f3d 	.word	0x00083f3d
   83464:	00083f81 	.word	0x00083f81
   83468:	00083f81 	.word	0x00083f81
   8346c:	00083f81 	.word	0x00083f81
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   83470:	79fb      	ldrb	r3, [r7, #7]
   83472:	3b01      	subs	r3, #1
   83474:	2b07      	cmp	r3, #7
   83476:	d84c      	bhi.n	83512 <Cl_bc_controller+0x272>
   83478:	a201      	add	r2, pc, #4	; (adr r2, 83480 <Cl_bc_controller+0x1e0>)
   8347a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8347e:	bf00      	nop
   83480:	000834a1 	.word	0x000834a1
   83484:	000834a9 	.word	0x000834a9
   83488:	00083513 	.word	0x00083513
   8348c:	00083513 	.word	0x00083513
   83490:	00083513 	.word	0x00083513
   83494:	000834c7 	.word	0x000834c7
   83498:	00083513 	.word	0x00083513
   8349c:	000834ed 	.word	0x000834ed
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   834a0:	4b3f      	ldr	r3, [pc, #252]	; (835a0 <Cl_bc_controller+0x300>)
   834a2:	2201      	movs	r2, #1
   834a4:	701a      	strb	r2, [r3, #0]
								break;
   834a6:	e03e      	b.n	83526 <Cl_bc_controller+0x286>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   834a8:	4b3d      	ldr	r3, [pc, #244]	; (835a0 <Cl_bc_controller+0x300>)
   834aa:	781b      	ldrb	r3, [r3, #0]
   834ac:	2b00      	cmp	r3, #0
   834ae:	d033      	beq.n	83518 <Cl_bc_controller+0x278>
								{
									bc_laststate = bc_state;
   834b0:	4b34      	ldr	r3, [pc, #208]	; (83584 <Cl_bc_controller+0x2e4>)
   834b2:	781a      	ldrb	r2, [r3, #0]
   834b4:	4b34      	ldr	r3, [pc, #208]	; (83588 <Cl_bc_controller+0x2e8>)
   834b6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   834b8:	4b32      	ldr	r3, [pc, #200]	; (83584 <Cl_bc_controller+0x2e4>)
   834ba:	2203      	movs	r2, #3
   834bc:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   834be:	4b38      	ldr	r3, [pc, #224]	; (835a0 <Cl_bc_controller+0x300>)
   834c0:	2200      	movs	r2, #0
   834c2:	701a      	strb	r2, [r3, #0]
								}
								break;
   834c4:	e028      	b.n	83518 <Cl_bc_controller+0x278>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   834c6:	4b33      	ldr	r3, [pc, #204]	; (83594 <Cl_bc_controller+0x2f4>)
   834c8:	2200      	movs	r2, #0
   834ca:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   834cc:	2005      	movs	r0, #5
   834ce:	4b23      	ldr	r3, [pc, #140]	; (8355c <Cl_bc_controller+0x2bc>)
   834d0:	4798      	blx	r3
   834d2:	4603      	mov	r3, r0
   834d4:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   834d6:	7bfb      	ldrb	r3, [r7, #15]
   834d8:	2b00      	cmp	r3, #0
   834da:	d120      	bne.n	8351e <Cl_bc_controller+0x27e>
								{
									bc_laststate = bc_state;
   834dc:	4b29      	ldr	r3, [pc, #164]	; (83584 <Cl_bc_controller+0x2e4>)
   834de:	781a      	ldrb	r2, [r3, #0]
   834e0:	4b29      	ldr	r3, [pc, #164]	; (83588 <Cl_bc_controller+0x2e8>)
   834e2:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   834e4:	4b27      	ldr	r3, [pc, #156]	; (83584 <Cl_bc_controller+0x2e4>)
   834e6:	2210      	movs	r2, #16
   834e8:	701a      	strb	r2, [r3, #0]
								}
								break;
   834ea:	e018      	b.n	8351e <Cl_bc_controller+0x27e>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   834ec:	4b29      	ldr	r3, [pc, #164]	; (83594 <Cl_bc_controller+0x2f4>)
   834ee:	2200      	movs	r2, #0
   834f0:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   834f2:	2006      	movs	r0, #6
   834f4:	4b19      	ldr	r3, [pc, #100]	; (8355c <Cl_bc_controller+0x2bc>)
   834f6:	4798      	blx	r3
   834f8:	4603      	mov	r3, r0
   834fa:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   834fc:	7bfb      	ldrb	r3, [r7, #15]
   834fe:	2b00      	cmp	r3, #0
   83500:	d110      	bne.n	83524 <Cl_bc_controller+0x284>
								{
									bc_laststate = bc_state;
   83502:	4b20      	ldr	r3, [pc, #128]	; (83584 <Cl_bc_controller+0x2e4>)
   83504:	781a      	ldrb	r2, [r3, #0]
   83506:	4b20      	ldr	r3, [pc, #128]	; (83588 <Cl_bc_controller+0x2e8>)
   83508:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8350a:	4b1e      	ldr	r3, [pc, #120]	; (83584 <Cl_bc_controller+0x2e4>)
   8350c:	2212      	movs	r2, #18
   8350e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83510:	e008      	b.n	83524 <Cl_bc_controller+0x284>
								default:break;
   83512:	bf00      	nop
   83514:	f000 bd35 	b.w	83f82 <Cl_bc_controller+0xce2>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_OPENFILL;
									bc_wait = false;
								}
								break;
   83518:	bf00      	nop
   8351a:	f000 bd32 	b.w	83f82 <Cl_bc_controller+0xce2>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   8351e:	bf00      	nop
   83520:	f000 bd2f 	b.w	83f82 <Cl_bc_controller+0xce2>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83524:	bf00      	nop
								default:break;
							}
			break;
   83526:	f000 bd2c 	b.w	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8352a:	79fb      	ldrb	r3, [r7, #7]
   8352c:	3b01      	subs	r3, #1
   8352e:	2b07      	cmp	r3, #7
   83530:	f200 816b 	bhi.w	8380a <Cl_bc_controller+0x56a>
   83534:	a201      	add	r2, pc, #4	; (adr r2, 8353c <Cl_bc_controller+0x29c>)
   83536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8353a:	bf00      	nop
   8353c:	0008380b 	.word	0x0008380b
   83540:	000835a5 	.word	0x000835a5
   83544:	0008380b 	.word	0x0008380b
   83548:	0008380b 	.word	0x0008380b
   8354c:	0008380b 	.word	0x0008380b
   83550:	000837bf 	.word	0x000837bf
   83554:	0008380b 	.word	0x0008380b
   83558:	000837e5 	.word	0x000837e5
   8355c:	00099c99 	.word	0x00099c99
   83560:	00099b21 	.word	0x00099b21
   83564:	00082de1 	.word	0x00082de1
   83568:	20071c02 	.word	0x20071c02
   8356c:	20071a4f 	.word	0x20071a4f
   83570:	00099a81 	.word	0x00099a81
   83574:	00099b89 	.word	0x00099b89
   83578:	00089385 	.word	0x00089385
   8357c:	42960000 	.word	0x42960000
   83580:	000892f9 	.word	0x000892f9
   83584:	20071751 	.word	0x20071751
   83588:	20071752 	.word	0x20071752
   8358c:	20070104 	.word	0x20070104
   83590:	20071764 	.word	0x20071764
   83594:	20071756 	.word	0x20071756
   83598:	2007175a 	.word	0x2007175a
   8359c:	00099f5d 	.word	0x00099f5d
   835a0:	20071753 	.word	0x20071753
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								
								if(openfill_flag == 1){
   835a4:	4ba2      	ldr	r3, [pc, #648]	; (83830 <Cl_bc_controller+0x590>)
   835a6:	781b      	ldrb	r3, [r3, #0]
   835a8:	2b01      	cmp	r3, #1
   835aa:	d147      	bne.n	8363c <Cl_bc_controller+0x39c>
									
									Cl_Uint16Type potvalue = 0;
   835ac:	2300      	movs	r3, #0
   835ae:	81bb      	strh	r3, [r7, #12]
									potvalue = (650 * 1024)/10000;                                 // 600
   835b0:	2342      	movs	r3, #66	; 0x42
   835b2:	81bb      	strh	r3, [r7, #12]
									sv_cs_setpotvalue(potvalue);
   835b4:	89bb      	ldrh	r3, [r7, #12]
   835b6:	4618      	mov	r0, r3
   835b8:	4b9e      	ldr	r3, [pc, #632]	; (83834 <Cl_bc_controller+0x594>)
   835ba:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   835bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   835c0:	2002      	movs	r0, #2
   835c2:	4b9d      	ldr	r3, [pc, #628]	; (83838 <Cl_bc_controller+0x598>)
   835c4:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   835c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   835ca:	2001      	movs	r0, #1
   835cc:	4b9a      	ldr	r3, [pc, #616]	; (83838 <Cl_bc_controller+0x598>)
   835ce:	4798      	blx	r3
										
										if(disinfopenfillcounter++ > 600){
   835d0:	4b9a      	ldr	r3, [pc, #616]	; (8383c <Cl_bc_controller+0x59c>)
   835d2:	f9b3 3000 	ldrsh.w	r3, [r3]
   835d6:	b29a      	uxth	r2, r3
   835d8:	3201      	adds	r2, #1
   835da:	b292      	uxth	r2, r2
   835dc:	b211      	sxth	r1, r2
   835de:	4a97      	ldr	r2, [pc, #604]	; (8383c <Cl_bc_controller+0x59c>)
   835e0:	8011      	strh	r1, [r2, #0]
   835e2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   835e6:	f340 8112 	ble.w	8380e <Cl_bc_controller+0x56e>
											
											openfillcounter = 0;
   835ea:	4b95      	ldr	r3, [pc, #596]	; (83840 <Cl_bc_controller+0x5a0>)
   835ec:	2200      	movs	r2, #0
   835ee:	801a      	strh	r2, [r3, #0]
											disinfopenfillcounter = 0;
   835f0:	4b92      	ldr	r3, [pc, #584]	; (8383c <Cl_bc_controller+0x59c>)
   835f2:	2200      	movs	r2, #0
   835f4:	801a      	strh	r2, [r3, #0]
											cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   835f6:	2005      	movs	r0, #5
   835f8:	4b92      	ldr	r3, [pc, #584]	; (83844 <Cl_bc_controller+0x5a4>)
   835fa:	4798      	blx	r3
   835fc:	4603      	mov	r3, r0
   835fe:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83600:	2013      	movs	r0, #19
   83602:	4b91      	ldr	r3, [pc, #580]	; (83848 <Cl_bc_controller+0x5a8>)
   83604:	4798      	blx	r3
   83606:	4603      	mov	r3, r0
   83608:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   8360a:	2051      	movs	r0, #81	; 0x51
   8360c:	4b8f      	ldr	r3, [pc, #572]	; (8384c <Cl_bc_controller+0x5ac>)
   8360e:	4798      	blx	r3
   83610:	4603      	mov	r3, r0
   83612:	73fb      	strb	r3, [r7, #15]
											if(cl_bc_returncode == CL_OK)
   83614:	7bfb      	ldrb	r3, [r7, #15]
   83616:	2b00      	cmp	r3, #0
   83618:	f040 80f9 	bne.w	8380e <Cl_bc_controller+0x56e>
											{
												Cl_AlarmActivateAlarms(BC_ALARM,false);
   8361c:	2100      	movs	r1, #0
   8361e:	201a      	movs	r0, #26
   83620:	4b8b      	ldr	r3, [pc, #556]	; (83850 <Cl_bc_controller+0x5b0>)
   83622:	4798      	blx	r3
												bc_laststate = bc_state;
   83624:	4b8b      	ldr	r3, [pc, #556]	; (83854 <Cl_bc_controller+0x5b4>)
   83626:	781a      	ldrb	r2, [r3, #0]
   83628:	4b8b      	ldr	r3, [pc, #556]	; (83858 <Cl_bc_controller+0x5b8>)
   8362a:	701a      	strb	r2, [r3, #0]
												bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   8362c:	4b89      	ldr	r3, [pc, #548]	; (83854 <Cl_bc_controller+0x5b4>)
   8362e:	220c      	movs	r2, #12
   83630:	701a      	strb	r2, [r3, #0]
												bc_laststate = bc_state;
   83632:	4b88      	ldr	r3, [pc, #544]	; (83854 <Cl_bc_controller+0x5b4>)
   83634:	781a      	ldrb	r2, [r3, #0]
   83636:	4b88      	ldr	r3, [pc, #544]	; (83858 <Cl_bc_controller+0x5b8>)
   83638:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								}
								break;
   8363a:	e0e8      	b.n	8380e <Cl_bc_controller+0x56e>
								}
								
								else{
								
								
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   8363c:	4b80      	ldr	r3, [pc, #512]	; (83840 <Cl_bc_controller+0x5a0>)
   8363e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83642:	b29a      	uxth	r2, r3
   83644:	3201      	adds	r2, #1
   83646:	b292      	uxth	r2, r2
   83648:	b211      	sxth	r1, r2
   8364a:	4a7d      	ldr	r2, [pc, #500]	; (83840 <Cl_bc_controller+0x5a0>)
   8364c:	8011      	strh	r1, [r2, #0]
   8364e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83652:	f340 80dc 	ble.w	8380e <Cl_bc_controller+0x56e>
								{
									
									
									if (openfill_flag == 1)
   83656:	4b76      	ldr	r3, [pc, #472]	; (83830 <Cl_bc_controller+0x590>)
   83658:	781b      	ldrb	r3, [r3, #0]
   8365a:	2b01      	cmp	r3, #1
   8365c:	d10d      	bne.n	8367a <Cl_bc_controller+0x3da>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   8365e:	4b78      	ldr	r3, [pc, #480]	; (83840 <Cl_bc_controller+0x5a0>)
   83660:	2200      	movs	r2, #0
   83662:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   83664:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   83668:	2002      	movs	r0, #2
   8366a:	4b73      	ldr	r3, [pc, #460]	; (83838 <Cl_bc_controller+0x598>)
   8366c:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   8366e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83672:	2001      	movs	r0, #1
   83674:	4b70      	ldr	r3, [pc, #448]	; (83838 <Cl_bc_controller+0x598>)
   83676:	4798      	blx	r3
   83678:	e06d      	b.n	83756 <Cl_bc_controller+0x4b6>
										
									}
									else
									{
									sv_prop_stopopenfill();
   8367a:	4b78      	ldr	r3, [pc, #480]	; (8385c <Cl_bc_controller+0x5bc>)
   8367c:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   8367e:	4b78      	ldr	r3, [pc, #480]	; (83860 <Cl_bc_controller+0x5c0>)
   83680:	4798      	blx	r3
							
									openfillcounter = 0;
   83682:	4b6f      	ldr	r3, [pc, #444]	; (83840 <Cl_bc_controller+0x5a0>)
   83684:	2200      	movs	r2, #0
   83686:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   83688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8368c:	2002      	movs	r0, #2
   8368e:	4b6a      	ldr	r3, [pc, #424]	; (83838 <Cl_bc_controller+0x598>)
   83690:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   83692:	f240 414c 	movw	r1, #1100	; 0x44c
   83696:	2001      	movs	r0, #1
   83698:	4b67      	ldr	r3, [pc, #412]	; (83838 <Cl_bc_controller+0x598>)
   8369a:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   8369c:	4b71      	ldr	r3, [pc, #452]	; (83864 <Cl_bc_controller+0x5c4>)
   8369e:	2244      	movs	r2, #68	; 0x44
   836a0:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   836a2:	4b70      	ldr	r3, [pc, #448]	; (83864 <Cl_bc_controller+0x5c4>)
   836a4:	881b      	ldrh	r3, [r3, #0]
   836a6:	4618      	mov	r0, r3
   836a8:	4b62      	ldr	r3, [pc, #392]	; (83834 <Cl_bc_controller+0x594>)
   836aa:	4798      	blx	r3
										if (hotrinse_flag == 1)
   836ac:	4b6e      	ldr	r3, [pc, #440]	; (83868 <Cl_bc_controller+0x5c8>)
   836ae:	781b      	ldrb	r3, [r3, #0]
   836b0:	2b01      	cmp	r3, #1
   836b2:	d150      	bne.n	83756 <Cl_bc_controller+0x4b6>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   836b4:	f44f 7116 	mov.w	r1, #600	; 0x258
   836b8:	2002      	movs	r0, #2
   836ba:	4b5f      	ldr	r3, [pc, #380]	; (83838 <Cl_bc_controller+0x598>)
   836bc:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   836be:	f240 414c 	movw	r1, #1100	; 0x44c
   836c2:	2001      	movs	r0, #1
   836c4:	4b5c      	ldr	r3, [pc, #368]	; (83838 <Cl_bc_controller+0x598>)
   836c6:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   836c8:	4b68      	ldr	r3, [pc, #416]	; (8386c <Cl_bc_controller+0x5cc>)
   836ca:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											potvalue = (800 * 1024)/10000;                                 // added on 30.06.2017
   836cc:	4b65      	ldr	r3, [pc, #404]	; (83864 <Cl_bc_controller+0x5c4>)
   836ce:	2251      	movs	r2, #81	; 0x51
   836d0:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   836d2:	4b64      	ldr	r3, [pc, #400]	; (83864 <Cl_bc_controller+0x5c4>)
   836d4:	881b      	ldrh	r3, [r3, #0]
   836d6:	4618      	mov	r0, r3
   836d8:	4b56      	ldr	r3, [pc, #344]	; (83834 <Cl_bc_controller+0x594>)
   836da:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   836dc:	4b64      	ldr	r3, [pc, #400]	; (83870 <Cl_bc_controller+0x5d0>)
   836de:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   836e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   836e4:	4b63      	ldr	r3, [pc, #396]	; (83874 <Cl_bc_controller+0x5d4>)
   836e6:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   836e8:	2001      	movs	r0, #1
   836ea:	4b63      	ldr	r3, [pc, #396]	; (83878 <Cl_bc_controller+0x5d8>)
   836ec:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 80);
   836ee:	4963      	ldr	r1, [pc, #396]	; (8387c <Cl_bc_controller+0x5dc>)
   836f0:	2005      	movs	r0, #5
   836f2:	4b63      	ldr	r3, [pc, #396]	; (83880 <Cl_bc_controller+0x5e0>)
   836f4:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   836f6:	2002      	movs	r0, #2
   836f8:	4b62      	ldr	r3, [pc, #392]	; (83884 <Cl_bc_controller+0x5e4>)
   836fa:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   836fc:	2003      	movs	r0, #3
   836fe:	4b61      	ldr	r3, [pc, #388]	; (83884 <Cl_bc_controller+0x5e4>)
   83700:	4798      	blx	r3
											sv_prop_startmixing();
   83702:	4b61      	ldr	r3, [pc, #388]	; (83888 <Cl_bc_controller+0x5e8>)
   83704:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   83706:	2100      	movs	r1, #0
   83708:	2002      	movs	r0, #2
   8370a:	4b60      	ldr	r3, [pc, #384]	; (8388c <Cl_bc_controller+0x5ec>)
   8370c:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   8370e:	4b60      	ldr	r3, [pc, #384]	; (83890 <Cl_bc_controller+0x5f0>)
   83710:	4798      	blx	r3
											cl_wait(100);
   83712:	2064      	movs	r0, #100	; 0x64
   83714:	4b5f      	ldr	r3, [pc, #380]	; (83894 <Cl_bc_controller+0x5f4>)
   83716:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   83718:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   8371c:	2001      	movs	r0, #1
   8371e:	4b5b      	ldr	r3, [pc, #364]	; (8388c <Cl_bc_controller+0x5ec>)
   83720:	4798      	blx	r3
											cl_wait(200);
   83722:	20c8      	movs	r0, #200	; 0xc8
   83724:	4b5b      	ldr	r3, [pc, #364]	; (83894 <Cl_bc_controller+0x5f4>)
   83726:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   83728:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   8372c:	2001      	movs	r0, #1
   8372e:	4b57      	ldr	r3, [pc, #348]	; (8388c <Cl_bc_controller+0x5ec>)
   83730:	4798      	blx	r3
											cl_wait(600);
   83732:	f44f 7016 	mov.w	r0, #600	; 0x258
   83736:	4b57      	ldr	r3, [pc, #348]	; (83894 <Cl_bc_controller+0x5f4>)
   83738:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   8373a:	f241 3188 	movw	r1, #5000	; 0x1388
   8373e:	2001      	movs	r0, #1
   83740:	4b52      	ldr	r3, [pc, #328]	; (8388c <Cl_bc_controller+0x5ec>)
   83742:	4798      	blx	r3
											cl_wait(800);
   83744:	f44f 7048 	mov.w	r0, #800	; 0x320
   83748:	4b52      	ldr	r3, [pc, #328]	; (83894 <Cl_bc_controller+0x5f4>)
   8374a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   8374c:	f640 11c4 	movw	r1, #2500	; 0x9c4
   83750:	2001      	movs	r0, #1
   83752:	4b4e      	ldr	r3, [pc, #312]	; (8388c <Cl_bc_controller+0x5ec>)
   83754:	4798      	blx	r3
										
									}
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
//check	
									potvalue = (650 * 1024)/10000;                                 // added on 30.06.2017
   83756:	4b43      	ldr	r3, [pc, #268]	; (83864 <Cl_bc_controller+0x5c4>)
   83758:	2242      	movs	r2, #66	; 0x42
   8375a:	801a      	strh	r2, [r3, #0]
									sv_cs_setpotvalue(potvalue);
   8375c:	4b41      	ldr	r3, [pc, #260]	; (83864 <Cl_bc_controller+0x5c4>)
   8375e:	881b      	ldrh	r3, [r3, #0]
   83760:	4618      	mov	r0, r3
   83762:	4b34      	ldr	r3, [pc, #208]	; (83834 <Cl_bc_controller+0x594>)
   83764:	4798      	blx	r3

									sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   83766:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8376a:	2002      	movs	r0, #2
   8376c:	4b32      	ldr	r3, [pc, #200]	; (83838 <Cl_bc_controller+0x598>)
   8376e:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1000);  //960
   83770:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83774:	2001      	movs	r0, #1
   83776:	4b30      	ldr	r3, [pc, #192]	; (83838 <Cl_bc_controller+0x598>)
   83778:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   8377a:	2005      	movs	r0, #5
   8377c:	4b31      	ldr	r3, [pc, #196]	; (83844 <Cl_bc_controller+0x5a4>)
   8377e:	4798      	blx	r3
   83780:	4603      	mov	r3, r0
   83782:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83784:	2013      	movs	r0, #19
   83786:	4b30      	ldr	r3, [pc, #192]	; (83848 <Cl_bc_controller+0x5a8>)
   83788:	4798      	blx	r3
   8378a:	4603      	mov	r3, r0
   8378c:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   8378e:	2051      	movs	r0, #81	; 0x51
   83790:	4b2e      	ldr	r3, [pc, #184]	; (8384c <Cl_bc_controller+0x5ac>)
   83792:	4798      	blx	r3
   83794:	4603      	mov	r3, r0
   83796:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   83798:	7bfb      	ldrb	r3, [r7, #15]
   8379a:	2b00      	cmp	r3, #0
   8379c:	d137      	bne.n	8380e <Cl_bc_controller+0x56e>
									{
										Cl_AlarmActivateAlarms(BC_ALARM,false);
   8379e:	2100      	movs	r1, #0
   837a0:	201a      	movs	r0, #26
   837a2:	4b2b      	ldr	r3, [pc, #172]	; (83850 <Cl_bc_controller+0x5b0>)
   837a4:	4798      	blx	r3
										bc_laststate = bc_state;
   837a6:	4b2b      	ldr	r3, [pc, #172]	; (83854 <Cl_bc_controller+0x5b4>)
   837a8:	781a      	ldrb	r2, [r3, #0]
   837aa:	4b2b      	ldr	r3, [pc, #172]	; (83858 <Cl_bc_controller+0x5b8>)
   837ac:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   837ae:	4b29      	ldr	r3, [pc, #164]	; (83854 <Cl_bc_controller+0x5b4>)
   837b0:	220c      	movs	r2, #12
   837b2:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   837b4:	4b27      	ldr	r3, [pc, #156]	; (83854 <Cl_bc_controller+0x5b4>)
   837b6:	781a      	ldrb	r2, [r3, #0]
   837b8:	4b27      	ldr	r3, [pc, #156]	; (83858 <Cl_bc_controller+0x5b8>)
   837ba:	701a      	strb	r2, [r3, #0]
									}
								}
								}
								break;
   837bc:	e027      	b.n	8380e <Cl_bc_controller+0x56e>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   837be:	4b20      	ldr	r3, [pc, #128]	; (83840 <Cl_bc_controller+0x5a0>)
   837c0:	2200      	movs	r2, #0
   837c2:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   837c4:	2005      	movs	r0, #5
   837c6:	4b1f      	ldr	r3, [pc, #124]	; (83844 <Cl_bc_controller+0x5a4>)
   837c8:	4798      	blx	r3
   837ca:	4603      	mov	r3, r0
   837cc:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   837ce:	7bfb      	ldrb	r3, [r7, #15]
   837d0:	2b00      	cmp	r3, #0
   837d2:	d11e      	bne.n	83812 <Cl_bc_controller+0x572>
								{
									bc_laststate = bc_state;
   837d4:	4b1f      	ldr	r3, [pc, #124]	; (83854 <Cl_bc_controller+0x5b4>)
   837d6:	781a      	ldrb	r2, [r3, #0]
   837d8:	4b1f      	ldr	r3, [pc, #124]	; (83858 <Cl_bc_controller+0x5b8>)
   837da:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   837dc:	4b1d      	ldr	r3, [pc, #116]	; (83854 <Cl_bc_controller+0x5b4>)
   837de:	2210      	movs	r2, #16
   837e0:	701a      	strb	r2, [r3, #0]
								}
								break;
   837e2:	e016      	b.n	83812 <Cl_bc_controller+0x572>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   837e4:	4b16      	ldr	r3, [pc, #88]	; (83840 <Cl_bc_controller+0x5a0>)
   837e6:	2200      	movs	r2, #0
   837e8:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   837ea:	2006      	movs	r0, #6
   837ec:	4b15      	ldr	r3, [pc, #84]	; (83844 <Cl_bc_controller+0x5a4>)
   837ee:	4798      	blx	r3
   837f0:	4603      	mov	r3, r0
   837f2:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   837f4:	7bfb      	ldrb	r3, [r7, #15]
   837f6:	2b00      	cmp	r3, #0
   837f8:	d10d      	bne.n	83816 <Cl_bc_controller+0x576>
								{
									bc_laststate = bc_state;
   837fa:	4b16      	ldr	r3, [pc, #88]	; (83854 <Cl_bc_controller+0x5b4>)
   837fc:	781a      	ldrb	r2, [r3, #0]
   837fe:	4b16      	ldr	r3, [pc, #88]	; (83858 <Cl_bc_controller+0x5b8>)
   83800:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   83802:	4b14      	ldr	r3, [pc, #80]	; (83854 <Cl_bc_controller+0x5b4>)
   83804:	2212      	movs	r2, #18
   83806:	701a      	strb	r2, [r3, #0]
								}
								break;
   83808:	e005      	b.n	83816 <Cl_bc_controller+0x576>
								default:break;
   8380a:	bf00      	nop
   8380c:	e3b9      	b.n	83f82 <Cl_bc_controller+0xce2>
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
										bc_laststate = bc_state;
									}
								}
								}
								break;
   8380e:	bf00      	nop
   83810:	e3b7      	b.n	83f82 <Cl_bc_controller+0xce2>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
								}
								break;
   83812:	bf00      	nop
   83814:	e3b5      	b.n	83f82 <Cl_bc_controller+0xce2>
								if(cl_bc_returncode == CL_OK)
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
								}
								break;
   83816:	bf00      	nop
								default:break;
							}
			break;
   83818:	e3b3      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   8381a:	79fb      	ldrb	r3, [r7, #7]
   8381c:	2b01      	cmp	r3, #1
   8381e:	d002      	beq.n	83826 <Cl_bc_controller+0x586>
   83820:	2b02      	cmp	r3, #2
   83822:	d03b      	beq.n	8389c <Cl_bc_controller+0x5fc>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83824:	e049      	b.n	838ba <Cl_bc_controller+0x61a>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   83826:	4b1c      	ldr	r3, [pc, #112]	; (83898 <Cl_bc_controller+0x5f8>)
   83828:	2201      	movs	r2, #1
   8382a:	701a      	strb	r2, [r3, #0]
								
								break;
   8382c:	e045      	b.n	838ba <Cl_bc_controller+0x61a>
   8382e:	bf00      	nop
   83830:	20071c02 	.word	0x20071c02
   83834:	00099f5d 	.word	0x00099f5d
   83838:	00099b21 	.word	0x00099b21
   8383c:	20071758 	.word	0x20071758
   83840:	20071756 	.word	0x20071756
   83844:	00099c99 	.word	0x00099c99
   83848:	00099ac9 	.word	0x00099ac9
   8384c:	0008ba55 	.word	0x0008ba55
   83850:	00082de1 	.word	0x00082de1
   83854:	20071751 	.word	0x20071751
   83858:	20071752 	.word	0x20071752
   8385c:	00099f35 	.word	0x00099f35
   83860:	00099e25 	.word	0x00099e25
   83864:	2007175a 	.word	0x2007175a
   83868:	20071cb1 	.word	0x20071cb1
   8386c:	00099c1d 	.word	0x00099c1d
   83870:	00099a81 	.word	0x00099a81
   83874:	00099b89 	.word	0x00099b89
   83878:	00089385 	.word	0x00089385
   8387c:	42a00000 	.word	0x42a00000
   83880:	000892f9 	.word	0x000892f9
   83884:	00099aa9 	.word	0x00099aa9
   83888:	00099e51 	.word	0x00099e51
   8388c:	00095bbd 	.word	0x00095bbd
   83890:	00095b75 	.word	0x00095b75
   83894:	00093009 	.word	0x00093009
   83898:	20071753 	.word	0x20071753
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   8389c:	4ba0      	ldr	r3, [pc, #640]	; (83b20 <Cl_bc_controller+0x880>)
   8389e:	781b      	ldrb	r3, [r3, #0]
   838a0:	2b00      	cmp	r3, #0
   838a2:	d009      	beq.n	838b8 <Cl_bc_controller+0x618>
								{
									bc_laststate = bc_state;
   838a4:	4b9f      	ldr	r3, [pc, #636]	; (83b24 <Cl_bc_controller+0x884>)
   838a6:	781a      	ldrb	r2, [r3, #0]
   838a8:	4b9f      	ldr	r3, [pc, #636]	; (83b28 <Cl_bc_controller+0x888>)
   838aa:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   838ac:	4b9d      	ldr	r3, [pc, #628]	; (83b24 <Cl_bc_controller+0x884>)
   838ae:	2205      	movs	r2, #5
   838b0:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   838b2:	4b9b      	ldr	r3, [pc, #620]	; (83b20 <Cl_bc_controller+0x880>)
   838b4:	2200      	movs	r2, #0
   838b6:	701a      	strb	r2, [r3, #0]
								}
								break;
   838b8:	bf00      	nop
								default:break;
							}
			break;
   838ba:	e362      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   838bc:	79fb      	ldrb	r3, [r7, #7]
   838be:	2b02      	cmp	r3, #2
   838c0:	d004      	beq.n	838cc <Cl_bc_controller+0x62c>
   838c2:	2b03      	cmp	r3, #3
   838c4:	d004      	beq.n	838d0 <Cl_bc_controller+0x630>
   838c6:	2b01      	cmp	r3, #1
   838c8:	d004      	beq.n	838d4 <Cl_bc_controller+0x634>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   838ca:	e004      	b.n	838d6 <Cl_bc_controller+0x636>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   838cc:	bf00      	nop
   838ce:	e358      	b.n	83f82 <Cl_bc_controller+0xce2>
								case	BC_EVENT_CS:
								break;
   838d0:	bf00      	nop
   838d2:	e356      	b.n	83f82 <Cl_bc_controller+0xce2>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   838d4:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   838d6:	e354      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   838d8:	79fb      	ldrb	r3, [r7, #7]
   838da:	2b01      	cmp	r3, #1
   838dc:	d002      	beq.n	838e4 <Cl_bc_controller+0x644>
   838de:	2b02      	cmp	r3, #2
   838e0:	d004      	beq.n	838ec <Cl_bc_controller+0x64c>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   838e2:	e012      	b.n	8390a <Cl_bc_controller+0x66a>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   838e4:	4b8e      	ldr	r3, [pc, #568]	; (83b20 <Cl_bc_controller+0x880>)
   838e6:	2201      	movs	r2, #1
   838e8:	701a      	strb	r2, [r3, #0]
								
								break;
   838ea:	e00e      	b.n	8390a <Cl_bc_controller+0x66a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   838ec:	4b8c      	ldr	r3, [pc, #560]	; (83b20 <Cl_bc_controller+0x880>)
   838ee:	781b      	ldrb	r3, [r3, #0]
   838f0:	2b00      	cmp	r3, #0
   838f2:	d009      	beq.n	83908 <Cl_bc_controller+0x668>
								{
									bc_laststate = bc_state;
   838f4:	4b8b      	ldr	r3, [pc, #556]	; (83b24 <Cl_bc_controller+0x884>)
   838f6:	781a      	ldrb	r2, [r3, #0]
   838f8:	4b8b      	ldr	r3, [pc, #556]	; (83b28 <Cl_bc_controller+0x888>)
   838fa:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   838fc:	4b89      	ldr	r3, [pc, #548]	; (83b24 <Cl_bc_controller+0x884>)
   838fe:	2207      	movs	r2, #7
   83900:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83902:	4b87      	ldr	r3, [pc, #540]	; (83b20 <Cl_bc_controller+0x880>)
   83904:	2200      	movs	r2, #0
   83906:	701a      	strb	r2, [r3, #0]
								}
								break;
   83908:	bf00      	nop
								default:break;
							}
			break;
   8390a:	e33a      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   8390c:	79fb      	ldrb	r3, [r7, #7]
   8390e:	2b02      	cmp	r3, #2
   83910:	d004      	beq.n	8391c <Cl_bc_controller+0x67c>
   83912:	2b03      	cmp	r3, #3
   83914:	d004      	beq.n	83920 <Cl_bc_controller+0x680>
   83916:	2b01      	cmp	r3, #1
   83918:	d004      	beq.n	83924 <Cl_bc_controller+0x684>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8391a:	e004      	b.n	83926 <Cl_bc_controller+0x686>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   8391c:	bf00      	nop
   8391e:	e330      	b.n	83f82 <Cl_bc_controller+0xce2>
								case	BC_EVENT_CS:
								break;
   83920:	bf00      	nop
   83922:	e32e      	b.n	83f82 <Cl_bc_controller+0xce2>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83924:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83926:	e32c      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   83928:	79fb      	ldrb	r3, [r7, #7]
   8392a:	2b01      	cmp	r3, #1
   8392c:	d002      	beq.n	83934 <Cl_bc_controller+0x694>
   8392e:	2b02      	cmp	r3, #2
   83930:	d00b      	beq.n	8394a <Cl_bc_controller+0x6aa>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   83932:	e00b      	b.n	8394c <Cl_bc_controller+0x6ac>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   83934:	4b7b      	ldr	r3, [pc, #492]	; (83b24 <Cl_bc_controller+0x884>)
   83936:	781a      	ldrb	r2, [r3, #0]
   83938:	4b7b      	ldr	r3, [pc, #492]	; (83b28 <Cl_bc_controller+0x888>)
   8393a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   8393c:	4b79      	ldr	r3, [pc, #484]	; (83b24 <Cl_bc_controller+0x884>)
   8393e:	2209      	movs	r2, #9
   83940:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83942:	4b77      	ldr	r3, [pc, #476]	; (83b20 <Cl_bc_controller+0x880>)
   83944:	2200      	movs	r2, #0
   83946:	701a      	strb	r2, [r3, #0]
								break;
   83948:	e000      	b.n	8394c <Cl_bc_controller+0x6ac>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   8394a:	bf00      	nop
								default:break;
							}
			break;
   8394c:	e319      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   8394e:	79fb      	ldrb	r3, [r7, #7]
   83950:	2b02      	cmp	r3, #2
   83952:	d004      	beq.n	8395e <Cl_bc_controller+0x6be>
   83954:	2b03      	cmp	r3, #3
   83956:	d004      	beq.n	83962 <Cl_bc_controller+0x6c2>
   83958:	2b01      	cmp	r3, #1
   8395a:	d004      	beq.n	83966 <Cl_bc_controller+0x6c6>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   8395c:	e004      	b.n	83968 <Cl_bc_controller+0x6c8>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   8395e:	bf00      	nop
   83960:	e30f      	b.n	83f82 <Cl_bc_controller+0xce2>
								case	BC_EVENT_CS:
								break;
   83962:	bf00      	nop
   83964:	e30d      	b.n	83f82 <Cl_bc_controller+0xce2>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83966:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83968:	e30b      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   8396a:	79fb      	ldrb	r3, [r7, #7]
   8396c:	2b01      	cmp	r3, #1
   8396e:	d002      	beq.n	83976 <Cl_bc_controller+0x6d6>
   83970:	2b02      	cmp	r3, #2
   83972:	d004      	beq.n	8397e <Cl_bc_controller+0x6de>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   83974:	e012      	b.n	8399c <Cl_bc_controller+0x6fc>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   83976:	4b6a      	ldr	r3, [pc, #424]	; (83b20 <Cl_bc_controller+0x880>)
   83978:	2201      	movs	r2, #1
   8397a:	701a      	strb	r2, [r3, #0]
								
								break;
   8397c:	e00e      	b.n	8399c <Cl_bc_controller+0x6fc>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   8397e:	4b68      	ldr	r3, [pc, #416]	; (83b20 <Cl_bc_controller+0x880>)
   83980:	781b      	ldrb	r3, [r3, #0]
   83982:	2b00      	cmp	r3, #0
   83984:	d009      	beq.n	8399a <Cl_bc_controller+0x6fa>
								{
									bc_laststate = bc_state;
   83986:	4b67      	ldr	r3, [pc, #412]	; (83b24 <Cl_bc_controller+0x884>)
   83988:	781a      	ldrb	r2, [r3, #0]
   8398a:	4b67      	ldr	r3, [pc, #412]	; (83b28 <Cl_bc_controller+0x888>)
   8398c:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   8398e:	4b65      	ldr	r3, [pc, #404]	; (83b24 <Cl_bc_controller+0x884>)
   83990:	220b      	movs	r2, #11
   83992:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   83994:	4b62      	ldr	r3, [pc, #392]	; (83b20 <Cl_bc_controller+0x880>)
   83996:	2200      	movs	r2, #0
   83998:	701a      	strb	r2, [r3, #0]
								}
								break;
   8399a:	bf00      	nop
								default:break;
							}
			break;
   8399c:	e2f1      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   8399e:	79fb      	ldrb	r3, [r7, #7]
   839a0:	2b02      	cmp	r3, #2
   839a2:	d004      	beq.n	839ae <Cl_bc_controller+0x70e>
   839a4:	2b03      	cmp	r3, #3
   839a6:	d004      	beq.n	839b2 <Cl_bc_controller+0x712>
   839a8:	2b01      	cmp	r3, #1
   839aa:	d004      	beq.n	839b6 <Cl_bc_controller+0x716>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   839ac:	e004      	b.n	839b8 <Cl_bc_controller+0x718>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   839ae:	bf00      	nop
   839b0:	e2e7      	b.n	83f82 <Cl_bc_controller+0xce2>
								case	BC_EVENT_CS:
								break;
   839b2:	bf00      	nop
   839b4:	e2e5      	b.n	83f82 <Cl_bc_controller+0xce2>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   839b6:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   839b8:	e2e3      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   839ba:	79fb      	ldrb	r3, [r7, #7]
   839bc:	2b00      	cmp	r3, #0
   839be:	d001      	beq.n	839c4 <Cl_bc_controller+0x724>
   839c0:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   839c2:	e019      	b.n	839f8 <Cl_bc_controller+0x758>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   839c4:	4b59      	ldr	r3, [pc, #356]	; (83b2c <Cl_bc_controller+0x88c>)
   839c6:	f9b3 3000 	ldrsh.w	r3, [r3]
   839ca:	b29b      	uxth	r3, r3
   839cc:	3301      	adds	r3, #1
   839ce:	b29b      	uxth	r3, r3
   839d0:	b21a      	sxth	r2, r3
   839d2:	4b56      	ldr	r3, [pc, #344]	; (83b2c <Cl_bc_controller+0x88c>)
   839d4:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   839d6:	4b56      	ldr	r3, [pc, #344]	; (83b30 <Cl_bc_controller+0x890>)
   839d8:	881b      	ldrh	r3, [r3, #0]
   839da:	3301      	adds	r3, #1
   839dc:	b29a      	uxth	r2, r3
   839de:	4b54      	ldr	r3, [pc, #336]	; (83b30 <Cl_bc_controller+0x890>)
   839e0:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   839e2:	4b54      	ldr	r3, [pc, #336]	; (83b34 <Cl_bc_controller+0x894>)
   839e4:	2200      	movs	r2, #0
   839e6:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   839e8:	4b4e      	ldr	r3, [pc, #312]	; (83b24 <Cl_bc_controller+0x884>)
   839ea:	781a      	ldrb	r2, [r3, #0]
   839ec:	4b4e      	ldr	r3, [pc, #312]	; (83b28 <Cl_bc_controller+0x888>)
   839ee:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   839f0:	4b4c      	ldr	r3, [pc, #304]	; (83b24 <Cl_bc_controller+0x884>)
   839f2:	220d      	movs	r2, #13
   839f4:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   839f6:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   839f8:	e2c3      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   839fa:	79fb      	ldrb	r3, [r7, #7]
   839fc:	2b03      	cmp	r3, #3
   839fe:	f200 811c 	bhi.w	83c3a <Cl_bc_controller+0x99a>
   83a02:	a201      	add	r2, pc, #4	; (adr r2, 83a08 <Cl_bc_controller+0x768>)
   83a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83a08:	00083a19 	.word	0x00083a19
   83a0c:	00083c3b 	.word	0x00083c3b
   83a10:	00083a71 	.word	0x00083a71
   83a14:	00083a87 	.word	0x00083a87
							{
								case BC_EVENT_50MS:
								fill_time++;
   83a18:	4b44      	ldr	r3, [pc, #272]	; (83b2c <Cl_bc_controller+0x88c>)
   83a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a1e:	b29b      	uxth	r3, r3
   83a20:	3301      	adds	r3, #1
   83a22:	b29b      	uxth	r3, r3
   83a24:	b21a      	sxth	r2, r3
   83a26:	4b41      	ldr	r3, [pc, #260]	; (83b2c <Cl_bc_controller+0x88c>)
   83a28:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   83a2a:	4b41      	ldr	r3, [pc, #260]	; (83b30 <Cl_bc_controller+0x890>)
   83a2c:	881b      	ldrh	r3, [r3, #0]
   83a2e:	3301      	adds	r3, #1
   83a30:	b29a      	uxth	r2, r3
   83a32:	4b3f      	ldr	r3, [pc, #252]	; (83b30 <Cl_bc_controller+0x890>)
   83a34:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 40)
   83a36:	4b3e      	ldr	r3, [pc, #248]	; (83b30 <Cl_bc_controller+0x890>)
   83a38:	881b      	ldrh	r3, [r3, #0]
   83a3a:	2b28      	cmp	r3, #40	; 0x28
   83a3c:	d109      	bne.n	83a52 <Cl_bc_controller+0x7b2>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   83a3e:	2013      	movs	r0, #19
   83a40:	4b3d      	ldr	r3, [pc, #244]	; (83b38 <Cl_bc_controller+0x898>)
   83a42:	4798      	blx	r3
										sv_cntrl_activate_valve(VALVE_ID20);
   83a44:	2014      	movs	r0, #20
   83a46:	4b3c      	ldr	r3, [pc, #240]	; (83b38 <Cl_bc_controller+0x898>)
   83a48:	4798      	blx	r3
										sv_cntrl_activate_valve(VALVE_ID4);
   83a4a:	2004      	movs	r0, #4
   83a4c:	4b3a      	ldr	r3, [pc, #232]	; (83b38 <Cl_bc_controller+0x898>)
   83a4e:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID4);
										sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83a50:	e0f5      	b.n	83c3e <Cl_bc_controller+0x99e>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
										sv_cntrl_activate_valve(VALVE_ID20);
										sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 45)
   83a52:	4b37      	ldr	r3, [pc, #220]	; (83b30 <Cl_bc_controller+0x890>)
   83a54:	881b      	ldrh	r3, [r3, #0]
   83a56:	2b2d      	cmp	r3, #45	; 0x2d
   83a58:	f040 80f1 	bne.w	83c3e <Cl_bc_controller+0x99e>
									{
										sv_cntrl_deactivate_valve(VALVE_ID4);
   83a5c:	2004      	movs	r0, #4
   83a5e:	4b37      	ldr	r3, [pc, #220]	; (83b3c <Cl_bc_controller+0x89c>)
   83a60:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID20);
   83a62:	2014      	movs	r0, #20
   83a64:	4b35      	ldr	r3, [pc, #212]	; (83b3c <Cl_bc_controller+0x89c>)
   83a66:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83a68:	2013      	movs	r0, #19
   83a6a:	4b34      	ldr	r3, [pc, #208]	; (83b3c <Cl_bc_controller+0x89c>)
   83a6c:	4798      	blx	r3
										
									}
								break;
   83a6e:	e0e6      	b.n	83c3e <Cl_bc_controller+0x99e>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(fill_time > 150){
   83a70:	4b2e      	ldr	r3, [pc, #184]	; (83b2c <Cl_bc_controller+0x88c>)
   83a72:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a76:	2b96      	cmp	r3, #150	; 0x96
   83a78:	f340 80e3 	ble.w	83c42 <Cl_bc_controller+0x9a2>
								//sv_cntrl_setyellowalarm();
// 								sv_cntrl_activate_valve( VALVE_ID4);
// 								cl_wait(50);
// 								sv_cntrl_deactivate_valve(VALVE_ID4);
// 								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83a7c:	2101      	movs	r1, #1
   83a7e:	201a      	movs	r0, #26
   83a80:	4b2f      	ldr	r3, [pc, #188]	; (83b40 <Cl_bc_controller+0x8a0>)
   83a82:	4798      	blx	r3
													
								}
								
								break;
   83a84:	e0dd      	b.n	83c42 <Cl_bc_controller+0x9a2>
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   83a86:	4b2f      	ldr	r3, [pc, #188]	; (83b44 <Cl_bc_controller+0x8a4>)
   83a88:	2201      	movs	r2, #1
   83a8a:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83a8c:	4b2e      	ldr	r3, [pc, #184]	; (83b48 <Cl_bc_controller+0x8a8>)
   83a8e:	2200      	movs	r2, #0
   83a90:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83a92:	4b26      	ldr	r3, [pc, #152]	; (83b2c <Cl_bc_controller+0x88c>)
   83a94:	f9b3 3000 	ldrsh.w	r3, [r3]
   83a98:	b29a      	uxth	r2, r3
   83a9a:	4b2b      	ldr	r3, [pc, #172]	; (83b48 <Cl_bc_controller+0x8a8>)
   83a9c:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   83a9e:	4b2a      	ldr	r3, [pc, #168]	; (83b48 <Cl_bc_controller+0x8a8>)
   83aa0:	2216      	movs	r2, #22
   83aa2:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   83aa4:	4b21      	ldr	r3, [pc, #132]	; (83b2c <Cl_bc_controller+0x88c>)
   83aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
   83aaa:	b29a      	uxth	r2, r3
   83aac:	4b27      	ldr	r3, [pc, #156]	; (83b4c <Cl_bc_controller+0x8ac>)
   83aae:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   83ab0:	4b27      	ldr	r3, [pc, #156]	; (83b50 <Cl_bc_controller+0x8b0>)
   83ab2:	781b      	ldrb	r3, [r3, #0]
   83ab4:	2b01      	cmp	r3, #1
   83ab6:	f040 8098 	bne.w	83bea <Cl_bc_controller+0x94a>
									{
										switch (flow_rate)
   83aba:	4b26      	ldr	r3, [pc, #152]	; (83b54 <Cl_bc_controller+0x8b4>)
   83abc:	681b      	ldr	r3, [r3, #0]
   83abe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83ac2:	f000 808f 	beq.w	83be4 <Cl_bc_controller+0x944>
   83ac6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83aca:	d805      	bhi.n	83ad8 <Cl_bc_controller+0x838>
   83acc:	2bc8      	cmp	r3, #200	; 0xc8
   83ace:	d07f      	beq.n	83bd0 <Cl_bc_controller+0x930>
   83ad0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83ad4:	d05f      	beq.n	83b96 <Cl_bc_controller+0x8f6>
   83ad6:	e088      	b.n	83bea <Cl_bc_controller+0x94a>
   83ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83adc:	d03e      	beq.n	83b5c <Cl_bc_controller+0x8bc>
   83ade:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83ae2:	f040 8082 	bne.w	83bea <Cl_bc_controller+0x94a>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83ae6:	4b11      	ldr	r3, [pc, #68]	; (83b2c <Cl_bc_controller+0x88c>)
   83ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
   83aec:	2b37      	cmp	r3, #55	; 0x37
   83aee:	dc04      	bgt.n	83afa <Cl_bc_controller+0x85a>
   83af0:	4b0e      	ldr	r3, [pc, #56]	; (83b2c <Cl_bc_controller+0x88c>)
   83af2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83af6:	2b2c      	cmp	r3, #44	; 0x2c
   83af8:	dc0d      	bgt.n	83b16 <Cl_bc_controller+0x876>
												{	
													
													switchb01alrcnt++ ;
   83afa:	4b17      	ldr	r3, [pc, #92]	; (83b58 <Cl_bc_controller+0x8b8>)
   83afc:	681b      	ldr	r3, [r3, #0]
   83afe:	3301      	adds	r3, #1
   83b00:	4a15      	ldr	r2, [pc, #84]	; (83b58 <Cl_bc_controller+0x8b8>)
   83b02:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83b04:	4b14      	ldr	r3, [pc, #80]	; (83b58 <Cl_bc_controller+0x8b8>)
   83b06:	681b      	ldr	r3, [r3, #0]
   83b08:	2b03      	cmp	r3, #3
   83b0a:	dd08      	ble.n	83b1e <Cl_bc_controller+0x87e>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83b0c:	2101      	movs	r1, #1
   83b0e:	201a      	movs	r0, #26
   83b10:	4b0b      	ldr	r3, [pc, #44]	; (83b40 <Cl_bc_controller+0x8a0>)
   83b12:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{	
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83b14:	e003      	b.n	83b1e <Cl_bc_controller+0x87e>
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83b16:	4b10      	ldr	r3, [pc, #64]	; (83b58 <Cl_bc_controller+0x8b8>)
   83b18:	2200      	movs	r2, #0
   83b1a:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83b1c:	e065      	b.n	83bea <Cl_bc_controller+0x94a>
   83b1e:	e064      	b.n	83bea <Cl_bc_controller+0x94a>
   83b20:	20071753 	.word	0x20071753
   83b24:	20071751 	.word	0x20071751
   83b28:	20071752 	.word	0x20071752
   83b2c:	2007176a 	.word	0x2007176a
   83b30:	20071768 	.word	0x20071768
   83b34:	20071754 	.word	0x20071754
   83b38:	00099aa9 	.word	0x00099aa9
   83b3c:	00099ac9 	.word	0x00099ac9
   83b40:	0008302d 	.word	0x0008302d
   83b44:	20071a4c 	.word	0x20071a4c
   83b48:	2007176c 	.word	0x2007176c
   83b4c:	20071770 	.word	0x20071770
   83b50:	20071943 	.word	0x20071943
   83b54:	20071944 	.word	0x20071944
   83b58:	2007175c 	.word	0x2007175c
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83b5c:	4ba0      	ldr	r3, [pc, #640]	; (83de0 <Cl_bc_controller+0xb40>)
   83b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b62:	2b4d      	cmp	r3, #77	; 0x4d
   83b64:	dc04      	bgt.n	83b70 <Cl_bc_controller+0x8d0>
   83b66:	4b9e      	ldr	r3, [pc, #632]	; (83de0 <Cl_bc_controller+0xb40>)
   83b68:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b6c:	2b42      	cmp	r3, #66	; 0x42
   83b6e:	dc0d      	bgt.n	83b8c <Cl_bc_controller+0x8ec>
												{
													switchb01alrcnt++ ;
   83b70:	4b9c      	ldr	r3, [pc, #624]	; (83de4 <Cl_bc_controller+0xb44>)
   83b72:	681b      	ldr	r3, [r3, #0]
   83b74:	3301      	adds	r3, #1
   83b76:	4a9b      	ldr	r2, [pc, #620]	; (83de4 <Cl_bc_controller+0xb44>)
   83b78:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83b7a:	4b9a      	ldr	r3, [pc, #616]	; (83de4 <Cl_bc_controller+0xb44>)
   83b7c:	681b      	ldr	r3, [r3, #0]
   83b7e:	2b03      	cmp	r3, #3
   83b80:	dd08      	ble.n	83b94 <Cl_bc_controller+0x8f4>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83b82:	2101      	movs	r1, #1
   83b84:	201a      	movs	r0, #26
   83b86:	4b98      	ldr	r3, [pc, #608]	; (83de8 <Cl_bc_controller+0xb48>)
   83b88:	4798      	blx	r3
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
												{
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83b8a:	e003      	b.n	83b94 <Cl_bc_controller+0x8f4>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83b8c:	4b95      	ldr	r3, [pc, #596]	; (83de4 <Cl_bc_controller+0xb44>)
   83b8e:	2200      	movs	r2, #0
   83b90:	601a      	str	r2, [r3, #0]
									//				sv_cntrl_resetyellowalarm();
												}
											break;
   83b92:	e02a      	b.n	83bea <Cl_bc_controller+0x94a>
   83b94:	e029      	b.n	83bea <Cl_bc_controller+0x94a>
											
											case 400:
											break;
											
											case 300:
												if ((fill_time > 125) || (fill_time < 115))
   83b96:	4b92      	ldr	r3, [pc, #584]	; (83de0 <Cl_bc_controller+0xb40>)
   83b98:	f9b3 3000 	ldrsh.w	r3, [r3]
   83b9c:	2b7d      	cmp	r3, #125	; 0x7d
   83b9e:	dc04      	bgt.n	83baa <Cl_bc_controller+0x90a>
   83ba0:	4b8f      	ldr	r3, [pc, #572]	; (83de0 <Cl_bc_controller+0xb40>)
   83ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ba6:	2b72      	cmp	r3, #114	; 0x72
   83ba8:	dc0d      	bgt.n	83bc6 <Cl_bc_controller+0x926>
												{
													
													switchb01alrcnt++ ;
   83baa:	4b8e      	ldr	r3, [pc, #568]	; (83de4 <Cl_bc_controller+0xb44>)
   83bac:	681b      	ldr	r3, [r3, #0]
   83bae:	3301      	adds	r3, #1
   83bb0:	4a8c      	ldr	r2, [pc, #560]	; (83de4 <Cl_bc_controller+0xb44>)
   83bb2:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83bb4:	4b8b      	ldr	r3, [pc, #556]	; (83de4 <Cl_bc_controller+0xb44>)
   83bb6:	681b      	ldr	r3, [r3, #0]
   83bb8:	2b03      	cmp	r3, #3
   83bba:	dd08      	ble.n	83bce <Cl_bc_controller+0x92e>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83bbc:	2101      	movs	r1, #1
   83bbe:	201a      	movs	r0, #26
   83bc0:	4b89      	ldr	r3, [pc, #548]	; (83de8 <Cl_bc_controller+0xb48>)
   83bc2:	4798      	blx	r3
												if ((fill_time > 125) || (fill_time < 115))
												{
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83bc4:	e003      	b.n	83bce <Cl_bc_controller+0x92e>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83bc6:	4b87      	ldr	r3, [pc, #540]	; (83de4 <Cl_bc_controller+0xb44>)
   83bc8:	2200      	movs	r2, #0
   83bca:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83bcc:	e00d      	b.n	83bea <Cl_bc_controller+0x94a>
   83bce:	e00c      	b.n	83bea <Cl_bc_controller+0x94a>
											
											case 200:
												if (fill_time > 190)
   83bd0:	4b83      	ldr	r3, [pc, #524]	; (83de0 <Cl_bc_controller+0xb40>)
   83bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83bd6:	2bbe      	cmp	r3, #190	; 0xbe
   83bd8:	dd06      	ble.n	83be8 <Cl_bc_controller+0x948>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83bda:	2101      	movs	r1, #1
   83bdc:	201a      	movs	r0, #26
   83bde:	4b82      	ldr	r3, [pc, #520]	; (83de8 <Cl_bc_controller+0xb48>)
   83be0:	4798      	blx	r3
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83be2:	e001      	b.n	83be8 <Cl_bc_controller+0x948>
									//				sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83be4:	bf00      	nop
   83be6:	e000      	b.n	83bea <Cl_bc_controller+0x94a>
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83be8:	bf00      	nop
										}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83bea:	2006      	movs	r0, #6
   83bec:	4b7f      	ldr	r3, [pc, #508]	; (83dec <Cl_bc_controller+0xb4c>)
   83bee:	4798      	blx	r3
   83bf0:	4603      	mov	r3, r0
   83bf2:	73fb      	strb	r3, [r7, #15]
								
								wait_4_propo_off = 0;
   83bf4:	4b7e      	ldr	r3, [pc, #504]	; (83df0 <Cl_bc_controller+0xb50>)
   83bf6:	2200      	movs	r2, #0
   83bf8:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_activate_valve(VALVE_ID20);
								sv_cntrl_activate_valve(VALVE_ID19);
   83bfa:	2013      	movs	r0, #19
   83bfc:	4b7d      	ldr	r3, [pc, #500]	; (83df4 <Cl_bc_controller+0xb54>)
   83bfe:	4798      	blx	r3
							//	sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83c00:	2204      	movs	r2, #4
   83c02:	497d      	ldr	r1, [pc, #500]	; (83df8 <Cl_bc_controller+0xb58>)
   83c04:	2037      	movs	r0, #55	; 0x37
   83c06:	4b7d      	ldr	r3, [pc, #500]	; (83dfc <Cl_bc_controller+0xb5c>)
   83c08:	4798      	blx	r3
// 								}
// 								
// 								BC_count =0;
// 								}
//************************************************************************** 22082017*********************								
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83c0a:	2202      	movs	r2, #2
   83c0c:	497c      	ldr	r1, [pc, #496]	; (83e00 <Cl_bc_controller+0xb60>)
   83c0e:	2049      	movs	r0, #73	; 0x49
   83c10:	4b7a      	ldr	r3, [pc, #488]	; (83dfc <Cl_bc_controller+0xb5c>)
   83c12:	4798      	blx	r3
								CSeventcount++;
   83c14:	4b7b      	ldr	r3, [pc, #492]	; (83e04 <Cl_bc_controller+0xb64>)
   83c16:	681b      	ldr	r3, [r3, #0]
   83c18:	3301      	adds	r3, #1
   83c1a:	4a7a      	ldr	r2, [pc, #488]	; (83e04 <Cl_bc_controller+0xb64>)
   83c1c:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83c1e:	7bfb      	ldrb	r3, [r7, #15]
   83c20:	2b00      	cmp	r3, #0
   83c22:	d110      	bne.n	83c46 <Cl_bc_controller+0x9a6>
								{
									bc_laststate = bc_state;
   83c24:	4b78      	ldr	r3, [pc, #480]	; (83e08 <Cl_bc_controller+0xb68>)
   83c26:	781a      	ldrb	r2, [r3, #0]
   83c28:	4b78      	ldr	r3, [pc, #480]	; (83e0c <Cl_bc_controller+0xb6c>)
   83c2a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83c2c:	4b76      	ldr	r3, [pc, #472]	; (83e08 <Cl_bc_controller+0xb68>)
   83c2e:	220e      	movs	r2, #14
   83c30:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83c32:	4b6b      	ldr	r3, [pc, #428]	; (83de0 <Cl_bc_controller+0xb40>)
   83c34:	2200      	movs	r2, #0
   83c36:	801a      	strh	r2, [r3, #0]
								}
								break;
   83c38:	e005      	b.n	83c46 <Cl_bc_controller+0x9a6>
								default:break;								
   83c3a:	bf00      	nop
   83c3c:	e1a1      	b.n	83f82 <Cl_bc_controller+0xce2>
										sv_cntrl_deactivate_valve(VALVE_ID4);
										sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83c3e:	bf00      	nop
   83c40:	e19f      	b.n	83f82 <Cl_bc_controller+0xce2>
// 								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													
								}
								
								break;
   83c42:	bf00      	nop
   83c44:	e19d      	b.n	83f82 <Cl_bc_controller+0xce2>
								{
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
									fill_time = 0;															
								}
								break;
   83c46:	bf00      	nop
								default:break;								
							}
			break;
   83c48:	e19b      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83c4a:	79fb      	ldrb	r3, [r7, #7]
   83c4c:	2b00      	cmp	r3, #0
   83c4e:	d001      	beq.n	83c54 <Cl_bc_controller+0x9b4>
   83c50:	2b02      	cmp	r3, #2
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;
								case BC_EVENT_SECOND:
								
								break;
   83c52:	e013      	b.n	83c7c <Cl_bc_controller+0x9dc>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83c54:	4b62      	ldr	r3, [pc, #392]	; (83de0 <Cl_bc_controller+0xb40>)
   83c56:	f9b3 3000 	ldrsh.w	r3, [r3]
   83c5a:	b29b      	uxth	r3, r3
   83c5c:	3301      	adds	r3, #1
   83c5e:	b29b      	uxth	r3, r3
   83c60:	b21a      	sxth	r2, r3
   83c62:	4b5f      	ldr	r3, [pc, #380]	; (83de0 <Cl_bc_controller+0xb40>)
   83c64:	801a      	strh	r2, [r3, #0]
// 									wait_counter ++;	// 1 sec wait
// 									
// 								}
// 								else
								{
									wait_counter = 0;
   83c66:	4b6a      	ldr	r3, [pc, #424]	; (83e10 <Cl_bc_controller+0xb70>)
   83c68:	2200      	movs	r2, #0
   83c6a:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83c6c:	4b66      	ldr	r3, [pc, #408]	; (83e08 <Cl_bc_controller+0xb68>)
   83c6e:	781a      	ldrb	r2, [r3, #0]
   83c70:	4b66      	ldr	r3, [pc, #408]	; (83e0c <Cl_bc_controller+0xb6c>)
   83c72:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   83c74:	4b64      	ldr	r3, [pc, #400]	; (83e08 <Cl_bc_controller+0xb68>)
   83c76:	220f      	movs	r2, #15
   83c78:	701a      	strb	r2, [r3, #0]
								}
								break;
   83c7a:	bf00      	nop
								case BC_EVENT_SECOND:
								
								break;
								
							}
			break;
   83c7c:	e181      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83c7e:	79fb      	ldrb	r3, [r7, #7]
   83c80:	2b03      	cmp	r3, #3
   83c82:	f200 8131 	bhi.w	83ee8 <Cl_bc_controller+0xc48>
   83c86:	a201      	add	r2, pc, #4	; (adr r2, 83c8c <Cl_bc_controller+0x9ec>)
   83c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83c8c:	00083c9d 	.word	0x00083c9d
   83c90:	00083ee9 	.word	0x00083ee9
   83c94:	00083cf5 	.word	0x00083cf5
   83c98:	00083d0b 	.word	0x00083d0b
							{
								case BC_EVENT_50MS:
								fill_time++;
   83c9c:	4b50      	ldr	r3, [pc, #320]	; (83de0 <Cl_bc_controller+0xb40>)
   83c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83ca2:	b29b      	uxth	r3, r3
   83ca4:	3301      	adds	r3, #1
   83ca6:	b29b      	uxth	r3, r3
   83ca8:	b21a      	sxth	r2, r3
   83caa:	4b4d      	ldr	r3, [pc, #308]	; (83de0 <Cl_bc_controller+0xb40>)
   83cac:	801a      	strh	r2, [r3, #0]
								wait_4_propo_off ++;
   83cae:	4b50      	ldr	r3, [pc, #320]	; (83df0 <Cl_bc_controller+0xb50>)
   83cb0:	881b      	ldrh	r3, [r3, #0]
   83cb2:	3301      	adds	r3, #1
   83cb4:	b29a      	uxth	r2, r3
   83cb6:	4b4e      	ldr	r3, [pc, #312]	; (83df0 <Cl_bc_controller+0xb50>)
   83cb8:	801a      	strh	r2, [r3, #0]
									if (wait_4_propo_off == 40)
   83cba:	4b4d      	ldr	r3, [pc, #308]	; (83df0 <Cl_bc_controller+0xb50>)
   83cbc:	881b      	ldrh	r3, [r3, #0]
   83cbe:	2b28      	cmp	r3, #40	; 0x28
   83cc0:	d109      	bne.n	83cd6 <Cl_bc_controller+0xa36>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
   83cc2:	2013      	movs	r0, #19
   83cc4:	4b4b      	ldr	r3, [pc, #300]	; (83df4 <Cl_bc_controller+0xb54>)
   83cc6:	4798      	blx	r3
										sv_cntrl_activate_valve(VALVE_ID20);
   83cc8:	2014      	movs	r0, #20
   83cca:	4b4a      	ldr	r3, [pc, #296]	; (83df4 <Cl_bc_controller+0xb54>)
   83ccc:	4798      	blx	r3
										sv_cntrl_activate_valve(VALVE_ID4);
   83cce:	2004      	movs	r0, #4
   83cd0:	4b48      	ldr	r3, [pc, #288]	; (83df4 <Cl_bc_controller+0xb54>)
   83cd2:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID4);
										sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83cd4:	e10a      	b.n	83eec <Cl_bc_controller+0xc4c>
									{
										sv_cntrl_activate_valve(VALVE_ID19);
										sv_cntrl_activate_valve(VALVE_ID20);
										sv_cntrl_activate_valve(VALVE_ID4);
									}
									else if (wait_4_propo_off == 45)
   83cd6:	4b46      	ldr	r3, [pc, #280]	; (83df0 <Cl_bc_controller+0xb50>)
   83cd8:	881b      	ldrh	r3, [r3, #0]
   83cda:	2b2d      	cmp	r3, #45	; 0x2d
   83cdc:	f040 8106 	bne.w	83eec <Cl_bc_controller+0xc4c>
									{
										sv_cntrl_deactivate_valve(VALVE_ID4);
   83ce0:	2004      	movs	r0, #4
   83ce2:	4b4c      	ldr	r3, [pc, #304]	; (83e14 <Cl_bc_controller+0xb74>)
   83ce4:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID20);
   83ce6:	2014      	movs	r0, #20
   83ce8:	4b4a      	ldr	r3, [pc, #296]	; (83e14 <Cl_bc_controller+0xb74>)
   83cea:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83cec:	2013      	movs	r0, #19
   83cee:	4b49      	ldr	r3, [pc, #292]	; (83e14 <Cl_bc_controller+0xb74>)
   83cf0:	4798      	blx	r3
										
									}
								break;
   83cf2:	e0fb      	b.n	83eec <Cl_bc_controller+0xc4c>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
									if(fill_time > 150){
   83cf4:	4b3a      	ldr	r3, [pc, #232]	; (83de0 <Cl_bc_controller+0xb40>)
   83cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
   83cfa:	2b96      	cmp	r3, #150	; 0x96
   83cfc:	f340 80f8 	ble.w	83ef0 <Cl_bc_controller+0xc50>
					//					sv_cntrl_setyellowalarm();
// 										sv_cntrl_activate_valve( VALVE_ID4);
// 										cl_wait(50);
// 										sv_cntrl_deactivate_valve(VALVE_ID4);
// 										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83d00:	2101      	movs	r1, #1
   83d02:	201a      	movs	r0, #26
   83d04:	4b38      	ldr	r3, [pc, #224]	; (83de8 <Cl_bc_controller+0xb48>)
   83d06:	4798      	blx	r3
										
									}
								
								break;
   83d08:	e0f2      	b.n	83ef0 <Cl_bc_controller+0xc50>
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								
								 current_sense = true;
   83d0a:	4b43      	ldr	r3, [pc, #268]	; (83e18 <Cl_bc_controller+0xb78>)
   83d0c:	2201      	movs	r2, #1
   83d0e:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83d10:	4b39      	ldr	r3, [pc, #228]	; (83df8 <Cl_bc_controller+0xb58>)
   83d12:	2200      	movs	r2, #0
   83d14:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83d16:	4b32      	ldr	r3, [pc, #200]	; (83de0 <Cl_bc_controller+0xb40>)
   83d18:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d1c:	b29a      	uxth	r2, r3
   83d1e:	4b36      	ldr	r3, [pc, #216]	; (83df8 <Cl_bc_controller+0xb58>)
   83d20:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   83d22:	4b35      	ldr	r3, [pc, #212]	; (83df8 <Cl_bc_controller+0xb58>)
   83d24:	2215      	movs	r2, #21
   83d26:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83d28:	4b2d      	ldr	r3, [pc, #180]	; (83de0 <Cl_bc_controller+0xb40>)
   83d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d2e:	b29a      	uxth	r2, r3
   83d30:	4b33      	ldr	r3, [pc, #204]	; (83e00 <Cl_bc_controller+0xb60>)
   83d32:	801a      	strh	r2, [r3, #0]
							//	cl_tdata_temp.word = cl_tdata_temp.word << 16;
									if (bc_flag == 1)
   83d34:	4b39      	ldr	r3, [pc, #228]	; (83e1c <Cl_bc_controller+0xb7c>)
   83d36:	781b      	ldrb	r3, [r3, #0]
   83d38:	2b01      	cmp	r3, #1
   83d3a:	f040 80ad 	bne.w	83e98 <Cl_bc_controller+0xbf8>
									{
										switch (flow_rate)
   83d3e:	4b38      	ldr	r3, [pc, #224]	; (83e20 <Cl_bc_controller+0xb80>)
   83d40:	681b      	ldr	r3, [r3, #0]
   83d42:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d46:	f000 80a4 	beq.w	83e92 <Cl_bc_controller+0xbf2>
   83d4a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d4e:	d806      	bhi.n	83d5e <Cl_bc_controller+0xabe>
   83d50:	2bc8      	cmp	r3, #200	; 0xc8
   83d52:	f000 8086 	beq.w	83e62 <Cl_bc_controller+0xbc2>
   83d56:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83d5a:	d065      	beq.n	83e28 <Cl_bc_controller+0xb88>
   83d5c:	e09c      	b.n	83e98 <Cl_bc_controller+0xbf8>
   83d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83d62:	d020      	beq.n	83da6 <Cl_bc_controller+0xb06>
   83d64:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83d68:	f040 8096 	bne.w	83e98 <Cl_bc_controller+0xbf8>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83d6c:	4b1c      	ldr	r3, [pc, #112]	; (83de0 <Cl_bc_controller+0xb40>)
   83d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d72:	2b37      	cmp	r3, #55	; 0x37
   83d74:	dc04      	bgt.n	83d80 <Cl_bc_controller+0xae0>
   83d76:	4b1a      	ldr	r3, [pc, #104]	; (83de0 <Cl_bc_controller+0xb40>)
   83d78:	f9b3 3000 	ldrsh.w	r3, [r3]
   83d7c:	2b2c      	cmp	r3, #44	; 0x2c
   83d7e:	dc0d      	bgt.n	83d9c <Cl_bc_controller+0xafc>
												{
													
													switchb02alrcnt++ ;
   83d80:	4b28      	ldr	r3, [pc, #160]	; (83e24 <Cl_bc_controller+0xb84>)
   83d82:	681b      	ldr	r3, [r3, #0]
   83d84:	3301      	adds	r3, #1
   83d86:	4a27      	ldr	r2, [pc, #156]	; (83e24 <Cl_bc_controller+0xb84>)
   83d88:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83d8a:	4b26      	ldr	r3, [pc, #152]	; (83e24 <Cl_bc_controller+0xb84>)
   83d8c:	681b      	ldr	r3, [r3, #0]
   83d8e:	2b03      	cmp	r3, #3
   83d90:	dd08      	ble.n	83da4 <Cl_bc_controller+0xb04>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83d92:	2101      	movs	r1, #1
   83d94:	201a      	movs	r0, #26
   83d96:	4b14      	ldr	r3, [pc, #80]	; (83de8 <Cl_bc_controller+0xb48>)
   83d98:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83d9a:	e003      	b.n	83da4 <Cl_bc_controller+0xb04>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83d9c:	4b21      	ldr	r3, [pc, #132]	; (83e24 <Cl_bc_controller+0xb84>)
   83d9e:	2200      	movs	r2, #0
   83da0:	601a      	str	r2, [r3, #0]
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83da2:	e079      	b.n	83e98 <Cl_bc_controller+0xbf8>
   83da4:	e078      	b.n	83e98 <Cl_bc_controller+0xbf8>
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83da6:	4b0e      	ldr	r3, [pc, #56]	; (83de0 <Cl_bc_controller+0xb40>)
   83da8:	f9b3 3000 	ldrsh.w	r3, [r3]
   83dac:	2b4d      	cmp	r3, #77	; 0x4d
   83dae:	dc04      	bgt.n	83dba <Cl_bc_controller+0xb1a>
   83db0:	4b0b      	ldr	r3, [pc, #44]	; (83de0 <Cl_bc_controller+0xb40>)
   83db2:	f9b3 3000 	ldrsh.w	r3, [r3]
   83db6:	2b42      	cmp	r3, #66	; 0x42
   83db8:	dc0d      	bgt.n	83dd6 <Cl_bc_controller+0xb36>
												{
													
													switchb02alrcnt++ ;
   83dba:	4b1a      	ldr	r3, [pc, #104]	; (83e24 <Cl_bc_controller+0xb84>)
   83dbc:	681b      	ldr	r3, [r3, #0]
   83dbe:	3301      	adds	r3, #1
   83dc0:	4a18      	ldr	r2, [pc, #96]	; (83e24 <Cl_bc_controller+0xb84>)
   83dc2:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83dc4:	4b17      	ldr	r3, [pc, #92]	; (83e24 <Cl_bc_controller+0xb84>)
   83dc6:	681b      	ldr	r3, [r3, #0]
   83dc8:	2b03      	cmp	r3, #3
   83dca:	dd08      	ble.n	83dde <Cl_bc_controller+0xb3e>
									//				sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83dcc:	2101      	movs	r1, #1
   83dce:	201a      	movs	r0, #26
   83dd0:	4b05      	ldr	r3, [pc, #20]	; (83de8 <Cl_bc_controller+0xb48>)
   83dd2:	4798      	blx	r3
												if ((fill_time > 77) || (fill_time < 67))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83dd4:	e003      	b.n	83dde <Cl_bc_controller+0xb3e>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83dd6:	4b13      	ldr	r3, [pc, #76]	; (83e24 <Cl_bc_controller+0xb84>)
   83dd8:	2200      	movs	r2, #0
   83dda:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83ddc:	e05c      	b.n	83e98 <Cl_bc_controller+0xbf8>
   83dde:	e05b      	b.n	83e98 <Cl_bc_controller+0xbf8>
   83de0:	2007176a 	.word	0x2007176a
   83de4:	2007175c 	.word	0x2007175c
   83de8:	0008302d 	.word	0x0008302d
   83dec:	00099c99 	.word	0x00099c99
   83df0:	20071768 	.word	0x20071768
   83df4:	00099aa9 	.word	0x00099aa9
   83df8:	2007176c 	.word	0x2007176c
   83dfc:	0009b805 	.word	0x0009b805
   83e00:	20071770 	.word	0x20071770
   83e04:	20071764 	.word	0x20071764
   83e08:	20071751 	.word	0x20071751
   83e0c:	20071752 	.word	0x20071752
   83e10:	20071754 	.word	0x20071754
   83e14:	00099ac9 	.word	0x00099ac9
   83e18:	20071a4c 	.word	0x20071a4c
   83e1c:	20071943 	.word	0x20071943
   83e20:	20071944 	.word	0x20071944
   83e24:	20071760 	.word	0x20071760
											
											case 400:
											break;
											
											case 300:
											if ((fill_time > 125) || (fill_time < 115))
   83e28:	4b58      	ldr	r3, [pc, #352]	; (83f8c <Cl_bc_controller+0xcec>)
   83e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e2e:	2b7d      	cmp	r3, #125	; 0x7d
   83e30:	dc04      	bgt.n	83e3c <Cl_bc_controller+0xb9c>
   83e32:	4b56      	ldr	r3, [pc, #344]	; (83f8c <Cl_bc_controller+0xcec>)
   83e34:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e38:	2b72      	cmp	r3, #114	; 0x72
   83e3a:	dc0d      	bgt.n	83e58 <Cl_bc_controller+0xbb8>
											{
												
												switchb02alrcnt++ ;
   83e3c:	4b54      	ldr	r3, [pc, #336]	; (83f90 <Cl_bc_controller+0xcf0>)
   83e3e:	681b      	ldr	r3, [r3, #0]
   83e40:	3301      	adds	r3, #1
   83e42:	4a53      	ldr	r2, [pc, #332]	; (83f90 <Cl_bc_controller+0xcf0>)
   83e44:	6013      	str	r3, [r2, #0]

												if(switchb02alrcnt >3){
   83e46:	4b52      	ldr	r3, [pc, #328]	; (83f90 <Cl_bc_controller+0xcf0>)
   83e48:	681b      	ldr	r3, [r3, #0]
   83e4a:	2b03      	cmp	r3, #3
   83e4c:	dd08      	ble.n	83e60 <Cl_bc_controller+0xbc0>
							//					sv_cntrl_setyellowalarm();
// 												sv_cntrl_activate_valve( VALVE_ID4);
// 												cl_wait(50);
// 												sv_cntrl_deactivate_valve(VALVE_ID4);
// 												cl_wait(50);
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83e4e:	2101      	movs	r1, #1
   83e50:	201a      	movs	r0, #26
   83e52:	4b50      	ldr	r3, [pc, #320]	; (83f94 <Cl_bc_controller+0xcf4>)
   83e54:	4798      	blx	r3
											if ((fill_time > 125) || (fill_time < 115))
											{
												
												switchb02alrcnt++ ;

												if(switchb02alrcnt >3){
   83e56:	e003      	b.n	83e60 <Cl_bc_controller+0xbc0>
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
											}
											else
											{
												switchb02alrcnt = 0;
   83e58:	4b4d      	ldr	r3, [pc, #308]	; (83f90 <Cl_bc_controller+0xcf0>)
   83e5a:	2200      	movs	r2, #0
   83e5c:	601a      	str	r2, [r3, #0]
									//			sv_cntrl_resetyellowalarm();
											}
											break;
   83e5e:	e01b      	b.n	83e98 <Cl_bc_controller+0xbf8>
   83e60:	e01a      	b.n	83e98 <Cl_bc_controller+0xbf8>
											
											case 200:
												if (fill_time > 190)
   83e62:	4b4a      	ldr	r3, [pc, #296]	; (83f8c <Cl_bc_controller+0xcec>)
   83e64:	f9b3 3000 	ldrsh.w	r3, [r3]
   83e68:	2bbe      	cmp	r3, #190	; 0xbe
   83e6a:	dd14      	ble.n	83e96 <Cl_bc_controller+0xbf6>
												{
													sv_cntrl_setyellowalarm();
   83e6c:	4b4a      	ldr	r3, [pc, #296]	; (83f98 <Cl_bc_controller+0xcf8>)
   83e6e:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83e70:	2004      	movs	r0, #4
   83e72:	4b4a      	ldr	r3, [pc, #296]	; (83f9c <Cl_bc_controller+0xcfc>)
   83e74:	4798      	blx	r3
													cl_wait(50);
   83e76:	2032      	movs	r0, #50	; 0x32
   83e78:	4b49      	ldr	r3, [pc, #292]	; (83fa0 <Cl_bc_controller+0xd00>)
   83e7a:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83e7c:	2004      	movs	r0, #4
   83e7e:	4b49      	ldr	r3, [pc, #292]	; (83fa4 <Cl_bc_controller+0xd04>)
   83e80:	4798      	blx	r3
													cl_wait(50);
   83e82:	2032      	movs	r0, #50	; 0x32
   83e84:	4b46      	ldr	r3, [pc, #280]	; (83fa0 <Cl_bc_controller+0xd00>)
   83e86:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83e88:	2101      	movs	r1, #1
   83e8a:	201a      	movs	r0, #26
   83e8c:	4b41      	ldr	r3, [pc, #260]	; (83f94 <Cl_bc_controller+0xcf4>)
   83e8e:	4798      	blx	r3
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83e90:	e001      	b.n	83e96 <Cl_bc_controller+0xbf6>
										//			sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83e92:	bf00      	nop
   83e94:	e000      	b.n	83e98 <Cl_bc_controller+0xbf8>
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83e96:	bf00      	nop
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83e98:	2005      	movs	r0, #5
   83e9a:	4b43      	ldr	r3, [pc, #268]	; (83fa8 <Cl_bc_controller+0xd08>)
   83e9c:	4798      	blx	r3
   83e9e:	4603      	mov	r3, r0
   83ea0:	73fb      	strb	r3, [r7, #15]
								wait_4_propo_off =0;
   83ea2:	4b42      	ldr	r3, [pc, #264]	; (83fac <Cl_bc_controller+0xd0c>)
   83ea4:	2200      	movs	r2, #0
   83ea6:	801a      	strh	r2, [r3, #0]
								sv_cntrl_activate_valve(VALVE_ID19);
   83ea8:	2013      	movs	r0, #19
   83eaa:	4b3c      	ldr	r3, [pc, #240]	; (83f9c <Cl_bc_controller+0xcfc>)
   83eac:	4798      	blx	r3
						//		sv_cntrl_activate_valve(VALVE_ID20);
						//		sv_cntrl_activate_valve(VALVE_ID4);
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83eae:	2204      	movs	r2, #4
   83eb0:	493f      	ldr	r1, [pc, #252]	; (83fb0 <Cl_bc_controller+0xd10>)
   83eb2:	2037      	movs	r0, #55	; 0x37
   83eb4:	4b3f      	ldr	r3, [pc, #252]	; (83fb4 <Cl_bc_controller+0xd14>)
   83eb6:	4798      	blx	r3
// 									
// 									BC_count =0;
// 								}
								
//************************************************************************** 22082017*********************							
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83eb8:	2202      	movs	r2, #2
   83eba:	493f      	ldr	r1, [pc, #252]	; (83fb8 <Cl_bc_controller+0xd18>)
   83ebc:	2049      	movs	r0, #73	; 0x49
   83ebe:	4b3d      	ldr	r3, [pc, #244]	; (83fb4 <Cl_bc_controller+0xd14>)
   83ec0:	4798      	blx	r3
								CSeventcount++;
   83ec2:	4b3e      	ldr	r3, [pc, #248]	; (83fbc <Cl_bc_controller+0xd1c>)
   83ec4:	681b      	ldr	r3, [r3, #0]
   83ec6:	3301      	adds	r3, #1
   83ec8:	4a3c      	ldr	r2, [pc, #240]	; (83fbc <Cl_bc_controller+0xd1c>)
   83eca:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83ecc:	7bfb      	ldrb	r3, [r7, #15]
   83ece:	2b00      	cmp	r3, #0
   83ed0:	d110      	bne.n	83ef4 <Cl_bc_controller+0xc54>
								{
									bc_laststate = bc_state;
   83ed2:	4b3b      	ldr	r3, [pc, #236]	; (83fc0 <Cl_bc_controller+0xd20>)
   83ed4:	781a      	ldrb	r2, [r3, #0]
   83ed6:	4b3b      	ldr	r3, [pc, #236]	; (83fc4 <Cl_bc_controller+0xd24>)
   83ed8:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83eda:	4b2c      	ldr	r3, [pc, #176]	; (83f8c <Cl_bc_controller+0xcec>)
   83edc:	2200      	movs	r2, #0
   83ede:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83ee0:	4b37      	ldr	r3, [pc, #220]	; (83fc0 <Cl_bc_controller+0xd20>)
   83ee2:	220c      	movs	r2, #12
   83ee4:	701a      	strb	r2, [r3, #0]
								}
								break;
   83ee6:	e005      	b.n	83ef4 <Cl_bc_controller+0xc54>
								default:break;
   83ee8:	bf00      	nop
   83eea:	e04a      	b.n	83f82 <Cl_bc_controller+0xce2>
										sv_cntrl_deactivate_valve(VALVE_ID4);
										sv_cntrl_deactivate_valve(VALVE_ID20);
										sv_cntrl_deactivate_valve(VALVE_ID19);
										
									}
								break;
   83eec:	bf00      	nop
   83eee:	e048      	b.n	83f82 <Cl_bc_controller+0xce2>
// 										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
										
									}
								
								break;
   83ef0:	bf00      	nop
   83ef2:	e046      	b.n	83f82 <Cl_bc_controller+0xce2>
								{
									bc_laststate = bc_state;
									fill_time = 0;
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
								}
								break;
   83ef4:	bf00      	nop
								default:break;
							}
			break;
   83ef6:	e044      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83ef8:	79fb      	ldrb	r3, [r7, #7]
   83efa:	2b04      	cmp	r3, #4
   83efc:	d00b      	beq.n	83f16 <Cl_bc_controller+0xc76>
   83efe:	2b07      	cmp	r3, #7
   83f00:	d000      	beq.n	83f04 <Cl_bc_controller+0xc64>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83f02:	e01a      	b.n	83f3a <Cl_bc_controller+0xc9a>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83f04:	2005      	movs	r0, #5
   83f06:	4b28      	ldr	r3, [pc, #160]	; (83fa8 <Cl_bc_controller+0xd08>)
   83f08:	4798      	blx	r3
   83f0a:	4603      	mov	r3, r0
   83f0c:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83f0e:	4b2c      	ldr	r3, [pc, #176]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f10:	2211      	movs	r2, #17
   83f12:	701a      	strb	r2, [r3, #0]
								break;
   83f14:	e011      	b.n	83f3a <Cl_bc_controller+0xc9a>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f16:	2007      	movs	r0, #7
   83f18:	4b23      	ldr	r3, [pc, #140]	; (83fa8 <Cl_bc_controller+0xd08>)
   83f1a:	4798      	blx	r3
   83f1c:	4603      	mov	r3, r0
   83f1e:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f20:	4b27      	ldr	r3, [pc, #156]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f22:	781a      	ldrb	r2, [r3, #0]
   83f24:	4b27      	ldr	r3, [pc, #156]	; (83fc4 <Cl_bc_controller+0xd24>)
   83f26:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83f28:	4b25      	ldr	r3, [pc, #148]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f2a:	2202      	movs	r2, #2
   83f2c:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f2e:	2013      	movs	r0, #19
   83f30:	4b1a      	ldr	r3, [pc, #104]	; (83f9c <Cl_bc_controller+0xcfc>)
   83f32:	4798      	blx	r3
   83f34:	4603      	mov	r3, r0
   83f36:	73fb      	strb	r3, [r7, #15]
								break;
   83f38:	bf00      	nop
								default:break;
						
							}
						
			break;
   83f3a:	e022      	b.n	83f82 <Cl_bc_controller+0xce2>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83f3c:	79fb      	ldrb	r3, [r7, #7]
   83f3e:	2b04      	cmp	r3, #4
   83f40:	d00b      	beq.n	83f5a <Cl_bc_controller+0xcba>
   83f42:	2b09      	cmp	r3, #9
   83f44:	d000      	beq.n	83f48 <Cl_bc_controller+0xca8>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83f46:	e01a      	b.n	83f7e <Cl_bc_controller+0xcde>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83f48:	2006      	movs	r0, #6
   83f4a:	4b17      	ldr	r3, [pc, #92]	; (83fa8 <Cl_bc_controller+0xd08>)
   83f4c:	4798      	blx	r3
   83f4e:	4603      	mov	r3, r0
   83f50:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83f52:	4b1b      	ldr	r3, [pc, #108]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f54:	2213      	movs	r2, #19
   83f56:	701a      	strb	r2, [r3, #0]
								break;
   83f58:	e011      	b.n	83f7e <Cl_bc_controller+0xcde>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f5a:	2007      	movs	r0, #7
   83f5c:	4b12      	ldr	r3, [pc, #72]	; (83fa8 <Cl_bc_controller+0xd08>)
   83f5e:	4798      	blx	r3
   83f60:	4603      	mov	r3, r0
   83f62:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f64:	4b16      	ldr	r3, [pc, #88]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f66:	781a      	ldrb	r2, [r3, #0]
   83f68:	4b16      	ldr	r3, [pc, #88]	; (83fc4 <Cl_bc_controller+0xd24>)
   83f6a:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f6c:	2013      	movs	r0, #19
   83f6e:	4b0b      	ldr	r3, [pc, #44]	; (83f9c <Cl_bc_controller+0xcfc>)
   83f70:	4798      	blx	r3
   83f72:	4603      	mov	r3, r0
   83f74:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83f76:	4b12      	ldr	r3, [pc, #72]	; (83fc0 <Cl_bc_controller+0xd20>)
   83f78:	2202      	movs	r2, #2
   83f7a:	701a      	strb	r2, [r3, #0]
								break;
   83f7c:	bf00      	nop
								default:break;
								
							}
			break;
   83f7e:	e000      	b.n	83f82 <Cl_bc_controller+0xce2>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83f80:	bf00      	nop
	}

	
	return 0;
   83f82:	2300      	movs	r3, #0
}
   83f84:	4618      	mov	r0, r3
   83f86:	3710      	adds	r7, #16
   83f88:	46bd      	mov	sp, r7
   83f8a:	bd80      	pop	{r7, pc}
   83f8c:	2007176a 	.word	0x2007176a
   83f90:	20071760 	.word	0x20071760
   83f94:	0008302d 	.word	0x0008302d
   83f98:	00099d15 	.word	0x00099d15
   83f9c:	00099aa9 	.word	0x00099aa9
   83fa0:	00093009 	.word	0x00093009
   83fa4:	00099ac9 	.word	0x00099ac9
   83fa8:	00099c99 	.word	0x00099c99
   83fac:	20071768 	.word	0x20071768
   83fb0:	2007176c 	.word	0x2007176c
   83fb4:	0009b805 	.word	0x0009b805
   83fb8:	20071770 	.word	0x20071770
   83fbc:	20071764 	.word	0x20071764
   83fc0:	20071751 	.word	0x20071751
   83fc4:	20071752 	.word	0x20071752

00083fc8 <hep_calibration>:

//*************************************************** till this************


Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
   83fc8:	b480      	push	{r7}
   83fca:	b085      	sub	sp, #20
   83fcc:	af00      	add	r7, sp, #0
   83fce:	6078      	str	r0, [r7, #4]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   83fd0:	2300      	movs	r3, #0
   83fd2:	60fb      	str	r3, [r7, #12]
   83fd4:	e061      	b.n	8409a <hep_calibration+0xd2>
	{
		if (inpt_ml == hp[i].ml)
   83fd6:	4a35      	ldr	r2, [pc, #212]	; (840ac <hep_calibration+0xe4>)
   83fd8:	68fb      	ldr	r3, [r7, #12]
   83fda:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   83fde:	b29b      	uxth	r3, r3
   83fe0:	461a      	mov	r2, r3
   83fe2:	687b      	ldr	r3, [r7, #4]
   83fe4:	429a      	cmp	r2, r3
   83fe6:	d10b      	bne.n	84000 <hep_calibration+0x38>
		{
			hep_speed=hp[i].speed;
   83fe8:	4a30      	ldr	r2, [pc, #192]	; (840ac <hep_calibration+0xe4>)
   83fea:	68fb      	ldr	r3, [r7, #12]
   83fec:	009b      	lsls	r3, r3, #2
   83fee:	4413      	add	r3, r2
   83ff0:	885b      	ldrh	r3, [r3, #2]
   83ff2:	b29b      	uxth	r3, r3
   83ff4:	461a      	mov	r2, r3
   83ff6:	4b2e      	ldr	r3, [pc, #184]	; (840b0 <hep_calibration+0xe8>)
   83ff8:	601a      	str	r2, [r3, #0]
			return hep_speed;
   83ffa:	4b2d      	ldr	r3, [pc, #180]	; (840b0 <hep_calibration+0xe8>)
   83ffc:	681b      	ldr	r3, [r3, #0]
   83ffe:	e04f      	b.n	840a0 <hep_calibration+0xd8>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   84000:	4a2a      	ldr	r2, [pc, #168]	; (840ac <hep_calibration+0xe4>)
   84002:	68fb      	ldr	r3, [r7, #12]
   84004:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84008:	b29b      	uxth	r3, r3
   8400a:	461a      	mov	r2, r3
   8400c:	687b      	ldr	r3, [r7, #4]
   8400e:	429a      	cmp	r2, r3
   84010:	d240      	bcs.n	84094 <hep_calibration+0xcc>
   84012:	68fb      	ldr	r3, [r7, #12]
   84014:	3301      	adds	r3, #1
   84016:	4a25      	ldr	r2, [pc, #148]	; (840ac <hep_calibration+0xe4>)
   84018:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8401c:	b29b      	uxth	r3, r3
   8401e:	461a      	mov	r2, r3
   84020:	687b      	ldr	r3, [r7, #4]
   84022:	429a      	cmp	r2, r3
   84024:	d936      	bls.n	84094 <hep_calibration+0xcc>
		{
			slope = ((hp[i+1].ml-hp[i].ml)/(hp[i+1].speed-hp[i].speed));
   84026:	68fb      	ldr	r3, [r7, #12]
   84028:	3301      	adds	r3, #1
   8402a:	4a20      	ldr	r2, [pc, #128]	; (840ac <hep_calibration+0xe4>)
   8402c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84030:	b29b      	uxth	r3, r3
   84032:	4619      	mov	r1, r3
   84034:	4a1d      	ldr	r2, [pc, #116]	; (840ac <hep_calibration+0xe4>)
   84036:	68fb      	ldr	r3, [r7, #12]
   84038:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8403c:	b29b      	uxth	r3, r3
   8403e:	1aca      	subs	r2, r1, r3
   84040:	68fb      	ldr	r3, [r7, #12]
   84042:	3301      	adds	r3, #1
   84044:	4919      	ldr	r1, [pc, #100]	; (840ac <hep_calibration+0xe4>)
   84046:	009b      	lsls	r3, r3, #2
   84048:	440b      	add	r3, r1
   8404a:	885b      	ldrh	r3, [r3, #2]
   8404c:	b29b      	uxth	r3, r3
   8404e:	4618      	mov	r0, r3
   84050:	4916      	ldr	r1, [pc, #88]	; (840ac <hep_calibration+0xe4>)
   84052:	68fb      	ldr	r3, [r7, #12]
   84054:	009b      	lsls	r3, r3, #2
   84056:	440b      	add	r3, r1
   84058:	885b      	ldrh	r3, [r3, #2]
   8405a:	b29b      	uxth	r3, r3
   8405c:	1ac3      	subs	r3, r0, r3
   8405e:	fb92 f3f3 	sdiv	r3, r2, r3
   84062:	817b      	strh	r3, [r7, #10]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   84064:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   84068:	4910      	ldr	r1, [pc, #64]	; (840ac <hep_calibration+0xe4>)
   8406a:	68fa      	ldr	r2, [r7, #12]
   8406c:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84070:	b292      	uxth	r2, r2
   84072:	4611      	mov	r1, r2
   84074:	687a      	ldr	r2, [r7, #4]
   84076:	1a52      	subs	r2, r2, r1
   84078:	fb02 f203 	mul.w	r2, r2, r3
   8407c:	490b      	ldr	r1, [pc, #44]	; (840ac <hep_calibration+0xe4>)
   8407e:	68fb      	ldr	r3, [r7, #12]
   84080:	009b      	lsls	r3, r3, #2
   84082:	440b      	add	r3, r1
   84084:	885b      	ldrh	r3, [r3, #2]
   84086:	b29b      	uxth	r3, r3
   84088:	4413      	add	r3, r2
   8408a:	4a09      	ldr	r2, [pc, #36]	; (840b0 <hep_calibration+0xe8>)
   8408c:	6013      	str	r3, [r2, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			return hep_speed;
   8408e:	4b08      	ldr	r3, [pc, #32]	; (840b0 <hep_calibration+0xe8>)
   84090:	681b      	ldr	r3, [r3, #0]
   84092:	e005      	b.n	840a0 <hep_calibration+0xd8>
Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84094:	68fb      	ldr	r3, [r7, #12]
   84096:	3301      	adds	r3, #1
   84098:	60fb      	str	r3, [r7, #12]
   8409a:	68fb      	ldr	r3, [r7, #12]
   8409c:	2b31      	cmp	r3, #49	; 0x31
   8409e:	dd9a      	ble.n	83fd6 <hep_calibration+0xe>
			return hep_speed;
			break;
		}
	}
	
}
   840a0:	4618      	mov	r0, r3
   840a2:	3714      	adds	r7, #20
   840a4:	46bd      	mov	sp, r7
   840a6:	bc80      	pop	{r7}
   840a8:	4770      	bx	lr
   840aa:	bf00      	nop
   840ac:	2007011c 	.word	0x2007011c
   840b0:	20072164 	.word	0x20072164

000840b4 <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   840b4:	b590      	push	{r4, r7, lr}
   840b6:	b085      	sub	sp, #20
   840b8:	af00      	add	r7, sp, #0
   840ba:	4603      	mov	r3, r0
   840bc:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   840be:	2300      	movs	r3, #0
   840c0:	60fb      	str	r3, [r7, #12]
   840c2:	e0a1      	b.n	84208 <calibration_apt+0x154>
	{
		if (sensordata == apt2[i].millivolt)
   840c4:	4a54      	ldr	r2, [pc, #336]	; (84218 <calibration_apt+0x164>)
   840c6:	68fb      	ldr	r3, [r7, #12]
   840c8:	009b      	lsls	r3, r3, #2
   840ca:	4413      	add	r3, r2
   840cc:	885b      	ldrh	r3, [r3, #2]
   840ce:	b21b      	sxth	r3, r3
   840d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840d4:	429a      	cmp	r2, r3
   840d6:	d10b      	bne.n	840f0 <calibration_apt+0x3c>
		{
			pressure_final_apt=apt2[i].pressure;
   840d8:	4a4f      	ldr	r2, [pc, #316]	; (84218 <calibration_apt+0x164>)
   840da:	68fb      	ldr	r3, [r7, #12]
   840dc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   840e0:	b21a      	sxth	r2, r3
   840e2:	4b4e      	ldr	r3, [pc, #312]	; (8421c <calibration_apt+0x168>)
   840e4:	4610      	mov	r0, r2
   840e6:	4798      	blx	r3
   840e8:	4602      	mov	r2, r0
   840ea:	4b4d      	ldr	r3, [pc, #308]	; (84220 <calibration_apt+0x16c>)
   840ec:	601a      	str	r2, [r3, #0]
   840ee:	e088      	b.n	84202 <calibration_apt+0x14e>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   840f0:	4a49      	ldr	r2, [pc, #292]	; (84218 <calibration_apt+0x164>)
   840f2:	68fb      	ldr	r3, [r7, #12]
   840f4:	009b      	lsls	r3, r3, #2
   840f6:	4413      	add	r3, r2
   840f8:	885b      	ldrh	r3, [r3, #2]
   840fa:	b21b      	sxth	r3, r3
   840fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84100:	429a      	cmp	r2, r3
   84102:	dd5b      	ble.n	841bc <calibration_apt+0x108>
   84104:	68fb      	ldr	r3, [r7, #12]
   84106:	3301      	adds	r3, #1
   84108:	4a43      	ldr	r2, [pc, #268]	; (84218 <calibration_apt+0x164>)
   8410a:	009b      	lsls	r3, r3, #2
   8410c:	4413      	add	r3, r2
   8410e:	885b      	ldrh	r3, [r3, #2]
   84110:	b21b      	sxth	r3, r3
   84112:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84116:	429a      	cmp	r2, r3
   84118:	da50      	bge.n	841bc <calibration_apt+0x108>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   8411a:	68fb      	ldr	r3, [r7, #12]
   8411c:	3301      	adds	r3, #1
   8411e:	4a3e      	ldr	r2, [pc, #248]	; (84218 <calibration_apt+0x164>)
   84120:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84124:	b21b      	sxth	r3, r3
   84126:	4619      	mov	r1, r3
   84128:	4a3b      	ldr	r2, [pc, #236]	; (84218 <calibration_apt+0x164>)
   8412a:	68fb      	ldr	r3, [r7, #12]
   8412c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84130:	b21b      	sxth	r3, r3
   84132:	1acb      	subs	r3, r1, r3
   84134:	2264      	movs	r2, #100	; 0x64
   84136:	fb02 f203 	mul.w	r2, r2, r3
   8413a:	68fb      	ldr	r3, [r7, #12]
   8413c:	3301      	adds	r3, #1
   8413e:	4936      	ldr	r1, [pc, #216]	; (84218 <calibration_apt+0x164>)
   84140:	009b      	lsls	r3, r3, #2
   84142:	440b      	add	r3, r1
   84144:	885b      	ldrh	r3, [r3, #2]
   84146:	b21b      	sxth	r3, r3
   84148:	4618      	mov	r0, r3
   8414a:	4933      	ldr	r1, [pc, #204]	; (84218 <calibration_apt+0x164>)
   8414c:	68fb      	ldr	r3, [r7, #12]
   8414e:	009b      	lsls	r3, r3, #2
   84150:	440b      	add	r3, r1
   84152:	885b      	ldrh	r3, [r3, #2]
   84154:	b21b      	sxth	r3, r3
   84156:	1ac3      	subs	r3, r0, r3
   84158:	fb92 f2f3 	sdiv	r2, r2, r3
   8415c:	4b2f      	ldr	r3, [pc, #188]	; (8421c <calibration_apt+0x168>)
   8415e:	4610      	mov	r0, r2
   84160:	4798      	blx	r3
   84162:	4603      	mov	r3, r0
   84164:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   84166:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8416a:	492b      	ldr	r1, [pc, #172]	; (84218 <calibration_apt+0x164>)
   8416c:	68fb      	ldr	r3, [r7, #12]
   8416e:	009b      	lsls	r3, r3, #2
   84170:	440b      	add	r3, r1
   84172:	885b      	ldrh	r3, [r3, #2]
   84174:	b21b      	sxth	r3, r3
   84176:	1ad2      	subs	r2, r2, r3
   84178:	4b28      	ldr	r3, [pc, #160]	; (8421c <calibration_apt+0x168>)
   8417a:	4610      	mov	r0, r2
   8417c:	4798      	blx	r3
   8417e:	4602      	mov	r2, r0
   84180:	4b28      	ldr	r3, [pc, #160]	; (84224 <calibration_apt+0x170>)
   84182:	68b9      	ldr	r1, [r7, #8]
   84184:	4610      	mov	r0, r2
   84186:	4798      	blx	r3
   84188:	4603      	mov	r3, r0
   8418a:	461a      	mov	r2, r3
   8418c:	4b26      	ldr	r3, [pc, #152]	; (84228 <calibration_apt+0x174>)
   8418e:	4927      	ldr	r1, [pc, #156]	; (8422c <calibration_apt+0x178>)
   84190:	4610      	mov	r0, r2
   84192:	4798      	blx	r3
   84194:	4603      	mov	r3, r0
   84196:	461c      	mov	r4, r3
   84198:	4a1f      	ldr	r2, [pc, #124]	; (84218 <calibration_apt+0x164>)
   8419a:	68fb      	ldr	r3, [r7, #12]
   8419c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841a0:	b21a      	sxth	r2, r3
   841a2:	4b1e      	ldr	r3, [pc, #120]	; (8421c <calibration_apt+0x168>)
   841a4:	4610      	mov	r0, r2
   841a6:	4798      	blx	r3
   841a8:	4602      	mov	r2, r0
   841aa:	4b21      	ldr	r3, [pc, #132]	; (84230 <calibration_apt+0x17c>)
   841ac:	4611      	mov	r1, r2
   841ae:	4620      	mov	r0, r4
   841b0:	4798      	blx	r3
   841b2:	4603      	mov	r3, r0
   841b4:	461a      	mov	r2, r3
   841b6:	4b1a      	ldr	r3, [pc, #104]	; (84220 <calibration_apt+0x16c>)
   841b8:	601a      	str	r2, [r3, #0]
   841ba:	e022      	b.n	84202 <calibration_apt+0x14e>
		}
		else if(sensordata < apt2[0].millivolt)
   841bc:	4b16      	ldr	r3, [pc, #88]	; (84218 <calibration_apt+0x164>)
   841be:	885b      	ldrh	r3, [r3, #2]
   841c0:	b21b      	sxth	r3, r3
   841c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841c6:	429a      	cmp	r2, r3
   841c8:	da09      	bge.n	841de <calibration_apt+0x12a>
		{
			pressure_final_apt = apt2[0].pressure;
   841ca:	4b13      	ldr	r3, [pc, #76]	; (84218 <calibration_apt+0x164>)
   841cc:	881b      	ldrh	r3, [r3, #0]
   841ce:	b21a      	sxth	r2, r3
   841d0:	4b12      	ldr	r3, [pc, #72]	; (8421c <calibration_apt+0x168>)
   841d2:	4610      	mov	r0, r2
   841d4:	4798      	blx	r3
   841d6:	4602      	mov	r2, r0
   841d8:	4b11      	ldr	r3, [pc, #68]	; (84220 <calibration_apt+0x16c>)
   841da:	601a      	str	r2, [r3, #0]
   841dc:	e011      	b.n	84202 <calibration_apt+0x14e>
		}
		else  if(sensordata > apt2[25].millivolt)
   841de:	4b0e      	ldr	r3, [pc, #56]	; (84218 <calibration_apt+0x164>)
   841e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   841e4:	b21b      	sxth	r3, r3
   841e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841ea:	429a      	cmp	r2, r3
   841ec:	dd09      	ble.n	84202 <calibration_apt+0x14e>
		{
			pressure_final_apt = apt2[25].pressure;
   841ee:	4b0a      	ldr	r3, [pc, #40]	; (84218 <calibration_apt+0x164>)
   841f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   841f4:	b21a      	sxth	r2, r3
   841f6:	4b09      	ldr	r3, [pc, #36]	; (8421c <calibration_apt+0x168>)
   841f8:	4610      	mov	r0, r2
   841fa:	4798      	blx	r3
   841fc:	4602      	mov	r2, r0
   841fe:	4b08      	ldr	r3, [pc, #32]	; (84220 <calibration_apt+0x16c>)
   84200:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   84202:	68fb      	ldr	r3, [r7, #12]
   84204:	3301      	adds	r3, #1
   84206:	60fb      	str	r3, [r7, #12]
   84208:	68fb      	ldr	r3, [r7, #12]
   8420a:	2b19      	cmp	r3, #25
   8420c:	f77f af5a 	ble.w	840c4 <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   84210:	bf00      	nop
   84212:	3714      	adds	r7, #20
   84214:	46bd      	mov	sp, r7
   84216:	bd90      	pop	{r4, r7, pc}
   84218:	200701e4 	.word	0x200701e4
   8421c:	000a64e9 	.word	0x000a64e9
   84220:	20072160 	.word	0x20072160
   84224:	000a6591 	.word	0x000a6591
   84228:	000a66f9 	.word	0x000a66f9
   8422c:	42c80000 	.word	0x42c80000
   84230:	000a6381 	.word	0x000a6381

00084234 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   84234:	b590      	push	{r4, r7, lr}
   84236:	b085      	sub	sp, #20
   84238:	af00      	add	r7, sp, #0
   8423a:	4603      	mov	r3, r0
   8423c:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8423e:	2300      	movs	r3, #0
   84240:	60fb      	str	r3, [r7, #12]
   84242:	e0a1      	b.n	84388 <calibration_vpt+0x154>
	{
		if (sensordata == vpt2[i].millivolt)
   84244:	4a54      	ldr	r2, [pc, #336]	; (84398 <calibration_vpt+0x164>)
   84246:	68fb      	ldr	r3, [r7, #12]
   84248:	009b      	lsls	r3, r3, #2
   8424a:	4413      	add	r3, r2
   8424c:	885b      	ldrh	r3, [r3, #2]
   8424e:	b21b      	sxth	r3, r3
   84250:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84254:	429a      	cmp	r2, r3
   84256:	d10b      	bne.n	84270 <calibration_vpt+0x3c>
		{
			pressure_final_vpt=vpt2[i].pressure;
   84258:	4a4f      	ldr	r2, [pc, #316]	; (84398 <calibration_vpt+0x164>)
   8425a:	68fb      	ldr	r3, [r7, #12]
   8425c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84260:	b21a      	sxth	r2, r3
   84262:	4b4e      	ldr	r3, [pc, #312]	; (8439c <calibration_vpt+0x168>)
   84264:	4610      	mov	r0, r2
   84266:	4798      	blx	r3
   84268:	4602      	mov	r2, r0
   8426a:	4b4d      	ldr	r3, [pc, #308]	; (843a0 <calibration_vpt+0x16c>)
   8426c:	601a      	str	r2, [r3, #0]
			break;
   8426e:	e08f      	b.n	84390 <calibration_vpt+0x15c>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   84270:	4a49      	ldr	r2, [pc, #292]	; (84398 <calibration_vpt+0x164>)
   84272:	68fb      	ldr	r3, [r7, #12]
   84274:	009b      	lsls	r3, r3, #2
   84276:	4413      	add	r3, r2
   84278:	885b      	ldrh	r3, [r3, #2]
   8427a:	b21b      	sxth	r3, r3
   8427c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84280:	429a      	cmp	r2, r3
   84282:	dd5b      	ble.n	8433c <calibration_vpt+0x108>
   84284:	68fb      	ldr	r3, [r7, #12]
   84286:	3301      	adds	r3, #1
   84288:	4a43      	ldr	r2, [pc, #268]	; (84398 <calibration_vpt+0x164>)
   8428a:	009b      	lsls	r3, r3, #2
   8428c:	4413      	add	r3, r2
   8428e:	885b      	ldrh	r3, [r3, #2]
   84290:	b21b      	sxth	r3, r3
   84292:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84296:	429a      	cmp	r2, r3
   84298:	da50      	bge.n	8433c <calibration_vpt+0x108>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   8429a:	68fb      	ldr	r3, [r7, #12]
   8429c:	3301      	adds	r3, #1
   8429e:	4a3e      	ldr	r2, [pc, #248]	; (84398 <calibration_vpt+0x164>)
   842a0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842a4:	b21b      	sxth	r3, r3
   842a6:	4619      	mov	r1, r3
   842a8:	4a3b      	ldr	r2, [pc, #236]	; (84398 <calibration_vpt+0x164>)
   842aa:	68fb      	ldr	r3, [r7, #12]
   842ac:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842b0:	b21b      	sxth	r3, r3
   842b2:	1acb      	subs	r3, r1, r3
   842b4:	2264      	movs	r2, #100	; 0x64
   842b6:	fb02 f203 	mul.w	r2, r2, r3
   842ba:	68fb      	ldr	r3, [r7, #12]
   842bc:	3301      	adds	r3, #1
   842be:	4936      	ldr	r1, [pc, #216]	; (84398 <calibration_vpt+0x164>)
   842c0:	009b      	lsls	r3, r3, #2
   842c2:	440b      	add	r3, r1
   842c4:	885b      	ldrh	r3, [r3, #2]
   842c6:	b21b      	sxth	r3, r3
   842c8:	4618      	mov	r0, r3
   842ca:	4933      	ldr	r1, [pc, #204]	; (84398 <calibration_vpt+0x164>)
   842cc:	68fb      	ldr	r3, [r7, #12]
   842ce:	009b      	lsls	r3, r3, #2
   842d0:	440b      	add	r3, r1
   842d2:	885b      	ldrh	r3, [r3, #2]
   842d4:	b21b      	sxth	r3, r3
   842d6:	1ac3      	subs	r3, r0, r3
   842d8:	fb92 f2f3 	sdiv	r2, r2, r3
   842dc:	4b2f      	ldr	r3, [pc, #188]	; (8439c <calibration_vpt+0x168>)
   842de:	4610      	mov	r0, r2
   842e0:	4798      	blx	r3
   842e2:	4603      	mov	r3, r0
   842e4:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   842e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842ea:	492b      	ldr	r1, [pc, #172]	; (84398 <calibration_vpt+0x164>)
   842ec:	68fb      	ldr	r3, [r7, #12]
   842ee:	009b      	lsls	r3, r3, #2
   842f0:	440b      	add	r3, r1
   842f2:	885b      	ldrh	r3, [r3, #2]
   842f4:	b21b      	sxth	r3, r3
   842f6:	1ad2      	subs	r2, r2, r3
   842f8:	4b28      	ldr	r3, [pc, #160]	; (8439c <calibration_vpt+0x168>)
   842fa:	4610      	mov	r0, r2
   842fc:	4798      	blx	r3
   842fe:	4602      	mov	r2, r0
   84300:	4b28      	ldr	r3, [pc, #160]	; (843a4 <calibration_vpt+0x170>)
   84302:	68b9      	ldr	r1, [r7, #8]
   84304:	4610      	mov	r0, r2
   84306:	4798      	blx	r3
   84308:	4603      	mov	r3, r0
   8430a:	461a      	mov	r2, r3
   8430c:	4b26      	ldr	r3, [pc, #152]	; (843a8 <calibration_vpt+0x174>)
   8430e:	4927      	ldr	r1, [pc, #156]	; (843ac <calibration_vpt+0x178>)
   84310:	4610      	mov	r0, r2
   84312:	4798      	blx	r3
   84314:	4603      	mov	r3, r0
   84316:	461c      	mov	r4, r3
   84318:	4a1f      	ldr	r2, [pc, #124]	; (84398 <calibration_vpt+0x164>)
   8431a:	68fb      	ldr	r3, [r7, #12]
   8431c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84320:	b21a      	sxth	r2, r3
   84322:	4b1e      	ldr	r3, [pc, #120]	; (8439c <calibration_vpt+0x168>)
   84324:	4610      	mov	r0, r2
   84326:	4798      	blx	r3
   84328:	4602      	mov	r2, r0
   8432a:	4b21      	ldr	r3, [pc, #132]	; (843b0 <calibration_vpt+0x17c>)
   8432c:	4611      	mov	r1, r2
   8432e:	4620      	mov	r0, r4
   84330:	4798      	blx	r3
   84332:	4603      	mov	r3, r0
   84334:	461a      	mov	r2, r3
   84336:	4b1a      	ldr	r3, [pc, #104]	; (843a0 <calibration_vpt+0x16c>)
   84338:	601a      	str	r2, [r3, #0]
			break;
   8433a:	e029      	b.n	84390 <calibration_vpt+0x15c>
		}
		else if(sensordata < vpt2[0].millivolt)
   8433c:	4b16      	ldr	r3, [pc, #88]	; (84398 <calibration_vpt+0x164>)
   8433e:	885b      	ldrh	r3, [r3, #2]
   84340:	b21b      	sxth	r3, r3
   84342:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84346:	429a      	cmp	r2, r3
   84348:	da09      	bge.n	8435e <calibration_vpt+0x12a>
		{
			pressure_final_apt = vpt2[0].pressure;
   8434a:	4b13      	ldr	r3, [pc, #76]	; (84398 <calibration_vpt+0x164>)
   8434c:	881b      	ldrh	r3, [r3, #0]
   8434e:	b21a      	sxth	r2, r3
   84350:	4b12      	ldr	r3, [pc, #72]	; (8439c <calibration_vpt+0x168>)
   84352:	4610      	mov	r0, r2
   84354:	4798      	blx	r3
   84356:	4602      	mov	r2, r0
   84358:	4b16      	ldr	r3, [pc, #88]	; (843b4 <calibration_vpt+0x180>)
   8435a:	601a      	str	r2, [r3, #0]
   8435c:	e011      	b.n	84382 <calibration_vpt+0x14e>
		}
		else  if(sensordata > vpt2[25].millivolt)
   8435e:	4b0e      	ldr	r3, [pc, #56]	; (84398 <calibration_vpt+0x164>)
   84360:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   84364:	b21b      	sxth	r3, r3
   84366:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8436a:	429a      	cmp	r2, r3
   8436c:	dd09      	ble.n	84382 <calibration_vpt+0x14e>
		{
			pressure_final_apt = vpt2[25].pressure;
   8436e:	4b0a      	ldr	r3, [pc, #40]	; (84398 <calibration_vpt+0x164>)
   84370:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   84374:	b21a      	sxth	r2, r3
   84376:	4b09      	ldr	r3, [pc, #36]	; (8439c <calibration_vpt+0x168>)
   84378:	4610      	mov	r0, r2
   8437a:	4798      	blx	r3
   8437c:	4602      	mov	r2, r0
   8437e:	4b0d      	ldr	r3, [pc, #52]	; (843b4 <calibration_vpt+0x180>)
   84380:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   84382:	68fb      	ldr	r3, [r7, #12]
   84384:	3301      	adds	r3, #1
   84386:	60fb      	str	r3, [r7, #12]
   84388:	68fb      	ldr	r3, [r7, #12]
   8438a:	2b19      	cmp	r3, #25
   8438c:	f77f af5a 	ble.w	84244 <calibration_vpt+0x10>
		{
			pressure_final_apt = vpt2[25].pressure;
		}
	}
	
}
   84390:	bf00      	nop
   84392:	3714      	adds	r7, #20
   84394:	46bd      	mov	sp, r7
   84396:	bd90      	pop	{r4, r7, pc}
   84398:	2007024c 	.word	0x2007024c
   8439c:	000a64e9 	.word	0x000a64e9
   843a0:	20071774 	.word	0x20071774
   843a4:	000a6591 	.word	0x000a6591
   843a8:	000a66f9 	.word	0x000a66f9
   843ac:	42c80000 	.word	0x42c80000
   843b0:	000a6381 	.word	0x000a6381
   843b4:	20072160 	.word	0x20072160

000843b8 <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   843b8:	b580      	push	{r7, lr}
   843ba:	b084      	sub	sp, #16
   843bc:	af00      	add	r7, sp, #0
   843be:	4603      	mov	r3, r0
   843c0:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   843c2:	2300      	movs	r3, #0
   843c4:	60fb      	str	r3, [r7, #12]
   843c6:	e06f      	b.n	844a8 <calibration_ps1+0xf0>
	{
		if (sensordata == ps_1_2[i].millivolt)
   843c8:	4a3b      	ldr	r2, [pc, #236]	; (844b8 <calibration_ps1+0x100>)
   843ca:	68fb      	ldr	r3, [r7, #12]
   843cc:	009b      	lsls	r3, r3, #2
   843ce:	4413      	add	r3, r2
   843d0:	885b      	ldrh	r3, [r3, #2]
   843d2:	b21b      	sxth	r3, r3
   843d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843d8:	429a      	cmp	r2, r3
   843da:	d10b      	bne.n	843f4 <calibration_ps1+0x3c>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   843dc:	4a36      	ldr	r2, [pc, #216]	; (844b8 <calibration_ps1+0x100>)
   843de:	68fb      	ldr	r3, [r7, #12]
   843e0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   843e4:	b21a      	sxth	r2, r3
   843e6:	4b35      	ldr	r3, [pc, #212]	; (844bc <calibration_ps1+0x104>)
   843e8:	4610      	mov	r0, r2
   843ea:	4798      	blx	r3
   843ec:	4602      	mov	r2, r0
   843ee:	4b34      	ldr	r3, [pc, #208]	; (844c0 <calibration_ps1+0x108>)
   843f0:	601a      	str	r2, [r3, #0]
			break;
   843f2:	e05c      	b.n	844ae <calibration_ps1+0xf6>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   843f4:	4a30      	ldr	r2, [pc, #192]	; (844b8 <calibration_ps1+0x100>)
   843f6:	68fb      	ldr	r3, [r7, #12]
   843f8:	009b      	lsls	r3, r3, #2
   843fa:	4413      	add	r3, r2
   843fc:	885b      	ldrh	r3, [r3, #2]
   843fe:	b21b      	sxth	r3, r3
   84400:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84404:	429a      	cmp	r2, r3
   84406:	dd4c      	ble.n	844a2 <calibration_ps1+0xea>
   84408:	68fb      	ldr	r3, [r7, #12]
   8440a:	3301      	adds	r3, #1
   8440c:	4a2a      	ldr	r2, [pc, #168]	; (844b8 <calibration_ps1+0x100>)
   8440e:	009b      	lsls	r3, r3, #2
   84410:	4413      	add	r3, r2
   84412:	885b      	ldrh	r3, [r3, #2]
   84414:	b21b      	sxth	r3, r3
   84416:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8441a:	429a      	cmp	r2, r3
   8441c:	da41      	bge.n	844a2 <calibration_ps1+0xea>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   8441e:	68fb      	ldr	r3, [r7, #12]
   84420:	3301      	adds	r3, #1
   84422:	4a25      	ldr	r2, [pc, #148]	; (844b8 <calibration_ps1+0x100>)
   84424:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84428:	b21b      	sxth	r3, r3
   8442a:	4619      	mov	r1, r3
   8442c:	4a22      	ldr	r2, [pc, #136]	; (844b8 <calibration_ps1+0x100>)
   8442e:	68fb      	ldr	r3, [r7, #12]
   84430:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84434:	b21b      	sxth	r3, r3
   84436:	1acb      	subs	r3, r1, r3
   84438:	2264      	movs	r2, #100	; 0x64
   8443a:	fb02 f203 	mul.w	r2, r2, r3
   8443e:	68fb      	ldr	r3, [r7, #12]
   84440:	3301      	adds	r3, #1
   84442:	491d      	ldr	r1, [pc, #116]	; (844b8 <calibration_ps1+0x100>)
   84444:	009b      	lsls	r3, r3, #2
   84446:	440b      	add	r3, r1
   84448:	885b      	ldrh	r3, [r3, #2]
   8444a:	b21b      	sxth	r3, r3
   8444c:	4618      	mov	r0, r3
   8444e:	491a      	ldr	r1, [pc, #104]	; (844b8 <calibration_ps1+0x100>)
   84450:	68fb      	ldr	r3, [r7, #12]
   84452:	009b      	lsls	r3, r3, #2
   84454:	440b      	add	r3, r1
   84456:	885b      	ldrh	r3, [r3, #2]
   84458:	b21b      	sxth	r3, r3
   8445a:	1ac3      	subs	r3, r0, r3
   8445c:	fb92 f3f3 	sdiv	r3, r2, r3
   84460:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   84462:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84466:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   8446a:	4813      	ldr	r0, [pc, #76]	; (844b8 <calibration_ps1+0x100>)
   8446c:	68fb      	ldr	r3, [r7, #12]
   8446e:	009b      	lsls	r3, r3, #2
   84470:	4403      	add	r3, r0
   84472:	885b      	ldrh	r3, [r3, #2]
   84474:	b21b      	sxth	r3, r3
   84476:	1acb      	subs	r3, r1, r3
   84478:	fb03 f302 	mul.w	r3, r3, r2
   8447c:	4a11      	ldr	r2, [pc, #68]	; (844c4 <calibration_ps1+0x10c>)
   8447e:	fb82 1203 	smull	r1, r2, r2, r3
   84482:	1152      	asrs	r2, r2, #5
   84484:	17db      	asrs	r3, r3, #31
   84486:	1ad3      	subs	r3, r2, r3
   84488:	490b      	ldr	r1, [pc, #44]	; (844b8 <calibration_ps1+0x100>)
   8448a:	68fa      	ldr	r2, [r7, #12]
   8448c:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84490:	b212      	sxth	r2, r2
   84492:	441a      	add	r2, r3
   84494:	4b09      	ldr	r3, [pc, #36]	; (844bc <calibration_ps1+0x104>)
   84496:	4610      	mov	r0, r2
   84498:	4798      	blx	r3
   8449a:	4602      	mov	r2, r0
   8449c:	4b08      	ldr	r3, [pc, #32]	; (844c0 <calibration_ps1+0x108>)
   8449e:	601a      	str	r2, [r3, #0]
			break;
   844a0:	e005      	b.n	844ae <calibration_ps1+0xf6>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   844a2:	68fb      	ldr	r3, [r7, #12]
   844a4:	3301      	adds	r3, #1
   844a6:	60fb      	str	r3, [r7, #12]
   844a8:	68fb      	ldr	r3, [r7, #12]
   844aa:	2b1a      	cmp	r3, #26
   844ac:	dd8c      	ble.n	843c8 <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   844ae:	bf00      	nop
   844b0:	3710      	adds	r7, #16
   844b2:	46bd      	mov	sp, r7
   844b4:	bd80      	pop	{r7, pc}
   844b6:	bf00      	nop
   844b8:	200702ec 	.word	0x200702ec
   844bc:	000a64e9 	.word	0x000a64e9
   844c0:	20071778 	.word	0x20071778
   844c4:	51eb851f 	.word	0x51eb851f

000844c8 <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   844c8:	b580      	push	{r7, lr}
   844ca:	b084      	sub	sp, #16
   844cc:	af00      	add	r7, sp, #0
   844ce:	4603      	mov	r3, r0
   844d0:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   844d2:	2300      	movs	r3, #0
   844d4:	60fb      	str	r3, [r7, #12]
   844d6:	e06f      	b.n	845b8 <calibration_ps2+0xf0>
	{
		if (sensordata == ps_2_2[i].millivolt)
   844d8:	4a3b      	ldr	r2, [pc, #236]	; (845c8 <calibration_ps2+0x100>)
   844da:	68fb      	ldr	r3, [r7, #12]
   844dc:	009b      	lsls	r3, r3, #2
   844de:	4413      	add	r3, r2
   844e0:	885b      	ldrh	r3, [r3, #2]
   844e2:	b21b      	sxth	r3, r3
   844e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   844e8:	429a      	cmp	r2, r3
   844ea:	d10b      	bne.n	84504 <calibration_ps2+0x3c>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   844ec:	4a36      	ldr	r2, [pc, #216]	; (845c8 <calibration_ps2+0x100>)
   844ee:	68fb      	ldr	r3, [r7, #12]
   844f0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   844f4:	b21a      	sxth	r2, r3
   844f6:	4b35      	ldr	r3, [pc, #212]	; (845cc <calibration_ps2+0x104>)
   844f8:	4610      	mov	r0, r2
   844fa:	4798      	blx	r3
   844fc:	4602      	mov	r2, r0
   844fe:	4b34      	ldr	r3, [pc, #208]	; (845d0 <calibration_ps2+0x108>)
   84500:	601a      	str	r2, [r3, #0]
			break;
   84502:	e05c      	b.n	845be <calibration_ps2+0xf6>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   84504:	4a30      	ldr	r2, [pc, #192]	; (845c8 <calibration_ps2+0x100>)
   84506:	68fb      	ldr	r3, [r7, #12]
   84508:	009b      	lsls	r3, r3, #2
   8450a:	4413      	add	r3, r2
   8450c:	885b      	ldrh	r3, [r3, #2]
   8450e:	b21b      	sxth	r3, r3
   84510:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84514:	429a      	cmp	r2, r3
   84516:	dd4c      	ble.n	845b2 <calibration_ps2+0xea>
   84518:	68fb      	ldr	r3, [r7, #12]
   8451a:	3301      	adds	r3, #1
   8451c:	4a2a      	ldr	r2, [pc, #168]	; (845c8 <calibration_ps2+0x100>)
   8451e:	009b      	lsls	r3, r3, #2
   84520:	4413      	add	r3, r2
   84522:	885b      	ldrh	r3, [r3, #2]
   84524:	b21b      	sxth	r3, r3
   84526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8452a:	429a      	cmp	r2, r3
   8452c:	da41      	bge.n	845b2 <calibration_ps2+0xea>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   8452e:	68fb      	ldr	r3, [r7, #12]
   84530:	3301      	adds	r3, #1
   84532:	4a25      	ldr	r2, [pc, #148]	; (845c8 <calibration_ps2+0x100>)
   84534:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84538:	b21b      	sxth	r3, r3
   8453a:	4619      	mov	r1, r3
   8453c:	4a22      	ldr	r2, [pc, #136]	; (845c8 <calibration_ps2+0x100>)
   8453e:	68fb      	ldr	r3, [r7, #12]
   84540:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84544:	b21b      	sxth	r3, r3
   84546:	1acb      	subs	r3, r1, r3
   84548:	2264      	movs	r2, #100	; 0x64
   8454a:	fb02 f203 	mul.w	r2, r2, r3
   8454e:	68fb      	ldr	r3, [r7, #12]
   84550:	3301      	adds	r3, #1
   84552:	491d      	ldr	r1, [pc, #116]	; (845c8 <calibration_ps2+0x100>)
   84554:	009b      	lsls	r3, r3, #2
   84556:	440b      	add	r3, r1
   84558:	885b      	ldrh	r3, [r3, #2]
   8455a:	b21b      	sxth	r3, r3
   8455c:	4618      	mov	r0, r3
   8455e:	491a      	ldr	r1, [pc, #104]	; (845c8 <calibration_ps2+0x100>)
   84560:	68fb      	ldr	r3, [r7, #12]
   84562:	009b      	lsls	r3, r3, #2
   84564:	440b      	add	r3, r1
   84566:	885b      	ldrh	r3, [r3, #2]
   84568:	b21b      	sxth	r3, r3
   8456a:	1ac3      	subs	r3, r0, r3
   8456c:	fb92 f3f3 	sdiv	r3, r2, r3
   84570:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   84572:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84576:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   8457a:	4813      	ldr	r0, [pc, #76]	; (845c8 <calibration_ps2+0x100>)
   8457c:	68fb      	ldr	r3, [r7, #12]
   8457e:	009b      	lsls	r3, r3, #2
   84580:	4403      	add	r3, r0
   84582:	885b      	ldrh	r3, [r3, #2]
   84584:	b21b      	sxth	r3, r3
   84586:	1acb      	subs	r3, r1, r3
   84588:	fb03 f302 	mul.w	r3, r3, r2
   8458c:	4a11      	ldr	r2, [pc, #68]	; (845d4 <calibration_ps2+0x10c>)
   8458e:	fb82 1203 	smull	r1, r2, r2, r3
   84592:	1152      	asrs	r2, r2, #5
   84594:	17db      	asrs	r3, r3, #31
   84596:	1ad3      	subs	r3, r2, r3
   84598:	490b      	ldr	r1, [pc, #44]	; (845c8 <calibration_ps2+0x100>)
   8459a:	68fa      	ldr	r2, [r7, #12]
   8459c:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   845a0:	b212      	sxth	r2, r2
   845a2:	441a      	add	r2, r3
   845a4:	4b09      	ldr	r3, [pc, #36]	; (845cc <calibration_ps2+0x104>)
   845a6:	4610      	mov	r0, r2
   845a8:	4798      	blx	r3
   845aa:	4602      	mov	r2, r0
   845ac:	4b08      	ldr	r3, [pc, #32]	; (845d0 <calibration_ps2+0x108>)
   845ae:	601a      	str	r2, [r3, #0]
			break;
   845b0:	e005      	b.n	845be <calibration_ps2+0xf6>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   845b2:	68fb      	ldr	r3, [r7, #12]
   845b4:	3301      	adds	r3, #1
   845b6:	60fb      	str	r3, [r7, #12]
   845b8:	68fb      	ldr	r3, [r7, #12]
   845ba:	2b1a      	cmp	r3, #26
   845bc:	dd8c      	ble.n	844d8 <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   845be:	bf00      	nop
   845c0:	3710      	adds	r7, #16
   845c2:	46bd      	mov	sp, r7
   845c4:	bd80      	pop	{r7, pc}
   845c6:	bf00      	nop
   845c8:	20070358 	.word	0x20070358
   845cc:	000a64e9 	.word	0x000a64e9
   845d0:	2007177c 	.word	0x2007177c
   845d4:	51eb851f 	.word	0x51eb851f

000845d8 <calibration_ps3>:
void calibration_ps3(int16_t sensordata)
{
   845d8:	b580      	push	{r7, lr}
   845da:	b084      	sub	sp, #16
   845dc:	af00      	add	r7, sp, #0
   845de:	4603      	mov	r3, r0
   845e0:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   845e2:	2300      	movs	r3, #0
   845e4:	60fb      	str	r3, [r7, #12]
   845e6:	e06f      	b.n	846c8 <calibration_ps3+0xf0>
	{
		if (sensordata == ps_3_2[i].millivolt)
   845e8:	4a3b      	ldr	r2, [pc, #236]	; (846d8 <calibration_ps3+0x100>)
   845ea:	68fb      	ldr	r3, [r7, #12]
   845ec:	009b      	lsls	r3, r3, #2
   845ee:	4413      	add	r3, r2
   845f0:	885b      	ldrh	r3, [r3, #2]
   845f2:	b21b      	sxth	r3, r3
   845f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   845f8:	429a      	cmp	r2, r3
   845fa:	d10b      	bne.n	84614 <calibration_ps3+0x3c>
		{
			pressure_final_ps3=ps_3_2[i].pressure;
   845fc:	4a36      	ldr	r2, [pc, #216]	; (846d8 <calibration_ps3+0x100>)
   845fe:	68fb      	ldr	r3, [r7, #12]
   84600:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84604:	b21a      	sxth	r2, r3
   84606:	4b35      	ldr	r3, [pc, #212]	; (846dc <calibration_ps3+0x104>)
   84608:	4610      	mov	r0, r2
   8460a:	4798      	blx	r3
   8460c:	4602      	mov	r2, r0
   8460e:	4b34      	ldr	r3, [pc, #208]	; (846e0 <calibration_ps3+0x108>)
   84610:	601a      	str	r2, [r3, #0]
			break;
   84612:	e05c      	b.n	846ce <calibration_ps3+0xf6>
		}
		else if ((sensordata > ps_3_2[i].millivolt) && (sensordata < ps_3_2[i+1].millivolt))
   84614:	4a30      	ldr	r2, [pc, #192]	; (846d8 <calibration_ps3+0x100>)
   84616:	68fb      	ldr	r3, [r7, #12]
   84618:	009b      	lsls	r3, r3, #2
   8461a:	4413      	add	r3, r2
   8461c:	885b      	ldrh	r3, [r3, #2]
   8461e:	b21b      	sxth	r3, r3
   84620:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84624:	429a      	cmp	r2, r3
   84626:	dd4c      	ble.n	846c2 <calibration_ps3+0xea>
   84628:	68fb      	ldr	r3, [r7, #12]
   8462a:	3301      	adds	r3, #1
   8462c:	4a2a      	ldr	r2, [pc, #168]	; (846d8 <calibration_ps3+0x100>)
   8462e:	009b      	lsls	r3, r3, #2
   84630:	4413      	add	r3, r2
   84632:	885b      	ldrh	r3, [r3, #2]
   84634:	b21b      	sxth	r3, r3
   84636:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8463a:	429a      	cmp	r2, r3
   8463c:	da41      	bge.n	846c2 <calibration_ps3+0xea>
		{
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
   8463e:	68fb      	ldr	r3, [r7, #12]
   84640:	3301      	adds	r3, #1
   84642:	4a25      	ldr	r2, [pc, #148]	; (846d8 <calibration_ps3+0x100>)
   84644:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84648:	b21b      	sxth	r3, r3
   8464a:	4619      	mov	r1, r3
   8464c:	4a22      	ldr	r2, [pc, #136]	; (846d8 <calibration_ps3+0x100>)
   8464e:	68fb      	ldr	r3, [r7, #12]
   84650:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84654:	b21b      	sxth	r3, r3
   84656:	1acb      	subs	r3, r1, r3
   84658:	2264      	movs	r2, #100	; 0x64
   8465a:	fb02 f203 	mul.w	r2, r2, r3
   8465e:	68fb      	ldr	r3, [r7, #12]
   84660:	3301      	adds	r3, #1
   84662:	491d      	ldr	r1, [pc, #116]	; (846d8 <calibration_ps3+0x100>)
   84664:	009b      	lsls	r3, r3, #2
   84666:	440b      	add	r3, r1
   84668:	885b      	ldrh	r3, [r3, #2]
   8466a:	b21b      	sxth	r3, r3
   8466c:	4618      	mov	r0, r3
   8466e:	491a      	ldr	r1, [pc, #104]	; (846d8 <calibration_ps3+0x100>)
   84670:	68fb      	ldr	r3, [r7, #12]
   84672:	009b      	lsls	r3, r3, #2
   84674:	440b      	add	r3, r1
   84676:	885b      	ldrh	r3, [r3, #2]
   84678:	b21b      	sxth	r3, r3
   8467a:	1ac3      	subs	r3, r0, r3
   8467c:	fb92 f3f3 	sdiv	r3, r2, r3
   84680:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
   84682:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   84686:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   8468a:	4813      	ldr	r0, [pc, #76]	; (846d8 <calibration_ps3+0x100>)
   8468c:	68fb      	ldr	r3, [r7, #12]
   8468e:	009b      	lsls	r3, r3, #2
   84690:	4403      	add	r3, r0
   84692:	885b      	ldrh	r3, [r3, #2]
   84694:	b21b      	sxth	r3, r3
   84696:	1acb      	subs	r3, r1, r3
   84698:	fb03 f302 	mul.w	r3, r3, r2
   8469c:	4a11      	ldr	r2, [pc, #68]	; (846e4 <calibration_ps3+0x10c>)
   8469e:	fb82 1203 	smull	r1, r2, r2, r3
   846a2:	1152      	asrs	r2, r2, #5
   846a4:	17db      	asrs	r3, r3, #31
   846a6:	1ad3      	subs	r3, r2, r3
   846a8:	490f      	ldr	r1, [pc, #60]	; (846e8 <calibration_ps3+0x110>)
   846aa:	68fa      	ldr	r2, [r7, #12]
   846ac:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   846b0:	b212      	sxth	r2, r2
   846b2:	441a      	add	r2, r3
   846b4:	4b09      	ldr	r3, [pc, #36]	; (846dc <calibration_ps3+0x104>)
   846b6:	4610      	mov	r0, r2
   846b8:	4798      	blx	r3
   846ba:	4602      	mov	r2, r0
   846bc:	4b08      	ldr	r3, [pc, #32]	; (846e0 <calibration_ps3+0x108>)
   846be:	601a      	str	r2, [r3, #0]
			break;
   846c0:	e005      	b.n	846ce <calibration_ps3+0xf6>
void calibration_ps3(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   846c2:	68fb      	ldr	r3, [r7, #12]
   846c4:	3301      	adds	r3, #1
   846c6:	60fb      	str	r3, [r7, #12]
   846c8:	68fb      	ldr	r3, [r7, #12]
   846ca:	2b31      	cmp	r3, #49	; 0x31
   846cc:	dd8c      	ble.n	845e8 <calibration_ps3+0x10>
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
			break;
		}
	}
}
   846ce:	bf00      	nop
   846d0:	3710      	adds	r7, #16
   846d2:	46bd      	mov	sp, r7
   846d4:	bd80      	pop	{r7, pc}
   846d6:	bf00      	nop
   846d8:	200703c4 	.word	0x200703c4
   846dc:	000a64e9 	.word	0x000a64e9
   846e0:	20071780 	.word	0x20071780
   846e4:	51eb851f 	.word	0x51eb851f
   846e8:	20071794 	.word	0x20071794

000846ec <calibration_cond>:

void calibration_cond(float sensordata)
{
   846ec:	b590      	push	{r4, r7, lr}
   846ee:	b087      	sub	sp, #28
   846f0:	af00      	add	r7, sp, #0
   846f2:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   846f4:	f04f 0300 	mov.w	r3, #0
   846f8:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   846fa:	687b      	ldr	r3, [r7, #4]
   846fc:	613b      	str	r3, [r7, #16]
	float slope=0;
   846fe:	f04f 0300 	mov.w	r3, #0
   84702:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84704:	2300      	movs	r3, #0
   84706:	617b      	str	r3, [r7, #20]
   84708:	e08f      	b.n	8482a <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   8470a:	4a4c      	ldr	r2, [pc, #304]	; (8483c <calibration_cond+0x150>)
   8470c:	697b      	ldr	r3, [r7, #20]
   8470e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84712:	b29b      	uxth	r3, r3
   84714:	461a      	mov	r2, r3
   84716:	4b4a      	ldr	r3, [pc, #296]	; (84840 <calibration_cond+0x154>)
   84718:	4610      	mov	r0, r2
   8471a:	4798      	blx	r3
   8471c:	4602      	mov	r2, r0
   8471e:	4b49      	ldr	r3, [pc, #292]	; (84844 <calibration_cond+0x158>)
   84720:	6939      	ldr	r1, [r7, #16]
   84722:	4610      	mov	r0, r2
   84724:	4798      	blx	r3
   84726:	4603      	mov	r3, r0
   84728:	2b00      	cmp	r3, #0
   8472a:	d00c      	beq.n	84746 <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   8472c:	4a43      	ldr	r2, [pc, #268]	; (8483c <calibration_cond+0x150>)
   8472e:	697b      	ldr	r3, [r7, #20]
   84730:	009b      	lsls	r3, r3, #2
   84732:	4413      	add	r3, r2
   84734:	885b      	ldrh	r3, [r3, #2]
   84736:	b29a      	uxth	r2, r3
   84738:	4b43      	ldr	r3, [pc, #268]	; (84848 <calibration_cond+0x15c>)
   8473a:	4610      	mov	r0, r2
   8473c:	4798      	blx	r3
   8473e:	4602      	mov	r2, r0
   84740:	4b42      	ldr	r3, [pc, #264]	; (8484c <calibration_cond+0x160>)
   84742:	601a      	str	r2, [r3, #0]
   84744:	e06e      	b.n	84824 <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   84746:	4a3d      	ldr	r2, [pc, #244]	; (8483c <calibration_cond+0x150>)
   84748:	697b      	ldr	r3, [r7, #20]
   8474a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8474e:	b29b      	uxth	r3, r3
   84750:	461a      	mov	r2, r3
   84752:	4b3b      	ldr	r3, [pc, #236]	; (84840 <calibration_cond+0x154>)
   84754:	4610      	mov	r0, r2
   84756:	4798      	blx	r3
   84758:	4602      	mov	r2, r0
   8475a:	4b3d      	ldr	r3, [pc, #244]	; (84850 <calibration_cond+0x164>)
   8475c:	6939      	ldr	r1, [r7, #16]
   8475e:	4610      	mov	r0, r2
   84760:	4798      	blx	r3
   84762:	4603      	mov	r3, r0
   84764:	2b00      	cmp	r3, #0
   84766:	d05d      	beq.n	84824 <calibration_cond+0x138>
   84768:	697b      	ldr	r3, [r7, #20]
   8476a:	3301      	adds	r3, #1
   8476c:	4a33      	ldr	r2, [pc, #204]	; (8483c <calibration_cond+0x150>)
   8476e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84772:	b29b      	uxth	r3, r3
   84774:	461a      	mov	r2, r3
   84776:	4b32      	ldr	r3, [pc, #200]	; (84840 <calibration_cond+0x154>)
   84778:	4610      	mov	r0, r2
   8477a:	4798      	blx	r3
   8477c:	4602      	mov	r2, r0
   8477e:	4b35      	ldr	r3, [pc, #212]	; (84854 <calibration_cond+0x168>)
   84780:	6939      	ldr	r1, [r7, #16]
   84782:	4610      	mov	r0, r2
   84784:	4798      	blx	r3
   84786:	4603      	mov	r3, r0
   84788:	2b00      	cmp	r3, #0
   8478a:	d04b      	beq.n	84824 <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   8478c:	697b      	ldr	r3, [r7, #20]
   8478e:	3301      	adds	r3, #1
   84790:	4a2a      	ldr	r2, [pc, #168]	; (8483c <calibration_cond+0x150>)
   84792:	009b      	lsls	r3, r3, #2
   84794:	4413      	add	r3, r2
   84796:	885b      	ldrh	r3, [r3, #2]
   84798:	b29b      	uxth	r3, r3
   8479a:	4619      	mov	r1, r3
   8479c:	4a27      	ldr	r2, [pc, #156]	; (8483c <calibration_cond+0x150>)
   8479e:	697b      	ldr	r3, [r7, #20]
   847a0:	009b      	lsls	r3, r3, #2
   847a2:	4413      	add	r3, r2
   847a4:	885b      	ldrh	r3, [r3, #2]
   847a6:	b29b      	uxth	r3, r3
   847a8:	1aca      	subs	r2, r1, r3
   847aa:	697b      	ldr	r3, [r7, #20]
   847ac:	3301      	adds	r3, #1
   847ae:	4923      	ldr	r1, [pc, #140]	; (8483c <calibration_cond+0x150>)
   847b0:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   847b4:	b29b      	uxth	r3, r3
   847b6:	4618      	mov	r0, r3
   847b8:	4920      	ldr	r1, [pc, #128]	; (8483c <calibration_cond+0x150>)
   847ba:	697b      	ldr	r3, [r7, #20]
   847bc:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   847c0:	b29b      	uxth	r3, r3
   847c2:	1ac3      	subs	r3, r0, r3
   847c4:	fb92 f2f3 	sdiv	r2, r2, r3
   847c8:	4b1d      	ldr	r3, [pc, #116]	; (84840 <calibration_cond+0x154>)
   847ca:	4610      	mov	r0, r2
   847cc:	4798      	blx	r3
   847ce:	4603      	mov	r3, r0
   847d0:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   847d2:	4a1a      	ldr	r2, [pc, #104]	; (8483c <calibration_cond+0x150>)
   847d4:	697b      	ldr	r3, [r7, #20]
   847d6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   847da:	b29b      	uxth	r3, r3
   847dc:	461a      	mov	r2, r3
   847de:	4b18      	ldr	r3, [pc, #96]	; (84840 <calibration_cond+0x154>)
   847e0:	4610      	mov	r0, r2
   847e2:	4798      	blx	r3
   847e4:	4602      	mov	r2, r0
   847e6:	4b1c      	ldr	r3, [pc, #112]	; (84858 <calibration_cond+0x16c>)
   847e8:	4611      	mov	r1, r2
   847ea:	6938      	ldr	r0, [r7, #16]
   847ec:	4798      	blx	r3
   847ee:	4603      	mov	r3, r0
   847f0:	461a      	mov	r2, r3
   847f2:	4b1a      	ldr	r3, [pc, #104]	; (8485c <calibration_cond+0x170>)
   847f4:	68f9      	ldr	r1, [r7, #12]
   847f6:	4610      	mov	r0, r2
   847f8:	4798      	blx	r3
   847fa:	4603      	mov	r3, r0
   847fc:	461c      	mov	r4, r3
   847fe:	4a0f      	ldr	r2, [pc, #60]	; (8483c <calibration_cond+0x150>)
   84800:	697b      	ldr	r3, [r7, #20]
   84802:	009b      	lsls	r3, r3, #2
   84804:	4413      	add	r3, r2
   84806:	885b      	ldrh	r3, [r3, #2]
   84808:	b29b      	uxth	r3, r3
   8480a:	461a      	mov	r2, r3
   8480c:	4b0c      	ldr	r3, [pc, #48]	; (84840 <calibration_cond+0x154>)
   8480e:	4610      	mov	r0, r2
   84810:	4798      	blx	r3
   84812:	4602      	mov	r2, r0
   84814:	4b12      	ldr	r3, [pc, #72]	; (84860 <calibration_cond+0x174>)
   84816:	4611      	mov	r1, r2
   84818:	4620      	mov	r0, r4
   8481a:	4798      	blx	r3
   8481c:	4603      	mov	r3, r0
   8481e:	461a      	mov	r2, r3
   84820:	4b0a      	ldr	r3, [pc, #40]	; (8484c <calibration_cond+0x160>)
   84822:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   84824:	697b      	ldr	r3, [r7, #20]
   84826:	3301      	adds	r3, #1
   84828:	617b      	str	r3, [r7, #20]
   8482a:	697b      	ldr	r3, [r7, #20]
   8482c:	2b31      	cmp	r3, #49	; 0x31
   8482e:	f77f af6c 	ble.w	8470a <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   84832:	bf00      	nop
   84834:	371c      	adds	r7, #28
   84836:	46bd      	mov	sp, r7
   84838:	bd90      	pop	{r4, r7, pc}
   8483a:	bf00      	nop
   8483c:	2007185c 	.word	0x2007185c
   84840:	000a64e9 	.word	0x000a64e9
   84844:	000a68b9 	.word	0x000a68b9
   84848:	000a64e1 	.word	0x000a64e1
   8484c:	2007178c 	.word	0x2007178c
   84850:	000a68cd 	.word	0x000a68cd
   84854:	000a6909 	.word	0x000a6909
   84858:	000a637d 	.word	0x000a637d
   8485c:	000a6591 	.word	0x000a6591
   84860:	000a6381 	.word	0x000a6381

00084864 <calibrate_uf>:


void calibrate_uf(int16_t ufrate){
   84864:	b590      	push	{r4, r7, lr}
   84866:	b087      	sub	sp, #28
   84868:	af00      	add	r7, sp, #0
   8486a:	4603      	mov	r3, r0
   8486c:	80fb      	strh	r3, [r7, #6]
	
	Cl_Uint16Type i;
	float dummy_var = ufrate;
   8486e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84872:	4b51      	ldr	r3, [pc, #324]	; (849b8 <calibrate_uf+0x154>)
   84874:	4610      	mov	r0, r2
   84876:	4798      	blx	r3
   84878:	4603      	mov	r3, r0
   8487a:	613b      	str	r3, [r7, #16]
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   8487c:	2300      	movs	r3, #0
   8487e:	82fb      	strh	r3, [r7, #22]
   84880:	e092      	b.n	849a8 <calibrate_uf+0x144>
		{
			if (dummy_var == ufp[i].rate)
   84882:	8afb      	ldrh	r3, [r7, #22]
   84884:	4a4d      	ldr	r2, [pc, #308]	; (849bc <calibrate_uf+0x158>)
   84886:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8488a:	b29b      	uxth	r3, r3
   8488c:	461a      	mov	r2, r3
   8488e:	4b4a      	ldr	r3, [pc, #296]	; (849b8 <calibrate_uf+0x154>)
   84890:	4610      	mov	r0, r2
   84892:	4798      	blx	r3
   84894:	4602      	mov	r2, r0
   84896:	4b4a      	ldr	r3, [pc, #296]	; (849c0 <calibrate_uf+0x15c>)
   84898:	6939      	ldr	r1, [r7, #16]
   8489a:	4610      	mov	r0, r2
   8489c:	4798      	blx	r3
   8489e:	4603      	mov	r3, r0
   848a0:	2b00      	cmp	r3, #0
   848a2:	d00a      	beq.n	848ba <calibrate_uf+0x56>
			{
				dummy_var1=ufp[i].speed;
   848a4:	8afb      	ldrh	r3, [r7, #22]
   848a6:	4a45      	ldr	r2, [pc, #276]	; (849bc <calibrate_uf+0x158>)
   848a8:	009b      	lsls	r3, r3, #2
   848aa:	4413      	add	r3, r2
   848ac:	885b      	ldrh	r3, [r3, #2]
   848ae:	b29b      	uxth	r3, r3
   848b0:	60bb      	str	r3, [r7, #8]
				uf_final=dummy_var1;
   848b2:	4a44      	ldr	r2, [pc, #272]	; (849c4 <calibrate_uf+0x160>)
   848b4:	68bb      	ldr	r3, [r7, #8]
   848b6:	6013      	str	r3, [r2, #0]
				break;
   848b8:	e07a      	b.n	849b0 <calibrate_uf+0x14c>
			}
			else if ((dummy_var > ufp[i].rate) && (dummy_var < ufp[i+1].rate))
   848ba:	8afb      	ldrh	r3, [r7, #22]
   848bc:	4a3f      	ldr	r2, [pc, #252]	; (849bc <calibrate_uf+0x158>)
   848be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   848c2:	b29b      	uxth	r3, r3
   848c4:	461a      	mov	r2, r3
   848c6:	4b3c      	ldr	r3, [pc, #240]	; (849b8 <calibrate_uf+0x154>)
   848c8:	4610      	mov	r0, r2
   848ca:	4798      	blx	r3
   848cc:	4602      	mov	r2, r0
   848ce:	4b3e      	ldr	r3, [pc, #248]	; (849c8 <calibrate_uf+0x164>)
   848d0:	6939      	ldr	r1, [r7, #16]
   848d2:	4610      	mov	r0, r2
   848d4:	4798      	blx	r3
   848d6:	4603      	mov	r3, r0
   848d8:	2b00      	cmp	r3, #0
   848da:	d062      	beq.n	849a2 <calibrate_uf+0x13e>
   848dc:	8afb      	ldrh	r3, [r7, #22]
   848de:	3301      	adds	r3, #1
   848e0:	4a36      	ldr	r2, [pc, #216]	; (849bc <calibrate_uf+0x158>)
   848e2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   848e6:	b29b      	uxth	r3, r3
   848e8:	461a      	mov	r2, r3
   848ea:	4b33      	ldr	r3, [pc, #204]	; (849b8 <calibrate_uf+0x154>)
   848ec:	4610      	mov	r0, r2
   848ee:	4798      	blx	r3
   848f0:	4602      	mov	r2, r0
   848f2:	4b36      	ldr	r3, [pc, #216]	; (849cc <calibrate_uf+0x168>)
   848f4:	6939      	ldr	r1, [r7, #16]
   848f6:	4610      	mov	r0, r2
   848f8:	4798      	blx	r3
   848fa:	4603      	mov	r3, r0
   848fc:	2b00      	cmp	r3, #0
   848fe:	d050      	beq.n	849a2 <calibrate_uf+0x13e>
			{
				//temprature_final_value =dummy_var;
				slope = (((ufp[i+1].speed - ufp[i].speed))/(ufp[i+1].rate - ufp[i].rate));
   84900:	8afb      	ldrh	r3, [r7, #22]
   84902:	3301      	adds	r3, #1
   84904:	4a2d      	ldr	r2, [pc, #180]	; (849bc <calibrate_uf+0x158>)
   84906:	009b      	lsls	r3, r3, #2
   84908:	4413      	add	r3, r2
   8490a:	885b      	ldrh	r3, [r3, #2]
   8490c:	b29b      	uxth	r3, r3
   8490e:	4619      	mov	r1, r3
   84910:	8afb      	ldrh	r3, [r7, #22]
   84912:	4a2a      	ldr	r2, [pc, #168]	; (849bc <calibrate_uf+0x158>)
   84914:	009b      	lsls	r3, r3, #2
   84916:	4413      	add	r3, r2
   84918:	885b      	ldrh	r3, [r3, #2]
   8491a:	b29b      	uxth	r3, r3
   8491c:	1aca      	subs	r2, r1, r3
   8491e:	8afb      	ldrh	r3, [r7, #22]
   84920:	3301      	adds	r3, #1
   84922:	4926      	ldr	r1, [pc, #152]	; (849bc <calibrate_uf+0x158>)
   84924:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84928:	b29b      	uxth	r3, r3
   8492a:	4618      	mov	r0, r3
   8492c:	8afb      	ldrh	r3, [r7, #22]
   8492e:	4923      	ldr	r1, [pc, #140]	; (849bc <calibrate_uf+0x158>)
   84930:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84934:	b29b      	uxth	r3, r3
   84936:	1ac3      	subs	r3, r0, r3
   84938:	fb92 f2f3 	sdiv	r2, r2, r3
   8493c:	4b1e      	ldr	r3, [pc, #120]	; (849b8 <calibrate_uf+0x154>)
   8493e:	4610      	mov	r0, r2
   84940:	4798      	blx	r3
   84942:	4603      	mov	r3, r0
   84944:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				uf_final = ((slope*(dummy_var - ufp[i].rate)) + ufp[i].speed);
   84946:	8afb      	ldrh	r3, [r7, #22]
   84948:	4a1c      	ldr	r2, [pc, #112]	; (849bc <calibrate_uf+0x158>)
   8494a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8494e:	b29b      	uxth	r3, r3
   84950:	461a      	mov	r2, r3
   84952:	4b19      	ldr	r3, [pc, #100]	; (849b8 <calibrate_uf+0x154>)
   84954:	4610      	mov	r0, r2
   84956:	4798      	blx	r3
   84958:	4602      	mov	r2, r0
   8495a:	4b1d      	ldr	r3, [pc, #116]	; (849d0 <calibrate_uf+0x16c>)
   8495c:	4611      	mov	r1, r2
   8495e:	6938      	ldr	r0, [r7, #16]
   84960:	4798      	blx	r3
   84962:	4603      	mov	r3, r0
   84964:	461a      	mov	r2, r3
   84966:	4b1b      	ldr	r3, [pc, #108]	; (849d4 <calibrate_uf+0x170>)
   84968:	68f9      	ldr	r1, [r7, #12]
   8496a:	4610      	mov	r0, r2
   8496c:	4798      	blx	r3
   8496e:	4603      	mov	r3, r0
   84970:	461c      	mov	r4, r3
   84972:	8afb      	ldrh	r3, [r7, #22]
   84974:	4a11      	ldr	r2, [pc, #68]	; (849bc <calibrate_uf+0x158>)
   84976:	009b      	lsls	r3, r3, #2
   84978:	4413      	add	r3, r2
   8497a:	885b      	ldrh	r3, [r3, #2]
   8497c:	b29b      	uxth	r3, r3
   8497e:	461a      	mov	r2, r3
   84980:	4b0d      	ldr	r3, [pc, #52]	; (849b8 <calibrate_uf+0x154>)
   84982:	4610      	mov	r0, r2
   84984:	4798      	blx	r3
   84986:	4602      	mov	r2, r0
   84988:	4b13      	ldr	r3, [pc, #76]	; (849d8 <calibrate_uf+0x174>)
   8498a:	4611      	mov	r1, r2
   8498c:	4620      	mov	r0, r4
   8498e:	4798      	blx	r3
   84990:	4603      	mov	r3, r0
   84992:	461a      	mov	r2, r3
   84994:	4b11      	ldr	r3, [pc, #68]	; (849dc <calibrate_uf+0x178>)
   84996:	4610      	mov	r0, r2
   84998:	4798      	blx	r3
   8499a:	4602      	mov	r2, r0
   8499c:	4b09      	ldr	r3, [pc, #36]	; (849c4 <calibrate_uf+0x160>)
   8499e:	601a      	str	r2, [r3, #0]
				//temprature_final_value_1 =temprature_final_value_1/100;
				//temprature_final_value =1500;
				break;
   849a0:	e006      	b.n	849b0 <calibrate_uf+0x14c>
	float dummy_var = ufrate;
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   849a2:	8afb      	ldrh	r3, [r7, #22]
   849a4:	3301      	adds	r3, #1
   849a6:	82fb      	strh	r3, [r7, #22]
   849a8:	8afb      	ldrh	r3, [r7, #22]
   849aa:	2b0d      	cmp	r3, #13
   849ac:	f67f af69 	bls.w	84882 <calibrate_uf+0x1e>
			}*/
			
		}
	
	
}
   849b0:	bf00      	nop
   849b2:	371c      	adds	r7, #28
   849b4:	46bd      	mov	sp, r7
   849b6:	bd90      	pop	{r4, r7, pc}
   849b8:	000a64e9 	.word	0x000a64e9
   849bc:	200702b4 	.word	0x200702b4
   849c0:	000a68b9 	.word	0x000a68b9
   849c4:	20071790 	.word	0x20071790
   849c8:	000a68cd 	.word	0x000a68cd
   849cc:	000a6909 	.word	0x000a6909
   849d0:	000a637d 	.word	0x000a637d
   849d4:	000a6591 	.word	0x000a6591
   849d8:	000a6381 	.word	0x000a6381
   849dc:	000a6969 	.word	0x000a6969

000849e0 <cl_datamanager_init>:
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Mac_EventQueueType  Cl_MacEventQueue2;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType cl_datamanager_init()
{
   849e0:	b480      	push	{r7}
   849e2:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   849e4:	4b1f      	ldr	r3, [pc, #124]	; (84a64 <cl_datamanager_init+0x84>)
   849e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   849ea:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   849ec:	4b1d      	ldr	r3, [pc, #116]	; (84a64 <cl_datamanager_init+0x84>)
   849ee:	f44f 72b9 	mov.w	r2, #370	; 0x172
   849f2:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 135;
   849f4:	4b1b      	ldr	r3, [pc, #108]	; (84a64 <cl_datamanager_init+0x84>)
   849f6:	2287      	movs	r2, #135	; 0x87
   849f8:	62da      	str	r2, [r3, #44]	; 0x2c
	Treatdata[ID_bloodrate] = 400;
   849fa:	4b1a      	ldr	r3, [pc, #104]	; (84a64 <cl_datamanager_init+0x84>)
   849fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a00:	63da      	str	r2, [r3, #60]	; 0x3c
	Treatdata[ID_tempulimit] = 375;
   84a02:	4b18      	ldr	r3, [pc, #96]	; (84a64 <cl_datamanager_init+0x84>)
   84a04:	f240 1277 	movw	r2, #375	; 0x177
   84a08:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   84a0a:	4b16      	ldr	r3, [pc, #88]	; (84a64 <cl_datamanager_init+0x84>)
   84a0c:	f240 126d 	movw	r2, #365	; 0x16d
   84a10:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 150;
   84a12:	4b14      	ldr	r3, [pc, #80]	; (84a64 <cl_datamanager_init+0x84>)
   84a14:	2296      	movs	r2, #150	; 0x96
   84a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condllimit] = 0;
   84a1a:	4b12      	ldr	r3, [pc, #72]	; (84a64 <cl_datamanager_init+0x84>)
   84a1c:	2200      	movs	r2, #0
   84a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Treatdata[ID_aptulimit] =  400;
   84a22:	4b10      	ldr	r3, [pc, #64]	; (84a64 <cl_datamanager_init+0x84>)
   84a24:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 0;
   84a2c:	4b0d      	ldr	r3, [pc, #52]	; (84a64 <cl_datamanager_init+0x84>)
   84a2e:	2200      	movs	r2, #0
   84a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 400;
   84a34:	4b0b      	ldr	r3, [pc, #44]	; (84a64 <cl_datamanager_init+0x84>)
   84a36:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a3a:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 0;
   84a3c:	4b09      	ldr	r3, [pc, #36]	; (84a64 <cl_datamanager_init+0x84>)
   84a3e:	2200      	movs	r2, #0
   84a40:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   84a42:	4b08      	ldr	r3, [pc, #32]	; (84a64 <cl_datamanager_init+0x84>)
   84a44:	2232      	movs	r2, #50	; 0x32
   84a46:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   84a48:	4b06      	ldr	r3, [pc, #24]	; (84a64 <cl_datamanager_init+0x84>)
   84a4a:	2200      	movs	r2, #0
   84a4c:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 0; // added default to check uf func
   84a4e:	4b05      	ldr	r3, [pc, #20]	; (84a64 <cl_datamanager_init+0x84>)
   84a50:	2200      	movs	r2, #0
   84a52:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   84a54:	4b03      	ldr	r3, [pc, #12]	; (84a64 <cl_datamanager_init+0x84>)
   84a56:	22f0      	movs	r2, #240	; 0xf0
   84a58:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   84a5a:	2300      	movs	r3, #0
	
}
   84a5c:	4618      	mov	r0, r3
   84a5e:	46bd      	mov	sp, r7
   84a60:	bc80      	pop	{r7}
   84a62:	4770      	bx	lr
   84a64:	20072654 	.word	0x20072654

00084a68 <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   84a68:	b580      	push	{r7, lr}
   84a6a:	b092      	sub	sp, #72	; 0x48
   84a6c:	af00      	add	r7, sp, #0
   84a6e:	4603      	mov	r3, r0
   84a70:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84a72:	2304      	movs	r3, #4
   84a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84a78:	2351      	movs	r3, #81	; 0x51
   84a7a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84a7e:	f107 030c 	add.w	r3, r7, #12
   84a82:	2232      	movs	r2, #50	; 0x32
   84a84:	2100      	movs	r1, #0
   84a86:	4618      	mov	r0, r3
   84a88:	4bcd      	ldr	r3, [pc, #820]	; (84dc0 <cl_datamamanager+0x358>)
   84a8a:	4798      	blx	r3
	
	switch(cl_data_event)
   84a8c:	79fb      	ldrb	r3, [r7, #7]
   84a8e:	2b0e      	cmp	r3, #14
   84a90:	d007      	beq.n	84aa2 <cl_datamamanager+0x3a>
   84a92:	2b3b      	cmp	r3, #59	; 0x3b
   84a94:	f000 846d 	beq.w	85372 <cl_datamamanager+0x90a>
   84a98:	2b0d      	cmp	r3, #13
   84a9a:	f000 837e 	beq.w	8519a <cl_datamamanager+0x732>
							
		}
		break;
		
		default:
		break;
   84a9e:	f000 bc6d 	b.w	8537c <cl_datamamanager+0x914>
		
		
		break;
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84aa2:	4bc8      	ldr	r3, [pc, #800]	; (84dc4 <cl_datamamanager+0x35c>)
   84aa4:	7e1b      	ldrb	r3, [r3, #24]
   84aa6:	2b00      	cmp	r3, #0
   84aa8:	f000 8465 	beq.w	85376 <cl_datamamanager+0x90e>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   84aac:	4bc5      	ldr	r3, [pc, #788]	; (84dc4 <cl_datamamanager+0x35c>)
   84aae:	791b      	ldrb	r3, [r3, #4]
   84ab0:	3b01      	subs	r3, #1
   84ab2:	2b21      	cmp	r3, #33	; 0x21
   84ab4:	f200 836d 	bhi.w	85192 <cl_datamamanager+0x72a>
   84ab8:	a201      	add	r2, pc, #4	; (adr r2, 84ac0 <cl_datamamanager+0x58>)
   84aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84abe:	bf00      	nop
   84ac0:	00084b49 	.word	0x00084b49
   84ac4:	00084b7f 	.word	0x00084b7f
   84ac8:	00084c23 	.word	0x00084c23
   84acc:	00084c49 	.word	0x00084c49
   84ad0:	00085193 	.word	0x00085193
   84ad4:	00085193 	.word	0x00085193
   84ad8:	00085193 	.word	0x00085193
   84adc:	00085193 	.word	0x00085193
   84ae0:	00085193 	.word	0x00085193
   84ae4:	00085193 	.word	0x00085193
   84ae8:	00085193 	.word	0x00085193
   84aec:	00085193 	.word	0x00085193
   84af0:	00085193 	.word	0x00085193
   84af4:	00085193 	.word	0x00085193
   84af8:	00085193 	.word	0x00085193
   84afc:	00085193 	.word	0x00085193
   84b00:	00085193 	.word	0x00085193
   84b04:	00084cb5 	.word	0x00084cb5
   84b08:	00085193 	.word	0x00085193
   84b0c:	00085193 	.word	0x00085193
   84b10:	00085193 	.word	0x00085193
   84b14:	00085193 	.word	0x00085193
   84b18:	00085193 	.word	0x00085193
   84b1c:	00085193 	.word	0x00085193
   84b20:	00085193 	.word	0x00085193
   84b24:	00085193 	.word	0x00085193
   84b28:	00085193 	.word	0x00085193
   84b2c:	00085193 	.word	0x00085193
   84b30:	00085193 	.word	0x00085193
   84b34:	00084bb5 	.word	0x00084bb5
   84b38:	00085193 	.word	0x00085193
   84b3c:	00084bdb 	.word	0x00084bdb
   84b40:	00084c01 	.word	0x00084c01
   84b44:	00084c7f 	.word	0x00084c7f
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b48:	2316      	movs	r3, #22
   84b4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84b4e:	2301      	movs	r3, #1
   84b50:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84b52:	f107 030c 	add.w	r3, r7, #12
   84b56:	3301      	adds	r3, #1
   84b58:	4619      	mov	r1, r3
   84b5a:	2001      	movs	r0, #1
   84b5c:	4b9a      	ldr	r3, [pc, #616]	; (84dc8 <cl_datamamanager+0x360>)
   84b5e:	4798      	blx	r3
   84b60:	4603      	mov	r3, r0
   84b62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b66:	f107 010c 	add.w	r1, r7, #12
   84b6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84b6e:	2202      	movs	r2, #2
   84b70:	4618      	mov	r0, r3
   84b72:	4b96      	ldr	r3, [pc, #600]	; (84dcc <cl_datamamanager+0x364>)
   84b74:	4798      	blx	r3
   84b76:	4603      	mov	r3, r0
   84b78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84b7c:	e30c      	b.n	85198 <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84b7e:	2316      	movs	r3, #22
   84b80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84b84:	2302      	movs	r3, #2
   84b86:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84b88:	f107 030c 	add.w	r3, r7, #12
   84b8c:	3301      	adds	r3, #1
   84b8e:	4619      	mov	r1, r3
   84b90:	2002      	movs	r0, #2
   84b92:	4b8d      	ldr	r3, [pc, #564]	; (84dc8 <cl_datamamanager+0x360>)
   84b94:	4798      	blx	r3
   84b96:	4603      	mov	r3, r0
   84b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84b9c:	f107 010c 	add.w	r1, r7, #12
   84ba0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84ba4:	2202      	movs	r2, #2
   84ba6:	4618      	mov	r0, r3
   84ba8:	4b88      	ldr	r3, [pc, #544]	; (84dcc <cl_datamamanager+0x364>)
   84baa:	4798      	blx	r3
   84bac:	4603      	mov	r3, r0
   84bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bb2:	e2f1      	b.n	85198 <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84bb4:	2316      	movs	r3, #22
   84bb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   84bba:	2320      	movs	r3, #32
   84bbc:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84bbe:	2300      	movs	r3, #0
   84bc0:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84bc2:	f107 010c 	add.w	r1, r7, #12
   84bc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bca:	2202      	movs	r2, #2
   84bcc:	4618      	mov	r0, r3
   84bce:	4b7f      	ldr	r3, [pc, #508]	; (84dcc <cl_datamamanager+0x364>)
   84bd0:	4798      	blx	r3
   84bd2:	4603      	mov	r3, r0
   84bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bd8:	e2de      	b.n	85198 <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84bda:	2316      	movs	r3, #22
   84bdc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84be0:	2321      	movs	r3, #33	; 0x21
   84be2:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84be4:	2300      	movs	r3, #0
   84be6:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84be8:	f107 010c 	add.w	r1, r7, #12
   84bec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84bf0:	2202      	movs	r2, #2
   84bf2:	4618      	mov	r0, r3
   84bf4:	4b75      	ldr	r3, [pc, #468]	; (84dcc <cl_datamamanager+0x364>)
   84bf6:	4798      	blx	r3
   84bf8:	4603      	mov	r3, r0
   84bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84bfe:	e2cb      	b.n	85198 <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c00:	2316      	movs	r3, #22
   84c02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84c06:	2323      	movs	r3, #35	; 0x23
   84c08:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c0a:	f107 010c 	add.w	r1, r7, #12
   84c0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c12:	2202      	movs	r2, #2
   84c14:	4618      	mov	r0, r3
   84c16:	4b6d      	ldr	r3, [pc, #436]	; (84dcc <cl_datamamanager+0x364>)
   84c18:	4798      	blx	r3
   84c1a:	4603      	mov	r3, r0
   84c1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c20:	e2ba      	b.n	85198 <cl_datamamanager+0x730>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c22:	2316      	movs	r3, #22
   84c24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84c28:	2303      	movs	r3, #3
   84c2a:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84c2c:	2300      	movs	r3, #0
   84c2e:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c30:	f107 010c 	add.w	r1, r7, #12
   84c34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c38:	2202      	movs	r2, #2
   84c3a:	4618      	mov	r0, r3
   84c3c:	4b63      	ldr	r3, [pc, #396]	; (84dcc <cl_datamamanager+0x364>)
   84c3e:	4798      	blx	r3
   84c40:	4603      	mov	r3, r0
   84c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c46:	e2a7      	b.n	85198 <cl_datamamanager+0x730>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c48:	2316      	movs	r3, #22
   84c4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84c4e:	2304      	movs	r3, #4
   84c50:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c52:	f107 030c 	add.w	r3, r7, #12
   84c56:	3301      	adds	r3, #1
   84c58:	4619      	mov	r1, r3
   84c5a:	2004      	movs	r0, #4
   84c5c:	4b5a      	ldr	r3, [pc, #360]	; (84dc8 <cl_datamamanager+0x360>)
   84c5e:	4798      	blx	r3
   84c60:	4603      	mov	r3, r0
   84c62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c66:	f107 010c 	add.w	r1, r7, #12
   84c6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84c6e:	2202      	movs	r2, #2
   84c70:	4618      	mov	r0, r3
   84c72:	4b56      	ldr	r3, [pc, #344]	; (84dcc <cl_datamamanager+0x364>)
   84c74:	4798      	blx	r3
   84c76:	4603      	mov	r3, r0
   84c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c7c:	e28c      	b.n	85198 <cl_datamamanager+0x730>

				case	CON_RX_PARAM_DATA_ISOUF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c7e:	2316      	movs	r3, #22
   84c80:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_RX_PARAM_DATA_ISOUF_STATUS;
   84c84:	2322      	movs	r3, #34	; 0x22
   84c86:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84c88:	f107 030c 	add.w	r3, r7, #12
   84c8c:	3301      	adds	r3, #1
   84c8e:	4619      	mov	r1, r3
   84c90:	2004      	movs	r0, #4
   84c92:	4b4d      	ldr	r3, [pc, #308]	; (84dc8 <cl_datamamanager+0x360>)
   84c94:	4798      	blx	r3
   84c96:	4603      	mov	r3, r0
   84c98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c9c:	f107 010c 	add.w	r1, r7, #12
   84ca0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84ca4:	2202      	movs	r2, #2
   84ca6:	4618      	mov	r0, r3
   84ca8:	4b48      	ldr	r3, [pc, #288]	; (84dcc <cl_datamamanager+0x364>)
   84caa:	4798      	blx	r3
   84cac:	4603      	mov	r3, r0
   84cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84cb2:	e271      	b.n	85198 <cl_datamamanager+0x730>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84cb4:	2316      	movs	r3, #22
   84cb6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   84cba:	2312      	movs	r3, #18
   84cbc:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84cbe:	4b41      	ldr	r3, [pc, #260]	; (84dc4 <cl_datamamanager+0x35c>)
   84cc0:	795b      	ldrb	r3, [r3, #5]
   84cc2:	2b25      	cmp	r3, #37	; 0x25
   84cc4:	d820      	bhi.n	84d08 <cl_datamamanager+0x2a0>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84cc6:	4b3f      	ldr	r3, [pc, #252]	; (84dc4 <cl_datamamanager+0x35c>)
   84cc8:	795b      	ldrb	r3, [r3, #5]
   84cca:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   84ccc:	7b7b      	ldrb	r3, [r7, #13]
   84cce:	461a      	mov	r2, r3
   84cd0:	4b3f      	ldr	r3, [pc, #252]	; (84dd0 <cl_datamamanager+0x368>)
   84cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84cd6:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   84cd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84cdc:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84cde:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ce2:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84ce4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ce8:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   84cea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84cee:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   84cf0:	f107 010c 	add.w	r1, r7, #12
   84cf4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84cf8:	2206      	movs	r2, #6
   84cfa:	4618      	mov	r0, r3
   84cfc:	4b33      	ldr	r3, [pc, #204]	; (84dcc <cl_datamamanager+0x364>)
   84cfe:	4798      	blx	r3
   84d00:	4603      	mov	r3, r0
   84d02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
					
				}
		

				break;
   84d06:	e246      	b.n	85196 <cl_datamamanager+0x72e>
					dataarray[4] = datastream.bytearray[2];
					dataarray[5] = datastream.bytearray[3];

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   84d08:	4b2e      	ldr	r3, [pc, #184]	; (84dc4 <cl_datamamanager+0x35c>)
   84d0a:	795b      	ldrb	r3, [r3, #5]
   84d0c:	2b2d      	cmp	r3, #45	; 0x2d
   84d0e:	f200 8242 	bhi.w	85196 <cl_datamamanager+0x72e>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84d12:	4b2c      	ldr	r3, [pc, #176]	; (84dc4 <cl_datamamanager+0x35c>)
   84d14:	795b      	ldrb	r3, [r3, #5]
   84d16:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   84d18:	4b2a      	ldr	r3, [pc, #168]	; (84dc4 <cl_datamamanager+0x35c>)
   84d1a:	795b      	ldrb	r3, [r3, #5]
   84d1c:	3b26      	subs	r3, #38	; 0x26
   84d1e:	2b07      	cmp	r3, #7
   84d20:	f200 8235 	bhi.w	8518e <cl_datamamanager+0x726>
   84d24:	a201      	add	r2, pc, #4	; (adr r2, 84d2c <cl_datamamanager+0x2c4>)
   84d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84d2a:	bf00      	nop
   84d2c:	00084d4d 	.word	0x00084d4d
   84d30:	00084e4d 	.word	0x00084e4d
   84d34:	0008518f 	.word	0x0008518f
   84d38:	00084dd5 	.word	0x00084dd5
   84d3c:	00084ebf 	.word	0x00084ebf
   84d40:	00085119 	.word	0x00085119
   84d44:	0008509f 	.word	0x0008509f
   84d48:	00084f2f 	.word	0x00084f2f
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84d4c:	4b20      	ldr	r3, [pc, #128]	; (84dd0 <cl_datamamanager+0x368>)
   84d4e:	695b      	ldr	r3, [r3, #20]
   84d50:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84d52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d56:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84d58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d5c:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84d5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d62:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84d64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d68:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84d6a:	4b19      	ldr	r3, [pc, #100]	; (84dd0 <cl_datamamanager+0x368>)
   84d6c:	699b      	ldr	r3, [r3, #24]
   84d6e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84d70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d74:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84d76:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d7a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84d7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d80:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84d82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84d86:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84d88:	4b11      	ldr	r3, [pc, #68]	; (84dd0 <cl_datamamanager+0x368>)
   84d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84d8c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84d8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84d92:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84d94:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84d98:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84d9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84d9e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84da0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84da4:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84da6:	f107 010c 	add.w	r1, r7, #12
   84daa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84dae:	220e      	movs	r2, #14
   84db0:	4618      	mov	r0, r3
   84db2:	4b06      	ldr	r3, [pc, #24]	; (84dcc <cl_datamamanager+0x364>)
   84db4:	4798      	blx	r3
   84db6:	4603      	mov	r3, r0
   84db8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84dbc:	e1e8      	b.n	85190 <cl_datamamanager+0x728>
   84dbe:	bf00      	nop
   84dc0:	000a6ae5 	.word	0x000a6ae5
   84dc4:	200723e8 	.word	0x200723e8
   84dc8:	0009a331 	.word	0x0009a331
   84dcc:	0009b805 	.word	0x0009b805
   84dd0:	20072654 	.word	0x20072654
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84dd4:	4bce      	ldr	r3, [pc, #824]	; (85110 <cl_datamamanager+0x6a8>)
   84dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   84dda:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84ddc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84de0:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84de2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84de6:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84de8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84dec:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84dee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84df2:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   84df4:	4bc6      	ldr	r3, [pc, #792]	; (85110 <cl_datamamanager+0x6a8>)
   84df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   84dfa:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84dfc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e00:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e02:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e06:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e08:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e0c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e0e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e12:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84e14:	4bbe      	ldr	r3, [pc, #760]	; (85110 <cl_datamamanager+0x6a8>)
   84e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84e1a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e20:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e22:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e26:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e2c:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e32:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e34:	f107 010c 	add.w	r1, r7, #12
   84e38:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84e3c:	220e      	movs	r2, #14
   84e3e:	4618      	mov	r0, r3
   84e40:	4bb4      	ldr	r3, [pc, #720]	; (85114 <cl_datamamanager+0x6ac>)
   84e42:	4798      	blx	r3
   84e44:	4603      	mov	r3, r0
   84e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e4a:	e1a1      	b.n	85190 <cl_datamamanager+0x728>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84e4c:	4bb0      	ldr	r3, [pc, #704]	; (85110 <cl_datamamanager+0x6a8>)
   84e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84e50:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e56:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e5c:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84e5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e62:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e68:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84e6a:	4ba9      	ldr	r3, [pc, #676]	; (85110 <cl_datamamanager+0x6a8>)
   84e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84e6e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84e70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e74:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e76:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e7a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e80:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e86:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84e88:	4ba1      	ldr	r3, [pc, #644]	; (85110 <cl_datamamanager+0x6a8>)
   84e8a:	699b      	ldr	r3, [r3, #24]
   84e8c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e92:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e94:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e98:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e9e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ea0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ea4:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84ea6:	f107 010c 	add.w	r1, r7, #12
   84eaa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84eae:	220e      	movs	r2, #14
   84eb0:	4618      	mov	r0, r3
   84eb2:	4b98      	ldr	r3, [pc, #608]	; (85114 <cl_datamamanager+0x6ac>)
   84eb4:	4798      	blx	r3
   84eb6:	4603      	mov	r3, r0
   84eb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84ebc:	e168      	b.n	85190 <cl_datamamanager+0x728>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84ebe:	4b94      	ldr	r3, [pc, #592]	; (85110 <cl_datamamanager+0x6a8>)
   84ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84ec2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84ec4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ec8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84eca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ece:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84ed0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ed4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84eda:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84edc:	4b8c      	ldr	r3, [pc, #560]	; (85110 <cl_datamamanager+0x6a8>)
   84ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84ee0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84ee2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ee6:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84ee8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eec:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84eee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ef2:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84ef8:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84efa:	23c8      	movs	r3, #200	; 0xc8
   84efc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84efe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f02:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84f04:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f08:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84f0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f0e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84f10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f14:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84f16:	f107 010c 	add.w	r1, r7, #12
   84f1a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   84f1e:	220e      	movs	r2, #14
   84f20:	4618      	mov	r0, r3
   84f22:	4b7c      	ldr	r3, [pc, #496]	; (85114 <cl_datamamanager+0x6ac>)
   84f24:	4798      	blx	r3
   84f26:	4603      	mov	r3, r0
   84f28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84f2c:	e130      	b.n	85190 <cl_datamamanager+0x728>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84f2e:	4b78      	ldr	r3, [pc, #480]	; (85110 <cl_datamamanager+0x6a8>)
   84f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f32:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84f34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f38:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84f3a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f3e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84f40:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f44:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f4a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84f4c:	4b70      	ldr	r3, [pc, #448]	; (85110 <cl_datamamanager+0x6a8>)
   84f4e:	699b      	ldr	r3, [r3, #24]
   84f50:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84f52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f56:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84f58:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f5c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84f5e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f62:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84f64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f68:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   84f6a:	4b69      	ldr	r3, [pc, #420]	; (85110 <cl_datamamanager+0x6a8>)
   84f6c:	695b      	ldr	r3, [r3, #20]
   84f6e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84f70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f74:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84f76:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f7a:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84f7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f80:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84f82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f86:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   84f88:	4b61      	ldr	r3, [pc, #388]	; (85110 <cl_datamamanager+0x6a8>)
   84f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84f8c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   84f8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f92:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   84f94:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f98:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   84f9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f9e:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   84fa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fa4:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   84fa6:	4b5a      	ldr	r3, [pc, #360]	; (85110 <cl_datamamanager+0x6a8>)
   84fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84faa:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   84fac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fb0:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   84fb2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fb6:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   84fb8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fbc:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   84fc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   84fc8:	4b51      	ldr	r3, [pc, #324]	; (85110 <cl_datamamanager+0x6a8>)
   84fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   84fcc:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   84fce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   84fd6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   84fde:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fe2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   84fe6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   84fee:	4b48      	ldr	r3, [pc, #288]	; (85110 <cl_datamamanager+0x6a8>)
   84ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   84ff2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   84ff4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   84ffc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   85004:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85008:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   8500c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85010:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   85014:	4b3e      	ldr	r3, [pc, #248]	; (85110 <cl_datamamanager+0x6a8>)
   85016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   85018:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   8501a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8501e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   85022:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   8502a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8502e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   85032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85036:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   8503a:	4b35      	ldr	r3, [pc, #212]	; (85110 <cl_datamamanager+0x6a8>)
   8503c:	69db      	ldr	r3, [r3, #28]
   8503e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   85040:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85044:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   85048:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8504c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   85050:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85054:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   85058:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8505c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   85060:	4b2b      	ldr	r3, [pc, #172]	; (85110 <cl_datamamanager+0x6a8>)
   85062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   85064:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   85066:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8506a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   8506e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   85076:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8507a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   8507e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85082:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   85086:	f107 010c 	add.w	r1, r7, #12
   8508a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8508e:	222a      	movs	r2, #42	; 0x2a
   85090:	4618      	mov	r0, r3
   85092:	4b20      	ldr	r3, [pc, #128]	; (85114 <cl_datamamanager+0x6ac>)
   85094:	4798      	blx	r3
   85096:	4603      	mov	r3, r0
   85098:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8509c:	e078      	b.n	85190 <cl_datamamanager+0x728>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   8509e:	4b1c      	ldr	r3, [pc, #112]	; (85110 <cl_datamamanager+0x6a8>)
   850a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   850a2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   850a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850a8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   850aa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850ae:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   850b0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850b4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   850b6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850ba:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   850bc:	4b14      	ldr	r3, [pc, #80]	; (85110 <cl_datamamanager+0x6a8>)
   850be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   850c0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   850c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850c6:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   850c8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850cc:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   850ce:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850d2:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   850d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850d8:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   850da:	f44f 73c8 	mov.w	r3, #400	; 0x190
   850de:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   850e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850e4:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   850e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850ea:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   850ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850f0:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   850f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850f6:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   850f8:	f107 010c 	add.w	r1, r7, #12
   850fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   85100:	220e      	movs	r2, #14
   85102:	4618      	mov	r0, r3
   85104:	4b03      	ldr	r3, [pc, #12]	; (85114 <cl_datamamanager+0x6ac>)
   85106:	4798      	blx	r3
   85108:	4603      	mov	r3, r0
   8510a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8510e:	e03f      	b.n	85190 <cl_datamamanager+0x728>
   85110:	20072654 	.word	0x20072654
   85114:	0009b805 	.word	0x0009b805
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   85118:	4b9b      	ldr	r3, [pc, #620]	; (85388 <cl_datamamanager+0x920>)
   8511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   8511e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85120:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85124:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   85126:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8512a:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   8512c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85130:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85136:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   85138:	4b93      	ldr	r3, [pc, #588]	; (85388 <cl_datamamanager+0x920>)
   8513a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   8513e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85140:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85144:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   85146:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8514a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8514c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85150:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85152:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85156:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   85158:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   8515c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8515e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85162:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85164:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85168:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8516a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8516e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85170:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85174:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   85176:	f107 010c 	add.w	r1, r7, #12
   8517a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   8517e:	220e      	movs	r2, #14
   85180:	4618      	mov	r0, r3
   85182:	4b82      	ldr	r3, [pc, #520]	; (8538c <cl_datamamanager+0x924>)
   85184:	4798      	blx	r3
   85186:	4603      	mov	r3, r0
   85188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8518c:	e000      	b.n	85190 <cl_datamamanager+0x728>
						
						default:break;
   8518e:	bf00      	nop
					}
					
				}
		

				break;
   85190:	e001      	b.n	85196 <cl_datamamanager+0x72e>
				
				default:
				break;
   85192:	bf00      	nop
   85194:	e0ef      	b.n	85376 <cl_datamamanager+0x90e>
					}
					
				}
		

				break;
   85196:	bf00      	nop
				
				default:
				break;
			}
		}
		break;
   85198:	e0ed      	b.n	85376 <cl_datamamanager+0x90e>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   8519a:	4b7d      	ldr	r3, [pc, #500]	; (85390 <cl_datamamanager+0x928>)
   8519c:	7e1b      	ldrb	r3, [r3, #24]
   8519e:	2b00      	cmp	r3, #0
   851a0:	f000 80eb 	beq.w	8537a <cl_datamamanager+0x912>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   851a4:	4b7a      	ldr	r3, [pc, #488]	; (85390 <cl_datamamanager+0x928>)
   851a6:	791b      	ldrb	r3, [r3, #4]
   851a8:	2b12      	cmp	r3, #18
   851aa:	d000      	beq.n	851ae <cl_datamamanager+0x746>
						break;

						default:break;
					}
				break;
				default:break;
   851ac:	e0e0      	b.n	85370 <cl_datamamanager+0x908>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   851ae:	4b78      	ldr	r3, [pc, #480]	; (85390 <cl_datamamanager+0x928>)
   851b0:	795b      	ldrb	r3, [r3, #5]
   851b2:	2b25      	cmp	r3, #37	; 0x25
   851b4:	d818      	bhi.n	851e8 <cl_datamamanager+0x780>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   851b6:	4b76      	ldr	r3, [pc, #472]	; (85390 <cl_datamamanager+0x928>)
   851b8:	795b      	ldrb	r3, [r3, #5]
   851ba:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   851bc:	4b74      	ldr	r3, [pc, #464]	; (85390 <cl_datamamanager+0x928>)
   851be:	799b      	ldrb	r3, [r3, #6]
   851c0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   851c4:	4b72      	ldr	r3, [pc, #456]	; (85390 <cl_datamamanager+0x928>)
   851c6:	79db      	ldrb	r3, [r3, #7]
   851c8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   851cc:	4b70      	ldr	r3, [pc, #448]	; (85390 <cl_datamamanager+0x928>)
   851ce:	7a1b      	ldrb	r3, [r3, #8]
   851d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   851d4:	4b6e      	ldr	r3, [pc, #440]	; (85390 <cl_datamamanager+0x928>)
   851d6:	7a5b      	ldrb	r3, [r3, #9]
   851d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   851dc:	7b7b      	ldrb	r3, [r7, #13]
   851de:	4619      	mov	r1, r3
   851e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   851e2:	4a69      	ldr	r2, [pc, #420]	; (85388 <cl_datamamanager+0x920>)
   851e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   851e8:	4b69      	ldr	r3, [pc, #420]	; (85390 <cl_datamamanager+0x928>)
   851ea:	795b      	ldrb	r3, [r3, #5]
   851ec:	3b05      	subs	r3, #5
   851ee:	2b20      	cmp	r3, #32
   851f0:	f200 80bc 	bhi.w	8536c <cl_datamamanager+0x904>
   851f4:	a201      	add	r2, pc, #4	; (adr r2, 851fc <cl_datamamanager+0x794>)
   851f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851fa:	bf00      	nop
   851fc:	00085281 	.word	0x00085281
   85200:	00085289 	.word	0x00085289
   85204:	0008536d 	.word	0x0008536d
   85208:	0008536d 	.word	0x0008536d
   8520c:	0008536d 	.word	0x0008536d
   85210:	0008536d 	.word	0x0008536d
   85214:	00085291 	.word	0x00085291
   85218:	00085299 	.word	0x00085299
   8521c:	000852a9 	.word	0x000852a9
   85220:	0008536d 	.word	0x0008536d
   85224:	0008536d 	.word	0x0008536d
   85228:	0008536d 	.word	0x0008536d
   8522c:	0008536d 	.word	0x0008536d
   85230:	0008536d 	.word	0x0008536d
   85234:	0008536d 	.word	0x0008536d
   85238:	0008536d 	.word	0x0008536d
   8523c:	000852b1 	.word	0x000852b1
   85240:	0008536d 	.word	0x0008536d
   85244:	0008536d 	.word	0x0008536d
   85248:	000852b9 	.word	0x000852b9
   8524c:	000852c9 	.word	0x000852c9
   85250:	000852d9 	.word	0x000852d9
   85254:	000852e9 	.word	0x000852e9
   85258:	000852f9 	.word	0x000852f9
   8525c:	00085309 	.word	0x00085309
   85260:	0008536d 	.word	0x0008536d
   85264:	0008536d 	.word	0x0008536d
   85268:	0008536d 	.word	0x0008536d
   8526c:	0008536d 	.word	0x0008536d
   85270:	00085321 	.word	0x00085321
   85274:	00085333 	.word	0x00085333
   85278:	00085345 	.word	0x00085345
   8527c:	00085355 	.word	0x00085355
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   85280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85282:	4a41      	ldr	r2, [pc, #260]	; (85388 <cl_datamamanager+0x920>)
   85284:	6153      	str	r3, [r2, #20]
						break;
   85286:	e072      	b.n	8536e <cl_datamamanager+0x906>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   85288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8528a:	4a3f      	ldr	r2, [pc, #252]	; (85388 <cl_datamamanager+0x920>)
   8528c:	6193      	str	r3, [r2, #24]
						break;
   8528e:	e06e      	b.n	8536e <cl_datamamanager+0x906>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   85290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85292:	4a3d      	ldr	r2, [pc, #244]	; (85388 <cl_datamamanager+0x920>)
   85294:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   85296:	e06a      	b.n	8536e <cl_datamamanager+0x906>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   85298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8529a:	4a3e      	ldr	r2, [pc, #248]	; (85394 <cl_datamamanager+0x92c>)
   8529c:	fba2 2303 	umull	r2, r3, r2, r3
   852a0:	08db      	lsrs	r3, r3, #3
   852a2:	4a39      	ldr	r2, [pc, #228]	; (85388 <cl_datamamanager+0x920>)
   852a4:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   852a6:	e062      	b.n	8536e <cl_datamamanager+0x906>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   852a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852aa:	4a37      	ldr	r2, [pc, #220]	; (85388 <cl_datamamanager+0x920>)
   852ac:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   852ae:	e05e      	b.n	8536e <cl_datamamanager+0x906>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   852b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852b2:	4a35      	ldr	r2, [pc, #212]	; (85388 <cl_datamamanager+0x920>)
   852b4:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   852b6:	e05a      	b.n	8536e <cl_datamamanager+0x906>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word);
   852b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852ba:	4b37      	ldr	r3, [pc, #220]	; (85398 <cl_datamamanager+0x930>)
   852bc:	4610      	mov	r0, r2
   852be:	4798      	blx	r3
   852c0:	4602      	mov	r2, r0
   852c2:	4b36      	ldr	r3, [pc, #216]	; (8539c <cl_datamamanager+0x934>)
   852c4:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   852c6:	e052      	b.n	8536e <cl_datamamanager+0x906>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word);
   852c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852ca:	4b33      	ldr	r3, [pc, #204]	; (85398 <cl_datamamanager+0x930>)
   852cc:	4610      	mov	r0, r2
   852ce:	4798      	blx	r3
   852d0:	4602      	mov	r2, r0
   852d2:	4b32      	ldr	r3, [pc, #200]	; (8539c <cl_datamamanager+0x934>)
   852d4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   852d6:	e04a      	b.n	8536e <cl_datamamanager+0x906>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   852d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852da:	4b2f      	ldr	r3, [pc, #188]	; (85398 <cl_datamamanager+0x930>)
   852dc:	4610      	mov	r0, r2
   852de:	4798      	blx	r3
   852e0:	4602      	mov	r2, r0
   852e2:	4b2e      	ldr	r3, [pc, #184]	; (8539c <cl_datamamanager+0x934>)
   852e4:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   852e6:	e042      	b.n	8536e <cl_datamamanager+0x906>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   852e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852ea:	4b2b      	ldr	r3, [pc, #172]	; (85398 <cl_datamamanager+0x930>)
   852ec:	4610      	mov	r0, r2
   852ee:	4798      	blx	r3
   852f0:	4602      	mov	r2, r0
   852f2:	4b2a      	ldr	r3, [pc, #168]	; (8539c <cl_datamamanager+0x934>)
   852f4:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   852f6:	e03a      	b.n	8536e <cl_datamamanager+0x906>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  (datastream.word);
   852f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   852fa:	4b27      	ldr	r3, [pc, #156]	; (85398 <cl_datamamanager+0x930>)
   852fc:	4610      	mov	r0, r2
   852fe:	4798      	blx	r3
   85300:	4602      	mov	r2, r0
   85302:	4b26      	ldr	r3, [pc, #152]	; (8539c <cl_datamamanager+0x934>)
   85304:	615a      	str	r2, [r3, #20]
						break;
   85306:	e032      	b.n	8536e <cl_datamamanager+0x906>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  (datastream.word)/100;
   85308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8530a:	4a25      	ldr	r2, [pc, #148]	; (853a0 <cl_datamamanager+0x938>)
   8530c:	fba2 2303 	umull	r2, r3, r2, r3
   85310:	095a      	lsrs	r2, r3, #5
   85312:	4b21      	ldr	r3, [pc, #132]	; (85398 <cl_datamamanager+0x930>)
   85314:	4610      	mov	r0, r2
   85316:	4798      	blx	r3
   85318:	4602      	mov	r2, r0
   8531a:	4b20      	ldr	r3, [pc, #128]	; (8539c <cl_datamamanager+0x934>)
   8531c:	611a      	str	r2, [r3, #16]
						break;
   8531e:	e026      	b.n	8536e <cl_datamamanager+0x906>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word/10;
   85320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85322:	4a1c      	ldr	r2, [pc, #112]	; (85394 <cl_datamamanager+0x92c>)
   85324:	fba2 2303 	umull	r2, r3, r2, r3
   85328:	08db      	lsrs	r3, r3, #3
   8532a:	b21a      	sxth	r2, r3
   8532c:	4b1b      	ldr	r3, [pc, #108]	; (8539c <cl_datamamanager+0x934>)
   8532e:	801a      	strh	r2, [r3, #0]
						break;
   85330:	e01d      	b.n	8536e <cl_datamamanager+0x906>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word/10;
   85332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85334:	4a17      	ldr	r2, [pc, #92]	; (85394 <cl_datamamanager+0x92c>)
   85336:	fba2 2303 	umull	r2, r3, r2, r3
   8533a:	08db      	lsrs	r3, r3, #3
   8533c:	b21a      	sxth	r2, r3
   8533e:	4b17      	ldr	r3, [pc, #92]	; (8539c <cl_datamamanager+0x934>)
   85340:	805a      	strh	r2, [r3, #2]
						break;
   85342:	e014      	b.n	8536e <cl_datamamanager+0x906>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   85344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85346:	4b14      	ldr	r3, [pc, #80]	; (85398 <cl_datamamanager+0x930>)
   85348:	4610      	mov	r0, r2
   8534a:	4798      	blx	r3
   8534c:	4602      	mov	r2, r0
   8534e:	4b13      	ldr	r3, [pc, #76]	; (8539c <cl_datamamanager+0x934>)
   85350:	60da      	str	r2, [r3, #12]
						break;
   85352:	e00c      	b.n	8536e <cl_datamamanager+0x906>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word)/100;
   85354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85356:	4a12      	ldr	r2, [pc, #72]	; (853a0 <cl_datamamanager+0x938>)
   85358:	fba2 2303 	umull	r2, r3, r2, r3
   8535c:	095a      	lsrs	r2, r3, #5
   8535e:	4b0e      	ldr	r3, [pc, #56]	; (85398 <cl_datamamanager+0x930>)
   85360:	4610      	mov	r0, r2
   85362:	4798      	blx	r3
   85364:	4602      	mov	r2, r0
   85366:	4b0d      	ldr	r3, [pc, #52]	; (8539c <cl_datamamanager+0x934>)
   85368:	609a      	str	r2, [r3, #8]
						break;
   8536a:	e000      	b.n	8536e <cl_datamamanager+0x906>

						default:break;
   8536c:	bf00      	nop
					}
				break;
   8536e:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   85370:	e003      	b.n	8537a <cl_datamamanager+0x912>
		
		case EVT_TICK_SEC :
		
		
		
		break;
   85372:	bf00      	nop
   85374:	e002      	b.n	8537c <cl_datamamanager+0x914>
				
				default:
				break;
			}
		}
		break;
   85376:	bf00      	nop
   85378:	e000      	b.n	8537c <cl_datamamanager+0x914>
				default:break;
			}
							
							
		}
		break;
   8537a:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   8537c:	2300      	movs	r3, #0
}
   8537e:	4618      	mov	r0, r3
   85380:	3748      	adds	r7, #72	; 0x48
   85382:	46bd      	mov	sp, r7
   85384:	bd80      	pop	{r7, pc}
   85386:	bf00      	nop
   85388:	20072654 	.word	0x20072654
   8538c:	0009b805 	.word	0x0009b805
   85390:	200723e8 	.word	0x200723e8
   85394:	cccccccd 	.word	0xcccccccd
   85398:	000a64e1 	.word	0x000a64e1
   8539c:	200720f4 	.word	0x200720f4
   853a0:	51eb851f 	.word	0x51eb851f

000853a4 <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   853a4:	b480      	push	{r7}
   853a6:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   853a8:	4b2a      	ldr	r3, [pc, #168]	; (85454 <Cl_dlsis_init+0xb0>)
   853aa:	2200      	movs	r2, #0
   853ac:	601a      	str	r2, [r3, #0]
   853ae:	4b2a      	ldr	r3, [pc, #168]	; (85458 <Cl_dlsis_init+0xb4>)
   853b0:	2200      	movs	r2, #0
   853b2:	601a      	str	r2, [r3, #0]
   853b4:	4b29      	ldr	r3, [pc, #164]	; (8545c <Cl_dlsis_init+0xb8>)
   853b6:	2200      	movs	r2, #0
   853b8:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   853ba:	4b29      	ldr	r3, [pc, #164]	; (85460 <Cl_dlsis_init+0xbc>)
   853bc:	2200      	movs	r2, #0
   853be:	601a      	str	r2, [r3, #0]
   853c0:	4b28      	ldr	r3, [pc, #160]	; (85464 <Cl_dlsis_init+0xc0>)
   853c2:	2200      	movs	r2, #0
   853c4:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   853c6:	4b28      	ldr	r3, [pc, #160]	; (85468 <Cl_dlsis_init+0xc4>)
   853c8:	2200      	movs	r2, #0
   853ca:	701a      	strb	r2, [r3, #0]
   853cc:	4b27      	ldr	r3, [pc, #156]	; (8546c <Cl_dlsis_init+0xc8>)
   853ce:	2200      	movs	r2, #0
   853d0:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   853d2:	4b27      	ldr	r3, [pc, #156]	; (85470 <Cl_dlsis_init+0xcc>)
   853d4:	2200      	movs	r2, #0
   853d6:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   853d8:	4b26      	ldr	r3, [pc, #152]	; (85474 <Cl_dlsis_init+0xd0>)
   853da:	2200      	movs	r2, #0
   853dc:	801a      	strh	r2, [r3, #0]
   853de:	4b26      	ldr	r3, [pc, #152]	; (85478 <Cl_dlsis_init+0xd4>)
   853e0:	2200      	movs	r2, #0
   853e2:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   853e4:	4b25      	ldr	r3, [pc, #148]	; (8547c <Cl_dlsis_init+0xd8>)
   853e6:	2200      	movs	r2, #0
   853e8:	801a      	strh	r2, [r3, #0]
   853ea:	4b25      	ldr	r3, [pc, #148]	; (85480 <Cl_dlsis_init+0xdc>)
   853ec:	2200      	movs	r2, #0
   853ee:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   853f0:	4b24      	ldr	r3, [pc, #144]	; (85484 <Cl_dlsis_init+0xe0>)
   853f2:	2200      	movs	r2, #0
   853f4:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   853f6:	4b24      	ldr	r3, [pc, #144]	; (85488 <Cl_dlsis_init+0xe4>)
   853f8:	2201      	movs	r2, #1
   853fa:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   853fc:	4b23      	ldr	r3, [pc, #140]	; (8548c <Cl_dlsis_init+0xe8>)
   853fe:	2200      	movs	r2, #0
   85400:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   85402:	4b23      	ldr	r3, [pc, #140]	; (85490 <Cl_dlsis_init+0xec>)
   85404:	f04f 0200 	mov.w	r2, #0
   85408:	601a      	str	r2, [r3, #0]
   8540a:	4b22      	ldr	r3, [pc, #136]	; (85494 <Cl_dlsis_init+0xf0>)
   8540c:	f04f 0200 	mov.w	r2, #0
   85410:	601a      	str	r2, [r3, #0]
   85412:	4b21      	ldr	r3, [pc, #132]	; (85498 <Cl_dlsis_init+0xf4>)
   85414:	f04f 0200 	mov.w	r2, #0
   85418:	601a      	str	r2, [r3, #0]
   8541a:	4b20      	ldr	r3, [pc, #128]	; (8549c <Cl_dlsis_init+0xf8>)
   8541c:	f04f 0200 	mov.w	r2, #0
   85420:	601a      	str	r2, [r3, #0]
   85422:	4b1f      	ldr	r3, [pc, #124]	; (854a0 <Cl_dlsis_init+0xfc>)
   85424:	f04f 0200 	mov.w	r2, #0
   85428:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   8542a:	4b1e      	ldr	r3, [pc, #120]	; (854a4 <Cl_dlsis_init+0x100>)
   8542c:	f04f 0200 	mov.w	r2, #0
   85430:	601a      	str	r2, [r3, #0]
   85432:	4b1d      	ldr	r3, [pc, #116]	; (854a8 <Cl_dlsis_init+0x104>)
   85434:	f04f 0200 	mov.w	r2, #0
   85438:	601a      	str	r2, [r3, #0]
   8543a:	4b1c      	ldr	r3, [pc, #112]	; (854ac <Cl_dlsis_init+0x108>)
   8543c:	f04f 0200 	mov.w	r2, #0
   85440:	601a      	str	r2, [r3, #0]
   85442:	4b1b      	ldr	r3, [pc, #108]	; (854b0 <Cl_dlsis_init+0x10c>)
   85444:	f04f 0200 	mov.w	r2, #0
   85448:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   8544a:	2300      	movs	r3, #0
 }
   8544c:	4618      	mov	r0, r3
   8544e:	46bd      	mov	sp, r7
   85450:	bc80      	pop	{r7}
   85452:	4770      	bx	lr
   85454:	20071928 	.word	0x20071928
   85458:	2007192c 	.word	0x2007192c
   8545c:	20071930 	.word	0x20071930
   85460:	20071934 	.word	0x20071934
   85464:	20071938 	.word	0x20071938
   85468:	2007193c 	.word	0x2007193c
   8546c:	2007193d 	.word	0x2007193d
   85470:	2007216c 	.word	0x2007216c
   85474:	2007193e 	.word	0x2007193e
   85478:	20071940 	.word	0x20071940
   8547c:	20072168 	.word	0x20072168
   85480:	2007216e 	.word	0x2007216e
   85484:	20071942 	.word	0x20071942
   85488:	20071943 	.word	0x20071943
   8548c:	20071944 	.word	0x20071944
   85490:	20071948 	.word	0x20071948
   85494:	2007194c 	.word	0x2007194c
   85498:	20071950 	.word	0x20071950
   8549c:	20071954 	.word	0x20071954
   854a0:	20071958 	.word	0x20071958
   854a4:	2007195c 	.word	0x2007195c
   854a8:	20071960 	.word	0x20071960
   854ac:	20071964 	.word	0x20071964
   854b0:	20071968 	.word	0x20071968

000854b4 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   854b4:	b580      	push	{r7, lr}
   854b6:	b098      	sub	sp, #96	; 0x60
   854b8:	af00      	add	r7, sp, #0
   854ba:	4603      	mov	r3, r0
   854bc:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   854be:	2300      	movs	r3, #0
   854c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   854c4:	2300      	movs	r3, #0
   854c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   854ca:	2300      	movs	r3, #0
   854cc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
   854d0:	2300      	movs	r3, #0
   854d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
   854d6:	2300      	movs	r3, #0
   854d8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   854dc:	2300      	movs	r3, #0
   854de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   854e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
   854e6:	2200      	movs	r2, #0
   854e8:	601a      	str	r2, [r3, #0]
   854ea:	605a      	str	r2, [r3, #4]
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   854ec:	2351      	movs	r3, #81	; 0x51
   854ee:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
Cl_Uint8Type data = 0;
   854f2:	2300      	movs	r3, #0
   854f4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
Cl_Uint16Type tempcount=0;
   854f8:	2300      	movs	r3, #0
   854fa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
float temp;
//static float apt=0, vpt=0;
StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   854fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
   85502:	2200      	movs	r2, #0
   85504:	601a      	str	r2, [r3, #0]
   85506:	711a      	strb	r2, [r3, #4]


Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   85508:	f107 024f 	add.w	r2, r7, #79	; 0x4f
   8550c:	79fb      	ldrb	r3, [r7, #7]
   8550e:	4611      	mov	r1, r2
   85510:	4618      	mov	r0, r3
   85512:	4bb8      	ldr	r3, [pc, #736]	; (857f4 <Cl_Dlsis_controller+0x340>)
   85514:	4798      	blx	r3
   85516:	4603      	mov	r3, r0
   85518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	
	switch(cl_dlsis_event)
   8551c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85520:	3b11      	subs	r3, #17
   85522:	2b4b      	cmp	r3, #75	; 0x4b
   85524:	f200 81a3 	bhi.w	8586e <Cl_Dlsis_controller+0x3ba>
   85528:	a201      	add	r2, pc, #4	; (adr r2, 85530 <Cl_Dlsis_controller+0x7c>)
   8552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8552e:	bf00      	nop
   85530:	0008586f 	.word	0x0008586f
   85534:	0008586f 	.word	0x0008586f
   85538:	00085661 	.word	0x00085661
   8553c:	0008586f 	.word	0x0008586f
   85540:	0008586f 	.word	0x0008586f
   85544:	0008586f 	.word	0x0008586f
   85548:	0008586f 	.word	0x0008586f
   8554c:	0008586f 	.word	0x0008586f
   85550:	0008586f 	.word	0x0008586f
   85554:	0008586f 	.word	0x0008586f
   85558:	0008586f 	.word	0x0008586f
   8555c:	0008586f 	.word	0x0008586f
   85560:	00085759 	.word	0x00085759
   85564:	00085729 	.word	0x00085729
   85568:	00085741 	.word	0x00085741
   8556c:	00085679 	.word	0x00085679
   85570:	000856b9 	.word	0x000856b9
   85574:	0008571f 	.word	0x0008571f
   85578:	0008566f 	.word	0x0008566f
   8557c:	0008586f 	.word	0x0008586f
   85580:	0008586f 	.word	0x0008586f
   85584:	0008586f 	.word	0x0008586f
   85588:	0008586f 	.word	0x0008586f
   8558c:	0008586f 	.word	0x0008586f
   85590:	0008586f 	.word	0x0008586f
   85594:	0008586f 	.word	0x0008586f
   85598:	0008586f 	.word	0x0008586f
   8559c:	0008586f 	.word	0x0008586f
   855a0:	0008586f 	.word	0x0008586f
   855a4:	0008586f 	.word	0x0008586f
   855a8:	0008586f 	.word	0x0008586f
   855ac:	0008586f 	.word	0x0008586f
   855b0:	0008586f 	.word	0x0008586f
   855b4:	0008586f 	.word	0x0008586f
   855b8:	0008586f 	.word	0x0008586f
   855bc:	0008586f 	.word	0x0008586f
   855c0:	0008586f 	.word	0x0008586f
   855c4:	0008586f 	.word	0x0008586f
   855c8:	0008586f 	.word	0x0008586f
   855cc:	0008586f 	.word	0x0008586f
   855d0:	0008586f 	.word	0x0008586f
   855d4:	0008586f 	.word	0x0008586f
   855d8:	0008586f 	.word	0x0008586f
   855dc:	0008586f 	.word	0x0008586f
   855e0:	0008586f 	.word	0x0008586f
   855e4:	0008586f 	.word	0x0008586f
   855e8:	0008586f 	.word	0x0008586f
   855ec:	0008586f 	.word	0x0008586f
   855f0:	0008586f 	.word	0x0008586f
   855f4:	0008586f 	.word	0x0008586f
   855f8:	0008586f 	.word	0x0008586f
   855fc:	0008586f 	.word	0x0008586f
   85600:	0008586f 	.word	0x0008586f
   85604:	0008586f 	.word	0x0008586f
   85608:	0008586f 	.word	0x0008586f
   8560c:	0008586f 	.word	0x0008586f
   85610:	0008586f 	.word	0x0008586f
   85614:	0008586f 	.word	0x0008586f
   85618:	0008586f 	.word	0x0008586f
   8561c:	0008586f 	.word	0x0008586f
   85620:	0008586f 	.word	0x0008586f
   85624:	0008586f 	.word	0x0008586f
   85628:	0008586f 	.word	0x0008586f
   8562c:	0008586f 	.word	0x0008586f
   85630:	0008586f 	.word	0x0008586f
   85634:	0008586f 	.word	0x0008586f
   85638:	0008586f 	.word	0x0008586f
   8563c:	0008586f 	.word	0x0008586f
   85640:	0008586f 	.word	0x0008586f
   85644:	0008586f 	.word	0x0008586f
   85648:	0008586f 	.word	0x0008586f
   8564c:	0008586f 	.word	0x0008586f
   85650:	0008586f 	.word	0x0008586f
   85654:	0008586f 	.word	0x0008586f
   85658:	00085797 	.word	0x00085797
   8565c:	00085815 	.word	0x00085815
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   85660:	2002      	movs	r0, #2
   85662:	4b65      	ldr	r3, [pc, #404]	; (857f8 <Cl_Dlsis_controller+0x344>)
   85664:	4798      	blx	r3
   85666:	4603      	mov	r3, r0
   85668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   8566c:	e10a      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		
		
		case EVENT_DLSIS_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   8566e:	2100      	movs	r1, #0
   85670:	2007      	movs	r0, #7
   85672:	4b62      	ldr	r3, [pc, #392]	; (857fc <Cl_Dlsis_controller+0x348>)
   85674:	4798      	blx	r3
		break;
   85676:	e105      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
		
		
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   85678:	4b61      	ldr	r3, [pc, #388]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8567a:	7e1b      	ldrb	r3, [r3, #24]
   8567c:	2b00      	cmp	r3, #0
   8567e:	f000 80f8 	beq.w	85872 <Cl_Dlsis_controller+0x3be>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85682:	4b5f      	ldr	r3, [pc, #380]	; (85800 <Cl_Dlsis_controller+0x34c>)
   85684:	791b      	ldrb	r3, [r3, #4]
   85686:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8568a:	4b5d      	ldr	r3, [pc, #372]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8568c:	795b      	ldrb	r3, [r3, #5]
   8568e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85692:	4b5b      	ldr	r3, [pc, #364]	; (85800 <Cl_Dlsis_controller+0x34c>)
   85694:	799b      	ldrb	r3, [r3, #6]
   85696:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8569a:	4b59      	ldr	r3, [pc, #356]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8569c:	79db      	ldrb	r3, [r3, #7]
   8569e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   856a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   856a4:	461a      	mov	r2, r3
   856a6:	4b57      	ldr	r3, [pc, #348]	; (85804 <Cl_Dlsis_controller+0x350>)
   856a8:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   856aa:	4b56      	ldr	r3, [pc, #344]	; (85804 <Cl_Dlsis_controller+0x350>)
   856ac:	69db      	ldr	r3, [r3, #28]
   856ae:	4619      	mov	r1, r3
   856b0:	2006      	movs	r0, #6
   856b2:	4b52      	ldr	r3, [pc, #328]	; (857fc <Cl_Dlsis_controller+0x348>)
   856b4:	4798      	blx	r3
			}
		break;
   856b6:	e0dc      	b.n	85872 <Cl_Dlsis_controller+0x3be>
		case EVENT_DLSIS_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   856b8:	4b51      	ldr	r3, [pc, #324]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856ba:	7e1b      	ldrb	r3, [r3, #24]
   856bc:	2b00      	cmp	r3, #0
   856be:	f000 80da 	beq.w	85876 <Cl_Dlsis_controller+0x3c2>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   856c2:	4b4f      	ldr	r3, [pc, #316]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856c4:	795b      	ldrb	r3, [r3, #5]
   856c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   856ca:	4b4d      	ldr	r3, [pc, #308]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856cc:	799b      	ldrb	r3, [r3, #6]
   856ce:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   856d2:	4b4b      	ldr	r3, [pc, #300]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856d4:	79db      	ldrb	r3, [r3, #7]
   856d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   856da:	4b49      	ldr	r3, [pc, #292]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856dc:	7a1b      	ldrb	r3, [r3, #8]
   856de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   856e2:	4b47      	ldr	r3, [pc, #284]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856e4:	791b      	ldrb	r3, [r3, #4]
   856e6:	2b01      	cmp	r3, #1
   856e8:	d104      	bne.n	856f4 <Cl_Dlsis_controller+0x240>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   856ea:	2100      	movs	r1, #0
   856ec:	2001      	movs	r0, #1
   856ee:	4b43      	ldr	r3, [pc, #268]	; (857fc <Cl_Dlsis_controller+0x348>)
   856f0:	4798      	blx	r3
			}
			
		}
		
		
		break;
   856f2:	e0c0      	b.n	85876 <Cl_Dlsis_controller+0x3c2>
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   856f4:	4b42      	ldr	r3, [pc, #264]	; (85800 <Cl_Dlsis_controller+0x34c>)
   856f6:	791b      	ldrb	r3, [r3, #4]
   856f8:	2b02      	cmp	r3, #2
   856fa:	d104      	bne.n	85706 <Cl_Dlsis_controller+0x252>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   856fc:	2100      	movs	r1, #0
   856fe:	2004      	movs	r0, #4
   85700:	4b3e      	ldr	r3, [pc, #248]	; (857fc <Cl_Dlsis_controller+0x348>)
   85702:	4798      	blx	r3
			}
			
		}
		
		
		break;
   85704:	e0b7      	b.n	85876 <Cl_Dlsis_controller+0x3c2>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   85706:	4b3e      	ldr	r3, [pc, #248]	; (85800 <Cl_Dlsis_controller+0x34c>)
   85708:	791b      	ldrb	r3, [r3, #4]
   8570a:	2b00      	cmp	r3, #0
   8570c:	f040 80b3 	bne.w	85876 <Cl_Dlsis_controller+0x3c2>
			{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   85710:	4b3c      	ldr	r3, [pc, #240]	; (85804 <Cl_Dlsis_controller+0x350>)
   85712:	69db      	ldr	r3, [r3, #28]
   85714:	4619      	mov	r1, r3
   85716:	200a      	movs	r0, #10
   85718:	4b38      	ldr	r3, [pc, #224]	; (857fc <Cl_Dlsis_controller+0x348>)
   8571a:	4798      	blx	r3
			}
			
		}
		
		
		break;
   8571c:	e0ab      	b.n	85876 <Cl_Dlsis_controller+0x3c2>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   8571e:	2100      	movs	r1, #0
   85720:	2009      	movs	r0, #9
   85722:	4b36      	ldr	r3, [pc, #216]	; (857fc <Cl_Dlsis_controller+0x348>)
   85724:	4798      	blx	r3
		break;
   85726:	e0ad      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   85728:	2100      	movs	r1, #0
   8572a:	2002      	movs	r0, #2
   8572c:	4b36      	ldr	r3, [pc, #216]	; (85808 <Cl_Dlsis_controller+0x354>)
   8572e:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   85730:	2101      	movs	r1, #1
   85732:	2001      	movs	r0, #1
   85734:	4b35      	ldr	r3, [pc, #212]	; (8580c <Cl_Dlsis_controller+0x358>)
   85736:	4798      	blx	r3
   85738:	4603      	mov	r3, r0
   8573a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   8573e:	e0a1      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   85740:	2100      	movs	r1, #0
   85742:	2004      	movs	r0, #4
   85744:	4b30      	ldr	r3, [pc, #192]	; (85808 <Cl_Dlsis_controller+0x354>)
   85746:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   85748:	2100      	movs	r1, #0
   8574a:	2001      	movs	r0, #1
   8574c:	4b2f      	ldr	r3, [pc, #188]	; (8580c <Cl_Dlsis_controller+0x358>)
   8574e:	4798      	blx	r3
   85750:	4603      	mov	r3, r0
   85752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   85756:	e095      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   85758:	4b29      	ldr	r3, [pc, #164]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8575a:	7e1b      	ldrb	r3, [r3, #24]
   8575c:	2b00      	cmp	r3, #0
   8575e:	f000 808c 	beq.w	8587a <Cl_Dlsis_controller+0x3c6>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   85762:	4b27      	ldr	r3, [pc, #156]	; (85800 <Cl_Dlsis_controller+0x34c>)
   85764:	791b      	ldrb	r3, [r3, #4]
   85766:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8576a:	4b25      	ldr	r3, [pc, #148]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8576c:	795b      	ldrb	r3, [r3, #5]
   8576e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   85772:	4b23      	ldr	r3, [pc, #140]	; (85800 <Cl_Dlsis_controller+0x34c>)
   85774:	799b      	ldrb	r3, [r3, #6]
   85776:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8577a:	4b21      	ldr	r3, [pc, #132]	; (85800 <Cl_Dlsis_controller+0x34c>)
   8577c:	79db      	ldrb	r3, [r3, #7]
   8577e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   85782:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   85784:	4619      	mov	r1, r3
   85786:	2001      	movs	r0, #1
   85788:	4b1f      	ldr	r3, [pc, #124]	; (85808 <Cl_Dlsis_controller+0x354>)
   8578a:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   8578c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8578e:	461a      	mov	r2, r3
   85790:	4b1c      	ldr	r3, [pc, #112]	; (85804 <Cl_Dlsis_controller+0x350>)
   85792:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   85794:	e071      	b.n	8587a <Cl_Dlsis_controller+0x3c6>
		
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
			
			if(Treatdata[ID_bloodrate] <= 450){
   85796:	4b1b      	ldr	r3, [pc, #108]	; (85804 <Cl_Dlsis_controller+0x350>)
   85798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8579a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   8579e:	d86e      	bhi.n	8587e <Cl_Dlsis_controller+0x3ca>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   857a0:	4b18      	ldr	r3, [pc, #96]	; (85804 <Cl_Dlsis_controller+0x350>)
   857a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857a4:	330a      	adds	r3, #10
   857a6:	4a17      	ldr	r2, [pc, #92]	; (85804 <Cl_Dlsis_controller+0x350>)
   857a8:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   857aa:	4b16      	ldr	r3, [pc, #88]	; (85804 <Cl_Dlsis_controller+0x350>)
   857ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857ae:	4619      	mov	r1, r3
   857b0:	2001      	movs	r0, #1
   857b2:	4b15      	ldr	r3, [pc, #84]	; (85808 <Cl_Dlsis_controller+0x354>)
   857b4:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   857b6:	230f      	movs	r3, #15
   857b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   857bc:	4b11      	ldr	r3, [pc, #68]	; (85804 <Cl_Dlsis_controller+0x350>)
   857be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   857c0:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   857c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   857c6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   857ca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   857ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   857d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   857d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   857da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   857de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   857e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
   857e6:	2205      	movs	r2, #5
   857e8:	4619      	mov	r1, r3
   857ea:	202a      	movs	r0, #42	; 0x2a
   857ec:	4b08      	ldr	r3, [pc, #32]	; (85810 <Cl_Dlsis_controller+0x35c>)
   857ee:	4798      	blx	r3
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   857f0:	e045      	b.n	8587e <Cl_Dlsis_controller+0x3ca>
   857f2:	bf00      	nop
   857f4:	000867c5 	.word	0x000867c5
   857f8:	000832a1 	.word	0x000832a1
   857fc:	00093861 	.word	0x00093861
   85800:	200723e8 	.word	0x200723e8
   85804:	20072654 	.word	0x20072654
   85808:	0009316d 	.word	0x0009316d
   8580c:	00082de1 	.word	0x00082de1
   85810:	0009b805 	.word	0x0009b805
			
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
			
			if(Treatdata[ID_bloodrate] >= 100){
   85814:	4bba      	ldr	r3, [pc, #744]	; (85b00 <Cl_Dlsis_controller+0x64c>)
   85816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85818:	2b63      	cmp	r3, #99	; 0x63
   8581a:	d932      	bls.n	85882 <Cl_Dlsis_controller+0x3ce>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   8581c:	4bb8      	ldr	r3, [pc, #736]	; (85b00 <Cl_Dlsis_controller+0x64c>)
   8581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85820:	3b0a      	subs	r3, #10
   85822:	4ab7      	ldr	r2, [pc, #732]	; (85b00 <Cl_Dlsis_controller+0x64c>)
   85824:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   85826:	4bb6      	ldr	r3, [pc, #728]	; (85b00 <Cl_Dlsis_controller+0x64c>)
   85828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8582a:	4619      	mov	r1, r3
   8582c:	2001      	movs	r0, #1
   8582e:	4bb5      	ldr	r3, [pc, #724]	; (85b04 <Cl_Dlsis_controller+0x650>)
   85830:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   85832:	230f      	movs	r3, #15
   85834:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   85838:	4bb1      	ldr	r3, [pc, #708]	; (85b00 <Cl_Dlsis_controller+0x64c>)
   8583a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8583c:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   8583e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85842:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   85846:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8584a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   8584e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   85856:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8585a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   8585e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   85862:	2205      	movs	r2, #5
   85864:	4619      	mov	r1, r3
   85866:	202a      	movs	r0, #42	; 0x2a
   85868:	4ba7      	ldr	r3, [pc, #668]	; (85b08 <Cl_Dlsis_controller+0x654>)
   8586a:	4798      	blx	r3
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   8586c:	e009      	b.n	85882 <Cl_Dlsis_controller+0x3ce>
			
		
		
		default:break;
   8586e:	bf00      	nop
   85870:	e008      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
				Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
			}
		break;
   85872:	bf00      	nop
   85874:	e006      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
			}
			
		}
		
		
		break;
   85876:	bf00      	nop
   85878:	e004      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   8587a:	bf00      	nop
   8587c:	e002      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   8587e:	bf00      	nop
   85880:	e000      	b.n	85884 <Cl_Dlsis_controller+0x3d0>
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   85882:	bf00      	nop
		
		
		default:break;
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   85884:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85888:	2b13      	cmp	r3, #19
   8588a:	d115      	bne.n	858b8 <Cl_Dlsis_controller+0x404>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   8588c:	200c      	movs	r0, #12
   8588e:	4b9f      	ldr	r3, [pc, #636]	; (85b0c <Cl_Dlsis_controller+0x658>)
   85890:	4798      	blx	r3
   85892:	4603      	mov	r3, r0
   85894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   85898:	200e      	movs	r0, #14
   8589a:	4b9c      	ldr	r3, [pc, #624]	; (85b0c <Cl_Dlsis_controller+0x658>)
   8589c:	4798      	blx	r3
   8589e:	4603      	mov	r3, r0
   858a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   858a4:	200d      	movs	r0, #13
   858a6:	4b99      	ldr	r3, [pc, #612]	; (85b0c <Cl_Dlsis_controller+0x658>)
   858a8:	4798      	blx	r3
   858aa:	4603      	mov	r3, r0
   858ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   858b0:	4b97      	ldr	r3, [pc, #604]	; (85b10 <Cl_Dlsis_controller+0x65c>)
   858b2:	781a      	ldrb	r2, [r3, #0]
   858b4:	4b97      	ldr	r3, [pc, #604]	; (85b14 <Cl_Dlsis_controller+0x660>)
   858b6:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   858b8:	4b95      	ldr	r3, [pc, #596]	; (85b10 <Cl_Dlsis_controller+0x65c>)
   858ba:	781b      	ldrb	r3, [r3, #0]
   858bc:	2b0a      	cmp	r3, #10
   858be:	f200 8775 	bhi.w	867ac <Cl_Dlsis_controller+0x12f8>
   858c2:	a201      	add	r2, pc, #4	; (adr r2, 858c8 <Cl_Dlsis_controller+0x414>)
   858c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   858c8:	000858f5 	.word	0x000858f5
   858cc:	000867ad 	.word	0x000867ad
   858d0:	00085b65 	.word	0x00085b65
   858d4:	00085be5 	.word	0x00085be5
   858d8:	00085e09 	.word	0x00085e09
   858dc:	00085d97 	.word	0x00085d97
   858e0:	000864af 	.word	0x000864af
   858e4:	00086281 	.word	0x00086281
   858e8:	00086205 	.word	0x00086205
   858ec:	00086301 	.word	0x00086301
   858f0:	0008639d 	.word	0x0008639d
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   858f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   858f8:	3b02      	subs	r3, #2
   858fa:	2b14      	cmp	r3, #20
   858fc:	f200 8129 	bhi.w	85b52 <Cl_Dlsis_controller+0x69e>
   85900:	a201      	add	r2, pc, #4	; (adr r2, 85908 <Cl_Dlsis_controller+0x454>)
   85902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85906:	bf00      	nop
   85908:	0008595d 	.word	0x0008595d
   8590c:	000859ab 	.word	0x000859ab
   85910:	00085b53 	.word	0x00085b53
   85914:	00085b41 	.word	0x00085b41
   85918:	00085b53 	.word	0x00085b53
   8591c:	00085b53 	.word	0x00085b53
   85920:	00085b53 	.word	0x00085b53
   85924:	00085b53 	.word	0x00085b53
   85928:	00085b53 	.word	0x00085b53
   8592c:	00085b53 	.word	0x00085b53
   85930:	00085b53 	.word	0x00085b53
   85934:	00085b53 	.word	0x00085b53
   85938:	00085b53 	.word	0x00085b53
   8593c:	00085b53 	.word	0x00085b53
   85940:	00085b53 	.word	0x00085b53
   85944:	00085b53 	.word	0x00085b53
   85948:	00085b53 	.word	0x00085b53
   8594c:	00085b53 	.word	0x00085b53
   85950:	00085b53 	.word	0x00085b53
   85954:	00085b53 	.word	0x00085b53
   85958:	00085b47 	.word	0x00085b47
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   8595c:	4b6e      	ldr	r3, [pc, #440]	; (85b18 <Cl_Dlsis_controller+0x664>)
   8595e:	7e1b      	ldrb	r3, [r3, #24]
   85960:	2b00      	cmp	r3, #0
   85962:	f000 80f9 	beq.w	85b58 <Cl_Dlsis_controller+0x6a4>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85966:	4b6c      	ldr	r3, [pc, #432]	; (85b18 <Cl_Dlsis_controller+0x664>)
   85968:	791b      	ldrb	r3, [r3, #4]
   8596a:	2b04      	cmp	r3, #4
   8596c:	d000      	beq.n	85970 <Cl_Dlsis_controller+0x4bc>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   8596e:	e01b      	b.n	859a8 <Cl_Dlsis_controller+0x4f4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85970:	2316      	movs	r3, #22
   85972:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85976:	2304      	movs	r3, #4
   85978:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   8597c:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85980:	3301      	adds	r3, #1
   85982:	4619      	mov	r1, r3
   85984:	2004      	movs	r0, #4
   85986:	4b65      	ldr	r3, [pc, #404]	; (85b1c <Cl_Dlsis_controller+0x668>)
   85988:	4798      	blx	r3
   8598a:	4603      	mov	r3, r0
   8598c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85990:	f107 0144 	add.w	r1, r7, #68	; 0x44
   85994:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   85998:	2202      	movs	r2, #2
   8599a:	4618      	mov	r0, r3
   8599c:	4b5a      	ldr	r3, [pc, #360]	; (85b08 <Cl_Dlsis_controller+0x654>)
   8599e:	4798      	blx	r3
   859a0:	4603      	mov	r3, r0
   859a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   859a6:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   859a8:	e0d6      	b.n	85b58 <Cl_Dlsis_controller+0x6a4>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   859aa:	4b5b      	ldr	r3, [pc, #364]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859ac:	7e1b      	ldrb	r3, [r3, #24]
   859ae:	2b00      	cmp	r3, #0
   859b0:	f000 80d5 	beq.w	85b5e <Cl_Dlsis_controller+0x6aa>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   859b4:	4b58      	ldr	r3, [pc, #352]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859b6:	795b      	ldrb	r3, [r3, #5]
   859b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   859bc:	4b56      	ldr	r3, [pc, #344]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859be:	799b      	ldrb	r3, [r3, #6]
   859c0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   859c4:	4b54      	ldr	r3, [pc, #336]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859c6:	79db      	ldrb	r3, [r3, #7]
   859c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   859cc:	4b52      	ldr	r3, [pc, #328]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859ce:	7a1b      	ldrb	r3, [r3, #8]
   859d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   859d4:	4b50      	ldr	r3, [pc, #320]	; (85b18 <Cl_Dlsis_controller+0x664>)
   859d6:	791b      	ldrb	r3, [r3, #4]
   859d8:	3b05      	subs	r3, #5
   859da:	2b20      	cmp	r3, #32
   859dc:	f200 80ae 	bhi.w	85b3c <Cl_Dlsis_controller+0x688>
   859e0:	a201      	add	r2, pc, #4	; (adr r2, 859e8 <Cl_Dlsis_controller+0x534>)
   859e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859e6:	bf00      	nop
   859e8:	00085b3d 	.word	0x00085b3d
   859ec:	00085b3d 	.word	0x00085b3d
   859f0:	00085b3d 	.word	0x00085b3d
   859f4:	00085b3d 	.word	0x00085b3d
   859f8:	00085b3d 	.word	0x00085b3d
   859fc:	00085b3d 	.word	0x00085b3d
   85a00:	00085b3d 	.word	0x00085b3d
   85a04:	00085b3d 	.word	0x00085b3d
   85a08:	00085b3d 	.word	0x00085b3d
   85a0c:	00085b3d 	.word	0x00085b3d
   85a10:	00085b3d 	.word	0x00085b3d
   85a14:	00085b3d 	.word	0x00085b3d
   85a18:	00085b3d 	.word	0x00085b3d
   85a1c:	00085b3d 	.word	0x00085b3d
   85a20:	00085b3d 	.word	0x00085b3d
   85a24:	00085b3d 	.word	0x00085b3d
   85a28:	00085b3d 	.word	0x00085b3d
   85a2c:	00085b3d 	.word	0x00085b3d
   85a30:	00085b3d 	.word	0x00085b3d
   85a34:	00085a6d 	.word	0x00085a6d
   85a38:	00085a85 	.word	0x00085a85
   85a3c:	00085a9d 	.word	0x00085a9d
   85a40:	00085aad 	.word	0x00085aad
   85a44:	00085abd 	.word	0x00085abd
   85a48:	00085acd 	.word	0x00085acd
   85a4c:	00085b3d 	.word	0x00085b3d
   85a50:	00085b3d 	.word	0x00085b3d
   85a54:	00085b3d 	.word	0x00085b3d
   85a58:	00085b3d 	.word	0x00085b3d
   85a5c:	00085add 	.word	0x00085add
   85a60:	00085ae7 	.word	0x00085ae7
   85a64:	00085af1 	.word	0x00085af1
   85a68:	00085b2d 	.word	0x00085b2d
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85a6e:	4a2c      	ldr	r2, [pc, #176]	; (85b20 <Cl_Dlsis_controller+0x66c>)
   85a70:	fba2 2303 	umull	r2, r3, r2, r3
   85a74:	08da      	lsrs	r2, r3, #3
   85a76:	4b2b      	ldr	r3, [pc, #172]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85a78:	4610      	mov	r0, r2
   85a7a:	4798      	blx	r3
   85a7c:	4602      	mov	r2, r0
   85a7e:	4b2a      	ldr	r3, [pc, #168]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85a80:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   85a82:	e05c      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85a86:	4a26      	ldr	r2, [pc, #152]	; (85b20 <Cl_Dlsis_controller+0x66c>)
   85a88:	fba2 2303 	umull	r2, r3, r2, r3
   85a8c:	08da      	lsrs	r2, r3, #3
   85a8e:	4b25      	ldr	r3, [pc, #148]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85a90:	4610      	mov	r0, r2
   85a92:	4798      	blx	r3
   85a94:	4602      	mov	r2, r0
   85a96:	4b24      	ldr	r3, [pc, #144]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85a98:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   85a9a:	e050      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85a9e:	4b21      	ldr	r3, [pc, #132]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85aa0:	4610      	mov	r0, r2
   85aa2:	4798      	blx	r3
   85aa4:	4602      	mov	r2, r0
   85aa6:	4b20      	ldr	r3, [pc, #128]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85aa8:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   85aaa:	e048      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85aae:	4b1d      	ldr	r3, [pc, #116]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85ab0:	4610      	mov	r0, r2
   85ab2:	4798      	blx	r3
   85ab4:	4602      	mov	r2, r0
   85ab6:	4b1c      	ldr	r3, [pc, #112]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85ab8:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   85aba:	e040      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85abe:	4b19      	ldr	r3, [pc, #100]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85ac0:	4610      	mov	r0, r2
   85ac2:	4798      	blx	r3
   85ac4:	4602      	mov	r2, r0
   85ac6:	4b18      	ldr	r3, [pc, #96]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85ac8:	615a      	str	r2, [r3, #20]
					break;
   85aca:	e038      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85ace:	4b15      	ldr	r3, [pc, #84]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85ad0:	4610      	mov	r0, r2
   85ad2:	4798      	blx	r3
   85ad4:	4602      	mov	r2, r0
   85ad6:	4b14      	ldr	r3, [pc, #80]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85ad8:	611a      	str	r2, [r3, #16]
					break;
   85ada:	e030      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85ade:	b21a      	sxth	r2, r3
   85ae0:	4b11      	ldr	r3, [pc, #68]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85ae2:	801a      	strh	r2, [r3, #0]
					break;
   85ae4:	e02b      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85ae8:	b21a      	sxth	r2, r3
   85aea:	4b0f      	ldr	r3, [pc, #60]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85aec:	805a      	strh	r2, [r3, #2]
					break;
   85aee:	e026      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85af2:	4b0c      	ldr	r3, [pc, #48]	; (85b24 <Cl_Dlsis_controller+0x670>)
   85af4:	4610      	mov	r0, r2
   85af6:	4798      	blx	r3
   85af8:	4602      	mov	r2, r0
   85afa:	4b0b      	ldr	r3, [pc, #44]	; (85b28 <Cl_Dlsis_controller+0x674>)
   85afc:	60da      	str	r2, [r3, #12]
					break;
   85afe:	e01e      	b.n	85b3e <Cl_Dlsis_controller+0x68a>
   85b00:	20072654 	.word	0x20072654
   85b04:	0009316d 	.word	0x0009316d
   85b08:	0009b805 	.word	0x0009b805
   85b0c:	00082ed5 	.word	0x00082ed5
   85b10:	20071924 	.word	0x20071924
   85b14:	2007264e 	.word	0x2007264e
   85b18:	200723e8 	.word	0x200723e8
   85b1c:	0009a331 	.word	0x0009a331
   85b20:	cccccccd 	.word	0xcccccccd
   85b24:	000a64e1 	.word	0x000a64e1
   85b28:	200720f4 	.word	0x200720f4
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85b2e:	4ba3      	ldr	r3, [pc, #652]	; (85dbc <Cl_Dlsis_controller+0x908>)
   85b30:	4610      	mov	r0, r2
   85b32:	4798      	blx	r3
   85b34:	4602      	mov	r2, r0
   85b36:	4ba2      	ldr	r3, [pc, #648]	; (85dc0 <Cl_Dlsis_controller+0x90c>)
   85b38:	609a      	str	r2, [r3, #8]
					break;
   85b3a:	e000      	b.n	85b3e <Cl_Dlsis_controller+0x68a>

					default:break;
   85b3c:	bf00      	nop
				}
			}
			
			
			break;
   85b3e:	e00e      	b.n	85b5e <Cl_Dlsis_controller+0x6aa>
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   85b40:	4ba0      	ldr	r3, [pc, #640]	; (85dc4 <Cl_Dlsis_controller+0x910>)
   85b42:	4798      	blx	r3
			break;
   85b44:	e00c      	b.n	85b60 <Cl_Dlsis_controller+0x6ac>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85b46:	4ba0      	ldr	r3, [pc, #640]	; (85dc8 <Cl_Dlsis_controller+0x914>)
   85b48:	4798      	blx	r3
   85b4a:	4603      	mov	r3, r0
   85b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
   85b50:	e006      	b.n	85b60 <Cl_Dlsis_controller+0x6ac>
			default:
			break;
   85b52:	bf00      	nop
   85b54:	f000 be2d 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
							
						default:
						break;
					}
				}
			break;
   85b58:	bf00      	nop
   85b5a:	f000 be2a 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
					default:break;
				}
			}
			
			
			break;
   85b5e:	bf00      	nop
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
			break;
			default:
			break;
		}
		break;
   85b60:	f000 be27 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   85b64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85b68:	2b12      	cmp	r3, #18
   85b6a:	d000      	beq.n	85b6e <Cl_Dlsis_controller+0x6ba>
						
					}
				break;
				
				
				default:break;
   85b6c:	e038      	b.n	85be0 <Cl_Dlsis_controller+0x72c>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
					
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   85b6e:	4897      	ldr	r0, [pc, #604]	; (85dcc <Cl_Dlsis_controller+0x918>)
   85b70:	4b97      	ldr	r3, [pc, #604]	; (85dd0 <Cl_Dlsis_controller+0x91c>)
   85b72:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   85b74:	2300      	movs	r3, #0
   85b76:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
					//Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					if( (temp == 0))
   85b7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   85b7e:	2b00      	cmp	r3, #0
   85b80:	d106      	bne.n	85b90 <Cl_Dlsis_controller+0x6dc>
					{
						
					//	sv_cntrl_disable_bypass();
				bypass_flag = 0;
   85b82:	4b94      	ldr	r3, [pc, #592]	; (85dd4 <Cl_Dlsis_controller+0x920>)
   85b84:	2200      	movs	r2, #0
   85b86:	701a      	strb	r2, [r3, #0]
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   85b88:	4b93      	ldr	r3, [pc, #588]	; (85dd8 <Cl_Dlsis_controller+0x924>)
   85b8a:	2203      	movs	r2, #3
   85b8c:	701a      	strb	r2, [r3, #0]
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
						sv_cntrl_enable_bypass();
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
				break;
   85b8e:	e026      	b.n	85bde <Cl_Dlsis_controller+0x72a>
				bypass_flag = 0;
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
				
					}
					else{
						Cl_Uint8Type data[3] ={0, 0};
   85b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
   85b94:	2100      	movs	r1, #0
   85b96:	460a      	mov	r2, r1
   85b98:	801a      	strh	r2, [r3, #0]
   85b9a:	460a      	mov	r2, r1
   85b9c:	709a      	strb	r2, [r3, #2]
						data[0] = (Cl_Uint8Type)1;
   85b9e:	2301      	movs	r3, #1
   85ba0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   85ba4:	2301      	movs	r3, #1
   85ba6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						data[2] = (Cl_Uint8Type)CRITICAL;
   85baa:	2302      	movs	r3, #2
   85bac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						command = CON_TX_COMMAND_ALERT;
   85bb0:	234f      	movs	r3, #79	; 0x4f
   85bb2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						 cl_wait(10);
   85bb6:	200a      	movs	r0, #10
   85bb8:	4b88      	ldr	r3, [pc, #544]	; (85ddc <Cl_Dlsis_controller+0x928>)
   85bba:	4798      	blx	r3
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   85bbc:	f107 0124 	add.w	r1, r7, #36	; 0x24
   85bc0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   85bc4:	2203      	movs	r2, #3
   85bc6:	4618      	mov	r0, r3
   85bc8:	4b85      	ldr	r3, [pc, #532]	; (85de0 <Cl_Dlsis_controller+0x92c>)
   85bca:	4798      	blx	r3
   85bcc:	4603      	mov	r3, r0
   85bce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						sv_cntrl_enable_bypass();
   85bd2:	4b84      	ldr	r3, [pc, #528]	; (85de4 <Cl_Dlsis_controller+0x930>)
   85bd4:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   85bd6:	2100      	movs	r1, #0
   85bd8:	2004      	movs	r0, #4
   85bda:	4b83      	ldr	r3, [pc, #524]	; (85de8 <Cl_Dlsis_controller+0x934>)
   85bdc:	4798      	blx	r3
						
					}
				break;
   85bde:	bf00      	nop
				
				
				default:break;
			}

		break;
   85be0:	f000 bde7 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   85be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85be8:	2b12      	cmp	r3, #18
   85bea:	d000      	beq.n	85bee <Cl_Dlsis_controller+0x73a>
						
					}
					
					}
			break;
			default:break;
   85bec:	e0d1      	b.n	85d92 <Cl_Dlsis_controller+0x8de>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   85bee:	2300      	movs	r3, #0
   85bf0:	847b      	strh	r3, [r7, #34]	; 0x22
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85bf2:	f107 0322 	add.w	r3, r7, #34	; 0x22
   85bf6:	4619      	mov	r1, r3
   85bf8:	200a      	movs	r0, #10
   85bfa:	4b7c      	ldr	r3, [pc, #496]	; (85dec <Cl_Dlsis_controller+0x938>)
   85bfc:	4798      	blx	r3
					if( temp == 0)  // need to change as per the blood detector status
   85bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   85c00:	2b00      	cmp	r3, #0
   85c02:	f040 80bf 	bne.w	85d84 <Cl_Dlsis_controller+0x8d0>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   85c06:	2208      	movs	r2, #8
   85c08:	4979      	ldr	r1, [pc, #484]	; (85df0 <Cl_Dlsis_controller+0x93c>)
   85c0a:	2018      	movs	r0, #24
   85c0c:	4b74      	ldr	r3, [pc, #464]	; (85de0 <Cl_Dlsis_controller+0x92c>)
   85c0e:	4798      	blx	r3

         					Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   85c10:	4b78      	ldr	r3, [pc, #480]	; (85df4 <Cl_Dlsis_controller+0x940>)
   85c12:	69db      	ldr	r3, [r3, #28]
   85c14:	653b      	str	r3, [r7, #80]	; 0x50
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,temp1);
   85c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   85c18:	4619      	mov	r1, r3
   85c1a:	200a      	movs	r0, #10
   85c1c:	4b76      	ldr	r3, [pc, #472]	; (85df8 <Cl_Dlsis_controller+0x944>)
   85c1e:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   85c20:	4b76      	ldr	r3, [pc, #472]	; (85dfc <Cl_Dlsis_controller+0x948>)
   85c22:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   85c24:	2100      	movs	r1, #0
   85c26:	2002      	movs	r0, #2
   85c28:	4b6f      	ldr	r3, [pc, #444]	; (85de8 <Cl_Dlsis_controller+0x934>)
   85c2a:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   85c2c:	2101      	movs	r1, #1
   85c2e:	2001      	movs	r0, #1
   85c30:	4b73      	ldr	r3, [pc, #460]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c32:	4798      	blx	r3
   85c34:	4603      	mov	r3, r0
   85c36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   85c3a:	2101      	movs	r1, #1
   85c3c:	2024      	movs	r0, #36	; 0x24
   85c3e:	4b70      	ldr	r3, [pc, #448]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c40:	4798      	blx	r3
   85c42:	4603      	mov	r3, r0
   85c44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   85c48:	2101      	movs	r1, #1
   85c4a:	2023      	movs	r0, #35	; 0x23
   85c4c:	4b6c      	ldr	r3, [pc, #432]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c4e:	4798      	blx	r3
   85c50:	4603      	mov	r3, r0
   85c52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
   85c56:	2101      	movs	r1, #1
   85c58:	2026      	movs	r0, #38	; 0x26
   85c5a:	4b69      	ldr	r3, [pc, #420]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c5c:	4798      	blx	r3
   85c5e:	4603      	mov	r3, r0
   85c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true );
   85c64:	2101      	movs	r1, #1
   85c66:	2025      	movs	r0, #37	; 0x25
   85c68:	4b65      	ldr	r3, [pc, #404]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c6a:	4798      	blx	r3
   85c6c:	4603      	mov	r3, r0
   85c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85c72:	2101      	movs	r1, #1
   85c74:	2015      	movs	r0, #21
   85c76:	4b62      	ldr	r3, [pc, #392]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c78:	4798      	blx	r3
   85c7a:	4603      	mov	r3, r0
   85c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   85c80:	2101      	movs	r1, #1
   85c82:	2016      	movs	r0, #22
   85c84:	4b5e      	ldr	r3, [pc, #376]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c86:	4798      	blx	r3
   85c88:	4603      	mov	r3, r0
   85c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   85c8e:	2101      	movs	r1, #1
   85c90:	2017      	movs	r0, #23
   85c92:	4b5b      	ldr	r3, [pc, #364]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85c94:	4798      	blx	r3
   85c96:	4603      	mov	r3, r0
   85c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85c9c:	2101      	movs	r1, #1
   85c9e:	2018      	movs	r0, #24
   85ca0:	4b57      	ldr	r3, [pc, #348]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85ca2:	4798      	blx	r3
   85ca4:	4603      	mov	r3, r0
   85ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   85caa:	2101      	movs	r1, #1
   85cac:	2027      	movs	r0, #39	; 0x27
   85cae:	4b54      	ldr	r3, [pc, #336]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85cb0:	4798      	blx	r3
   85cb2:	4603      	mov	r3, r0
   85cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   85cb8:	2101      	movs	r1, #1
   85cba:	2028      	movs	r0, #40	; 0x28
   85cbc:	4b50      	ldr	r3, [pc, #320]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85cbe:	4798      	blx	r3
   85cc0:	4603      	mov	r3, r0
   85cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   85cc6:	2101      	movs	r1, #1
   85cc8:	2005      	movs	r0, #5
   85cca:	4b4d      	ldr	r3, [pc, #308]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85ccc:	4798      	blx	r3
   85cce:	4603      	mov	r3, r0
   85cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   85cd4:	2101      	movs	r1, #1
   85cd6:	2006      	movs	r0, #6
   85cd8:	4b49      	ldr	r3, [pc, #292]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85cda:	4798      	blx	r3
   85cdc:	4603      	mov	r3, r0
   85cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   85ce2:	2100      	movs	r1, #0
   85ce4:	2003      	movs	r0, #3
   85ce6:	4b46      	ldr	r3, [pc, #280]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85ce8:	4798      	blx	r3
   85cea:	4603      	mov	r3, r0
   85cec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   85cf0:	2100      	movs	r1, #0
   85cf2:	2004      	movs	r0, #4
   85cf4:	4b42      	ldr	r3, [pc, #264]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85cf6:	4798      	blx	r3
   85cf8:	4603      	mov	r3, r0
   85cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   85cfe:	2100      	movs	r1, #0
   85d00:	2007      	movs	r0, #7
   85d02:	4b3f      	ldr	r3, [pc, #252]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d04:	4798      	blx	r3
   85d06:	4603      	mov	r3, r0
   85d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   85d0c:	2100      	movs	r1, #0
   85d0e:	2008      	movs	r0, #8
   85d10:	4b3b      	ldr	r3, [pc, #236]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d12:	4798      	blx	r3
   85d14:	4603      	mov	r3, r0
   85d16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   85d1a:	2100      	movs	r1, #0
   85d1c:	2029      	movs	r0, #41	; 0x29
   85d1e:	4b38      	ldr	r3, [pc, #224]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d20:	4798      	blx	r3
   85d22:	4603      	mov	r3, r0
   85d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   85d28:	2100      	movs	r1, #0
   85d2a:	202b      	movs	r0, #43	; 0x2b
   85d2c:	4b34      	ldr	r3, [pc, #208]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d2e:	4798      	blx	r3
   85d30:	4603      	mov	r3, r0
   85d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true);
   85d36:	2101      	movs	r1, #1
   85d38:	202a      	movs	r0, #42	; 0x2a
   85d3a:	4b31      	ldr	r3, [pc, #196]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d3c:	4798      	blx	r3
   85d3e:	4603      	mov	r3, r0
   85d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   85d44:	2101      	movs	r1, #1
   85d46:	202c      	movs	r0, #44	; 0x2c
   85d48:	4b2d      	ldr	r3, [pc, #180]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d4a:	4798      	blx	r3
   85d4c:	4603      	mov	r3, r0
   85d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   85d52:	2100      	movs	r1, #0
   85d54:	2021      	movs	r0, #33	; 0x21
   85d56:	4b2a      	ldr	r3, [pc, #168]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d58:	4798      	blx	r3
   85d5a:	4603      	mov	r3, r0
   85d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   85d60:	2101      	movs	r1, #1
   85d62:	2013      	movs	r0, #19
   85d64:	4b26      	ldr	r3, [pc, #152]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d66:	4798      	blx	r3
   85d68:	4603      	mov	r3, r0
   85d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   85d6e:	2101      	movs	r1, #1
   85d70:	2014      	movs	r0, #20
   85d72:	4b23      	ldr	r3, [pc, #140]	; (85e00 <Cl_Dlsis_controller+0x94c>)
   85d74:	4798      	blx	r3
   85d76:	4603      	mov	r3, r0
   85d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   85d7c:	4b16      	ldr	r3, [pc, #88]	; (85dd8 <Cl_Dlsis_controller+0x924>)
   85d7e:	2204      	movs	r2, #4
   85d80:	701a      	strb	r2, [r3, #0]
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
					
					}
			break;
   85d82:	e005      	b.n	85d90 <Cl_Dlsis_controller+0x8dc>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					else{
						
						sv_cntrl_enable_bypass();
   85d84:	4b17      	ldr	r3, [pc, #92]	; (85de4 <Cl_Dlsis_controller+0x930>)
   85d86:	4798      	blx	r3
						
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   85d88:	2100      	movs	r1, #0
   85d8a:	2004      	movs	r0, #4
   85d8c:	4b16      	ldr	r3, [pc, #88]	; (85de8 <Cl_Dlsis_controller+0x934>)
   85d8e:	4798      	blx	r3
						
					}
					
					}
			break;
   85d90:	bf00      	nop
			default:break;
		}
		break;
   85d92:	f000 bd0e 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   85d96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85d9a:	2b13      	cmp	r3, #19
   85d9c:	d000      	beq.n	85da0 <Cl_Dlsis_controller+0x8ec>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   85d9e:	e00a      	b.n	85db6 <Cl_Dlsis_controller+0x902>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85da0:	4b18      	ldr	r3, [pc, #96]	; (85e04 <Cl_Dlsis_controller+0x950>)
   85da2:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   85da4:	f640 11c4 	movw	r1, #2500	; 0x9c4
   85da8:	2001      	movs	r0, #1
   85daa:	4b0f      	ldr	r3, [pc, #60]	; (85de8 <Cl_Dlsis_controller+0x934>)
   85dac:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   85dae:	4b0a      	ldr	r3, [pc, #40]	; (85dd8 <Cl_Dlsis_controller+0x924>)
   85db0:	2204      	movs	r2, #4
   85db2:	701a      	strb	r2, [r3, #0]
			break;
   85db4:	bf00      	nop
			default:break;
		}
		
		break;
   85db6:	f000 bcfc 	b.w	867b2 <Cl_Dlsis_controller+0x12fe>
   85dba:	bf00      	nop
   85dbc:	000a64e1 	.word	0x000a64e1
   85dc0:	200720f4 	.word	0x200720f4
   85dc4:	00087f55 	.word	0x00087f55
   85dc8:	00087429 	.word	0x00087429
   85dcc:	2007193d 	.word	0x2007193d
   85dd0:	00089239 	.word	0x00089239
   85dd4:	20071942 	.word	0x20071942
   85dd8:	20071924 	.word	0x20071924
   85ddc:	00093009 	.word	0x00093009
   85de0:	0009b805 	.word	0x0009b805
   85de4:	00099c55 	.word	0x00099c55
   85de8:	00095bbd 	.word	0x00095bbd
   85dec:	0008e6a1 	.word	0x0008e6a1
   85df0:	000a85a4 	.word	0x000a85a4
   85df4:	20072654 	.word	0x20072654
   85df8:	00093861 	.word	0x00093861
   85dfc:	00099c7d 	.word	0x00099c7d
   85e00:	00082de1 	.word	0x00082de1
   85e04:	00087471 	.word	0x00087471
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   85e08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85e0c:	3b02      	subs	r3, #2
   85e0e:	2b1d      	cmp	r3, #29
   85e10:	f200 84ce 	bhi.w	867b0 <Cl_Dlsis_controller+0x12fc>
   85e14:	a201      	add	r2, pc, #4	; (adr r2, 85e1c <Cl_Dlsis_controller+0x968>)
   85e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85e1a:	bf00      	nop
   85e1c:	00085ea1 	.word	0x00085ea1
   85e20:	00085eef 	.word	0x00085eef
   85e24:	000867b1 	.word	0x000867b1
   85e28:	000867b1 	.word	0x000867b1
   85e2c:	000861a1 	.word	0x000861a1
   85e30:	000861b7 	.word	0x000861b7
   85e34:	000861c3 	.word	0x000861c3
   85e38:	000861c9 	.word	0x000861c9
   85e3c:	000867b1 	.word	0x000867b1
   85e40:	000867b1 	.word	0x000867b1
   85e44:	000867b1 	.word	0x000867b1
   85e48:	000867b1 	.word	0x000867b1
   85e4c:	000867b1 	.word	0x000867b1
   85e50:	000867b1 	.word	0x000867b1
   85e54:	000867b1 	.word	0x000867b1
   85e58:	000861f5 	.word	0x000861f5
   85e5c:	000861f5 	.word	0x000861f5
   85e60:	000860b1 	.word	0x000860b1
   85e64:	0008607f 	.word	0x0008607f
   85e68:	000867b1 	.word	0x000867b1
   85e6c:	000861cf 	.word	0x000861cf
   85e70:	000861db 	.word	0x000861db
   85e74:	000867b1 	.word	0x000867b1
   85e78:	000867b1 	.word	0x000867b1
   85e7c:	000867b1 	.word	0x000867b1
   85e80:	000861f5 	.word	0x000861f5
   85e84:	000861f5 	.word	0x000861f5
   85e88:	000867b1 	.word	0x000867b1
   85e8c:	000867b1 	.word	0x000867b1
   85e90:	00085e95 	.word	0x00085e95
		{
			

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85e94:	4b7c      	ldr	r3, [pc, #496]	; (86088 <Cl_Dlsis_controller+0xbd4>)
   85e96:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85e98:	4b7c      	ldr	r3, [pc, #496]	; (8608c <Cl_Dlsis_controller+0xbd8>)
   85e9a:	2207      	movs	r2, #7
   85e9c:	701a      	strb	r2, [r3, #0]
			break;
   85e9e:	e1b0      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85ea0:	4b7b      	ldr	r3, [pc, #492]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85ea2:	7e1b      	ldrb	r3, [r3, #24]
   85ea4:	2b00      	cmp	r3, #0
   85ea6:	f000 81a7 	beq.w	861f8 <Cl_Dlsis_controller+0xd44>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85eaa:	4b79      	ldr	r3, [pc, #484]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85eac:	791b      	ldrb	r3, [r3, #4]
   85eae:	2b04      	cmp	r3, #4
   85eb0:	d000      	beq.n	85eb4 <Cl_Dlsis_controller+0xa00>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85eb2:	e01b      	b.n	85eec <Cl_Dlsis_controller+0xa38>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85eb4:	2316      	movs	r3, #22
   85eb6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85eba:	2304      	movs	r3, #4
   85ebc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85ec0:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85ec4:	3301      	adds	r3, #1
   85ec6:	4619      	mov	r1, r3
   85ec8:	2004      	movs	r0, #4
   85eca:	4b72      	ldr	r3, [pc, #456]	; (86094 <Cl_Dlsis_controller+0xbe0>)
   85ecc:	4798      	blx	r3
   85ece:	4603      	mov	r3, r0
   85ed0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85ed4:	f107 0144 	add.w	r1, r7, #68	; 0x44
   85ed8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   85edc:	2202      	movs	r2, #2
   85ede:	4618      	mov	r0, r3
   85ee0:	4b6d      	ldr	r3, [pc, #436]	; (86098 <Cl_Dlsis_controller+0xbe4>)
   85ee2:	4798      	blx	r3
   85ee4:	4603      	mov	r3, r0
   85ee6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   85eea:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85eec:	e184      	b.n	861f8 <Cl_Dlsis_controller+0xd44>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85eee:	4b68      	ldr	r3, [pc, #416]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85ef0:	7e1b      	ldrb	r3, [r3, #24]
   85ef2:	2b00      	cmp	r3, #0
   85ef4:	f000 8182 	beq.w	861fc <Cl_Dlsis_controller+0xd48>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85ef8:	4b65      	ldr	r3, [pc, #404]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85efa:	795b      	ldrb	r3, [r3, #5]
   85efc:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85efe:	4b64      	ldr	r3, [pc, #400]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85f00:	799b      	ldrb	r3, [r3, #6]
   85f02:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85f04:	4b62      	ldr	r3, [pc, #392]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85f06:	79db      	ldrb	r3, [r3, #7]
   85f08:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85f0a:	4b61      	ldr	r3, [pc, #388]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85f0c:	7a1b      	ldrb	r3, [r3, #8]
   85f0e:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85f10:	4b5f      	ldr	r3, [pc, #380]	; (86090 <Cl_Dlsis_controller+0xbdc>)
   85f12:	791b      	ldrb	r3, [r3, #4]
   85f14:	3b05      	subs	r3, #5
   85f16:	2b20      	cmp	r3, #32
   85f18:	f200 80af 	bhi.w	8607a <Cl_Dlsis_controller+0xbc6>
   85f1c:	a201      	add	r2, pc, #4	; (adr r2, 85f24 <Cl_Dlsis_controller+0xa70>)
   85f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85f22:	bf00      	nop
   85f24:	0008607b 	.word	0x0008607b
   85f28:	0008607b 	.word	0x0008607b
   85f2c:	0008607b 	.word	0x0008607b
   85f30:	0008607b 	.word	0x0008607b
   85f34:	0008607b 	.word	0x0008607b
   85f38:	0008607b 	.word	0x0008607b
   85f3c:	0008607b 	.word	0x0008607b
   85f40:	0008607b 	.word	0x0008607b
   85f44:	00085fa9 	.word	0x00085fa9
   85f48:	0008607b 	.word	0x0008607b
   85f4c:	0008607b 	.word	0x0008607b
   85f50:	0008607b 	.word	0x0008607b
   85f54:	0008607b 	.word	0x0008607b
   85f58:	0008607b 	.word	0x0008607b
   85f5c:	0008607b 	.word	0x0008607b
   85f60:	0008607b 	.word	0x0008607b
   85f64:	00085fc7 	.word	0x00085fc7
   85f68:	0008607b 	.word	0x0008607b
   85f6c:	0008607b 	.word	0x0008607b
   85f70:	00085fd7 	.word	0x00085fd7
   85f74:	00085fef 	.word	0x00085fef
   85f78:	00086007 	.word	0x00086007
   85f7c:	00086017 	.word	0x00086017
   85f80:	00086027 	.word	0x00086027
   85f84:	00086037 	.word	0x00086037
   85f88:	0008607b 	.word	0x0008607b
   85f8c:	0008607b 	.word	0x0008607b
   85f90:	0008607b 	.word	0x0008607b
   85f94:	0008607b 	.word	0x0008607b
   85f98:	00086047 	.word	0x00086047
   85f9c:	00086051 	.word	0x00086051
   85fa0:	0008605b 	.word	0x0008605b
   85fa4:	0008606b 	.word	0x0008606b
													case ID_setcond:
													break;
													case ID_ufrate:
													break;
													case ID_ufgoal:
													if(cl_temp.word == 0){
   85fa8:	69fb      	ldr	r3, [r7, #28]
   85faa:	2b00      	cmp	r3, #0
   85fac:	d103      	bne.n	85fb6 <Cl_Dlsis_controller+0xb02>
														cl_uf_controller(CL_UF_EVENT_STOP,0);
   85fae:	2100      	movs	r1, #0
   85fb0:	2004      	movs	r0, #4
   85fb2:	4b3a      	ldr	r3, [pc, #232]	; (8609c <Cl_Dlsis_controller+0xbe8>)
   85fb4:	4798      	blx	r3
													}
													Treatdata[ID_ufgoal] = cl_temp.word;
   85fb6:	69fb      	ldr	r3, [r7, #28]
   85fb8:	4a39      	ldr	r2, [pc, #228]	; (860a0 <Cl_Dlsis_controller+0xbec>)
   85fba:	6353      	str	r3, [r2, #52]	; 0x34
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85fbc:	2100      	movs	r1, #0
   85fbe:	2008      	movs	r0, #8
   85fc0:	4b36      	ldr	r3, [pc, #216]	; (8609c <Cl_Dlsis_controller+0xbe8>)
   85fc2:	4798      	blx	r3
													
													break;
   85fc4:	e05a      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_heparincheck:
													break;
													case ID_minufrate:
													break;
													case ID_treattime:
													Treatdata[ID_treattime] = cl_temp.word;
   85fc6:	69fb      	ldr	r3, [r7, #28]
   85fc8:	4a35      	ldr	r2, [pc, #212]	; (860a0 <Cl_Dlsis_controller+0xbec>)
   85fca:	6553      	str	r3, [r2, #84]	; 0x54
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   85fcc:	2100      	movs	r1, #0
   85fce:	2008      	movs	r0, #8
   85fd0:	4b32      	ldr	r3, [pc, #200]	; (8609c <Cl_Dlsis_controller+0xbe8>)
   85fd2:	4798      	blx	r3
													
													break;
   85fd4:	e052      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85fd6:	69fb      	ldr	r3, [r7, #28]
   85fd8:	4a32      	ldr	r2, [pc, #200]	; (860a4 <Cl_Dlsis_controller+0xbf0>)
   85fda:	fba2 2303 	umull	r2, r3, r2, r3
   85fde:	08da      	lsrs	r2, r3, #3
   85fe0:	4b31      	ldr	r3, [pc, #196]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   85fe2:	4610      	mov	r0, r2
   85fe4:	4798      	blx	r3
   85fe6:	4602      	mov	r2, r0
   85fe8:	4b30      	ldr	r3, [pc, #192]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   85fea:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   85fec:	e046      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85fee:	69fb      	ldr	r3, [r7, #28]
   85ff0:	4a2c      	ldr	r2, [pc, #176]	; (860a4 <Cl_Dlsis_controller+0xbf0>)
   85ff2:	fba2 2303 	umull	r2, r3, r2, r3
   85ff6:	08da      	lsrs	r2, r3, #3
   85ff8:	4b2b      	ldr	r3, [pc, #172]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   85ffa:	4610      	mov	r0, r2
   85ffc:	4798      	blx	r3
   85ffe:	4602      	mov	r2, r0
   86000:	4b2a      	ldr	r3, [pc, #168]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86002:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   86004:	e03a      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   86006:	69fa      	ldr	r2, [r7, #28]
   86008:	4b27      	ldr	r3, [pc, #156]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8600a:	4610      	mov	r0, r2
   8600c:	4798      	blx	r3
   8600e:	4602      	mov	r2, r0
   86010:	4b26      	ldr	r3, [pc, #152]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86012:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   86014:	e032      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   86016:	69fa      	ldr	r2, [r7, #28]
   86018:	4b23      	ldr	r3, [pc, #140]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8601a:	4610      	mov	r0, r2
   8601c:	4798      	blx	r3
   8601e:	4602      	mov	r2, r0
   86020:	4b22      	ldr	r3, [pc, #136]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86022:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   86024:	e02a      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   86026:	69fa      	ldr	r2, [r7, #28]
   86028:	4b1f      	ldr	r3, [pc, #124]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8602a:	4610      	mov	r0, r2
   8602c:	4798      	blx	r3
   8602e:	4602      	mov	r2, r0
   86030:	4b1e      	ldr	r3, [pc, #120]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86032:	615a      	str	r2, [r3, #20]
													break;
   86034:	e022      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86036:	69fa      	ldr	r2, [r7, #28]
   86038:	4b1b      	ldr	r3, [pc, #108]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8603a:	4610      	mov	r0, r2
   8603c:	4798      	blx	r3
   8603e:	4602      	mov	r2, r0
   86040:	4b1a      	ldr	r3, [pc, #104]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86042:	611a      	str	r2, [r3, #16]
													break;
   86044:	e01a      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   86046:	69fb      	ldr	r3, [r7, #28]
   86048:	b21a      	sxth	r2, r3
   8604a:	4b18      	ldr	r3, [pc, #96]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   8604c:	801a      	strh	r2, [r3, #0]
													break;
   8604e:	e015      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   86050:	69fb      	ldr	r3, [r7, #28]
   86052:	b21a      	sxth	r2, r3
   86054:	4b15      	ldr	r3, [pc, #84]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86056:	805a      	strh	r2, [r3, #2]
													break;
   86058:	e010      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   8605a:	69fa      	ldr	r2, [r7, #28]
   8605c:	4b12      	ldr	r3, [pc, #72]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8605e:	4610      	mov	r0, r2
   86060:	4798      	blx	r3
   86062:	4602      	mov	r2, r0
   86064:	4b11      	ldr	r3, [pc, #68]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86066:	60da      	str	r2, [r3, #12]
													break;
   86068:	e008      	b.n	8607c <Cl_Dlsis_controller+0xbc8>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   8606a:	69fa      	ldr	r2, [r7, #28]
   8606c:	4b0e      	ldr	r3, [pc, #56]	; (860a8 <Cl_Dlsis_controller+0xbf4>)
   8606e:	4610      	mov	r0, r2
   86070:	4798      	blx	r3
   86072:	4602      	mov	r2, r0
   86074:	4b0d      	ldr	r3, [pc, #52]	; (860ac <Cl_Dlsis_controller+0xbf8>)
   86076:	609a      	str	r2, [r3, #8]
													break;
   86078:	e000      	b.n	8607c <Cl_Dlsis_controller+0xbc8>

												default:break;
   8607a:	bf00      	nop
											}
										}
						
			break;
   8607c:	e0be      	b.n	861fc <Cl_Dlsis_controller+0xd48>
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			
			case EVENT_DLSIS_TICK_MINUTE:
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   8607e:	2100      	movs	r1, #0
   86080:	200a      	movs	r0, #10
   86082:	4b06      	ldr	r3, [pc, #24]	; (8609c <Cl_Dlsis_controller+0xbe8>)
   86084:	4798      	blx	r3
			break;
   86086:	e0bc      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
   86088:	000873d5 	.word	0x000873d5
   8608c:	20071924 	.word	0x20071924
   86090:	200723e8 	.word	0x200723e8
   86094:	0009a331 	.word	0x0009a331
   86098:	0009b805 	.word	0x0009b805
   8609c:	00095bbd 	.word	0x00095bbd
   860a0:	20072654 	.word	0x20072654
   860a4:	cccccccd 	.word	0xcccccccd
   860a8:	000a64e1 	.word	0x000a64e1
   860ac:	200720f4 	.word	0x200720f4
			
			case EVENT_DLSIS_TICK_SECOND:
		//	Cl_Dlsis_ResetAlertsforReassertion();
			//	UpdateHeaterControls();
			
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   860b0:	2100      	movs	r1, #0
   860b2:	200d      	movs	r0, #13
   860b4:	4b9d      	ldr	r3, [pc, #628]	; (8632c <Cl_Dlsis_controller+0xe78>)
   860b6:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   860b8:	4b9d      	ldr	r3, [pc, #628]	; (86330 <Cl_Dlsis_controller+0xe7c>)
   860ba:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   860bc:	4b9d      	ldr	r3, [pc, #628]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860be:	781b      	ldrb	r3, [r3, #0]
   860c0:	3301      	adds	r3, #1
   860c2:	b2da      	uxtb	r2, r3
   860c4:	4b9b      	ldr	r3, [pc, #620]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860c6:	701a      	strb	r2, [r3, #0]
				if ((DlsisTime.Cl_dlsissecondscounter == 30))
   860c8:	4b9a      	ldr	r3, [pc, #616]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860ca:	781b      	ldrb	r3, [r3, #0]
   860cc:	2b1e      	cmp	r3, #30
   860ce:	d101      	bne.n	860d4 <Cl_Dlsis_controller+0xc20>
				{
					//sv_cs_setpotvalue(1900);
					//flag_bc =0 ;
					Cl_Dlsis_ResetAlertsforReassertion();
   860d0:	4b99      	ldr	r3, [pc, #612]	; (86338 <Cl_Dlsis_controller+0xe84>)
   860d2:	4798      	blx	r3
				}
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   860d4:	4b97      	ldr	r3, [pc, #604]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860d6:	781b      	ldrb	r3, [r3, #0]
   860d8:	2b3c      	cmp	r3, #60	; 0x3c
   860da:	d13f      	bne.n	8615c <Cl_Dlsis_controller+0xca8>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   860dc:	4b97      	ldr	r3, [pc, #604]	; (8633c <Cl_Dlsis_controller+0xe88>)
   860de:	4798      	blx	r3
   860e0:	4603      	mov	r3, r0
   860e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					DlsisTime.Cl_dlsissecondscounter = 0;
   860e6:	4b93      	ldr	r3, [pc, #588]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860e8:	2200      	movs	r2, #0
   860ea:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   860ec:	4b91      	ldr	r3, [pc, #580]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860ee:	785b      	ldrb	r3, [r3, #1]
   860f0:	3301      	adds	r3, #1
   860f2:	b2da      	uxtb	r2, r3
   860f4:	4b8f      	ldr	r3, [pc, #572]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860f6:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   860f8:	4b8e      	ldr	r3, [pc, #568]	; (86334 <Cl_Dlsis_controller+0xe80>)
   860fa:	785b      	ldrb	r3, [r3, #1]
   860fc:	2b01      	cmp	r3, #1
   860fe:	d127      	bne.n	86150 <Cl_Dlsis_controller+0xc9c>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   86100:	2300      	movs	r3, #0
   86102:	837b      	strh	r3, [r7, #26]
   86104:	2300      	movs	r3, #0
   86106:	833b      	strh	r3, [r7, #24]
   86108:	2300      	movs	r3, #0
   8610a:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   8610c:	4b8c      	ldr	r3, [pc, #560]	; (86340 <Cl_Dlsis_controller+0xe8c>)
   8610e:	681a      	ldr	r2, [r3, #0]
   86110:	4b8c      	ldr	r3, [pc, #560]	; (86344 <Cl_Dlsis_controller+0xe90>)
   86112:	4610      	mov	r0, r2
   86114:	4798      	blx	r3
   86116:	4603      	mov	r3, r0
   86118:	b29b      	uxth	r3, r3
   8611a:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   8611c:	2204      	movs	r2, #4
   8611e:	498a      	ldr	r1, [pc, #552]	; (86348 <Cl_Dlsis_controller+0xe94>)
   86120:	2018      	movs	r0, #24
   86122:	4b8a      	ldr	r3, [pc, #552]	; (8634c <Cl_Dlsis_controller+0xe98>)
   86124:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   86126:	f107 031a 	add.w	r3, r7, #26
   8612a:	2202      	movs	r2, #2
   8612c:	4619      	mov	r1, r3
   8612e:	2019      	movs	r0, #25
   86130:	4b86      	ldr	r3, [pc, #536]	; (8634c <Cl_Dlsis_controller+0xe98>)
   86132:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   86134:	f107 0318 	add.w	r3, r7, #24
   86138:	2202      	movs	r2, #2
   8613a:	4619      	mov	r1, r3
   8613c:	2019      	movs	r0, #25
   8613e:	4b83      	ldr	r3, [pc, #524]	; (8634c <Cl_Dlsis_controller+0xe98>)
   86140:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   86142:	f107 0316 	add.w	r3, r7, #22
   86146:	2202      	movs	r2, #2
   86148:	4619      	mov	r1, r3
   8614a:	2019      	movs	r0, #25
   8614c:	4b7f      	ldr	r3, [pc, #508]	; (8634c <Cl_Dlsis_controller+0xe98>)
   8614e:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   86150:	4b78      	ldr	r3, [pc, #480]	; (86334 <Cl_Dlsis_controller+0xe80>)
   86152:	78db      	ldrb	r3, [r3, #3]
   86154:	3301      	adds	r3, #1
   86156:	b2da      	uxtb	r2, r3
   86158:	4b76      	ldr	r3, [pc, #472]	; (86334 <Cl_Dlsis_controller+0xe80>)
   8615a:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   8615c:	4b7c      	ldr	r3, [pc, #496]	; (86350 <Cl_Dlsis_controller+0xe9c>)
   8615e:	4798      	blx	r3
   86160:	4603      	mov	r3, r0
   86162:	2b00      	cmp	r3, #0
   86164:	d14c      	bne.n	86200 <Cl_Dlsis_controller+0xd4c>
				{
					sv_cntrl_setgreenalarm();
   86166:	4b7b      	ldr	r3, [pc, #492]	; (86354 <Cl_Dlsis_controller+0xea0>)
   86168:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   8616a:	4b7b      	ldr	r3, [pc, #492]	; (86358 <Cl_Dlsis_controller+0xea4>)
   8616c:	4798      	blx	r3
   8616e:	4603      	mov	r3, r0
   86170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					sv_cntrl_poweroffheater();
   86174:	4b79      	ldr	r3, [pc, #484]	; (8635c <Cl_Dlsis_controller+0xea8>)
   86176:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   86178:	2004      	movs	r0, #4
   8617a:	4b79      	ldr	r3, [pc, #484]	; (86360 <Cl_Dlsis_controller+0xeac>)
   8617c:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8617e:	2011      	movs	r0, #17
   86180:	4b78      	ldr	r3, [pc, #480]	; (86364 <Cl_Dlsis_controller+0xeb0>)
   86182:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   86184:	4b78      	ldr	r3, [pc, #480]	; (86368 <Cl_Dlsis_controller+0xeb4>)
   86186:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   86188:	2100      	movs	r1, #0
   8618a:	2004      	movs	r0, #4
   8618c:	4b77      	ldr	r3, [pc, #476]	; (8636c <Cl_Dlsis_controller+0xeb8>)
   8618e:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   86190:	2100      	movs	r1, #0
   86192:	200c      	movs	r0, #12
   86194:	4b65      	ldr	r3, [pc, #404]	; (8632c <Cl_Dlsis_controller+0xe78>)
   86196:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   86198:	4b75      	ldr	r3, [pc, #468]	; (86370 <Cl_Dlsis_controller+0xebc>)
   8619a:	2206      	movs	r2, #6
   8619c:	701a      	strb	r2, [r3, #0]
				}
			break;
   8619e:	e02f      	b.n	86200 <Cl_Dlsis_controller+0xd4c>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   861a0:	4b74      	ldr	r3, [pc, #464]	; (86374 <Cl_Dlsis_controller+0xec0>)
   861a2:	4798      	blx	r3
   861a4:	4603      	mov	r3, r0
   861a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_Dlsis_StopDialysis();
   861aa:	4b73      	ldr	r3, [pc, #460]	; (86378 <Cl_Dlsis_controller+0xec4>)
   861ac:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   861ae:	4b70      	ldr	r3, [pc, #448]	; (86370 <Cl_Dlsis_controller+0xebc>)
   861b0:	2209      	movs	r2, #9
   861b2:	701a      	strb	r2, [r3, #0]
			break;
   861b4:	e025      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   861b6:	4b71      	ldr	r3, [pc, #452]	; (8637c <Cl_Dlsis_controller+0xec8>)
   861b8:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   861ba:	4b6d      	ldr	r3, [pc, #436]	; (86370 <Cl_Dlsis_controller+0xebc>)
   861bc:	2207      	movs	r2, #7
   861be:	701a      	strb	r2, [r3, #0]
			break;
   861c0:	e01f      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   861c2:	4b6f      	ldr	r3, [pc, #444]	; (86380 <Cl_Dlsis_controller+0xecc>)
   861c4:	4798      	blx	r3
			break;
   861c6:	e01c      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   861c8:	4b6e      	ldr	r3, [pc, #440]	; (86384 <Cl_Dlsis_controller+0xed0>)
   861ca:	4798      	blx	r3
			break;
   861cc:	e019      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   861ce:	4b6e      	ldr	r3, [pc, #440]	; (86388 <Cl_Dlsis_controller+0xed4>)
   861d0:	4798      	blx	r3
   861d2:	4603      	mov	r3, r0
   861d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
   861d8:	e013      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   861da:	f107 034e 	add.w	r3, r7, #78	; 0x4e
   861de:	4619      	mov	r1, r3
   861e0:	2011      	movs	r0, #17
   861e2:	4b6a      	ldr	r3, [pc, #424]	; (8638c <Cl_Dlsis_controller+0xed8>)
   861e4:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   861e6:	f107 034d 	add.w	r3, r7, #77	; 0x4d
   861ea:	4619      	mov	r1, r3
   861ec:	200e      	movs	r0, #14
   861ee:	4b67      	ldr	r3, [pc, #412]	; (8638c <Cl_Dlsis_controller+0xed8>)
   861f0:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   861f2:	e006      	b.n	86202 <Cl_Dlsis_controller+0xd4e>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   861f4:	bf00      	nop
   861f6:	e2db      	b.n	867b0 <Cl_Dlsis_controller+0x12fc>

						default:
						break;
					}
				}
			break;
   861f8:	bf00      	nop
   861fa:	e2d9      	b.n	867b0 <Cl_Dlsis_controller+0x12fc>

												default:break;
											}
										}
						
			break;
   861fc:	bf00      	nop
   861fe:	e2d7      	b.n	867b0 <Cl_Dlsis_controller+0x12fc>
					Cl_DlsisFillingFlowOff();
					cl_uf_controller(CL_UF_EVENT_STOP,0);
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
				}
			break;
   86200:	bf00      	nop
					//	}
			break;


		}
		break;
   86202:	e2d5      	b.n	867b0 <Cl_Dlsis_controller+0x12fc>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   86204:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   86208:	3b06      	subs	r3, #6
   8620a:	2b10      	cmp	r3, #16
   8620c:	d836      	bhi.n	8627c <Cl_Dlsis_controller+0xdc8>
   8620e:	a201      	add	r2, pc, #4	; (adr r2, 86214 <Cl_Dlsis_controller+0xd60>)
   86210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86214:	00086277 	.word	0x00086277
   86218:	0008626b 	.word	0x0008626b
   8621c:	0008627d 	.word	0x0008627d
   86220:	00086265 	.word	0x00086265
   86224:	0008627d 	.word	0x0008627d
   86228:	0008627d 	.word	0x0008627d
   8622c:	0008627d 	.word	0x0008627d
   86230:	0008627d 	.word	0x0008627d
   86234:	0008627d 	.word	0x0008627d
   86238:	0008627d 	.word	0x0008627d
   8623c:	0008627d 	.word	0x0008627d
   86240:	0008627d 	.word	0x0008627d
   86244:	0008627d 	.word	0x0008627d
   86248:	0008627d 	.word	0x0008627d
   8624c:	0008627d 	.word	0x0008627d
   86250:	0008627d 	.word	0x0008627d
   86254:	00086259 	.word	0x00086259
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86258:	4b4b      	ldr	r3, [pc, #300]	; (86388 <Cl_Dlsis_controller+0xed4>)
   8625a:	4798      	blx	r3
   8625c:	4603      	mov	r3, r0
   8625e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
										break;
   86262:	e00c      	b.n	8627e <Cl_Dlsis_controller+0xdca>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   86264:	4b47      	ldr	r3, [pc, #284]	; (86384 <Cl_Dlsis_controller+0xed0>)
   86266:	4798      	blx	r3
										break;
   86268:	e009      	b.n	8627e <Cl_Dlsis_controller+0xdca>
										case EVENT_DLSIS_PAUSE_DIALYSIS:
										Cl_Dlsis_PauseDialysis();
   8626a:	4b44      	ldr	r3, [pc, #272]	; (8637c <Cl_Dlsis_controller+0xec8>)
   8626c:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   8626e:	4b40      	ldr	r3, [pc, #256]	; (86370 <Cl_Dlsis_controller+0xebc>)
   86270:	2207      	movs	r2, #7
   86272:	701a      	strb	r2, [r3, #0]
										break;
   86274:	e003      	b.n	8627e <Cl_Dlsis_controller+0xdca>
										case  EVENT_DLSIS_STOP_DIALYSIS:
										Cl_Dlsis_StopDialysis();
   86276:	4b40      	ldr	r3, [pc, #256]	; (86378 <Cl_Dlsis_controller+0xec4>)
   86278:	4798      	blx	r3
										break;
   8627a:	e000      	b.n	8627e <Cl_Dlsis_controller+0xdca>
										default:break;
   8627c:	bf00      	nop
									}

					
		break;
   8627e:	e298      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   86280:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   86284:	3b05      	subs	r3, #5
   86286:	2b11      	cmp	r3, #17
   86288:	d838      	bhi.n	862fc <Cl_Dlsis_controller+0xe48>
   8628a:	a201      	add	r2, pc, #4	; (adr r2, 86290 <Cl_Dlsis_controller+0xddc>)
   8628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86290:	000862d9 	.word	0x000862d9
   86294:	000862df 	.word	0x000862df
   86298:	000862fd 	.word	0x000862fd
   8629c:	000862eb 	.word	0x000862eb
   862a0:	000862e5 	.word	0x000862e5
   862a4:	000862fd 	.word	0x000862fd
   862a8:	000862fd 	.word	0x000862fd
   862ac:	000862fd 	.word	0x000862fd
   862b0:	000862fd 	.word	0x000862fd
   862b4:	000862fd 	.word	0x000862fd
   862b8:	000862fd 	.word	0x000862fd
   862bc:	000862fd 	.word	0x000862fd
   862c0:	000862fd 	.word	0x000862fd
   862c4:	000862fd 	.word	0x000862fd
   862c8:	000862fd 	.word	0x000862fd
   862cc:	000862fd 	.word	0x000862fd
   862d0:	000862fd 	.word	0x000862fd
   862d4:	000862f1 	.word	0x000862f1
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   862d8:	4b2d      	ldr	r3, [pc, #180]	; (86390 <Cl_Dlsis_controller+0xedc>)
   862da:	4798      	blx	r3
								break;
   862dc:	e00f      	b.n	862fe <Cl_Dlsis_controller+0xe4a>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   862de:	4b26      	ldr	r3, [pc, #152]	; (86378 <Cl_Dlsis_controller+0xec4>)
   862e0:	4798      	blx	r3
								break;
   862e2:	e00c      	b.n	862fe <Cl_Dlsis_controller+0xe4a>
								case EVENT_DLSIS_BYPASS_OFF:
								Cl_Dlsis_BypassOff();
   862e4:	4b27      	ldr	r3, [pc, #156]	; (86384 <Cl_Dlsis_controller+0xed0>)
   862e6:	4798      	blx	r3
								break;
   862e8:	e009      	b.n	862fe <Cl_Dlsis_controller+0xe4a>
								case EVENT_DLSIS_BYPASS_ON:
								Cl_Dlsis_BypassDialysis();
   862ea:	4b25      	ldr	r3, [pc, #148]	; (86380 <Cl_Dlsis_controller+0xecc>)
   862ec:	4798      	blx	r3
								break;
   862ee:	e006      	b.n	862fe <Cl_Dlsis_controller+0xe4a>
								case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   862f0:	4b25      	ldr	r3, [pc, #148]	; (86388 <Cl_Dlsis_controller+0xed4>)
   862f2:	4798      	blx	r3
   862f4:	4603      	mov	r3, r0
   862f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
										break;
   862fa:	e000      	b.n	862fe <Cl_Dlsis_controller+0xe4a>
								default:break;
   862fc:	bf00      	nop
							}
		
		break;
   862fe:	e258      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   86300:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   86304:	2b05      	cmp	r3, #5
   86306:	d004      	beq.n	86312 <Cl_Dlsis_controller+0xe5e>
   86308:	2b24      	cmp	r3, #36	; 0x24
   8630a:	d009      	beq.n	86320 <Cl_Dlsis_controller+0xe6c>
   8630c:	2b04      	cmp	r3, #4
   8630e:	d003      	beq.n	86318 <Cl_Dlsis_controller+0xe64>
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
								
								default:break;
   86310:	e00a      	b.n	86328 <Cl_Dlsis_controller+0xe74>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   86312:	4b20      	ldr	r3, [pc, #128]	; (86394 <Cl_Dlsis_controller+0xee0>)
   86314:	4798      	blx	r3
								break;
   86316:	e007      	b.n	86328 <Cl_Dlsis_controller+0xe74>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   86318:	2056      	movs	r0, #86	; 0x56
   8631a:	4b1f      	ldr	r3, [pc, #124]	; (86398 <Cl_Dlsis_controller+0xee4>)
   8631c:	4798      	blx	r3
								break;
   8631e:	e003      	b.n	86328 <Cl_Dlsis_controller+0xe74>
								case EVENT_DLSIS_ISOUF_START:
								
								//Cl_MacState = MAC_ISOUF;
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_ISOUF_REQ);
   86320:	205e      	movs	r0, #94	; 0x5e
   86322:	4b1d      	ldr	r3, [pc, #116]	; (86398 <Cl_Dlsis_controller+0xee4>)
   86324:	4798      	blx	r3
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
   86326:	bf00      	nop
								
								default:break;
							}
							
		break;
   86328:	e243      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
   8632a:	bf00      	nop
   8632c:	00093861 	.word	0x00093861
   86330:	000875e1 	.word	0x000875e1
   86334:	20072170 	.word	0x20072170
   86338:	00087471 	.word	0x00087471
   8633c:	00086a3d 	.word	0x00086a3d
   86340:	200720ec 	.word	0x200720ec
   86344:	000a6969 	.word	0x000a6969
   86348:	000a85b0 	.word	0x000a85b0
   8634c:	0009b805 	.word	0x0009b805
   86350:	00086ab5 	.word	0x00086ab5
   86354:	00099d29 	.word	0x00099d29
   86358:	00086ae5 	.word	0x00086ae5
   8635c:	00099a95 	.word	0x00099a95
   86360:	00089385 	.word	0x00089385
   86364:	00099c99 	.word	0x00099c99
   86368:	00087451 	.word	0x00087451
   8636c:	00095bbd 	.word	0x00095bbd
   86370:	20071924 	.word	0x20071924
   86374:	00099c55 	.word	0x00099c55
   86378:	00086fc1 	.word	0x00086fc1
   8637c:	000873d5 	.word	0x000873d5
   86380:	000870a9 	.word	0x000870a9
   86384:	00087259 	.word	0x00087259
   86388:	00087429 	.word	0x00087429
   8638c:	00082fbd 	.word	0x00082fbd
   86390:	00087fdd 	.word	0x00087fdd
   86394:	00087f55 	.word	0x00087f55
   86398:	0008ba55 	.word	0x0008ba55

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   8639c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   863a0:	3b01      	subs	r3, #1
   863a2:	2b19      	cmp	r3, #25
   863a4:	d87f      	bhi.n	864a6 <Cl_Dlsis_controller+0xff2>
   863a6:	a201      	add	r2, pc, #4	; (adr r2, 863ac <Cl_Dlsis_controller+0xef8>)
   863a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   863ac:	0008646d 	.word	0x0008646d
   863b0:	0008641b 	.word	0x0008641b
   863b4:	000864a7 	.word	0x000864a7
   863b8:	000864a7 	.word	0x000864a7
   863bc:	00086415 	.word	0x00086415
   863c0:	000864a7 	.word	0x000864a7
   863c4:	000864a7 	.word	0x000864a7
   863c8:	0008649b 	.word	0x0008649b
   863cc:	000864a1 	.word	0x000864a1
   863d0:	000864a7 	.word	0x000864a7
   863d4:	000864a7 	.word	0x000864a7
   863d8:	000864a7 	.word	0x000864a7
   863dc:	000864a7 	.word	0x000864a7
   863e0:	000864a7 	.word	0x000864a7
   863e4:	000864a7 	.word	0x000864a7
   863e8:	000864a7 	.word	0x000864a7
   863ec:	000864a7 	.word	0x000864a7
   863f0:	000864a7 	.word	0x000864a7
   863f4:	00086467 	.word	0x00086467
   863f8:	000864a7 	.word	0x000864a7
   863fc:	000864a7 	.word	0x000864a7
   86400:	0008648f 	.word	0x0008648f
   86404:	000864a7 	.word	0x000864a7
   86408:	000864a7 	.word	0x000864a7
   8640c:	000864a7 	.word	0x000864a7
   86410:	000864a7 	.word	0x000864a7
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   86414:	4bb2      	ldr	r3, [pc, #712]	; (866e0 <Cl_Dlsis_controller+0x122c>)
   86416:	4798      	blx	r3
						break;
   86418:	e048      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   8641a:	4bb2      	ldr	r3, [pc, #712]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   8641c:	7e1b      	ldrb	r3, [r3, #24]
   8641e:	2b00      	cmp	r3, #0
   86420:	d043      	beq.n	864aa <Cl_Dlsis_controller+0xff6>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   86422:	4bb0      	ldr	r3, [pc, #704]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86424:	791b      	ldrb	r3, [r3, #4]
   86426:	2b04      	cmp	r3, #4
   86428:	d000      	beq.n	8642c <Cl_Dlsis_controller+0xf78>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   8642a:	e01b      	b.n	86464 <Cl_Dlsis_controller+0xfb0>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   8642c:	2316      	movs	r3, #22
   8642e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   86432:	2304      	movs	r3, #4
   86434:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   86438:	f107 0344 	add.w	r3, r7, #68	; 0x44
   8643c:	3301      	adds	r3, #1
   8643e:	4619      	mov	r1, r3
   86440:	2004      	movs	r0, #4
   86442:	4ba9      	ldr	r3, [pc, #676]	; (866e8 <Cl_Dlsis_controller+0x1234>)
   86444:	4798      	blx	r3
   86446:	4603      	mov	r3, r0
   86448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   8644c:	f107 0144 	add.w	r1, r7, #68	; 0x44
   86450:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   86454:	2202      	movs	r2, #2
   86456:	4618      	mov	r0, r3
   86458:	4ba4      	ldr	r3, [pc, #656]	; (866ec <Cl_Dlsis_controller+0x1238>)
   8645a:	4798      	blx	r3
   8645c:	4603      	mov	r3, r0
   8645e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
									break;
   86462:	bf00      	nop

									default:
									break;
								}
							}
						break;
   86464:	e021      	b.n	864aa <Cl_Dlsis_controller+0xff6>
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   86466:	4ba2      	ldr	r3, [pc, #648]	; (866f0 <Cl_Dlsis_controller+0x123c>)
   86468:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   8646a:	e01f      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						case EVENT_DLSIS_CLR_ALARM:
						Cl_Dlsis_ResetAlertsforReassertion();
   8646c:	4ba1      	ldr	r3, [pc, #644]	; (866f4 <Cl_Dlsis_controller+0x1240>)
   8646e:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   86470:	4ba1      	ldr	r3, [pc, #644]	; (866f8 <Cl_Dlsis_controller+0x1244>)
   86472:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   86474:	4ba1      	ldr	r3, [pc, #644]	; (866fc <Cl_Dlsis_controller+0x1248>)
   86476:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   86478:	4ba1      	ldr	r3, [pc, #644]	; (86700 <Cl_Dlsis_controller+0x124c>)
   8647a:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   8647c:	2100      	movs	r1, #0
   8647e:	2002      	movs	r0, #2
   86480:	4ba0      	ldr	r3, [pc, #640]	; (86704 <Cl_Dlsis_controller+0x1250>)
   86482:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   86484:	4ba0      	ldr	r3, [pc, #640]	; (86708 <Cl_Dlsis_controller+0x1254>)
   86486:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   86488:	4ba0      	ldr	r3, [pc, #640]	; (8670c <Cl_Dlsis_controller+0x1258>)
   8648a:	4798      	blx	r3
										//cl_temp_recoveredstate();
						break;
   8648c:	e00e      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8648e:	4ba0      	ldr	r3, [pc, #640]	; (86710 <Cl_Dlsis_controller+0x125c>)
   86490:	4798      	blx	r3
   86492:	4603      	mov	r3, r0
   86494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   86498:	e008      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   8649a:	4b9e      	ldr	r3, [pc, #632]	; (86714 <Cl_Dlsis_controller+0x1260>)
   8649c:	4798      	blx	r3
						break;
   8649e:	e005      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   864a0:	4b9a      	ldr	r3, [pc, #616]	; (8670c <Cl_Dlsis_controller+0x1258>)
   864a2:	4798      	blx	r3
						break;
   864a4:	e002      	b.n	864ac <Cl_Dlsis_controller+0xff8>
						
						default:break;
   864a6:	bf00      	nop
   864a8:	e183      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>

									default:
									break;
								}
							}
						break;
   864aa:	bf00      	nop
						Cl_Dlsis_BypassOff();
						break;
						
						default:break;
					}
		break;
   864ac:	e181      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   864ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   864b2:	3b02      	subs	r3, #2
   864b4:	2b20      	cmp	r3, #32
   864b6:	f200 8171 	bhi.w	8679c <Cl_Dlsis_controller+0x12e8>
   864ba:	a201      	add	r2, pc, #4	; (adr r2, 864c0 <Cl_Dlsis_controller+0x100c>)
   864bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   864c0:	00086545 	.word	0x00086545
   864c4:	000865e9 	.word	0x000865e9
   864c8:	0008679d 	.word	0x0008679d
   864cc:	0008679d 	.word	0x0008679d
   864d0:	0008679d 	.word	0x0008679d
   864d4:	0008679d 	.word	0x0008679d
   864d8:	0008679d 	.word	0x0008679d
   864dc:	0008679d 	.word	0x0008679d
   864e0:	0008679d 	.word	0x0008679d
   864e4:	0008679d 	.word	0x0008679d
   864e8:	0008679d 	.word	0x0008679d
   864ec:	0008679d 	.word	0x0008679d
   864f0:	0008679d 	.word	0x0008679d
   864f4:	0008679d 	.word	0x0008679d
   864f8:	0008679d 	.word	0x0008679d
   864fc:	0008679d 	.word	0x0008679d
   86500:	0008679d 	.word	0x0008679d
   86504:	0008679d 	.word	0x0008679d
   86508:	0008679d 	.word	0x0008679d
   8650c:	0008679d 	.word	0x0008679d
   86510:	0008679d 	.word	0x0008679d
   86514:	0008679d 	.word	0x0008679d
   86518:	0008679d 	.word	0x0008679d
   8651c:	0008679d 	.word	0x0008679d
   86520:	0008679d 	.word	0x0008679d
   86524:	0008679d 	.word	0x0008679d
   86528:	0008679d 	.word	0x0008679d
   8652c:	000865b3 	.word	0x000865b3
   86530:	0008659f 	.word	0x0008659f
   86534:	000865a9 	.word	0x000865a9
   86538:	00086545 	.word	0x00086545
   8653c:	00086587 	.word	0x00086587
   86540:	00086595 	.word	0x00086595
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   86544:	4b67      	ldr	r3, [pc, #412]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86546:	7e1b      	ldrb	r3, [r3, #24]
   86548:	2b00      	cmp	r3, #0
   8654a:	f000 8129 	beq.w	867a0 <Cl_Dlsis_controller+0x12ec>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8654e:	4b65      	ldr	r3, [pc, #404]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86550:	791b      	ldrb	r3, [r3, #4]
   86552:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   86554:	4b63      	ldr	r3, [pc, #396]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86556:	795b      	ldrb	r3, [r3, #5]
   86558:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8655a:	4b62      	ldr	r3, [pc, #392]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   8655c:	799b      	ldrb	r3, [r3, #6]
   8655e:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86560:	4b60      	ldr	r3, [pc, #384]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86562:	79db      	ldrb	r3, [r3, #7]
   86564:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   86566:	8a3b      	ldrh	r3, [r7, #16]
   86568:	461a      	mov	r2, r3
   8656a:	4b6b      	ldr	r3, [pc, #428]	; (86718 <Cl_Dlsis_controller+0x1264>)
   8656c:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   8656e:	4b6a      	ldr	r3, [pc, #424]	; (86718 <Cl_Dlsis_controller+0x1264>)
   86570:	69db      	ldr	r3, [r3, #28]
   86572:	4618      	mov	r0, r3
   86574:	4b69      	ldr	r3, [pc, #420]	; (8671c <Cl_Dlsis_controller+0x1268>)
   86576:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   86578:	4b69      	ldr	r3, [pc, #420]	; (86720 <Cl_Dlsis_controller+0x126c>)
   8657a:	681b      	ldr	r3, [r3, #0]
   8657c:	4619      	mov	r1, r3
   8657e:	2006      	movs	r0, #6
   86580:	4b68      	ldr	r3, [pc, #416]	; (86724 <Cl_Dlsis_controller+0x1270>)
   86582:	4798      	blx	r3
							}
						break;
   86584:	e10c      	b.n	867a0 <Cl_Dlsis_controller+0x12ec>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   86586:	4b66      	ldr	r3, [pc, #408]	; (86720 <Cl_Dlsis_controller+0x126c>)
   86588:	681b      	ldr	r3, [r3, #0]
   8658a:	4619      	mov	r1, r3
   8658c:	200a      	movs	r0, #10
   8658e:	4b65      	ldr	r3, [pc, #404]	; (86724 <Cl_Dlsis_controller+0x1270>)
   86590:	4798      	blx	r3
						break;
   86592:	e10a      	b.n	867aa <Cl_Dlsis_controller+0x12f6>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   86594:	2100      	movs	r1, #0
   86596:	2009      	movs	r0, #9
   86598:	4b62      	ldr	r3, [pc, #392]	; (86724 <Cl_Dlsis_controller+0x1270>)
   8659a:	4798      	blx	r3
						break;
   8659c:	e105      	b.n	867aa <Cl_Dlsis_controller+0x12f6>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   8659e:	2100      	movs	r1, #0
   865a0:	2002      	movs	r0, #2
   865a2:	4b58      	ldr	r3, [pc, #352]	; (86704 <Cl_Dlsis_controller+0x1250>)
   865a4:	4798      	blx	r3
						break;
   865a6:	e100      	b.n	867aa <Cl_Dlsis_controller+0x12f6>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   865a8:	2100      	movs	r1, #0
   865aa:	2004      	movs	r0, #4
   865ac:	4b55      	ldr	r3, [pc, #340]	; (86704 <Cl_Dlsis_controller+0x1250>)
   865ae:	4798      	blx	r3
						break;
   865b0:	e0fb      	b.n	867aa <Cl_Dlsis_controller+0x12f6>
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   865b2:	4b4c      	ldr	r3, [pc, #304]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865b4:	7e1b      	ldrb	r3, [r3, #24]
   865b6:	2b00      	cmp	r3, #0
   865b8:	f000 80f4 	beq.w	867a4 <Cl_Dlsis_controller+0x12f0>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   865bc:	4b49      	ldr	r3, [pc, #292]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865be:	791b      	ldrb	r3, [r3, #4]
   865c0:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   865c2:	4b48      	ldr	r3, [pc, #288]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865c4:	795b      	ldrb	r3, [r3, #5]
   865c6:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   865c8:	4b46      	ldr	r3, [pc, #280]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865ca:	799b      	ldrb	r3, [r3, #6]
   865cc:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   865ce:	4b45      	ldr	r3, [pc, #276]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865d0:	79db      	ldrb	r3, [r3, #7]
   865d2:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   865d4:	89bb      	ldrh	r3, [r7, #12]
   865d6:	4619      	mov	r1, r3
   865d8:	2001      	movs	r0, #1
   865da:	4b4a      	ldr	r3, [pc, #296]	; (86704 <Cl_Dlsis_controller+0x1250>)
   865dc:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   865de:	89bb      	ldrh	r3, [r7, #12]
   865e0:	461a      	mov	r2, r3
   865e2:	4b4d      	ldr	r3, [pc, #308]	; (86718 <Cl_Dlsis_controller+0x1264>)
   865e4:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   865e6:	e0dd      	b.n	867a4 <Cl_Dlsis_controller+0x12f0>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   865e8:	4b3e      	ldr	r3, [pc, #248]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865ea:	7e1b      	ldrb	r3, [r3, #24]
   865ec:	2b00      	cmp	r3, #0
   865ee:	f000 80db 	beq.w	867a8 <Cl_Dlsis_controller+0x12f4>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   865f2:	4b3c      	ldr	r3, [pc, #240]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865f4:	795b      	ldrb	r3, [r3, #5]
   865f6:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   865f8:	4b3a      	ldr	r3, [pc, #232]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   865fa:	799b      	ldrb	r3, [r3, #6]
   865fc:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   865fe:	4b39      	ldr	r3, [pc, #228]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86600:	79db      	ldrb	r3, [r3, #7]
   86602:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   86604:	4b37      	ldr	r3, [pc, #220]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   86606:	7a1b      	ldrb	r3, [r3, #8]
   86608:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   8660a:	4b36      	ldr	r3, [pc, #216]	; (866e4 <Cl_Dlsis_controller+0x1230>)
   8660c:	791b      	ldrb	r3, [r3, #4]
   8660e:	3b05      	subs	r3, #5
   86610:	2b20      	cmp	r3, #32
   86612:	f200 80c1 	bhi.w	86798 <Cl_Dlsis_controller+0x12e4>
   86616:	a201      	add	r2, pc, #4	; (adr r2, 8661c <Cl_Dlsis_controller+0x1168>)
   86618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8661c:	00086799 	.word	0x00086799
   86620:	00086799 	.word	0x00086799
   86624:	00086799 	.word	0x00086799
   86628:	00086799 	.word	0x00086799
   8662c:	00086799 	.word	0x00086799
   86630:	00086799 	.word	0x00086799
   86634:	00086799 	.word	0x00086799
   86638:	00086799 	.word	0x00086799
   8663c:	00086799 	.word	0x00086799
   86640:	00086799 	.word	0x00086799
   86644:	00086799 	.word	0x00086799
   86648:	00086799 	.word	0x00086799
   8664c:	00086799 	.word	0x00086799
   86650:	00086799 	.word	0x00086799
   86654:	00086799 	.word	0x00086799
   86658:	00086799 	.word	0x00086799
   8665c:	00086799 	.word	0x00086799
   86660:	00086799 	.word	0x00086799
   86664:	00086799 	.word	0x00086799
   86668:	000866a1 	.word	0x000866a1
   8666c:	000866b9 	.word	0x000866b9
   86670:	000866d1 	.word	0x000866d1
   86674:	00086735 	.word	0x00086735
   86678:	00086745 	.word	0x00086745
   8667c:	00086755 	.word	0x00086755
   86680:	00086799 	.word	0x00086799
   86684:	00086799 	.word	0x00086799
   86688:	00086799 	.word	0x00086799
   8668c:	00086799 	.word	0x00086799
   86690:	00086765 	.word	0x00086765
   86694:	0008676f 	.word	0x0008676f
   86698:	00086779 	.word	0x00086779
   8669c:	00086789 	.word	0x00086789
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   866a0:	68bb      	ldr	r3, [r7, #8]
   866a2:	4a21      	ldr	r2, [pc, #132]	; (86728 <Cl_Dlsis_controller+0x1274>)
   866a4:	fba2 2303 	umull	r2, r3, r2, r3
   866a8:	08da      	lsrs	r2, r3, #3
   866aa:	4b20      	ldr	r3, [pc, #128]	; (8672c <Cl_Dlsis_controller+0x1278>)
   866ac:	4610      	mov	r0, r2
   866ae:	4798      	blx	r3
   866b0:	4602      	mov	r2, r0
   866b2:	4b1f      	ldr	r3, [pc, #124]	; (86730 <Cl_Dlsis_controller+0x127c>)
   866b4:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   866b6:	e070      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   866b8:	68bb      	ldr	r3, [r7, #8]
   866ba:	4a1b      	ldr	r2, [pc, #108]	; (86728 <Cl_Dlsis_controller+0x1274>)
   866bc:	fba2 2303 	umull	r2, r3, r2, r3
   866c0:	08da      	lsrs	r2, r3, #3
   866c2:	4b1a      	ldr	r3, [pc, #104]	; (8672c <Cl_Dlsis_controller+0x1278>)
   866c4:	4610      	mov	r0, r2
   866c6:	4798      	blx	r3
   866c8:	4602      	mov	r2, r0
   866ca:	4b19      	ldr	r3, [pc, #100]	; (86730 <Cl_Dlsis_controller+0x127c>)
   866cc:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   866ce:	e064      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   866d0:	68ba      	ldr	r2, [r7, #8]
   866d2:	4b16      	ldr	r3, [pc, #88]	; (8672c <Cl_Dlsis_controller+0x1278>)
   866d4:	4610      	mov	r0, r2
   866d6:	4798      	blx	r3
   866d8:	4602      	mov	r2, r0
   866da:	4b15      	ldr	r3, [pc, #84]	; (86730 <Cl_Dlsis_controller+0x127c>)
   866dc:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   866de:	e05c      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
   866e0:	00087fdd 	.word	0x00087fdd
   866e4:	200723e8 	.word	0x200723e8
   866e8:	0009a331 	.word	0x0009a331
   866ec:	0009b805 	.word	0x0009b805
   866f0:	000875e1 	.word	0x000875e1
   866f4:	00087471 	.word	0x00087471
   866f8:	00099d51 	.word	0x00099d51
   866fc:	00099d65 	.word	0x00099d65
   86700:	00099d8d 	.word	0x00099d8d
   86704:	0009316d 	.word	0x0009316d
   86708:	00099bf5 	.word	0x00099bf5
   8670c:	00087259 	.word	0x00087259
   86710:	00087429 	.word	0x00087429
   86714:	000870a9 	.word	0x000870a9
   86718:	20072654 	.word	0x20072654
   8671c:	00083fc9 	.word	0x00083fc9
   86720:	20072164 	.word	0x20072164
   86724:	00093861 	.word	0x00093861
   86728:	cccccccd 	.word	0xcccccccd
   8672c:	000a64e1 	.word	0x000a64e1
   86730:	200720f4 	.word	0x200720f4
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   86734:	68ba      	ldr	r2, [r7, #8]
   86736:	4b21      	ldr	r3, [pc, #132]	; (867bc <Cl_Dlsis_controller+0x1308>)
   86738:	4610      	mov	r0, r2
   8673a:	4798      	blx	r3
   8673c:	4602      	mov	r2, r0
   8673e:	4b20      	ldr	r3, [pc, #128]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86740:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   86742:	e02a      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   86744:	68ba      	ldr	r2, [r7, #8]
   86746:	4b1d      	ldr	r3, [pc, #116]	; (867bc <Cl_Dlsis_controller+0x1308>)
   86748:	4610      	mov	r0, r2
   8674a:	4798      	blx	r3
   8674c:	4602      	mov	r2, r0
   8674e:	4b1c      	ldr	r3, [pc, #112]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86750:	615a      	str	r2, [r3, #20]
											break;
   86752:	e022      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86754:	68ba      	ldr	r2, [r7, #8]
   86756:	4b19      	ldr	r3, [pc, #100]	; (867bc <Cl_Dlsis_controller+0x1308>)
   86758:	4610      	mov	r0, r2
   8675a:	4798      	blx	r3
   8675c:	4602      	mov	r2, r0
   8675e:	4b18      	ldr	r3, [pc, #96]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86760:	611a      	str	r2, [r3, #16]
											break;
   86762:	e01a      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   86764:	68bb      	ldr	r3, [r7, #8]
   86766:	b21a      	sxth	r2, r3
   86768:	4b15      	ldr	r3, [pc, #84]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   8676a:	801a      	strh	r2, [r3, #0]
											break;
   8676c:	e015      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8676e:	68bb      	ldr	r3, [r7, #8]
   86770:	b21a      	sxth	r2, r3
   86772:	4b13      	ldr	r3, [pc, #76]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86774:	805a      	strh	r2, [r3, #2]
											break;
   86776:	e010      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   86778:	68ba      	ldr	r2, [r7, #8]
   8677a:	4b10      	ldr	r3, [pc, #64]	; (867bc <Cl_Dlsis_controller+0x1308>)
   8677c:	4610      	mov	r0, r2
   8677e:	4798      	blx	r3
   86780:	4602      	mov	r2, r0
   86782:	4b0f      	ldr	r3, [pc, #60]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86784:	60da      	str	r2, [r3, #12]
											break;
   86786:	e008      	b.n	8679a <Cl_Dlsis_controller+0x12e6>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   86788:	68ba      	ldr	r2, [r7, #8]
   8678a:	4b0c      	ldr	r3, [pc, #48]	; (867bc <Cl_Dlsis_controller+0x1308>)
   8678c:	4610      	mov	r0, r2
   8678e:	4798      	blx	r3
   86790:	4602      	mov	r2, r0
   86792:	4b0b      	ldr	r3, [pc, #44]	; (867c0 <Cl_Dlsis_controller+0x130c>)
   86794:	609a      	str	r2, [r3, #8]
											
											break;
   86796:	e000      	b.n	8679a <Cl_Dlsis_controller+0x12e6>

											default:break;
   86798:	bf00      	nop
											}
										
										}
			
						break;
   8679a:	e005      	b.n	867a8 <Cl_Dlsis_controller+0x12f4>
						default:
						break;
   8679c:	bf00      	nop
   8679e:	e008      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
								Treatdata[ID_heprate] = cl_temp.Twobyte;
								hep_calibration(Treatdata[ID_heprate]);
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
							}
						break;
   867a0:	bf00      	nop
   867a2:	e006      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
						}
						break;
   867a4:	bf00      	nop
   867a6:	e004      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
											default:break;
											}
										
										}
			
						break;
   867a8:	bf00      	nop
						default:
						break;
					}
		break;
   867aa:	e002      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
		default:break;
   867ac:	bf00      	nop
   867ae:	e000      	b.n	867b2 <Cl_Dlsis_controller+0x12fe>
					//	}
			break;


		}
		break;
   867b0:	bf00      	nop
		default:break;
	}



return CL_OK;
   867b2:	2300      	movs	r3, #0
}
   867b4:	4618      	mov	r0, r3
   867b6:	3760      	adds	r7, #96	; 0x60
   867b8:	46bd      	mov	sp, r7
   867ba:	bd80      	pop	{r7, pc}
   867bc:	000a64e1 	.word	0x000a64e1
   867c0:	200720f4 	.word	0x200720f4

000867c4 <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   867c4:	b480      	push	{r7}
   867c6:	b083      	sub	sp, #12
   867c8:	af00      	add	r7, sp, #0
   867ca:	4603      	mov	r3, r0
   867cc:	6039      	str	r1, [r7, #0]
   867ce:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   867d0:	79fb      	ldrb	r3, [r7, #7]
   867d2:	3b07      	subs	r3, #7
   867d4:	2b55      	cmp	r3, #85	; 0x55
   867d6:	f200 812a 	bhi.w	86a2e <cl_dlsis_translatemacevent+0x26a>
   867da:	a201      	add	r2, pc, #4	; (adr r2, 867e0 <cl_dlsis_translatemacevent+0x1c>)
   867dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   867e0:	00086969 	.word	0x00086969
   867e4:	00086a2f 	.word	0x00086a2f
   867e8:	00086a2f 	.word	0x00086a2f
   867ec:	00086949 	.word	0x00086949
   867f0:	00086951 	.word	0x00086951
   867f4:	00086941 	.word	0x00086941
   867f8:	00086961 	.word	0x00086961
   867fc:	00086959 	.word	0x00086959
   86800:	00086a2f 	.word	0x00086a2f
   86804:	00086a2f 	.word	0x00086a2f
   86808:	00086a2f 	.word	0x00086a2f
   8680c:	00086a2f 	.word	0x00086a2f
   86810:	00086a2f 	.word	0x00086a2f
   86814:	00086a2f 	.word	0x00086a2f
   86818:	000869f9 	.word	0x000869f9
   8681c:	00086a2f 	.word	0x00086a2f
   86820:	00086971 	.word	0x00086971
   86824:	00086979 	.word	0x00086979
   86828:	00086981 	.word	0x00086981
   8682c:	00086989 	.word	0x00086989
   86830:	00086991 	.word	0x00086991
   86834:	00086a2f 	.word	0x00086a2f
   86838:	00086a2f 	.word	0x00086a2f
   8683c:	00086a2f 	.word	0x00086a2f
   86840:	00086a2f 	.word	0x00086a2f
   86844:	00086a2f 	.word	0x00086a2f
   86848:	000869d1 	.word	0x000869d1
   8684c:	000869d9 	.word	0x000869d9
   86850:	000869e1 	.word	0x000869e1
   86854:	000869e9 	.word	0x000869e9
   86858:	000869f1 	.word	0x000869f1
   8685c:	00086a21 	.word	0x00086a21
   86860:	00086a01 	.word	0x00086a01
   86864:	00086a09 	.word	0x00086a09
   86868:	00086939 	.word	0x00086939
   8686c:	00086a2f 	.word	0x00086a2f
   86870:	00086a2f 	.word	0x00086a2f
   86874:	00086a2f 	.word	0x00086a2f
   86878:	000869c9 	.word	0x000869c9
   8687c:	000869c1 	.word	0x000869c1
   86880:	00086a2f 	.word	0x00086a2f
   86884:	00086a2f 	.word	0x00086a2f
   86888:	00086a2f 	.word	0x00086a2f
   8688c:	00086a2f 	.word	0x00086a2f
   86890:	00086a2f 	.word	0x00086a2f
   86894:	00086a2f 	.word	0x00086a2f
   86898:	00086a2f 	.word	0x00086a2f
   8689c:	00086a2f 	.word	0x00086a2f
   868a0:	00086a2f 	.word	0x00086a2f
   868a4:	00086999 	.word	0x00086999
   868a8:	00086a2f 	.word	0x00086a2f
   868ac:	000869a1 	.word	0x000869a1
   868b0:	000869a9 	.word	0x000869a9
   868b4:	000869b1 	.word	0x000869b1
   868b8:	000869b9 	.word	0x000869b9
   868bc:	00086a2f 	.word	0x00086a2f
   868c0:	00086a2f 	.word	0x00086a2f
   868c4:	00086a2f 	.word	0x00086a2f
   868c8:	00086a2f 	.word	0x00086a2f
   868cc:	00086a2f 	.word	0x00086a2f
   868d0:	00086a2f 	.word	0x00086a2f
   868d4:	00086a2f 	.word	0x00086a2f
   868d8:	00086a2f 	.word	0x00086a2f
   868dc:	00086a2f 	.word	0x00086a2f
   868e0:	00086a2f 	.word	0x00086a2f
   868e4:	00086a2f 	.word	0x00086a2f
   868e8:	00086a2f 	.word	0x00086a2f
   868ec:	00086a2f 	.word	0x00086a2f
   868f0:	00086a2f 	.word	0x00086a2f
   868f4:	00086a2f 	.word	0x00086a2f
   868f8:	00086a2f 	.word	0x00086a2f
   868fc:	00086a2f 	.word	0x00086a2f
   86900:	00086a2f 	.word	0x00086a2f
   86904:	00086a2f 	.word	0x00086a2f
   86908:	00086a2f 	.word	0x00086a2f
   8690c:	00086a2f 	.word	0x00086a2f
   86910:	00086a2f 	.word	0x00086a2f
   86914:	00086a2f 	.word	0x00086a2f
   86918:	00086a2f 	.word	0x00086a2f
   8691c:	00086a2f 	.word	0x00086a2f
   86920:	00086a2f 	.word	0x00086a2f
   86924:	00086a29 	.word	0x00086a29
   86928:	00086a2f 	.word	0x00086a2f
   8692c:	00086a2f 	.word	0x00086a2f
   86930:	00086a11 	.word	0x00086a11
   86934:	00086a19 	.word	0x00086a19
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   86938:	683b      	ldr	r3, [r7, #0]
   8693a:	2201      	movs	r2, #1
   8693c:	701a      	strb	r2, [r3, #0]
		break;
   8693e:	e077      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   86940:	683b      	ldr	r3, [r7, #0]
   86942:	221d      	movs	r2, #29
   86944:	701a      	strb	r2, [r3, #0]
		break;
   86946:	e073      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   86948:	683b      	ldr	r3, [r7, #0]
   8694a:	221e      	movs	r2, #30
   8694c:	701a      	strb	r2, [r3, #0]
		break;
   8694e:	e06f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   86950:	683b      	ldr	r3, [r7, #0]
   86952:	221f      	movs	r2, #31
   86954:	701a      	strb	r2, [r3, #0]
		break;
   86956:	e06b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   86958:	683b      	ldr	r3, [r7, #0]
   8695a:	2202      	movs	r2, #2
   8695c:	701a      	strb	r2, [r3, #0]
		break;
   8695e:	e067      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   86960:	683b      	ldr	r3, [r7, #0]
   86962:	2203      	movs	r2, #3
   86964:	701a      	strb	r2, [r3, #0]
		break;
   86966:	e063      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   86968:	683b      	ldr	r3, [r7, #0]
   8696a:	2204      	movs	r2, #4
   8696c:	701a      	strb	r2, [r3, #0]
		break;
   8696e:	e05f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   86970:	683b      	ldr	r3, [r7, #0]
   86972:	2205      	movs	r2, #5
   86974:	701a      	strb	r2, [r3, #0]
		break;
   86976:	e05b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   86978:	683b      	ldr	r3, [r7, #0]
   8697a:	2206      	movs	r2, #6
   8697c:	701a      	strb	r2, [r3, #0]
		break;
   8697e:	e057      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   86980:	683b      	ldr	r3, [r7, #0]
   86982:	2207      	movs	r2, #7
   86984:	701a      	strb	r2, [r3, #0]
		break;
   86986:	e053      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86988:	683b      	ldr	r3, [r7, #0]
   8698a:	2208      	movs	r2, #8
   8698c:	701a      	strb	r2, [r3, #0]
		break;
   8698e:	e04f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86990:	683b      	ldr	r3, [r7, #0]
   86992:	2209      	movs	r2, #9
   86994:	701a      	strb	r2, [r3, #0]
		break;
   86996:	e04b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86998:	683b      	ldr	r3, [r7, #0]
   8699a:	2211      	movs	r2, #17
   8699c:	701a      	strb	r2, [r3, #0]
		break;
   8699e:	e047      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   869a0:	683b      	ldr	r3, [r7, #0]
   869a2:	2212      	movs	r2, #18
   869a4:	701a      	strb	r2, [r3, #0]
		break;
   869a6:	e043      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   869a8:	683b      	ldr	r3, [r7, #0]
   869aa:	2213      	movs	r2, #19
   869ac:	701a      	strb	r2, [r3, #0]
		break;
   869ae:	e03f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   869b0:	683b      	ldr	r3, [r7, #0]
   869b2:	2214      	movs	r2, #20
   869b4:	701a      	strb	r2, [r3, #0]
		break;
   869b6:	e03b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   869b8:	683b      	ldr	r3, [r7, #0]
   869ba:	2215      	movs	r2, #21
   869bc:	701a      	strb	r2, [r3, #0]
		break;
   869be:	e037      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   869c0:	683b      	ldr	r3, [r7, #0]
   869c2:	2216      	movs	r2, #22
   869c4:	701a      	strb	r2, [r3, #0]
		break;
   869c6:	e033      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   869c8:	683b      	ldr	r3, [r7, #0]
   869ca:	2217      	movs	r2, #23
   869cc:	701a      	strb	r2, [r3, #0]
		break;
   869ce:	e02f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   869d0:	683b      	ldr	r3, [r7, #0]
   869d2:	2219      	movs	r2, #25
   869d4:	701a      	strb	r2, [r3, #0]

		break;
   869d6:	e02b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   869d8:	683b      	ldr	r3, [r7, #0]
   869da:	221a      	movs	r2, #26
   869dc:	701a      	strb	r2, [r3, #0]
		break;
   869de:	e027      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   869e0:	683b      	ldr	r3, [r7, #0]
   869e2:	221a      	movs	r2, #26
   869e4:	701a      	strb	r2, [r3, #0]
		break;
   869e6:	e023      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   869e8:	683b      	ldr	r3, [r7, #0]
   869ea:	221b      	movs	r2, #27
   869ec:	701a      	strb	r2, [r3, #0]
		break;
   869ee:	e01f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   869f0:	683b      	ldr	r3, [r7, #0]
   869f2:	221c      	movs	r2, #28
   869f4:	701a      	strb	r2, [r3, #0]
		break;
   869f6:	e01b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   869f8:	683b      	ldr	r3, [r7, #0]
   869fa:	2220      	movs	r2, #32
   869fc:	701a      	strb	r2, [r3, #0]
		break;
   869fe:	e017      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   86a00:	683b      	ldr	r3, [r7, #0]
   86a02:	2221      	movs	r2, #33	; 0x21
   86a04:	701a      	strb	r2, [r3, #0]
		break;
   86a06:	e013      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   86a08:	683b      	ldr	r3, [r7, #0]
   86a0a:	2222      	movs	r2, #34	; 0x22
   86a0c:	701a      	strb	r2, [r3, #0]
		break;
   86a0e:	e00f      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   86a10:	683b      	ldr	r3, [r7, #0]
   86a12:	225b      	movs	r2, #91	; 0x5b
   86a14:	701a      	strb	r2, [r3, #0]
		break;
   86a16:	e00b      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   86a18:	683b      	ldr	r3, [r7, #0]
   86a1a:	225c      	movs	r2, #92	; 0x5c
   86a1c:	701a      	strb	r2, [r3, #0]
		break;
   86a1e:	e007      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dlsis_event = EVENT_DLSIS_HEAPARIN_BOLUS;
   86a20:	683b      	ldr	r3, [r7, #0]
   86a22:	2223      	movs	r2, #35	; 0x23
   86a24:	701a      	strb	r2, [r3, #0]
		break;
   86a26:	e003      	b.n	86a30 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_ISOUF_START:
		*cl_dlsis_event = EVENT_DLSIS_ISOUF_START;
   86a28:	683b      	ldr	r3, [r7, #0]
   86a2a:	2224      	movs	r2, #36	; 0x24
   86a2c:	701a      	strb	r2, [r3, #0]
		default:
		break;
   86a2e:	bf00      	nop
	}
	return CL_OK;
   86a30:	2300      	movs	r3, #0
}
   86a32:	4618      	mov	r0, r3
   86a34:	370c      	adds	r7, #12
   86a36:	46bd      	mov	sp, r7
   86a38:	bc80      	pop	{r7}
   86a3a:	4770      	bx	lr

00086a3c <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   86a3c:	b580      	push	{r7, lr}
   86a3e:	b084      	sub	sp, #16
   86a40:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86a42:	2304      	movs	r3, #4
   86a44:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86a46:	2351      	movs	r3, #81	; 0x51
   86a48:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   86a4a:	1d3b      	adds	r3, r7, #4
   86a4c:	2200      	movs	r2, #0
   86a4e:	601a      	str	r2, [r3, #0]
   86a50:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   86a54:	230a      	movs	r3, #10
   86a56:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   86a58:	2305      	movs	r3, #5
   86a5a:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   86a5c:	4b13      	ldr	r3, [pc, #76]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a5e:	78db      	ldrb	r3, [r3, #3]
   86a60:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   86a62:	4b12      	ldr	r3, [pc, #72]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a64:	791b      	ldrb	r3, [r3, #4]
   86a66:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   86a68:	4b10      	ldr	r3, [pc, #64]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a6a:	781b      	ldrb	r3, [r3, #0]
   86a6c:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   86a6e:	4b0f      	ldr	r3, [pc, #60]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a70:	78da      	ldrb	r2, [r3, #3]
   86a72:	f06f 030f 	mvn.w	r3, #15
   86a76:	1a9b      	subs	r3, r3, r2
   86a78:	b2db      	uxtb	r3, r3
   86a7a:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   86a7c:	4b0b      	ldr	r3, [pc, #44]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a7e:	791b      	ldrb	r3, [r3, #4]
   86a80:	425b      	negs	r3, r3
   86a82:	b2db      	uxtb	r3, r3
   86a84:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   86a86:	4b09      	ldr	r3, [pc, #36]	; (86aac <Cl_Dlsis_UpdateTimeInfo+0x70>)
   86a88:	781b      	ldrb	r3, [r3, #0]
   86a8a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   86a8e:	b2db      	uxtb	r3, r3
   86a90:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   86a92:	1d39      	adds	r1, r7, #4
   86a94:	7bbb      	ldrb	r3, [r7, #14]
   86a96:	2207      	movs	r2, #7
   86a98:	4618      	mov	r0, r3
   86a9a:	4b05      	ldr	r3, [pc, #20]	; (86ab0 <Cl_Dlsis_UpdateTimeInfo+0x74>)
   86a9c:	4798      	blx	r3
   86a9e:	4603      	mov	r3, r0
   86aa0:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86aa2:	2300      	movs	r3, #0
	}
   86aa4:	4618      	mov	r0, r3
   86aa6:	3710      	adds	r7, #16
   86aa8:	46bd      	mov	sp, r7
   86aaa:	bd80      	pop	{r7, pc}
   86aac:	20072170 	.word	0x20072170
   86ab0:	0009b805 	.word	0x0009b805

00086ab4 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   86ab4:	b480      	push	{r7}
   86ab6:	b083      	sub	sp, #12
   86ab8:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86aba:	2304      	movs	r3, #4
   86abc:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   86abe:	4b07      	ldr	r3, [pc, #28]	; (86adc <cl_Dlsis_CheckforDialysisCompletion+0x28>)
   86ac0:	78db      	ldrb	r3, [r3, #3]
   86ac2:	461a      	mov	r2, r3
   86ac4:	4b06      	ldr	r3, [pc, #24]	; (86ae0 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   86ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   86ac8:	429a      	cmp	r2, r3
   86aca:	d901      	bls.n	86ad0 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   86acc:	2300      	movs	r3, #0
   86ace:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   86ad0:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   86ad2:	4618      	mov	r0, r3
   86ad4:	370c      	adds	r7, #12
   86ad6:	46bd      	mov	sp, r7
   86ad8:	bc80      	pop	{r7}
   86ada:	4770      	bx	lr
   86adc:	20072170 	.word	0x20072170
   86ae0:	20072654 	.word	0x20072654

00086ae4 <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   86ae4:	b580      	push	{r7, lr}
   86ae6:	b082      	sub	sp, #8
   86ae8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86aea:	2300      	movs	r3, #0
   86aec:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   86aee:	2300      	movs	r3, #0
   86af0:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   86af2:	4b10      	ldr	r3, [pc, #64]	; (86b34 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86af4:	2200      	movs	r2, #0
   86af6:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   86af8:	4b0e      	ldr	r3, [pc, #56]	; (86b34 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86afa:	2200      	movs	r2, #0
   86afc:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   86afe:	4b0d      	ldr	r3, [pc, #52]	; (86b34 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86b00:	2200      	movs	r2, #0
   86b02:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86b04:	4b0b      	ldr	r3, [pc, #44]	; (86b34 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86b06:	2200      	movs	r2, #0
   86b08:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   86b0a:	4b0a      	ldr	r3, [pc, #40]	; (86b34 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86b0c:	2200      	movs	r2, #0
   86b0e:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   86b10:	1dbb      	adds	r3, r7, #6
   86b12:	2200      	movs	r2, #0
   86b14:	4619      	mov	r1, r3
   86b16:	2015      	movs	r0, #21
   86b18:	4b07      	ldr	r3, [pc, #28]	; (86b38 <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   86b1a:	4798      	blx	r3
   86b1c:	4603      	mov	r3, r0
   86b1e:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   86b20:	2050      	movs	r0, #80	; 0x50
   86b22:	4b06      	ldr	r3, [pc, #24]	; (86b3c <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   86b24:	4798      	blx	r3
   86b26:	4603      	mov	r3, r0
   86b28:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   86b2a:	79fb      	ldrb	r3, [r7, #7]
	}
   86b2c:	4618      	mov	r0, r3
   86b2e:	3708      	adds	r7, #8
   86b30:	46bd      	mov	sp, r7
   86b32:	bd80      	pop	{r7, pc}
   86b34:	20072170 	.word	0x20072170
   86b38:	0009b805 	.word	0x0009b805
   86b3c:	0008ba55 	.word	0x0008ba55

00086b40 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   86b40:	b580      	push	{r7, lr}
   86b42:	b084      	sub	sp, #16
   86b44:	af00      	add	r7, sp, #0
   86b46:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86b48:	2300      	movs	r3, #0
   86b4a:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   86b4c:	2300      	movs	r3, #0
   86b4e:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86b50:	2351      	movs	r3, #81	; 0x51
   86b52:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   86b54:	2300      	movs	r3, #0
   86b56:	73bb      	strb	r3, [r7, #14]
   86b58:	e068      	b.n	86c2c <Cl_Dlsis_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86b5a:	7bba      	ldrb	r2, [r7, #14]
   86b5c:	4937      	ldr	r1, [pc, #220]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86b5e:	4613      	mov	r3, r2
   86b60:	00db      	lsls	r3, r3, #3
   86b62:	1a9b      	subs	r3, r3, r2
   86b64:	440b      	add	r3, r1
   86b66:	7818      	ldrb	r0, [r3, #0]
   86b68:	7bba      	ldrb	r2, [r7, #14]
   86b6a:	4613      	mov	r3, r2
   86b6c:	00db      	lsls	r3, r3, #3
   86b6e:	1a9b      	subs	r3, r3, r2
   86b70:	4a32      	ldr	r2, [pc, #200]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86b72:	4413      	add	r3, r2
   86b74:	3302      	adds	r3, #2
   86b76:	4619      	mov	r1, r3
   86b78:	4b31      	ldr	r3, [pc, #196]	; (86c40 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   86b7a:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86b7c:	7bba      	ldrb	r2, [r7, #14]
   86b7e:	492f      	ldr	r1, [pc, #188]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86b80:	4613      	mov	r3, r2
   86b82:	00db      	lsls	r3, r3, #3
   86b84:	1a9b      	subs	r3, r3, r2
   86b86:	440b      	add	r3, r1
   86b88:	3302      	adds	r3, #2
   86b8a:	781b      	ldrb	r3, [r3, #0]
   86b8c:	2b00      	cmp	r3, #0
   86b8e:	d022      	beq.n	86bd6 <Cl_Dlsis_UpdateAlarmTable+0x96>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86b90:	7bba      	ldrb	r2, [r7, #14]
   86b92:	492a      	ldr	r1, [pc, #168]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86b94:	4613      	mov	r3, r2
   86b96:	00db      	lsls	r3, r3, #3
   86b98:	1a9b      	subs	r3, r3, r2
   86b9a:	440b      	add	r3, r1
   86b9c:	3303      	adds	r3, #3
   86b9e:	781b      	ldrb	r3, [r3, #0]
   86ba0:	f083 0301 	eor.w	r3, r3, #1
   86ba4:	b2db      	uxtb	r3, r3
   86ba6:	2b00      	cmp	r3, #0
   86ba8:	d03d      	beq.n	86c26 <Cl_Dlsis_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   86baa:	7bba      	ldrb	r2, [r7, #14]
   86bac:	4923      	ldr	r1, [pc, #140]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86bae:	4613      	mov	r3, r2
   86bb0:	00db      	lsls	r3, r3, #3
   86bb2:	1a9b      	subs	r3, r3, r2
   86bb4:	440b      	add	r3, r1
   86bb6:	3303      	adds	r3, #3
   86bb8:	2201      	movs	r2, #1
   86bba:	701a      	strb	r2, [r3, #0]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86bbc:	7bba      	ldrb	r2, [r7, #14]
   86bbe:	491f      	ldr	r1, [pc, #124]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86bc0:	4613      	mov	r3, r2
   86bc2:	00db      	lsls	r3, r3, #3
   86bc4:	1a9b      	subs	r3, r3, r2
   86bc6:	440b      	add	r3, r1
   86bc8:	781b      	ldrb	r3, [r3, #0]
   86bca:	4618      	mov	r0, r3
   86bcc:	4b1d      	ldr	r3, [pc, #116]	; (86c44 <Cl_Dlsis_UpdateAlarmTable+0x104>)
   86bce:	4798      	blx	r3
   86bd0:	4603      	mov	r3, r0
   86bd2:	73fb      	strb	r3, [r7, #15]
   86bd4:	e027      	b.n	86c26 <Cl_Dlsis_UpdateAlarmTable+0xe6>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   86bd6:	7bba      	ldrb	r2, [r7, #14]
   86bd8:	4918      	ldr	r1, [pc, #96]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86bda:	4613      	mov	r3, r2
   86bdc:	00db      	lsls	r3, r3, #3
   86bde:	1a9b      	subs	r3, r3, r2
   86be0:	440b      	add	r3, r1
   86be2:	3303      	adds	r3, #3
   86be4:	781b      	ldrb	r3, [r3, #0]
   86be6:	2b00      	cmp	r3, #0
   86be8:	d01d      	beq.n	86c26 <Cl_Dlsis_UpdateAlarmTable+0xe6>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   86bea:	7bba      	ldrb	r2, [r7, #14]
   86bec:	4913      	ldr	r1, [pc, #76]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86bee:	4613      	mov	r3, r2
   86bf0:	00db      	lsls	r3, r3, #3
   86bf2:	1a9b      	subs	r3, r3, r2
   86bf4:	440b      	add	r3, r1
   86bf6:	3303      	adds	r3, #3
   86bf8:	2200      	movs	r2, #0
   86bfa:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   86bfc:	2307      	movs	r3, #7
   86bfe:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86c00:	7bba      	ldrb	r2, [r7, #14]
   86c02:	490e      	ldr	r1, [pc, #56]	; (86c3c <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86c04:	4613      	mov	r3, r2
   86c06:	00db      	lsls	r3, r3, #3
   86c08:	1a9b      	subs	r3, r3, r2
   86c0a:	440b      	add	r3, r1
   86c0c:	781b      	ldrb	r3, [r3, #0]
   86c0e:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   86c10:	2300      	movs	r3, #0
   86c12:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86c14:	f107 0108 	add.w	r1, r7, #8
   86c18:	7b7b      	ldrb	r3, [r7, #13]
   86c1a:	2202      	movs	r2, #2
   86c1c:	4618      	mov	r0, r3
   86c1e:	4b0a      	ldr	r3, [pc, #40]	; (86c48 <Cl_Dlsis_UpdateAlarmTable+0x108>)
   86c20:	4798      	blx	r3
   86c22:	4603      	mov	r3, r0
   86c24:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   86c26:	7bbb      	ldrb	r3, [r7, #14]
   86c28:	3301      	adds	r3, #1
   86c2a:	73bb      	strb	r3, [r7, #14]
   86c2c:	7bbb      	ldrb	r3, [r7, #14]
   86c2e:	2b1d      	cmp	r3, #29
   86c30:	d993      	bls.n	86b5a <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   86c32:	7bfb      	ldrb	r3, [r7, #15]
}
   86c34:	4618      	mov	r0, r3
   86c36:	3710      	adds	r7, #16
   86c38:	46bd      	mov	sp, r7
   86c3a:	bd80      	pop	{r7, pc}
   86c3c:	20070464 	.word	0x20070464
   86c40:	00082fbd 	.word	0x00082fbd
   86c44:	00086c4d 	.word	0x00086c4d
   86c48:	0009b805 	.word	0x0009b805

00086c4c <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   86c4c:	b580      	push	{r7, lr}
   86c4e:	b086      	sub	sp, #24
   86c50:	af00      	add	r7, sp, #0
   86c52:	4603      	mov	r3, r0
   86c54:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86c56:	2300      	movs	r3, #0
   86c58:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   86c5a:	f107 0308 	add.w	r3, r7, #8
   86c5e:	2100      	movs	r1, #0
   86c60:	460a      	mov	r2, r1
   86c62:	801a      	strh	r2, [r3, #0]
   86c64:	460a      	mov	r2, r1
   86c66:	709a      	strb	r2, [r3, #2]
   86c68:	2300      	movs	r3, #0
   86c6a:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86c6c:	2351      	movs	r3, #81	; 0x51
   86c6e:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   86c70:	2300      	movs	r3, #0
   86c72:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   86c74:	2300      	movs	r3, #0
   86c76:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86c78:	79fb      	ldrb	r3, [r7, #7]
   86c7a:	3b01      	subs	r3, #1
   86c7c:	2b3a      	cmp	r3, #58	; 0x3a
   86c7e:	f200 8098 	bhi.w	86db2 <CL_DlsisAlarmActon+0x166>
   86c82:	a201      	add	r2, pc, #4	; (adr r2, 86c88 <CL_DlsisAlarmActon+0x3c>)
   86c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86c88:	00086d75 	.word	0x00086d75
   86c8c:	00086db3 	.word	0x00086db3
   86c90:	00086db3 	.word	0x00086db3
   86c94:	00086db3 	.word	0x00086db3
   86c98:	00086d83 	.word	0x00086d83
   86c9c:	00086d83 	.word	0x00086d83
   86ca0:	00086da5 	.word	0x00086da5
   86ca4:	00086da5 	.word	0x00086da5
   86ca8:	00086d91 	.word	0x00086d91
   86cac:	00086db3 	.word	0x00086db3
   86cb0:	00086d91 	.word	0x00086d91
   86cb4:	00086d91 	.word	0x00086d91
   86cb8:	00086d91 	.word	0x00086d91
   86cbc:	00086d91 	.word	0x00086d91
   86cc0:	00086d91 	.word	0x00086d91
   86cc4:	00086d91 	.word	0x00086d91
   86cc8:	00086d83 	.word	0x00086d83
   86ccc:	00086d83 	.word	0x00086d83
   86cd0:	00086d83 	.word	0x00086d83
   86cd4:	00086d83 	.word	0x00086d83
   86cd8:	00086d83 	.word	0x00086d83
   86cdc:	00086d83 	.word	0x00086d83
   86ce0:	00086d83 	.word	0x00086d83
   86ce4:	00086d83 	.word	0x00086d83
   86ce8:	00086db3 	.word	0x00086db3
   86cec:	00086d91 	.word	0x00086d91
   86cf0:	00086db3 	.word	0x00086db3
   86cf4:	00086db3 	.word	0x00086db3
   86cf8:	00086db3 	.word	0x00086db3
   86cfc:	00086db3 	.word	0x00086db3
   86d00:	00086db3 	.word	0x00086db3
   86d04:	00086d75 	.word	0x00086d75
   86d08:	00086d91 	.word	0x00086d91
   86d0c:	00086d75 	.word	0x00086d75
   86d10:	00086d75 	.word	0x00086d75
   86d14:	00086d75 	.word	0x00086d75
   86d18:	00086d75 	.word	0x00086d75
   86d1c:	00086d75 	.word	0x00086d75
   86d20:	00086d83 	.word	0x00086d83
   86d24:	00086d83 	.word	0x00086d83
   86d28:	00086db3 	.word	0x00086db3
   86d2c:	00086d83 	.word	0x00086d83
   86d30:	00086db3 	.word	0x00086db3
   86d34:	00086d83 	.word	0x00086d83
   86d38:	00086db3 	.word	0x00086db3
   86d3c:	00086db3 	.word	0x00086db3
   86d40:	00086db3 	.word	0x00086db3
   86d44:	00086db3 	.word	0x00086db3
   86d48:	00086db3 	.word	0x00086db3
   86d4c:	00086d91 	.word	0x00086d91
   86d50:	00086d91 	.word	0x00086d91
   86d54:	00086db3 	.word	0x00086db3
   86d58:	00086db3 	.word	0x00086db3
   86d5c:	00086db3 	.word	0x00086db3
   86d60:	00086db3 	.word	0x00086db3
   86d64:	00086db3 	.word	0x00086db3
   86d68:	00086d91 	.word	0x00086d91
   86d6c:	00086d91 	.word	0x00086d91
   86d70:	00086d91 	.word	0x00086d91
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   86d74:	4b28      	ldr	r3, [pc, #160]	; (86e18 <CL_DlsisAlarmActon+0x1cc>)
   86d76:	4798      	blx	r3
				sv_cntrl_buzzer();
   86d78:	4b28      	ldr	r3, [pc, #160]	; (86e1c <CL_DlsisAlarmActon+0x1d0>)
   86d7a:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86d7c:	4b28      	ldr	r3, [pc, #160]	; (86e20 <CL_DlsisAlarmActon+0x1d4>)
   86d7e:	4798      	blx	r3
			break;
   86d80:	e018      	b.n	86db4 <CL_DlsisAlarmActon+0x168>
			case    PS1_LOW_THRESHOLD:
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86d82:	4b28      	ldr	r3, [pc, #160]	; (86e24 <CL_DlsisAlarmActon+0x1d8>)
   86d84:	4798      	blx	r3
				sv_cntrl_buzzer();
   86d86:	4b25      	ldr	r3, [pc, #148]	; (86e1c <CL_DlsisAlarmActon+0x1d0>)
   86d88:	4798      	blx	r3
				cl_temp_safestate();
   86d8a:	4b27      	ldr	r3, [pc, #156]	; (86e28 <CL_DlsisAlarmActon+0x1dc>)
   86d8c:	4798      	blx	r3
			break;
   86d8e:	e011      	b.n	86db4 <CL_DlsisAlarmActon+0x168>
			case	BC_FAILED:
			case BD_EVENT:
			case BC_ALARM:
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86d90:	4b21      	ldr	r3, [pc, #132]	; (86e18 <CL_DlsisAlarmActon+0x1cc>)
   86d92:	4798      	blx	r3
				sv_cntrl_buzzer();
   86d94:	4b21      	ldr	r3, [pc, #132]	; (86e1c <CL_DlsisAlarmActon+0x1d0>)
   86d96:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   86d98:	4b24      	ldr	r3, [pc, #144]	; (86e2c <CL_DlsisAlarmActon+0x1e0>)
   86d9a:	4798      	blx	r3
		    	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86d9c:	4b24      	ldr	r3, [pc, #144]	; (86e30 <CL_DlsisAlarmActon+0x1e4>)
   86d9e:	220a      	movs	r2, #10
   86da0:	701a      	strb	r2, [r3, #0]
			break;
   86da2:	e007      	b.n	86db4 <CL_DlsisAlarmActon+0x168>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   86da4:	4b1f      	ldr	r3, [pc, #124]	; (86e24 <CL_DlsisAlarmActon+0x1d8>)
   86da6:	4798      	blx	r3
				sv_cntrl_buzzer();
   86da8:	4b1c      	ldr	r3, [pc, #112]	; (86e1c <CL_DlsisAlarmActon+0x1d0>)
   86daa:	4798      	blx	r3
				cl_temp_safestate();
   86dac:	4b1e      	ldr	r3, [pc, #120]	; (86e28 <CL_DlsisAlarmActon+0x1dc>)
   86dae:	4798      	blx	r3
				//cl_cond_safestate();
			break;
   86db0:	e000      	b.n	86db4 <CL_DlsisAlarmActon+0x168>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86db2:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86db4:	79fb      	ldrb	r3, [r7, #7]
   86db6:	2b00      	cmp	r3, #0
   86db8:	d029      	beq.n	86e0e <CL_DlsisAlarmActon+0x1c2>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86dba:	4a1e      	ldr	r2, [pc, #120]	; (86e34 <CL_DlsisAlarmActon+0x1e8>)
   86dbc:	79fb      	ldrb	r3, [r7, #7]
   86dbe:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86dc0:	4b1c      	ldr	r3, [pc, #112]	; (86e34 <CL_DlsisAlarmActon+0x1e8>)
   86dc2:	781a      	ldrb	r2, [r3, #0]
   86dc4:	4b1c      	ldr	r3, [pc, #112]	; (86e38 <CL_DlsisAlarmActon+0x1ec>)
   86dc6:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   86dc8:	79fb      	ldrb	r3, [r7, #7]
   86dca:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   86dcc:	2301      	movs	r3, #1
   86dce:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   86dd0:	2302      	movs	r3, #2
   86dd2:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86dd4:	2307      	movs	r3, #7
   86dd6:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86dd8:	200a      	movs	r0, #10
   86dda:	4b18      	ldr	r3, [pc, #96]	; (86e3c <CL_DlsisAlarmActon+0x1f0>)
   86ddc:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   86dde:	f107 0108 	add.w	r1, r7, #8
   86de2:	7bfb      	ldrb	r3, [r7, #15]
   86de4:	2203      	movs	r2, #3
   86de6:	4618      	mov	r0, r3
   86de8:	4b15      	ldr	r3, [pc, #84]	; (86e40 <CL_DlsisAlarmActon+0x1f4>)
   86dea:	4798      	blx	r3
   86dec:	4603      	mov	r3, r0
   86dee:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   86df0:	232b      	movs	r3, #43	; 0x2b
   86df2:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   86df4:	2301      	movs	r3, #1
   86df6:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   86df8:	2302      	movs	r3, #2
   86dfa:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86dfc:	f107 0108 	add.w	r1, r7, #8
   86e00:	7bfb      	ldrb	r3, [r7, #15]
   86e02:	2202      	movs	r2, #2
   86e04:	4618      	mov	r0, r3
   86e06:	4b0e      	ldr	r3, [pc, #56]	; (86e40 <CL_DlsisAlarmActon+0x1f4>)
   86e08:	4798      	blx	r3
   86e0a:	4603      	mov	r3, r0
   86e0c:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   86e0e:	2300      	movs	r3, #0
}
   86e10:	4618      	mov	r0, r3
   86e12:	3718      	adds	r7, #24
   86e14:	46bd      	mov	sp, r7
   86e16:	bd80      	pop	{r7, pc}
   86e18:	00099d01 	.word	0x00099d01
   86e1c:	00099d3d 	.word	0x00099d3d
   86e20:	0008831d 	.word	0x0008831d
   86e24:	00099d15 	.word	0x00099d15
   86e28:	00088361 	.word	0x00088361
   86e2c:	00086fc1 	.word	0x00086fc1
   86e30:	20071924 	.word	0x20071924
   86e34:	20072175 	.word	0x20072175
   86e38:	2007216a 	.word	0x2007216a
   86e3c:	00093009 	.word	0x00093009
   86e40:	0009b805 	.word	0x0009b805

00086e44 <Cl_Dlsis_deactivateallalarms>:

Cl_ReturnCodeType Cl_Dlsis_deactivateallalarms(){
   86e44:	b580      	push	{r7, lr}
   86e46:	b082      	sub	sp, #8
   86e48:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86e4a:	2300      	movs	r3, #0
   86e4c:	71fb      	strb	r3, [r7, #7]
	
	Cl_Dlsis_ResetAlertsforReassertion();
   86e4e:	4b5a      	ldr	r3, [pc, #360]	; (86fb8 <Cl_Dlsis_deactivateallalarms+0x174>)
   86e50:	4798      	blx	r3
	
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86e52:	2101      	movs	r1, #1
   86e54:	203d      	movs	r0, #61	; 0x3d
   86e56:	4b59      	ldr	r3, [pc, #356]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e58:	4798      	blx	r3
   86e5a:	4603      	mov	r3, r0
   86e5c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
   86e5e:	2100      	movs	r1, #0
   86e60:	203e      	movs	r0, #62	; 0x3e
   86e62:	4b56      	ldr	r3, [pc, #344]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e64:	4798      	blx	r3
   86e66:	4603      	mov	r3, r0
   86e68:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86e6a:	2100      	movs	r1, #0
   86e6c:	2005      	movs	r0, #5
   86e6e:	4b53      	ldr	r3, [pc, #332]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e70:	4798      	blx	r3
   86e72:	4603      	mov	r3, r0
   86e74:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86e76:	2100      	movs	r1, #0
   86e78:	2006      	movs	r0, #6
   86e7a:	4b50      	ldr	r3, [pc, #320]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e7c:	4798      	blx	r3
   86e7e:	4603      	mov	r3, r0
   86e80:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86e82:	2100      	movs	r1, #0
   86e84:	2003      	movs	r0, #3
   86e86:	4b4d      	ldr	r3, [pc, #308]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e88:	4798      	blx	r3
   86e8a:	4603      	mov	r3, r0
   86e8c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86e8e:	2100      	movs	r1, #0
   86e90:	2004      	movs	r0, #4
   86e92:	4b4a      	ldr	r3, [pc, #296]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86e94:	4798      	blx	r3
   86e96:	4603      	mov	r3, r0
   86e98:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86e9a:	2100      	movs	r1, #0
   86e9c:	2007      	movs	r0, #7
   86e9e:	4b47      	ldr	r3, [pc, #284]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86ea0:	4798      	blx	r3
   86ea2:	4603      	mov	r3, r0
   86ea4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86ea6:	2100      	movs	r1, #0
   86ea8:	2008      	movs	r0, #8
   86eaa:	4b44      	ldr	r3, [pc, #272]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86eac:	4798      	blx	r3
   86eae:	4603      	mov	r3, r0
   86eb0:	71fb      	strb	r3, [r7, #7]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,false );
   86eb2:	2100      	movs	r1, #0
   86eb4:	2020      	movs	r0, #32
   86eb6:	4b41      	ldr	r3, [pc, #260]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86eb8:	4798      	blx	r3
   86eba:	4603      	mov	r3, r0
   86ebc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86ebe:	2100      	movs	r1, #0
   86ec0:	2021      	movs	r0, #33	; 0x21
   86ec2:	4b3e      	ldr	r3, [pc, #248]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86ec4:	4798      	blx	r3
   86ec6:	4603      	mov	r3, r0
   86ec8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86eca:	2100      	movs	r1, #0
   86ecc:	2024      	movs	r0, #36	; 0x24
   86ece:	4b3b      	ldr	r3, [pc, #236]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86ed0:	4798      	blx	r3
   86ed2:	4603      	mov	r3, r0
   86ed4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   86ed6:	2100      	movs	r1, #0
   86ed8:	2026      	movs	r0, #38	; 0x26
   86eda:	4b38      	ldr	r3, [pc, #224]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86edc:	4798      	blx	r3
   86ede:	4603      	mov	r3, r0
   86ee0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86ee2:	2100      	movs	r1, #0
   86ee4:	2023      	movs	r0, #35	; 0x23
   86ee6:	4b35      	ldr	r3, [pc, #212]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86ee8:	4798      	blx	r3
   86eea:	4603      	mov	r3, r0
   86eec:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   86eee:	2100      	movs	r1, #0
   86ef0:	2025      	movs	r0, #37	; 0x25
   86ef2:	4b32      	ldr	r3, [pc, #200]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86ef4:	4798      	blx	r3
   86ef6:	4603      	mov	r3, r0
   86ef8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   86efa:	2101      	movs	r1, #1
   86efc:	2022      	movs	r0, #34	; 0x22
   86efe:	4b2f      	ldr	r3, [pc, #188]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f00:	4798      	blx	r3
   86f02:	4603      	mov	r3, r0
   86f04:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86f06:	2100      	movs	r1, #0
   86f08:	2017      	movs	r0, #23
   86f0a:	4b2c      	ldr	r3, [pc, #176]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f0c:	4798      	blx	r3
   86f0e:	4603      	mov	r3, r0
   86f10:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86f12:	2100      	movs	r1, #0
   86f14:	2018      	movs	r0, #24
   86f16:	4b29      	ldr	r3, [pc, #164]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f18:	4798      	blx	r3
   86f1a:	4603      	mov	r3, r0
   86f1c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86f1e:	2100      	movs	r1, #0
   86f20:	2015      	movs	r0, #21
   86f22:	4b26      	ldr	r3, [pc, #152]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f24:	4798      	blx	r3
   86f26:	4603      	mov	r3, r0
   86f28:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86f2a:	2100      	movs	r1, #0
   86f2c:	2016      	movs	r0, #22
   86f2e:	4b23      	ldr	r3, [pc, #140]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f30:	4798      	blx	r3
   86f32:	4603      	mov	r3, r0
   86f34:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   86f36:	2100      	movs	r1, #0
   86f38:	2027      	movs	r0, #39	; 0x27
   86f3a:	4b20      	ldr	r3, [pc, #128]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f3c:	4798      	blx	r3
   86f3e:	4603      	mov	r3, r0
   86f40:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   86f42:	2100      	movs	r1, #0
   86f44:	2028      	movs	r0, #40	; 0x28
   86f46:	4b1d      	ldr	r3, [pc, #116]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f48:	4798      	blx	r3
   86f4a:	4603      	mov	r3, r0
   86f4c:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   86f4e:	2100      	movs	r1, #0
   86f50:	2014      	movs	r0, #20
   86f52:	4b1a      	ldr	r3, [pc, #104]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f54:	4798      	blx	r3
   86f56:	4603      	mov	r3, r0
   86f58:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   86f5a:	2100      	movs	r1, #0
   86f5c:	2013      	movs	r0, #19
   86f5e:	4b17      	ldr	r3, [pc, #92]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f60:	4798      	blx	r3
   86f62:	4603      	mov	r3, r0
   86f64:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   86f66:	2100      	movs	r1, #0
   86f68:	200f      	movs	r0, #15
   86f6a:	4b14      	ldr	r3, [pc, #80]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f6c:	4798      	blx	r3
   86f6e:	4603      	mov	r3, r0
   86f70:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   86f72:	2100      	movs	r1, #0
   86f74:	2010      	movs	r0, #16
   86f76:	4b11      	ldr	r3, [pc, #68]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f78:	4798      	blx	r3
   86f7a:	4603      	mov	r3, r0
   86f7c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   86f7e:	2100      	movs	r1, #0
   86f80:	2011      	movs	r0, #17
   86f82:	4b0e      	ldr	r3, [pc, #56]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f84:	4798      	blx	r3
   86f86:	4603      	mov	r3, r0
   86f88:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   86f8a:	2100      	movs	r1, #0
   86f8c:	2012      	movs	r0, #18
   86f8e:	4b0b      	ldr	r3, [pc, #44]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f90:	4798      	blx	r3
   86f92:	4603      	mov	r3, r0
   86f94:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   86f96:	2100      	movs	r1, #0
   86f98:	2013      	movs	r0, #19
   86f9a:	4b08      	ldr	r3, [pc, #32]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86f9c:	4798      	blx	r3
   86f9e:	4603      	mov	r3, r0
   86fa0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   86fa2:	2100      	movs	r1, #0
   86fa4:	2014      	movs	r0, #20
   86fa6:	4b05      	ldr	r3, [pc, #20]	; (86fbc <Cl_Dlsis_deactivateallalarms+0x178>)
   86fa8:	4798      	blx	r3
   86faa:	4603      	mov	r3, r0
   86fac:	71fb      	strb	r3, [r7, #7]
									
	
	
	return CL_OK;
   86fae:	2300      	movs	r3, #0
}
   86fb0:	4618      	mov	r0, r3
   86fb2:	3708      	adds	r7, #8
   86fb4:	46bd      	mov	sp, r7
   86fb6:	bd80      	pop	{r7, pc}
   86fb8:	00087471 	.word	0x00087471
   86fbc:	00082de1 	.word	0x00082de1

00086fc0 <Cl_Dlsis_StopDialysis>:

Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   86fc0:	b580      	push	{r7, lr}
   86fc2:	b082      	sub	sp, #8
   86fc4:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86fc6:	2300      	movs	r3, #0
   86fc8:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_deactivateallalarms();
   86fca:	4b2b      	ldr	r3, [pc, #172]	; (87078 <Cl_Dlsis_StopDialysis+0xb8>)
   86fcc:	4798      	blx	r3
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   86fce:	4b2b      	ldr	r3, [pc, #172]	; (8707c <Cl_Dlsis_StopDialysis+0xbc>)
   86fd0:	781b      	ldrb	r3, [r3, #0]
   86fd2:	2b00      	cmp	r3, #0
   86fd4:	d04b      	beq.n	8706e <Cl_Dlsis_StopDialysis+0xae>
   86fd6:	4b29      	ldr	r3, [pc, #164]	; (8707c <Cl_Dlsis_StopDialysis+0xbc>)
   86fd8:	781b      	ldrb	r3, [r3, #0]
   86fda:	2b09      	cmp	r3, #9
   86fdc:	d047      	beq.n	8706e <Cl_Dlsis_StopDialysis+0xae>
   86fde:	4b27      	ldr	r3, [pc, #156]	; (8707c <Cl_Dlsis_StopDialysis+0xbc>)
   86fe0:	781b      	ldrb	r3, [r3, #0]
   86fe2:	2b07      	cmp	r3, #7
   86fe4:	d043      	beq.n	8706e <Cl_Dlsis_StopDialysis+0xae>
   86fe6:	4b25      	ldr	r3, [pc, #148]	; (8707c <Cl_Dlsis_StopDialysis+0xbc>)
   86fe8:	781b      	ldrb	r3, [r3, #0]
   86fea:	2b0a      	cmp	r3, #10
   86fec:	d03f      	beq.n	8706e <Cl_Dlsis_StopDialysis+0xae>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   86fee:	4b24      	ldr	r3, [pc, #144]	; (87080 <Cl_Dlsis_StopDialysis+0xc0>)
   86ff0:	2200      	movs	r2, #0
   86ff2:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   86ff4:	4b22      	ldr	r3, [pc, #136]	; (87080 <Cl_Dlsis_StopDialysis+0xc0>)
   86ff6:	2200      	movs	r2, #0
   86ff8:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   86ffa:	4b21      	ldr	r3, [pc, #132]	; (87080 <Cl_Dlsis_StopDialysis+0xc0>)
   86ffc:	2200      	movs	r2, #0
   86ffe:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   87000:	4b1f      	ldr	r3, [pc, #124]	; (87080 <Cl_Dlsis_StopDialysis+0xc0>)
   87002:	2200      	movs	r2, #0
   87004:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   87006:	4b1e      	ldr	r3, [pc, #120]	; (87080 <Cl_Dlsis_StopDialysis+0xc0>)
   87008:	2200      	movs	r2, #0
   8700a:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   8700c:	4b1d      	ldr	r3, [pc, #116]	; (87084 <Cl_Dlsis_StopDialysis+0xc4>)
   8700e:	4798      	blx	r3
   87010:	4603      	mov	r3, r0
   87012:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   87014:	2004      	movs	r0, #4
   87016:	4b1c      	ldr	r3, [pc, #112]	; (87088 <Cl_Dlsis_StopDialysis+0xc8>)
   87018:	4798      	blx	r3
   8701a:	4603      	mov	r3, r0
   8701c:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8701e:	2011      	movs	r0, #17
   87020:	4b1a      	ldr	r3, [pc, #104]	; (8708c <Cl_Dlsis_StopDialysis+0xcc>)
   87022:	4798      	blx	r3
   87024:	4603      	mov	r3, r0
   87026:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   87028:	4b19      	ldr	r3, [pc, #100]	; (87090 <Cl_Dlsis_StopDialysis+0xd0>)
   8702a:	4798      	blx	r3
   8702c:	4603      	mov	r3, r0
   8702e:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   87030:	2004      	movs	r0, #4
   87032:	4b18      	ldr	r3, [pc, #96]	; (87094 <Cl_Dlsis_StopDialysis+0xd4>)
   87034:	4798      	blx	r3
   87036:	4603      	mov	r3, r0
   87038:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   8703a:	2100      	movs	r1, #0
   8703c:	2004      	movs	r0, #4
   8703e:	4b16      	ldr	r3, [pc, #88]	; (87098 <Cl_Dlsis_StopDialysis+0xd8>)
   87040:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   87042:	2011      	movs	r0, #17
   87044:	4b11      	ldr	r3, [pc, #68]	; (8708c <Cl_Dlsis_StopDialysis+0xcc>)
   87046:	4798      	blx	r3
   87048:	4603      	mov	r3, r0
   8704a:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   8704c:	4b0b      	ldr	r3, [pc, #44]	; (8707c <Cl_Dlsis_StopDialysis+0xbc>)
   8704e:	2200      	movs	r2, #0
   87050:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   87052:	1dbb      	adds	r3, r7, #6
   87054:	2200      	movs	r2, #0
   87056:	4619      	mov	r1, r3
   87058:	2014      	movs	r0, #20
   8705a:	4b10      	ldr	r3, [pc, #64]	; (8709c <Cl_Dlsis_StopDialysis+0xdc>)
   8705c:	4798      	blx	r3
   8705e:	4603      	mov	r3, r0
   87060:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   87062:	2005      	movs	r0, #5
   87064:	4b0e      	ldr	r3, [pc, #56]	; (870a0 <Cl_Dlsis_StopDialysis+0xe0>)
   87066:	4798      	blx	r3
				bc_flag = 0;
   87068:	4b0e      	ldr	r3, [pc, #56]	; (870a4 <Cl_Dlsis_StopDialysis+0xe4>)
   8706a:	2200      	movs	r2, #0
   8706c:	701a      	strb	r2, [r3, #0]
					
				}
				
				// deactivate all alarms
				
				return CL_OK;
   8706e:	2300      	movs	r3, #0
}
   87070:	4618      	mov	r0, r3
   87072:	3708      	adds	r7, #8
   87074:	46bd      	mov	sp, r7
   87076:	bd80      	pop	{r7, pc}
   87078:	00086e45 	.word	0x00086e45
   8707c:	20071924 	.word	0x20071924
   87080:	20072170 	.word	0x20072170
   87084:	00099c09 	.word	0x00099c09
   87088:	00099a45 	.word	0x00099a45
   8708c:	00099c99 	.word	0x00099c99
   87090:	00099a95 	.word	0x00099a95
   87094:	00089385 	.word	0x00089385
   87098:	0009316d 	.word	0x0009316d
   8709c:	0009b805 	.word	0x0009b805
   870a0:	000832a1 	.word	0x000832a1
   870a4:	20071943 	.word	0x20071943

000870a8 <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   870a8:	b580      	push	{r7, lr}
   870aa:	b082      	sub	sp, #8
   870ac:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   870ae:	2300      	movs	r3, #0
   870b0:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   870b2:	4b5e      	ldr	r3, [pc, #376]	; (8722c <Cl_Dlsis_BypassDialysis+0x184>)
   870b4:	4798      	blx	r3
   870b6:	4603      	mov	r3, r0
   870b8:	71fb      	strb	r3, [r7, #7]
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   870ba:	2100      	movs	r1, #0
   870bc:	2004      	movs	r0, #4
   870be:	4b5c      	ldr	r3, [pc, #368]	; (87230 <Cl_Dlsis_BypassDialysis+0x188>)
   870c0:	4798      	blx	r3
			//Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   870c2:	4b5c      	ldr	r3, [pc, #368]	; (87234 <Cl_Dlsis_BypassDialysis+0x18c>)
   870c4:	781b      	ldrb	r3, [r3, #0]
   870c6:	461a      	mov	r2, r3
   870c8:	4b5b      	ldr	r3, [pc, #364]	; (87238 <Cl_Dlsis_BypassDialysis+0x190>)
   870ca:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   870cc:	4b59      	ldr	r3, [pc, #356]	; (87234 <Cl_Dlsis_BypassDialysis+0x18c>)
   870ce:	789b      	ldrb	r3, [r3, #2]
   870d0:	461a      	mov	r2, r3
   870d2:	4b5a      	ldr	r3, [pc, #360]	; (8723c <Cl_Dlsis_BypassDialysis+0x194>)
   870d4:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   870d6:	4b57      	ldr	r3, [pc, #348]	; (87234 <Cl_Dlsis_BypassDialysis+0x18c>)
   870d8:	785b      	ldrb	r3, [r3, #1]
   870da:	461a      	mov	r2, r3
   870dc:	4b58      	ldr	r3, [pc, #352]	; (87240 <Cl_Dlsis_BypassDialysis+0x198>)
   870de:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   870e0:	4b54      	ldr	r3, [pc, #336]	; (87234 <Cl_Dlsis_BypassDialysis+0x18c>)
   870e2:	78db      	ldrb	r3, [r3, #3]
   870e4:	461a      	mov	r2, r3
   870e6:	4b57      	ldr	r3, [pc, #348]	; (87244 <Cl_Dlsis_BypassDialysis+0x19c>)
   870e8:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   870ea:	4b52      	ldr	r3, [pc, #328]	; (87234 <Cl_Dlsis_BypassDialysis+0x18c>)
   870ec:	791b      	ldrb	r3, [r3, #4]
   870ee:	461a      	mov	r2, r3
   870f0:	4b55      	ldr	r3, [pc, #340]	; (87248 <Cl_Dlsis_BypassDialysis+0x1a0>)
   870f2:	601a      	str	r2, [r3, #0]
// 			DlsisTime.Cl_dlsissecondscounter = 0;
// 			DlsisTime.Cl_dlsishourscounter = 0;
// 			DlsisTime.Cl_dlsisMinutescounter = 0;
// 			DlsisTime.Cl_dlsisTotalhourscounter = 0;
// 			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   870f4:	2100      	movs	r1, #0
   870f6:	2001      	movs	r0, #1
   870f8:	4b54      	ldr	r3, [pc, #336]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   870fa:	4798      	blx	r3
   870fc:	4603      	mov	r3, r0
   870fe:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   87100:	2100      	movs	r1, #0
   87102:	2024      	movs	r0, #36	; 0x24
   87104:	4b51      	ldr	r3, [pc, #324]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87106:	4798      	blx	r3
   87108:	4603      	mov	r3, r0
   8710a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   8710c:	2100      	movs	r1, #0
   8710e:	2023      	movs	r0, #35	; 0x23
   87110:	4b4e      	ldr	r3, [pc, #312]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87112:	4798      	blx	r3
   87114:	4603      	mov	r3, r0
   87116:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,false );
   87118:	2100      	movs	r1, #0
   8711a:	2026      	movs	r0, #38	; 0x26
   8711c:	4b4b      	ldr	r3, [pc, #300]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8711e:	4798      	blx	r3
   87120:	4603      	mov	r3, r0
   87122:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false );
   87124:	2100      	movs	r1, #0
   87126:	2025      	movs	r0, #37	; 0x25
   87128:	4b48      	ldr	r3, [pc, #288]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8712a:	4798      	blx	r3
   8712c:	4603      	mov	r3, r0
   8712e:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   87130:	2100      	movs	r1, #0
   87132:	2015      	movs	r0, #21
   87134:	4b45      	ldr	r3, [pc, #276]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87136:	4798      	blx	r3
   87138:	4603      	mov	r3, r0
   8713a:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   8713c:	2100      	movs	r1, #0
   8713e:	2016      	movs	r0, #22
   87140:	4b42      	ldr	r3, [pc, #264]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87142:	4798      	blx	r3
   87144:	4603      	mov	r3, r0
   87146:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   87148:	2100      	movs	r1, #0
   8714a:	2017      	movs	r0, #23
   8714c:	4b3f      	ldr	r3, [pc, #252]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8714e:	4798      	blx	r3
   87150:	4603      	mov	r3, r0
   87152:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   87154:	2100      	movs	r1, #0
   87156:	2018      	movs	r0, #24
   87158:	4b3c      	ldr	r3, [pc, #240]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8715a:	4798      	blx	r3
   8715c:	4603      	mov	r3, r0
   8715e:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   87160:	2100      	movs	r1, #0
   87162:	2027      	movs	r0, #39	; 0x27
   87164:	4b39      	ldr	r3, [pc, #228]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87166:	4798      	blx	r3
   87168:	4603      	mov	r3, r0
   8716a:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   8716c:	2100      	movs	r1, #0
   8716e:	2028      	movs	r0, #40	; 0x28
   87170:	4b36      	ldr	r3, [pc, #216]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87172:	4798      	blx	r3
   87174:	4603      	mov	r3, r0
   87176:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   87178:	2100      	movs	r1, #0
   8717a:	2005      	movs	r0, #5
   8717c:	4b33      	ldr	r3, [pc, #204]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8717e:	4798      	blx	r3
   87180:	4603      	mov	r3, r0
   87182:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   87184:	2100      	movs	r1, #0
   87186:	2006      	movs	r0, #6
   87188:	4b30      	ldr	r3, [pc, #192]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   8718a:	4798      	blx	r3
   8718c:	4603      	mov	r3, r0
   8718e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87190:	2100      	movs	r1, #0
   87192:	2003      	movs	r0, #3
   87194:	4b2d      	ldr	r3, [pc, #180]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   87196:	4798      	blx	r3
   87198:	4603      	mov	r3, r0
   8719a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8719c:	2100      	movs	r1, #0
   8719e:	2004      	movs	r0, #4
   871a0:	4b2a      	ldr	r3, [pc, #168]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871a2:	4798      	blx	r3
   871a4:	4603      	mov	r3, r0
   871a6:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   871a8:	2100      	movs	r1, #0
   871aa:	2007      	movs	r0, #7
   871ac:	4b27      	ldr	r3, [pc, #156]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871ae:	4798      	blx	r3
   871b0:	4603      	mov	r3, r0
   871b2:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   871b4:	2100      	movs	r1, #0
   871b6:	2008      	movs	r0, #8
   871b8:	4b24      	ldr	r3, [pc, #144]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871ba:	4798      	blx	r3
   871bc:	4603      	mov	r3, r0
   871be:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   871c0:	2100      	movs	r1, #0
   871c2:	2029      	movs	r0, #41	; 0x29
   871c4:	4b21      	ldr	r3, [pc, #132]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871c6:	4798      	blx	r3
   871c8:	4603      	mov	r3, r0
   871ca:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   871cc:	2100      	movs	r1, #0
   871ce:	202b      	movs	r0, #43	; 0x2b
   871d0:	4b1e      	ldr	r3, [pc, #120]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871d2:	4798      	blx	r3
   871d4:	4603      	mov	r3, r0
   871d6:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   871d8:	2100      	movs	r1, #0
   871da:	2021      	movs	r0, #33	; 0x21
   871dc:	4b1b      	ldr	r3, [pc, #108]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871de:	4798      	blx	r3
   871e0:	4603      	mov	r3, r0
   871e2:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   871e4:	2100      	movs	r1, #0
   871e6:	2013      	movs	r0, #19
   871e8:	4b18      	ldr	r3, [pc, #96]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871ea:	4798      	blx	r3
   871ec:	4603      	mov	r3, r0
   871ee:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   871f0:	2100      	movs	r1, #0
   871f2:	2014      	movs	r0, #20
   871f4:	4b15      	ldr	r3, [pc, #84]	; (8724c <Cl_Dlsis_BypassDialysis+0x1a4>)
   871f6:	4798      	blx	r3
   871f8:	4603      	mov	r3, r0
   871fa:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   871fc:	4b14      	ldr	r3, [pc, #80]	; (87250 <Cl_Dlsis_BypassDialysis+0x1a8>)
   871fe:	2208      	movs	r2, #8
   87200:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   87202:	1dbb      	adds	r3, r7, #6
   87204:	2200      	movs	r2, #0
   87206:	4619      	mov	r1, r3
   87208:	2041      	movs	r0, #65	; 0x41
   8720a:	4b12      	ldr	r3, [pc, #72]	; (87254 <Cl_Dlsis_BypassDialysis+0x1ac>)
   8720c:	4798      	blx	r3
   8720e:	4603      	mov	r3, r0
   87210:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   87212:	1dbb      	adds	r3, r7, #6
   87214:	2200      	movs	r2, #0
   87216:	4619      	mov	r1, r3
   87218:	2040      	movs	r0, #64	; 0x40
   8721a:	4b0e      	ldr	r3, [pc, #56]	; (87254 <Cl_Dlsis_BypassDialysis+0x1ac>)
   8721c:	4798      	blx	r3
   8721e:	4603      	mov	r3, r0
   87220:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   87222:	2300      	movs	r3, #0
}
   87224:	4618      	mov	r0, r3
   87226:	3708      	adds	r7, #8
   87228:	46bd      	mov	sp, r7
   8722a:	bd80      	pop	{r7, pc}
   8722c:	00099c55 	.word	0x00099c55
   87230:	00095bbd 	.word	0x00095bbd
   87234:	20072170 	.word	0x20072170
   87238:	20071928 	.word	0x20071928
   8723c:	20071930 	.word	0x20071930
   87240:	2007192c 	.word	0x2007192c
   87244:	20071934 	.word	0x20071934
   87248:	20071938 	.word	0x20071938
   8724c:	00082de1 	.word	0x00082de1
   87250:	20071924 	.word	0x20071924
   87254:	0009b805 	.word	0x0009b805

00087258 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   87258:	b580      	push	{r7, lr}
   8725a:	b082      	sub	sp, #8
   8725c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8725e:	2300      	movs	r3, #0
   87260:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87262:	4b4f      	ldr	r3, [pc, #316]	; (873a0 <Cl_Dlsis_BypassOff+0x148>)
   87264:	4798      	blx	r3
   87266:	4603      	mov	r3, r0
   87268:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   8726a:	4b4e      	ldr	r3, [pc, #312]	; (873a4 <Cl_Dlsis_BypassOff+0x14c>)
   8726c:	681b      	ldr	r3, [r3, #0]
   8726e:	b2da      	uxtb	r2, r3
   87270:	4b4d      	ldr	r3, [pc, #308]	; (873a8 <Cl_Dlsis_BypassOff+0x150>)
   87272:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   87274:	4b4d      	ldr	r3, [pc, #308]	; (873ac <Cl_Dlsis_BypassOff+0x154>)
   87276:	681b      	ldr	r3, [r3, #0]
   87278:	b2da      	uxtb	r2, r3
   8727a:	4b4b      	ldr	r3, [pc, #300]	; (873a8 <Cl_Dlsis_BypassOff+0x150>)
   8727c:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   8727e:	4b4c      	ldr	r3, [pc, #304]	; (873b0 <Cl_Dlsis_BypassOff+0x158>)
   87280:	681b      	ldr	r3, [r3, #0]
   87282:	b2da      	uxtb	r2, r3
   87284:	4b48      	ldr	r3, [pc, #288]	; (873a8 <Cl_Dlsis_BypassOff+0x150>)
   87286:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   87288:	4b4a      	ldr	r3, [pc, #296]	; (873b4 <Cl_Dlsis_BypassOff+0x15c>)
   8728a:	681b      	ldr	r3, [r3, #0]
   8728c:	b2da      	uxtb	r2, r3
   8728e:	4b46      	ldr	r3, [pc, #280]	; (873a8 <Cl_Dlsis_BypassOff+0x150>)
   87290:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   87292:	4b49      	ldr	r3, [pc, #292]	; (873b8 <Cl_Dlsis_BypassOff+0x160>)
   87294:	681b      	ldr	r3, [r3, #0]
   87296:	b2da      	uxtb	r2, r3
   87298:	4b43      	ldr	r3, [pc, #268]	; (873a8 <Cl_Dlsis_BypassOff+0x150>)
   8729a:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8729c:	2101      	movs	r1, #1
   8729e:	2001      	movs	r0, #1
   872a0:	4b46      	ldr	r3, [pc, #280]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872a2:	4798      	blx	r3
   872a4:	4603      	mov	r3, r0
   872a6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   872a8:	2101      	movs	r1, #1
   872aa:	203d      	movs	r0, #61	; 0x3d
   872ac:	4b43      	ldr	r3, [pc, #268]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872ae:	4798      	blx	r3
   872b0:	4603      	mov	r3, r0
   872b2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   872b4:	2101      	movs	r1, #1
   872b6:	203e      	movs	r0, #62	; 0x3e
   872b8:	4b40      	ldr	r3, [pc, #256]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872ba:	4798      	blx	r3
   872bc:	4603      	mov	r3, r0
   872be:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   872c0:	2101      	movs	r1, #1
   872c2:	2005      	movs	r0, #5
   872c4:	4b3d      	ldr	r3, [pc, #244]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872c6:	4798      	blx	r3
   872c8:	4603      	mov	r3, r0
   872ca:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   872cc:	2101      	movs	r1, #1
   872ce:	2006      	movs	r0, #6
   872d0:	4b3a      	ldr	r3, [pc, #232]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872d2:	4798      	blx	r3
   872d4:	4603      	mov	r3, r0
   872d6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   872d8:	2100      	movs	r1, #0
   872da:	2003      	movs	r0, #3
   872dc:	4b37      	ldr	r3, [pc, #220]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872de:	4798      	blx	r3
   872e0:	4603      	mov	r3, r0
   872e2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   872e4:	2100      	movs	r1, #0
   872e6:	2004      	movs	r0, #4
   872e8:	4b34      	ldr	r3, [pc, #208]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872ea:	4798      	blx	r3
   872ec:	4603      	mov	r3, r0
   872ee:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   872f0:	2100      	movs	r1, #0
   872f2:	2007      	movs	r0, #7
   872f4:	4b31      	ldr	r3, [pc, #196]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   872f6:	4798      	blx	r3
   872f8:	4603      	mov	r3, r0
   872fa:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   872fc:	2100      	movs	r1, #0
   872fe:	2008      	movs	r0, #8
   87300:	4b2e      	ldr	r3, [pc, #184]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   87302:	4798      	blx	r3
   87304:	4603      	mov	r3, r0
   87306:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   87308:	2101      	movs	r1, #1
   8730a:	202a      	movs	r0, #42	; 0x2a
   8730c:	4b2b      	ldr	r3, [pc, #172]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   8730e:	4798      	blx	r3
   87310:	4603      	mov	r3, r0
   87312:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   87314:	2101      	movs	r1, #1
   87316:	202c      	movs	r0, #44	; 0x2c
   87318:	4b28      	ldr	r3, [pc, #160]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   8731a:	4798      	blx	r3
   8731c:	4603      	mov	r3, r0
   8731e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   87320:	2100      	movs	r1, #0
   87322:	2029      	movs	r0, #41	; 0x29
   87324:	4b25      	ldr	r3, [pc, #148]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   87326:	4798      	blx	r3
   87328:	4603      	mov	r3, r0
   8732a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   8732c:	2100      	movs	r1, #0
   8732e:	202b      	movs	r0, #43	; 0x2b
   87330:	4b22      	ldr	r3, [pc, #136]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   87332:	4798      	blx	r3
   87334:	4603      	mov	r3, r0
   87336:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87338:	2100      	movs	r1, #0
   8733a:	2021      	movs	r0, #33	; 0x21
   8733c:	4b1f      	ldr	r3, [pc, #124]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   8733e:	4798      	blx	r3
   87340:	4603      	mov	r3, r0
   87342:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   87344:	2101      	movs	r1, #1
   87346:	2013      	movs	r0, #19
   87348:	4b1c      	ldr	r3, [pc, #112]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   8734a:	4798      	blx	r3
   8734c:	4603      	mov	r3, r0
   8734e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87350:	2101      	movs	r1, #1
   87352:	2014      	movs	r0, #20
   87354:	4b19      	ldr	r3, [pc, #100]	; (873bc <Cl_Dlsis_BypassOff+0x164>)
   87356:	4798      	blx	r3
   87358:	4603      	mov	r3, r0
   8735a:	71fb      	strb	r3, [r7, #7]
	  
	//Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
	cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;//CL_DLSIS_STATE_DIALYSIS;
   8735c:	4b18      	ldr	r3, [pc, #96]	; (873c0 <Cl_Dlsis_BypassOff+0x168>)
   8735e:	2202      	movs	r2, #2
   87360:	701a      	strb	r2, [r3, #0]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   87362:	1dbb      	adds	r3, r7, #6
   87364:	2200      	movs	r2, #0
   87366:	4619      	mov	r1, r3
   87368:	2042      	movs	r0, #66	; 0x42
   8736a:	4b16      	ldr	r3, [pc, #88]	; (873c4 <Cl_Dlsis_BypassOff+0x16c>)
   8736c:	4798      	blx	r3
   8736e:	4603      	mov	r3, r0
   87370:	71fb      	strb	r3, [r7, #7]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   87372:	1dbb      	adds	r3, r7, #6
   87374:	2200      	movs	r2, #0
   87376:	4619      	mov	r1, r3
   87378:	2043      	movs	r0, #67	; 0x43
   8737a:	4b12      	ldr	r3, [pc, #72]	; (873c4 <Cl_Dlsis_BypassOff+0x16c>)
   8737c:	4798      	blx	r3
   8737e:	4603      	mov	r3, r0
   87380:	71fb      	strb	r3, [r7, #7]
 		Cl_Dlsis_UpdateTimeInfo();
   87382:	4b11      	ldr	r3, [pc, #68]	; (873c8 <Cl_Dlsis_BypassOff+0x170>)
   87384:	4798      	blx	r3
 	bypass_flag = 1;
   87386:	4b11      	ldr	r3, [pc, #68]	; (873cc <Cl_Dlsis_BypassOff+0x174>)
   87388:	2201      	movs	r2, #1
   8738a:	701a      	strb	r2, [r3, #0]
// 	
 	cl_uf_controller(CL_UF_EVENT_START,0);
   8738c:	2100      	movs	r1, #0
   8738e:	2002      	movs	r0, #2
   87390:	4b0f      	ldr	r3, [pc, #60]	; (873d0 <Cl_Dlsis_BypassOff+0x178>)
   87392:	4798      	blx	r3
// 	cl_ufpumpFeedback_start();
// 	
return CL_OK;
   87394:	2300      	movs	r3, #0
}
   87396:	4618      	mov	r0, r3
   87398:	3708      	adds	r7, #8
   8739a:	46bd      	mov	sp, r7
   8739c:	bd80      	pop	{r7, pc}
   8739e:	bf00      	nop
   873a0:	00099c7d 	.word	0x00099c7d
   873a4:	20071928 	.word	0x20071928
   873a8:	20072170 	.word	0x20072170
   873ac:	20071930 	.word	0x20071930
   873b0:	2007192c 	.word	0x2007192c
   873b4:	20071934 	.word	0x20071934
   873b8:	20071938 	.word	0x20071938
   873bc:	00082de1 	.word	0x00082de1
   873c0:	20071924 	.word	0x20071924
   873c4:	0009b805 	.word	0x0009b805
   873c8:	00086a3d 	.word	0x00086a3d
   873cc:	20071942 	.word	0x20071942
   873d0:	00095bbd 	.word	0x00095bbd

000873d4 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   873d4:	b580      	push	{r7, lr}
   873d6:	b082      	sub	sp, #8
   873d8:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   873da:	2300      	movs	r3, #0
   873dc:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   873de:	4b0f      	ldr	r3, [pc, #60]	; (8741c <Cl_Dlsis_PauseDialysis+0x48>)
   873e0:	781b      	ldrb	r3, [r3, #0]
   873e2:	2b00      	cmp	r3, #0
   873e4:	d015      	beq.n	87412 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   873e6:	4b0d      	ldr	r3, [pc, #52]	; (8741c <Cl_Dlsis_PauseDialysis+0x48>)
   873e8:	781b      	ldrb	r3, [r3, #0]
   873ea:	3b02      	subs	r3, #2
   873ec:	2b03      	cmp	r3, #3
   873ee:	d80f      	bhi.n	87410 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   873f0:	4b0b      	ldr	r3, [pc, #44]	; (87420 <Cl_Dlsis_PauseDialysis+0x4c>)
   873f2:	4798      	blx	r3
   873f4:	4603      	mov	r3, r0
   873f6:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   873f8:	4b08      	ldr	r3, [pc, #32]	; (8741c <Cl_Dlsis_PauseDialysis+0x48>)
   873fa:	2207      	movs	r2, #7
   873fc:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   873fe:	1dbb      	adds	r3, r7, #6
   87400:	2200      	movs	r2, #0
   87402:	4619      	mov	r1, r3
   87404:	2040      	movs	r0, #64	; 0x40
   87406:	4b07      	ldr	r3, [pc, #28]	; (87424 <Cl_Dlsis_PauseDialysis+0x50>)
   87408:	4798      	blx	r3
   8740a:	4603      	mov	r3, r0
   8740c:	71fb      	strb	r3, [r7, #7]
			
			break;
   8740e:	e000      	b.n	87412 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   87410:	bf00      	nop
		}
return CL_OK;
   87412:	2300      	movs	r3, #0
	
}
   87414:	4618      	mov	r0, r3
   87416:	3708      	adds	r7, #8
   87418:	46bd      	mov	sp, r7
   8741a:	bd80      	pop	{r7, pc}
   8741c:	20071924 	.word	0x20071924
   87420:	00099c55 	.word	0x00099c55
   87424:	0009b805 	.word	0x0009b805

00087428 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   87428:	b580      	push	{r7, lr}
   8742a:	b082      	sub	sp, #8
   8742c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   8742e:	2300      	movs	r3, #0
   87430:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87432:	2351      	movs	r3, #81	; 0x51
   87434:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   87436:	1d7b      	adds	r3, r7, #5
   87438:	4618      	mov	r0, r3
   8743a:	4b04      	ldr	r3, [pc, #16]	; (8744c <Cl_Dlsis_ProcessAlarms+0x24>)
   8743c:	4798      	blx	r3
   8743e:	4603      	mov	r3, r0
   87440:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   87442:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   87444:	4618      	mov	r0, r3
   87446:	3708      	adds	r7, #8
   87448:	46bd      	mov	sp, r7
   8744a:	bd80      	pop	{r7, pc}
   8744c:	00086b41 	.word	0x00086b41

00087450 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   87450:	b580      	push	{r7, lr}
   87452:	b082      	sub	sp, #8
   87454:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   87456:	2300      	movs	r3, #0
   87458:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   8745a:	2001      	movs	r0, #1
   8745c:	4b03      	ldr	r3, [pc, #12]	; (8746c <Cl_DlsisFillingFlowOff+0x1c>)
   8745e:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   87460:	79fb      	ldrb	r3, [r7, #7]
	
}
   87462:	4618      	mov	r0, r3
   87464:	3708      	adds	r7, #8
   87466:	46bd      	mov	sp, r7
   87468:	bd80      	pop	{r7, pc}
   8746a:	bf00      	nop
   8746c:	00099ac9 	.word	0x00099ac9

00087470 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   87470:	b580      	push	{r7, lr}
   87472:	b082      	sub	sp, #8
   87474:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   87476:	2300      	movs	r3, #0
   87478:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8747a:	2351      	movs	r3, #81	; 0x51
   8747c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   8747e:	4b55      	ldr	r3, [pc, #340]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87480:	2200      	movs	r2, #0
   87482:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   87484:	4b53      	ldr	r3, [pc, #332]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87486:	2200      	movs	r2, #0
   87488:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   8748a:	2005      	movs	r0, #5
   8748c:	4b52      	ldr	r3, [pc, #328]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8748e:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   87490:	2006      	movs	r0, #6
   87492:	4b51      	ldr	r3, [pc, #324]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87494:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   87496:	4b4f      	ldr	r3, [pc, #316]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87498:	2200      	movs	r2, #0
   8749a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   8749e:	2001      	movs	r0, #1
   874a0:	4b4d      	ldr	r3, [pc, #308]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874a2:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   874a4:	4b4b      	ldr	r3, [pc, #300]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874a6:	2200      	movs	r2, #0
   874a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   874ac:	4b49      	ldr	r3, [pc, #292]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874ae:	2200      	movs	r2, #0
   874b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   874b4:	2015      	movs	r0, #21
   874b6:	4b48      	ldr	r3, [pc, #288]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874b8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   874ba:	2016      	movs	r0, #22
   874bc:	4b46      	ldr	r3, [pc, #280]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874be:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   874c0:	4b44      	ldr	r3, [pc, #272]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874c2:	2200      	movs	r2, #0
   874c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   874c8:	4b42      	ldr	r3, [pc, #264]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874ca:	2200      	movs	r2, #0
   874cc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   874d0:	2017      	movs	r0, #23
   874d2:	4b41      	ldr	r3, [pc, #260]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874d4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   874d6:	2018      	movs	r0, #24
   874d8:	4b3f      	ldr	r3, [pc, #252]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874da:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   874dc:	4b3d      	ldr	r3, [pc, #244]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874de:	2200      	movs	r2, #0
   874e0:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   874e4:	4b3b      	ldr	r3, [pc, #236]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874e6:	2200      	movs	r2, #0
   874e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   874ec:	2027      	movs	r0, #39	; 0x27
   874ee:	4b3a      	ldr	r3, [pc, #232]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874f0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   874f2:	2028      	movs	r0, #40	; 0x28
   874f4:	4b38      	ldr	r3, [pc, #224]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   874f6:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   874f8:	4b36      	ldr	r3, [pc, #216]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   874fa:	2200      	movs	r2, #0
   874fc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   87500:	2021      	movs	r0, #33	; 0x21
   87502:	4b35      	ldr	r3, [pc, #212]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87504:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   87506:	4b33      	ldr	r3, [pc, #204]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87508:	2200      	movs	r2, #0
   8750a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   8750e:	2020      	movs	r0, #32
   87510:	4b31      	ldr	r3, [pc, #196]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87512:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   87514:	4b2f      	ldr	r3, [pc, #188]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87516:	2200      	movs	r2, #0
   87518:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   8751c:	2022      	movs	r0, #34	; 0x22
   8751e:	4b2e      	ldr	r3, [pc, #184]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87520:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   87522:	4b2c      	ldr	r3, [pc, #176]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87524:	2200      	movs	r2, #0
   87526:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   8752a:	4b2a      	ldr	r3, [pc, #168]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8752c:	2200      	movs	r2, #0
   8752e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   87532:	2024      	movs	r0, #36	; 0x24
   87534:	4b28      	ldr	r3, [pc, #160]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87536:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   87538:	2023      	movs	r0, #35	; 0x23
   8753a:	4b27      	ldr	r3, [pc, #156]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8753c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   8753e:	4b25      	ldr	r3, [pc, #148]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87540:	2200      	movs	r2, #0
   87542:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   87546:	4b23      	ldr	r3, [pc, #140]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87548:	2200      	movs	r2, #0
   8754a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   8754e:	2026      	movs	r0, #38	; 0x26
   87550:	4b21      	ldr	r3, [pc, #132]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87552:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   87554:	2025      	movs	r0, #37	; 0x25
   87556:	4b20      	ldr	r3, [pc, #128]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87558:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   8755a:	4b1e      	ldr	r3, [pc, #120]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8755c:	2200      	movs	r2, #0
   8755e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   87562:	4b1c      	ldr	r3, [pc, #112]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87564:	2200      	movs	r2, #0
   87566:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   8756a:	2007      	movs	r0, #7
   8756c:	4b1a      	ldr	r3, [pc, #104]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8756e:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   87570:	2008      	movs	r0, #8
   87572:	4b19      	ldr	r3, [pc, #100]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87574:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   87576:	4b17      	ldr	r3, [pc, #92]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87578:	2200      	movs	r2, #0
   8757a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   8757e:	4b15      	ldr	r3, [pc, #84]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87580:	2200      	movs	r2, #0
   87582:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   87586:	2013      	movs	r0, #19
   87588:	4b13      	ldr	r3, [pc, #76]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8758a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   8758c:	2014      	movs	r0, #20
   8758e:	4b12      	ldr	r3, [pc, #72]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87590:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   87592:	4b10      	ldr	r3, [pc, #64]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87594:	2200      	movs	r2, #0
   87596:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   8759a:	4b0e      	ldr	r3, [pc, #56]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8759c:	2200      	movs	r2, #0
   8759e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   875a2:	2011      	movs	r0, #17
   875a4:	4b0c      	ldr	r3, [pc, #48]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875a6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   875a8:	2012      	movs	r0, #18
   875aa:	4b0b      	ldr	r3, [pc, #44]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875ac:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   875ae:	4b09      	ldr	r3, [pc, #36]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875b0:	2200      	movs	r2, #0
   875b2:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   875b6:	4b07      	ldr	r3, [pc, #28]	; (875d4 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875b8:	2200      	movs	r2, #0
   875ba:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   875be:	200f      	movs	r0, #15
   875c0:	4b05      	ldr	r3, [pc, #20]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875c2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   875c4:	2010      	movs	r0, #16
   875c6:	4b04      	ldr	r3, [pc, #16]	; (875d8 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875c8:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   875ca:	79fb      	ldrb	r3, [r7, #7]
}
   875cc:	4618      	mov	r0, r3
   875ce:	3708      	adds	r7, #8
   875d0:	46bd      	mov	sp, r7
   875d2:	bd80      	pop	{r7, pc}
   875d4:	20070464 	.word	0x20070464
   875d8:	00082ed5 	.word	0x00082ed5
   875dc:	00000000 	.word	0x00000000

000875e0 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   875e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   875e2:	b099      	sub	sp, #100	; 0x64
   875e4:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   875e6:	f107 0310 	add.w	r3, r7, #16
   875ea:	222c      	movs	r2, #44	; 0x2c
   875ec:	2100      	movs	r1, #0
   875ee:	4618      	mov	r0, r3
   875f0:	4bad      	ldr	r3, [pc, #692]	; (878a8 <Cl_Dlsis_SenddlsisData+0x2c8>)
   875f2:	4798      	blx	r3
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   875f4:	2300      	movs	r3, #0
   875f6:	80fb      	strh	r3, [r7, #6]
   875f8:	2300      	movs	r3, #0
   875fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   875fe:	2300      	movs	r3, #0
   87600:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Cl_Uint8Type count = 0;
   87604:	2300      	movs	r3, #0
   87606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8760a:	2351      	movs	r3, #81	; 0x51
   8760c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   87610:	232a      	movs	r3, #42	; 0x2a
   87612:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	systemdataarray[0] = DIALYSIS_DATA;
   87616:	2305      	movs	r3, #5
   87618:	743b      	strb	r3, [r7, #16]
	count++;
   8761a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8761e:	3301      	adds	r3, #1
   87620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	averaging_count++;
   87624:	4ba1      	ldr	r3, [pc, #644]	; (878ac <Cl_Dlsis_SenddlsisData+0x2cc>)
   87626:	781b      	ldrb	r3, [r3, #0]
   87628:	3301      	adds	r3, #1
   8762a:	b2da      	uxtb	r2, r3
   8762c:	4b9f      	ldr	r3, [pc, #636]	; (878ac <Cl_Dlsis_SenddlsisData+0x2cc>)
   8762e:	701a      	strb	r2, [r3, #0]
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   87630:	1dbb      	adds	r3, r7, #6
   87632:	4619      	mov	r1, r3
   87634:	2014      	movs	r0, #20
   87636:	4b9e      	ldr	r3, [pc, #632]	; (878b0 <Cl_Dlsis_SenddlsisData+0x2d0>)
   87638:	4798      	blx	r3
// 							res_temp_lookuptable(cal_data);
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// 							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
// 							temp1 = temp1 - 0.4;                                  // removed offset on 02.07.17
							temp1 = (float)temp/10;
   8763a:	88fa      	ldrh	r2, [r7, #6]
   8763c:	4b9d      	ldr	r3, [pc, #628]	; (878b4 <Cl_Dlsis_SenddlsisData+0x2d4>)
   8763e:	4610      	mov	r0, r2
   87640:	4798      	blx	r3
   87642:	4602      	mov	r2, r0
   87644:	4b9c      	ldr	r3, [pc, #624]	; (878b8 <Cl_Dlsis_SenddlsisData+0x2d8>)
   87646:	499d      	ldr	r1, [pc, #628]	; (878bc <Cl_Dlsis_SenddlsisData+0x2dc>)
   87648:	4610      	mov	r0, r2
   8764a:	4798      	blx	r3
   8764c:	4603      	mov	r3, r0
   8764e:	461a      	mov	r2, r3
   87650:	4b9b      	ldr	r3, [pc, #620]	; (878c0 <Cl_Dlsis_SenddlsisData+0x2e0>)
   87652:	4610      	mov	r0, r2
   87654:	4798      	blx	r3
   87656:	4603      	mov	r3, r0
   87658:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							avgtmp3 =(avgtmp3*5 + temp1)/6;
   8765c:	4b99      	ldr	r3, [pc, #612]	; (878c4 <Cl_Dlsis_SenddlsisData+0x2e4>)
   8765e:	681a      	ldr	r2, [r3, #0]
   87660:	4b99      	ldr	r3, [pc, #612]	; (878c8 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87662:	499a      	ldr	r1, [pc, #616]	; (878cc <Cl_Dlsis_SenddlsisData+0x2ec>)
   87664:	4610      	mov	r0, r2
   87666:	4798      	blx	r3
   87668:	4603      	mov	r3, r0
   8766a:	461c      	mov	r4, r3
   8766c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   87670:	4b97      	ldr	r3, [pc, #604]	; (878d0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   87672:	4610      	mov	r0, r2
   87674:	4798      	blx	r3
   87676:	4602      	mov	r2, r0
   87678:	4b96      	ldr	r3, [pc, #600]	; (878d4 <Cl_Dlsis_SenddlsisData+0x2f4>)
   8767a:	4611      	mov	r1, r2
   8767c:	4620      	mov	r0, r4
   8767e:	4798      	blx	r3
   87680:	4603      	mov	r3, r0
   87682:	461a      	mov	r2, r3
   87684:	4b8c      	ldr	r3, [pc, #560]	; (878b8 <Cl_Dlsis_SenddlsisData+0x2d8>)
   87686:	4994      	ldr	r1, [pc, #592]	; (878d8 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87688:	4610      	mov	r0, r2
   8768a:	4798      	blx	r3
   8768c:	4603      	mov	r3, r0
   8768e:	461a      	mov	r2, r3
   87690:	4b8c      	ldr	r3, [pc, #560]	; (878c4 <Cl_Dlsis_SenddlsisData+0x2e4>)
   87692:	601a      	str	r2, [r3, #0]
							
		}
		
		uint16_t sensordata = 0;
   87694:	2300      	movs	r3, #0
   87696:	80bb      	strh	r3, [r7, #4]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   87698:	1d3b      	adds	r3, r7, #4
   8769a:	4619      	mov	r1, r3
   8769c:	2007      	movs	r0, #7
   8769e:	4b84      	ldr	r3, [pc, #528]	; (878b0 <Cl_Dlsis_SenddlsisData+0x2d0>)
   876a0:	4798      	blx	r3
// 				cond1x100 = cond_final*100; ;
// 				cond_final_X10000= (cond1x100/(1+(avgtmp3/10  -25.0)*0.021));
// 			
// 				cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;

float cond_comp=0;
   876a2:	f04f 0300 	mov.w	r3, #0
   876a6:	657b      	str	r3, [r7, #84]	; 0x54
float temp2=0;
   876a8:	f04f 0300 	mov.w	r3, #0
   876ac:	653b      	str	r3, [r7, #80]	; 0x50
float	 cond1,	cond_final, cond1x100, cond_final_X10000;
//	temp2 = temp * 0.8036;
sensordata = sensordata/10;
   876ae:	88bb      	ldrh	r3, [r7, #4]
   876b0:	4a8a      	ldr	r2, [pc, #552]	; (878dc <Cl_Dlsis_SenddlsisData+0x2fc>)
   876b2:	fba2 2303 	umull	r2, r3, r2, r3
   876b6:	08db      	lsrs	r3, r3, #3
   876b8:	b29b      	uxth	r3, r3
   876ba:	80bb      	strh	r3, [r7, #4]
// 
// 				float conductivity_CS3, avg_conductivity ;
// 				conductivity_CS3 = cl_utilities_CalConductivity(sensordata,avgtmp3);
				//			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
				
				if(sensordata >50)
   876bc:	88bb      	ldrh	r3, [r7, #4]
   876be:	2b32      	cmp	r3, #50	; 0x32
   876c0:	f240 8124 	bls.w	8790c <Cl_Dlsis_SenddlsisData+0x32c>
// 						averaging_count =0;
// 						avg_conductivity = avgcond;
// 
// 					}
// 					
					cond1 = sensordata/100;
   876c4:	88bb      	ldrh	r3, [r7, #4]
   876c6:	4a86      	ldr	r2, [pc, #536]	; (878e0 <Cl_Dlsis_SenddlsisData+0x300>)
   876c8:	fba2 2303 	umull	r2, r3, r2, r3
   876cc:	095b      	lsrs	r3, r3, #5
   876ce:	b29b      	uxth	r3, r3
   876d0:	461a      	mov	r2, r3
   876d2:	4b7f      	ldr	r3, [pc, #508]	; (878d0 <Cl_Dlsis_SenddlsisData+0x2f0>)
   876d4:	4610      	mov	r0, r2
   876d6:	4798      	blx	r3
   876d8:	4603      	mov	r3, r0
   876da:	64fb      	str	r3, [r7, #76]	; 0x4c
					cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   876dc:	4b81      	ldr	r3, [pc, #516]	; (878e4 <Cl_Dlsis_SenddlsisData+0x304>)
   876de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   876e0:	4798      	blx	r3
   876e2:	4c81      	ldr	r4, [pc, #516]	; (878e8 <Cl_Dlsis_SenddlsisData+0x308>)
   876e4:	a364      	add	r3, pc, #400	; (adr r3, 87878 <Cl_Dlsis_SenddlsisData+0x298>)
   876e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   876ea:	47a0      	blx	r4
   876ec:	4603      	mov	r3, r0
   876ee:	460c      	mov	r4, r1
   876f0:	461d      	mov	r5, r3
   876f2:	4626      	mov	r6, r4
   876f4:	4b7b      	ldr	r3, [pc, #492]	; (878e4 <Cl_Dlsis_SenddlsisData+0x304>)
   876f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   876f8:	4798      	blx	r3
   876fa:	4602      	mov	r2, r0
   876fc:	460b      	mov	r3, r1
   876fe:	4c7a      	ldr	r4, [pc, #488]	; (878e8 <Cl_Dlsis_SenddlsisData+0x308>)
   87700:	4628      	mov	r0, r5
   87702:	4631      	mov	r1, r6
   87704:	47a0      	blx	r4
   87706:	4603      	mov	r3, r0
   87708:	460c      	mov	r4, r1
   8770a:	461d      	mov	r5, r3
   8770c:	4626      	mov	r6, r4
   8770e:	4b75      	ldr	r3, [pc, #468]	; (878e4 <Cl_Dlsis_SenddlsisData+0x304>)
   87710:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   87712:	4798      	blx	r3
   87714:	4c74      	ldr	r4, [pc, #464]	; (878e8 <Cl_Dlsis_SenddlsisData+0x308>)
   87716:	a35a      	add	r3, pc, #360	; (adr r3, 87880 <Cl_Dlsis_SenddlsisData+0x2a0>)
   87718:	e9d3 2300 	ldrd	r2, r3, [r3]
   8771c:	47a0      	blx	r4
   8771e:	4603      	mov	r3, r0
   87720:	460c      	mov	r4, r1
   87722:	461a      	mov	r2, r3
   87724:	4623      	mov	r3, r4
   87726:	4c71      	ldr	r4, [pc, #452]	; (878ec <Cl_Dlsis_SenddlsisData+0x30c>)
   87728:	4628      	mov	r0, r5
   8772a:	4631      	mov	r1, r6
   8772c:	47a0      	blx	r4
   8772e:	4603      	mov	r3, r0
   87730:	460c      	mov	r4, r1
   87732:	4618      	mov	r0, r3
   87734:	4621      	mov	r1, r4
   87736:	4c6d      	ldr	r4, [pc, #436]	; (878ec <Cl_Dlsis_SenddlsisData+0x30c>)
   87738:	a353      	add	r3, pc, #332	; (adr r3, 87888 <Cl_Dlsis_SenddlsisData+0x2a8>)
   8773a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8773e:	47a0      	blx	r4
   87740:	4603      	mov	r3, r0
   87742:	460c      	mov	r4, r1
   87744:	4618      	mov	r0, r3
   87746:	4621      	mov	r1, r4
   87748:	4c68      	ldr	r4, [pc, #416]	; (878ec <Cl_Dlsis_SenddlsisData+0x30c>)
   8774a:	a351      	add	r3, pc, #324	; (adr r3, 87890 <Cl_Dlsis_SenddlsisData+0x2b0>)
   8774c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87750:	47a0      	blx	r4
   87752:	4603      	mov	r3, r0
   87754:	460c      	mov	r4, r1
   87756:	4619      	mov	r1, r3
   87758:	4622      	mov	r2, r4
   8775a:	4b65      	ldr	r3, [pc, #404]	; (878f0 <Cl_Dlsis_SenddlsisData+0x310>)
   8775c:	4608      	mov	r0, r1
   8775e:	4611      	mov	r1, r2
   87760:	4798      	blx	r3
   87762:	4603      	mov	r3, r0
   87764:	64bb      	str	r3, [r7, #72]	; 0x48
					cond1x100 = cond_final*100; ;
   87766:	4b58      	ldr	r3, [pc, #352]	; (878c8 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87768:	4962      	ldr	r1, [pc, #392]	; (878f4 <Cl_Dlsis_SenddlsisData+0x314>)
   8776a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   8776c:	4798      	blx	r3
   8776e:	4603      	mov	r3, r0
   87770:	647b      	str	r3, [r7, #68]	; 0x44
					cond_final_X10000= (cond1x100/(1+(temp1/10  -25.0)*0.021));
   87772:	4b5c      	ldr	r3, [pc, #368]	; (878e4 <Cl_Dlsis_SenddlsisData+0x304>)
   87774:	6c78      	ldr	r0, [r7, #68]	; 0x44
   87776:	4798      	blx	r3
   87778:	4605      	mov	r5, r0
   8777a:	460e      	mov	r6, r1
   8777c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   87780:	4a56      	ldr	r2, [pc, #344]	; (878dc <Cl_Dlsis_SenddlsisData+0x2fc>)
   87782:	fba2 2303 	umull	r2, r3, r2, r3
   87786:	08db      	lsrs	r3, r3, #3
   87788:	b29b      	uxth	r3, r3
   8778a:	461a      	mov	r2, r3
   8778c:	4b5a      	ldr	r3, [pc, #360]	; (878f8 <Cl_Dlsis_SenddlsisData+0x318>)
   8778e:	4610      	mov	r0, r2
   87790:	4798      	blx	r3
   87792:	4c5a      	ldr	r4, [pc, #360]	; (878fc <Cl_Dlsis_SenddlsisData+0x31c>)
   87794:	f04f 0200 	mov.w	r2, #0
   87798:	4b59      	ldr	r3, [pc, #356]	; (87900 <Cl_Dlsis_SenddlsisData+0x320>)
   8779a:	47a0      	blx	r4
   8779c:	4603      	mov	r3, r0
   8779e:	460c      	mov	r4, r1
   877a0:	4618      	mov	r0, r3
   877a2:	4621      	mov	r1, r4
   877a4:	4c50      	ldr	r4, [pc, #320]	; (878e8 <Cl_Dlsis_SenddlsisData+0x308>)
   877a6:	a33c      	add	r3, pc, #240	; (adr r3, 87898 <Cl_Dlsis_SenddlsisData+0x2b8>)
   877a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   877ac:	47a0      	blx	r4
   877ae:	4603      	mov	r3, r0
   877b0:	460c      	mov	r4, r1
   877b2:	4618      	mov	r0, r3
   877b4:	4621      	mov	r1, r4
   877b6:	4c4d      	ldr	r4, [pc, #308]	; (878ec <Cl_Dlsis_SenddlsisData+0x30c>)
   877b8:	f04f 0200 	mov.w	r2, #0
   877bc:	4b51      	ldr	r3, [pc, #324]	; (87904 <Cl_Dlsis_SenddlsisData+0x324>)
   877be:	47a0      	blx	r4
   877c0:	4603      	mov	r3, r0
   877c2:	460c      	mov	r4, r1
   877c4:	461a      	mov	r2, r3
   877c6:	4623      	mov	r3, r4
   877c8:	4c4f      	ldr	r4, [pc, #316]	; (87908 <Cl_Dlsis_SenddlsisData+0x328>)
   877ca:	4628      	mov	r0, r5
   877cc:	4631      	mov	r1, r6
   877ce:	47a0      	blx	r4
   877d0:	4603      	mov	r3, r0
   877d2:	460c      	mov	r4, r1
   877d4:	4619      	mov	r1, r3
   877d6:	4622      	mov	r2, r4
   877d8:	4b45      	ldr	r3, [pc, #276]	; (878f0 <Cl_Dlsis_SenddlsisData+0x310>)
   877da:	4608      	mov	r0, r1
   877dc:	4611      	mov	r1, r2
   877de:	4798      	blx	r3
   877e0:	4603      	mov	r3, r0
   877e2:	643b      	str	r3, [r7, #64]	; 0x40
					cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   877e4:	4b3f      	ldr	r3, [pc, #252]	; (878e4 <Cl_Dlsis_SenddlsisData+0x304>)
   877e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
   877e8:	4798      	blx	r3
   877ea:	4c3f      	ldr	r4, [pc, #252]	; (878e8 <Cl_Dlsis_SenddlsisData+0x308>)
   877ec:	a32c      	add	r3, pc, #176	; (adr r3, 878a0 <Cl_Dlsis_SenddlsisData+0x2c0>)
   877ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   877f2:	47a0      	blx	r4
   877f4:	4603      	mov	r3, r0
   877f6:	460c      	mov	r4, r1
   877f8:	4619      	mov	r1, r3
   877fa:	4622      	mov	r2, r4
   877fc:	4b3c      	ldr	r3, [pc, #240]	; (878f0 <Cl_Dlsis_SenddlsisData+0x310>)
   877fe:	4608      	mov	r0, r1
   87800:	4611      	mov	r1, r2
   87802:	4798      	blx	r3
   87804:	4603      	mov	r3, r0
   87806:	643b      	str	r3, [r7, #64]	; 0x40
					
					//tempdata.word = avg_conductivity;
					tempdata.word = (cond_final_X10000/10);
   87808:	4b2b      	ldr	r3, [pc, #172]	; (878b8 <Cl_Dlsis_SenddlsisData+0x2d8>)
   8780a:	492c      	ldr	r1, [pc, #176]	; (878bc <Cl_Dlsis_SenddlsisData+0x2dc>)
   8780c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   8780e:	4798      	blx	r3
   87810:	4603      	mov	r3, r0
   87812:	461a      	mov	r2, r3
   87814:	4b2a      	ldr	r3, [pc, #168]	; (878c0 <Cl_Dlsis_SenddlsisData+0x2e0>)
   87816:	4610      	mov	r0, r2
   87818:	4798      	blx	r3
   8781a:	4603      	mov	r3, r0
   8781c:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   8781e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87822:	1c5a      	adds	r2, r3, #1
   87824:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87828:	7a3a      	ldrb	r2, [r7, #8]
   8782a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8782e:	440b      	add	r3, r1
   87830:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   87834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87838:	1c5a      	adds	r2, r3, #1
   8783a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8783e:	7a7a      	ldrb	r2, [r7, #9]
   87840:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87844:	440b      	add	r3, r1
   87846:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   8784a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8784e:	1c5a      	adds	r2, r3, #1
   87850:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87854:	7aba      	ldrb	r2, [r7, #10]
   87856:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8785a:	440b      	add	r3, r1
   8785c:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   87860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87864:	1c5a      	adds	r2, r3, #1
   87866:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8786a:	7afa      	ldrb	r2, [r7, #11]
   8786c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87870:	440b      	add	r3, r1
   87872:	f803 2c50 	strb.w	r2, [r3, #-80]
   87876:	e077      	b.n	87968 <Cl_Dlsis_SenddlsisData+0x388>
   87878:	eb1c432d 	.word	0xeb1c432d
   8787c:	3f1a36e2 	.word	0x3f1a36e2
   87880:	d2f1a9fc 	.word	0xd2f1a9fc
   87884:	3fa0624d 	.word	0x3fa0624d
   87888:	51eb851f 	.word	0x51eb851f
   8788c:	3fed1eb8 	.word	0x3fed1eb8
   87890:	9999999a 	.word	0x9999999a
   87894:	3fd99999 	.word	0x3fd99999
   87898:	24dd2f1b 	.word	0x24dd2f1b
   8789c:	3f958106 	.word	0x3f958106
   878a0:	33333333 	.word	0x33333333
   878a4:	40153333 	.word	0x40153333
   878a8:	000a6ae5 	.word	0x000a6ae5
   878ac:	2007196c 	.word	0x2007196c
   878b0:	0008e6a1 	.word	0x0008e6a1
   878b4:	000a64e1 	.word	0x000a64e1
   878b8:	000a66f9 	.word	0x000a66f9
   878bc:	41200000 	.word	0x41200000
   878c0:	000a6969 	.word	0x000a6969
   878c4:	20071970 	.word	0x20071970
   878c8:	000a6591 	.word	0x000a6591
   878cc:	40a00000 	.word	0x40a00000
   878d0:	000a64e9 	.word	0x000a64e9
   878d4:	000a6381 	.word	0x000a6381
   878d8:	40c00000 	.word	0x40c00000
   878dc:	cccccccd 	.word	0xcccccccd
   878e0:	51eb851f 	.word	0x51eb851f
   878e4:	000a5c69 	.word	0x000a5c69
   878e8:	000a5d11 	.word	0x000a5d11
   878ec:	000a59ad 	.word	0x000a59ad
   878f0:	000a62d5 	.word	0x000a62d5
   878f4:	42c80000 	.word	0x42c80000
   878f8:	000a5c45 	.word	0x000a5c45
   878fc:	000a59a9 	.word	0x000a59a9
   87900:	40390000 	.word	0x40390000
   87904:	3ff00000 	.word	0x3ff00000
   87908:	000a5f65 	.word	0x000a5f65
				}
			 else
				{
					tempdata.word = 0;
   8790c:	2300      	movs	r3, #0
   8790e:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   87910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87914:	1c5a      	adds	r2, r3, #1
   87916:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8791a:	7a3a      	ldrb	r2, [r7, #8]
   8791c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87920:	440b      	add	r3, r1
   87922:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   87926:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8792a:	1c5a      	adds	r2, r3, #1
   8792c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87930:	7a7a      	ldrb	r2, [r7, #9]
   87932:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87936:	440b      	add	r3, r1
   87938:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   8793c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87940:	1c5a      	adds	r2, r3, #1
   87942:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87946:	7aba      	ldrb	r2, [r7, #10]
   87948:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8794c:	440b      	add	r3, r1
   8794e:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   87952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87956:	1c5a      	adds	r2, r3, #1
   87958:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8795c:	7afa      	ldrb	r2, [r7, #11]
   8795e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87962:	440b      	add	r3, r1
   87964:	f803 2c50 	strb.w	r2, [r3, #-80]
				}
					
		}
		{

			tempdata.word = (avgtmp3);
   87968:	4b8f      	ldr	r3, [pc, #572]	; (87ba8 <Cl_Dlsis_SenddlsisData+0x5c8>)
   8796a:	681a      	ldr	r2, [r3, #0]
   8796c:	4b8f      	ldr	r3, [pc, #572]	; (87bac <Cl_Dlsis_SenddlsisData+0x5cc>)
   8796e:	4610      	mov	r0, r2
   87970:	4798      	blx	r3
   87972:	4603      	mov	r3, r0
   87974:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   87976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8797a:	1c5a      	adds	r2, r3, #1
   8797c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87980:	7a3a      	ldrb	r2, [r7, #8]
   87982:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87986:	440b      	add	r3, r1
   87988:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   8798c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87990:	1c5a      	adds	r2, r3, #1
   87992:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87996:	7a7a      	ldrb	r2, [r7, #9]
   87998:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8799c:	440b      	add	r3, r1
   8799e:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   879a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   879a6:	1c5a      	adds	r2, r3, #1
   879a8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   879ac:	7aba      	ldrb	r2, [r7, #10]
   879ae:	f107 0160 	add.w	r1, r7, #96	; 0x60
   879b2:	440b      	add	r3, r1
   879b4:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   879b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   879bc:	1c5a      	adds	r2, r3, #1
   879be:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   879c2:	7afa      	ldrb	r2, [r7, #11]
   879c4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   879c8:	440b      	add	r3, r1
   879ca:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   879ce:	f107 0308 	add.w	r3, r7, #8
   879d2:	4619      	mov	r1, r3
   879d4:	200b      	movs	r0, #11
   879d6:	4b76      	ldr	r3, [pc, #472]	; (87bb0 <Cl_Dlsis_SenddlsisData+0x5d0>)
   879d8:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   879da:	893b      	ldrh	r3, [r7, #8]
   879dc:	461a      	mov	r2, r3
   879de:	4b75      	ldr	r3, [pc, #468]	; (87bb4 <Cl_Dlsis_SenddlsisData+0x5d4>)
   879e0:	4610      	mov	r0, r2
   879e2:	4798      	blx	r3
   879e4:	4c74      	ldr	r4, [pc, #464]	; (87bb8 <Cl_Dlsis_SenddlsisData+0x5d8>)
   879e6:	a36e      	add	r3, pc, #440	; (adr r3, 87ba0 <Cl_Dlsis_SenddlsisData+0x5c0>)
   879e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   879ec:	47a0      	blx	r4
   879ee:	4603      	mov	r3, r0
   879f0:	460c      	mov	r4, r1
   879f2:	4619      	mov	r1, r3
   879f4:	4622      	mov	r2, r4
   879f6:	4b71      	ldr	r3, [pc, #452]	; (87bbc <Cl_Dlsis_SenddlsisData+0x5dc>)
   879f8:	4608      	mov	r0, r1
   879fa:	4611      	mov	r1, r2
   879fc:	4798      	blx	r3
   879fe:	4603      	mov	r3, r0
   87a00:	87fb      	strh	r3, [r7, #62]	; 0x3e
			calibration_apt(sensordatamillivolts);
   87a02:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   87a06:	4618      	mov	r0, r3
   87a08:	4b6d      	ldr	r3, [pc, #436]	; (87bc0 <Cl_Dlsis_SenddlsisData+0x5e0>)
   87a0a:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   87a0c:	4b6d      	ldr	r3, [pc, #436]	; (87bc4 <Cl_Dlsis_SenddlsisData+0x5e4>)
   87a0e:	681a      	ldr	r2, [r3, #0]
   87a10:	4b6d      	ldr	r3, [pc, #436]	; (87bc8 <Cl_Dlsis_SenddlsisData+0x5e8>)
   87a12:	496e      	ldr	r1, [pc, #440]	; (87bcc <Cl_Dlsis_SenddlsisData+0x5ec>)
   87a14:	4610      	mov	r0, r2
   87a16:	4798      	blx	r3
   87a18:	4603      	mov	r3, r0
   87a1a:	4618      	mov	r0, r3
   87a1c:	4b6c      	ldr	r3, [pc, #432]	; (87bd0 <Cl_Dlsis_SenddlsisData+0x5f0>)
   87a1e:	681a      	ldr	r2, [r3, #0]
   87a20:	4b6c      	ldr	r3, [pc, #432]	; (87bd4 <Cl_Dlsis_SenddlsisData+0x5f4>)
   87a22:	4611      	mov	r1, r2
   87a24:	4798      	blx	r3
   87a26:	4603      	mov	r3, r0
   87a28:	461a      	mov	r2, r3
   87a2a:	4b6b      	ldr	r3, [pc, #428]	; (87bd8 <Cl_Dlsis_SenddlsisData+0x5f8>)
   87a2c:	496b      	ldr	r1, [pc, #428]	; (87bdc <Cl_Dlsis_SenddlsisData+0x5fc>)
   87a2e:	4610      	mov	r0, r2
   87a30:	4798      	blx	r3
   87a32:	4603      	mov	r3, r0
   87a34:	461a      	mov	r2, r3
   87a36:	4b63      	ldr	r3, [pc, #396]	; (87bc4 <Cl_Dlsis_SenddlsisData+0x5e4>)
   87a38:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   87a3a:	4b62      	ldr	r3, [pc, #392]	; (87bc4 <Cl_Dlsis_SenddlsisData+0x5e4>)
   87a3c:	681a      	ldr	r2, [r3, #0]
   87a3e:	4b5b      	ldr	r3, [pc, #364]	; (87bac <Cl_Dlsis_SenddlsisData+0x5cc>)
   87a40:	4610      	mov	r0, r2
   87a42:	4798      	blx	r3
   87a44:	4603      	mov	r3, r0
   87a46:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87a48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a4c:	1c5a      	adds	r2, r3, #1
   87a4e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a52:	7a3a      	ldrb	r2, [r7, #8]
   87a54:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a58:	440b      	add	r3, r1
   87a5a:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87a5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a62:	1c5a      	adds	r2, r3, #1
   87a64:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a68:	7a7a      	ldrb	r2, [r7, #9]
   87a6a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a6e:	440b      	add	r3, r1
   87a70:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87a74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a78:	1c5a      	adds	r2, r3, #1
   87a7a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a7e:	7aba      	ldrb	r2, [r7, #10]
   87a80:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a84:	440b      	add	r3, r1
   87a86:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a8e:	1c5a      	adds	r2, r3, #1
   87a90:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a94:	7afa      	ldrb	r2, [r7, #11]
   87a96:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a9a:	440b      	add	r3, r1
   87a9c:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   87aa0:	f107 0308 	add.w	r3, r7, #8
   87aa4:	4619      	mov	r1, r3
   87aa6:	200c      	movs	r0, #12
   87aa8:	4b41      	ldr	r3, [pc, #260]	; (87bb0 <Cl_Dlsis_SenddlsisData+0x5d0>)
   87aaa:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87aac:	893b      	ldrh	r3, [r7, #8]
   87aae:	461a      	mov	r2, r3
   87ab0:	4b40      	ldr	r3, [pc, #256]	; (87bb4 <Cl_Dlsis_SenddlsisData+0x5d4>)
   87ab2:	4610      	mov	r0, r2
   87ab4:	4798      	blx	r3
   87ab6:	4c40      	ldr	r4, [pc, #256]	; (87bb8 <Cl_Dlsis_SenddlsisData+0x5d8>)
   87ab8:	a339      	add	r3, pc, #228	; (adr r3, 87ba0 <Cl_Dlsis_SenddlsisData+0x5c0>)
   87aba:	e9d3 2300 	ldrd	r2, r3, [r3]
   87abe:	47a0      	blx	r4
   87ac0:	4603      	mov	r3, r0
   87ac2:	460c      	mov	r4, r1
   87ac4:	4619      	mov	r1, r3
   87ac6:	4622      	mov	r2, r4
   87ac8:	4b3c      	ldr	r3, [pc, #240]	; (87bbc <Cl_Dlsis_SenddlsisData+0x5dc>)
   87aca:	4608      	mov	r0, r1
   87acc:	4611      	mov	r1, r2
   87ace:	4798      	blx	r3
   87ad0:	4603      	mov	r3, r0
   87ad2:	87fb      	strh	r3, [r7, #62]	; 0x3e
			calibration_vpt(sensordatamillivolts);
   87ad4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   87ad8:	4618      	mov	r0, r3
   87ada:	4b41      	ldr	r3, [pc, #260]	; (87be0 <Cl_Dlsis_SenddlsisData+0x600>)
   87adc:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   87ade:	4b41      	ldr	r3, [pc, #260]	; (87be4 <Cl_Dlsis_SenddlsisData+0x604>)
   87ae0:	681a      	ldr	r2, [r3, #0]
   87ae2:	4b39      	ldr	r3, [pc, #228]	; (87bc8 <Cl_Dlsis_SenddlsisData+0x5e8>)
   87ae4:	4939      	ldr	r1, [pc, #228]	; (87bcc <Cl_Dlsis_SenddlsisData+0x5ec>)
   87ae6:	4610      	mov	r0, r2
   87ae8:	4798      	blx	r3
   87aea:	4603      	mov	r3, r0
   87aec:	4618      	mov	r0, r3
   87aee:	4b3e      	ldr	r3, [pc, #248]	; (87be8 <Cl_Dlsis_SenddlsisData+0x608>)
   87af0:	681a      	ldr	r2, [r3, #0]
   87af2:	4b38      	ldr	r3, [pc, #224]	; (87bd4 <Cl_Dlsis_SenddlsisData+0x5f4>)
   87af4:	4611      	mov	r1, r2
   87af6:	4798      	blx	r3
   87af8:	4603      	mov	r3, r0
   87afa:	461a      	mov	r2, r3
   87afc:	4b36      	ldr	r3, [pc, #216]	; (87bd8 <Cl_Dlsis_SenddlsisData+0x5f8>)
   87afe:	4937      	ldr	r1, [pc, #220]	; (87bdc <Cl_Dlsis_SenddlsisData+0x5fc>)
   87b00:	4610      	mov	r0, r2
   87b02:	4798      	blx	r3
   87b04:	4603      	mov	r3, r0
   87b06:	461a      	mov	r2, r3
   87b08:	4b36      	ldr	r3, [pc, #216]	; (87be4 <Cl_Dlsis_SenddlsisData+0x604>)
   87b0a:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   87b0c:	4b35      	ldr	r3, [pc, #212]	; (87be4 <Cl_Dlsis_SenddlsisData+0x604>)
   87b0e:	681a      	ldr	r2, [r3, #0]
   87b10:	4b26      	ldr	r3, [pc, #152]	; (87bac <Cl_Dlsis_SenddlsisData+0x5cc>)
   87b12:	4610      	mov	r0, r2
   87b14:	4798      	blx	r3
   87b16:	4603      	mov	r3, r0
   87b18:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b1e:	1c5a      	adds	r2, r3, #1
   87b20:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b24:	7a3a      	ldrb	r2, [r7, #8]
   87b26:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b2a:	440b      	add	r3, r1
   87b2c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87b30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b34:	1c5a      	adds	r2, r3, #1
   87b36:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b3a:	7a7a      	ldrb	r2, [r7, #9]
   87b3c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b40:	440b      	add	r3, r1
   87b42:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87b46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b4a:	1c5a      	adds	r2, r3, #1
   87b4c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b50:	7aba      	ldrb	r2, [r7, #10]
   87b52:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b56:	440b      	add	r3, r1
   87b58:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b60:	1c5a      	adds	r2, r3, #1
   87b62:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b66:	7afa      	ldrb	r2, [r7, #11]
   87b68:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b6c:	440b      	add	r3, r1
   87b6e:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   87b72:	f107 0308 	add.w	r3, r7, #8
   87b76:	4619      	mov	r1, r3
   87b78:	200e      	movs	r0, #14
   87b7a:	4b0d      	ldr	r3, [pc, #52]	; (87bb0 <Cl_Dlsis_SenddlsisData+0x5d0>)
   87b7c:	4798      	blx	r3
			if (tempdata.Twobyte >32268)
   87b7e:	893b      	ldrh	r3, [r7, #8]
   87b80:	f647 620c 	movw	r2, #32268	; 0x7e0c
   87b84:	4293      	cmp	r3, r2
   87b86:	d935      	bls.n	87bf4 <Cl_Dlsis_SenddlsisData+0x614>
			{
				ps1 = (65536 - tempdata.Twobyte) *(-1);
   87b88:	893b      	ldrh	r3, [r7, #8]
   87b8a:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   87b8e:	4b17      	ldr	r3, [pc, #92]	; (87bec <Cl_Dlsis_SenddlsisData+0x60c>)
   87b90:	4610      	mov	r0, r2
   87b92:	4798      	blx	r3
   87b94:	4602      	mov	r2, r0
   87b96:	4b16      	ldr	r3, [pc, #88]	; (87bf0 <Cl_Dlsis_SenddlsisData+0x610>)
   87b98:	601a      	str	r2, [r3, #0]
   87b9a:	e032      	b.n	87c02 <Cl_Dlsis_SenddlsisData+0x622>
   87b9c:	f3af 8000 	nop.w
   87ba0:	58e21965 	.word	0x58e21965
   87ba4:	3fe9b717 	.word	0x3fe9b717
   87ba8:	20071970 	.word	0x20071970
   87bac:	000a6969 	.word	0x000a6969
   87bb0:	0008e6a1 	.word	0x0008e6a1
   87bb4:	000a5c45 	.word	0x000a5c45
   87bb8:	000a5d11 	.word	0x000a5d11
   87bbc:	000a6295 	.word	0x000a6295
   87bc0:	000840b5 	.word	0x000840b5
   87bc4:	20071974 	.word	0x20071974
   87bc8:	000a6591 	.word	0x000a6591
   87bcc:	40a00000 	.word	0x40a00000
   87bd0:	20072160 	.word	0x20072160
   87bd4:	000a6381 	.word	0x000a6381
   87bd8:	000a66f9 	.word	0x000a66f9
   87bdc:	40c00000 	.word	0x40c00000
   87be0:	00084235 	.word	0x00084235
   87be4:	20071978 	.word	0x20071978
   87be8:	20071774 	.word	0x20071774
   87bec:	000a64e9 	.word	0x000a64e9
   87bf0:	2007197c 	.word	0x2007197c
			}
			else
			ps1 = (float)tempdata.Twobyte;
   87bf4:	893a      	ldrh	r2, [r7, #8]
   87bf6:	4b2c      	ldr	r3, [pc, #176]	; (87ca8 <Cl_Dlsis_SenddlsisData+0x6c8>)
   87bf8:	4610      	mov	r0, r2
   87bfa:	4798      	blx	r3
   87bfc:	4602      	mov	r2, r0
   87bfe:	4b2b      	ldr	r3, [pc, #172]	; (87cac <Cl_Dlsis_SenddlsisData+0x6cc>)
   87c00:	601a      	str	r2, [r3, #0]
			
			ps1 = (0.091009 * ps1) + 491.794;
   87c02:	4b2a      	ldr	r3, [pc, #168]	; (87cac <Cl_Dlsis_SenddlsisData+0x6cc>)
   87c04:	681a      	ldr	r2, [r3, #0]
   87c06:	4b2a      	ldr	r3, [pc, #168]	; (87cb0 <Cl_Dlsis_SenddlsisData+0x6d0>)
   87c08:	4610      	mov	r0, r2
   87c0a:	4798      	blx	r3
   87c0c:	4c29      	ldr	r4, [pc, #164]	; (87cb4 <Cl_Dlsis_SenddlsisData+0x6d4>)
   87c0e:	a322      	add	r3, pc, #136	; (adr r3, 87c98 <Cl_Dlsis_SenddlsisData+0x6b8>)
   87c10:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c14:	47a0      	blx	r4
   87c16:	4603      	mov	r3, r0
   87c18:	460c      	mov	r4, r1
   87c1a:	4618      	mov	r0, r3
   87c1c:	4621      	mov	r1, r4
   87c1e:	4c26      	ldr	r4, [pc, #152]	; (87cb8 <Cl_Dlsis_SenddlsisData+0x6d8>)
   87c20:	a31f      	add	r3, pc, #124	; (adr r3, 87ca0 <Cl_Dlsis_SenddlsisData+0x6c0>)
   87c22:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c26:	47a0      	blx	r4
   87c28:	4603      	mov	r3, r0
   87c2a:	460c      	mov	r4, r1
   87c2c:	4619      	mov	r1, r3
   87c2e:	4622      	mov	r2, r4
   87c30:	4b22      	ldr	r3, [pc, #136]	; (87cbc <Cl_Dlsis_SenddlsisData+0x6dc>)
   87c32:	4608      	mov	r0, r1
   87c34:	4611      	mov	r1, r2
   87c36:	4798      	blx	r3
   87c38:	4602      	mov	r2, r0
   87c3a:	4b1c      	ldr	r3, [pc, #112]	; (87cac <Cl_Dlsis_SenddlsisData+0x6cc>)
   87c3c:	601a      	str	r2, [r3, #0]
			ps1=(ps1*5 + pressure_final_ps1)/6;
   87c3e:	4b1b      	ldr	r3, [pc, #108]	; (87cac <Cl_Dlsis_SenddlsisData+0x6cc>)
   87c40:	681a      	ldr	r2, [r3, #0]
   87c42:	4b1f      	ldr	r3, [pc, #124]	; (87cc0 <Cl_Dlsis_SenddlsisData+0x6e0>)
   87c44:	491f      	ldr	r1, [pc, #124]	; (87cc4 <Cl_Dlsis_SenddlsisData+0x6e4>)
   87c46:	4610      	mov	r0, r2
   87c48:	4798      	blx	r3
   87c4a:	4603      	mov	r3, r0
   87c4c:	4618      	mov	r0, r3
   87c4e:	4b1e      	ldr	r3, [pc, #120]	; (87cc8 <Cl_Dlsis_SenddlsisData+0x6e8>)
   87c50:	681a      	ldr	r2, [r3, #0]
   87c52:	4b1e      	ldr	r3, [pc, #120]	; (87ccc <Cl_Dlsis_SenddlsisData+0x6ec>)
   87c54:	4611      	mov	r1, r2
   87c56:	4798      	blx	r3
   87c58:	4603      	mov	r3, r0
   87c5a:	461a      	mov	r2, r3
   87c5c:	4b1c      	ldr	r3, [pc, #112]	; (87cd0 <Cl_Dlsis_SenddlsisData+0x6f0>)
   87c5e:	491d      	ldr	r1, [pc, #116]	; (87cd4 <Cl_Dlsis_SenddlsisData+0x6f4>)
   87c60:	4610      	mov	r0, r2
   87c62:	4798      	blx	r3
   87c64:	4603      	mov	r3, r0
   87c66:	461a      	mov	r2, r3
   87c68:	4b10      	ldr	r3, [pc, #64]	; (87cac <Cl_Dlsis_SenddlsisData+0x6cc>)
   87c6a:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   87c6c:	f107 0308 	add.w	r3, r7, #8
   87c70:	4619      	mov	r1, r3
   87c72:	200f      	movs	r0, #15
   87c74:	4b18      	ldr	r3, [pc, #96]	; (87cd8 <Cl_Dlsis_SenddlsisData+0x6f8>)
   87c76:	4798      	blx	r3
			if (tempdata.Twobyte >32268)
   87c78:	893b      	ldrh	r3, [r7, #8]
   87c7a:	f647 620c 	movw	r2, #32268	; 0x7e0c
   87c7e:	4293      	cmp	r3, r2
   87c80:	d930      	bls.n	87ce4 <Cl_Dlsis_SenddlsisData+0x704>
			{
				ps2 = (65536 - tempdata.Twobyte) *(-1);
   87c82:	893b      	ldrh	r3, [r7, #8]
   87c84:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   87c88:	4b14      	ldr	r3, [pc, #80]	; (87cdc <Cl_Dlsis_SenddlsisData+0x6fc>)
   87c8a:	4610      	mov	r0, r2
   87c8c:	4798      	blx	r3
   87c8e:	4602      	mov	r2, r0
   87c90:	4b13      	ldr	r3, [pc, #76]	; (87ce0 <Cl_Dlsis_SenddlsisData+0x700>)
   87c92:	601a      	str	r2, [r3, #0]
   87c94:	e02d      	b.n	87cf2 <Cl_Dlsis_SenddlsisData+0x712>
   87c96:	bf00      	nop
   87c98:	a6a44418 	.word	0xa6a44418
   87c9c:	3fb74c5d 	.word	0x3fb74c5d
   87ca0:	39581062 	.word	0x39581062
   87ca4:	407ebcb4 	.word	0x407ebcb4
   87ca8:	000a64e1 	.word	0x000a64e1
   87cac:	2007197c 	.word	0x2007197c
   87cb0:	000a5c69 	.word	0x000a5c69
   87cb4:	000a5d11 	.word	0x000a5d11
   87cb8:	000a59ad 	.word	0x000a59ad
   87cbc:	000a62d5 	.word	0x000a62d5
   87cc0:	000a6591 	.word	0x000a6591
   87cc4:	40a00000 	.word	0x40a00000
   87cc8:	20071778 	.word	0x20071778
   87ccc:	000a6381 	.word	0x000a6381
   87cd0:	000a66f9 	.word	0x000a66f9
   87cd4:	40c00000 	.word	0x40c00000
   87cd8:	0008e6a1 	.word	0x0008e6a1
   87cdc:	000a64e9 	.word	0x000a64e9
   87ce0:	20071980 	.word	0x20071980
			}
			else
			ps2 = (float)tempdata.Twobyte;
   87ce4:	893a      	ldrh	r2, [r7, #8]
   87ce6:	4b86      	ldr	r3, [pc, #536]	; (87f00 <Cl_Dlsis_SenddlsisData+0x920>)
   87ce8:	4610      	mov	r0, r2
   87cea:	4798      	blx	r3
   87cec:	4602      	mov	r2, r0
   87cee:	4b85      	ldr	r3, [pc, #532]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87cf0:	601a      	str	r2, [r3, #0]
			
			ps2 = (0.091009 * ps2) + 491.794;
   87cf2:	4b84      	ldr	r3, [pc, #528]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87cf4:	681a      	ldr	r2, [r3, #0]
   87cf6:	4b84      	ldr	r3, [pc, #528]	; (87f08 <Cl_Dlsis_SenddlsisData+0x928>)
   87cf8:	4610      	mov	r0, r2
   87cfa:	4798      	blx	r3
   87cfc:	4c83      	ldr	r4, [pc, #524]	; (87f0c <Cl_Dlsis_SenddlsisData+0x92c>)
   87cfe:	a37c      	add	r3, pc, #496	; (adr r3, 87ef0 <Cl_Dlsis_SenddlsisData+0x910>)
   87d00:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d04:	47a0      	blx	r4
   87d06:	4603      	mov	r3, r0
   87d08:	460c      	mov	r4, r1
   87d0a:	4618      	mov	r0, r3
   87d0c:	4621      	mov	r1, r4
   87d0e:	4c80      	ldr	r4, [pc, #512]	; (87f10 <Cl_Dlsis_SenddlsisData+0x930>)
   87d10:	a379      	add	r3, pc, #484	; (adr r3, 87ef8 <Cl_Dlsis_SenddlsisData+0x918>)
   87d12:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d16:	47a0      	blx	r4
   87d18:	4603      	mov	r3, r0
   87d1a:	460c      	mov	r4, r1
   87d1c:	4619      	mov	r1, r3
   87d1e:	4622      	mov	r2, r4
   87d20:	4b7c      	ldr	r3, [pc, #496]	; (87f14 <Cl_Dlsis_SenddlsisData+0x934>)
   87d22:	4608      	mov	r0, r1
   87d24:	4611      	mov	r1, r2
   87d26:	4798      	blx	r3
   87d28:	4602      	mov	r2, r0
   87d2a:	4b76      	ldr	r3, [pc, #472]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87d2c:	601a      	str	r2, [r3, #0]
			ps2=(ps2*5 + pressure_final_ps2)/6;
   87d2e:	4b75      	ldr	r3, [pc, #468]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87d30:	681a      	ldr	r2, [r3, #0]
   87d32:	4b79      	ldr	r3, [pc, #484]	; (87f18 <Cl_Dlsis_SenddlsisData+0x938>)
   87d34:	4979      	ldr	r1, [pc, #484]	; (87f1c <Cl_Dlsis_SenddlsisData+0x93c>)
   87d36:	4610      	mov	r0, r2
   87d38:	4798      	blx	r3
   87d3a:	4603      	mov	r3, r0
   87d3c:	4618      	mov	r0, r3
   87d3e:	4b78      	ldr	r3, [pc, #480]	; (87f20 <Cl_Dlsis_SenddlsisData+0x940>)
   87d40:	681a      	ldr	r2, [r3, #0]
   87d42:	4b78      	ldr	r3, [pc, #480]	; (87f24 <Cl_Dlsis_SenddlsisData+0x944>)
   87d44:	4611      	mov	r1, r2
   87d46:	4798      	blx	r3
   87d48:	4603      	mov	r3, r0
   87d4a:	461a      	mov	r2, r3
   87d4c:	4b76      	ldr	r3, [pc, #472]	; (87f28 <Cl_Dlsis_SenddlsisData+0x948>)
   87d4e:	4977      	ldr	r1, [pc, #476]	; (87f2c <Cl_Dlsis_SenddlsisData+0x94c>)
   87d50:	4610      	mov	r0, r2
   87d52:	4798      	blx	r3
   87d54:	4603      	mov	r3, r0
   87d56:	461a      	mov	r2, r3
   87d58:	4b6a      	ldr	r3, [pc, #424]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87d5a:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   87d5c:	4b74      	ldr	r3, [pc, #464]	; (87f30 <Cl_Dlsis_SenddlsisData+0x950>)
   87d5e:	681a      	ldr	r2, [r3, #0]
   87d60:	4b74      	ldr	r3, [pc, #464]	; (87f34 <Cl_Dlsis_SenddlsisData+0x954>)
   87d62:	6819      	ldr	r1, [r3, #0]
   87d64:	4b6f      	ldr	r3, [pc, #444]	; (87f24 <Cl_Dlsis_SenddlsisData+0x944>)
   87d66:	4610      	mov	r0, r2
   87d68:	4798      	blx	r3
   87d6a:	4603      	mov	r3, r0
   87d6c:	461c      	mov	r4, r3
   87d6e:	4b72      	ldr	r3, [pc, #456]	; (87f38 <Cl_Dlsis_SenddlsisData+0x958>)
   87d70:	681a      	ldr	r2, [r3, #0]
   87d72:	4b64      	ldr	r3, [pc, #400]	; (87f04 <Cl_Dlsis_SenddlsisData+0x924>)
   87d74:	6819      	ldr	r1, [r3, #0]
   87d76:	4b6b      	ldr	r3, [pc, #428]	; (87f24 <Cl_Dlsis_SenddlsisData+0x944>)
   87d78:	4610      	mov	r0, r2
   87d7a:	4798      	blx	r3
   87d7c:	4603      	mov	r3, r0
   87d7e:	461a      	mov	r2, r3
   87d80:	4b6e      	ldr	r3, [pc, #440]	; (87f3c <Cl_Dlsis_SenddlsisData+0x95c>)
   87d82:	4611      	mov	r1, r2
   87d84:	4620      	mov	r0, r4
   87d86:	4798      	blx	r3
   87d88:	4603      	mov	r3, r0
   87d8a:	461a      	mov	r2, r3
   87d8c:	4b66      	ldr	r3, [pc, #408]	; (87f28 <Cl_Dlsis_SenddlsisData+0x948>)
   87d8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   87d92:	4610      	mov	r0, r2
   87d94:	4798      	blx	r3
   87d96:	4603      	mov	r3, r0
   87d98:	461a      	mov	r2, r3
   87d9a:	4b68      	ldr	r3, [pc, #416]	; (87f3c <Cl_Dlsis_SenddlsisData+0x95c>)
   87d9c:	4968      	ldr	r1, [pc, #416]	; (87f40 <Cl_Dlsis_SenddlsisData+0x960>)
   87d9e:	4610      	mov	r0, r2
   87da0:	4798      	blx	r3
   87da2:	4603      	mov	r3, r0
   87da4:	461a      	mov	r2, r3
   87da6:	4b67      	ldr	r3, [pc, #412]	; (87f44 <Cl_Dlsis_SenddlsisData+0x964>)
   87da8:	4610      	mov	r0, r2
   87daa:	4798      	blx	r3
   87dac:	4603      	mov	r3, r0
   87dae:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   87db0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87db4:	1c5a      	adds	r2, r3, #1
   87db6:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87dba:	7a3a      	ldrb	r2, [r7, #8]
   87dbc:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87dc0:	440b      	add	r3, r1
   87dc2:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87dc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87dca:	1c5a      	adds	r2, r3, #1
   87dcc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87dd0:	7a7a      	ldrb	r2, [r7, #9]
   87dd2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87dd6:	440b      	add	r3, r1
   87dd8:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87de0:	1c5a      	adds	r2, r3, #1
   87de2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87de6:	7aba      	ldrb	r2, [r7, #10]
   87de8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87dec:	440b      	add	r3, r1
   87dee:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87df2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87df6:	1c5a      	adds	r2, r3, #1
   87df8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87dfc:	7afa      	ldrb	r2, [r7, #11]
   87dfe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e02:	440b      	add	r3, r1
   87e04:	f803 2c50 	strb.w	r2, [r3, #-80]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
 			tempdata.word = ufRemoved ;
   87e08:	4b4f      	ldr	r3, [pc, #316]	; (87f48 <Cl_Dlsis_SenddlsisData+0x968>)
   87e0a:	681a      	ldr	r2, [r3, #0]
   87e0c:	4b4d      	ldr	r3, [pc, #308]	; (87f44 <Cl_Dlsis_SenddlsisData+0x964>)
   87e0e:	4610      	mov	r0, r2
   87e10:	4798      	blx	r3
   87e12:	4603      	mov	r3, r0
   87e14:	60bb      	str	r3, [r7, #8]
 			
 			systemdataarray[count++] = tempdata.bytearray[0] ;
   87e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e1a:	1c5a      	adds	r2, r3, #1
   87e1c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e20:	7a3a      	ldrb	r2, [r7, #8]
   87e22:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e26:	440b      	add	r3, r1
   87e28:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[1] ;
   87e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e30:	1c5a      	adds	r2, r3, #1
   87e32:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e36:	7a7a      	ldrb	r2, [r7, #9]
   87e38:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e3c:	440b      	add	r3, r1
   87e3e:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[2] ;
   87e42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e46:	1c5a      	adds	r2, r3, #1
   87e48:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e4c:	7aba      	ldrb	r2, [r7, #10]
   87e4e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e52:	440b      	add	r3, r1
   87e54:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[3] ;
   87e58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e5c:	1c5a      	adds	r2, r3, #1
   87e5e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e62:	7afa      	ldrb	r2, [r7, #11]
   87e64:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e68:	440b      	add	r3, r1
   87e6a:	f803 2c50 	strb.w	r2, [r3, #-80]
 			
			tempdata.word = Treatdata[ID_ufrate] ;
   87e6e:	4b37      	ldr	r3, [pc, #220]	; (87f4c <Cl_Dlsis_SenddlsisData+0x96c>)
   87e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87e72:	60bb      	str	r3, [r7, #8]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e78:	1c5a      	adds	r2, r3, #1
   87e7a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e7e:	7a3a      	ldrb	r2, [r7, #8]
   87e80:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e84:	440b      	add	r3, r1
   87e86:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87e8e:	1c5a      	adds	r2, r3, #1
   87e90:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87e94:	7a7a      	ldrb	r2, [r7, #9]
   87e96:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87e9a:	440b      	add	r3, r1
   87e9c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87ea4:	1c5a      	adds	r2, r3, #1
   87ea6:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87eaa:	7aba      	ldrb	r2, [r7, #10]
   87eac:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87eb0:	440b      	add	r3, r1
   87eb2:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87eba:	1c5a      	adds	r2, r3, #1
   87ebc:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ec0:	7afa      	ldrb	r2, [r7, #11]
   87ec2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ec6:	440b      	add	r3, r1
   87ec8:	f803 2c50 	strb.w	r2, [r3, #-80]
			
			
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87ecc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
   87ed0:	f107 0310 	add.w	r3, r7, #16
   87ed4:	4619      	mov	r1, r3
   87ed6:	202a      	movs	r0, #42	; 0x2a
   87ed8:	4b1d      	ldr	r3, [pc, #116]	; (87f50 <Cl_Dlsis_SenddlsisData+0x970>)
   87eda:	4798      	blx	r3
   87edc:	4603      	mov	r3, r0
   87ede:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   87ee2:	2300      	movs	r3, #0
}
   87ee4:	4618      	mov	r0, r3
   87ee6:	3764      	adds	r7, #100	; 0x64
   87ee8:	46bd      	mov	sp, r7
   87eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87eec:	f3af 8000 	nop.w
   87ef0:	a6a44418 	.word	0xa6a44418
   87ef4:	3fb74c5d 	.word	0x3fb74c5d
   87ef8:	39581062 	.word	0x39581062
   87efc:	407ebcb4 	.word	0x407ebcb4
   87f00:	000a64e1 	.word	0x000a64e1
   87f04:	20071980 	.word	0x20071980
   87f08:	000a5c69 	.word	0x000a5c69
   87f0c:	000a5d11 	.word	0x000a5d11
   87f10:	000a59ad 	.word	0x000a59ad
   87f14:	000a62d5 	.word	0x000a62d5
   87f18:	000a6591 	.word	0x000a6591
   87f1c:	40a00000 	.word	0x40a00000
   87f20:	2007177c 	.word	0x2007177c
   87f24:	000a6381 	.word	0x000a6381
   87f28:	000a66f9 	.word	0x000a66f9
   87f2c:	40c00000 	.word	0x40c00000
   87f30:	20071974 	.word	0x20071974
   87f34:	20071978 	.word	0x20071978
   87f38:	2007197c 	.word	0x2007197c
   87f3c:	000a637d 	.word	0x000a637d
   87f40:	41c80000 	.word	0x41c80000
   87f44:	000a6969 	.word	0x000a6969
   87f48:	20071b14 	.word	0x20071b14
   87f4c:	20072654 	.word	0x20072654
   87f50:	0009b805 	.word	0x0009b805

00087f54 <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   87f54:	b580      	push	{r7, lr}
   87f56:	b082      	sub	sp, #8
   87f58:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   87f5a:	4b1a      	ldr	r3, [pc, #104]	; (87fc4 <Cl_Dlsis_StartDialysis+0x70>)
   87f5c:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87f5e:	2300      	movs	r3, #0
   87f60:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87f62:	2351      	movs	r3, #81	; 0x51
   87f64:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   87f66:	2300      	movs	r3, #0
   87f68:	717b      	strb	r3, [r7, #5]
	
	ufRemoved = 0;
   87f6a:	4b17      	ldr	r3, [pc, #92]	; (87fc8 <Cl_Dlsis_StartDialysis+0x74>)
   87f6c:	f04f 0200 	mov.w	r2, #0
   87f70:	601a      	str	r2, [r3, #0]
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   87f72:	4b16      	ldr	r3, [pc, #88]	; (87fcc <Cl_Dlsis_StartDialysis+0x78>)
   87f74:	2200      	movs	r2, #0
   87f76:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   87f78:	4b14      	ldr	r3, [pc, #80]	; (87fcc <Cl_Dlsis_StartDialysis+0x78>)
   87f7a:	2200      	movs	r2, #0
   87f7c:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   87f7e:	4b14      	ldr	r3, [pc, #80]	; (87fd0 <Cl_Dlsis_StartDialysis+0x7c>)
   87f80:	2200      	movs	r2, #0
   87f82:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   87f84:	2312      	movs	r3, #18
   87f86:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87f88:	2301      	movs	r3, #1
   87f8a:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87f8c:	1d79      	adds	r1, r7, #5
   87f8e:	79bb      	ldrb	r3, [r7, #6]
   87f90:	2201      	movs	r2, #1
   87f92:	4618      	mov	r0, r3
   87f94:	4b0f      	ldr	r3, [pc, #60]	; (87fd4 <Cl_Dlsis_StartDialysis+0x80>)
   87f96:	4798      	blx	r3
   87f98:	4603      	mov	r3, r0
   87f9a:	71fb      	strb	r3, [r7, #7]
		command = CON_TX_COMMAND_DLSIS_STARTED;
   87f9c:	2313      	movs	r3, #19
   87f9e:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   87fa0:	2301      	movs	r3, #1
   87fa2:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   87fa4:	1d79      	adds	r1, r7, #5
   87fa6:	79bb      	ldrb	r3, [r7, #6]
   87fa8:	2201      	movs	r2, #1
   87faa:	4618      	mov	r0, r3
   87fac:	4b09      	ldr	r3, [pc, #36]	; (87fd4 <Cl_Dlsis_StartDialysis+0x80>)
   87fae:	4798      	blx	r3
   87fb0:	4603      	mov	r3, r0
   87fb2:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   87fb4:	4b08      	ldr	r3, [pc, #32]	; (87fd8 <Cl_Dlsis_StartDialysis+0x84>)
   87fb6:	4798      	blx	r3
	
	return 0;
   87fb8:	2300      	movs	r3, #0

}
   87fba:	4618      	mov	r0, r3
   87fbc:	3708      	adds	r7, #8
   87fbe:	46bd      	mov	sp, r7
   87fc0:	bd80      	pop	{r7, pc}
   87fc2:	bf00      	nop
   87fc4:	00099d79 	.word	0x00099d79
   87fc8:	20071b14 	.word	0x20071b14
   87fcc:	20072170 	.word	0x20072170
   87fd0:	2007193c 	.word	0x2007193c
   87fd4:	0009b805 	.word	0x0009b805
   87fd8:	00087fdd 	.word	0x00087fdd

00087fdc <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   87fdc:	b590      	push	{r4, r7, lr}
   87fde:	b087      	sub	sp, #28
   87fe0:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87fe2:	2300      	movs	r3, #0
   87fe4:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   87fe6:	2351      	movs	r3, #81	; 0x51
   87fe8:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   87fea:	2300      	movs	r3, #0
   87fec:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   87fee:	2300      	movs	r3, #0
   87ff0:	9300      	str	r3, [sp, #0]
   87ff2:	f04f 0300 	mov.w	r3, #0
   87ff6:	f04f 0200 	mov.w	r2, #0
   87ffa:	2101      	movs	r1, #1
   87ffc:	2001      	movs	r0, #1
   87ffe:	4cb3      	ldr	r4, [pc, #716]	; (882cc <Cl_Dlsis_ResumeDialysis+0x2f0>)
   88000:	47a0      	blx	r4
   88002:	4603      	mov	r3, r0
   88004:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   88006:	2300      	movs	r3, #0
   88008:	9300      	str	r3, [sp, #0]
   8800a:	f04f 0300 	mov.w	r3, #0
   8800e:	f04f 0200 	mov.w	r2, #0
   88012:	2100      	movs	r1, #0
   88014:	2029      	movs	r0, #41	; 0x29
   88016:	4cad      	ldr	r4, [pc, #692]	; (882cc <Cl_Dlsis_ResumeDialysis+0x2f0>)
   88018:	47a0      	blx	r4
   8801a:	4603      	mov	r3, r0
   8801c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   8801e:	2300      	movs	r3, #0
   88020:	9300      	str	r3, [sp, #0]
   88022:	f04f 0300 	mov.w	r3, #0
   88026:	f04f 0200 	mov.w	r2, #0
   8802a:	2100      	movs	r1, #0
   8802c:	202b      	movs	r0, #43	; 0x2b
   8802e:	4ca7      	ldr	r4, [pc, #668]	; (882cc <Cl_Dlsis_ResumeDialysis+0x2f0>)
   88030:	47a0      	blx	r4
   88032:	4603      	mov	r3, r0
   88034:	73fb      	strb	r3, [r7, #15]
									
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   88036:	2101      	movs	r1, #1
   88038:	2001      	movs	r0, #1
   8803a:	4ba5      	ldr	r3, [pc, #660]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8803c:	4798      	blx	r3
   8803e:	4603      	mov	r3, r0
   88040:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   88042:	2101      	movs	r1, #1
   88044:	203d      	movs	r0, #61	; 0x3d
   88046:	4ba2      	ldr	r3, [pc, #648]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88048:	4798      	blx	r3
   8804a:	4603      	mov	r3, r0
   8804c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   8804e:	2101      	movs	r1, #1
   88050:	203e      	movs	r0, #62	; 0x3e
   88052:	4b9f      	ldr	r3, [pc, #636]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88054:	4798      	blx	r3
   88056:	4603      	mov	r3, r0
   88058:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   8805a:	2101      	movs	r1, #1
   8805c:	2005      	movs	r0, #5
   8805e:	4b9c      	ldr	r3, [pc, #624]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88060:	4798      	blx	r3
   88062:	4603      	mov	r3, r0
   88064:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   88066:	2101      	movs	r1, #1
   88068:	2006      	movs	r0, #6
   8806a:	4b99      	ldr	r3, [pc, #612]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8806c:	4798      	blx	r3
   8806e:	4603      	mov	r3, r0
   88070:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   88072:	2100      	movs	r1, #0
   88074:	2003      	movs	r0, #3
   88076:	4b96      	ldr	r3, [pc, #600]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88078:	4798      	blx	r3
   8807a:	4603      	mov	r3, r0
   8807c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8807e:	2100      	movs	r1, #0
   88080:	2004      	movs	r0, #4
   88082:	4b93      	ldr	r3, [pc, #588]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88084:	4798      	blx	r3
   88086:	4603      	mov	r3, r0
   88088:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   8808a:	2100      	movs	r1, #0
   8808c:	2007      	movs	r0, #7
   8808e:	4b90      	ldr	r3, [pc, #576]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88090:	4798      	blx	r3
   88092:	4603      	mov	r3, r0
   88094:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   88096:	2100      	movs	r1, #0
   88098:	2008      	movs	r0, #8
   8809a:	4b8d      	ldr	r3, [pc, #564]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8809c:	4798      	blx	r3
   8809e:	4603      	mov	r3, r0
   880a0:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   880a2:	2101      	movs	r1, #1
   880a4:	2020      	movs	r0, #32
   880a6:	4b8a      	ldr	r3, [pc, #552]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880a8:	4798      	blx	r3
   880aa:	4603      	mov	r3, r0
   880ac:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   880ae:	2100      	movs	r1, #0
   880b0:	2021      	movs	r0, #33	; 0x21
   880b2:	4b87      	ldr	r3, [pc, #540]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880b4:	4798      	blx	r3
   880b6:	4603      	mov	r3, r0
   880b8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   880ba:	2101      	movs	r1, #1
   880bc:	2024      	movs	r0, #36	; 0x24
   880be:	4b84      	ldr	r3, [pc, #528]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880c0:	4798      	blx	r3
   880c2:	4603      	mov	r3, r0
   880c4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   880c6:	2101      	movs	r1, #1
   880c8:	2026      	movs	r0, #38	; 0x26
   880ca:	4b81      	ldr	r3, [pc, #516]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880cc:	4798      	blx	r3
   880ce:	4603      	mov	r3, r0
   880d0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   880d2:	2101      	movs	r1, #1
   880d4:	2023      	movs	r0, #35	; 0x23
   880d6:	4b7e      	ldr	r3, [pc, #504]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880d8:	4798      	blx	r3
   880da:	4603      	mov	r3, r0
   880dc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   880de:	2101      	movs	r1, #1
   880e0:	2025      	movs	r0, #37	; 0x25
   880e2:	4b7b      	ldr	r3, [pc, #492]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880e4:	4798      	blx	r3
   880e6:	4603      	mov	r3, r0
   880e8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   880ea:	2101      	movs	r1, #1
   880ec:	2022      	movs	r0, #34	; 0x22
   880ee:	4b78      	ldr	r3, [pc, #480]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880f0:	4798      	blx	r3
   880f2:	4603      	mov	r3, r0
   880f4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   880f6:	2101      	movs	r1, #1
   880f8:	2017      	movs	r0, #23
   880fa:	4b75      	ldr	r3, [pc, #468]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   880fc:	4798      	blx	r3
   880fe:	4603      	mov	r3, r0
   88100:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   88102:	2101      	movs	r1, #1
   88104:	2018      	movs	r0, #24
   88106:	4b72      	ldr	r3, [pc, #456]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88108:	4798      	blx	r3
   8810a:	4603      	mov	r3, r0
   8810c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   8810e:	2101      	movs	r1, #1
   88110:	2015      	movs	r0, #21
   88112:	4b6f      	ldr	r3, [pc, #444]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88114:	4798      	blx	r3
   88116:	4603      	mov	r3, r0
   88118:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   8811a:	2101      	movs	r1, #1
   8811c:	2016      	movs	r0, #22
   8811e:	4b6c      	ldr	r3, [pc, #432]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88120:	4798      	blx	r3
   88122:	4603      	mov	r3, r0
   88124:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   88126:	2101      	movs	r1, #1
   88128:	2027      	movs	r0, #39	; 0x27
   8812a:	4b69      	ldr	r3, [pc, #420]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8812c:	4798      	blx	r3
   8812e:	4603      	mov	r3, r0
   88130:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   88132:	2101      	movs	r1, #1
   88134:	2028      	movs	r0, #40	; 0x28
   88136:	4b66      	ldr	r3, [pc, #408]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88138:	4798      	blx	r3
   8813a:	4603      	mov	r3, r0
   8813c:	73fb      	strb	r3, [r7, #15]
									
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
// 									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   8813e:	2101      	movs	r1, #1
   88140:	200f      	movs	r0, #15
   88142:	4b63      	ldr	r3, [pc, #396]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88144:	4798      	blx	r3
   88146:	4603      	mov	r3, r0
   88148:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   8814a:	2101      	movs	r1, #1
   8814c:	2010      	movs	r0, #16
   8814e:	4b60      	ldr	r3, [pc, #384]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88150:	4798      	blx	r3
   88152:	4603      	mov	r3, r0
   88154:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   88156:	2101      	movs	r1, #1
   88158:	2011      	movs	r0, #17
   8815a:	4b5d      	ldr	r3, [pc, #372]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8815c:	4798      	blx	r3
   8815e:	4603      	mov	r3, r0
   88160:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   88162:	2101      	movs	r1, #1
   88164:	2012      	movs	r0, #18
   88166:	4b5a      	ldr	r3, [pc, #360]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88168:	4798      	blx	r3
   8816a:	4603      	mov	r3, r0
   8816c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   8816e:	2101      	movs	r1, #1
   88170:	2013      	movs	r0, #19
   88172:	4b57      	ldr	r3, [pc, #348]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88174:	4798      	blx	r3
   88176:	4603      	mov	r3, r0
   88178:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   8817a:	2101      	movs	r1, #1
   8817c:	2014      	movs	r0, #20
   8817e:	4b54      	ldr	r3, [pc, #336]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88180:	4798      	blx	r3
   88182:	4603      	mov	r3, r0
   88184:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   88186:	4b53      	ldr	r3, [pc, #332]	; (882d4 <Cl_Dlsis_ResumeDialysis+0x2f8>)
   88188:	781b      	ldrb	r3, [r3, #0]
   8818a:	2b00      	cmp	r3, #0
   8818c:	d005      	beq.n	8819a <Cl_Dlsis_ResumeDialysis+0x1be>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   8818e:	2101      	movs	r1, #1
   88190:	203c      	movs	r0, #60	; 0x3c
   88192:	4b4f      	ldr	r3, [pc, #316]	; (882d0 <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88194:	4798      	blx	r3
   88196:	4603      	mov	r3, r0
   88198:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   8819a:	4b4f      	ldr	r3, [pc, #316]	; (882d8 <Cl_Dlsis_ResumeDialysis+0x2fc>)
   8819c:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   8819e:	4b4f      	ldr	r3, [pc, #316]	; (882dc <Cl_Dlsis_ResumeDialysis+0x300>)
   881a0:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   881a2:	2001      	movs	r0, #1
   881a4:	4b4e      	ldr	r3, [pc, #312]	; (882e0 <Cl_Dlsis_ResumeDialysis+0x304>)
   881a6:	4798      	blx	r3
   881a8:	4603      	mov	r3, r0
   881aa:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   881ac:	2002      	movs	r0, #2
   881ae:	4b4c      	ldr	r3, [pc, #304]	; (882e0 <Cl_Dlsis_ResumeDialysis+0x304>)
   881b0:	4798      	blx	r3
   881b2:	4603      	mov	r3, r0
   881b4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   881b6:	200b      	movs	r0, #11
   881b8:	4b4a      	ldr	r3, [pc, #296]	; (882e4 <Cl_Dlsis_ResumeDialysis+0x308>)
   881ba:	4798      	blx	r3
   881bc:	4603      	mov	r3, r0
   881be:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   881c0:	2003      	movs	r0, #3
   881c2:	4b49      	ldr	r3, [pc, #292]	; (882e8 <Cl_Dlsis_ResumeDialysis+0x30c>)
   881c4:	4798      	blx	r3
   881c6:	4603      	mov	r3, r0
   881c8:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   881ca:	2100      	movs	r1, #0
   881cc:	2002      	movs	r0, #2
   881ce:	4b47      	ldr	r3, [pc, #284]	; (882ec <Cl_Dlsis_ResumeDialysis+0x310>)
   881d0:	4798      	blx	r3
									cl_wait(100);
   881d2:	2064      	movs	r0, #100	; 0x64
   881d4:	4b46      	ldr	r3, [pc, #280]	; (882f0 <Cl_Dlsis_ResumeDialysis+0x314>)
   881d6:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   881d8:	4b46      	ldr	r3, [pc, #280]	; (882f4 <Cl_Dlsis_ResumeDialysis+0x318>)
   881da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   881dc:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   881de:	68b9      	ldr	r1, [r7, #8]
   881e0:	2001      	movs	r0, #1
   881e2:	4b42      	ldr	r3, [pc, #264]	; (882ec <Cl_Dlsis_ResumeDialysis+0x310>)
   881e4:	4798      	blx	r3
									cl_wait(100);
   881e6:	2064      	movs	r0, #100	; 0x64
   881e8:	4b41      	ldr	r3, [pc, #260]	; (882f0 <Cl_Dlsis_ResumeDialysis+0x314>)
   881ea:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   881ec:	4b41      	ldr	r3, [pc, #260]	; (882f4 <Cl_Dlsis_ResumeDialysis+0x318>)
   881ee:	695b      	ldr	r3, [r3, #20]
   881f0:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   881f2:	4a41      	ldr	r2, [pc, #260]	; (882f8 <Cl_Dlsis_ResumeDialysis+0x31c>)
   881f4:	687b      	ldr	r3, [r7, #4]
   881f6:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   881f8:	2300      	movs	r3, #0
   881fa:	807b      	strh	r3, [r7, #2]
									switch (temp)
   881fc:	687b      	ldr	r3, [r7, #4]
   881fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   88202:	d017      	beq.n	88234 <Cl_Dlsis_ResumeDialysis+0x258>
   88204:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   88208:	d003      	beq.n	88212 <Cl_Dlsis_ResumeDialysis+0x236>
   8820a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8820e:	d027      	beq.n	88260 <Cl_Dlsis_ResumeDialysis+0x284>
   88210:	e037      	b.n	88282 <Cl_Dlsis_ResumeDialysis+0x2a6>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   88212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88216:	2002      	movs	r0, #2
   88218:	4b38      	ldr	r3, [pc, #224]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   8821a:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   8821c:	f240 5173 	movw	r1, #1395	; 0x573
   88220:	2001      	movs	r0, #1
   88222:	4b36      	ldr	r3, [pc, #216]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88224:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   88226:	233e      	movs	r3, #62	; 0x3e
   88228:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   8822a:	887b      	ldrh	r3, [r7, #2]
   8822c:	4618      	mov	r0, r3
   8822e:	4b34      	ldr	r3, [pc, #208]	; (88300 <Cl_Dlsis_ResumeDialysis+0x324>)
   88230:	4798      	blx	r3
										break;
   88232:	e037      	b.n	882a4 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   88234:	2203      	movs	r2, #3
   88236:	4933      	ldr	r1, [pc, #204]	; (88304 <Cl_Dlsis_ResumeDialysis+0x328>)
   88238:	2018      	movs	r0, #24
   8823a:	4b33      	ldr	r3, [pc, #204]	; (88308 <Cl_Dlsis_ResumeDialysis+0x32c>)
   8823c:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8823e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88242:	2002      	movs	r0, #2
   88244:	4b2d      	ldr	r3, [pc, #180]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88246:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   88248:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8824c:	2001      	movs	r0, #1
   8824e:	4b2b      	ldr	r3, [pc, #172]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88250:	4798      	blx	r3
										potvalue = (690 * 1024)/10000;
   88252:	2346      	movs	r3, #70	; 0x46
   88254:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   88256:	887b      	ldrh	r3, [r7, #2]
   88258:	4618      	mov	r0, r3
   8825a:	4b29      	ldr	r3, [pc, #164]	; (88300 <Cl_Dlsis_ResumeDialysis+0x324>)
   8825c:	4798      	blx	r3
										break;
   8825e:	e021      	b.n	882a4 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   88260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88264:	2002      	movs	r0, #2
   88266:	4b25      	ldr	r3, [pc, #148]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88268:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,600);
   8826a:	f44f 7116 	mov.w	r1, #600	; 0x258
   8826e:	2001      	movs	r0, #1
   88270:	4b22      	ldr	r3, [pc, #136]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88272:	4798      	blx	r3
										potvalue = (650 * 1024)/10000;
   88274:	2342      	movs	r3, #66	; 0x42
   88276:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   88278:	887b      	ldrh	r3, [r7, #2]
   8827a:	4618      	mov	r0, r3
   8827c:	4b20      	ldr	r3, [pc, #128]	; (88300 <Cl_Dlsis_ResumeDialysis+0x324>)
   8827e:	4798      	blx	r3
										break;
   88280:	e010      	b.n	882a4 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   88282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88286:	2002      	movs	r0, #2
   88288:	4b1c      	ldr	r3, [pc, #112]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   8828a:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   8828c:	f240 414c 	movw	r1, #1100	; 0x44c
   88290:	2001      	movs	r0, #1
   88292:	4b1a      	ldr	r3, [pc, #104]	; (882fc <Cl_Dlsis_ResumeDialysis+0x320>)
   88294:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   88296:	2344      	movs	r3, #68	; 0x44
   88298:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   8829a:	887b      	ldrh	r3, [r7, #2]
   8829c:	4618      	mov	r0, r3
   8829e:	4b18      	ldr	r3, [pc, #96]	; (88300 <Cl_Dlsis_ResumeDialysis+0x324>)
   882a0:	4798      	blx	r3
										break;
   882a2:	bf00      	nop
									}
									bc_flag = 1;
   882a4:	4b19      	ldr	r3, [pc, #100]	; (8830c <Cl_Dlsis_ResumeDialysis+0x330>)
   882a6:	2201      	movs	r2, #1
   882a8:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassDialysis();
									Cl_dlsisretcode = sv_cntrl_disable_bypass();
   882aa:	4b19      	ldr	r3, [pc, #100]	; (88310 <Cl_Dlsis_ResumeDialysis+0x334>)
   882ac:	4798      	blx	r3
   882ae:	4603      	mov	r3, r0
   882b0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   882b2:	4b18      	ldr	r3, [pc, #96]	; (88314 <Cl_Dlsis_ResumeDialysis+0x338>)
   882b4:	4798      	blx	r3
   882b6:	4603      	mov	r3, r0
   882b8:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   882ba:	4b17      	ldr	r3, [pc, #92]	; (88318 <Cl_Dlsis_ResumeDialysis+0x33c>)
   882bc:	2202      	movs	r2, #2
   882be:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassOff();
									return 0;	
   882c0:	2300      	movs	r3, #0
}
   882c2:	4618      	mov	r0, r3
   882c4:	3714      	adds	r7, #20
   882c6:	46bd      	mov	sp, r7
   882c8:	bd90      	pop	{r4, r7, pc}
   882ca:	bf00      	nop
   882cc:	00082d85 	.word	0x00082d85
   882d0:	00082de1 	.word	0x00082de1
   882d4:	20070a2a 	.word	0x20070a2a
   882d8:	00099c39 	.word	0x00099c39
   882dc:	00099bf5 	.word	0x00099bf5
   882e0:	00099a09 	.word	0x00099a09
   882e4:	000832a1 	.word	0x000832a1
   882e8:	00089385 	.word	0x00089385
   882ec:	0009316d 	.word	0x0009316d
   882f0:	00093009 	.word	0x00093009
   882f4:	20072654 	.word	0x20072654
   882f8:	20071944 	.word	0x20071944
   882fc:	00099b21 	.word	0x00099b21
   88300:	00099f5d 	.word	0x00099f5d
   88304:	000a85cc 	.word	0x000a85cc
   88308:	0009b805 	.word	0x0009b805
   8830c:	20071943 	.word	0x20071943
   88310:	00099c7d 	.word	0x00099c7d
   88314:	00086a3d 	.word	0x00086a3d
   88318:	20071924 	.word	0x20071924

0008831c <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   8831c:	b580      	push	{r7, lr}
   8831e:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   88320:	4b09      	ldr	r3, [pc, #36]	; (88348 <Cl_Dlsis_safesate+0x2c>)
   88322:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   88324:	2100      	movs	r1, #0
   88326:	2004      	movs	r0, #4
   88328:	4b08      	ldr	r3, [pc, #32]	; (8834c <Cl_Dlsis_safesate+0x30>)
   8832a:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   8832c:	2100      	movs	r1, #0
   8832e:	2004      	movs	r0, #4
   88330:	4b07      	ldr	r3, [pc, #28]	; (88350 <Cl_Dlsis_safesate+0x34>)
   88332:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   88334:	4b07      	ldr	r3, [pc, #28]	; (88354 <Cl_Dlsis_safesate+0x38>)
   88336:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   88338:	4b07      	ldr	r3, [pc, #28]	; (88358 <Cl_Dlsis_safesate+0x3c>)
   8833a:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8833c:	4b07      	ldr	r3, [pc, #28]	; (8835c <Cl_Dlsis_safesate+0x40>)
   8833e:	220a      	movs	r2, #10
   88340:	701a      	strb	r2, [r3, #0]
	
	return 0;
   88342:	2300      	movs	r3, #0
}
   88344:	4618      	mov	r0, r3
   88346:	bd80      	pop	{r7, pc}
   88348:	00099c55 	.word	0x00099c55
   8834c:	00095bbd 	.word	0x00095bbd
   88350:	0009316d 	.word	0x0009316d
   88354:	00099c09 	.word	0x00099c09
   88358:	000870a9 	.word	0x000870a9
   8835c:	20071924 	.word	0x20071924

00088360 <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   88360:	b580      	push	{r7, lr}
   88362:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   88364:	2206      	movs	r2, #6
   88366:	4909      	ldr	r1, [pc, #36]	; (8838c <cl_temp_safestate+0x2c>)
   88368:	2018      	movs	r0, #24
   8836a:	4b09      	ldr	r3, [pc, #36]	; (88390 <cl_temp_safestate+0x30>)
   8836c:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   8836e:	4b09      	ldr	r3, [pc, #36]	; (88394 <cl_temp_safestate+0x34>)
   88370:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   88372:	2100      	movs	r1, #0
   88374:	2004      	movs	r0, #4
   88376:	4b08      	ldr	r3, [pc, #32]	; (88398 <cl_temp_safestate+0x38>)
   88378:	4798      	blx	r3
	//sv_cntrl_deactivatevenousclamp();
	Cl_Dlsis_BypassDialysis();
   8837a:	4b08      	ldr	r3, [pc, #32]	; (8839c <cl_temp_safestate+0x3c>)
   8837c:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8837e:	4b08      	ldr	r3, [pc, #32]	; (883a0 <cl_temp_safestate+0x40>)
   88380:	220a      	movs	r2, #10
   88382:	701a      	strb	r2, [r3, #0]
	return 0;
   88384:	2300      	movs	r3, #0
}
   88386:	4618      	mov	r0, r3
   88388:	bd80      	pop	{r7, pc}
   8838a:	bf00      	nop
   8838c:	000a85d0 	.word	0x000a85d0
   88390:	0009b805 	.word	0x0009b805
   88394:	00099c55 	.word	0x00099c55
   88398:	00095bbd 	.word	0x00095bbd
   8839c:	000870a9 	.word	0x000870a9
   883a0:	20071924 	.word	0x20071924

000883a4 <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   883a4:	b480      	push	{r7}
   883a6:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   883a8:	4b0b      	ldr	r3, [pc, #44]	; (883d8 <cl_dprep_primeInit+0x34>)
   883aa:	2200      	movs	r2, #0
   883ac:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   883ae:	4b0b      	ldr	r3, [pc, #44]	; (883dc <cl_dprep_primeInit+0x38>)
   883b0:	2200      	movs	r2, #0
   883b2:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   883b4:	4b0a      	ldr	r3, [pc, #40]	; (883e0 <cl_dprep_primeInit+0x3c>)
   883b6:	2200      	movs	r2, #0
   883b8:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   883ba:	4b0a      	ldr	r3, [pc, #40]	; (883e4 <cl_dprep_primeInit+0x40>)
   883bc:	2200      	movs	r2, #0
   883be:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   883c0:	4b09      	ldr	r3, [pc, #36]	; (883e8 <cl_dprep_primeInit+0x44>)
   883c2:	2200      	movs	r2, #0
   883c4:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   883c6:	4b09      	ldr	r3, [pc, #36]	; (883ec <cl_dprep_primeInit+0x48>)
   883c8:	2200      	movs	r2, #0
   883ca:	701a      	strb	r2, [r3, #0]
	
}
   883cc:	bf00      	nop
   883ce:	4618      	mov	r0, r3
   883d0:	46bd      	mov	sp, r7
   883d2:	bc80      	pop	{r7}
   883d4:	4770      	bx	lr
   883d6:	bf00      	nop
   883d8:	20071984 	.word	0x20071984
   883dc:	20071985 	.word	0x20071985
   883e0:	20071986 	.word	0x20071986
   883e4:	20071987 	.word	0x20071987
   883e8:	20071988 	.word	0x20071988
   883ec:	20071989 	.word	0x20071989

000883f0 <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   883f0:	b580      	push	{r7, lr}
   883f2:	b084      	sub	sp, #16
   883f4:	af00      	add	r7, sp, #0
   883f6:	4603      	mov	r3, r0
   883f8:	460a      	mov	r2, r1
   883fa:	71fb      	strb	r3, [r7, #7]
   883fc:	4613      	mov	r3, r2
   883fe:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   88400:	2304      	movs	r3, #4
   88402:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   88404:	79fb      	ldrb	r3, [r7, #7]
   88406:	2b0b      	cmp	r3, #11
   88408:	d103      	bne.n	88412 <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   8840a:	4bb4      	ldr	r3, [pc, #720]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   8840c:	781a      	ldrb	r2, [r3, #0]
   8840e:	4bb4      	ldr	r3, [pc, #720]	; (886e0 <cl_dprep_primecontroller+0x2f0>)
   88410:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   88412:	4bb2      	ldr	r3, [pc, #712]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   88414:	781b      	ldrb	r3, [r3, #0]
   88416:	2b0c      	cmp	r3, #12
   88418:	f200 84a1 	bhi.w	88d5e <cl_dprep_primecontroller+0x96e>
   8841c:	a201      	add	r2, pc, #4	; (adr r2, 88424 <cl_dprep_primecontroller+0x34>)
   8841e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88422:	bf00      	nop
   88424:	00088459 	.word	0x00088459
   88428:	000884cf 	.word	0x000884cf
   8842c:	00088785 	.word	0x00088785
   88430:	000885dd 	.word	0x000885dd
   88434:	00088695 	.word	0x00088695
   88438:	00088897 	.word	0x00088897
   8843c:	0008899b 	.word	0x0008899b
   88440:	00088d5f 	.word	0x00088d5f
   88444:	00088a09 	.word	0x00088a09
   88448:	00088b2b 	.word	0x00088b2b
   8844c:	00088d5f 	.word	0x00088d5f
   88450:	00088c19 	.word	0x00088c19
   88454:	00088c95 	.word	0x00088c95
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   88458:	79fb      	ldrb	r3, [r7, #7]
   8845a:	2b01      	cmp	r3, #1
   8845c:	d009      	beq.n	88472 <cl_dprep_primecontroller+0x82>
   8845e:	2b0e      	cmp	r3, #14
   88460:	d000      	beq.n	88464 <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   88462:	e032      	b.n	884ca <cl_dprep_primecontroller+0xda>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88468:	4619      	mov	r1, r3
   8846a:	2001      	movs	r0, #1
   8846c:	4b9d      	ldr	r3, [pc, #628]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   8846e:	4798      	blx	r3
					break;
   88470:	e02b      	b.n	884ca <cl_dprep_primecontroller+0xda>
					case CL_DPREP_PRIME_PRIME_START:
					DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   88472:	2100      	movs	r1, #0
   88474:	2029      	movs	r0, #41	; 0x29
   88476:	4b9c      	ldr	r3, [pc, #624]	; (886e8 <cl_dprep_primecontroller+0x2f8>)
   88478:	4798      	blx	r3
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8847a:	2206      	movs	r2, #6
   8847c:	499b      	ldr	r1, [pc, #620]	; (886ec <cl_dprep_primecontroller+0x2fc>)
   8847e:	2018      	movs	r0, #24
   88480:	4b9b      	ldr	r3, [pc, #620]	; (886f0 <cl_dprep_primecontroller+0x300>)
   88482:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   88484:	4b9b      	ldr	r3, [pc, #620]	; (886f4 <cl_dprep_primecontroller+0x304>)
   88486:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,400);          // manav01 added
   88488:	f44f 71c8 	mov.w	r1, #400	; 0x190
   8848c:	2001      	movs	r0, #1
   8848e:	4b95      	ldr	r3, [pc, #596]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88490:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   88492:	2100      	movs	r1, #0
   88494:	2002      	movs	r0, #2
   88496:	4b93      	ldr	r3, [pc, #588]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88498:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8849a:	1d3b      	adds	r3, r7, #4
   8849c:	2200      	movs	r2, #0
   8849e:	4619      	mov	r1, r3
   884a0:	200d      	movs	r0, #13
   884a2:	4b93      	ldr	r3, [pc, #588]	; (886f0 <cl_dprep_primecontroller+0x300>)
   884a4:	4798      	blx	r3
   884a6:	4603      	mov	r3, r0
   884a8:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   884aa:	1d3b      	adds	r3, r7, #4
   884ac:	2200      	movs	r2, #0
   884ae:	4619      	mov	r1, r3
   884b0:	2024      	movs	r0, #36	; 0x24
   884b2:	4b8f      	ldr	r3, [pc, #572]	; (886f0 <cl_dprep_primecontroller+0x300>)
   884b4:	4798      	blx	r3
   884b6:	4603      	mov	r3, r0
   884b8:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   884ba:	4b8f      	ldr	r3, [pc, #572]	; (886f8 <cl_dprep_primecontroller+0x308>)
   884bc:	4798      	blx	r3
   884be:	4603      	mov	r3, r0
   884c0:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   884c2:	4b86      	ldr	r3, [pc, #536]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   884c4:	2201      	movs	r2, #1
   884c6:	701a      	strb	r2, [r3, #0]
					break;
   884c8:	bf00      	nop
					default:break;
				}
			break;
   884ca:	f000 bc48 	b.w	88d5e <cl_dprep_primecontroller+0x96e>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   884ce:	79fb      	ldrb	r3, [r7, #7]
   884d0:	3b02      	subs	r3, #2
   884d2:	2b0c      	cmp	r3, #12
   884d4:	d87e      	bhi.n	885d4 <cl_dprep_primecontroller+0x1e4>
   884d6:	a201      	add	r2, pc, #4	; (adr r2, 884dc <cl_dprep_primecontroller+0xec>)
   884d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   884dc:	00088583 	.word	0x00088583
   884e0:	00088511 	.word	0x00088511
   884e4:	000885a3 	.word	0x000885a3
   884e8:	000885d5 	.word	0x000885d5
   884ec:	000885d5 	.word	0x000885d5
   884f0:	000885d5 	.word	0x000885d5
   884f4:	000885d5 	.word	0x000885d5
   884f8:	000885d5 	.word	0x000885d5
   884fc:	000885d5 	.word	0x000885d5
   88500:	00088519 	.word	0x00088519
   88504:	000885b3 	.word	0x000885b3
   88508:	000885bd 	.word	0x000885bd
   8850c:	000885c7 	.word	0x000885c7
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88510:	4b72      	ldr	r3, [pc, #456]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   88512:	2203      	movs	r2, #3
   88514:	701a      	strb	r2, [r3, #0]
					break;
   88516:	e060      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   88518:	2002      	movs	r0, #2
   8851a:	4b78      	ldr	r3, [pc, #480]	; (886fc <cl_dprep_primecontroller+0x30c>)
   8851c:	4798      	blx	r3
   8851e:	4603      	mov	r3, r0
   88520:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   88522:	4b77      	ldr	r3, [pc, #476]	; (88700 <cl_dprep_primecontroller+0x310>)
   88524:	f993 3000 	ldrsb.w	r3, [r3]
   88528:	b2da      	uxtb	r2, r3
   8852a:	3201      	adds	r2, #1
   8852c:	b2d2      	uxtb	r2, r2
   8852e:	b251      	sxtb	r1, r2
   88530:	4a73      	ldr	r2, [pc, #460]	; (88700 <cl_dprep_primecontroller+0x310>)
   88532:	7011      	strb	r1, [r2, #0]
   88534:	2b3b      	cmp	r3, #59	; 0x3b
   88536:	dd0f      	ble.n	88558 <cl_dprep_primecontroller+0x168>
					{
						cl_prime_sec = 0;
   88538:	4b71      	ldr	r3, [pc, #452]	; (88700 <cl_dprep_primecontroller+0x310>)
   8853a:	2200      	movs	r2, #0
   8853c:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   8853e:	4b71      	ldr	r3, [pc, #452]	; (88704 <cl_dprep_primecontroller+0x314>)
   88540:	f993 3000 	ldrsb.w	r3, [r3]
   88544:	b2db      	uxtb	r3, r3
   88546:	3301      	adds	r3, #1
   88548:	b2db      	uxtb	r3, r3
   8854a:	b25a      	sxtb	r2, r3
   8854c:	4b6d      	ldr	r3, [pc, #436]	; (88704 <cl_dprep_primecontroller+0x314>)
   8854e:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88550:	4b69      	ldr	r3, [pc, #420]	; (886f8 <cl_dprep_primecontroller+0x308>)
   88552:	4798      	blx	r3
   88554:	4603      	mov	r3, r0
   88556:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88558:	4b6a      	ldr	r3, [pc, #424]	; (88704 <cl_dprep_primecontroller+0x314>)
   8855a:	f993 3000 	ldrsb.w	r3, [r3]
   8855e:	2b00      	cmp	r3, #0
   88560:	dd3a      	ble.n	885d8 <cl_dprep_primecontroller+0x1e8>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88562:	2100      	movs	r1, #0
   88564:	2004      	movs	r0, #4
   88566:	4b5f      	ldr	r3, [pc, #380]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88568:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   8856a:	1d3b      	adds	r3, r7, #4
   8856c:	2200      	movs	r2, #0
   8856e:	4619      	mov	r1, r3
   88570:	200f      	movs	r0, #15
   88572:	4b5f      	ldr	r3, [pc, #380]	; (886f0 <cl_dprep_primecontroller+0x300>)
   88574:	4798      	blx	r3
   88576:	4603      	mov	r3, r0
   88578:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   8857a:	4b58      	ldr	r3, [pc, #352]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   8857c:	2202      	movs	r2, #2
   8857e:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   88580:	e02a      	b.n	885d8 <cl_dprep_primecontroller+0x1e8>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   88582:	2100      	movs	r1, #0
   88584:	2004      	movs	r0, #4
   88586:	4b57      	ldr	r3, [pc, #348]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88588:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   8858a:	1d3b      	adds	r3, r7, #4
   8858c:	2200      	movs	r2, #0
   8858e:	4619      	mov	r1, r3
   88590:	2023      	movs	r0, #35	; 0x23
   88592:	4b57      	ldr	r3, [pc, #348]	; (886f0 <cl_dprep_primecontroller+0x300>)
   88594:	4798      	blx	r3
   88596:	4603      	mov	r3, r0
   88598:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   8859a:	4b50      	ldr	r3, [pc, #320]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   8859c:	2203      	movs	r2, #3
   8859e:	701a      	strb	r2, [r3, #0]
					break;
   885a0:	e01b      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   885a2:	2100      	movs	r1, #0
   885a4:	2004      	movs	r0, #4
   885a6:	4b4f      	ldr	r3, [pc, #316]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   885a8:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   885aa:	4b4c      	ldr	r3, [pc, #304]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   885ac:	2204      	movs	r2, #4
   885ae:	701a      	strb	r2, [r3, #0]
					break;
   885b0:	e013      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   885b2:	2100      	movs	r1, #0
   885b4:	2002      	movs	r0, #2
   885b6:	4b4b      	ldr	r3, [pc, #300]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   885b8:	4798      	blx	r3
					break;
   885ba:	e00e      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   885bc:	2100      	movs	r1, #0
   885be:	2004      	movs	r0, #4
   885c0:	4b48      	ldr	r3, [pc, #288]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   885c2:	4798      	blx	r3
					break;
   885c4:	e009      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   885c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   885ca:	4619      	mov	r1, r3
   885cc:	2001      	movs	r0, #1
   885ce:	4b45      	ldr	r3, [pc, #276]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   885d0:	4798      	blx	r3
					break;
   885d2:	e002      	b.n	885da <cl_dprep_primecontroller+0x1ea>
					default:break;
   885d4:	bf00      	nop
   885d6:	e3c2      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   885d8:	bf00      	nop
					break;
					default:break;
				}

			
			break;
   885da:	e3c0      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   885dc:	79fb      	ldrb	r3, [r7, #7]
   885de:	3b01      	subs	r3, #1
   885e0:	2b0d      	cmp	r3, #13
   885e2:	f200 8397 	bhi.w	88d14 <cl_dprep_primecontroller+0x924>
   885e6:	a201      	add	r2, pc, #4	; (adr r2, 885ec <cl_dprep_primecontroller+0x1fc>)
   885e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   885ec:	00088625 	.word	0x00088625
   885f0:	00088d15 	.word	0x00088d15
   885f4:	00088d15 	.word	0x00088d15
   885f8:	00088d15 	.word	0x00088d15
   885fc:	00088d15 	.word	0x00088d15
   88600:	00088d15 	.word	0x00088d15
   88604:	00088d15 	.word	0x00088d15
   88608:	00088d15 	.word	0x00088d15
   8860c:	00088d15 	.word	0x00088d15
   88610:	00088d15 	.word	0x00088d15
   88614:	00088d15 	.word	0x00088d15
   88618:	00088671 	.word	0x00088671
   8861c:	0008867b 	.word	0x0008867b
   88620:	00088685 	.word	0x00088685
						{
							case CL_DPREP_PRIME_PRIME_START:
							DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   88624:	2100      	movs	r1, #0
   88626:	2029      	movs	r0, #41	; 0x29
   88628:	4b2f      	ldr	r3, [pc, #188]	; (886e8 <cl_dprep_primecontroller+0x2f8>)
   8862a:	4798      	blx	r3
								cl_bp_controller(CL_BP_EVENT_START,0);
   8862c:	2100      	movs	r1, #0
   8862e:	2002      	movs	r0, #2
   88630:	4b2c      	ldr	r3, [pc, #176]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88632:	4798      	blx	r3
								cl_prime_min = 0;
   88634:	4b33      	ldr	r3, [pc, #204]	; (88704 <cl_dprep_primecontroller+0x314>)
   88636:	2200      	movs	r2, #0
   88638:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   8863a:	4b31      	ldr	r3, [pc, #196]	; (88700 <cl_dprep_primecontroller+0x310>)
   8863c:	2200      	movs	r2, #0
   8863e:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88640:	1d3b      	adds	r3, r7, #4
   88642:	2200      	movs	r2, #0
   88644:	4619      	mov	r1, r3
   88646:	200d      	movs	r0, #13
   88648:	4b29      	ldr	r3, [pc, #164]	; (886f0 <cl_dprep_primecontroller+0x300>)
   8864a:	4798      	blx	r3
   8864c:	4603      	mov	r3, r0
   8864e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88650:	1d3b      	adds	r3, r7, #4
   88652:	2200      	movs	r2, #0
   88654:	4619      	mov	r1, r3
   88656:	2024      	movs	r0, #36	; 0x24
   88658:	4b25      	ldr	r3, [pc, #148]	; (886f0 <cl_dprep_primecontroller+0x300>)
   8865a:	4798      	blx	r3
   8865c:	4603      	mov	r3, r0
   8865e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88660:	4b25      	ldr	r3, [pc, #148]	; (886f8 <cl_dprep_primecontroller+0x308>)
   88662:	4798      	blx	r3
   88664:	4603      	mov	r3, r0
   88666:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88668:	4b1c      	ldr	r3, [pc, #112]	; (886dc <cl_dprep_primecontroller+0x2ec>)
   8866a:	2201      	movs	r2, #1
   8866c:	701a      	strb	r2, [r3, #0]
							break;
   8866e:	e010      	b.n	88692 <cl_dprep_primecontroller+0x2a2>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88670:	2100      	movs	r1, #0
   88672:	2002      	movs	r0, #2
   88674:	4b1b      	ldr	r3, [pc, #108]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88676:	4798      	blx	r3
							break;
   88678:	e00b      	b.n	88692 <cl_dprep_primecontroller+0x2a2>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8867a:	2100      	movs	r1, #0
   8867c:	2004      	movs	r0, #4
   8867e:	4b19      	ldr	r3, [pc, #100]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   88680:	4798      	blx	r3
							break;
   88682:	e006      	b.n	88692 <cl_dprep_primecontroller+0x2a2>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88688:	4619      	mov	r1, r3
   8868a:	2001      	movs	r0, #1
   8868c:	4b15      	ldr	r3, [pc, #84]	; (886e4 <cl_dprep_primecontroller+0x2f4>)
   8868e:	4798      	blx	r3
							break;
   88690:	bf00      	nop
						}
			break;
   88692:	e33f      	b.n	88d14 <cl_dprep_primecontroller+0x924>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   88694:	79fb      	ldrb	r3, [r7, #7]
   88696:	3b01      	subs	r3, #1
   88698:	2b0d      	cmp	r3, #13
   8869a:	f200 833d 	bhi.w	88d18 <cl_dprep_primecontroller+0x928>
   8869e:	a201      	add	r2, pc, #4	; (adr r2, 886a4 <cl_dprep_primecontroller+0x2b4>)
   886a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   886a4:	00088709 	.word	0x00088709
   886a8:	00088741 	.word	0x00088741
   886ac:	00088d19 	.word	0x00088d19
   886b0:	00088d19 	.word	0x00088d19
   886b4:	00088d19 	.word	0x00088d19
   886b8:	00088d19 	.word	0x00088d19
   886bc:	00088d19 	.word	0x00088d19
   886c0:	00088d19 	.word	0x00088d19
   886c4:	00088d19 	.word	0x00088d19
   886c8:	00088d19 	.word	0x00088d19
   886cc:	00088d19 	.word	0x00088d19
   886d0:	00088761 	.word	0x00088761
   886d4:	0008876b 	.word	0x0008876b
   886d8:	00088775 	.word	0x00088775
   886dc:	20071984 	.word	0x20071984
   886e0:	2007264c 	.word	0x2007264c
   886e4:	0009316d 	.word	0x0009316d
   886e8:	00096831 	.word	0x00096831
   886ec:	000a85d8 	.word	0x000a85d8
   886f0:	0009b805 	.word	0x0009b805
   886f4:	00099c7d 	.word	0x00099c7d
   886f8:	00088d69 	.word	0x00088d69
   886fc:	000a05c1 	.word	0x000a05c1
   88700:	20071986 	.word	0x20071986
   88704:	20071987 	.word	0x20071987
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   88708:	2100      	movs	r1, #0
   8870a:	2002      	movs	r0, #2
   8870c:	4bb5      	ldr	r3, [pc, #724]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   8870e:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88710:	1d3b      	adds	r3, r7, #4
   88712:	2200      	movs	r2, #0
   88714:	4619      	mov	r1, r3
   88716:	200d      	movs	r0, #13
   88718:	4bb3      	ldr	r3, [pc, #716]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   8871a:	4798      	blx	r3
   8871c:	4603      	mov	r3, r0
   8871e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88720:	1d3b      	adds	r3, r7, #4
   88722:	2200      	movs	r2, #0
   88724:	4619      	mov	r1, r3
   88726:	2024      	movs	r0, #36	; 0x24
   88728:	4baf      	ldr	r3, [pc, #700]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   8872a:	4798      	blx	r3
   8872c:	4603      	mov	r3, r0
   8872e:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88730:	4bae      	ldr	r3, [pc, #696]	; (889ec <cl_dprep_primecontroller+0x5fc>)
   88732:	4798      	blx	r3
   88734:	4603      	mov	r3, r0
   88736:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88738:	4bad      	ldr	r3, [pc, #692]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8873a:	2201      	movs	r2, #1
   8873c:	701a      	strb	r2, [r3, #0]
							break;
   8873e:	e020      	b.n	88782 <cl_dprep_primecontroller+0x392>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88740:	2100      	movs	r1, #0
   88742:	2004      	movs	r0, #4
   88744:	4ba7      	ldr	r3, [pc, #668]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88746:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88748:	1d3b      	adds	r3, r7, #4
   8874a:	2200      	movs	r2, #0
   8874c:	4619      	mov	r1, r3
   8874e:	2023      	movs	r0, #35	; 0x23
   88750:	4ba5      	ldr	r3, [pc, #660]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88752:	4798      	blx	r3
   88754:	4603      	mov	r3, r0
   88756:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88758:	4ba5      	ldr	r3, [pc, #660]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8875a:	2203      	movs	r2, #3
   8875c:	701a      	strb	r2, [r3, #0]
							break;
   8875e:	e010      	b.n	88782 <cl_dprep_primecontroller+0x392>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88760:	2100      	movs	r1, #0
   88762:	2002      	movs	r0, #2
   88764:	4b9f      	ldr	r3, [pc, #636]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88766:	4798      	blx	r3
							break;
   88768:	e00b      	b.n	88782 <cl_dprep_primecontroller+0x392>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8876a:	2100      	movs	r1, #0
   8876c:	2004      	movs	r0, #4
   8876e:	4b9d      	ldr	r3, [pc, #628]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88770:	4798      	blx	r3
							break;
   88772:	e006      	b.n	88782 <cl_dprep_primecontroller+0x392>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88774:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88778:	4619      	mov	r1, r3
   8877a:	2001      	movs	r0, #1
   8877c:	4b99      	ldr	r3, [pc, #612]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   8877e:	4798      	blx	r3
							break;
   88780:	bf00      	nop
						}
			break;
   88782:	e2c9      	b.n	88d18 <cl_dprep_primecontroller+0x928>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   88784:	79fb      	ldrb	r3, [r7, #7]
   88786:	3b01      	subs	r3, #1
   88788:	2b0d      	cmp	r3, #13
   8878a:	f200 82c7 	bhi.w	88d1c <cl_dprep_primecontroller+0x92c>
   8878e:	a201      	add	r2, pc, #4	; (adr r2, 88794 <cl_dprep_primecontroller+0x3a4>)
   88790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88794:	0008880b 	.word	0x0008880b
   88798:	00088d1d 	.word	0x00088d1d
   8879c:	00088d1d 	.word	0x00088d1d
   887a0:	00088d1d 	.word	0x00088d1d
   887a4:	000887cd 	.word	0x000887cd
   887a8:	00088893 	.word	0x00088893
   887ac:	00088d1d 	.word	0x00088d1d
   887b0:	00088859 	.word	0x00088859
   887b4:	00088d1d 	.word	0x00088d1d
   887b8:	00088d1d 	.word	0x00088d1d
   887bc:	00088d1d 	.word	0x00088d1d
   887c0:	00088871 	.word	0x00088871
   887c4:	0008887b 	.word	0x0008887b
   887c8:	00088885 	.word	0x00088885
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   887cc:	2206      	movs	r2, #6
   887ce:	4989      	ldr	r1, [pc, #548]	; (889f4 <cl_dprep_primecontroller+0x604>)
   887d0:	2018      	movs	r0, #24
   887d2:	4b85      	ldr	r3, [pc, #532]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   887d4:	4798      	blx	r3
							cl_prime_min =  0;
   887d6:	4b88      	ldr	r3, [pc, #544]	; (889f8 <cl_dprep_primecontroller+0x608>)
   887d8:	2200      	movs	r2, #0
   887da:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   887dc:	4b87      	ldr	r3, [pc, #540]	; (889fc <cl_dprep_primecontroller+0x60c>)
   887de:	2200      	movs	r2, #0
   887e0:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   887e2:	2100      	movs	r1, #0
   887e4:	2002      	movs	r0, #2
   887e6:	4b7f      	ldr	r3, [pc, #508]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   887e8:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   887ea:	1d3b      	adds	r3, r7, #4
   887ec:	2200      	movs	r2, #0
   887ee:	4619      	mov	r1, r3
   887f0:	202f      	movs	r0, #47	; 0x2f
   887f2:	4b7d      	ldr	r3, [pc, #500]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   887f4:	4798      	blx	r3
   887f6:	4603      	mov	r3, r0
   887f8:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   887fa:	4b7c      	ldr	r3, [pc, #496]	; (889ec <cl_dprep_primecontroller+0x5fc>)
   887fc:	4798      	blx	r3
   887fe:	4603      	mov	r3, r0
   88800:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88802:	4b7b      	ldr	r3, [pc, #492]	; (889f0 <cl_dprep_primecontroller+0x600>)
   88804:	2205      	movs	r2, #5
   88806:	701a      	strb	r2, [r3, #0]
							break;
   88808:	e044      	b.n	88894 <cl_dprep_primecontroller+0x4a4>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8880a:	2206      	movs	r2, #6
   8880c:	497c      	ldr	r1, [pc, #496]	; (88a00 <cl_dprep_primecontroller+0x610>)
   8880e:	2018      	movs	r0, #24
   88810:	4b75      	ldr	r3, [pc, #468]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88812:	4798      	blx	r3
							cl_prime_min =  0;
   88814:	4b78      	ldr	r3, [pc, #480]	; (889f8 <cl_dprep_primecontroller+0x608>)
   88816:	2200      	movs	r2, #0
   88818:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   8881a:	4b78      	ldr	r3, [pc, #480]	; (889fc <cl_dprep_primecontroller+0x60c>)
   8881c:	2200      	movs	r2, #0
   8881e:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88820:	2100      	movs	r1, #0
   88822:	2002      	movs	r0, #2
   88824:	4b6f      	ldr	r3, [pc, #444]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88826:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88828:	1d3b      	adds	r3, r7, #4
   8882a:	2200      	movs	r2, #0
   8882c:	4619      	mov	r1, r3
   8882e:	200d      	movs	r0, #13
   88830:	4b6d      	ldr	r3, [pc, #436]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88832:	4798      	blx	r3
   88834:	4603      	mov	r3, r0
   88836:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88838:	1d3b      	adds	r3, r7, #4
   8883a:	2200      	movs	r2, #0
   8883c:	4619      	mov	r1, r3
   8883e:	2024      	movs	r0, #36	; 0x24
   88840:	4b69      	ldr	r3, [pc, #420]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88842:	4798      	blx	r3
   88844:	4603      	mov	r3, r0
   88846:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88848:	4b68      	ldr	r3, [pc, #416]	; (889ec <cl_dprep_primecontroller+0x5fc>)
   8884a:	4798      	blx	r3
   8884c:	4603      	mov	r3, r0
   8884e:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88850:	4b67      	ldr	r3, [pc, #412]	; (889f0 <cl_dprep_primecontroller+0x600>)
   88852:	2201      	movs	r2, #1
   88854:	701a      	strb	r2, [r3, #0]
							break;
   88856:	e01d      	b.n	88894 <cl_dprep_primecontroller+0x4a4>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88858:	2100      	movs	r1, #0
   8885a:	2002      	movs	r0, #2
   8885c:	4b61      	ldr	r3, [pc, #388]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   8885e:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88860:	4b68      	ldr	r3, [pc, #416]	; (88a04 <cl_dprep_primecontroller+0x614>)
   88862:	4798      	blx	r3
   88864:	4603      	mov	r3, r0
   88866:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88868:	4b61      	ldr	r3, [pc, #388]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8886a:	2209      	movs	r2, #9
   8886c:	701a      	strb	r2, [r3, #0]
							break;
   8886e:	e011      	b.n	88894 <cl_dprep_primecontroller+0x4a4>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88870:	2100      	movs	r1, #0
   88872:	2002      	movs	r0, #2
   88874:	4b5b      	ldr	r3, [pc, #364]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88876:	4798      	blx	r3
							break;
   88878:	e00c      	b.n	88894 <cl_dprep_primecontroller+0x4a4>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8887a:	2100      	movs	r1, #0
   8887c:	2004      	movs	r0, #4
   8887e:	4b59      	ldr	r3, [pc, #356]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88880:	4798      	blx	r3
							break;
   88882:	e007      	b.n	88894 <cl_dprep_primecontroller+0x4a4>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88884:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88888:	4619      	mov	r1, r3
   8888a:	2001      	movs	r0, #1
   8888c:	4b55      	ldr	r3, [pc, #340]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   8888e:	4798      	blx	r3
							break;
   88890:	e000      	b.n	88894 <cl_dprep_primecontroller+0x4a4>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   88892:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88894:	e242      	b.n	88d1c <cl_dprep_primecontroller+0x92c>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   88896:	79fb      	ldrb	r3, [r7, #7]
   88898:	3b02      	subs	r3, #2
   8889a:	2b0c      	cmp	r3, #12
   8889c:	d879      	bhi.n	88992 <cl_dprep_primecontroller+0x5a2>
   8889e:	a201      	add	r2, pc, #4	; (adr r2, 888a4 <cl_dprep_primecontroller+0x4b4>)
   888a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   888a4:	00088941 	.word	0x00088941
   888a8:	000888d9 	.word	0x000888d9
   888ac:	00088961 	.word	0x00088961
   888b0:	00088993 	.word	0x00088993
   888b4:	00088993 	.word	0x00088993
   888b8:	00088993 	.word	0x00088993
   888bc:	00088993 	.word	0x00088993
   888c0:	00088993 	.word	0x00088993
   888c4:	00088993 	.word	0x00088993
   888c8:	000888e1 	.word	0x000888e1
   888cc:	00088971 	.word	0x00088971
   888d0:	0008897b 	.word	0x0008897b
   888d4:	00088985 	.word	0x00088985
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   888d8:	4b45      	ldr	r3, [pc, #276]	; (889f0 <cl_dprep_primecontroller+0x600>)
   888da:	2206      	movs	r2, #6
   888dc:	701a      	strb	r2, [r3, #0]
						break;
   888de:	e05b      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   888e0:	4b46      	ldr	r3, [pc, #280]	; (889fc <cl_dprep_primecontroller+0x60c>)
   888e2:	f993 3000 	ldrsb.w	r3, [r3]
   888e6:	b2da      	uxtb	r2, r3
   888e8:	3201      	adds	r2, #1
   888ea:	b2d2      	uxtb	r2, r2
   888ec:	b251      	sxtb	r1, r2
   888ee:	4a43      	ldr	r2, [pc, #268]	; (889fc <cl_dprep_primecontroller+0x60c>)
   888f0:	7011      	strb	r1, [r2, #0]
   888f2:	2b3b      	cmp	r3, #59	; 0x3b
   888f4:	dd0f      	ble.n	88916 <cl_dprep_primecontroller+0x526>
						{
							cl_prime_sec = 0;
   888f6:	4b41      	ldr	r3, [pc, #260]	; (889fc <cl_dprep_primecontroller+0x60c>)
   888f8:	2200      	movs	r2, #0
   888fa:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   888fc:	4b3e      	ldr	r3, [pc, #248]	; (889f8 <cl_dprep_primecontroller+0x608>)
   888fe:	f993 3000 	ldrsb.w	r3, [r3]
   88902:	b2db      	uxtb	r3, r3
   88904:	3301      	adds	r3, #1
   88906:	b2db      	uxtb	r3, r3
   88908:	b25a      	sxtb	r2, r3
   8890a:	4b3b      	ldr	r3, [pc, #236]	; (889f8 <cl_dprep_primecontroller+0x608>)
   8890c:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8890e:	4b37      	ldr	r3, [pc, #220]	; (889ec <cl_dprep_primecontroller+0x5fc>)
   88910:	4798      	blx	r3
   88912:	4603      	mov	r3, r0
   88914:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88916:	4b38      	ldr	r3, [pc, #224]	; (889f8 <cl_dprep_primecontroller+0x608>)
   88918:	f993 3000 	ldrsb.w	r3, [r3]
   8891c:	2b00      	cmp	r3, #0
   8891e:	dd3a      	ble.n	88996 <cl_dprep_primecontroller+0x5a6>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88920:	2100      	movs	r1, #0
   88922:	2004      	movs	r0, #4
   88924:	4b2f      	ldr	r3, [pc, #188]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88926:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   88928:	1d3b      	adds	r3, r7, #4
   8892a:	2200      	movs	r2, #0
   8892c:	4619      	mov	r1, r3
   8892e:	2031      	movs	r0, #49	; 0x31
   88930:	4b2d      	ldr	r3, [pc, #180]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88932:	4798      	blx	r3
   88934:	4603      	mov	r3, r0
   88936:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   88938:	4b2d      	ldr	r3, [pc, #180]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8893a:	2208      	movs	r2, #8
   8893c:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   8893e:	e02a      	b.n	88996 <cl_dprep_primecontroller+0x5a6>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88940:	2100      	movs	r1, #0
   88942:	2004      	movs	r0, #4
   88944:	4b27      	ldr	r3, [pc, #156]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88946:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88948:	1d3b      	adds	r3, r7, #4
   8894a:	2200      	movs	r2, #0
   8894c:	4619      	mov	r1, r3
   8894e:	2023      	movs	r0, #35	; 0x23
   88950:	4b25      	ldr	r3, [pc, #148]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   88952:	4798      	blx	r3
   88954:	4603      	mov	r3, r0
   88956:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88958:	4b25      	ldr	r3, [pc, #148]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8895a:	2203      	movs	r2, #3
   8895c:	701a      	strb	r2, [r3, #0]
						break;
   8895e:	e01b      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88960:	2100      	movs	r1, #0
   88962:	2004      	movs	r0, #4
   88964:	4b1f      	ldr	r3, [pc, #124]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88966:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88968:	4b21      	ldr	r3, [pc, #132]	; (889f0 <cl_dprep_primecontroller+0x600>)
   8896a:	2204      	movs	r2, #4
   8896c:	701a      	strb	r2, [r3, #0]
						break;
   8896e:	e013      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88970:	2100      	movs	r1, #0
   88972:	2002      	movs	r0, #2
   88974:	4b1b      	ldr	r3, [pc, #108]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88976:	4798      	blx	r3
						break;
   88978:	e00e      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   8897a:	2100      	movs	r1, #0
   8897c:	2004      	movs	r0, #4
   8897e:	4b19      	ldr	r3, [pc, #100]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   88980:	4798      	blx	r3
						break;
   88982:	e009      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88984:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88988:	4619      	mov	r1, r3
   8898a:	2001      	movs	r0, #1
   8898c:	4b15      	ldr	r3, [pc, #84]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   8898e:	4798      	blx	r3
						break;
   88990:	e002      	b.n	88998 <cl_dprep_primecontroller+0x5a8>
						default:break;
   88992:	bf00      	nop
   88994:	e1e3      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
						
						}

						break;
   88996:	bf00      	nop
						break;
						default:break;
					}

			
			break;
   88998:	e1e1      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   8899a:	79fb      	ldrb	r3, [r7, #7]
   8899c:	2b05      	cmp	r3, #5
   8899e:	d000      	beq.n	889a2 <cl_dprep_primecontroller+0x5b2>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   889a0:	e01e      	b.n	889e0 <cl_dprep_primecontroller+0x5f0>
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   889a2:	2206      	movs	r2, #6
   889a4:	4913      	ldr	r1, [pc, #76]	; (889f4 <cl_dprep_primecontroller+0x604>)
   889a6:	2018      	movs	r0, #24
   889a8:	4b0f      	ldr	r3, [pc, #60]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   889aa:	4798      	blx	r3
									cl_prime_min =  0;
   889ac:	4b12      	ldr	r3, [pc, #72]	; (889f8 <cl_dprep_primecontroller+0x608>)
   889ae:	2200      	movs	r2, #0
   889b0:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   889b2:	4b12      	ldr	r3, [pc, #72]	; (889fc <cl_dprep_primecontroller+0x60c>)
   889b4:	2200      	movs	r2, #0
   889b6:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   889b8:	2100      	movs	r1, #0
   889ba:	2002      	movs	r0, #2
   889bc:	4b09      	ldr	r3, [pc, #36]	; (889e4 <cl_dprep_primecontroller+0x5f4>)
   889be:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   889c0:	1d3b      	adds	r3, r7, #4
   889c2:	2200      	movs	r2, #0
   889c4:	4619      	mov	r1, r3
   889c6:	202f      	movs	r0, #47	; 0x2f
   889c8:	4b07      	ldr	r3, [pc, #28]	; (889e8 <cl_dprep_primecontroller+0x5f8>)
   889ca:	4798      	blx	r3
   889cc:	4603      	mov	r3, r0
   889ce:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   889d0:	4b06      	ldr	r3, [pc, #24]	; (889ec <cl_dprep_primecontroller+0x5fc>)
   889d2:	4798      	blx	r3
   889d4:	4603      	mov	r3, r0
   889d6:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   889d8:	4b05      	ldr	r3, [pc, #20]	; (889f0 <cl_dprep_primecontroller+0x600>)
   889da:	2205      	movs	r2, #5
   889dc:	701a      	strb	r2, [r3, #0]
								break;
   889de:	bf00      	nop
								default:break;
									}
			break;
   889e0:	e1bd      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
   889e2:	bf00      	nop
   889e4:	0009316d 	.word	0x0009316d
   889e8:	0009b805 	.word	0x0009b805
   889ec:	00088d69 	.word	0x00088d69
   889f0:	20071984 	.word	0x20071984
   889f4:	000a85e0 	.word	0x000a85e0
   889f8:	20071987 	.word	0x20071987
   889fc:	20071986 	.word	0x20071986
   88a00:	000a85d8 	.word	0x000a85d8
   88a04:	00088de1 	.word	0x00088de1
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   88a08:	79fb      	ldrb	r3, [r7, #7]
   88a0a:	3b01      	subs	r3, #1
   88a0c:	2b0d      	cmp	r3, #13
   88a0e:	f200 8187 	bhi.w	88d20 <cl_dprep_primecontroller+0x930>
   88a12:	a201      	add	r2, pc, #4	; (adr r2, 88a18 <cl_dprep_primecontroller+0x628>)
   88a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88a18:	00088a8f 	.word	0x00088a8f
   88a1c:	00088d21 	.word	0x00088d21
   88a20:	00088d21 	.word	0x00088d21
   88a24:	00088d21 	.word	0x00088d21
   88a28:	00088a51 	.word	0x00088a51
   88a2c:	00088b27 	.word	0x00088b27
   88a30:	00088d21 	.word	0x00088d21
   88a34:	00088add 	.word	0x00088add
   88a38:	00088d21 	.word	0x00088d21
   88a3c:	00088d21 	.word	0x00088d21
   88a40:	00088d21 	.word	0x00088d21
   88a44:	00088b05 	.word	0x00088b05
   88a48:	00088b0f 	.word	0x00088b0f
   88a4c:	00088b19 	.word	0x00088b19
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88a50:	2206      	movs	r2, #6
   88a52:	49b5      	ldr	r1, [pc, #724]	; (88d28 <cl_dprep_primecontroller+0x938>)
   88a54:	2018      	movs	r0, #24
   88a56:	4bb5      	ldr	r3, [pc, #724]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88a58:	4798      	blx	r3
							cl_prime_min =  0;
   88a5a:	4bb5      	ldr	r3, [pc, #724]	; (88d30 <cl_dprep_primecontroller+0x940>)
   88a5c:	2200      	movs	r2, #0
   88a5e:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88a60:	4bb4      	ldr	r3, [pc, #720]	; (88d34 <cl_dprep_primecontroller+0x944>)
   88a62:	2200      	movs	r2, #0
   88a64:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88a66:	2100      	movs	r1, #0
   88a68:	2002      	movs	r0, #2
   88a6a:	4bb3      	ldr	r3, [pc, #716]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88a6c:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88a6e:	1d3b      	adds	r3, r7, #4
   88a70:	2200      	movs	r2, #0
   88a72:	4619      	mov	r1, r3
   88a74:	202f      	movs	r0, #47	; 0x2f
   88a76:	4bad      	ldr	r3, [pc, #692]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88a78:	4798      	blx	r3
   88a7a:	4603      	mov	r3, r0
   88a7c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88a7e:	4baf      	ldr	r3, [pc, #700]	; (88d3c <cl_dprep_primecontroller+0x94c>)
   88a80:	4798      	blx	r3
   88a82:	4603      	mov	r3, r0
   88a84:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88a86:	4bae      	ldr	r3, [pc, #696]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88a88:	2205      	movs	r2, #5
   88a8a:	701a      	strb	r2, [r3, #0]
							break;
   88a8c:	e04c      	b.n	88b28 <cl_dprep_primecontroller+0x738>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88a8e:	2206      	movs	r2, #6
   88a90:	49ac      	ldr	r1, [pc, #688]	; (88d44 <cl_dprep_primecontroller+0x954>)
   88a92:	2018      	movs	r0, #24
   88a94:	4ba5      	ldr	r3, [pc, #660]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88a96:	4798      	blx	r3
							cl_prime_min =  0;
   88a98:	4ba5      	ldr	r3, [pc, #660]	; (88d30 <cl_dprep_primecontroller+0x940>)
   88a9a:	2200      	movs	r2, #0
   88a9c:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88a9e:	4ba5      	ldr	r3, [pc, #660]	; (88d34 <cl_dprep_primecontroller+0x944>)
   88aa0:	2200      	movs	r2, #0
   88aa2:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88aa4:	2100      	movs	r1, #0
   88aa6:	2002      	movs	r0, #2
   88aa8:	4ba3      	ldr	r3, [pc, #652]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88aaa:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88aac:	1d3b      	adds	r3, r7, #4
   88aae:	2200      	movs	r2, #0
   88ab0:	4619      	mov	r1, r3
   88ab2:	200d      	movs	r0, #13
   88ab4:	4b9d      	ldr	r3, [pc, #628]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88ab6:	4798      	blx	r3
   88ab8:	4603      	mov	r3, r0
   88aba:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88abc:	1d3b      	adds	r3, r7, #4
   88abe:	2200      	movs	r2, #0
   88ac0:	4619      	mov	r1, r3
   88ac2:	2024      	movs	r0, #36	; 0x24
   88ac4:	4b99      	ldr	r3, [pc, #612]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88ac6:	4798      	blx	r3
   88ac8:	4603      	mov	r3, r0
   88aca:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88acc:	4b9b      	ldr	r3, [pc, #620]	; (88d3c <cl_dprep_primecontroller+0x94c>)
   88ace:	4798      	blx	r3
   88ad0:	4603      	mov	r3, r0
   88ad2:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88ad4:	4b9a      	ldr	r3, [pc, #616]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88ad6:	2201      	movs	r2, #1
   88ad8:	701a      	strb	r2, [r3, #0]
							break;
   88ada:	e025      	b.n	88b28 <cl_dprep_primecontroller+0x738>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88adc:	2100      	movs	r1, #0
   88ade:	2002      	movs	r0, #2
   88ae0:	4b95      	ldr	r3, [pc, #596]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88ae2:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88ae4:	1d3b      	adds	r3, r7, #4
   88ae6:	2200      	movs	r2, #0
   88ae8:	4619      	mov	r1, r3
   88aea:	2028      	movs	r0, #40	; 0x28
   88aec:	4b8f      	ldr	r3, [pc, #572]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88aee:	4798      	blx	r3
   88af0:	4603      	mov	r3, r0
   88af2:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88af4:	4b94      	ldr	r3, [pc, #592]	; (88d48 <cl_dprep_primecontroller+0x958>)
   88af6:	4798      	blx	r3
   88af8:	4603      	mov	r3, r0
   88afa:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88afc:	4b90      	ldr	r3, [pc, #576]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88afe:	2209      	movs	r2, #9
   88b00:	701a      	strb	r2, [r3, #0]
							break;
   88b02:	e011      	b.n	88b28 <cl_dprep_primecontroller+0x738>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88b04:	2100      	movs	r1, #0
   88b06:	2002      	movs	r0, #2
   88b08:	4b8b      	ldr	r3, [pc, #556]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88b0a:	4798      	blx	r3
							break;
   88b0c:	e00c      	b.n	88b28 <cl_dprep_primecontroller+0x738>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88b0e:	2100      	movs	r1, #0
   88b10:	2004      	movs	r0, #4
   88b12:	4b89      	ldr	r3, [pc, #548]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88b14:	4798      	blx	r3
							break;
   88b16:	e007      	b.n	88b28 <cl_dprep_primecontroller+0x738>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88b18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88b1c:	4619      	mov	r1, r3
   88b1e:	2001      	movs	r0, #1
   88b20:	4b85      	ldr	r3, [pc, #532]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88b22:	4798      	blx	r3
							break;
   88b24:	e000      	b.n	88b28 <cl_dprep_primecontroller+0x738>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   88b26:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88b28:	e0fa      	b.n	88d20 <cl_dprep_primecontroller+0x930>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   88b2a:	79fb      	ldrb	r3, [r7, #7]
   88b2c:	3b02      	subs	r3, #2
   88b2e:	2b0c      	cmp	r3, #12
   88b30:	d86e      	bhi.n	88c10 <cl_dprep_primecontroller+0x820>
   88b32:	a201      	add	r2, pc, #4	; (adr r2, 88b38 <cl_dprep_primecontroller+0x748>)
   88b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88b38:	00088ba5 	.word	0x00088ba5
   88b3c:	00088b6d 	.word	0x00088b6d
   88b40:	00088c11 	.word	0x00088c11
   88b44:	00088c11 	.word	0x00088c11
   88b48:	00088c11 	.word	0x00088c11
   88b4c:	00088c11 	.word	0x00088c11
   88b50:	00088c11 	.word	0x00088c11
   88b54:	00088ba5 	.word	0x00088ba5
   88b58:	00088be7 	.word	0x00088be7
   88b5c:	00088b75 	.word	0x00088b75
   88b60:	00088bef 	.word	0x00088bef
   88b64:	00088bf9 	.word	0x00088bf9
   88b68:	00088c03 	.word	0x00088c03
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88b6c:	4b74      	ldr	r3, [pc, #464]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88b6e:	220b      	movs	r2, #11
   88b70:	701a      	strb	r2, [r3, #0]
							break;
   88b72:	e050      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   88b74:	4b75      	ldr	r3, [pc, #468]	; (88d4c <cl_dprep_primecontroller+0x95c>)
   88b76:	f993 3000 	ldrsb.w	r3, [r3]
   88b7a:	b2da      	uxtb	r2, r3
   88b7c:	3201      	adds	r2, #1
   88b7e:	b2d2      	uxtb	r2, r2
   88b80:	b251      	sxtb	r1, r2
   88b82:	4a72      	ldr	r2, [pc, #456]	; (88d4c <cl_dprep_primecontroller+0x95c>)
   88b84:	7011      	strb	r1, [r2, #0]
   88b86:	2b3b      	cmp	r3, #59	; 0x3b
   88b88:	dd44      	ble.n	88c14 <cl_dprep_primecontroller+0x824>
							{
								cl_dialyser_prime_sec = 0;
   88b8a:	4b70      	ldr	r3, [pc, #448]	; (88d4c <cl_dprep_primecontroller+0x95c>)
   88b8c:	2200      	movs	r2, #0
   88b8e:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   88b90:	4b6f      	ldr	r3, [pc, #444]	; (88d50 <cl_dprep_primecontroller+0x960>)
   88b92:	f993 3000 	ldrsb.w	r3, [r3]
   88b96:	b2db      	uxtb	r3, r3
   88b98:	3301      	adds	r3, #1
   88b9a:	b2db      	uxtb	r3, r3
   88b9c:	b25a      	sxtb	r2, r3
   88b9e:	4b6c      	ldr	r3, [pc, #432]	; (88d50 <cl_dprep_primecontroller+0x960>)
   88ba0:	701a      	strb	r2, [r3, #0]
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   88ba2:	e037      	b.n	88c14 <cl_dprep_primecontroller+0x824>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   88ba4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88ba8:	2b01      	cmp	r3, #1
   88baa:	d107      	bne.n	88bbc <cl_dprep_primecontroller+0x7cc>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88bac:	2100      	movs	r1, #0
   88bae:	2004      	movs	r0, #4
   88bb0:	4b61      	ldr	r3, [pc, #388]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88bb2:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   88bb4:	4b62      	ldr	r3, [pc, #392]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88bb6:	220a      	movs	r2, #10
   88bb8:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88bba:	e02c      	b.n	88c16 <cl_dprep_primecontroller+0x826>
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									sv_cntrl_enable_bypass();
   88bbc:	4b65      	ldr	r3, [pc, #404]	; (88d54 <cl_dprep_primecontroller+0x964>)
   88bbe:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88bc0:	2100      	movs	r1, #0
   88bc2:	2004      	movs	r0, #4
   88bc4:	4b5c      	ldr	r3, [pc, #368]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88bc6:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   88bc8:	4b60      	ldr	r3, [pc, #384]	; (88d4c <cl_dprep_primecontroller+0x95c>)
   88bca:	2200      	movs	r2, #0
   88bcc:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   88bce:	4b60      	ldr	r3, [pc, #384]	; (88d50 <cl_dprep_primecontroller+0x960>)
   88bd0:	2200      	movs	r2, #0
   88bd2:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88bd4:	4b5a      	ldr	r3, [pc, #360]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88bd6:	220b      	movs	r2, #11
   88bd8:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   88bda:	2200      	movs	r2, #0
   88bdc:	2100      	movs	r1, #0
   88bde:	2029      	movs	r0, #41	; 0x29
   88be0:	4b52      	ldr	r3, [pc, #328]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88be2:	4798      	blx	r3
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88be4:	e017      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   88be6:	4b56      	ldr	r3, [pc, #344]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88be8:	220c      	movs	r2, #12
   88bea:	701a      	strb	r2, [r3, #0]
							break;
   88bec:	e013      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88bee:	2100      	movs	r1, #0
   88bf0:	2002      	movs	r0, #2
   88bf2:	4b51      	ldr	r3, [pc, #324]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88bf4:	4798      	blx	r3
							break;
   88bf6:	e00e      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88bf8:	2100      	movs	r1, #0
   88bfa:	2004      	movs	r0, #4
   88bfc:	4b4e      	ldr	r3, [pc, #312]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88bfe:	4798      	blx	r3
							break;
   88c00:	e009      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88c02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88c06:	4619      	mov	r1, r3
   88c08:	2001      	movs	r0, #1
   88c0a:	4b4b      	ldr	r3, [pc, #300]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88c0c:	4798      	blx	r3
							break;
   88c0e:	e002      	b.n	88c16 <cl_dprep_primecontroller+0x826>
							default:break;
   88c10:	bf00      	nop
   88c12:	e0a4      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   88c14:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							default:break;
						}
			break;
   88c16:	e0a2      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   88c18:	79fb      	ldrb	r3, [r7, #7]
   88c1a:	3b08      	subs	r3, #8
   88c1c:	2b06      	cmp	r3, #6
   88c1e:	f200 8081 	bhi.w	88d24 <cl_dprep_primecontroller+0x934>
   88c22:	a201      	add	r2, pc, #4	; (adr r2, 88c28 <cl_dprep_primecontroller+0x838>)
   88c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88c28:	00088c45 	.word	0x00088c45
   88c2c:	00088d25 	.word	0x00088d25
   88c30:	00088d25 	.word	0x00088d25
   88c34:	00088d25 	.word	0x00088d25
   88c38:	00088c71 	.word	0x00088c71
   88c3c:	00088c7b 	.word	0x00088c7b
   88c40:	00088c85 	.word	0x00088c85
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   88c44:	4b44      	ldr	r3, [pc, #272]	; (88d58 <cl_dprep_primecontroller+0x968>)
   88c46:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   88c48:	2100      	movs	r1, #0
   88c4a:	2002      	movs	r0, #2
   88c4c:	4b3a      	ldr	r3, [pc, #232]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88c4e:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88c50:	1d3b      	adds	r3, r7, #4
   88c52:	2200      	movs	r2, #0
   88c54:	4619      	mov	r1, r3
   88c56:	2028      	movs	r0, #40	; 0x28
   88c58:	4b34      	ldr	r3, [pc, #208]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88c5a:	4798      	blx	r3
   88c5c:	4603      	mov	r3, r0
   88c5e:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88c60:	4b39      	ldr	r3, [pc, #228]	; (88d48 <cl_dprep_primecontroller+0x958>)
   88c62:	4798      	blx	r3
   88c64:	4603      	mov	r3, r0
   88c66:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88c68:	4b35      	ldr	r3, [pc, #212]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88c6a:	2209      	movs	r2, #9
   88c6c:	701a      	strb	r2, [r3, #0]
							break;
   88c6e:	e010      	b.n	88c92 <cl_dprep_primecontroller+0x8a2>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88c70:	2100      	movs	r1, #0
   88c72:	2002      	movs	r0, #2
   88c74:	4b30      	ldr	r3, [pc, #192]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88c76:	4798      	blx	r3
							break;
   88c78:	e00b      	b.n	88c92 <cl_dprep_primecontroller+0x8a2>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88c7a:	2100      	movs	r1, #0
   88c7c:	2004      	movs	r0, #4
   88c7e:	4b2e      	ldr	r3, [pc, #184]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88c80:	4798      	blx	r3
							break;
   88c82:	e006      	b.n	88c92 <cl_dprep_primecontroller+0x8a2>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88c84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88c88:	4619      	mov	r1, r3
   88c8a:	2001      	movs	r0, #1
   88c8c:	4b2a      	ldr	r3, [pc, #168]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88c8e:	4798      	blx	r3
							break;
   88c90:	bf00      	nop
						}
			break;
   88c92:	e047      	b.n	88d24 <cl_dprep_primecontroller+0x934>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   88c94:	79fb      	ldrb	r3, [r7, #7]
   88c96:	3b08      	subs	r3, #8
   88c98:	2b06      	cmp	r3, #6
   88c9a:	d85f      	bhi.n	88d5c <cl_dprep_primecontroller+0x96c>
   88c9c:	a201      	add	r2, pc, #4	; (adr r2, 88ca4 <cl_dprep_primecontroller+0x8b4>)
   88c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88ca2:	bf00      	nop
   88ca4:	00088cc1 	.word	0x00088cc1
   88ca8:	00088ce9 	.word	0x00088ce9
   88cac:	00088d5d 	.word	0x00088d5d
   88cb0:	00088d5d 	.word	0x00088d5d
   88cb4:	00088cf1 	.word	0x00088cf1
   88cb8:	00088cfb 	.word	0x00088cfb
   88cbc:	00088d05 	.word	0x00088d05
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88cc0:	2100      	movs	r1, #0
   88cc2:	2002      	movs	r0, #2
   88cc4:	4b1c      	ldr	r3, [pc, #112]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88cc6:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88cc8:	1d3b      	adds	r3, r7, #4
   88cca:	2200      	movs	r2, #0
   88ccc:	4619      	mov	r1, r3
   88cce:	2028      	movs	r0, #40	; 0x28
   88cd0:	4b16      	ldr	r3, [pc, #88]	; (88d2c <cl_dprep_primecontroller+0x93c>)
   88cd2:	4798      	blx	r3
   88cd4:	4603      	mov	r3, r0
   88cd6:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88cd8:	4b1b      	ldr	r3, [pc, #108]	; (88d48 <cl_dprep_primecontroller+0x958>)
   88cda:	4798      	blx	r3
   88cdc:	4603      	mov	r3, r0
   88cde:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88ce0:	4b17      	ldr	r3, [pc, #92]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88ce2:	2209      	movs	r2, #9
   88ce4:	701a      	strb	r2, [r3, #0]
							break;
   88ce6:	e014      	b.n	88d12 <cl_dprep_primecontroller+0x922>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88ce8:	4b15      	ldr	r3, [pc, #84]	; (88d40 <cl_dprep_primecontroller+0x950>)
   88cea:	220b      	movs	r2, #11
   88cec:	701a      	strb	r2, [r3, #0]
							break;
   88cee:	e010      	b.n	88d12 <cl_dprep_primecontroller+0x922>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88cf0:	2100      	movs	r1, #0
   88cf2:	2002      	movs	r0, #2
   88cf4:	4b10      	ldr	r3, [pc, #64]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88cf6:	4798      	blx	r3
							break;
   88cf8:	e00b      	b.n	88d12 <cl_dprep_primecontroller+0x922>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88cfa:	2100      	movs	r1, #0
   88cfc:	2004      	movs	r0, #4
   88cfe:	4b0e      	ldr	r3, [pc, #56]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88d00:	4798      	blx	r3
							break;
   88d02:	e006      	b.n	88d12 <cl_dprep_primecontroller+0x922>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88d04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   88d08:	4619      	mov	r1, r3
   88d0a:	2001      	movs	r0, #1
   88d0c:	4b0a      	ldr	r3, [pc, #40]	; (88d38 <cl_dprep_primecontroller+0x948>)
   88d0e:	4798      	blx	r3
							break;
   88d10:	bf00      	nop

						}
			break;
   88d12:	e023      	b.n	88d5c <cl_dprep_primecontroller+0x96c>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88d14:	bf00      	nop
   88d16:	e022      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88d18:	bf00      	nop
   88d1a:	e020      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88d1c:	bf00      	nop
   88d1e:	e01e      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88d20:	bf00      	nop
   88d22:	e01c      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88d24:	bf00      	nop
   88d26:	e01a      	b.n	88d5e <cl_dprep_primecontroller+0x96e>
   88d28:	000a85e0 	.word	0x000a85e0
   88d2c:	0009b805 	.word	0x0009b805
   88d30:	20071987 	.word	0x20071987
   88d34:	20071986 	.word	0x20071986
   88d38:	0009316d 	.word	0x0009316d
   88d3c:	00088d69 	.word	0x00088d69
   88d40:	20071984 	.word	0x20071984
   88d44:	000a85d8 	.word	0x000a85d8
   88d48:	00088de1 	.word	0x00088de1
   88d4c:	20071988 	.word	0x20071988
   88d50:	20071989 	.word	0x20071989
   88d54:	00099c55 	.word	0x00099c55
   88d58:	00099c7d 	.word	0x00099c7d
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   88d5c:	bf00      	nop

		}
	

	
	return 0;
   88d5e:	2300      	movs	r3, #0
}
   88d60:	4618      	mov	r0, r3
   88d62:	3710      	adds	r7, #16
   88d64:	46bd      	mov	sp, r7
   88d66:	bd80      	pop	{r7, pc}

00088d68 <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   88d68:	b580      	push	{r7, lr}
   88d6a:	b084      	sub	sp, #16
   88d6c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88d6e:	2304      	movs	r3, #4
   88d70:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88d72:	2351      	movs	r3, #81	; 0x51
   88d74:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88d76:	1d3b      	adds	r3, r7, #4
   88d78:	2200      	movs	r2, #0
   88d7a:	601a      	str	r2, [r3, #0]
   88d7c:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   88d80:	230a      	movs	r3, #10
   88d82:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   88d84:	2302      	movs	r3, #2
   88d86:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   88d88:	4b12      	ldr	r3, [pc, #72]	; (88dd4 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   88d8a:	f993 3000 	ldrsb.w	r3, [r3]
   88d8e:	b2db      	uxtb	r3, r3
   88d90:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88d92:	2300      	movs	r3, #0
   88d94:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   88d96:	4b10      	ldr	r3, [pc, #64]	; (88dd8 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x70>)
   88d98:	f993 3000 	ldrsb.w	r3, [r3]
   88d9c:	b2db      	uxtb	r3, r3
   88d9e:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   88da0:	4b0c      	ldr	r3, [pc, #48]	; (88dd4 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x6c>)
   88da2:	f993 3000 	ldrsb.w	r3, [r3]
   88da6:	b2db      	uxtb	r3, r3
   88da8:	f1c3 0301 	rsb	r3, r3, #1
   88dac:	b2db      	uxtb	r3, r3
   88dae:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88db0:	2300      	movs	r3, #0
   88db2:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88db4:	2300      	movs	r3, #0
   88db6:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88db8:	1d39      	adds	r1, r7, #4
   88dba:	7bbb      	ldrb	r3, [r7, #14]
   88dbc:	2207      	movs	r2, #7
   88dbe:	4618      	mov	r0, r3
   88dc0:	4b06      	ldr	r3, [pc, #24]	; (88ddc <Cl_Dprep_primeUpdatePrimeTimeInfo+0x74>)
   88dc2:	4798      	blx	r3
   88dc4:	4603      	mov	r3, r0
   88dc6:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88dc8:	2300      	movs	r3, #0
}
   88dca:	4618      	mov	r0, r3
   88dcc:	3710      	adds	r7, #16
   88dce:	46bd      	mov	sp, r7
   88dd0:	bd80      	pop	{r7, pc}
   88dd2:	bf00      	nop
   88dd4:	20071987 	.word	0x20071987
   88dd8:	20071986 	.word	0x20071986
   88ddc:	0009b805 	.word	0x0009b805

00088de0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88de0:	b580      	push	{r7, lr}
   88de2:	b084      	sub	sp, #16
   88de4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88de6:	2304      	movs	r3, #4
   88de8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88dea:	2351      	movs	r3, #81	; 0x51
   88dec:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88dee:	1d3b      	adds	r3, r7, #4
   88df0:	2200      	movs	r2, #0
   88df2:	601a      	str	r2, [r3, #0]
   88df4:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   88df8:	230a      	movs	r3, #10
   88dfa:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   88dfc:	2303      	movs	r3, #3
   88dfe:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   88e00:	4b12      	ldr	r3, [pc, #72]	; (88e4c <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x6c>)
   88e02:	f993 3000 	ldrsb.w	r3, [r3]
   88e06:	b2db      	uxtb	r3, r3
   88e08:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88e0a:	2300      	movs	r3, #0
   88e0c:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   88e0e:	4b10      	ldr	r3, [pc, #64]	; (88e50 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x70>)
   88e10:	f993 3000 	ldrsb.w	r3, [r3]
   88e14:	b2db      	uxtb	r3, r3
   88e16:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   88e18:	4b0e      	ldr	r3, [pc, #56]	; (88e54 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x74>)
   88e1a:	f993 3000 	ldrsb.w	r3, [r3]
   88e1e:	b2db      	uxtb	r3, r3
   88e20:	f1c3 0305 	rsb	r3, r3, #5
   88e24:	b2db      	uxtb	r3, r3
   88e26:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88e28:	2300      	movs	r3, #0
   88e2a:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88e2c:	2300      	movs	r3, #0
   88e2e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88e30:	1d39      	adds	r1, r7, #4
   88e32:	7bbb      	ldrb	r3, [r7, #14]
   88e34:	2207      	movs	r2, #7
   88e36:	4618      	mov	r0, r3
   88e38:	4b07      	ldr	r3, [pc, #28]	; (88e58 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   88e3a:	4798      	blx	r3
   88e3c:	4603      	mov	r3, r0
   88e3e:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88e40:	2300      	movs	r3, #0

}
   88e42:	4618      	mov	r0, r3
   88e44:	3710      	adds	r7, #16
   88e46:	46bd      	mov	sp, r7
   88e48:	bd80      	pop	{r7, pc}
   88e4a:	bf00      	nop
   88e4c:	20071989 	.word	0x20071989
   88e50:	20071988 	.word	0x20071988
   88e54:	20071987 	.word	0x20071987
   88e58:	0009b805 	.word	0x0009b805

00088e5c <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   88e5c:	b480      	push	{r7}
   88e5e:	b083      	sub	sp, #12
   88e60:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88e62:	2304      	movs	r3, #4
   88e64:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
	//		Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
	//		Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   88e66:	2300      	movs	r3, #0
}
   88e68:	4618      	mov	r0, r3
   88e6a:	370c      	adds	r7, #12
   88e6c:	46bd      	mov	sp, r7
   88e6e:	bc80      	pop	{r7}
   88e70:	4770      	bx	lr
   88e72:	bf00      	nop

00088e74 <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   88e74:	b480      	push	{r7}
   88e76:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   88e78:	2300      	movs	r3, #0
   88e7a:	4618      	mov	r0, r3
   88e7c:	46bd      	mov	sp, r7
   88e7e:	bc80      	pop	{r7}
   88e80:	4770      	bx	lr
   88e82:	bf00      	nop

00088e84 <cl_event_handler>:
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
Cl_Int16Type testFPcurrentstatus_prev=0;
static Cl_Uint32Type test_counter =0;
extern Cl_Sys_statusType cl_sys_statbuffer;
Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   88e84:	b580      	push	{r7, lr}
   88e86:	b084      	sub	sp, #16
   88e88:	af00      	add	r7, sp, #0
   88e8a:	4603      	mov	r3, r0
   88e8c:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   88e8e:	79fb      	ldrb	r3, [r7, #7]
   88e90:	3b0d      	subs	r3, #13
   88e92:	2b50      	cmp	r3, #80	; 0x50
   88e94:	f200 8196 	bhi.w	891c4 <cl_event_handler+0x340>
   88e98:	a201      	add	r2, pc, #4	; (adr r2, 88ea0 <cl_event_handler+0x1c>)
   88e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88e9e:	bf00      	nop
   88ea0:	000891bb 	.word	0x000891bb
   88ea4:	000891bb 	.word	0x000891bb
   88ea8:	000891c5 	.word	0x000891c5
   88eac:	000891c5 	.word	0x000891c5
   88eb0:	000891c5 	.word	0x000891c5
   88eb4:	000891c5 	.word	0x000891c5
   88eb8:	000891c5 	.word	0x000891c5
   88ebc:	000891c5 	.word	0x000891c5
   88ec0:	000891c5 	.word	0x000891c5
   88ec4:	000891c5 	.word	0x000891c5
   88ec8:	000891c5 	.word	0x000891c5
   88ecc:	000891c5 	.word	0x000891c5
   88ed0:	000891c5 	.word	0x000891c5
   88ed4:	000891c5 	.word	0x000891c5
   88ed8:	000891c5 	.word	0x000891c5
   88edc:	000891c5 	.word	0x000891c5
   88ee0:	000891c5 	.word	0x000891c5
   88ee4:	000891c5 	.word	0x000891c5
   88ee8:	000891c5 	.word	0x000891c5
   88eec:	000891c5 	.word	0x000891c5
   88ef0:	000891c5 	.word	0x000891c5
   88ef4:	000891c5 	.word	0x000891c5
   88ef8:	000891c5 	.word	0x000891c5
   88efc:	000891c5 	.word	0x000891c5
   88f00:	000891c5 	.word	0x000891c5
   88f04:	000891c5 	.word	0x000891c5
   88f08:	000891c5 	.word	0x000891c5
   88f0c:	000891c5 	.word	0x000891c5
   88f10:	000891c5 	.word	0x000891c5
   88f14:	000891c5 	.word	0x000891c5
   88f18:	000891c5 	.word	0x000891c5
   88f1c:	000891c5 	.word	0x000891c5
   88f20:	000891c5 	.word	0x000891c5
   88f24:	000891c5 	.word	0x000891c5
   88f28:	000891b3 	.word	0x000891b3
   88f2c:	000891c5 	.word	0x000891c5
   88f30:	000891c5 	.word	0x000891c5
   88f34:	00088fe5 	.word	0x00088fe5
   88f38:	000891c5 	.word	0x000891c5
   88f3c:	000891c5 	.word	0x000891c5
   88f40:	000891c5 	.word	0x000891c5
   88f44:	000891c5 	.word	0x000891c5
   88f48:	00088ff3 	.word	0x00088ff3
   88f4c:	00088ff9 	.word	0x00088ff9
   88f50:	00089001 	.word	0x00089001
   88f54:	00089103 	.word	0x00089103
   88f58:	0008912b 	.word	0x0008912b
   88f5c:	000891ab 	.word	0x000891ab
   88f60:	000891c5 	.word	0x000891c5
   88f64:	000891c5 	.word	0x000891c5
   88f68:	000891c5 	.word	0x000891c5
   88f6c:	000891c5 	.word	0x000891c5
   88f70:	000891c5 	.word	0x000891c5
   88f74:	000891c5 	.word	0x000891c5
   88f78:	000891c5 	.word	0x000891c5
   88f7c:	000891c5 	.word	0x000891c5
   88f80:	000891c5 	.word	0x000891c5
   88f84:	000891c5 	.word	0x000891c5
   88f88:	000891c5 	.word	0x000891c5
   88f8c:	000891c5 	.word	0x000891c5
   88f90:	000891c5 	.word	0x000891c5
   88f94:	000891c5 	.word	0x000891c5
   88f98:	000891c5 	.word	0x000891c5
   88f9c:	000891c5 	.word	0x000891c5
   88fa0:	000891c5 	.word	0x000891c5
   88fa4:	000891c5 	.word	0x000891c5
   88fa8:	000891c5 	.word	0x000891c5
   88fac:	000891c5 	.word	0x000891c5
   88fb0:	000891c5 	.word	0x000891c5
   88fb4:	000891c5 	.word	0x000891c5
   88fb8:	000891c5 	.word	0x000891c5
   88fbc:	000891c5 	.word	0x000891c5
   88fc0:	000891c5 	.word	0x000891c5
   88fc4:	000891c5 	.word	0x000891c5
   88fc8:	000891c5 	.word	0x000891c5
   88fcc:	000891c5 	.word	0x000891c5
   88fd0:	000891c5 	.word	0x000891c5
   88fd4:	000891c5 	.word	0x000891c5
   88fd8:	000891c5 	.word	0x000891c5
   88fdc:	000891c5 	.word	0x000891c5
   88fe0:	000891c5 	.word	0x000891c5
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   88fe4:	2004      	movs	r0, #4
   88fe6:	4b7a      	ldr	r3, [pc, #488]	; (891d0 <cl_event_handler+0x34c>)
   88fe8:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   88fea:	2006      	movs	r0, #6
   88fec:	4b79      	ldr	r3, [pc, #484]	; (891d4 <cl_event_handler+0x350>)
   88fee:	4798      	blx	r3
		//	sv_cs_setpotvalue(250);
		
		
		
		
		break;
   88ff0:	e0e9      	b.n	891c6 <cl_event_handler+0x342>
		}
		
		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		*/
				//cl_ufpumpFeedback_timer(); // commented for testing
				cl_hep_pumpFeedback_timer();
   88ff2:	4b79      	ldr	r3, [pc, #484]	; (891d8 <cl_event_handler+0x354>)
   88ff4:	4798      	blx	r3
//	toggle = false;
}
		
	
	
		break;		
   88ff6:	e0e6      	b.n	891c6 <cl_event_handler+0x342>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   88ff8:	2000      	movs	r0, #0
   88ffa:	4b78      	ldr	r3, [pc, #480]	; (891dc <cl_event_handler+0x358>)
   88ffc:	4798      	blx	r3
// 		}
// 		
// 		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 		 
// 		}
		break;
   88ffe:	e0e2      	b.n	891c6 <cl_event_handler+0x342>
	
		
	break;	
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_DEC_M , &dtemp);
   89000:	4977      	ldr	r1, [pc, #476]	; (891e0 <cl_event_handler+0x35c>)
   89002:	201e      	movs	r0, #30
   89004:	4b77      	ldr	r3, [pc, #476]	; (891e4 <cl_event_handler+0x360>)
   89006:	4798      	blx	r3
	if(dtemp == 1){
   89008:	4b75      	ldr	r3, [pc, #468]	; (891e0 <cl_event_handler+0x35c>)
   8900a:	881b      	ldrh	r3, [r3, #0]
   8900c:	2b01      	cmp	r3, #1
   8900e:	d113      	bne.n	89038 <cl_event_handler+0x1b4>
		
		dtemp == 0;
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   89010:	4b75      	ldr	r3, [pc, #468]	; (891e8 <cl_event_handler+0x364>)
   89012:	781b      	ldrb	r3, [r3, #0]
   89014:	2b0a      	cmp	r3, #10
   89016:	d80f      	bhi.n	89038 <cl_event_handler+0x1b4>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL ;
   89018:	4b73      	ldr	r3, [pc, #460]	; (891e8 <cl_event_handler+0x364>)
   8901a:	781b      	ldrb	r3, [r3, #0]
   8901c:	461a      	mov	r2, r3
   8901e:	4b72      	ldr	r3, [pc, #456]	; (891e8 <cl_event_handler+0x364>)
   89020:	4413      	add	r3, r2
   89022:	225c      	movs	r2, #92	; 0x5c
   89024:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   89026:	4b70      	ldr	r3, [pc, #448]	; (891e8 <cl_event_handler+0x364>)
   89028:	2201      	movs	r2, #1
   8902a:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   8902c:	4b6e      	ldr	r3, [pc, #440]	; (891e8 <cl_event_handler+0x364>)
   8902e:	781b      	ldrb	r3, [r3, #0]
   89030:	3301      	adds	r3, #1
   89032:	b2da      	uxtb	r2, r3
   89034:	4b6c      	ldr	r3, [pc, #432]	; (891e8 <cl_event_handler+0x364>)
   89036:	701a      	strb	r2, [r3, #0]
		
		//Treatdata[ID_bloodrate] - 10 ;
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_INC_M , &itemp);
   89038:	496c      	ldr	r1, [pc, #432]	; (891ec <cl_event_handler+0x368>)
   8903a:	201d      	movs	r0, #29
   8903c:	4b69      	ldr	r3, [pc, #420]	; (891e4 <cl_event_handler+0x360>)
   8903e:	4798      	blx	r3
	if(itemp == 1){
   89040:	4b6a      	ldr	r3, [pc, #424]	; (891ec <cl_event_handler+0x368>)
   89042:	881b      	ldrh	r3, [r3, #0]
   89044:	2b01      	cmp	r3, #1
   89046:	d113      	bne.n	89070 <cl_event_handler+0x1ec>
		
		itemp == 0;
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   89048:	4b67      	ldr	r3, [pc, #412]	; (891e8 <cl_event_handler+0x364>)
   8904a:	781b      	ldrb	r3, [r3, #0]
   8904c:	2b0a      	cmp	r3, #10
   8904e:	d80f      	bhi.n	89070 <cl_event_handler+0x1ec>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL ;
   89050:	4b65      	ldr	r3, [pc, #404]	; (891e8 <cl_event_handler+0x364>)
   89052:	781b      	ldrb	r3, [r3, #0]
   89054:	461a      	mov	r2, r3
   89056:	4b64      	ldr	r3, [pc, #400]	; (891e8 <cl_event_handler+0x364>)
   89058:	4413      	add	r3, r2
   8905a:	225b      	movs	r2, #91	; 0x5b
   8905c:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   8905e:	4b62      	ldr	r3, [pc, #392]	; (891e8 <cl_event_handler+0x364>)
   89060:	2201      	movs	r2, #1
   89062:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   89064:	4b60      	ldr	r3, [pc, #384]	; (891e8 <cl_event_handler+0x364>)
   89066:	781b      	ldrb	r3, [r3, #0]
   89068:	3301      	adds	r3, #1
   8906a:	b2da      	uxtb	r2, r3
   8906c:	4b5e      	ldr	r3, [pc, #376]	; (891e8 <cl_event_handler+0x364>)
   8906e:	701a      	strb	r2, [r3, #0]
		//Treatdata[ID_bloodrate] + 10 ;
		
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_ON_OFF_M , &bptemp);
   89070:	495f      	ldr	r1, [pc, #380]	; (891f0 <cl_event_handler+0x36c>)
   89072:	201f      	movs	r0, #31
   89074:	4b5b      	ldr	r3, [pc, #364]	; (891e4 <cl_event_handler+0x360>)
   89076:	4798      	blx	r3
	
	if(bptemp == 1){
   89078:	4b5d      	ldr	r3, [pc, #372]	; (891f0 <cl_event_handler+0x36c>)
   8907a:	881b      	ldrh	r3, [r3, #0]
   8907c:	2b01      	cmp	r3, #1
   8907e:	d135      	bne.n	890ec <cl_event_handler+0x268>
		
		if(prev_bpstate == 0 ){
   89080:	4b5c      	ldr	r3, [pc, #368]	; (891f4 <cl_event_handler+0x370>)
   89082:	881b      	ldrh	r3, [r3, #0]
   89084:	2b00      	cmp	r3, #0
   89086:	d117      	bne.n	890b8 <cl_event_handler+0x234>
			
			bptemp = 0;
   89088:	4b59      	ldr	r3, [pc, #356]	; (891f0 <cl_event_handler+0x36c>)
   8908a:	2200      	movs	r2, #0
   8908c:	801a      	strh	r2, [r3, #0]
			prev_bpstate == 1;
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8908e:	4b56      	ldr	r3, [pc, #344]	; (891e8 <cl_event_handler+0x364>)
   89090:	781b      	ldrb	r3, [r3, #0]
   89092:	2b0a      	cmp	r3, #10
   89094:	d82a      	bhi.n	890ec <cl_event_handler+0x268>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON ;
   89096:	4b54      	ldr	r3, [pc, #336]	; (891e8 <cl_event_handler+0x364>)
   89098:	781b      	ldrb	r3, [r3, #0]
   8909a:	461a      	mov	r2, r3
   8909c:	4b52      	ldr	r3, [pc, #328]	; (891e8 <cl_event_handler+0x364>)
   8909e:	4413      	add	r3, r2
   890a0:	220a      	movs	r2, #10
   890a2:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   890a4:	4b50      	ldr	r3, [pc, #320]	; (891e8 <cl_event_handler+0x364>)
   890a6:	2201      	movs	r2, #1
   890a8:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   890aa:	4b4f      	ldr	r3, [pc, #316]	; (891e8 <cl_event_handler+0x364>)
   890ac:	781b      	ldrb	r3, [r3, #0]
   890ae:	3301      	adds	r3, #1
   890b0:	b2da      	uxtb	r2, r3
   890b2:	4b4d      	ldr	r3, [pc, #308]	; (891e8 <cl_event_handler+0x364>)
   890b4:	701a      	strb	r2, [r3, #0]
   890b6:	e019      	b.n	890ec <cl_event_handler+0x268>
			
			
		}
		else {
			
			bptemp =0;
   890b8:	4b4d      	ldr	r3, [pc, #308]	; (891f0 <cl_event_handler+0x36c>)
   890ba:	2200      	movs	r2, #0
   890bc:	801a      	strh	r2, [r3, #0]
			prev_bpstate = 0;
   890be:	4b4d      	ldr	r3, [pc, #308]	; (891f4 <cl_event_handler+0x370>)
   890c0:	2200      	movs	r2, #0
   890c2:	801a      	strh	r2, [r3, #0]
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   890c4:	4b48      	ldr	r3, [pc, #288]	; (891e8 <cl_event_handler+0x364>)
   890c6:	781b      	ldrb	r3, [r3, #0]
   890c8:	2b0a      	cmp	r3, #10
   890ca:	d80f      	bhi.n	890ec <cl_event_handler+0x268>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF ;
   890cc:	4b46      	ldr	r3, [pc, #280]	; (891e8 <cl_event_handler+0x364>)
   890ce:	781b      	ldrb	r3, [r3, #0]
   890d0:	461a      	mov	r2, r3
   890d2:	4b45      	ldr	r3, [pc, #276]	; (891e8 <cl_event_handler+0x364>)
   890d4:	4413      	add	r3, r2
   890d6:	220b      	movs	r2, #11
   890d8:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   890da:	4b43      	ldr	r3, [pc, #268]	; (891e8 <cl_event_handler+0x364>)
   890dc:	2201      	movs	r2, #1
   890de:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   890e0:	4b41      	ldr	r3, [pc, #260]	; (891e8 <cl_event_handler+0x364>)
   890e2:	781b      	ldrb	r3, [r3, #0]
   890e4:	3301      	adds	r3, #1
   890e6:	b2da      	uxtb	r2, r3
   890e8:	4b3f      	ldr	r3, [pc, #252]	; (891e8 <cl_event_handler+0x364>)
   890ea:	701a      	strb	r2, [r3, #0]
	
	
	
	
	
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);    // commented on 17082017, we dont need this controller handler any more
   890ec:	2001      	movs	r0, #1
   890ee:	4b42      	ldr	r3, [pc, #264]	; (891f8 <cl_event_handler+0x374>)
   890f0:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   890f2:	2001      	movs	r0, #1
   890f4:	4b41      	ldr	r3, [pc, #260]	; (891fc <cl_event_handler+0x378>)
   890f6:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   890f8:	4b41      	ldr	r3, [pc, #260]	; (89200 <cl_event_handler+0x37c>)
   890fa:	4798      	blx	r3
		cl_hep_pump_enddetction_timer();
   890fc:	4b41      	ldr	r3, [pc, #260]	; (89204 <cl_event_handler+0x380>)
   890fe:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   89100:	e061      	b.n	891c6 <cl_event_handler+0x342>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   89102:	f04f 0100 	mov.w	r1, #0
   89106:	2001      	movs	r0, #1
   89108:	4b3f      	ldr	r3, [pc, #252]	; (89208 <cl_event_handler+0x384>)
   8910a:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   8910c:	2001      	movs	r0, #1
   8910e:	4b33      	ldr	r3, [pc, #204]	; (891dc <cl_event_handler+0x358>)
   89110:	4798      	blx	r3
		if(  toggle_500)
   89112:	4b3e      	ldr	r3, [pc, #248]	; (8920c <cl_event_handler+0x388>)
   89114:	781b      	ldrb	r3, [r3, #0]
   89116:	2b00      	cmp	r3, #0
   89118:	d003      	beq.n	89122 <cl_event_handler+0x29e>
		{
			toggle_500 = false;
   8911a:	4b3c      	ldr	r3, [pc, #240]	; (8920c <cl_event_handler+0x388>)
   8911c:	2200      	movs	r2, #0
   8911e:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   89120:	e051      	b.n	891c6 <cl_event_handler+0x342>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   89122:	4b3a      	ldr	r3, [pc, #232]	; (8920c <cl_event_handler+0x388>)
   89124:	2201      	movs	r2, #1
   89126:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   89128:	e04d      	b.n	891c6 <cl_event_handler+0x342>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   8912a:	2001      	movs	r0, #1
   8912c:	4b28      	ldr	r3, [pc, #160]	; (891d0 <cl_event_handler+0x34c>)
   8912e:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   89130:	2003      	movs	r0, #3
   89132:	4b28      	ldr	r3, [pc, #160]	; (891d4 <cl_event_handler+0x350>)
   89134:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   89136:	2100      	movs	r1, #0
   89138:	200b      	movs	r0, #11
   8913a:	4b35      	ldr	r3, [pc, #212]	; (89210 <cl_event_handler+0x38c>)
   8913c:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   8913e:	2100      	movs	r1, #0
   89140:	200d      	movs	r0, #13
   89142:	4b34      	ldr	r3, [pc, #208]	; (89214 <cl_event_handler+0x390>)
   89144:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   89146:	2002      	movs	r0, #2
   89148:	4b24      	ldr	r3, [pc, #144]	; (891dc <cl_event_handler+0x358>)
   8914a:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   8914c:	f04f 0100 	mov.w	r1, #0
   89150:	2002      	movs	r0, #2
   89152:	4b2d      	ldr	r3, [pc, #180]	; (89208 <cl_event_handler+0x384>)
   89154:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   89156:	2002      	movs	r0, #2
   89158:	4b2f      	ldr	r3, [pc, #188]	; (89218 <cl_event_handler+0x394>)
   8915a:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   8915c:	4b2f      	ldr	r3, [pc, #188]	; (8921c <cl_event_handler+0x398>)
   8915e:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   89160:	4b2f      	ldr	r3, [pc, #188]	; (89220 <cl_event_handler+0x39c>)
   89162:	781b      	ldrb	r3, [r3, #0]
   89164:	3301      	adds	r3, #1
   89166:	b2da      	uxtb	r2, r3
   89168:	4b2d      	ldr	r3, [pc, #180]	; (89220 <cl_event_handler+0x39c>)
   8916a:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   8916c:	4b2d      	ldr	r3, [pc, #180]	; (89224 <cl_event_handler+0x3a0>)
   8916e:	781b      	ldrb	r3, [r3, #0]
   89170:	f083 0301 	eor.w	r3, r3, #1
   89174:	b2db      	uxtb	r3, r3
   89176:	2b00      	cmp	r3, #0
   89178:	d005      	beq.n	89186 <cl_event_handler+0x302>
		{
		SV_CAN_READ_HEMO(); // disabled for testing
   8917a:	4b2b      	ldr	r3, [pc, #172]	; (89228 <cl_event_handler+0x3a4>)
   8917c:	4798      	blx	r3
		
			toggle = true;
   8917e:	4b29      	ldr	r3, [pc, #164]	; (89224 <cl_event_handler+0x3a0>)
   89180:	2201      	movs	r2, #1
   89182:	701a      	strb	r2, [r3, #0]
   89184:	e00b      	b.n	8919e <cl_event_handler+0x31a>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   89186:	4b29      	ldr	r3, [pc, #164]	; (8922c <cl_event_handler+0x3a8>)
   89188:	4798      	blx	r3
			toggle = false;
   8918a:	4b26      	ldr	r3, [pc, #152]	; (89224 <cl_event_handler+0x3a0>)
   8918c:	2200      	movs	r2, #0
   8918e:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   89190:	4b23      	ldr	r3, [pc, #140]	; (89220 <cl_event_handler+0x39c>)
   89192:	781b      	ldrb	r3, [r3, #0]
   89194:	2b0a      	cmp	r3, #10
   89196:	d102      	bne.n	8919e <cl_event_handler+0x31a>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   89198:	4b21      	ldr	r3, [pc, #132]	; (89220 <cl_event_handler+0x39c>)
   8919a:	2200      	movs	r2, #0
   8919c:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   8919e:	4b24      	ldr	r3, [pc, #144]	; (89230 <cl_event_handler+0x3ac>)
   891a0:	681b      	ldr	r3, [r3, #0]
   891a2:	3301      	adds	r3, #1
   891a4:	4a22      	ldr	r2, [pc, #136]	; (89230 <cl_event_handler+0x3ac>)
   891a6:	6013      	str	r3, [r2, #0]
		}
		
		break;
   891a8:	e00d      	b.n	891c6 <cl_event_handler+0x342>
		case EVT_TICK_MIN:
		{
			//Cl_SysStat_mean_status_update();
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   891aa:	2002      	movs	r0, #2
   891ac:	4b12      	ldr	r3, [pc, #72]	; (891f8 <cl_event_handler+0x374>)
   891ae:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   891b0:	e009      	b.n	891c6 <cl_event_handler+0x342>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   891b2:	2003      	movs	r0, #3
   891b4:	4b09      	ldr	r3, [pc, #36]	; (891dc <cl_event_handler+0x358>)
   891b6:	4798      	blx	r3
		break;
   891b8:	e005      	b.n	891c6 <cl_event_handler+0x342>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   891ba:	79fb      	ldrb	r3, [r7, #7]
   891bc:	4618      	mov	r0, r3
   891be:	4b1d      	ldr	r3, [pc, #116]	; (89234 <cl_event_handler+0x3b0>)
   891c0:	4798      	blx	r3
		break;
   891c2:	e000      	b.n	891c6 <cl_event_handler+0x342>
		default:
		break;
   891c4:	bf00      	nop
	}
	
	return 0;
   891c6:	2300      	movs	r3, #0
}
   891c8:	4618      	mov	r0, r3
   891ca:	3710      	adds	r7, #16
   891cc:	46bd      	mov	sp, r7
   891ce:	bd80      	pop	{r7, pc}
   891d0:	00094175 	.word	0x00094175
   891d4:	00093665 	.word	0x00093665
   891d8:	00093f01 	.word	0x00093f01
   891dc:	000832a1 	.word	0x000832a1
   891e0:	2007198a 	.word	0x2007198a
   891e4:	0008e6a1 	.word	0x0008e6a1
   891e8:	20072190 	.word	0x20072190
   891ec:	2007198c 	.word	0x2007198c
   891f0:	2007198e 	.word	0x2007198e
   891f4:	20071990 	.word	0x20071990
   891f8:	0008fd71 	.word	0x0008fd71
   891fc:	0008f969 	.word	0x0008f969
   89200:	000933d1 	.word	0x000933d1
   89204:	000940d5 	.word	0x000940d5
   89208:	000892f9 	.word	0x000892f9
   8920c:	20071998 	.word	0x20071998
   89210:	000883f1 	.word	0x000883f1
   89214:	00093861 	.word	0x00093861
   89218:	0008f759 	.word	0x0008f759
   8921c:	0008eaa1 	.word	0x0008eaa1
   89220:	20071999 	.word	0x20071999
   89224:	2007199a 	.word	0x2007199a
   89228:	00099925 	.word	0x00099925
   8922c:	0009995d 	.word	0x0009995d
   89230:	20071994 	.word	0x20071994
   89234:	00084a69 	.word	0x00084a69

00089238 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   89238:	b5f0      	push	{r4, r5, r6, r7, lr}
   8923a:	b083      	sub	sp, #12
   8923c:	af00      	add	r7, sp, #0
   8923e:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   89240:	4b25      	ldr	r3, [pc, #148]	; (892d8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   89242:	681a      	ldr	r2, [r3, #0]
   89244:	4b25      	ldr	r3, [pc, #148]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   89246:	4610      	mov	r0, r2
   89248:	4798      	blx	r3
   8924a:	4605      	mov	r5, r0
   8924c:	460e      	mov	r6, r1
   8924e:	4b24      	ldr	r3, [pc, #144]	; (892e0 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89250:	681a      	ldr	r2, [r3, #0]
   89252:	4b22      	ldr	r3, [pc, #136]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   89254:	4610      	mov	r0, r2
   89256:	4798      	blx	r3
   89258:	4c22      	ldr	r4, [pc, #136]	; (892e4 <Cl_Heater_GetHeaterStableStatus+0xac>)
   8925a:	a31d      	add	r3, pc, #116	; (adr r3, 892d0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   8925c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89260:	47a0      	blx	r4
   89262:	4603      	mov	r3, r0
   89264:	460c      	mov	r4, r1
   89266:	461a      	mov	r2, r3
   89268:	4623      	mov	r3, r4
   8926a:	4c1f      	ldr	r4, [pc, #124]	; (892e8 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   8926c:	4628      	mov	r0, r5
   8926e:	4631      	mov	r1, r6
   89270:	47a0      	blx	r4
   89272:	4603      	mov	r3, r0
   89274:	2b00      	cmp	r3, #0
   89276:	d020      	beq.n	892ba <Cl_Heater_GetHeaterStableStatus+0x82>
   89278:	4b17      	ldr	r3, [pc, #92]	; (892d8 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   8927a:	681a      	ldr	r2, [r3, #0]
   8927c:	4b17      	ldr	r3, [pc, #92]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8927e:	4610      	mov	r0, r2
   89280:	4798      	blx	r3
   89282:	4605      	mov	r5, r0
   89284:	460e      	mov	r6, r1
   89286:	4b16      	ldr	r3, [pc, #88]	; (892e0 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89288:	681a      	ldr	r2, [r3, #0]
   8928a:	4b14      	ldr	r3, [pc, #80]	; (892dc <Cl_Heater_GetHeaterStableStatus+0xa4>)
   8928c:	4610      	mov	r0, r2
   8928e:	4798      	blx	r3
   89290:	4c16      	ldr	r4, [pc, #88]	; (892ec <Cl_Heater_GetHeaterStableStatus+0xb4>)
   89292:	a30f      	add	r3, pc, #60	; (adr r3, 892d0 <Cl_Heater_GetHeaterStableStatus+0x98>)
   89294:	e9d3 2300 	ldrd	r2, r3, [r3]
   89298:	47a0      	blx	r4
   8929a:	4603      	mov	r3, r0
   8929c:	460c      	mov	r4, r1
   8929e:	461a      	mov	r2, r3
   892a0:	4623      	mov	r3, r4
   892a2:	4c13      	ldr	r4, [pc, #76]	; (892f0 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   892a4:	4628      	mov	r0, r5
   892a6:	4631      	mov	r1, r6
   892a8:	47a0      	blx	r4
   892aa:	4603      	mov	r3, r0
   892ac:	2b00      	cmp	r3, #0
   892ae:	d004      	beq.n	892ba <Cl_Heater_GetHeaterStableStatus+0x82>
	{
		*Stable =  cl_temp3_stable;
   892b0:	4b10      	ldr	r3, [pc, #64]	; (892f4 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   892b2:	781a      	ldrb	r2, [r3, #0]
   892b4:	687b      	ldr	r3, [r7, #4]
   892b6:	701a      	strb	r2, [r3, #0]
   892b8:	e002      	b.n	892c0 <Cl_Heater_GetHeaterStableStatus+0x88>
	}
	else
	{
		*Stable =  false;
   892ba:	687b      	ldr	r3, [r7, #4]
   892bc:	2200      	movs	r2, #0
   892be:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   892c0:	2300      	movs	r3, #0
}
   892c2:	4618      	mov	r0, r3
   892c4:	370c      	adds	r7, #12
   892c6:	46bd      	mov	sp, r7
   892c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   892ca:	bf00      	nop
   892cc:	f3af 8000 	nop.w
   892d0:	9999999a 	.word	0x9999999a
   892d4:	3fc99999 	.word	0x3fc99999
   892d8:	200719a8 	.word	0x200719a8
   892dc:	000a5c69 	.word	0x000a5c69
   892e0:	2007053c 	.word	0x2007053c
   892e4:	000a59a9 	.word	0x000a59a9
   892e8:	000a6231 	.word	0x000a6231
   892ec:	000a59ad 	.word	0x000a59ad
   892f0:	000a61f5 	.word	0x000a61f5
   892f4:	20071c59 	.word	0x20071c59

000892f8 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   892f8:	b580      	push	{r7, lr}
   892fa:	b084      	sub	sp, #16
   892fc:	af00      	add	r7, sp, #0
   892fe:	4603      	mov	r3, r0
   89300:	6039      	str	r1, [r7, #0]
   89302:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   89304:	2300      	movs	r3, #0
   89306:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   89308:	f04f 0300 	mov.w	r3, #0
   8930c:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   8930e:	79fb      	ldrb	r3, [r7, #7]
   89310:	2b03      	cmp	r3, #3
   89312:	d01e      	beq.n	89352 <Cl_Heater_Event_Handler+0x5a>
   89314:	2b05      	cmp	r3, #5
   89316:	d010      	beq.n	8933a <Cl_Heater_Event_Handler+0x42>
   89318:	2b01      	cmp	r3, #1
   8931a:	d000      	beq.n	8931e <Cl_Heater_Event_Handler+0x26>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
	break;
	
	default:break;
   8931c:	e020      	b.n	89360 <Cl_Heater_Event_Handler+0x68>

switch(HeaterEvent)
{
	
	case CL_HEATER_EVENT_500MS:
		if (hotrinse_flag != 1)
   8931e:	4b13      	ldr	r3, [pc, #76]	; (8936c <Cl_Heater_Event_Handler+0x74>)
   89320:	781b      	ldrb	r3, [r3, #0]
   89322:	2b01      	cmp	r3, #1
   89324:	d002      	beq.n	8932c <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   89326:	4b12      	ldr	r3, [pc, #72]	; (89370 <Cl_Heater_Event_Handler+0x78>)
   89328:	4798      	blx	r3
		
		else if (hotrinse_flag ==1)
		{
			Hot_Rinse();
		}
	break;
   8932a:	e016      	b.n	8935a <Cl_Heater_Event_Handler+0x62>
		if (hotrinse_flag != 1)
		{
			Heat_Correction();
		}
		
		else if (hotrinse_flag ==1)
   8932c:	4b0f      	ldr	r3, [pc, #60]	; (8936c <Cl_Heater_Event_Handler+0x74>)
   8932e:	781b      	ldrb	r3, [r3, #0]
   89330:	2b01      	cmp	r3, #1
   89332:	d112      	bne.n	8935a <Cl_Heater_Event_Handler+0x62>
		{
			Hot_Rinse();
   89334:	4b0f      	ldr	r3, [pc, #60]	; (89374 <Cl_Heater_Event_Handler+0x7c>)
   89336:	4798      	blx	r3
		}
	break;
   89338:	e00f      	b.n	8935a <Cl_Heater_Event_Handler+0x62>
	
	case CL_HEATER_EVENT_TARGET_TEMP:
		prescribed_temp = data;
   8933a:	4a0f      	ldr	r2, [pc, #60]	; (89378 <Cl_Heater_Event_Handler+0x80>)
   8933c:	683b      	ldr	r3, [r7, #0]
   8933e:	6013      	str	r3, [r2, #0]
		if (hotrinse_flag == 1)
   89340:	4b0a      	ldr	r3, [pc, #40]	; (8936c <Cl_Heater_Event_Handler+0x74>)
   89342:	781b      	ldrb	r3, [r3, #0]
   89344:	2b01      	cmp	r3, #1
   89346:	d10a      	bne.n	8935e <Cl_Heater_Event_Handler+0x66>
		{
			avg_duty = 4000;
   89348:	4b0c      	ldr	r3, [pc, #48]	; (8937c <Cl_Heater_Event_Handler+0x84>)
   8934a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   8934e:	801a      	strh	r2, [r3, #0]
		}
 	break;
   89350:	e005      	b.n	8935e <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
   89352:	4b0b      	ldr	r3, [pc, #44]	; (89380 <Cl_Heater_Event_Handler+0x88>)
   89354:	2200      	movs	r2, #0
   89356:	701a      	strb	r2, [r3, #0]
	break;
   89358:	e002      	b.n	89360 <Cl_Heater_Event_Handler+0x68>
		
		else if (hotrinse_flag ==1)
		{
			Hot_Rinse();
		}
	break;
   8935a:	bf00      	nop
   8935c:	e000      	b.n	89360 <Cl_Heater_Event_Handler+0x68>
		prescribed_temp = data;
		if (hotrinse_flag == 1)
		{
			avg_duty = 4000;
		}
 	break;
   8935e:	bf00      	nop
	break;
	
	default:break;
}
	
	return (Cl_heeater_retcode);
   89360:	7bfb      	ldrb	r3, [r7, #15]
}
   89362:	4618      	mov	r0, r3
   89364:	3710      	adds	r7, #16
   89366:	46bd      	mov	sp, r7
   89368:	bd80      	pop	{r7, pc}
   8936a:	bf00      	nop
   8936c:	20071cb1 	.word	0x20071cb1
   89370:	00089729 	.word	0x00089729
   89374:	0008b4dd 	.word	0x0008b4dd
   89378:	2007053c 	.word	0x2007053c
   8937c:	2007199e 	.word	0x2007199e
   89380:	20071c59 	.word	0x20071c59

00089384 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   89384:	b590      	push	{r4, r7, lr}
   89386:	b085      	sub	sp, #20
   89388:	af00      	add	r7, sp, #0
   8938a:	4603      	mov	r3, r0
   8938c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   8938e:	2300      	movs	r3, #0
   89390:	73fb      	strb	r3, [r7, #15]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   89392:	4b4f      	ldr	r3, [pc, #316]	; (894d0 <SetHeaterState+0x14c>)
   89394:	781a      	ldrb	r2, [r3, #0]
   89396:	4b4f      	ldr	r3, [pc, #316]	; (894d4 <SetHeaterState+0x150>)
   89398:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   8939a:	4a4d      	ldr	r2, [pc, #308]	; (894d0 <SetHeaterState+0x14c>)
   8939c:	79fb      	ldrb	r3, [r7, #7]
   8939e:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   893a0:	79fb      	ldrb	r3, [r7, #7]
   893a2:	2b04      	cmp	r3, #4
   893a4:	d104      	bne.n	893b0 <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   893a6:	4b4c      	ldr	r3, [pc, #304]	; (894d8 <SetHeaterState+0x154>)
   893a8:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   893aa:	4b4c      	ldr	r3, [pc, #304]	; (894dc <SetHeaterState+0x158>)
   893ac:	2200      	movs	r2, #0
   893ae:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   893b0:	79fb      	ldrb	r3, [r7, #7]
   893b2:	2b01      	cmp	r3, #1
   893b4:	d105      	bne.n	893c2 <SetHeaterState+0x3e>
	{
    	cl_temp3_stable = false;
   893b6:	4b4a      	ldr	r3, [pc, #296]	; (894e0 <SetHeaterState+0x15c>)
   893b8:	2200      	movs	r2, #0
   893ba:	701a      	strb	r2, [r3, #0]
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   893bc:	4b47      	ldr	r3, [pc, #284]	; (894dc <SetHeaterState+0x158>)
   893be:	2200      	movs	r2, #0
   893c0:	701a      	strb	r2, [r3, #0]
	}	

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   893c2:	f107 030c 	add.w	r3, r7, #12
   893c6:	4619      	mov	r1, r3
   893c8:	2012      	movs	r0, #18
   893ca:	4b46      	ldr	r3, [pc, #280]	; (894e4 <SetHeaterState+0x160>)
   893cc:	4798      	blx	r3

	if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   893ce:	79fb      	ldrb	r3, [r7, #7]
   893d0:	2b02      	cmp	r3, #2
   893d2:	f000 80e1 	beq.w	89598 <SetHeaterState+0x214>
   893d6:	79fb      	ldrb	r3, [r7, #7]
   893d8:	2b03      	cmp	r3, #3
   893da:	f000 80dd 	beq.w	89598 <SetHeaterState+0x214>
	{
					
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/10)/10;
   893de:	4b42      	ldr	r3, [pc, #264]	; (894e8 <SetHeaterState+0x164>)
   893e0:	681a      	ldr	r2, [r3, #0]
   893e2:	4b42      	ldr	r3, [pc, #264]	; (894ec <SetHeaterState+0x168>)
   893e4:	4942      	ldr	r1, [pc, #264]	; (894f0 <SetHeaterState+0x16c>)
   893e6:	4610      	mov	r0, r2
   893e8:	4798      	blx	r3
   893ea:	4603      	mov	r3, r0
   893ec:	461c      	mov	r4, r3
   893ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   893f2:	4b40      	ldr	r3, [pc, #256]	; (894f4 <SetHeaterState+0x170>)
   893f4:	4610      	mov	r0, r2
   893f6:	4798      	blx	r3
   893f8:	4602      	mov	r2, r0
   893fa:	4b3f      	ldr	r3, [pc, #252]	; (894f8 <SetHeaterState+0x174>)
   893fc:	493f      	ldr	r1, [pc, #252]	; (894fc <SetHeaterState+0x178>)
   893fe:	4610      	mov	r0, r2
   89400:	4798      	blx	r3
   89402:	4603      	mov	r3, r0
   89404:	461a      	mov	r2, r3
   89406:	4b3e      	ldr	r3, [pc, #248]	; (89500 <SetHeaterState+0x17c>)
   89408:	4611      	mov	r1, r2
   8940a:	4620      	mov	r0, r4
   8940c:	4798      	blx	r3
   8940e:	4603      	mov	r3, r0
   89410:	461a      	mov	r2, r3
   89412:	4b39      	ldr	r3, [pc, #228]	; (894f8 <SetHeaterState+0x174>)
   89414:	4939      	ldr	r1, [pc, #228]	; (894fc <SetHeaterState+0x178>)
   89416:	4610      	mov	r0, r2
   89418:	4798      	blx	r3
   8941a:	4603      	mov	r3, r0
   8941c:	461a      	mov	r2, r3
   8941e:	4b32      	ldr	r3, [pc, #200]	; (894e8 <SetHeaterState+0x164>)
   89420:	601a      	str	r2, [r3, #0]
	 
        SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   89422:	4b38      	ldr	r3, [pc, #224]	; (89504 <SetHeaterState+0x180>)
   89424:	695b      	ldr	r3, [r3, #20]
   89426:	4a38      	ldr	r2, [pc, #224]	; (89508 <SetHeaterState+0x184>)
   89428:	6013      	str	r3, [r2, #0]
        Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   8942a:	4b36      	ldr	r3, [pc, #216]	; (89504 <SetHeaterState+0x180>)
   8942c:	699b      	ldr	r3, [r3, #24]
   8942e:	4a37      	ldr	r2, [pc, #220]	; (8950c <SetHeaterState+0x188>)
   89430:	fba2 2303 	umull	r2, r3, r2, r3
   89434:	08da      	lsrs	r2, r3, #3
   89436:	4b36      	ldr	r3, [pc, #216]	; (89510 <SetHeaterState+0x18c>)
   89438:	4610      	mov	r0, r2
   8943a:	4798      	blx	r3
   8943c:	4602      	mov	r2, r0
   8943e:	4b35      	ldr	r3, [pc, #212]	; (89514 <SetHeaterState+0x190>)
   89440:	601a      	str	r2, [r3, #0]
 
	    if (hotrinse_flag == 1)
   89442:	4b35      	ldr	r3, [pc, #212]	; (89518 <SetHeaterState+0x194>)
   89444:	781b      	ldrb	r3, [r3, #0]
   89446:	2b01      	cmp	r3, #1
   89448:	d103      	bne.n	89452 <SetHeaterState+0xce>
		{
		  avg_duty = 4000;
   8944a:	4b34      	ldr	r3, [pc, #208]	; (8951c <SetHeaterState+0x198>)
   8944c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   89450:	801a      	strh	r2, [r3, #0]
		}
		  
		if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   89452:	4b2d      	ldr	r3, [pc, #180]	; (89508 <SetHeaterState+0x184>)
   89454:	681b      	ldr	r3, [r3, #0]
   89456:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8945a:	d113      	bne.n	89484 <SetHeaterState+0x100>
		{
		  avg_duty = 2100;
   8945c:	4b2f      	ldr	r3, [pc, #188]	; (8951c <SetHeaterState+0x198>)
   8945e:	f640 0234 	movw	r2, #2100	; 0x834
   89462:	801a      	strh	r2, [r3, #0]
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   89464:	4b2e      	ldr	r3, [pc, #184]	; (89520 <SetHeaterState+0x19c>)
   89466:	22f0      	movs	r2, #240	; 0xf0
   89468:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_TS3STABILITY_300;
   8946a:	4b2e      	ldr	r3, [pc, #184]	; (89524 <SetHeaterState+0x1a0>)
   8946c:	2278      	movs	r2, #120	; 0x78
   8946e:	801a      	strh	r2, [r3, #0]
		  post_stability_count = TS2_STABILITY_COUNT_300;
   89470:	4b2d      	ldr	r3, [pc, #180]	; (89528 <SetHeaterState+0x1a4>)
   89472:	221e      	movs	r2, #30
   89474:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   89476:	4b2d      	ldr	r3, [pc, #180]	; (8952c <SetHeaterState+0x1a8>)
   89478:	223c      	movs	r2, #60	; 0x3c
   8947a:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_300;
   8947c:	4b2c      	ldr	r3, [pc, #176]	; (89530 <SetHeaterState+0x1ac>)
   8947e:	4a2d      	ldr	r2, [pc, #180]	; (89534 <SetHeaterState+0x1b0>)
   89480:	601a      	str	r2, [r3, #0]
   89482:	e084      	b.n	8958e <SetHeaterState+0x20a>
		}
		else if (SYSTEM_FLOW == 500)
   89484:	4b20      	ldr	r3, [pc, #128]	; (89508 <SetHeaterState+0x184>)
   89486:	681b      	ldr	r3, [r3, #0]
   89488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8948c:	d15a      	bne.n	89544 <SetHeaterState+0x1c0>
		{
		  avg_duty = 2300;
   8948e:	4b23      	ldr	r3, [pc, #140]	; (8951c <SetHeaterState+0x198>)
   89490:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89494:	801a      	strh	r2, [r3, #0]
		  if (Tmp1Val <= 26)
   89496:	4b14      	ldr	r3, [pc, #80]	; (894e8 <SetHeaterState+0x164>)
   89498:	681a      	ldr	r2, [r3, #0]
   8949a:	4b27      	ldr	r3, [pc, #156]	; (89538 <SetHeaterState+0x1b4>)
   8949c:	4927      	ldr	r1, [pc, #156]	; (8953c <SetHeaterState+0x1b8>)
   8949e:	4610      	mov	r0, r2
   894a0:	4798      	blx	r3
   894a2:	4603      	mov	r3, r0
   894a4:	2b00      	cmp	r3, #0
   894a6:	d003      	beq.n	894b0 <SetHeaterState+0x12c>
		  {
		   avg_duty = 2400;
   894a8:	4b1c      	ldr	r3, [pc, #112]	; (8951c <SetHeaterState+0x198>)
   894aa:	f44f 6216 	mov.w	r2, #2400	; 0x960
   894ae:	801a      	strh	r2, [r3, #0]
		  }
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   894b0:	4b1b      	ldr	r3, [pc, #108]	; (89520 <SetHeaterState+0x19c>)
   894b2:	22b4      	movs	r2, #180	; 0xb4
   894b4:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_STABILITY_500;
   894b6:	4b1b      	ldr	r3, [pc, #108]	; (89524 <SetHeaterState+0x1a0>)
   894b8:	22b4      	movs	r2, #180	; 0xb4
   894ba:	801a      	strh	r2, [r3, #0]
		  post_stability_count =  TS2_STABILITY_COUNT_500;
   894bc:	4b1a      	ldr	r3, [pc, #104]	; (89528 <SetHeaterState+0x1a4>)
   894be:	221e      	movs	r2, #30
   894c0:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   894c2:	4b1a      	ldr	r3, [pc, #104]	; (8952c <SetHeaterState+0x1a8>)
   894c4:	223c      	movs	r2, #60	; 0x3c
   894c6:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_500;
   894c8:	4b19      	ldr	r3, [pc, #100]	; (89530 <SetHeaterState+0x1ac>)
   894ca:	4a1d      	ldr	r2, [pc, #116]	; (89540 <SetHeaterState+0x1bc>)
   894cc:	601a      	str	r2, [r3, #0]
   894ce:	e05e      	b.n	8958e <SetHeaterState+0x20a>
   894d0:	2007199b 	.word	0x2007199b
   894d4:	2007199c 	.word	0x2007199c
   894d8:	00099a95 	.word	0x00099a95
   894dc:	200719a0 	.word	0x200719a0
   894e0:	20071c59 	.word	0x20071c59
   894e4:	0008e6a1 	.word	0x0008e6a1
   894e8:	200719ac 	.word	0x200719ac
   894ec:	000a6591 	.word	0x000a6591
   894f0:	41100000 	.word	0x41100000
   894f4:	000a64e9 	.word	0x000a64e9
   894f8:	000a66f9 	.word	0x000a66f9
   894fc:	41200000 	.word	0x41200000
   89500:	000a6381 	.word	0x000a6381
   89504:	20072654 	.word	0x20072654
   89508:	20070548 	.word	0x20070548
   8950c:	cccccccd 	.word	0xcccccccd
   89510:	000a64e1 	.word	0x000a64e1
   89514:	20072178 	.word	0x20072178
   89518:	20071cb1 	.word	0x20071cb1
   8951c:	2007199e 	.word	0x2007199e
   89520:	20070540 	.word	0x20070540
   89524:	20070542 	.word	0x20070542
   89528:	200719c0 	.word	0x200719c0
   8952c:	200719c2 	.word	0x200719c2
   89530:	2007218c 	.word	0x2007218c
   89534:	42200000 	.word	0x42200000
   89538:	000a68e1 	.word	0x000a68e1
   8953c:	41d00000 	.word	0x41d00000
   89540:	421c0000 	.word	0x421c0000
		}
		else if (SYSTEM_FLOW == 800)
   89544:	4b5f      	ldr	r3, [pc, #380]	; (896c4 <SetHeaterState+0x340>)
   89546:	681b      	ldr	r3, [r3, #0]
   89548:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8954c:	d11f      	bne.n	8958e <SetHeaterState+0x20a>
		{
			avg_duty = 2300;
   8954e:	4b5e      	ldr	r3, [pc, #376]	; (896c8 <SetHeaterState+0x344>)
   89550:	f640 02fc 	movw	r2, #2300	; 0x8fc
   89554:	801a      	strh	r2, [r3, #0]
			if (Tmp1Val <= 26)
   89556:	4b5d      	ldr	r3, [pc, #372]	; (896cc <SetHeaterState+0x348>)
   89558:	681a      	ldr	r2, [r3, #0]
   8955a:	4b5d      	ldr	r3, [pc, #372]	; (896d0 <SetHeaterState+0x34c>)
   8955c:	495d      	ldr	r1, [pc, #372]	; (896d4 <SetHeaterState+0x350>)
   8955e:	4610      	mov	r0, r2
   89560:	4798      	blx	r3
   89562:	4603      	mov	r3, r0
   89564:	2b00      	cmp	r3, #0
   89566:	d003      	beq.n	89570 <SetHeaterState+0x1ec>
			{
				avg_duty = 2400;
   89568:	4b57      	ldr	r3, [pc, #348]	; (896c8 <SetHeaterState+0x344>)
   8956a:	f44f 6216 	mov.w	r2, #2400	; 0x960
   8956e:	801a      	strh	r2, [r3, #0]
			}
			wait_4_TS2Stability = WAIT_4_TS2STABILITY_800;
   89570:	4b59      	ldr	r3, [pc, #356]	; (896d8 <SetHeaterState+0x354>)
   89572:	22b4      	movs	r2, #180	; 0xb4
   89574:	801a      	strh	r2, [r3, #0]
			wait_4_stability = WAIT_4_STABILITY_800;
   89576:	4b59      	ldr	r3, [pc, #356]	; (896dc <SetHeaterState+0x358>)
   89578:	22b4      	movs	r2, #180	; 0xb4
   8957a:	801a      	strh	r2, [r3, #0]
			post_stability_count =  TS2_STABILITY_COUNT_800;
   8957c:	4b58      	ldr	r3, [pc, #352]	; (896e0 <SetHeaterState+0x35c>)
   8957e:	221e      	movs	r2, #30
   89580:	801a      	strh	r2, [r3, #0]
			TS3_post_stability_count = TS3_STABILITY_COUNT_800;
   89582:	4b58      	ldr	r3, [pc, #352]	; (896e4 <SetHeaterState+0x360>)
   89584:	223c      	movs	r2, #60	; 0x3c
   89586:	801a      	strh	r2, [r3, #0]
			Prescribed_T2 = PRESCRIBED_TS2_800;
   89588:	4b57      	ldr	r3, [pc, #348]	; (896e8 <SetHeaterState+0x364>)
   8958a:	4a58      	ldr	r2, [pc, #352]	; (896ec <SetHeaterState+0x368>)
   8958c:	601a      	str	r2, [r3, #0]
		}
			
		avg_duty = avg_duty ;
   8958e:	4b4e      	ldr	r3, [pc, #312]	; (896c8 <SetHeaterState+0x344>)
   89590:	f9b3 2000 	ldrsh.w	r2, [r3]
   89594:	4b4c      	ldr	r3, [pc, #304]	; (896c8 <SetHeaterState+0x344>)
   89596:	801a      	strh	r2, [r3, #0]
 	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89598:	f107 030c 	add.w	r3, r7, #12
   8959c:	4619      	mov	r1, r3
   8959e:	2012      	movs	r0, #18
   895a0:	4b53      	ldr	r3, [pc, #332]	; (896f0 <SetHeaterState+0x36c>)
   895a2:	4798      	blx	r3
    {
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   895a4:	4b49      	ldr	r3, [pc, #292]	; (896cc <SetHeaterState+0x348>)
   895a6:	681a      	ldr	r2, [r3, #0]
   895a8:	4b52      	ldr	r3, [pc, #328]	; (896f4 <SetHeaterState+0x370>)
   895aa:	4953      	ldr	r1, [pc, #332]	; (896f8 <SetHeaterState+0x374>)
   895ac:	4610      	mov	r0, r2
   895ae:	4798      	blx	r3
   895b0:	4603      	mov	r3, r0
   895b2:	461c      	mov	r4, r3
   895b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   895b8:	4b50      	ldr	r3, [pc, #320]	; (896fc <SetHeaterState+0x378>)
   895ba:	4610      	mov	r0, r2
   895bc:	4798      	blx	r3
   895be:	4602      	mov	r2, r0
   895c0:	4b4f      	ldr	r3, [pc, #316]	; (89700 <SetHeaterState+0x37c>)
   895c2:	4950      	ldr	r1, [pc, #320]	; (89704 <SetHeaterState+0x380>)
   895c4:	4610      	mov	r0, r2
   895c6:	4798      	blx	r3
   895c8:	4603      	mov	r3, r0
   895ca:	461a      	mov	r2, r3
   895cc:	4b4e      	ldr	r3, [pc, #312]	; (89708 <SetHeaterState+0x384>)
   895ce:	4611      	mov	r1, r2
   895d0:	4620      	mov	r0, r4
   895d2:	4798      	blx	r3
   895d4:	4603      	mov	r3, r0
   895d6:	461a      	mov	r2, r3
   895d8:	4b49      	ldr	r3, [pc, #292]	; (89700 <SetHeaterState+0x37c>)
   895da:	494c      	ldr	r1, [pc, #304]	; (8970c <SetHeaterState+0x388>)
   895dc:	4610      	mov	r0, r2
   895de:	4798      	blx	r3
   895e0:	4603      	mov	r3, r0
   895e2:	461a      	mov	r2, r3
   895e4:	4b39      	ldr	r3, [pc, #228]	; (896cc <SetHeaterState+0x348>)
   895e6:	601a      	str	r2, [r3, #0]
	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   895e8:	f107 030c 	add.w	r3, r7, #12
   895ec:	4619      	mov	r1, r3
   895ee:	2013      	movs	r0, #19
   895f0:	4b3f      	ldr	r3, [pc, #252]	; (896f0 <SetHeaterState+0x36c>)
   895f2:	4798      	blx	r3
	{
	   Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   895f4:	4b46      	ldr	r3, [pc, #280]	; (89710 <SetHeaterState+0x38c>)
   895f6:	681a      	ldr	r2, [r3, #0]
   895f8:	4b3e      	ldr	r3, [pc, #248]	; (896f4 <SetHeaterState+0x370>)
   895fa:	493f      	ldr	r1, [pc, #252]	; (896f8 <SetHeaterState+0x374>)
   895fc:	4610      	mov	r0, r2
   895fe:	4798      	blx	r3
   89600:	4603      	mov	r3, r0
   89602:	461c      	mov	r4, r3
   89604:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   89608:	4b3c      	ldr	r3, [pc, #240]	; (896fc <SetHeaterState+0x378>)
   8960a:	4610      	mov	r0, r2
   8960c:	4798      	blx	r3
   8960e:	4602      	mov	r2, r0
   89610:	4b3b      	ldr	r3, [pc, #236]	; (89700 <SetHeaterState+0x37c>)
   89612:	493c      	ldr	r1, [pc, #240]	; (89704 <SetHeaterState+0x380>)
   89614:	4610      	mov	r0, r2
   89616:	4798      	blx	r3
   89618:	4603      	mov	r3, r0
   8961a:	461a      	mov	r2, r3
   8961c:	4b3a      	ldr	r3, [pc, #232]	; (89708 <SetHeaterState+0x384>)
   8961e:	4611      	mov	r1, r2
   89620:	4620      	mov	r0, r4
   89622:	4798      	blx	r3
   89624:	4603      	mov	r3, r0
   89626:	461a      	mov	r2, r3
   89628:	4b35      	ldr	r3, [pc, #212]	; (89700 <SetHeaterState+0x37c>)
   8962a:	4938      	ldr	r1, [pc, #224]	; (8970c <SetHeaterState+0x388>)
   8962c:	4610      	mov	r0, r2
   8962e:	4798      	blx	r3
   89630:	4603      	mov	r3, r0
   89632:	461a      	mov	r2, r3
   89634:	4b36      	ldr	r3, [pc, #216]	; (89710 <SetHeaterState+0x38c>)
   89636:	601a      	str	r2, [r3, #0]
  	   prev_temp2val = Tmp2Val;
   89638:	4b35      	ldr	r3, [pc, #212]	; (89710 <SetHeaterState+0x38c>)
   8963a:	681a      	ldr	r2, [r3, #0]
   8963c:	4b35      	ldr	r3, [pc, #212]	; (89714 <SetHeaterState+0x390>)
   8963e:	4610      	mov	r0, r2
   89640:	4798      	blx	r3
   89642:	4603      	mov	r3, r0
   89644:	b21a      	sxth	r2, r3
   89646:	4b34      	ldr	r3, [pc, #208]	; (89718 <SetHeaterState+0x394>)
   89648:	801a      	strh	r2, [r3, #0]
	}
		 	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8964a:	f107 030c 	add.w	r3, r7, #12
   8964e:	4619      	mov	r1, r3
   89650:	2014      	movs	r0, #20
   89652:	4b27      	ldr	r3, [pc, #156]	; (896f0 <SetHeaterState+0x36c>)
   89654:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   89656:	4b31      	ldr	r3, [pc, #196]	; (8971c <SetHeaterState+0x398>)
   89658:	681a      	ldr	r2, [r3, #0]
   8965a:	4b26      	ldr	r3, [pc, #152]	; (896f4 <SetHeaterState+0x370>)
   8965c:	4926      	ldr	r1, [pc, #152]	; (896f8 <SetHeaterState+0x374>)
   8965e:	4610      	mov	r0, r2
   89660:	4798      	blx	r3
   89662:	4603      	mov	r3, r0
   89664:	461c      	mov	r4, r3
   89666:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   8966a:	4b24      	ldr	r3, [pc, #144]	; (896fc <SetHeaterState+0x378>)
   8966c:	4610      	mov	r0, r2
   8966e:	4798      	blx	r3
   89670:	4602      	mov	r2, r0
   89672:	4b23      	ldr	r3, [pc, #140]	; (89700 <SetHeaterState+0x37c>)
   89674:	4923      	ldr	r1, [pc, #140]	; (89704 <SetHeaterState+0x380>)
   89676:	4610      	mov	r0, r2
   89678:	4798      	blx	r3
   8967a:	4603      	mov	r3, r0
   8967c:	461a      	mov	r2, r3
   8967e:	4b22      	ldr	r3, [pc, #136]	; (89708 <SetHeaterState+0x384>)
   89680:	4611      	mov	r1, r2
   89682:	4620      	mov	r0, r4
   89684:	4798      	blx	r3
   89686:	4603      	mov	r3, r0
   89688:	461a      	mov	r2, r3
   8968a:	4b1d      	ldr	r3, [pc, #116]	; (89700 <SetHeaterState+0x37c>)
   8968c:	491f      	ldr	r1, [pc, #124]	; (8970c <SetHeaterState+0x388>)
   8968e:	4610      	mov	r0, r2
   89690:	4798      	blx	r3
   89692:	4603      	mov	r3, r0
   89694:	461a      	mov	r2, r3
   89696:	4b21      	ldr	r3, [pc, #132]	; (8971c <SetHeaterState+0x398>)
   89698:	601a      	str	r2, [r3, #0]
    	prev_temp3val = Tmp3Val;
   8969a:	4b20      	ldr	r3, [pc, #128]	; (8971c <SetHeaterState+0x398>)
   8969c:	681a      	ldr	r2, [r3, #0]
   8969e:	4b1d      	ldr	r3, [pc, #116]	; (89714 <SetHeaterState+0x390>)
   896a0:	4610      	mov	r0, r2
   896a2:	4798      	blx	r3
   896a4:	4603      	mov	r3, r0
   896a6:	b21a      	sxth	r2, r3
   896a8:	4b1d      	ldr	r3, [pc, #116]	; (89720 <SetHeaterState+0x39c>)
   896aa:	801a      	strh	r2, [r3, #0]
	}
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   896ac:	4b1d      	ldr	r3, [pc, #116]	; (89724 <SetHeaterState+0x3a0>)
   896ae:	781b      	ldrb	r3, [r3, #0]
   896b0:	2b06      	cmp	r3, #6
   896b2:	d102      	bne.n	896ba <SetHeaterState+0x336>
	{
		avg_duty = 100;
   896b4:	4b04      	ldr	r3, [pc, #16]	; (896c8 <SetHeaterState+0x344>)
   896b6:	2264      	movs	r2, #100	; 0x64
   896b8:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   896ba:	7bfb      	ldrb	r3, [r7, #15]
}
   896bc:	4618      	mov	r0, r3
   896be:	3714      	adds	r7, #20
   896c0:	46bd      	mov	sp, r7
   896c2:	bd90      	pop	{r4, r7, pc}
   896c4:	20070548 	.word	0x20070548
   896c8:	2007199e 	.word	0x2007199e
   896cc:	200719ac 	.word	0x200719ac
   896d0:	000a68e1 	.word	0x000a68e1
   896d4:	41d00000 	.word	0x41d00000
   896d8:	20070540 	.word	0x20070540
   896dc:	20070542 	.word	0x20070542
   896e0:	200719c0 	.word	0x200719c0
   896e4:	200719c2 	.word	0x200719c2
   896e8:	2007218c 	.word	0x2007218c
   896ec:	421c0000 	.word	0x421c0000
   896f0:	0008e6a1 	.word	0x0008e6a1
   896f4:	000a6591 	.word	0x000a6591
   896f8:	41100000 	.word	0x41100000
   896fc:	000a64e9 	.word	0x000a64e9
   89700:	000a66f9 	.word	0x000a66f9
   89704:	42c80000 	.word	0x42c80000
   89708:	000a6381 	.word	0x000a6381
   8970c:	41200000 	.word	0x41200000
   89710:	200719b0 	.word	0x200719b0
   89714:	000a691d 	.word	0x000a691d
   89718:	200719a2 	.word	0x200719a2
   8971c:	200719b4 	.word	0x200719b4
   89720:	200719a4 	.word	0x200719a4
   89724:	2007199b 	.word	0x2007199b

00089728 <Heat_Correction>:

int16_t Heat_Correction()
{
   89728:	b5f0      	push	{r4, r5, r6, r7, lr}
   8972a:	b083      	sub	sp, #12
   8972c:	af00      	add	r7, sp, #0
	count_500ms ++;
   8972e:	4b17      	ldr	r3, [pc, #92]	; (8978c <Heat_Correction+0x64>)
   89730:	881b      	ldrh	r3, [r3, #0]
   89732:	3301      	adds	r3, #1
   89734:	b29a      	uxth	r2, r3
   89736:	4b15      	ldr	r3, [pc, #84]	; (8978c <Heat_Correction+0x64>)
   89738:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   8973a:	4b15      	ldr	r3, [pc, #84]	; (89790 <Heat_Correction+0x68>)
   8973c:	881b      	ldrh	r3, [r3, #0]
   8973e:	3301      	adds	r3, #1
   89740:	b29a      	uxth	r2, r3
   89742:	4b13      	ldr	r3, [pc, #76]	; (89790 <Heat_Correction+0x68>)
   89744:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   89746:	4b13      	ldr	r3, [pc, #76]	; (89794 <Heat_Correction+0x6c>)
   89748:	881b      	ldrh	r3, [r3, #0]
   8974a:	3301      	adds	r3, #1
   8974c:	b29a      	uxth	r2, r3
   8974e:	4b11      	ldr	r3, [pc, #68]	; (89794 <Heat_Correction+0x6c>)
   89750:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   89752:	4b0e      	ldr	r3, [pc, #56]	; (8978c <Heat_Correction+0x64>)
   89754:	881b      	ldrh	r3, [r3, #0]
   89756:	4a10      	ldr	r2, [pc, #64]	; (89798 <Heat_Correction+0x70>)
   89758:	fba2 1203 	umull	r1, r2, r2, r3
   8975c:	0992      	lsrs	r2, r2, #6
   8975e:	f44f 7116 	mov.w	r1, #600	; 0x258
   89762:	fb01 f202 	mul.w	r2, r1, r2
   89766:	1a9b      	subs	r3, r3, r2
   89768:	b29b      	uxth	r3, r3
   8976a:	2b00      	cmp	r3, #0
   8976c:	d107      	bne.n	8977e <Heat_Correction+0x56>
	{
		Past_TS2 = Tmp2Val;
   8976e:	4b0b      	ldr	r3, [pc, #44]	; (8979c <Heat_Correction+0x74>)
   89770:	681b      	ldr	r3, [r3, #0]
   89772:	4a0b      	ldr	r2, [pc, #44]	; (897a0 <Heat_Correction+0x78>)
   89774:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   89776:	4b05      	ldr	r3, [pc, #20]	; (8978c <Heat_Correction+0x64>)
   89778:	881a      	ldrh	r2, [r3, #0]
   8977a:	4b0a      	ldr	r3, [pc, #40]	; (897a4 <Heat_Correction+0x7c>)
   8977c:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   8977e:	4b0a      	ldr	r3, [pc, #40]	; (897a8 <Heat_Correction+0x80>)
   89780:	781b      	ldrb	r3, [r3, #0]
   89782:	2b04      	cmp	r3, #4
   89784:	d114      	bne.n	897b0 <Heat_Correction+0x88>
	{
		sv_cntrl_poweroffheater();
   89786:	4b09      	ldr	r3, [pc, #36]	; (897ac <Heat_Correction+0x84>)
   89788:	4798      	blx	r3
		return;
   8978a:	e31d      	b.n	89dc8 <Heat_Correction+0x6a0>
   8978c:	200719b8 	.word	0x200719b8
   89790:	200719ba 	.word	0x200719ba
   89794:	200719bc 	.word	0x200719bc
   89798:	1b4e81b5 	.word	0x1b4e81b5
   8979c:	200719b0 	.word	0x200719b0
   897a0:	200719cc 	.word	0x200719cc
   897a4:	200719be 	.word	0x200719be
   897a8:	2007199b 	.word	0x2007199b
   897ac:	00099a95 	.word	0x00099a95
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   897b0:	4b97      	ldr	r3, [pc, #604]	; (89a10 <Heat_Correction+0x2e8>)
   897b2:	781b      	ldrb	r3, [r3, #0]
   897b4:	2b00      	cmp	r3, #0
   897b6:	f000 8306 	beq.w	89dc6 <Heat_Correction+0x69e>
   897ba:	4b95      	ldr	r3, [pc, #596]	; (89a10 <Heat_Correction+0x2e8>)
   897bc:	781b      	ldrb	r3, [r3, #0]
   897be:	2b00      	cmp	r3, #0
   897c0:	f000 8301 	beq.w	89dc6 <Heat_Correction+0x69e>
	{
		return;
	}
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   897c4:	4b92      	ldr	r3, [pc, #584]	; (89a10 <Heat_Correction+0x2e8>)
   897c6:	781b      	ldrb	r3, [r3, #0]
   897c8:	2b01      	cmp	r3, #1
   897ca:	d007      	beq.n	897dc <Heat_Correction+0xb4>
   897cc:	4b90      	ldr	r3, [pc, #576]	; (89a10 <Heat_Correction+0x2e8>)
   897ce:	781b      	ldrb	r3, [r3, #0]
   897d0:	2b02      	cmp	r3, #2
   897d2:	d003      	beq.n	897dc <Heat_Correction+0xb4>
   897d4:	4b8e      	ldr	r3, [pc, #568]	; (89a10 <Heat_Correction+0x2e8>)
   897d6:	781b      	ldrb	r3, [r3, #0]
   897d8:	2b03      	cmp	r3, #3
   897da:	d107      	bne.n	897ec <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   897dc:	4b8d      	ldr	r3, [pc, #564]	; (89a14 <Heat_Correction+0x2ec>)
   897de:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   897e0:	4b8d      	ldr	r3, [pc, #564]	; (89a18 <Heat_Correction+0x2f0>)
   897e2:	f9b3 3000 	ldrsh.w	r3, [r3]
   897e6:	4618      	mov	r0, r3
   897e8:	4b8c      	ldr	r3, [pc, #560]	; (89a1c <Heat_Correction+0x2f4>)
   897ea:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   897ec:	1dbb      	adds	r3, r7, #6
   897ee:	4619      	mov	r1, r3
   897f0:	2012      	movs	r0, #18
   897f2:	4b8b      	ldr	r3, [pc, #556]	; (89a20 <Heat_Correction+0x2f8>)
   897f4:	4798      	blx	r3
	{
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   897f6:	4b8b      	ldr	r3, [pc, #556]	; (89a24 <Heat_Correction+0x2fc>)
   897f8:	681a      	ldr	r2, [r3, #0]
   897fa:	4b8b      	ldr	r3, [pc, #556]	; (89a28 <Heat_Correction+0x300>)
   897fc:	498b      	ldr	r1, [pc, #556]	; (89a2c <Heat_Correction+0x304>)
   897fe:	4610      	mov	r0, r2
   89800:	4798      	blx	r3
   89802:	4603      	mov	r3, r0
   89804:	461c      	mov	r4, r3
   89806:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8980a:	4b89      	ldr	r3, [pc, #548]	; (89a30 <Heat_Correction+0x308>)
   8980c:	4610      	mov	r0, r2
   8980e:	4798      	blx	r3
   89810:	4602      	mov	r2, r0
   89812:	4b88      	ldr	r3, [pc, #544]	; (89a34 <Heat_Correction+0x30c>)
   89814:	4988      	ldr	r1, [pc, #544]	; (89a38 <Heat_Correction+0x310>)
   89816:	4610      	mov	r0, r2
   89818:	4798      	blx	r3
   8981a:	4603      	mov	r3, r0
   8981c:	461a      	mov	r2, r3
   8981e:	4b87      	ldr	r3, [pc, #540]	; (89a3c <Heat_Correction+0x314>)
   89820:	4611      	mov	r1, r2
   89822:	4620      	mov	r0, r4
   89824:	4798      	blx	r3
   89826:	4603      	mov	r3, r0
   89828:	461a      	mov	r2, r3
   8982a:	4b82      	ldr	r3, [pc, #520]	; (89a34 <Heat_Correction+0x30c>)
   8982c:	4984      	ldr	r1, [pc, #528]	; (89a40 <Heat_Correction+0x318>)
   8982e:	4610      	mov	r0, r2
   89830:	4798      	blx	r3
   89832:	4603      	mov	r3, r0
   89834:	461a      	mov	r2, r3
   89836:	4b7b      	ldr	r3, [pc, #492]	; (89a24 <Heat_Correction+0x2fc>)
   89838:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   8983a:	4b82      	ldr	r3, [pc, #520]	; (89a44 <Heat_Correction+0x31c>)
   8983c:	881a      	ldrh	r2, [r3, #0]
   8983e:	4b82      	ldr	r3, [pc, #520]	; (89a48 <Heat_Correction+0x320>)
   89840:	fba3 1302 	umull	r1, r3, r3, r2
   89844:	0959      	lsrs	r1, r3, #5
   89846:	460b      	mov	r3, r1
   89848:	009b      	lsls	r3, r3, #2
   8984a:	440b      	add	r3, r1
   8984c:	00db      	lsls	r3, r3, #3
   8984e:	1ad3      	subs	r3, r2, r3
   89850:	b29b      	uxth	r3, r3
   89852:	2b00      	cmp	r3, #0
   89854:	d103      	bne.n	8985e <Heat_Correction+0x136>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   89856:	4b7d      	ldr	r3, [pc, #500]	; (89a4c <Heat_Correction+0x324>)
   89858:	681b      	ldr	r3, [r3, #0]
   8985a:	4a7d      	ldr	r2, [pc, #500]	; (89a50 <Heat_Correction+0x328>)
   8985c:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8985e:	1dbb      	adds	r3, r7, #6
   89860:	4619      	mov	r1, r3
   89862:	2013      	movs	r0, #19
   89864:	4b6e      	ldr	r3, [pc, #440]	; (89a20 <Heat_Correction+0x2f8>)
   89866:	4798      	blx	r3
	{
		Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   89868:	4b78      	ldr	r3, [pc, #480]	; (89a4c <Heat_Correction+0x324>)
   8986a:	681a      	ldr	r2, [r3, #0]
   8986c:	4b6e      	ldr	r3, [pc, #440]	; (89a28 <Heat_Correction+0x300>)
   8986e:	496f      	ldr	r1, [pc, #444]	; (89a2c <Heat_Correction+0x304>)
   89870:	4610      	mov	r0, r2
   89872:	4798      	blx	r3
   89874:	4603      	mov	r3, r0
   89876:	461c      	mov	r4, r3
   89878:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8987c:	4b6c      	ldr	r3, [pc, #432]	; (89a30 <Heat_Correction+0x308>)
   8987e:	4610      	mov	r0, r2
   89880:	4798      	blx	r3
   89882:	4602      	mov	r2, r0
   89884:	4b6b      	ldr	r3, [pc, #428]	; (89a34 <Heat_Correction+0x30c>)
   89886:	496c      	ldr	r1, [pc, #432]	; (89a38 <Heat_Correction+0x310>)
   89888:	4610      	mov	r0, r2
   8988a:	4798      	blx	r3
   8988c:	4603      	mov	r3, r0
   8988e:	461a      	mov	r2, r3
   89890:	4b6a      	ldr	r3, [pc, #424]	; (89a3c <Heat_Correction+0x314>)
   89892:	4611      	mov	r1, r2
   89894:	4620      	mov	r0, r4
   89896:	4798      	blx	r3
   89898:	4603      	mov	r3, r0
   8989a:	461a      	mov	r2, r3
   8989c:	4b65      	ldr	r3, [pc, #404]	; (89a34 <Heat_Correction+0x30c>)
   8989e:	4968      	ldr	r1, [pc, #416]	; (89a40 <Heat_Correction+0x318>)
   898a0:	4610      	mov	r0, r2
   898a2:	4798      	blx	r3
   898a4:	4603      	mov	r3, r0
   898a6:	461a      	mov	r2, r3
   898a8:	4b68      	ldr	r3, [pc, #416]	; (89a4c <Heat_Correction+0x324>)
   898aa:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   898ac:	4b65      	ldr	r3, [pc, #404]	; (89a44 <Heat_Correction+0x31c>)
   898ae:	881a      	ldrh	r2, [r3, #0]
   898b0:	4b65      	ldr	r3, [pc, #404]	; (89a48 <Heat_Correction+0x320>)
   898b2:	fba3 1302 	umull	r1, r3, r3, r2
   898b6:	0919      	lsrs	r1, r3, #4
   898b8:	460b      	mov	r3, r1
   898ba:	009b      	lsls	r3, r3, #2
   898bc:	440b      	add	r3, r1
   898be:	009b      	lsls	r3, r3, #2
   898c0:	1ad3      	subs	r3, r2, r3
   898c2:	b29b      	uxth	r3, r3
   898c4:	2b00      	cmp	r3, #0
   898c6:	d103      	bne.n	898d0 <Heat_Correction+0x1a8>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   898c8:	4b62      	ldr	r3, [pc, #392]	; (89a54 <Heat_Correction+0x32c>)
   898ca:	681b      	ldr	r3, [r3, #0]
   898cc:	4a62      	ldr	r2, [pc, #392]	; (89a58 <Heat_Correction+0x330>)
   898ce:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   898d0:	1dbb      	adds	r3, r7, #6
   898d2:	4619      	mov	r1, r3
   898d4:	2014      	movs	r0, #20
   898d6:	4b52      	ldr	r3, [pc, #328]	; (89a20 <Heat_Correction+0x2f8>)
   898d8:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   898da:	4b5e      	ldr	r3, [pc, #376]	; (89a54 <Heat_Correction+0x32c>)
   898dc:	681a      	ldr	r2, [r3, #0]
   898de:	4b52      	ldr	r3, [pc, #328]	; (89a28 <Heat_Correction+0x300>)
   898e0:	4952      	ldr	r1, [pc, #328]	; (89a2c <Heat_Correction+0x304>)
   898e2:	4610      	mov	r0, r2
   898e4:	4798      	blx	r3
   898e6:	4603      	mov	r3, r0
   898e8:	461c      	mov	r4, r3
   898ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   898ee:	4b50      	ldr	r3, [pc, #320]	; (89a30 <Heat_Correction+0x308>)
   898f0:	4610      	mov	r0, r2
   898f2:	4798      	blx	r3
   898f4:	4602      	mov	r2, r0
   898f6:	4b4f      	ldr	r3, [pc, #316]	; (89a34 <Heat_Correction+0x30c>)
   898f8:	494f      	ldr	r1, [pc, #316]	; (89a38 <Heat_Correction+0x310>)
   898fa:	4610      	mov	r0, r2
   898fc:	4798      	blx	r3
   898fe:	4603      	mov	r3, r0
   89900:	461a      	mov	r2, r3
   89902:	4b4e      	ldr	r3, [pc, #312]	; (89a3c <Heat_Correction+0x314>)
   89904:	4611      	mov	r1, r2
   89906:	4620      	mov	r0, r4
   89908:	4798      	blx	r3
   8990a:	4603      	mov	r3, r0
   8990c:	461a      	mov	r2, r3
   8990e:	4b49      	ldr	r3, [pc, #292]	; (89a34 <Heat_Correction+0x30c>)
   89910:	494b      	ldr	r1, [pc, #300]	; (89a40 <Heat_Correction+0x318>)
   89912:	4610      	mov	r0, r2
   89914:	4798      	blx	r3
   89916:	4603      	mov	r3, r0
   89918:	461a      	mov	r2, r3
   8991a:	4b4e      	ldr	r3, [pc, #312]	; (89a54 <Heat_Correction+0x32c>)
   8991c:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   8991e:	4b4f      	ldr	r3, [pc, #316]	; (89a5c <Heat_Correction+0x334>)
   89920:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   89922:	4b4f      	ldr	r3, [pc, #316]	; (89a60 <Heat_Correction+0x338>)
   89924:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   89926:	4b4f      	ldr	r3, [pc, #316]	; (89a64 <Heat_Correction+0x33c>)
   89928:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   8992a:	4b4f      	ldr	r3, [pc, #316]	; (89a68 <Heat_Correction+0x340>)
   8992c:	4798      	blx	r3
   8992e:	4603      	mov	r3, r0
   89930:	461a      	mov	r2, r3
   89932:	4b4e      	ldr	r3, [pc, #312]	; (89a6c <Heat_Correction+0x344>)
   89934:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 300)
   89936:	4b4e      	ldr	r3, [pc, #312]	; (89a70 <Heat_Correction+0x348>)
   89938:	681b      	ldr	r3, [r3, #0]
   8993a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8993e:	d135      	bne.n	899ac <Heat_Correction+0x284>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89940:	4b42      	ldr	r3, [pc, #264]	; (89a4c <Heat_Correction+0x324>)
   89942:	681a      	ldr	r2, [r3, #0]
   89944:	4b4b      	ldr	r3, [pc, #300]	; (89a74 <Heat_Correction+0x34c>)
   89946:	4610      	mov	r0, r2
   89948:	4798      	blx	r3
   8994a:	4605      	mov	r5, r0
   8994c:	460e      	mov	r6, r1
   8994e:	4b4a      	ldr	r3, [pc, #296]	; (89a78 <Heat_Correction+0x350>)
   89950:	681a      	ldr	r2, [r3, #0]
   89952:	4b48      	ldr	r3, [pc, #288]	; (89a74 <Heat_Correction+0x34c>)
   89954:	4610      	mov	r0, r2
   89956:	4798      	blx	r3
   89958:	4c48      	ldr	r4, [pc, #288]	; (89a7c <Heat_Correction+0x354>)
   8995a:	f04f 0200 	mov.w	r2, #0
   8995e:	4b48      	ldr	r3, [pc, #288]	; (89a80 <Heat_Correction+0x358>)
   89960:	47a0      	blx	r4
   89962:	4603      	mov	r3, r0
   89964:	460c      	mov	r4, r1
   89966:	461a      	mov	r2, r3
   89968:	4623      	mov	r3, r4
   8996a:	4c46      	ldr	r4, [pc, #280]	; (89a84 <Heat_Correction+0x35c>)
   8996c:	4628      	mov	r0, r5
   8996e:	4631      	mov	r1, r6
   89970:	47a0      	blx	r4
   89972:	4603      	mov	r3, r0
   89974:	2b00      	cmp	r3, #0
   89976:	d019      	beq.n	899ac <Heat_Correction+0x284>
   89978:	4b36      	ldr	r3, [pc, #216]	; (89a54 <Heat_Correction+0x32c>)
   8997a:	681a      	ldr	r2, [r3, #0]
   8997c:	4b42      	ldr	r3, [pc, #264]	; (89a88 <Heat_Correction+0x360>)
   8997e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89982:	4610      	mov	r0, r2
   89984:	4798      	blx	r3
   89986:	4603      	mov	r3, r0
   89988:	2b00      	cmp	r3, #0
   8998a:	d00f      	beq.n	899ac <Heat_Correction+0x284>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   8998c:	4b2d      	ldr	r3, [pc, #180]	; (89a44 <Heat_Correction+0x31c>)
   8998e:	881a      	ldrh	r2, [r3, #0]
   89990:	4b2d      	ldr	r3, [pc, #180]	; (89a48 <Heat_Correction+0x320>)
   89992:	fba3 1302 	umull	r1, r3, r3, r2
   89996:	0919      	lsrs	r1, r3, #4
   89998:	460b      	mov	r3, r1
   8999a:	009b      	lsls	r3, r3, #2
   8999c:	440b      	add	r3, r1
   8999e:	009b      	lsls	r3, r3, #2
   899a0:	1ad3      	subs	r3, r2, r3
   899a2:	b29b      	uxth	r3, r3
   899a4:	2b00      	cmp	r3, #0
   899a6:	d101      	bne.n	899ac <Heat_Correction+0x284>
			{
				Coarse_DutyCorrection();
   899a8:	4b38      	ldr	r3, [pc, #224]	; (89a8c <Heat_Correction+0x364>)
   899aa:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 500)
   899ac:	4b30      	ldr	r3, [pc, #192]	; (89a70 <Heat_Correction+0x348>)
   899ae:	681b      	ldr	r3, [r3, #0]
   899b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   899b4:	d177      	bne.n	89aa6 <Heat_Correction+0x37e>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   899b6:	4b25      	ldr	r3, [pc, #148]	; (89a4c <Heat_Correction+0x324>)
   899b8:	681a      	ldr	r2, [r3, #0]
   899ba:	4b2e      	ldr	r3, [pc, #184]	; (89a74 <Heat_Correction+0x34c>)
   899bc:	4610      	mov	r0, r2
   899be:	4798      	blx	r3
   899c0:	4605      	mov	r5, r0
   899c2:	460e      	mov	r6, r1
   899c4:	4b2c      	ldr	r3, [pc, #176]	; (89a78 <Heat_Correction+0x350>)
   899c6:	681a      	ldr	r2, [r3, #0]
   899c8:	4b2a      	ldr	r3, [pc, #168]	; (89a74 <Heat_Correction+0x34c>)
   899ca:	4610      	mov	r0, r2
   899cc:	4798      	blx	r3
   899ce:	4c2b      	ldr	r4, [pc, #172]	; (89a7c <Heat_Correction+0x354>)
   899d0:	f04f 0200 	mov.w	r2, #0
   899d4:	4b2a      	ldr	r3, [pc, #168]	; (89a80 <Heat_Correction+0x358>)
   899d6:	47a0      	blx	r4
   899d8:	4603      	mov	r3, r0
   899da:	460c      	mov	r4, r1
   899dc:	461a      	mov	r2, r3
   899de:	4623      	mov	r3, r4
   899e0:	4c28      	ldr	r4, [pc, #160]	; (89a84 <Heat_Correction+0x35c>)
   899e2:	4628      	mov	r0, r5
   899e4:	4631      	mov	r1, r6
   899e6:	47a0      	blx	r4
   899e8:	4603      	mov	r3, r0
   899ea:	2b00      	cmp	r3, #0
   899ec:	d05b      	beq.n	89aa6 <Heat_Correction+0x37e>
   899ee:	4b19      	ldr	r3, [pc, #100]	; (89a54 <Heat_Correction+0x32c>)
   899f0:	681a      	ldr	r2, [r3, #0]
   899f2:	4b25      	ldr	r3, [pc, #148]	; (89a88 <Heat_Correction+0x360>)
   899f4:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   899f8:	4610      	mov	r0, r2
   899fa:	4798      	blx	r3
   899fc:	4603      	mov	r3, r0
   899fe:	2b00      	cmp	r3, #0
   89a00:	d051      	beq.n	89aa6 <Heat_Correction+0x37e>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89a02:	4b10      	ldr	r3, [pc, #64]	; (89a44 <Heat_Correction+0x31c>)
   89a04:	881a      	ldrh	r2, [r3, #0]
   89a06:	4b10      	ldr	r3, [pc, #64]	; (89a48 <Heat_Correction+0x320>)
   89a08:	fba3 1302 	umull	r1, r3, r3, r2
   89a0c:	e040      	b.n	89a90 <Heat_Correction+0x368>
   89a0e:	bf00      	nop
   89a10:	2007199b 	.word	0x2007199b
   89a14:	00099a81 	.word	0x00099a81
   89a18:	2007199e 	.word	0x2007199e
   89a1c:	00099b89 	.word	0x00099b89
   89a20:	0008e6a1 	.word	0x0008e6a1
   89a24:	200719ac 	.word	0x200719ac
   89a28:	000a6591 	.word	0x000a6591
   89a2c:	41100000 	.word	0x41100000
   89a30:	000a64e9 	.word	0x000a64e9
   89a34:	000a66f9 	.word	0x000a66f9
   89a38:	42c80000 	.word	0x42c80000
   89a3c:	000a6381 	.word	0x000a6381
   89a40:	41200000 	.word	0x41200000
   89a44:	200719b8 	.word	0x200719b8
   89a48:	cccccccd 	.word	0xcccccccd
   89a4c:	200719b0 	.word	0x200719b0
   89a50:	200719c8 	.word	0x200719c8
   89a54:	200719b4 	.word	0x200719b4
   89a58:	2007217c 	.word	0x2007217c
   89a5c:	0008b42d 	.word	0x0008b42d
   89a60:	0008a03d 	.word	0x0008a03d
   89a64:	0008a0a5 	.word	0x0008a0a5
   89a68:	00089e11 	.word	0x00089e11
   89a6c:	20072180 	.word	0x20072180
   89a70:	20070548 	.word	0x20070548
   89a74:	000a5c69 	.word	0x000a5c69
   89a78:	2007218c 	.word	0x2007218c
   89a7c:	000a59ad 	.word	0x000a59ad
   89a80:	3fe00000 	.word	0x3fe00000
   89a84:	000a621d 	.word	0x000a621d
   89a88:	000a68e1 	.word	0x000a68e1
   89a8c:	0008a149 	.word	0x0008a149
   89a90:	0919      	lsrs	r1, r3, #4
   89a92:	460b      	mov	r3, r1
   89a94:	009b      	lsls	r3, r3, #2
   89a96:	440b      	add	r3, r1
   89a98:	009b      	lsls	r3, r3, #2
   89a9a:	1ad3      	subs	r3, r2, r3
   89a9c:	b29b      	uxth	r3, r3
   89a9e:	2b00      	cmp	r3, #0
   89aa0:	d101      	bne.n	89aa6 <Heat_Correction+0x37e>
			{
				Coarse_DutyCorrection();
   89aa2:	4b69      	ldr	r3, [pc, #420]	; (89c48 <Heat_Correction+0x520>)
   89aa4:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 800)
   89aa6:	4b69      	ldr	r3, [pc, #420]	; (89c4c <Heat_Correction+0x524>)
   89aa8:	681b      	ldr	r3, [r3, #0]
   89aaa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89aae:	d135      	bne.n	89b1c <Heat_Correction+0x3f4>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89ab0:	4b67      	ldr	r3, [pc, #412]	; (89c50 <Heat_Correction+0x528>)
   89ab2:	681a      	ldr	r2, [r3, #0]
   89ab4:	4b67      	ldr	r3, [pc, #412]	; (89c54 <Heat_Correction+0x52c>)
   89ab6:	4610      	mov	r0, r2
   89ab8:	4798      	blx	r3
   89aba:	4605      	mov	r5, r0
   89abc:	460e      	mov	r6, r1
   89abe:	4b66      	ldr	r3, [pc, #408]	; (89c58 <Heat_Correction+0x530>)
   89ac0:	681a      	ldr	r2, [r3, #0]
   89ac2:	4b64      	ldr	r3, [pc, #400]	; (89c54 <Heat_Correction+0x52c>)
   89ac4:	4610      	mov	r0, r2
   89ac6:	4798      	blx	r3
   89ac8:	4c64      	ldr	r4, [pc, #400]	; (89c5c <Heat_Correction+0x534>)
   89aca:	f04f 0200 	mov.w	r2, #0
   89ace:	4b64      	ldr	r3, [pc, #400]	; (89c60 <Heat_Correction+0x538>)
   89ad0:	47a0      	blx	r4
   89ad2:	4603      	mov	r3, r0
   89ad4:	460c      	mov	r4, r1
   89ad6:	461a      	mov	r2, r3
   89ad8:	4623      	mov	r3, r4
   89ada:	4c62      	ldr	r4, [pc, #392]	; (89c64 <Heat_Correction+0x53c>)
   89adc:	4628      	mov	r0, r5
   89ade:	4631      	mov	r1, r6
   89ae0:	47a0      	blx	r4
   89ae2:	4603      	mov	r3, r0
   89ae4:	2b00      	cmp	r3, #0
   89ae6:	d019      	beq.n	89b1c <Heat_Correction+0x3f4>
   89ae8:	4b5f      	ldr	r3, [pc, #380]	; (89c68 <Heat_Correction+0x540>)
   89aea:	681a      	ldr	r2, [r3, #0]
   89aec:	4b5f      	ldr	r3, [pc, #380]	; (89c6c <Heat_Correction+0x544>)
   89aee:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89af2:	4610      	mov	r0, r2
   89af4:	4798      	blx	r3
   89af6:	4603      	mov	r3, r0
   89af8:	2b00      	cmp	r3, #0
   89afa:	d00f      	beq.n	89b1c <Heat_Correction+0x3f4>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89afc:	4b5c      	ldr	r3, [pc, #368]	; (89c70 <Heat_Correction+0x548>)
   89afe:	881a      	ldrh	r2, [r3, #0]
   89b00:	4b5c      	ldr	r3, [pc, #368]	; (89c74 <Heat_Correction+0x54c>)
   89b02:	fba3 1302 	umull	r1, r3, r3, r2
   89b06:	0919      	lsrs	r1, r3, #4
   89b08:	460b      	mov	r3, r1
   89b0a:	009b      	lsls	r3, r3, #2
   89b0c:	440b      	add	r3, r1
   89b0e:	009b      	lsls	r3, r3, #2
   89b10:	1ad3      	subs	r3, r2, r3
   89b12:	b29b      	uxth	r3, r3
   89b14:	2b00      	cmp	r3, #0
   89b16:	d101      	bne.n	89b1c <Heat_Correction+0x3f4>
			{
				Coarse_DutyCorrection();
   89b18:	4b4b      	ldr	r3, [pc, #300]	; (89c48 <Heat_Correction+0x520>)
   89b1a:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   89b1c:	4b4b      	ldr	r3, [pc, #300]	; (89c4c <Heat_Correction+0x524>)
   89b1e:	681b      	ldr	r3, [r3, #0]
   89b20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89b24:	d15c      	bne.n	89be0 <Heat_Correction+0x4b8>
	{
	  if(TS2_Stable)
   89b26:	4b54      	ldr	r3, [pc, #336]	; (89c78 <Heat_Correction+0x550>)
   89b28:	781b      	ldrb	r3, [r3, #0]
   89b2a:	2b00      	cmp	r3, #0
   89b2c:	d058      	beq.n	89be0 <Heat_Correction+0x4b8>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   89b2e:	4b48      	ldr	r3, [pc, #288]	; (89c50 <Heat_Correction+0x528>)
   89b30:	681a      	ldr	r2, [r3, #0]
   89b32:	4b49      	ldr	r3, [pc, #292]	; (89c58 <Heat_Correction+0x530>)
   89b34:	6819      	ldr	r1, [r3, #0]
   89b36:	4b51      	ldr	r3, [pc, #324]	; (89c7c <Heat_Correction+0x554>)
   89b38:	4610      	mov	r0, r2
   89b3a:	4798      	blx	r3
   89b3c:	4603      	mov	r3, r0
   89b3e:	461a      	mov	r2, r3
   89b40:	4b4f      	ldr	r3, [pc, #316]	; (89c80 <Heat_Correction+0x558>)
   89b42:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   89b46:	4610      	mov	r0, r2
   89b48:	4798      	blx	r3
   89b4a:	4603      	mov	r3, r0
   89b4c:	2b00      	cmp	r3, #0
   89b4e:	d110      	bne.n	89b72 <Heat_Correction+0x44a>
   89b50:	4b41      	ldr	r3, [pc, #260]	; (89c58 <Heat_Correction+0x530>)
   89b52:	681a      	ldr	r2, [r3, #0]
   89b54:	4b3e      	ldr	r3, [pc, #248]	; (89c50 <Heat_Correction+0x528>)
   89b56:	6819      	ldr	r1, [r3, #0]
   89b58:	4b48      	ldr	r3, [pc, #288]	; (89c7c <Heat_Correction+0x554>)
   89b5a:	4610      	mov	r0, r2
   89b5c:	4798      	blx	r3
   89b5e:	4603      	mov	r3, r0
   89b60:	461a      	mov	r2, r3
   89b62:	4b47      	ldr	r3, [pc, #284]	; (89c80 <Heat_Correction+0x558>)
   89b64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89b68:	4610      	mov	r0, r2
   89b6a:	4798      	blx	r3
   89b6c:	4603      	mov	r3, r0
   89b6e:	2b00      	cmp	r3, #0
   89b70:	d002      	beq.n	89b78 <Heat_Correction+0x450>
		{
			Coarse_DutyCorrection(); 
   89b72:	4b35      	ldr	r3, [pc, #212]	; (89c48 <Heat_Correction+0x520>)
   89b74:	4798      	blx	r3
   89b76:	e033      	b.n	89be0 <Heat_Correction+0x4b8>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89b78:	4b42      	ldr	r3, [pc, #264]	; (89c84 <Heat_Correction+0x55c>)
   89b7a:	4798      	blx	r3
   89b7c:	4603      	mov	r3, r0
   89b7e:	461a      	mov	r2, r3
   89b80:	4b41      	ldr	r3, [pc, #260]	; (89c88 <Heat_Correction+0x560>)
   89b82:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89b84:	4b40      	ldr	r3, [pc, #256]	; (89c88 <Heat_Correction+0x560>)
   89b86:	781b      	ldrb	r3, [r3, #0]
   89b88:	2b00      	cmp	r3, #0
   89b8a:	d029      	beq.n	89be0 <Heat_Correction+0x4b8>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89b8c:	4b36      	ldr	r3, [pc, #216]	; (89c68 <Heat_Correction+0x540>)
   89b8e:	681a      	ldr	r2, [r3, #0]
   89b90:	4b3e      	ldr	r3, [pc, #248]	; (89c8c <Heat_Correction+0x564>)
   89b92:	6819      	ldr	r1, [r3, #0]
   89b94:	4b39      	ldr	r3, [pc, #228]	; (89c7c <Heat_Correction+0x554>)
   89b96:	4610      	mov	r0, r2
   89b98:	4798      	blx	r3
   89b9a:	4603      	mov	r3, r0
   89b9c:	461a      	mov	r2, r3
   89b9e:	4b2d      	ldr	r3, [pc, #180]	; (89c54 <Heat_Correction+0x52c>)
   89ba0:	4610      	mov	r0, r2
   89ba2:	4798      	blx	r3
   89ba4:	4c3a      	ldr	r4, [pc, #232]	; (89c90 <Heat_Correction+0x568>)
   89ba6:	a326      	add	r3, pc, #152	; (adr r3, 89c40 <Heat_Correction+0x518>)
   89ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bac:	47a0      	blx	r4
   89bae:	4603      	mov	r3, r0
   89bb0:	2b00      	cmp	r3, #0
   89bb2:	d113      	bne.n	89bdc <Heat_Correction+0x4b4>
   89bb4:	4b35      	ldr	r3, [pc, #212]	; (89c8c <Heat_Correction+0x564>)
   89bb6:	681a      	ldr	r2, [r3, #0]
   89bb8:	4b2b      	ldr	r3, [pc, #172]	; (89c68 <Heat_Correction+0x540>)
   89bba:	6819      	ldr	r1, [r3, #0]
   89bbc:	4b2f      	ldr	r3, [pc, #188]	; (89c7c <Heat_Correction+0x554>)
   89bbe:	4610      	mov	r0, r2
   89bc0:	4798      	blx	r3
   89bc2:	4603      	mov	r3, r0
   89bc4:	461a      	mov	r2, r3
   89bc6:	4b23      	ldr	r3, [pc, #140]	; (89c54 <Heat_Correction+0x52c>)
   89bc8:	4610      	mov	r0, r2
   89bca:	4798      	blx	r3
   89bcc:	4c30      	ldr	r4, [pc, #192]	; (89c90 <Heat_Correction+0x568>)
   89bce:	a31c      	add	r3, pc, #112	; (adr r3, 89c40 <Heat_Correction+0x518>)
   89bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
   89bd4:	47a0      	blx	r4
   89bd6:	4603      	mov	r3, r0
   89bd8:	2b00      	cmp	r3, #0
   89bda:	d001      	beq.n	89be0 <Heat_Correction+0x4b8>
			      Fine_DutyCorrection();
   89bdc:	4b2d      	ldr	r3, [pc, #180]	; (89c94 <Heat_Correction+0x56c>)
   89bde:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	
	if (SYSTEM_FLOW == 500)
   89be0:	4b1a      	ldr	r3, [pc, #104]	; (89c4c <Heat_Correction+0x524>)
   89be2:	681b      	ldr	r3, [r3, #0]
   89be4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89be8:	f040 808a 	bne.w	89d00 <Heat_Correction+0x5d8>
	{
	  if(TS2_Stable)
   89bec:	4b22      	ldr	r3, [pc, #136]	; (89c78 <Heat_Correction+0x550>)
   89bee:	781b      	ldrb	r3, [r3, #0]
   89bf0:	2b00      	cmp	r3, #0
   89bf2:	f000 8085 	beq.w	89d00 <Heat_Correction+0x5d8>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89bf6:	4b16      	ldr	r3, [pc, #88]	; (89c50 <Heat_Correction+0x528>)
   89bf8:	681a      	ldr	r2, [r3, #0]
   89bfa:	4b17      	ldr	r3, [pc, #92]	; (89c58 <Heat_Correction+0x530>)
   89bfc:	6819      	ldr	r1, [r3, #0]
   89bfe:	4b1f      	ldr	r3, [pc, #124]	; (89c7c <Heat_Correction+0x554>)
   89c00:	4610      	mov	r0, r2
   89c02:	4798      	blx	r3
   89c04:	4603      	mov	r3, r0
   89c06:	461a      	mov	r2, r3
   89c08:	4b1d      	ldr	r3, [pc, #116]	; (89c80 <Heat_Correction+0x558>)
   89c0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89c0e:	4610      	mov	r0, r2
   89c10:	4798      	blx	r3
   89c12:	4603      	mov	r3, r0
   89c14:	2b00      	cmp	r3, #0
   89c16:	d110      	bne.n	89c3a <Heat_Correction+0x512>
   89c18:	4b0f      	ldr	r3, [pc, #60]	; (89c58 <Heat_Correction+0x530>)
   89c1a:	681a      	ldr	r2, [r3, #0]
   89c1c:	4b0c      	ldr	r3, [pc, #48]	; (89c50 <Heat_Correction+0x528>)
   89c1e:	6819      	ldr	r1, [r3, #0]
   89c20:	4b16      	ldr	r3, [pc, #88]	; (89c7c <Heat_Correction+0x554>)
   89c22:	4610      	mov	r0, r2
   89c24:	4798      	blx	r3
   89c26:	4603      	mov	r3, r0
   89c28:	461a      	mov	r2, r3
   89c2a:	4b15      	ldr	r3, [pc, #84]	; (89c80 <Heat_Correction+0x558>)
   89c2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89c30:	4610      	mov	r0, r2
   89c32:	4798      	blx	r3
   89c34:	4603      	mov	r3, r0
   89c36:	2b00      	cmp	r3, #0
   89c38:	d02e      	beq.n	89c98 <Heat_Correction+0x570>
		{
			Coarse_DutyCorrection(); 
   89c3a:	4b03      	ldr	r3, [pc, #12]	; (89c48 <Heat_Correction+0x520>)
   89c3c:	4798      	blx	r3
   89c3e:	e05f      	b.n	89d00 <Heat_Correction+0x5d8>
   89c40:	9999999a 	.word	0x9999999a
   89c44:	3fb99999 	.word	0x3fb99999
   89c48:	0008a149 	.word	0x0008a149
   89c4c:	20070548 	.word	0x20070548
   89c50:	200719b0 	.word	0x200719b0
   89c54:	000a5c69 	.word	0x000a5c69
   89c58:	2007218c 	.word	0x2007218c
   89c5c:	000a59ad 	.word	0x000a59ad
   89c60:	3fe00000 	.word	0x3fe00000
   89c64:	000a621d 	.word	0x000a621d
   89c68:	200719b4 	.word	0x200719b4
   89c6c:	000a68e1 	.word	0x000a68e1
   89c70:	200719b8 	.word	0x200719b8
   89c74:	cccccccd 	.word	0xcccccccd
   89c78:	20072180 	.word	0x20072180
   89c7c:	000a637d 	.word	0x000a637d
   89c80:	000a6909 	.word	0x000a6909
   89c84:	00089ec1 	.word	0x00089ec1
   89c88:	20072189 	.word	0x20072189
   89c8c:	20072178 	.word	0x20072178
   89c90:	000a6231 	.word	0x000a6231
   89c94:	0008aa71 	.word	0x0008aa71
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89c98:	4b4f      	ldr	r3, [pc, #316]	; (89dd8 <Heat_Correction+0x6b0>)
   89c9a:	4798      	blx	r3
   89c9c:	4603      	mov	r3, r0
   89c9e:	461a      	mov	r2, r3
   89ca0:	4b4e      	ldr	r3, [pc, #312]	; (89ddc <Heat_Correction+0x6b4>)
   89ca2:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89ca4:	4b4d      	ldr	r3, [pc, #308]	; (89ddc <Heat_Correction+0x6b4>)
   89ca6:	781b      	ldrb	r3, [r3, #0]
   89ca8:	2b00      	cmp	r3, #0
   89caa:	d029      	beq.n	89d00 <Heat_Correction+0x5d8>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89cac:	4b4c      	ldr	r3, [pc, #304]	; (89de0 <Heat_Correction+0x6b8>)
   89cae:	681a      	ldr	r2, [r3, #0]
   89cb0:	4b4c      	ldr	r3, [pc, #304]	; (89de4 <Heat_Correction+0x6bc>)
   89cb2:	6819      	ldr	r1, [r3, #0]
   89cb4:	4b4c      	ldr	r3, [pc, #304]	; (89de8 <Heat_Correction+0x6c0>)
   89cb6:	4610      	mov	r0, r2
   89cb8:	4798      	blx	r3
   89cba:	4603      	mov	r3, r0
   89cbc:	461a      	mov	r2, r3
   89cbe:	4b4b      	ldr	r3, [pc, #300]	; (89dec <Heat_Correction+0x6c4>)
   89cc0:	4610      	mov	r0, r2
   89cc2:	4798      	blx	r3
   89cc4:	4c4a      	ldr	r4, [pc, #296]	; (89df0 <Heat_Correction+0x6c8>)
   89cc6:	a342      	add	r3, pc, #264	; (adr r3, 89dd0 <Heat_Correction+0x6a8>)
   89cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   89ccc:	47a0      	blx	r4
   89cce:	4603      	mov	r3, r0
   89cd0:	2b00      	cmp	r3, #0
   89cd2:	d113      	bne.n	89cfc <Heat_Correction+0x5d4>
   89cd4:	4b43      	ldr	r3, [pc, #268]	; (89de4 <Heat_Correction+0x6bc>)
   89cd6:	681a      	ldr	r2, [r3, #0]
   89cd8:	4b41      	ldr	r3, [pc, #260]	; (89de0 <Heat_Correction+0x6b8>)
   89cda:	6819      	ldr	r1, [r3, #0]
   89cdc:	4b42      	ldr	r3, [pc, #264]	; (89de8 <Heat_Correction+0x6c0>)
   89cde:	4610      	mov	r0, r2
   89ce0:	4798      	blx	r3
   89ce2:	4603      	mov	r3, r0
   89ce4:	461a      	mov	r2, r3
   89ce6:	4b41      	ldr	r3, [pc, #260]	; (89dec <Heat_Correction+0x6c4>)
   89ce8:	4610      	mov	r0, r2
   89cea:	4798      	blx	r3
   89cec:	4c40      	ldr	r4, [pc, #256]	; (89df0 <Heat_Correction+0x6c8>)
   89cee:	a338      	add	r3, pc, #224	; (adr r3, 89dd0 <Heat_Correction+0x6a8>)
   89cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
   89cf4:	47a0      	blx	r4
   89cf6:	4603      	mov	r3, r0
   89cf8:	2b00      	cmp	r3, #0
   89cfa:	d001      	beq.n	89d00 <Heat_Correction+0x5d8>
			      Fine_DutyCorrection();
   89cfc:	4b3d      	ldr	r3, [pc, #244]	; (89df4 <Heat_Correction+0x6cc>)
   89cfe:	4798      	blx	r3
	 {
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	if (SYSTEM_FLOW == 800)
   89d00:	4b3d      	ldr	r3, [pc, #244]	; (89df8 <Heat_Correction+0x6d0>)
   89d02:	681b      	ldr	r3, [r3, #0]
   89d04:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89d08:	d15e      	bne.n	89dc8 <Heat_Correction+0x6a0>
	{
		
		if(TS2_Stable)
   89d0a:	4b3c      	ldr	r3, [pc, #240]	; (89dfc <Heat_Correction+0x6d4>)
   89d0c:	781b      	ldrb	r3, [r3, #0]
   89d0e:	2b00      	cmp	r3, #0
   89d10:	d05a      	beq.n	89dc8 <Heat_Correction+0x6a0>
		{
			//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg.
			//Start tuning T2 to be at 37 +/- 2 deg.
			if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89d12:	4b3b      	ldr	r3, [pc, #236]	; (89e00 <Heat_Correction+0x6d8>)
   89d14:	681a      	ldr	r2, [r3, #0]
   89d16:	4b3b      	ldr	r3, [pc, #236]	; (89e04 <Heat_Correction+0x6dc>)
   89d18:	6819      	ldr	r1, [r3, #0]
   89d1a:	4b33      	ldr	r3, [pc, #204]	; (89de8 <Heat_Correction+0x6c0>)
   89d1c:	4610      	mov	r0, r2
   89d1e:	4798      	blx	r3
   89d20:	4603      	mov	r3, r0
   89d22:	461a      	mov	r2, r3
   89d24:	4b38      	ldr	r3, [pc, #224]	; (89e08 <Heat_Correction+0x6e0>)
   89d26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d2a:	4610      	mov	r0, r2
   89d2c:	4798      	blx	r3
   89d2e:	4603      	mov	r3, r0
   89d30:	2b00      	cmp	r3, #0
   89d32:	d110      	bne.n	89d56 <Heat_Correction+0x62e>
   89d34:	4b33      	ldr	r3, [pc, #204]	; (89e04 <Heat_Correction+0x6dc>)
   89d36:	681a      	ldr	r2, [r3, #0]
   89d38:	4b31      	ldr	r3, [pc, #196]	; (89e00 <Heat_Correction+0x6d8>)
   89d3a:	6819      	ldr	r1, [r3, #0]
   89d3c:	4b2a      	ldr	r3, [pc, #168]	; (89de8 <Heat_Correction+0x6c0>)
   89d3e:	4610      	mov	r0, r2
   89d40:	4798      	blx	r3
   89d42:	4603      	mov	r3, r0
   89d44:	461a      	mov	r2, r3
   89d46:	4b30      	ldr	r3, [pc, #192]	; (89e08 <Heat_Correction+0x6e0>)
   89d48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d4c:	4610      	mov	r0, r2
   89d4e:	4798      	blx	r3
   89d50:	4603      	mov	r3, r0
   89d52:	2b00      	cmp	r3, #0
   89d54:	d002      	beq.n	89d5c <Heat_Correction+0x634>
			{
				Coarse_DutyCorrection();
   89d56:	4b2d      	ldr	r3, [pc, #180]	; (89e0c <Heat_Correction+0x6e4>)
   89d58:	4798      	blx	r3
   89d5a:	e035      	b.n	89dc8 <Heat_Correction+0x6a0>
			}
			else
			{
				//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
				TS3_Stable = Check_4_TS3_Stable();
   89d5c:	4b1e      	ldr	r3, [pc, #120]	; (89dd8 <Heat_Correction+0x6b0>)
   89d5e:	4798      	blx	r3
   89d60:	4603      	mov	r3, r0
   89d62:	461a      	mov	r2, r3
   89d64:	4b1d      	ldr	r3, [pc, #116]	; (89ddc <Heat_Correction+0x6b4>)
   89d66:	701a      	strb	r2, [r3, #0]
				if(TS3_Stable)
   89d68:	4b1c      	ldr	r3, [pc, #112]	; (89ddc <Heat_Correction+0x6b4>)
   89d6a:	781b      	ldrb	r3, [r3, #0]
   89d6c:	2b00      	cmp	r3, #0
   89d6e:	d02b      	beq.n	89dc8 <Heat_Correction+0x6a0>
				{
					if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89d70:	4b1b      	ldr	r3, [pc, #108]	; (89de0 <Heat_Correction+0x6b8>)
   89d72:	681a      	ldr	r2, [r3, #0]
   89d74:	4b1b      	ldr	r3, [pc, #108]	; (89de4 <Heat_Correction+0x6bc>)
   89d76:	6819      	ldr	r1, [r3, #0]
   89d78:	4b1b      	ldr	r3, [pc, #108]	; (89de8 <Heat_Correction+0x6c0>)
   89d7a:	4610      	mov	r0, r2
   89d7c:	4798      	blx	r3
   89d7e:	4603      	mov	r3, r0
   89d80:	461a      	mov	r2, r3
   89d82:	4b1a      	ldr	r3, [pc, #104]	; (89dec <Heat_Correction+0x6c4>)
   89d84:	4610      	mov	r0, r2
   89d86:	4798      	blx	r3
   89d88:	4c19      	ldr	r4, [pc, #100]	; (89df0 <Heat_Correction+0x6c8>)
   89d8a:	a311      	add	r3, pc, #68	; (adr r3, 89dd0 <Heat_Correction+0x6a8>)
   89d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89d90:	47a0      	blx	r4
   89d92:	4603      	mov	r3, r0
   89d94:	2b00      	cmp	r3, #0
   89d96:	d113      	bne.n	89dc0 <Heat_Correction+0x698>
   89d98:	4b12      	ldr	r3, [pc, #72]	; (89de4 <Heat_Correction+0x6bc>)
   89d9a:	681a      	ldr	r2, [r3, #0]
   89d9c:	4b10      	ldr	r3, [pc, #64]	; (89de0 <Heat_Correction+0x6b8>)
   89d9e:	6819      	ldr	r1, [r3, #0]
   89da0:	4b11      	ldr	r3, [pc, #68]	; (89de8 <Heat_Correction+0x6c0>)
   89da2:	4610      	mov	r0, r2
   89da4:	4798      	blx	r3
   89da6:	4603      	mov	r3, r0
   89da8:	461a      	mov	r2, r3
   89daa:	4b10      	ldr	r3, [pc, #64]	; (89dec <Heat_Correction+0x6c4>)
   89dac:	4610      	mov	r0, r2
   89dae:	4798      	blx	r3
   89db0:	4c0f      	ldr	r4, [pc, #60]	; (89df0 <Heat_Correction+0x6c8>)
   89db2:	a307      	add	r3, pc, #28	; (adr r3, 89dd0 <Heat_Correction+0x6a8>)
   89db4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89db8:	47a0      	blx	r4
   89dba:	4603      	mov	r3, r0
   89dbc:	2b00      	cmp	r3, #0
   89dbe:	d003      	beq.n	89dc8 <Heat_Correction+0x6a0>
					Fine_DutyCorrection();
   89dc0:	4b0c      	ldr	r3, [pc, #48]	; (89df4 <Heat_Correction+0x6cc>)
   89dc2:	4798      	blx	r3
   89dc4:	e000      	b.n	89dc8 <Heat_Correction+0x6a0>
		sv_cntrl_poweroffheater();
		return;
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
	{
		return;
   89dc6:	bf00      	nop
			// TS2 not stable, wait for some more time
			// Same avg_duty is being applied, no change till stability not achieved
		}
	}

}
   89dc8:	4618      	mov	r0, r3
   89dca:	370c      	adds	r7, #12
   89dcc:	46bd      	mov	sp, r7
   89dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   89dd0:	9999999a 	.word	0x9999999a
   89dd4:	3fb99999 	.word	0x3fb99999
   89dd8:	00089ec1 	.word	0x00089ec1
   89ddc:	20072189 	.word	0x20072189
   89de0:	200719b4 	.word	0x200719b4
   89de4:	20072178 	.word	0x20072178
   89de8:	000a637d 	.word	0x000a637d
   89dec:	000a5c69 	.word	0x000a5c69
   89df0:	000a6231 	.word	0x000a6231
   89df4:	0008aa71 	.word	0x0008aa71
   89df8:	20070548 	.word	0x20070548
   89dfc:	20072180 	.word	0x20072180
   89e00:	200719b0 	.word	0x200719b0
   89e04:	2007218c 	.word	0x2007218c
   89e08:	000a6909 	.word	0x000a6909
   89e0c:	0008a149 	.word	0x0008a149

00089e10 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89e10:	b580      	push	{r7, lr}
   89e12:	b082      	sub	sp, #8
   89e14:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89e16:	2300      	movs	r3, #0
   89e18:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89e1a:	4b21      	ldr	r3, [pc, #132]	; (89ea0 <Check_4_TS2_Stable+0x90>)
   89e1c:	881a      	ldrh	r2, [r3, #0]
   89e1e:	4b21      	ldr	r3, [pc, #132]	; (89ea4 <Check_4_TS2_Stable+0x94>)
   89e20:	881b      	ldrh	r3, [r3, #0]
   89e22:	429a      	cmp	r2, r3
   89e24:	d337      	bcc.n	89e96 <Check_4_TS2_Stable+0x86>
	// TS2 is not increasing sharply
	{
		if (Tmp2Val_prev == Tmp2Val)
   89e26:	4b20      	ldr	r3, [pc, #128]	; (89ea8 <Check_4_TS2_Stable+0x98>)
   89e28:	681a      	ldr	r2, [r3, #0]
   89e2a:	4b20      	ldr	r3, [pc, #128]	; (89eac <Check_4_TS2_Stable+0x9c>)
   89e2c:	6819      	ldr	r1, [r3, #0]
   89e2e:	4b20      	ldr	r3, [pc, #128]	; (89eb0 <Check_4_TS2_Stable+0xa0>)
   89e30:	4610      	mov	r0, r2
   89e32:	4798      	blx	r3
   89e34:	4603      	mov	r3, r0
   89e36:	2b00      	cmp	r3, #0
   89e38:	d002      	beq.n	89e40 <Check_4_TS2_Stable+0x30>
		{
			ts2_stable = true;
   89e3a:	2301      	movs	r3, #1
   89e3c:	71fb      	strb	r3, [r7, #7]
   89e3e:	e023      	b.n	89e88 <Check_4_TS2_Stable+0x78>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   89e40:	4b1a      	ldr	r3, [pc, #104]	; (89eac <Check_4_TS2_Stable+0x9c>)
   89e42:	681a      	ldr	r2, [r3, #0]
   89e44:	4b18      	ldr	r3, [pc, #96]	; (89ea8 <Check_4_TS2_Stable+0x98>)
   89e46:	6819      	ldr	r1, [r3, #0]
   89e48:	4b1a      	ldr	r3, [pc, #104]	; (89eb4 <Check_4_TS2_Stable+0xa4>)
   89e4a:	4610      	mov	r0, r2
   89e4c:	4798      	blx	r3
   89e4e:	4603      	mov	r3, r0
   89e50:	461a      	mov	r2, r3
   89e52:	4b19      	ldr	r3, [pc, #100]	; (89eb8 <Check_4_TS2_Stable+0xa8>)
   89e54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89e58:	4610      	mov	r0, r2
   89e5a:	4798      	blx	r3
   89e5c:	4603      	mov	r3, r0
   89e5e:	2b00      	cmp	r3, #0
   89e60:	d110      	bne.n	89e84 <Check_4_TS2_Stable+0x74>
   89e62:	4b11      	ldr	r3, [pc, #68]	; (89ea8 <Check_4_TS2_Stable+0x98>)
   89e64:	681a      	ldr	r2, [r3, #0]
   89e66:	4b11      	ldr	r3, [pc, #68]	; (89eac <Check_4_TS2_Stable+0x9c>)
   89e68:	6819      	ldr	r1, [r3, #0]
   89e6a:	4b12      	ldr	r3, [pc, #72]	; (89eb4 <Check_4_TS2_Stable+0xa4>)
   89e6c:	4610      	mov	r0, r2
   89e6e:	4798      	blx	r3
   89e70:	4603      	mov	r3, r0
   89e72:	461a      	mov	r2, r3
   89e74:	4b10      	ldr	r3, [pc, #64]	; (89eb8 <Check_4_TS2_Stable+0xa8>)
   89e76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89e7a:	4610      	mov	r0, r2
   89e7c:	4798      	blx	r3
   89e7e:	4603      	mov	r3, r0
   89e80:	2b00      	cmp	r3, #0
   89e82:	d001      	beq.n	89e88 <Check_4_TS2_Stable+0x78>
		{
			ts2_stable = true;
   89e84:	2301      	movs	r3, #1
   89e86:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89e88:	4b0c      	ldr	r3, [pc, #48]	; (89ebc <Check_4_TS2_Stable+0xac>)
   89e8a:	881a      	ldrh	r2, [r3, #0]
   89e8c:	4b05      	ldr	r3, [pc, #20]	; (89ea4 <Check_4_TS2_Stable+0x94>)
   89e8e:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   89e90:	4b03      	ldr	r3, [pc, #12]	; (89ea0 <Check_4_TS2_Stable+0x90>)
   89e92:	2200      	movs	r2, #0
   89e94:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   89e96:	79fb      	ldrb	r3, [r7, #7]
}
   89e98:	4618      	mov	r0, r3
   89e9a:	3708      	adds	r7, #8
   89e9c:	46bd      	mov	sp, r7
   89e9e:	bd80      	pop	{r7, pc}
   89ea0:	200719bc 	.word	0x200719bc
   89ea4:	20070540 	.word	0x20070540
   89ea8:	200719c8 	.word	0x200719c8
   89eac:	200719b0 	.word	0x200719b0
   89eb0:	000a68b9 	.word	0x000a68b9
   89eb4:	000a637d 	.word	0x000a637d
   89eb8:	000a68e1 	.word	0x000a68e1
   89ebc:	200719c0 	.word	0x200719c0

00089ec0 <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   89ec0:	b580      	push	{r7, lr}
   89ec2:	b082      	sub	sp, #8
   89ec4:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   89ec6:	2300      	movs	r3, #0
   89ec8:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   89eca:	4b21      	ldr	r3, [pc, #132]	; (89f50 <Check_4_TS3_Stable+0x90>)
   89ecc:	881a      	ldrh	r2, [r3, #0]
   89ece:	4b21      	ldr	r3, [pc, #132]	; (89f54 <Check_4_TS3_Stable+0x94>)
   89ed0:	881b      	ldrh	r3, [r3, #0]
   89ed2:	429a      	cmp	r2, r3
   89ed4:	d337      	bcc.n	89f46 <Check_4_TS3_Stable+0x86>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   89ed6:	4b20      	ldr	r3, [pc, #128]	; (89f58 <Check_4_TS3_Stable+0x98>)
   89ed8:	681a      	ldr	r2, [r3, #0]
   89eda:	4b20      	ldr	r3, [pc, #128]	; (89f5c <Check_4_TS3_Stable+0x9c>)
   89edc:	6819      	ldr	r1, [r3, #0]
   89ede:	4b20      	ldr	r3, [pc, #128]	; (89f60 <Check_4_TS3_Stable+0xa0>)
   89ee0:	4610      	mov	r0, r2
   89ee2:	4798      	blx	r3
   89ee4:	4603      	mov	r3, r0
   89ee6:	2b00      	cmp	r3, #0
   89ee8:	d002      	beq.n	89ef0 <Check_4_TS3_Stable+0x30>
		{
			ts3_stable = true;
   89eea:	2301      	movs	r3, #1
   89eec:	71fb      	strb	r3, [r7, #7]
   89eee:	e023      	b.n	89f38 <Check_4_TS3_Stable+0x78>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   89ef0:	4b1a      	ldr	r3, [pc, #104]	; (89f5c <Check_4_TS3_Stable+0x9c>)
   89ef2:	681a      	ldr	r2, [r3, #0]
   89ef4:	4b18      	ldr	r3, [pc, #96]	; (89f58 <Check_4_TS3_Stable+0x98>)
   89ef6:	6819      	ldr	r1, [r3, #0]
   89ef8:	4b1a      	ldr	r3, [pc, #104]	; (89f64 <Check_4_TS3_Stable+0xa4>)
   89efa:	4610      	mov	r0, r2
   89efc:	4798      	blx	r3
   89efe:	4603      	mov	r3, r0
   89f00:	461a      	mov	r2, r3
   89f02:	4b19      	ldr	r3, [pc, #100]	; (89f68 <Check_4_TS3_Stable+0xa8>)
   89f04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f08:	4610      	mov	r0, r2
   89f0a:	4798      	blx	r3
   89f0c:	4603      	mov	r3, r0
   89f0e:	2b00      	cmp	r3, #0
   89f10:	d110      	bne.n	89f34 <Check_4_TS3_Stable+0x74>
   89f12:	4b11      	ldr	r3, [pc, #68]	; (89f58 <Check_4_TS3_Stable+0x98>)
   89f14:	681a      	ldr	r2, [r3, #0]
   89f16:	4b11      	ldr	r3, [pc, #68]	; (89f5c <Check_4_TS3_Stable+0x9c>)
   89f18:	6819      	ldr	r1, [r3, #0]
   89f1a:	4b12      	ldr	r3, [pc, #72]	; (89f64 <Check_4_TS3_Stable+0xa4>)
   89f1c:	4610      	mov	r0, r2
   89f1e:	4798      	blx	r3
   89f20:	4603      	mov	r3, r0
   89f22:	461a      	mov	r2, r3
   89f24:	4b10      	ldr	r3, [pc, #64]	; (89f68 <Check_4_TS3_Stable+0xa8>)
   89f26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89f2a:	4610      	mov	r0, r2
   89f2c:	4798      	blx	r3
   89f2e:	4603      	mov	r3, r0
   89f30:	2b00      	cmp	r3, #0
   89f32:	d001      	beq.n	89f38 <Check_4_TS3_Stable+0x78>
		{
			ts3_stable = true;
   89f34:	2301      	movs	r3, #1
   89f36:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   89f38:	4b0c      	ldr	r3, [pc, #48]	; (89f6c <Check_4_TS3_Stable+0xac>)
   89f3a:	881a      	ldrh	r2, [r3, #0]
   89f3c:	4b05      	ldr	r3, [pc, #20]	; (89f54 <Check_4_TS3_Stable+0x94>)
   89f3e:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   89f40:	4b03      	ldr	r3, [pc, #12]	; (89f50 <Check_4_TS3_Stable+0x90>)
   89f42:	2200      	movs	r2, #0
   89f44:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   89f46:	79fb      	ldrb	r3, [r7, #7]
}
   89f48:	4618      	mov	r0, r3
   89f4a:	3708      	adds	r7, #8
   89f4c:	46bd      	mov	sp, r7
   89f4e:	bd80      	pop	{r7, pc}
   89f50:	200719ba 	.word	0x200719ba
   89f54:	20070542 	.word	0x20070542
   89f58:	2007217c 	.word	0x2007217c
   89f5c:	200719b4 	.word	0x200719b4
   89f60:	000a68b9 	.word	0x000a68b9
   89f64:	000a637d 	.word	0x000a637d
   89f68:	000a68e1 	.word	0x000a68e1
   89f6c:	200719c2 	.word	0x200719c2

00089f70 <Check_4_Neutralstability>:

bool Check_4_Neutralstability()
{
   89f70:	b590      	push	{r4, r7, lr}
   89f72:	b083      	sub	sp, #12
   89f74:	af00      	add	r7, sp, #0
		bool neuts3_stable = false;
   89f76:	2300      	movs	r3, #0
   89f78:	71fb      	strb	r3, [r7, #7]
	//wait_4_TS3NeuStability=240, Neupost_stability_count = 120,TS3_neustability_count
	
	if (TS3_neustability_count >= wait_4_TS3NeuStability) 
   89f7a:	4b27      	ldr	r3, [pc, #156]	; (8a018 <Check_4_Neutralstability+0xa8>)
   89f7c:	881a      	ldrh	r2, [r3, #0]
   89f7e:	4b27      	ldr	r3, [pc, #156]	; (8a01c <Check_4_Neutralstability+0xac>)
   89f80:	881b      	ldrh	r3, [r3, #0]
   89f82:	429a      	cmp	r2, r3
   89f84:	d33d      	bcc.n	8a002 <Check_4_Neutralstability+0x92>
	{
		if (Tmp3Val_prev == Tmp3Val)
   89f86:	4b26      	ldr	r3, [pc, #152]	; (8a020 <Check_4_Neutralstability+0xb0>)
   89f88:	681a      	ldr	r2, [r3, #0]
   89f8a:	4b26      	ldr	r3, [pc, #152]	; (8a024 <Check_4_Neutralstability+0xb4>)
   89f8c:	6819      	ldr	r1, [r3, #0]
   89f8e:	4b26      	ldr	r3, [pc, #152]	; (8a028 <Check_4_Neutralstability+0xb8>)
   89f90:	4610      	mov	r0, r2
   89f92:	4798      	blx	r3
   89f94:	4603      	mov	r3, r0
   89f96:	2b00      	cmp	r3, #0
   89f98:	d002      	beq.n	89fa0 <Check_4_Neutralstability+0x30>
		{
			neuts3_stable = true;
   89f9a:	2301      	movs	r3, #1
   89f9c:	71fb      	strb	r3, [r7, #7]
   89f9e:	e029      	b.n	89ff4 <Check_4_Neutralstability+0x84>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 0.1) || ((Tmp3Val_prev - Tmp3Val) <= 0.1))
   89fa0:	4b20      	ldr	r3, [pc, #128]	; (8a024 <Check_4_Neutralstability+0xb4>)
   89fa2:	681a      	ldr	r2, [r3, #0]
   89fa4:	4b1e      	ldr	r3, [pc, #120]	; (8a020 <Check_4_Neutralstability+0xb0>)
   89fa6:	6819      	ldr	r1, [r3, #0]
   89fa8:	4b20      	ldr	r3, [pc, #128]	; (8a02c <Check_4_Neutralstability+0xbc>)
   89faa:	4610      	mov	r0, r2
   89fac:	4798      	blx	r3
   89fae:	4603      	mov	r3, r0
   89fb0:	461a      	mov	r2, r3
   89fb2:	4b1f      	ldr	r3, [pc, #124]	; (8a030 <Check_4_Neutralstability+0xc0>)
   89fb4:	4610      	mov	r0, r2
   89fb6:	4798      	blx	r3
   89fb8:	4c1e      	ldr	r4, [pc, #120]	; (8a034 <Check_4_Neutralstability+0xc4>)
   89fba:	a315      	add	r3, pc, #84	; (adr r3, 8a010 <Check_4_Neutralstability+0xa0>)
   89fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   89fc0:	47a0      	blx	r4
   89fc2:	4603      	mov	r3, r0
   89fc4:	2b00      	cmp	r3, #0
   89fc6:	d113      	bne.n	89ff0 <Check_4_Neutralstability+0x80>
   89fc8:	4b15      	ldr	r3, [pc, #84]	; (8a020 <Check_4_Neutralstability+0xb0>)
   89fca:	681a      	ldr	r2, [r3, #0]
   89fcc:	4b15      	ldr	r3, [pc, #84]	; (8a024 <Check_4_Neutralstability+0xb4>)
   89fce:	6819      	ldr	r1, [r3, #0]
   89fd0:	4b16      	ldr	r3, [pc, #88]	; (8a02c <Check_4_Neutralstability+0xbc>)
   89fd2:	4610      	mov	r0, r2
   89fd4:	4798      	blx	r3
   89fd6:	4603      	mov	r3, r0
   89fd8:	461a      	mov	r2, r3
   89fda:	4b15      	ldr	r3, [pc, #84]	; (8a030 <Check_4_Neutralstability+0xc0>)
   89fdc:	4610      	mov	r0, r2
   89fde:	4798      	blx	r3
   89fe0:	4c14      	ldr	r4, [pc, #80]	; (8a034 <Check_4_Neutralstability+0xc4>)
   89fe2:	a30b      	add	r3, pc, #44	; (adr r3, 8a010 <Check_4_Neutralstability+0xa0>)
   89fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
   89fe8:	47a0      	blx	r4
   89fea:	4603      	mov	r3, r0
   89fec:	2b00      	cmp	r3, #0
   89fee:	d001      	beq.n	89ff4 <Check_4_Neutralstability+0x84>
		{
			neuts3_stable = true;
   89ff0:	2301      	movs	r3, #1
   89ff2:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS3NeuStability = Neupost_stability_count;  
   89ff4:	4b10      	ldr	r3, [pc, #64]	; (8a038 <Check_4_Neutralstability+0xc8>)
   89ff6:	881a      	ldrh	r2, [r3, #0]
   89ff8:	4b08      	ldr	r3, [pc, #32]	; (8a01c <Check_4_Neutralstability+0xac>)
   89ffa:	801a      	strh	r2, [r3, #0]
		TS3_neustability_count = 0;
   89ffc:	4b06      	ldr	r3, [pc, #24]	; (8a018 <Check_4_Neutralstability+0xa8>)
   89ffe:	2200      	movs	r2, #0
   8a000:	801a      	strh	r2, [r3, #0]
	}
	return neuts3_stable;
   8a002:	79fb      	ldrb	r3, [r7, #7]
}
   8a004:	4618      	mov	r0, r3
   8a006:	370c      	adds	r7, #12
   8a008:	46bd      	mov	sp, r7
   8a00a:	bd90      	pop	{r4, r7, pc}
   8a00c:	f3af 8000 	nop.w
   8a010:	9999999a 	.word	0x9999999a
   8a014:	3fb99999 	.word	0x3fb99999
   8a018:	200719c4 	.word	0x200719c4
   8a01c:	20070544 	.word	0x20070544
   8a020:	2007217c 	.word	0x2007217c
   8a024:	200719b4 	.word	0x200719b4
   8a028:	000a68b9 	.word	0x000a68b9
   8a02c:	000a637d 	.word	0x000a637d
   8a030:	000a5c69 	.word	0x000a5c69
   8a034:	000a6209 	.word	0x000a6209
   8a038:	20070546 	.word	0x20070546

0008a03c <Calculate_slope>:

void Calculate_slope ()
{
   8a03c:	b598      	push	{r3, r4, r7, lr}
   8a03e:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   8a040:	4b10      	ldr	r3, [pc, #64]	; (8a084 <Calculate_slope+0x48>)
   8a042:	f04f 0200 	mov.w	r2, #0
   8a046:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   8a048:	4b0f      	ldr	r3, [pc, #60]	; (8a088 <Calculate_slope+0x4c>)
   8a04a:	681a      	ldr	r2, [r3, #0]
   8a04c:	4b0f      	ldr	r3, [pc, #60]	; (8a08c <Calculate_slope+0x50>)
   8a04e:	6819      	ldr	r1, [r3, #0]
   8a050:	4b0f      	ldr	r3, [pc, #60]	; (8a090 <Calculate_slope+0x54>)
   8a052:	4610      	mov	r0, r2
   8a054:	4798      	blx	r3
   8a056:	4603      	mov	r3, r0
   8a058:	461c      	mov	r4, r3
   8a05a:	4b0e      	ldr	r3, [pc, #56]	; (8a094 <Calculate_slope+0x58>)
   8a05c:	881b      	ldrh	r3, [r3, #0]
   8a05e:	461a      	mov	r2, r3
   8a060:	4b0d      	ldr	r3, [pc, #52]	; (8a098 <Calculate_slope+0x5c>)
   8a062:	881b      	ldrh	r3, [r3, #0]
   8a064:	1ad2      	subs	r2, r2, r3
   8a066:	4b0d      	ldr	r3, [pc, #52]	; (8a09c <Calculate_slope+0x60>)
   8a068:	4610      	mov	r0, r2
   8a06a:	4798      	blx	r3
   8a06c:	4602      	mov	r2, r0
   8a06e:	4b0c      	ldr	r3, [pc, #48]	; (8a0a0 <Calculate_slope+0x64>)
   8a070:	4611      	mov	r1, r2
   8a072:	4620      	mov	r0, r4
   8a074:	4798      	blx	r3
   8a076:	4603      	mov	r3, r0
   8a078:	461a      	mov	r2, r3
   8a07a:	4b02      	ldr	r3, [pc, #8]	; (8a084 <Calculate_slope+0x48>)
   8a07c:	601a      	str	r2, [r3, #0]
}
   8a07e:	bf00      	nop
   8a080:	bd98      	pop	{r3, r4, r7, pc}
   8a082:	bf00      	nop
   8a084:	200719d0 	.word	0x200719d0
   8a088:	200719b0 	.word	0x200719b0
   8a08c:	200719cc 	.word	0x200719cc
   8a090:	000a637d 	.word	0x000a637d
   8a094:	200719b8 	.word	0x200719b8
   8a098:	200719be 	.word	0x200719be
   8a09c:	000a64e9 	.word	0x000a64e9
   8a0a0:	000a66f9 	.word	0x000a66f9

0008a0a4 <Calculate_direction>:

Calculate_direction()
{
   8a0a4:	b580      	push	{r7, lr}
   8a0a6:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   8a0a8:	4b20      	ldr	r3, [pc, #128]	; (8a12c <Calculate_direction+0x88>)
   8a0aa:	681a      	ldr	r2, [r3, #0]
   8a0ac:	4b20      	ldr	r3, [pc, #128]	; (8a130 <Calculate_direction+0x8c>)
   8a0ae:	6819      	ldr	r1, [r3, #0]
   8a0b0:	4b20      	ldr	r3, [pc, #128]	; (8a134 <Calculate_direction+0x90>)
   8a0b2:	4610      	mov	r0, r2
   8a0b4:	4798      	blx	r3
   8a0b6:	4603      	mov	r3, r0
   8a0b8:	461a      	mov	r2, r3
   8a0ba:	4b1f      	ldr	r3, [pc, #124]	; (8a138 <Calculate_direction+0x94>)
   8a0bc:	f04f 0100 	mov.w	r1, #0
   8a0c0:	4610      	mov	r0, r2
   8a0c2:	4798      	blx	r3
   8a0c4:	4603      	mov	r3, r0
   8a0c6:	2b00      	cmp	r3, #0
   8a0c8:	d003      	beq.n	8a0d2 <Calculate_direction+0x2e>
	    TS2_Direction = UP;
   8a0ca:	4b1c      	ldr	r3, [pc, #112]	; (8a13c <Calculate_direction+0x98>)
   8a0cc:	2200      	movs	r2, #0
   8a0ce:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   8a0d0:	e029      	b.n	8a126 <Calculate_direction+0x82>

Calculate_direction()
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   8a0d2:	4b17      	ldr	r3, [pc, #92]	; (8a130 <Calculate_direction+0x8c>)
   8a0d4:	681a      	ldr	r2, [r3, #0]
   8a0d6:	4b15      	ldr	r3, [pc, #84]	; (8a12c <Calculate_direction+0x88>)
   8a0d8:	6819      	ldr	r1, [r3, #0]
   8a0da:	4b16      	ldr	r3, [pc, #88]	; (8a134 <Calculate_direction+0x90>)
   8a0dc:	4610      	mov	r0, r2
   8a0de:	4798      	blx	r3
   8a0e0:	4603      	mov	r3, r0
   8a0e2:	461a      	mov	r2, r3
   8a0e4:	4b14      	ldr	r3, [pc, #80]	; (8a138 <Calculate_direction+0x94>)
   8a0e6:	f04f 0100 	mov.w	r1, #0
   8a0ea:	4610      	mov	r0, r2
   8a0ec:	4798      	blx	r3
   8a0ee:	4603      	mov	r3, r0
   8a0f0:	2b00      	cmp	r3, #0
   8a0f2:	d003      	beq.n	8a0fc <Calculate_direction+0x58>
	    TS2_Direction = DOWN;
   8a0f4:	4b11      	ldr	r3, [pc, #68]	; (8a13c <Calculate_direction+0x98>)
   8a0f6:	2201      	movs	r2, #1
   8a0f8:	701a      	strb	r2, [r3, #0]
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;

}
   8a0fa:	e014      	b.n	8a126 <Calculate_direction+0x82>
{
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   8a0fc:	4b0c      	ldr	r3, [pc, #48]	; (8a130 <Calculate_direction+0x8c>)
   8a0fe:	681a      	ldr	r2, [r3, #0]
   8a100:	4b0a      	ldr	r3, [pc, #40]	; (8a12c <Calculate_direction+0x88>)
   8a102:	6819      	ldr	r1, [r3, #0]
   8a104:	4b0b      	ldr	r3, [pc, #44]	; (8a134 <Calculate_direction+0x90>)
   8a106:	4610      	mov	r0, r2
   8a108:	4798      	blx	r3
   8a10a:	4603      	mov	r3, r0
   8a10c:	461a      	mov	r2, r3
   8a10e:	4b0c      	ldr	r3, [pc, #48]	; (8a140 <Calculate_direction+0x9c>)
   8a110:	f04f 0100 	mov.w	r1, #0
   8a114:	4610      	mov	r0, r2
   8a116:	4798      	blx	r3
   8a118:	4603      	mov	r3, r0
   8a11a:	2b00      	cmp	r3, #0
   8a11c:	d100      	bne.n	8a120 <Calculate_direction+0x7c>
		TS2_Direction = NUETRAL;

}
   8a11e:	e002      	b.n	8a126 <Calculate_direction+0x82>
	if((Tmp2Val - Tmp2Val_prev) > 0)
	    TS2_Direction = UP;
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
	    TS2_Direction = DOWN;
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
		TS2_Direction = NUETRAL;
   8a120:	4b06      	ldr	r3, [pc, #24]	; (8a13c <Calculate_direction+0x98>)
   8a122:	2202      	movs	r2, #2
   8a124:	701a      	strb	r2, [r3, #0]

}
   8a126:	bf00      	nop
   8a128:	bd80      	pop	{r7, pc}
   8a12a:	bf00      	nop
   8a12c:	200719b0 	.word	0x200719b0
   8a130:	200719c8 	.word	0x200719c8
   8a134:	000a637d 	.word	0x000a637d
   8a138:	000a6909 	.word	0x000a6909
   8a13c:	2007218a 	.word	0x2007218a
   8a140:	000a68b9 	.word	0x000a68b9
   8a144:	00000000 	.word	0x00000000

0008a148 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a14a:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a14c:	4b90      	ldr	r3, [pc, #576]	; (8a390 <Coarse_DutyCorrection+0x248>)
   8a14e:	681a      	ldr	r2, [r3, #0]
   8a150:	4b90      	ldr	r3, [pc, #576]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a152:	4610      	mov	r0, r2
   8a154:	4798      	blx	r3
   8a156:	4c90      	ldr	r4, [pc, #576]	; (8a398 <Coarse_DutyCorrection+0x250>)
   8a158:	a387      	add	r3, pc, #540	; (adr r3, 8a378 <Coarse_DutyCorrection+0x230>)
   8a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a15e:	47a0      	blx	r4
   8a160:	4603      	mov	r3, r0
   8a162:	2b00      	cmp	r3, #0
   8a164:	d002      	beq.n	8a16c <Coarse_DutyCorrection+0x24>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   8a166:	4b8d      	ldr	r3, [pc, #564]	; (8a39c <Coarse_DutyCorrection+0x254>)
   8a168:	223c      	movs	r2, #60	; 0x3c
   8a16a:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a16c:	4b88      	ldr	r3, [pc, #544]	; (8a390 <Coarse_DutyCorrection+0x248>)
   8a16e:	681a      	ldr	r2, [r3, #0]
   8a170:	4b88      	ldr	r3, [pc, #544]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a172:	4610      	mov	r0, r2
   8a174:	4798      	blx	r3
   8a176:	4c88      	ldr	r4, [pc, #544]	; (8a398 <Coarse_DutyCorrection+0x250>)
   8a178:	a381      	add	r3, pc, #516	; (adr r3, 8a380 <Coarse_DutyCorrection+0x238>)
   8a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a17e:	47a0      	blx	r4
   8a180:	4603      	mov	r3, r0
   8a182:	2b00      	cmp	r3, #0
   8a184:	d00f      	beq.n	8a1a6 <Coarse_DutyCorrection+0x5e>
   8a186:	4b82      	ldr	r3, [pc, #520]	; (8a390 <Coarse_DutyCorrection+0x248>)
   8a188:	681a      	ldr	r2, [r3, #0]
   8a18a:	4b82      	ldr	r3, [pc, #520]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a18c:	4610      	mov	r0, r2
   8a18e:	4798      	blx	r3
   8a190:	4c83      	ldr	r4, [pc, #524]	; (8a3a0 <Coarse_DutyCorrection+0x258>)
   8a192:	a379      	add	r3, pc, #484	; (adr r3, 8a378 <Coarse_DutyCorrection+0x230>)
   8a194:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a198:	47a0      	blx	r4
   8a19a:	4603      	mov	r3, r0
   8a19c:	2b00      	cmp	r3, #0
   8a19e:	d002      	beq.n	8a1a6 <Coarse_DutyCorrection+0x5e>
	{
		duty_count = 40;
   8a1a0:	4b7e      	ldr	r3, [pc, #504]	; (8a39c <Coarse_DutyCorrection+0x254>)
   8a1a2:	2228      	movs	r2, #40	; 0x28
   8a1a4:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   8a1a6:	4b7a      	ldr	r3, [pc, #488]	; (8a390 <Coarse_DutyCorrection+0x248>)
   8a1a8:	681a      	ldr	r2, [r3, #0]
   8a1aa:	4b7a      	ldr	r3, [pc, #488]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a1ac:	4610      	mov	r0, r2
   8a1ae:	4798      	blx	r3
   8a1b0:	4c7c      	ldr	r4, [pc, #496]	; (8a3a4 <Coarse_DutyCorrection+0x25c>)
   8a1b2:	a373      	add	r3, pc, #460	; (adr r3, 8a380 <Coarse_DutyCorrection+0x238>)
   8a1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1b8:	47a0      	blx	r4
   8a1ba:	4603      	mov	r3, r0
   8a1bc:	2b00      	cmp	r3, #0
   8a1be:	d002      	beq.n	8a1c6 <Coarse_DutyCorrection+0x7e>
	{
		duty_count = 8;
   8a1c0:	4b76      	ldr	r3, [pc, #472]	; (8a39c <Coarse_DutyCorrection+0x254>)
   8a1c2:	2208      	movs	r2, #8
   8a1c4:	701a      	strb	r2, [r3, #0]
	
	}
	
	if (SYSTEM_FLOW == 800)
   8a1c6:	4b78      	ldr	r3, [pc, #480]	; (8a3a8 <Coarse_DutyCorrection+0x260>)
   8a1c8:	681b      	ldr	r3, [r3, #0]
   8a1ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8a1ce:	f040 814c 	bne.w	8a46a <Coarse_DutyCorrection+0x322>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
   8a1d2:	4b76      	ldr	r3, [pc, #472]	; (8a3ac <Coarse_DutyCorrection+0x264>)
   8a1d4:	781b      	ldrb	r3, [r3, #0]
   8a1d6:	2b00      	cmp	r3, #0
   8a1d8:	d128      	bne.n	8a22c <Coarse_DutyCorrection+0xe4>
   8a1da:	4b75      	ldr	r3, [pc, #468]	; (8a3b0 <Coarse_DutyCorrection+0x268>)
   8a1dc:	681a      	ldr	r2, [r3, #0]
   8a1de:	4b75      	ldr	r3, [pc, #468]	; (8a3b4 <Coarse_DutyCorrection+0x26c>)
   8a1e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a1e4:	4610      	mov	r0, r2
   8a1e6:	4798      	blx	r3
   8a1e8:	4603      	mov	r3, r0
   8a1ea:	4618      	mov	r0, r3
   8a1ec:	4b72      	ldr	r3, [pc, #456]	; (8a3b8 <Coarse_DutyCorrection+0x270>)
   8a1ee:	681a      	ldr	r2, [r3, #0]
   8a1f0:	4b72      	ldr	r3, [pc, #456]	; (8a3bc <Coarse_DutyCorrection+0x274>)
   8a1f2:	4611      	mov	r1, r2
   8a1f4:	4798      	blx	r3
   8a1f6:	4603      	mov	r3, r0
   8a1f8:	2b00      	cmp	r3, #0
   8a1fa:	d017      	beq.n	8a22c <Coarse_DutyCorrection+0xe4>
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8a1fc:	4b70      	ldr	r3, [pc, #448]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a1fe:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a202:	b29a      	uxth	r2, r3
   8a204:	4b65      	ldr	r3, [pc, #404]	; (8a39c <Coarse_DutyCorrection+0x254>)
   8a206:	781b      	ldrb	r3, [r3, #0]
   8a208:	b29b      	uxth	r3, r3
   8a20a:	1ad3      	subs	r3, r2, r3
   8a20c:	b29b      	uxth	r3, r3
   8a20e:	b21a      	sxth	r2, r3
   8a210:	4b6b      	ldr	r3, [pc, #428]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a212:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a214:	4b6a      	ldr	r3, [pc, #424]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a216:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a21a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a21e:	f300 8400 	bgt.w	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a222:	4b67      	ldr	r3, [pc, #412]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a224:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a228:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+2)) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a22a:	e3fa      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
   8a22c:	4b5f      	ldr	r3, [pc, #380]	; (8a3ac <Coarse_DutyCorrection+0x264>)
   8a22e:	781b      	ldrb	r3, [r3, #0]
   8a230:	2b00      	cmp	r3, #0
   8a232:	d157      	bne.n	8a2e4 <Coarse_DutyCorrection+0x19c>
   8a234:	4b60      	ldr	r3, [pc, #384]	; (8a3b8 <Coarse_DutyCorrection+0x270>)
   8a236:	681a      	ldr	r2, [r3, #0]
   8a238:	4b56      	ldr	r3, [pc, #344]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a23a:	4610      	mov	r0, r2
   8a23c:	4798      	blx	r3
   8a23e:	4605      	mov	r5, r0
   8a240:	460e      	mov	r6, r1
   8a242:	4b5b      	ldr	r3, [pc, #364]	; (8a3b0 <Coarse_DutyCorrection+0x268>)
   8a244:	681a      	ldr	r2, [r3, #0]
   8a246:	4b53      	ldr	r3, [pc, #332]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a248:	4610      	mov	r0, r2
   8a24a:	4798      	blx	r3
   8a24c:	4c5d      	ldr	r4, [pc, #372]	; (8a3c4 <Coarse_DutyCorrection+0x27c>)
   8a24e:	f04f 0200 	mov.w	r2, #0
   8a252:	4b5d      	ldr	r3, [pc, #372]	; (8a3c8 <Coarse_DutyCorrection+0x280>)
   8a254:	47a0      	blx	r4
   8a256:	4603      	mov	r3, r0
   8a258:	460c      	mov	r4, r1
   8a25a:	461a      	mov	r2, r3
   8a25c:	4623      	mov	r3, r4
   8a25e:	4c51      	ldr	r4, [pc, #324]	; (8a3a4 <Coarse_DutyCorrection+0x25c>)
   8a260:	4628      	mov	r0, r5
   8a262:	4631      	mov	r1, r6
   8a264:	47a0      	blx	r4
   8a266:	4603      	mov	r3, r0
   8a268:	2b00      	cmp	r3, #0
   8a26a:	d03b      	beq.n	8a2e4 <Coarse_DutyCorrection+0x19c>
   8a26c:	4b57      	ldr	r3, [pc, #348]	; (8a3cc <Coarse_DutyCorrection+0x284>)
   8a26e:	681a      	ldr	r2, [r3, #0]
   8a270:	4b48      	ldr	r3, [pc, #288]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a272:	4610      	mov	r0, r2
   8a274:	4798      	blx	r3
   8a276:	4605      	mov	r5, r0
   8a278:	460e      	mov	r6, r1
   8a27a:	4b55      	ldr	r3, [pc, #340]	; (8a3d0 <Coarse_DutyCorrection+0x288>)
   8a27c:	681a      	ldr	r2, [r3, #0]
   8a27e:	4b45      	ldr	r3, [pc, #276]	; (8a394 <Coarse_DutyCorrection+0x24c>)
   8a280:	4610      	mov	r0, r2
   8a282:	4798      	blx	r3
   8a284:	4c4f      	ldr	r4, [pc, #316]	; (8a3c4 <Coarse_DutyCorrection+0x27c>)
   8a286:	a340      	add	r3, pc, #256	; (adr r3, 8a388 <Coarse_DutyCorrection+0x240>)
   8a288:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a28c:	47a0      	blx	r4
   8a28e:	4603      	mov	r3, r0
   8a290:	460c      	mov	r4, r1
   8a292:	461a      	mov	r2, r3
   8a294:	4623      	mov	r3, r4
   8a296:	4c40      	ldr	r4, [pc, #256]	; (8a398 <Coarse_DutyCorrection+0x250>)
   8a298:	4628      	mov	r0, r5
   8a29a:	4631      	mov	r1, r6
   8a29c:	47a0      	blx	r4
   8a29e:	4603      	mov	r3, r0
   8a2a0:	2b00      	cmp	r3, #0
   8a2a2:	d01f      	beq.n	8a2e4 <Coarse_DutyCorrection+0x19c>
		{
			avg_duty = avg_duty - 10;
   8a2a4:	4b46      	ldr	r3, [pc, #280]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a2aa:	b29b      	uxth	r3, r3
   8a2ac:	3b0a      	subs	r3, #10
   8a2ae:	b29b      	uxth	r3, r3
   8a2b0:	b21a      	sxth	r2, r3
   8a2b2:	4b43      	ldr	r3, [pc, #268]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a2b4:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a2b6:	4b42      	ldr	r3, [pc, #264]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a2b8:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a2bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a2c0:	f300 83af 	bgt.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a2c4:	4b41      	ldr	r3, [pc, #260]	; (8a3cc <Coarse_DutyCorrection+0x284>)
   8a2c6:	681a      	ldr	r2, [r3, #0]
   8a2c8:	4b41      	ldr	r3, [pc, #260]	; (8a3d0 <Coarse_DutyCorrection+0x288>)
   8a2ca:	6819      	ldr	r1, [r3, #0]
   8a2cc:	4b41      	ldr	r3, [pc, #260]	; (8a3d4 <Coarse_DutyCorrection+0x28c>)
   8a2ce:	4610      	mov	r0, r2
   8a2d0:	4798      	blx	r3
   8a2d2:	4603      	mov	r3, r0
   8a2d4:	2b00      	cmp	r3, #0
   8a2d6:	d100      	bne.n	8a2da <Coarse_DutyCorrection+0x192>
   8a2d8:	e3a3      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a2da:	4b39      	ldr	r3, [pc, #228]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a2dc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a2e0:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a2e2:	e39e      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
   8a2e4:	4b31      	ldr	r3, [pc, #196]	; (8a3ac <Coarse_DutyCorrection+0x264>)
   8a2e6:	781b      	ldrb	r3, [r3, #0]
   8a2e8:	2b00      	cmp	r3, #0
   8a2ea:	d17f      	bne.n	8a3ec <Coarse_DutyCorrection+0x2a4>
   8a2ec:	4b30      	ldr	r3, [pc, #192]	; (8a3b0 <Coarse_DutyCorrection+0x268>)
   8a2ee:	681a      	ldr	r2, [r3, #0]
   8a2f0:	4b39      	ldr	r3, [pc, #228]	; (8a3d8 <Coarse_DutyCorrection+0x290>)
   8a2f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a2f6:	4610      	mov	r0, r2
   8a2f8:	4798      	blx	r3
   8a2fa:	4603      	mov	r3, r0
   8a2fc:	4618      	mov	r0, r3
   8a2fe:	4b2e      	ldr	r3, [pc, #184]	; (8a3b8 <Coarse_DutyCorrection+0x270>)
   8a300:	681a      	ldr	r2, [r3, #0]
   8a302:	4b2e      	ldr	r3, [pc, #184]	; (8a3bc <Coarse_DutyCorrection+0x274>)
   8a304:	4611      	mov	r1, r2
   8a306:	4798      	blx	r3
   8a308:	4603      	mov	r3, r0
   8a30a:	2b00      	cmp	r3, #0
   8a30c:	d06e      	beq.n	8a3ec <Coarse_DutyCorrection+0x2a4>
   8a30e:	4b28      	ldr	r3, [pc, #160]	; (8a3b0 <Coarse_DutyCorrection+0x268>)
   8a310:	681a      	ldr	r2, [r3, #0]
   8a312:	4b28      	ldr	r3, [pc, #160]	; (8a3b4 <Coarse_DutyCorrection+0x26c>)
   8a314:	4931      	ldr	r1, [pc, #196]	; (8a3dc <Coarse_DutyCorrection+0x294>)
   8a316:	4610      	mov	r0, r2
   8a318:	4798      	blx	r3
   8a31a:	4603      	mov	r3, r0
   8a31c:	4618      	mov	r0, r3
   8a31e:	4b26      	ldr	r3, [pc, #152]	; (8a3b8 <Coarse_DutyCorrection+0x270>)
   8a320:	681a      	ldr	r2, [r3, #0]
   8a322:	4b2f      	ldr	r3, [pc, #188]	; (8a3e0 <Coarse_DutyCorrection+0x298>)
   8a324:	4611      	mov	r1, r2
   8a326:	4798      	blx	r3
   8a328:	4603      	mov	r3, r0
   8a32a:	2b00      	cmp	r3, #0
   8a32c:	d05e      	beq.n	8a3ec <Coarse_DutyCorrection+0x2a4>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a32e:	4b2d      	ldr	r3, [pc, #180]	; (8a3e4 <Coarse_DutyCorrection+0x29c>)
   8a330:	681a      	ldr	r2, [r3, #0]
   8a332:	4b22      	ldr	r3, [pc, #136]	; (8a3bc <Coarse_DutyCorrection+0x274>)
   8a334:	492c      	ldr	r1, [pc, #176]	; (8a3e8 <Coarse_DutyCorrection+0x2a0>)
   8a336:	4610      	mov	r0, r2
   8a338:	4798      	blx	r3
   8a33a:	4603      	mov	r3, r0
   8a33c:	2b00      	cmp	r3, #0
   8a33e:	f000 8370 	beq.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a342:	4b22      	ldr	r3, [pc, #136]	; (8a3cc <Coarse_DutyCorrection+0x284>)
   8a344:	681a      	ldr	r2, [r3, #0]
   8a346:	4b22      	ldr	r3, [pc, #136]	; (8a3d0 <Coarse_DutyCorrection+0x288>)
   8a348:	6819      	ldr	r1, [r3, #0]
   8a34a:	4b22      	ldr	r3, [pc, #136]	; (8a3d4 <Coarse_DutyCorrection+0x28c>)
   8a34c:	4610      	mov	r0, r2
   8a34e:	4798      	blx	r3
   8a350:	4603      	mov	r3, r0
   8a352:	2b00      	cmp	r3, #0
   8a354:	d100      	bne.n	8a358 <Coarse_DutyCorrection+0x210>
   8a356:	e364      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
   8a358:	4b10      	ldr	r3, [pc, #64]	; (8a39c <Coarse_DutyCorrection+0x254>)
   8a35a:	781b      	ldrb	r3, [r3, #0]
   8a35c:	b29a      	uxth	r2, r3
   8a35e:	4b18      	ldr	r3, [pc, #96]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a360:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a364:	b29b      	uxth	r3, r3
   8a366:	4413      	add	r3, r2
   8a368:	b29b      	uxth	r3, r3
   8a36a:	b21a      	sxth	r2, r3
   8a36c:	4b14      	ldr	r3, [pc, #80]	; (8a3c0 <Coarse_DutyCorrection+0x278>)
   8a36e:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a370:	e357      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
   8a372:	bf00      	nop
   8a374:	f3af 8000 	nop.w
   8a378:	eb851eb8 	.word	0xeb851eb8
   8a37c:	3f9eb851 	.word	0x3f9eb851
   8a380:	33333333 	.word	0x33333333
   8a384:	3fd33333 	.word	0x3fd33333
   8a388:	9999999a 	.word	0x9999999a
   8a38c:	3fb99999 	.word	0x3fb99999
   8a390:	200719d0 	.word	0x200719d0
   8a394:	000a5c69 	.word	0x000a5c69
   8a398:	000a6209 	.word	0x000a6209
   8a39c:	200719d4 	.word	0x200719d4
   8a3a0:	000a6231 	.word	0x000a6231
   8a3a4:	000a621d 	.word	0x000a621d
   8a3a8:	20070548 	.word	0x20070548
   8a3ac:	2007218a 	.word	0x2007218a
   8a3b0:	2007218c 	.word	0x2007218c
   8a3b4:	000a6381 	.word	0x000a6381
   8a3b8:	200719b0 	.word	0x200719b0
   8a3bc:	000a68e1 	.word	0x000a68e1
   8a3c0:	2007199e 	.word	0x2007199e
   8a3c4:	000a59ad 	.word	0x000a59ad
   8a3c8:	3fe00000 	.word	0x3fe00000
   8a3cc:	200719b4 	.word	0x200719b4
   8a3d0:	20072178 	.word	0x20072178
   8a3d4:	000a68cd 	.word	0x000a68cd
   8a3d8:	000a637d 	.word	0x000a637d
   8a3dc:	40400000 	.word	0x40400000
   8a3e0:	000a68f5 	.word	0x000a68f5
   8a3e4:	200719ac 	.word	0x200719ac
   8a3e8:	42100000 	.word	0x42100000
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
   8a3ec:	4b8c      	ldr	r3, [pc, #560]	; (8a620 <Coarse_DutyCorrection+0x4d8>)
   8a3ee:	781b      	ldrb	r3, [r3, #0]
   8a3f0:	2b01      	cmp	r3, #1
   8a3f2:	d12f      	bne.n	8a454 <Coarse_DutyCorrection+0x30c>
   8a3f4:	4b8b      	ldr	r3, [pc, #556]	; (8a624 <Coarse_DutyCorrection+0x4dc>)
   8a3f6:	681a      	ldr	r2, [r3, #0]
   8a3f8:	4b8b      	ldr	r3, [pc, #556]	; (8a628 <Coarse_DutyCorrection+0x4e0>)
   8a3fa:	6819      	ldr	r1, [r3, #0]
   8a3fc:	4b8b      	ldr	r3, [pc, #556]	; (8a62c <Coarse_DutyCorrection+0x4e4>)
   8a3fe:	4610      	mov	r0, r2
   8a400:	4798      	blx	r3
   8a402:	4603      	mov	r3, r0
   8a404:	2b00      	cmp	r3, #0
   8a406:	d025      	beq.n	8a454 <Coarse_DutyCorrection+0x30c>
		{
			avg_duty = avg_duty + duty_count;
   8a408:	4b89      	ldr	r3, [pc, #548]	; (8a630 <Coarse_DutyCorrection+0x4e8>)
   8a40a:	781b      	ldrb	r3, [r3, #0]
   8a40c:	b29a      	uxth	r2, r3
   8a40e:	4b89      	ldr	r3, [pc, #548]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a410:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a414:	b29b      	uxth	r3, r3
   8a416:	4413      	add	r3, r2
   8a418:	b29b      	uxth	r3, r3
   8a41a:	b21a      	sxth	r2, r3
   8a41c:	4b85      	ldr	r3, [pc, #532]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a41e:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a420:	4b84      	ldr	r3, [pc, #528]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a422:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a426:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a42a:	4293      	cmp	r3, r2
   8a42c:	f340 82f9 	ble.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a430:	4b81      	ldr	r3, [pc, #516]	; (8a638 <Coarse_DutyCorrection+0x4f0>)
   8a432:	681a      	ldr	r2, [r3, #0]
   8a434:	4b81      	ldr	r3, [pc, #516]	; (8a63c <Coarse_DutyCorrection+0x4f4>)
   8a436:	6819      	ldr	r1, [r3, #0]
   8a438:	4b81      	ldr	r3, [pc, #516]	; (8a640 <Coarse_DutyCorrection+0x4f8>)
   8a43a:	4610      	mov	r0, r2
   8a43c:	4798      	blx	r3
   8a43e:	4603      	mov	r3, r0
   8a440:	2b00      	cmp	r3, #0
   8a442:	d100      	bne.n	8a446 <Coarse_DutyCorrection+0x2fe>
   8a444:	e2ed      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 2300;
   8a446:	4b7b      	ldr	r3, [pc, #492]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a448:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a44c:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a44e:	4b7d      	ldr	r3, [pc, #500]	; (8a644 <Coarse_DutyCorrection+0x4fc>)
   8a450:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a452:	e2e6      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a454:	4b72      	ldr	r3, [pc, #456]	; (8a620 <Coarse_DutyCorrection+0x4d8>)
   8a456:	781b      	ldrb	r3, [r3, #0]
   8a458:	2b02      	cmp	r3, #2
   8a45a:	f040 82e2 	bne.w	8aa22 <Coarse_DutyCorrection+0x8da>
		avg_duty = avg_duty;
   8a45e:	4b75      	ldr	r3, [pc, #468]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a460:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a464:	4b73      	ldr	r3, [pc, #460]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a466:	801a      	strh	r2, [r3, #0]
		}
	
		avg_duty = avg_duty;
		
	}
}
   8a468:	e2db      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}

	else if (SYSTEM_FLOW == 500)
   8a46a:	4b77      	ldr	r3, [pc, #476]	; (8a648 <Coarse_DutyCorrection+0x500>)
   8a46c:	681b      	ldr	r3, [r3, #0]
   8a46e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8a472:	f040 815a 	bne.w	8a72a <Coarse_DutyCorrection+0x5e2>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
   8a476:	4b6a      	ldr	r3, [pc, #424]	; (8a620 <Coarse_DutyCorrection+0x4d8>)
   8a478:	781b      	ldrb	r3, [r3, #0]
   8a47a:	2b00      	cmp	r3, #0
   8a47c:	d128      	bne.n	8a4d0 <Coarse_DutyCorrection+0x388>
   8a47e:	4b6a      	ldr	r3, [pc, #424]	; (8a628 <Coarse_DutyCorrection+0x4e0>)
   8a480:	681a      	ldr	r2, [r3, #0]
   8a482:	4b72      	ldr	r3, [pc, #456]	; (8a64c <Coarse_DutyCorrection+0x504>)
   8a484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a488:	4610      	mov	r0, r2
   8a48a:	4798      	blx	r3
   8a48c:	4603      	mov	r3, r0
   8a48e:	4618      	mov	r0, r3
   8a490:	4b64      	ldr	r3, [pc, #400]	; (8a624 <Coarse_DutyCorrection+0x4dc>)
   8a492:	681a      	ldr	r2, [r3, #0]
   8a494:	4b65      	ldr	r3, [pc, #404]	; (8a62c <Coarse_DutyCorrection+0x4e4>)
   8a496:	4611      	mov	r1, r2
   8a498:	4798      	blx	r3
   8a49a:	4603      	mov	r3, r0
   8a49c:	2b00      	cmp	r3, #0
   8a49e:	d017      	beq.n	8a4d0 <Coarse_DutyCorrection+0x388>
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
   8a4a0:	4b64      	ldr	r3, [pc, #400]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a4a2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a4a6:	b29a      	uxth	r2, r3
   8a4a8:	4b61      	ldr	r3, [pc, #388]	; (8a630 <Coarse_DutyCorrection+0x4e8>)
   8a4aa:	781b      	ldrb	r3, [r3, #0]
   8a4ac:	b29b      	uxth	r3, r3
   8a4ae:	1ad3      	subs	r3, r2, r3
   8a4b0:	b29b      	uxth	r3, r3
   8a4b2:	b21a      	sxth	r2, r3
   8a4b4:	4b5f      	ldr	r3, [pc, #380]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a4b6:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4b8:	4b5e      	ldr	r3, [pc, #376]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a4ba:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a4be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a4c2:	f300 82ae 	bgt.w	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a4c6:	4b5b      	ldr	r3, [pc, #364]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a4c8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a4cc:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 39 
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4ce:	e2a8      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a4d0:	4b53      	ldr	r3, [pc, #332]	; (8a620 <Coarse_DutyCorrection+0x4d8>)
   8a4d2:	781b      	ldrb	r3, [r3, #0]
   8a4d4:	2b00      	cmp	r3, #0
   8a4d6:	d157      	bne.n	8a588 <Coarse_DutyCorrection+0x440>
   8a4d8:	4b52      	ldr	r3, [pc, #328]	; (8a624 <Coarse_DutyCorrection+0x4dc>)
   8a4da:	681a      	ldr	r2, [r3, #0]
   8a4dc:	4b5c      	ldr	r3, [pc, #368]	; (8a650 <Coarse_DutyCorrection+0x508>)
   8a4de:	4610      	mov	r0, r2
   8a4e0:	4798      	blx	r3
   8a4e2:	4605      	mov	r5, r0
   8a4e4:	460e      	mov	r6, r1
   8a4e6:	4b50      	ldr	r3, [pc, #320]	; (8a628 <Coarse_DutyCorrection+0x4e0>)
   8a4e8:	681a      	ldr	r2, [r3, #0]
   8a4ea:	4b59      	ldr	r3, [pc, #356]	; (8a650 <Coarse_DutyCorrection+0x508>)
   8a4ec:	4610      	mov	r0, r2
   8a4ee:	4798      	blx	r3
   8a4f0:	4c58      	ldr	r4, [pc, #352]	; (8a654 <Coarse_DutyCorrection+0x50c>)
   8a4f2:	f04f 0200 	mov.w	r2, #0
   8a4f6:	4b58      	ldr	r3, [pc, #352]	; (8a658 <Coarse_DutyCorrection+0x510>)
   8a4f8:	47a0      	blx	r4
   8a4fa:	4603      	mov	r3, r0
   8a4fc:	460c      	mov	r4, r1
   8a4fe:	461a      	mov	r2, r3
   8a500:	4623      	mov	r3, r4
   8a502:	4c56      	ldr	r4, [pc, #344]	; (8a65c <Coarse_DutyCorrection+0x514>)
   8a504:	4628      	mov	r0, r5
   8a506:	4631      	mov	r1, r6
   8a508:	47a0      	blx	r4
   8a50a:	4603      	mov	r3, r0
   8a50c:	2b00      	cmp	r3, #0
   8a50e:	d03b      	beq.n	8a588 <Coarse_DutyCorrection+0x440>
   8a510:	4b49      	ldr	r3, [pc, #292]	; (8a638 <Coarse_DutyCorrection+0x4f0>)
   8a512:	681a      	ldr	r2, [r3, #0]
   8a514:	4b4e      	ldr	r3, [pc, #312]	; (8a650 <Coarse_DutyCorrection+0x508>)
   8a516:	4610      	mov	r0, r2
   8a518:	4798      	blx	r3
   8a51a:	4605      	mov	r5, r0
   8a51c:	460e      	mov	r6, r1
   8a51e:	4b47      	ldr	r3, [pc, #284]	; (8a63c <Coarse_DutyCorrection+0x4f4>)
   8a520:	681a      	ldr	r2, [r3, #0]
   8a522:	4b4b      	ldr	r3, [pc, #300]	; (8a650 <Coarse_DutyCorrection+0x508>)
   8a524:	4610      	mov	r0, r2
   8a526:	4798      	blx	r3
   8a528:	4c4a      	ldr	r4, [pc, #296]	; (8a654 <Coarse_DutyCorrection+0x50c>)
   8a52a:	a33b      	add	r3, pc, #236	; (adr r3, 8a618 <Coarse_DutyCorrection+0x4d0>)
   8a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a530:	47a0      	blx	r4
   8a532:	4603      	mov	r3, r0
   8a534:	460c      	mov	r4, r1
   8a536:	461a      	mov	r2, r3
   8a538:	4623      	mov	r3, r4
   8a53a:	4c49      	ldr	r4, [pc, #292]	; (8a660 <Coarse_DutyCorrection+0x518>)
   8a53c:	4628      	mov	r0, r5
   8a53e:	4631      	mov	r1, r6
   8a540:	47a0      	blx	r4
   8a542:	4603      	mov	r3, r0
   8a544:	2b00      	cmp	r3, #0
   8a546:	d01f      	beq.n	8a588 <Coarse_DutyCorrection+0x440>
		{
			avg_duty = avg_duty - 10; 
   8a548:	4b3a      	ldr	r3, [pc, #232]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a54a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a54e:	b29b      	uxth	r3, r3
   8a550:	3b0a      	subs	r3, #10
   8a552:	b29b      	uxth	r3, r3
   8a554:	b21a      	sxth	r2, r3
   8a556:	4b37      	ldr	r3, [pc, #220]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a558:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a55a:	4b36      	ldr	r3, [pc, #216]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a55c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a564:	f300 825d 	bgt.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a568:	4b33      	ldr	r3, [pc, #204]	; (8a638 <Coarse_DutyCorrection+0x4f0>)
   8a56a:	681a      	ldr	r2, [r3, #0]
   8a56c:	4b33      	ldr	r3, [pc, #204]	; (8a63c <Coarse_DutyCorrection+0x4f4>)
   8a56e:	6819      	ldr	r1, [r3, #0]
   8a570:	4b3c      	ldr	r3, [pc, #240]	; (8a664 <Coarse_DutyCorrection+0x51c>)
   8a572:	4610      	mov	r0, r2
   8a574:	4798      	blx	r3
   8a576:	4603      	mov	r3, r0
   8a578:	2b00      	cmp	r3, #0
   8a57a:	d100      	bne.n	8a57e <Coarse_DutyCorrection+0x436>
   8a57c:	e251      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a57e:	4b2d      	ldr	r3, [pc, #180]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a580:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a584:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10; 
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a586:	e24c      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a588:	4b25      	ldr	r3, [pc, #148]	; (8a620 <Coarse_DutyCorrection+0x4d8>)
   8a58a:	781b      	ldrb	r3, [r3, #0]
   8a58c:	2b00      	cmp	r3, #0
   8a58e:	d173      	bne.n	8a678 <Coarse_DutyCorrection+0x530>
   8a590:	4b25      	ldr	r3, [pc, #148]	; (8a628 <Coarse_DutyCorrection+0x4e0>)
   8a592:	681a      	ldr	r2, [r3, #0]
   8a594:	4b34      	ldr	r3, [pc, #208]	; (8a668 <Coarse_DutyCorrection+0x520>)
   8a596:	4935      	ldr	r1, [pc, #212]	; (8a66c <Coarse_DutyCorrection+0x524>)
   8a598:	4610      	mov	r0, r2
   8a59a:	4798      	blx	r3
   8a59c:	4603      	mov	r3, r0
   8a59e:	4618      	mov	r0, r3
   8a5a0:	4b20      	ldr	r3, [pc, #128]	; (8a624 <Coarse_DutyCorrection+0x4dc>)
   8a5a2:	681a      	ldr	r2, [r3, #0]
   8a5a4:	4b21      	ldr	r3, [pc, #132]	; (8a62c <Coarse_DutyCorrection+0x4e4>)
   8a5a6:	4611      	mov	r1, r2
   8a5a8:	4798      	blx	r3
   8a5aa:	4603      	mov	r3, r0
   8a5ac:	2b00      	cmp	r3, #0
   8a5ae:	d063      	beq.n	8a678 <Coarse_DutyCorrection+0x530>
   8a5b0:	4b1d      	ldr	r3, [pc, #116]	; (8a628 <Coarse_DutyCorrection+0x4e0>)
   8a5b2:	681a      	ldr	r2, [r3, #0]
   8a5b4:	4b25      	ldr	r3, [pc, #148]	; (8a64c <Coarse_DutyCorrection+0x504>)
   8a5b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a5ba:	4610      	mov	r0, r2
   8a5bc:	4798      	blx	r3
   8a5be:	4603      	mov	r3, r0
   8a5c0:	4618      	mov	r0, r3
   8a5c2:	4b18      	ldr	r3, [pc, #96]	; (8a624 <Coarse_DutyCorrection+0x4dc>)
   8a5c4:	681a      	ldr	r2, [r3, #0]
   8a5c6:	4b1e      	ldr	r3, [pc, #120]	; (8a640 <Coarse_DutyCorrection+0x4f8>)
   8a5c8:	4611      	mov	r1, r2
   8a5ca:	4798      	blx	r3
   8a5cc:	4603      	mov	r3, r0
   8a5ce:	2b00      	cmp	r3, #0
   8a5d0:	d052      	beq.n	8a678 <Coarse_DutyCorrection+0x530>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a5d2:	4b27      	ldr	r3, [pc, #156]	; (8a670 <Coarse_DutyCorrection+0x528>)
   8a5d4:	681a      	ldr	r2, [r3, #0]
   8a5d6:	4b15      	ldr	r3, [pc, #84]	; (8a62c <Coarse_DutyCorrection+0x4e4>)
   8a5d8:	4926      	ldr	r1, [pc, #152]	; (8a674 <Coarse_DutyCorrection+0x52c>)
   8a5da:	4610      	mov	r0, r2
   8a5dc:	4798      	blx	r3
   8a5de:	4603      	mov	r3, r0
   8a5e0:	2b00      	cmp	r3, #0
   8a5e2:	f000 821e 	beq.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a5e6:	4b14      	ldr	r3, [pc, #80]	; (8a638 <Coarse_DutyCorrection+0x4f0>)
   8a5e8:	681a      	ldr	r2, [r3, #0]
   8a5ea:	4b14      	ldr	r3, [pc, #80]	; (8a63c <Coarse_DutyCorrection+0x4f4>)
   8a5ec:	6819      	ldr	r1, [r3, #0]
   8a5ee:	4b1d      	ldr	r3, [pc, #116]	; (8a664 <Coarse_DutyCorrection+0x51c>)
   8a5f0:	4610      	mov	r0, r2
   8a5f2:	4798      	blx	r3
   8a5f4:	4603      	mov	r3, r0
   8a5f6:	2b00      	cmp	r3, #0
   8a5f8:	d100      	bne.n	8a5fc <Coarse_DutyCorrection+0x4b4>
   8a5fa:	e212      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a5fc:	4b0c      	ldr	r3, [pc, #48]	; (8a630 <Coarse_DutyCorrection+0x4e8>)
   8a5fe:	781b      	ldrb	r3, [r3, #0]
   8a600:	b29a      	uxth	r2, r3
   8a602:	4b0c      	ldr	r3, [pc, #48]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a604:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a608:	b29b      	uxth	r3, r3
   8a60a:	4413      	add	r3, r2
   8a60c:	b29b      	uxth	r3, r3
   8a60e:	b21a      	sxth	r2, r3
   8a610:	4b08      	ldr	r3, [pc, #32]	; (8a634 <Coarse_DutyCorrection+0x4ec>)
   8a612:	801a      	strh	r2, [r3, #0]
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a614:	e205      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
   8a616:	bf00      	nop
   8a618:	9999999a 	.word	0x9999999a
   8a61c:	3fb99999 	.word	0x3fb99999
   8a620:	2007218a 	.word	0x2007218a
   8a624:	200719b0 	.word	0x200719b0
   8a628:	2007218c 	.word	0x2007218c
   8a62c:	000a68e1 	.word	0x000a68e1
   8a630:	200719d4 	.word	0x200719d4
   8a634:	2007199e 	.word	0x2007199e
   8a638:	200719b4 	.word	0x200719b4
   8a63c:	20072178 	.word	0x20072178
   8a640:	000a68f5 	.word	0x000a68f5
   8a644:	00099a95 	.word	0x00099a95
   8a648:	20070548 	.word	0x20070548
   8a64c:	000a6381 	.word	0x000a6381
   8a650:	000a5c69 	.word	0x000a5c69
   8a654:	000a59ad 	.word	0x000a59ad
   8a658:	3fe00000 	.word	0x3fe00000
   8a65c:	000a621d 	.word	0x000a621d
   8a660:	000a6231 	.word	0x000a6231
   8a664:	000a68cd 	.word	0x000a68cd
   8a668:	000a637d 	.word	0x000a637d
   8a66c:	40400000 	.word	0x40400000
   8a670:	200719ac 	.word	0x200719ac
   8a674:	42100000 	.word	0x42100000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}           //To avoid TS2 getting stuck at 36 or 36.5
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2-2) )  
   8a678:	4b93      	ldr	r3, [pc, #588]	; (8a8c8 <Coarse_DutyCorrection+0x780>)
   8a67a:	781b      	ldrb	r3, [r3, #0]
   8a67c:	2b01      	cmp	r3, #1
   8a67e:	d149      	bne.n	8a714 <Coarse_DutyCorrection+0x5cc>
   8a680:	4b92      	ldr	r3, [pc, #584]	; (8a8cc <Coarse_DutyCorrection+0x784>)
   8a682:	681a      	ldr	r2, [r3, #0]
   8a684:	4b92      	ldr	r3, [pc, #584]	; (8a8d0 <Coarse_DutyCorrection+0x788>)
   8a686:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a68a:	4610      	mov	r0, r2
   8a68c:	4798      	blx	r3
   8a68e:	4603      	mov	r3, r0
   8a690:	4618      	mov	r0, r3
   8a692:	4b90      	ldr	r3, [pc, #576]	; (8a8d4 <Coarse_DutyCorrection+0x78c>)
   8a694:	681a      	ldr	r2, [r3, #0]
   8a696:	4b90      	ldr	r3, [pc, #576]	; (8a8d8 <Coarse_DutyCorrection+0x790>)
   8a698:	4611      	mov	r1, r2
   8a69a:	4798      	blx	r3
   8a69c:	4603      	mov	r3, r0
   8a69e:	2b00      	cmp	r3, #0
   8a6a0:	d038      	beq.n	8a714 <Coarse_DutyCorrection+0x5cc>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a6a2:	4b8e      	ldr	r3, [pc, #568]	; (8a8dc <Coarse_DutyCorrection+0x794>)
   8a6a4:	681a      	ldr	r2, [r3, #0]
   8a6a6:	4b8e      	ldr	r3, [pc, #568]	; (8a8e0 <Coarse_DutyCorrection+0x798>)
   8a6a8:	498e      	ldr	r1, [pc, #568]	; (8a8e4 <Coarse_DutyCorrection+0x79c>)
   8a6aa:	4610      	mov	r0, r2
   8a6ac:	4798      	blx	r3
   8a6ae:	4603      	mov	r3, r0
   8a6b0:	2b00      	cmp	r3, #0
   8a6b2:	d015      	beq.n	8a6e0 <Coarse_DutyCorrection+0x598>
   8a6b4:	4b8c      	ldr	r3, [pc, #560]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a6b6:	681a      	ldr	r2, [r3, #0]
   8a6b8:	4b8c      	ldr	r3, [pc, #560]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a6ba:	6819      	ldr	r1, [r3, #0]
   8a6bc:	4b8c      	ldr	r3, [pc, #560]	; (8a8f0 <Coarse_DutyCorrection+0x7a8>)
   8a6be:	4610      	mov	r0, r2
   8a6c0:	4798      	blx	r3
   8a6c2:	4603      	mov	r3, r0
   8a6c4:	2b00      	cmp	r3, #0
   8a6c6:	d00b      	beq.n	8a6e0 <Coarse_DutyCorrection+0x598>
			{
				avg_duty = avg_duty + duty_count;            
   8a6c8:	4b8a      	ldr	r3, [pc, #552]	; (8a8f4 <Coarse_DutyCorrection+0x7ac>)
   8a6ca:	781b      	ldrb	r3, [r3, #0]
   8a6cc:	b29a      	uxth	r2, r3
   8a6ce:	4b8a      	ldr	r3, [pc, #552]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a6d0:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a6d4:	b29b      	uxth	r3, r3
   8a6d6:	4413      	add	r3, r2
   8a6d8:	b29b      	uxth	r3, r3
   8a6da:	b21a      	sxth	r2, r3
   8a6dc:	4b86      	ldr	r3, [pc, #536]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a6de:	801a      	strh	r2, [r3, #0]
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a6e0:	4b85      	ldr	r3, [pc, #532]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a6e2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a6e6:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a6ea:	4293      	cmp	r3, r2
   8a6ec:	f340 8199 	ble.w	8aa22 <Coarse_DutyCorrection+0x8da>
   8a6f0:	4b7d      	ldr	r3, [pc, #500]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a6f2:	681a      	ldr	r2, [r3, #0]
   8a6f4:	4b7d      	ldr	r3, [pc, #500]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a6f6:	6819      	ldr	r1, [r3, #0]
   8a6f8:	4b77      	ldr	r3, [pc, #476]	; (8a8d8 <Coarse_DutyCorrection+0x790>)
   8a6fa:	4610      	mov	r0, r2
   8a6fc:	4798      	blx	r3
   8a6fe:	4603      	mov	r3, r0
   8a700:	2b00      	cmp	r3, #0
   8a702:	d100      	bne.n	8a706 <Coarse_DutyCorrection+0x5be>
   8a704:	e18d      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
			{
				avg_duty = 2300;
   8a706:	4b7c      	ldr	r3, [pc, #496]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a708:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a70c:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a70e:	4b7b      	ldr	r3, [pc, #492]	; (8a8fc <Coarse_DutyCorrection+0x7b4>)
   8a710:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a712:	e186      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a714:	4b6c      	ldr	r3, [pc, #432]	; (8a8c8 <Coarse_DutyCorrection+0x780>)
   8a716:	781b      	ldrb	r3, [r3, #0]
   8a718:	2b02      	cmp	r3, #2
   8a71a:	f040 8182 	bne.w	8aa22 <Coarse_DutyCorrection+0x8da>
		avg_duty = avg_duty;
   8a71e:	4b76      	ldr	r3, [pc, #472]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a720:	f9b3 2000 	ldrsh.w	r2, [r3]
   8a724:	4b74      	ldr	r3, [pc, #464]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a726:	801a      	strh	r2, [r3, #0]
		}
	
		avg_duty = avg_duty;
		
	}
}
   8a728:	e17b      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
		avg_duty = avg_duty;
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8a72a:	4b75      	ldr	r3, [pc, #468]	; (8a900 <Coarse_DutyCorrection+0x7b8>)
   8a72c:	681b      	ldr	r3, [r3, #0]
   8a72e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8a732:	f040 8176 	bne.w	8aa22 <Coarse_DutyCorrection+0x8da>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8a736:	4b64      	ldr	r3, [pc, #400]	; (8a8c8 <Coarse_DutyCorrection+0x780>)
   8a738:	781b      	ldrb	r3, [r3, #0]
   8a73a:	2b00      	cmp	r3, #0
   8a73c:	d133      	bne.n	8a7a6 <Coarse_DutyCorrection+0x65e>
   8a73e:	4b63      	ldr	r3, [pc, #396]	; (8a8cc <Coarse_DutyCorrection+0x784>)
   8a740:	681a      	ldr	r2, [r3, #0]
   8a742:	4b70      	ldr	r3, [pc, #448]	; (8a904 <Coarse_DutyCorrection+0x7bc>)
   8a744:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a748:	4610      	mov	r0, r2
   8a74a:	4798      	blx	r3
   8a74c:	4603      	mov	r3, r0
   8a74e:	4618      	mov	r0, r3
   8a750:	4b60      	ldr	r3, [pc, #384]	; (8a8d4 <Coarse_DutyCorrection+0x78c>)
   8a752:	681a      	ldr	r2, [r3, #0]
   8a754:	4b62      	ldr	r3, [pc, #392]	; (8a8e0 <Coarse_DutyCorrection+0x798>)
   8a756:	4611      	mov	r1, r2
   8a758:	4798      	blx	r3
   8a75a:	4603      	mov	r3, r0
   8a75c:	2b00      	cmp	r3, #0
   8a75e:	d022      	beq.n	8a7a6 <Coarse_DutyCorrection+0x65e>
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
   8a760:	4b65      	ldr	r3, [pc, #404]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a762:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a766:	b29a      	uxth	r2, r3
   8a768:	4b62      	ldr	r3, [pc, #392]	; (8a8f4 <Coarse_DutyCorrection+0x7ac>)
   8a76a:	781b      	ldrb	r3, [r3, #0]
   8a76c:	b29b      	uxth	r3, r3
   8a76e:	1ad3      	subs	r3, r2, r3
   8a770:	b29b      	uxth	r3, r3
   8a772:	b21a      	sxth	r2, r3
   8a774:	4b60      	ldr	r3, [pc, #384]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a776:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a778:	4b5f      	ldr	r3, [pc, #380]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a77a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a77e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a782:	f300 8148 	bgt.w	8aa16 <Coarse_DutyCorrection+0x8ce>
   8a786:	4b58      	ldr	r3, [pc, #352]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a788:	681a      	ldr	r2, [r3, #0]
   8a78a:	4b58      	ldr	r3, [pc, #352]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a78c:	6819      	ldr	r1, [r3, #0]
   8a78e:	4b58      	ldr	r3, [pc, #352]	; (8a8f0 <Coarse_DutyCorrection+0x7a8>)
   8a790:	4610      	mov	r0, r2
   8a792:	4798      	blx	r3
   8a794:	4603      	mov	r3, r0
   8a796:	2b00      	cmp	r3, #0
   8a798:	d100      	bne.n	8a79c <Coarse_DutyCorrection+0x654>
   8a79a:	e13c      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a79c:	4b56      	ldr	r3, [pc, #344]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a79e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a7a2:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a7a4:	e137      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a7a6:	4b48      	ldr	r3, [pc, #288]	; (8a8c8 <Coarse_DutyCorrection+0x780>)
   8a7a8:	781b      	ldrb	r3, [r3, #0]
   8a7aa:	2b00      	cmp	r3, #0
   8a7ac:	d145      	bne.n	8a83a <Coarse_DutyCorrection+0x6f2>
   8a7ae:	4b49      	ldr	r3, [pc, #292]	; (8a8d4 <Coarse_DutyCorrection+0x78c>)
   8a7b0:	681a      	ldr	r2, [r3, #0]
   8a7b2:	4b46      	ldr	r3, [pc, #280]	; (8a8cc <Coarse_DutyCorrection+0x784>)
   8a7b4:	6819      	ldr	r1, [r3, #0]
   8a7b6:	4b48      	ldr	r3, [pc, #288]	; (8a8d8 <Coarse_DutyCorrection+0x790>)
   8a7b8:	4610      	mov	r0, r2
   8a7ba:	4798      	blx	r3
   8a7bc:	4603      	mov	r3, r0
   8a7be:	2b00      	cmp	r3, #0
   8a7c0:	d03b      	beq.n	8a83a <Coarse_DutyCorrection+0x6f2>
   8a7c2:	4b49      	ldr	r3, [pc, #292]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a7c4:	681a      	ldr	r2, [r3, #0]
   8a7c6:	4b50      	ldr	r3, [pc, #320]	; (8a908 <Coarse_DutyCorrection+0x7c0>)
   8a7c8:	4610      	mov	r0, r2
   8a7ca:	4798      	blx	r3
   8a7cc:	4605      	mov	r5, r0
   8a7ce:	460e      	mov	r6, r1
   8a7d0:	4b46      	ldr	r3, [pc, #280]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a7d2:	681a      	ldr	r2, [r3, #0]
   8a7d4:	4b4c      	ldr	r3, [pc, #304]	; (8a908 <Coarse_DutyCorrection+0x7c0>)
   8a7d6:	4610      	mov	r0, r2
   8a7d8:	4798      	blx	r3
   8a7da:	4c4c      	ldr	r4, [pc, #304]	; (8a90c <Coarse_DutyCorrection+0x7c4>)
   8a7dc:	a338      	add	r3, pc, #224	; (adr r3, 8a8c0 <Coarse_DutyCorrection+0x778>)
   8a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a7e2:	47a0      	blx	r4
   8a7e4:	4603      	mov	r3, r0
   8a7e6:	460c      	mov	r4, r1
   8a7e8:	461a      	mov	r2, r3
   8a7ea:	4623      	mov	r3, r4
   8a7ec:	4c48      	ldr	r4, [pc, #288]	; (8a910 <Coarse_DutyCorrection+0x7c8>)
   8a7ee:	4628      	mov	r0, r5
   8a7f0:	4631      	mov	r1, r6
   8a7f2:	47a0      	blx	r4
   8a7f4:	4603      	mov	r3, r0
   8a7f6:	2b00      	cmp	r3, #0
   8a7f8:	d01f      	beq.n	8a83a <Coarse_DutyCorrection+0x6f2>
		{
			avg_duty = avg_duty - 10;
   8a7fa:	4b3f      	ldr	r3, [pc, #252]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a7fc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a800:	b29b      	uxth	r3, r3
   8a802:	3b0a      	subs	r3, #10
   8a804:	b29b      	uxth	r3, r3
   8a806:	b21a      	sxth	r2, r3
   8a808:	4b3b      	ldr	r3, [pc, #236]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a80a:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a80c:	4b3a      	ldr	r3, [pc, #232]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a80e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a816:	f300 80fe 	bgt.w	8aa16 <Coarse_DutyCorrection+0x8ce>
   8a81a:	4b33      	ldr	r3, [pc, #204]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a81c:	681a      	ldr	r2, [r3, #0]
   8a81e:	4b33      	ldr	r3, [pc, #204]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a820:	6819      	ldr	r1, [r3, #0]
   8a822:	4b33      	ldr	r3, [pc, #204]	; (8a8f0 <Coarse_DutyCorrection+0x7a8>)
   8a824:	4610      	mov	r0, r2
   8a826:	4798      	blx	r3
   8a828:	4603      	mov	r3, r0
   8a82a:	2b00      	cmp	r3, #0
   8a82c:	d100      	bne.n	8a830 <Coarse_DutyCorrection+0x6e8>
   8a82e:	e0f2      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a830:	4b31      	ldr	r3, [pc, #196]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a832:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a836:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a838:	e0ed      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
   8a83a:	4b23      	ldr	r3, [pc, #140]	; (8a8c8 <Coarse_DutyCorrection+0x780>)
   8a83c:	781b      	ldrb	r3, [r3, #0]
   8a83e:	2b00      	cmp	r3, #0
   8a840:	d16a      	bne.n	8a918 <Coarse_DutyCorrection+0x7d0>
   8a842:	4b22      	ldr	r3, [pc, #136]	; (8a8cc <Coarse_DutyCorrection+0x784>)
   8a844:	681a      	ldr	r2, [r3, #0]
   8a846:	4b22      	ldr	r3, [pc, #136]	; (8a8d0 <Coarse_DutyCorrection+0x788>)
   8a848:	4932      	ldr	r1, [pc, #200]	; (8a914 <Coarse_DutyCorrection+0x7cc>)
   8a84a:	4610      	mov	r0, r2
   8a84c:	4798      	blx	r3
   8a84e:	4603      	mov	r3, r0
   8a850:	4618      	mov	r0, r3
   8a852:	4b20      	ldr	r3, [pc, #128]	; (8a8d4 <Coarse_DutyCorrection+0x78c>)
   8a854:	681a      	ldr	r2, [r3, #0]
   8a856:	4b22      	ldr	r3, [pc, #136]	; (8a8e0 <Coarse_DutyCorrection+0x798>)
   8a858:	4611      	mov	r1, r2
   8a85a:	4798      	blx	r3
   8a85c:	4603      	mov	r3, r0
   8a85e:	2b00      	cmp	r3, #0
   8a860:	d05a      	beq.n	8a918 <Coarse_DutyCorrection+0x7d0>
   8a862:	4b1c      	ldr	r3, [pc, #112]	; (8a8d4 <Coarse_DutyCorrection+0x78c>)
   8a864:	681a      	ldr	r2, [r3, #0]
   8a866:	4b19      	ldr	r3, [pc, #100]	; (8a8cc <Coarse_DutyCorrection+0x784>)
   8a868:	6819      	ldr	r1, [r3, #0]
   8a86a:	4b1d      	ldr	r3, [pc, #116]	; (8a8e0 <Coarse_DutyCorrection+0x798>)
   8a86c:	4610      	mov	r0, r2
   8a86e:	4798      	blx	r3
   8a870:	4603      	mov	r3, r0
   8a872:	2b00      	cmp	r3, #0
   8a874:	d050      	beq.n	8a918 <Coarse_DutyCorrection+0x7d0>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a876:	4b19      	ldr	r3, [pc, #100]	; (8a8dc <Coarse_DutyCorrection+0x794>)
   8a878:	681a      	ldr	r2, [r3, #0]
   8a87a:	4b19      	ldr	r3, [pc, #100]	; (8a8e0 <Coarse_DutyCorrection+0x798>)
   8a87c:	4919      	ldr	r1, [pc, #100]	; (8a8e4 <Coarse_DutyCorrection+0x79c>)
   8a87e:	4610      	mov	r0, r2
   8a880:	4798      	blx	r3
   8a882:	4603      	mov	r3, r0
   8a884:	2b00      	cmp	r3, #0
   8a886:	f000 80c6 	beq.w	8aa16 <Coarse_DutyCorrection+0x8ce>
   8a88a:	4b17      	ldr	r3, [pc, #92]	; (8a8e8 <Coarse_DutyCorrection+0x7a0>)
   8a88c:	681a      	ldr	r2, [r3, #0]
   8a88e:	4b17      	ldr	r3, [pc, #92]	; (8a8ec <Coarse_DutyCorrection+0x7a4>)
   8a890:	6819      	ldr	r1, [r3, #0]
   8a892:	4b17      	ldr	r3, [pc, #92]	; (8a8f0 <Coarse_DutyCorrection+0x7a8>)
   8a894:	4610      	mov	r0, r2
   8a896:	4798      	blx	r3
   8a898:	4603      	mov	r3, r0
   8a89a:	2b00      	cmp	r3, #0
   8a89c:	d100      	bne.n	8a8a0 <Coarse_DutyCorrection+0x758>
   8a89e:	e0ba      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a8a0:	4b14      	ldr	r3, [pc, #80]	; (8a8f4 <Coarse_DutyCorrection+0x7ac>)
   8a8a2:	781b      	ldrb	r3, [r3, #0]
   8a8a4:	b29a      	uxth	r2, r3
   8a8a6:	4b14      	ldr	r3, [pc, #80]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a8a8:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a8ac:	b29b      	uxth	r3, r3
   8a8ae:	4413      	add	r3, r2
   8a8b0:	b29b      	uxth	r3, r3
   8a8b2:	b21a      	sxth	r2, r3
   8a8b4:	4b10      	ldr	r3, [pc, #64]	; (8a8f8 <Coarse_DutyCorrection+0x7b0>)
   8a8b6:	801a      	strh	r2, [r3, #0]
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a8b8:	e0ad      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
   8a8ba:	bf00      	nop
   8a8bc:	f3af 8000 	nop.w
   8a8c0:	9999999a 	.word	0x9999999a
   8a8c4:	3fb99999 	.word	0x3fb99999
   8a8c8:	2007218a 	.word	0x2007218a
   8a8cc:	2007218c 	.word	0x2007218c
   8a8d0:	000a637d 	.word	0x000a637d
   8a8d4:	200719b0 	.word	0x200719b0
   8a8d8:	000a68f5 	.word	0x000a68f5
   8a8dc:	200719ac 	.word	0x200719ac
   8a8e0:	000a68e1 	.word	0x000a68e1
   8a8e4:	42100000 	.word	0x42100000
   8a8e8:	200719b4 	.word	0x200719b4
   8a8ec:	20072178 	.word	0x20072178
   8a8f0:	000a68cd 	.word	0x000a68cd
   8a8f4:	200719d4 	.word	0x200719d4
   8a8f8:	2007199e 	.word	0x2007199e
   8a8fc:	00099a95 	.word	0x00099a95
   8a900:	20070548 	.word	0x20070548
   8a904:	000a6381 	.word	0x000a6381
   8a908:	000a5c69 	.word	0x000a5c69
   8a90c:	000a59ad 	.word	0x000a59ad
   8a910:	000a6231 	.word	0x000a6231
   8a914:	40400000 	.word	0x40400000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )        // last was 39
   8a918:	4b45      	ldr	r3, [pc, #276]	; (8aa30 <Coarse_DutyCorrection+0x8e8>)
   8a91a:	781b      	ldrb	r3, [r3, #0]
   8a91c:	2b01      	cmp	r3, #1
   8a91e:	d136      	bne.n	8a98e <Coarse_DutyCorrection+0x846>
   8a920:	4b44      	ldr	r3, [pc, #272]	; (8aa34 <Coarse_DutyCorrection+0x8ec>)
   8a922:	681a      	ldr	r2, [r3, #0]
   8a924:	4b44      	ldr	r3, [pc, #272]	; (8aa38 <Coarse_DutyCorrection+0x8f0>)
   8a926:	6819      	ldr	r1, [r3, #0]
   8a928:	4b44      	ldr	r3, [pc, #272]	; (8aa3c <Coarse_DutyCorrection+0x8f4>)
   8a92a:	4610      	mov	r0, r2
   8a92c:	4798      	blx	r3
   8a92e:	4603      	mov	r3, r0
   8a930:	2b00      	cmp	r3, #0
   8a932:	d02c      	beq.n	8a98e <Coarse_DutyCorrection+0x846>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a934:	4b42      	ldr	r3, [pc, #264]	; (8aa40 <Coarse_DutyCorrection+0x8f8>)
   8a936:	681a      	ldr	r2, [r3, #0]
   8a938:	4b40      	ldr	r3, [pc, #256]	; (8aa3c <Coarse_DutyCorrection+0x8f4>)
   8a93a:	4942      	ldr	r1, [pc, #264]	; (8aa44 <Coarse_DutyCorrection+0x8fc>)
   8a93c:	4610      	mov	r0, r2
   8a93e:	4798      	blx	r3
   8a940:	4603      	mov	r3, r0
   8a942:	2b00      	cmp	r3, #0
   8a944:	d015      	beq.n	8a972 <Coarse_DutyCorrection+0x82a>
   8a946:	4b40      	ldr	r3, [pc, #256]	; (8aa48 <Coarse_DutyCorrection+0x900>)
   8a948:	681a      	ldr	r2, [r3, #0]
   8a94a:	4b40      	ldr	r3, [pc, #256]	; (8aa4c <Coarse_DutyCorrection+0x904>)
   8a94c:	6819      	ldr	r1, [r3, #0]
   8a94e:	4b40      	ldr	r3, [pc, #256]	; (8aa50 <Coarse_DutyCorrection+0x908>)
   8a950:	4610      	mov	r0, r2
   8a952:	4798      	blx	r3
   8a954:	4603      	mov	r3, r0
   8a956:	2b00      	cmp	r3, #0
   8a958:	d00b      	beq.n	8a972 <Coarse_DutyCorrection+0x82a>
			{
				avg_duty = avg_duty + duty_count;            
   8a95a:	4b3e      	ldr	r3, [pc, #248]	; (8aa54 <Coarse_DutyCorrection+0x90c>)
   8a95c:	781b      	ldrb	r3, [r3, #0]
   8a95e:	b29a      	uxth	r2, r3
   8a960:	4b3d      	ldr	r3, [pc, #244]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a962:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a966:	b29b      	uxth	r3, r3
   8a968:	4413      	add	r3, r2
   8a96a:	b29b      	uxth	r3, r3
   8a96c:	b21a      	sxth	r2, r3
   8a96e:	4b3a      	ldr	r3, [pc, #232]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a970:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8a972:	4b39      	ldr	r3, [pc, #228]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a974:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a978:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8a97c:	4293      	cmp	r3, r2
   8a97e:	dd4a      	ble.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				avg_duty = 2500;
   8a980:	4b35      	ldr	r3, [pc, #212]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a982:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8a986:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a988:	4b34      	ldr	r3, [pc, #208]	; (8aa5c <Coarse_DutyCorrection+0x914>)
   8a98a:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8a98c:	e043      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL){
   8a98e:	4b28      	ldr	r3, [pc, #160]	; (8aa30 <Coarse_DutyCorrection+0x8e8>)
   8a990:	781b      	ldrb	r3, [r3, #0]
   8a992:	2b02      	cmp	r3, #2
   8a994:	d13f      	bne.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			if (Check_4_Neutralstability())
   8a996:	4b32      	ldr	r3, [pc, #200]	; (8aa60 <Coarse_DutyCorrection+0x918>)
   8a998:	4798      	blx	r3
   8a99a:	4603      	mov	r3, r0
   8a99c:	2b00      	cmp	r3, #0
   8a99e:	d03a      	beq.n	8aa16 <Coarse_DutyCorrection+0x8ce>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8a9a0:	4b29      	ldr	r3, [pc, #164]	; (8aa48 <Coarse_DutyCorrection+0x900>)
   8a9a2:	681a      	ldr	r2, [r3, #0]
   8a9a4:	4b29      	ldr	r3, [pc, #164]	; (8aa4c <Coarse_DutyCorrection+0x904>)
   8a9a6:	6819      	ldr	r1, [r3, #0]
   8a9a8:	4b2e      	ldr	r3, [pc, #184]	; (8aa64 <Coarse_DutyCorrection+0x91c>)
   8a9aa:	4610      	mov	r0, r2
   8a9ac:	4798      	blx	r3
   8a9ae:	4603      	mov	r3, r0
   8a9b0:	461a      	mov	r2, r3
   8a9b2:	4b2d      	ldr	r3, [pc, #180]	; (8aa68 <Coarse_DutyCorrection+0x920>)
   8a9b4:	4610      	mov	r0, r2
   8a9b6:	4798      	blx	r3
   8a9b8:	4c2c      	ldr	r4, [pc, #176]	; (8aa6c <Coarse_DutyCorrection+0x924>)
   8a9ba:	a31b      	add	r3, pc, #108	; (adr r3, 8aa28 <Coarse_DutyCorrection+0x8e0>)
   8a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a9c0:	47a0      	blx	r4
   8a9c2:	4603      	mov	r3, r0
   8a9c4:	2b00      	cmp	r3, #0
   8a9c6:	d009      	beq.n	8a9dc <Coarse_DutyCorrection+0x894>
				{
					avg_duty = avg_duty-6;
   8a9c8:	4b23      	ldr	r3, [pc, #140]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a9ca:	f9b3 3000 	ldrsh.w	r3, [r3]
   8a9ce:	b29b      	uxth	r3, r3
   8a9d0:	3b06      	subs	r3, #6
   8a9d2:	b29b      	uxth	r3, r3
   8a9d4:	b21a      	sxth	r2, r3
   8a9d6:	4b20      	ldr	r3, [pc, #128]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8a9d8:	801a      	strh	r2, [r3, #0]
   8a9da:	e01c      	b.n	8aa16 <Coarse_DutyCorrection+0x8ce>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8a9dc:	4b1b      	ldr	r3, [pc, #108]	; (8aa4c <Coarse_DutyCorrection+0x904>)
   8a9de:	681a      	ldr	r2, [r3, #0]
   8a9e0:	4b19      	ldr	r3, [pc, #100]	; (8aa48 <Coarse_DutyCorrection+0x900>)
   8a9e2:	6819      	ldr	r1, [r3, #0]
   8a9e4:	4b1f      	ldr	r3, [pc, #124]	; (8aa64 <Coarse_DutyCorrection+0x91c>)
   8a9e6:	4610      	mov	r0, r2
   8a9e8:	4798      	blx	r3
   8a9ea:	4603      	mov	r3, r0
   8a9ec:	461a      	mov	r2, r3
   8a9ee:	4b1e      	ldr	r3, [pc, #120]	; (8aa68 <Coarse_DutyCorrection+0x920>)
   8a9f0:	4610      	mov	r0, r2
   8a9f2:	4798      	blx	r3
   8a9f4:	4c1d      	ldr	r4, [pc, #116]	; (8aa6c <Coarse_DutyCorrection+0x924>)
   8a9f6:	a30c      	add	r3, pc, #48	; (adr r3, 8aa28 <Coarse_DutyCorrection+0x8e0>)
   8a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a9fc:	47a0      	blx	r4
   8a9fe:	4603      	mov	r3, r0
   8aa00:	2b00      	cmp	r3, #0
   8aa02:	d008      	beq.n	8aa16 <Coarse_DutyCorrection+0x8ce>
				{
					avg_duty = avg_duty+6;
   8aa04:	4b14      	ldr	r3, [pc, #80]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8aa06:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aa0a:	b29b      	uxth	r3, r3
   8aa0c:	3306      	adds	r3, #6
   8aa0e:	b29b      	uxth	r3, r3
   8aa10:	b21a      	sxth	r2, r3
   8aa12:	4b11      	ldr	r3, [pc, #68]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8aa14:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	
		avg_duty = avg_duty;
   8aa16:	4b10      	ldr	r3, [pc, #64]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8aa18:	f9b3 2000 	ldrsh.w	r2, [r3]
   8aa1c:	4b0e      	ldr	r3, [pc, #56]	; (8aa58 <Coarse_DutyCorrection+0x910>)
   8aa1e:	801a      	strh	r2, [r3, #0]
		
	}
}
   8aa20:	e7ff      	b.n	8aa22 <Coarse_DutyCorrection+0x8da>
   8aa22:	bf00      	nop
   8aa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8aa26:	bf00      	nop
   8aa28:	9999999a 	.word	0x9999999a
   8aa2c:	3fc99999 	.word	0x3fc99999
   8aa30:	2007218a 	.word	0x2007218a
   8aa34:	200719b0 	.word	0x200719b0
   8aa38:	2007218c 	.word	0x2007218c
   8aa3c:	000a68e1 	.word	0x000a68e1
   8aa40:	200719ac 	.word	0x200719ac
   8aa44:	42100000 	.word	0x42100000
   8aa48:	200719b4 	.word	0x200719b4
   8aa4c:	20072178 	.word	0x20072178
   8aa50:	000a68cd 	.word	0x000a68cd
   8aa54:	200719d4 	.word	0x200719d4
   8aa58:	2007199e 	.word	0x2007199e
   8aa5c:	00099a95 	.word	0x00099a95
   8aa60:	00089f71 	.word	0x00089f71
   8aa64:	000a637d 	.word	0x000a637d
   8aa68:	000a5c69 	.word	0x000a5c69
   8aa6c:	000a6231 	.word	0x000a6231

0008aa70 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aa72:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8aa74:	4b7e      	ldr	r3, [pc, #504]	; (8ac70 <Fine_DutyCorrection+0x200>)
   8aa76:	681a      	ldr	r2, [r3, #0]
   8aa78:	4b7e      	ldr	r3, [pc, #504]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8aa7a:	4610      	mov	r0, r2
   8aa7c:	4798      	blx	r3
   8aa7e:	4c7e      	ldr	r4, [pc, #504]	; (8ac78 <Fine_DutyCorrection+0x208>)
   8aa80:	a377      	add	r3, pc, #476	; (adr r3, 8ac60 <Fine_DutyCorrection+0x1f0>)
   8aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aa86:	47a0      	blx	r4
   8aa88:	4603      	mov	r3, r0
   8aa8a:	2b00      	cmp	r3, #0
   8aa8c:	d002      	beq.n	8aa94 <Fine_DutyCorrection+0x24>
	{
		duty_count = 42;												
   8aa8e:	4b7b      	ldr	r3, [pc, #492]	; (8ac7c <Fine_DutyCorrection+0x20c>)
   8aa90:	222a      	movs	r2, #42	; 0x2a
   8aa92:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8aa94:	4b76      	ldr	r3, [pc, #472]	; (8ac70 <Fine_DutyCorrection+0x200>)
   8aa96:	681a      	ldr	r2, [r3, #0]
   8aa98:	4b76      	ldr	r3, [pc, #472]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8aa9a:	4610      	mov	r0, r2
   8aa9c:	4798      	blx	r3
   8aa9e:	4c76      	ldr	r4, [pc, #472]	; (8ac78 <Fine_DutyCorrection+0x208>)
   8aaa0:	a371      	add	r3, pc, #452	; (adr r3, 8ac68 <Fine_DutyCorrection+0x1f8>)
   8aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aaa6:	47a0      	blx	r4
   8aaa8:	4603      	mov	r3, r0
   8aaaa:	2b00      	cmp	r3, #0
   8aaac:	d00f      	beq.n	8aace <Fine_DutyCorrection+0x5e>
   8aaae:	4b70      	ldr	r3, [pc, #448]	; (8ac70 <Fine_DutyCorrection+0x200>)
   8aab0:	681a      	ldr	r2, [r3, #0]
   8aab2:	4b70      	ldr	r3, [pc, #448]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8aab4:	4610      	mov	r0, r2
   8aab6:	4798      	blx	r3
   8aab8:	4c71      	ldr	r4, [pc, #452]	; (8ac80 <Fine_DutyCorrection+0x210>)
   8aaba:	a369      	add	r3, pc, #420	; (adr r3, 8ac60 <Fine_DutyCorrection+0x1f0>)
   8aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aac0:	47a0      	blx	r4
   8aac2:	4603      	mov	r3, r0
   8aac4:	2b00      	cmp	r3, #0
   8aac6:	d002      	beq.n	8aace <Fine_DutyCorrection+0x5e>
	{
		duty_count = 20;
   8aac8:	4b6c      	ldr	r3, [pc, #432]	; (8ac7c <Fine_DutyCorrection+0x20c>)
   8aaca:	2214      	movs	r2, #20
   8aacc:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   8aace:	4b68      	ldr	r3, [pc, #416]	; (8ac70 <Fine_DutyCorrection+0x200>)
   8aad0:	681a      	ldr	r2, [r3, #0]
   8aad2:	4b68      	ldr	r3, [pc, #416]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8aad4:	4610      	mov	r0, r2
   8aad6:	4798      	blx	r3
   8aad8:	4c6a      	ldr	r4, [pc, #424]	; (8ac84 <Fine_DutyCorrection+0x214>)
   8aada:	a363      	add	r3, pc, #396	; (adr r3, 8ac68 <Fine_DutyCorrection+0x1f8>)
   8aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aae0:	47a0      	blx	r4
   8aae2:	4603      	mov	r3, r0
   8aae4:	2b00      	cmp	r3, #0
   8aae6:	d002      	beq.n	8aaee <Fine_DutyCorrection+0x7e>
	{
		duty_count = 4;
   8aae8:	4b64      	ldr	r3, [pc, #400]	; (8ac7c <Fine_DutyCorrection+0x20c>)
   8aaea:	2204      	movs	r2, #4
   8aaec:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 800)
   8aaee:	4b66      	ldr	r3, [pc, #408]	; (8ac88 <Fine_DutyCorrection+0x218>)
   8aaf0:	681b      	ldr	r3, [r3, #0]
   8aaf2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8aaf6:	f040 814a 	bne.w	8ad8e <Fine_DutyCorrection+0x31e>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8aafa:	4b64      	ldr	r3, [pc, #400]	; (8ac8c <Fine_DutyCorrection+0x21c>)
   8aafc:	781b      	ldrb	r3, [r3, #0]
   8aafe:	2b00      	cmp	r3, #0
   8ab00:	d150      	bne.n	8aba4 <Fine_DutyCorrection+0x134>
   8ab02:	4b63      	ldr	r3, [pc, #396]	; (8ac90 <Fine_DutyCorrection+0x220>)
   8ab04:	681a      	ldr	r2, [r3, #0]
   8ab06:	4b5b      	ldr	r3, [pc, #364]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ab08:	4610      	mov	r0, r2
   8ab0a:	4798      	blx	r3
   8ab0c:	4605      	mov	r5, r0
   8ab0e:	460e      	mov	r6, r1
   8ab10:	4b60      	ldr	r3, [pc, #384]	; (8ac94 <Fine_DutyCorrection+0x224>)
   8ab12:	681a      	ldr	r2, [r3, #0]
   8ab14:	4b57      	ldr	r3, [pc, #348]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ab16:	4610      	mov	r0, r2
   8ab18:	4798      	blx	r3
   8ab1a:	4c5f      	ldr	r4, [pc, #380]	; (8ac98 <Fine_DutyCorrection+0x228>)
   8ab1c:	f04f 0200 	mov.w	r2, #0
   8ab20:	4b5e      	ldr	r3, [pc, #376]	; (8ac9c <Fine_DutyCorrection+0x22c>)
   8ab22:	47a0      	blx	r4
   8ab24:	4603      	mov	r3, r0
   8ab26:	460c      	mov	r4, r1
   8ab28:	461a      	mov	r2, r3
   8ab2a:	4623      	mov	r3, r4
   8ab2c:	4c55      	ldr	r4, [pc, #340]	; (8ac84 <Fine_DutyCorrection+0x214>)
   8ab2e:	4628      	mov	r0, r5
   8ab30:	4631      	mov	r1, r6
   8ab32:	47a0      	blx	r4
   8ab34:	4603      	mov	r3, r0
   8ab36:	2b00      	cmp	r3, #0
   8ab38:	d034      	beq.n	8aba4 <Fine_DutyCorrection+0x134>
   8ab3a:	4b59      	ldr	r3, [pc, #356]	; (8aca0 <Fine_DutyCorrection+0x230>)
   8ab3c:	681a      	ldr	r2, [r3, #0]
   8ab3e:	4b4d      	ldr	r3, [pc, #308]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ab40:	4610      	mov	r0, r2
   8ab42:	4798      	blx	r3
   8ab44:	4605      	mov	r5, r0
   8ab46:	460e      	mov	r6, r1
   8ab48:	4b56      	ldr	r3, [pc, #344]	; (8aca4 <Fine_DutyCorrection+0x234>)
   8ab4a:	681a      	ldr	r2, [r3, #0]
   8ab4c:	4b49      	ldr	r3, [pc, #292]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ab4e:	4610      	mov	r0, r2
   8ab50:	4798      	blx	r3
   8ab52:	4c51      	ldr	r4, [pc, #324]	; (8ac98 <Fine_DutyCorrection+0x228>)
   8ab54:	f04f 0200 	mov.w	r2, #0
   8ab58:	4b50      	ldr	r3, [pc, #320]	; (8ac9c <Fine_DutyCorrection+0x22c>)
   8ab5a:	47a0      	blx	r4
   8ab5c:	4603      	mov	r3, r0
   8ab5e:	460c      	mov	r4, r1
   8ab60:	461a      	mov	r2, r3
   8ab62:	4623      	mov	r3, r4
   8ab64:	4c47      	ldr	r4, [pc, #284]	; (8ac84 <Fine_DutyCorrection+0x214>)
   8ab66:	4628      	mov	r0, r5
   8ab68:	4631      	mov	r1, r6
   8ab6a:	47a0      	blx	r4
   8ab6c:	4603      	mov	r3, r0
   8ab6e:	2b00      	cmp	r3, #0
   8ab70:	d018      	beq.n	8aba4 <Fine_DutyCorrection+0x134>
		{
			avg_duty = avg_duty - duty_count;
   8ab72:	4b4d      	ldr	r3, [pc, #308]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ab74:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ab78:	b29a      	uxth	r2, r3
   8ab7a:	4b40      	ldr	r3, [pc, #256]	; (8ac7c <Fine_DutyCorrection+0x20c>)
   8ab7c:	781b      	ldrb	r3, [r3, #0]
   8ab7e:	b29b      	uxth	r3, r3
   8ab80:	1ad3      	subs	r3, r2, r3
   8ab82:	b29b      	uxth	r3, r3
   8ab84:	b21a      	sxth	r2, r3
   8ab86:	4b48      	ldr	r3, [pc, #288]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ab88:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8ab8a:	4b47      	ldr	r3, [pc, #284]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ab8c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ab90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8ab94:	f300 841b 	bgt.w	8b3ce <Fine_DutyCorrection+0x95e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8ab98:	4b43      	ldr	r3, [pc, #268]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ab9a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8ab9e:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aba0:	f000 bc15 	b.w	8b3ce <Fine_DutyCorrection+0x95e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+2.5))) && (Tmp3Val <= (Prescribed_T3+0.5)) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   8aba4:	4b39      	ldr	r3, [pc, #228]	; (8ac8c <Fine_DutyCorrection+0x21c>)
   8aba6:	781b      	ldrb	r3, [r3, #0]
   8aba8:	2b00      	cmp	r3, #0
   8abaa:	f040 8085 	bne.w	8acb8 <Fine_DutyCorrection+0x248>
   8abae:	4b39      	ldr	r3, [pc, #228]	; (8ac94 <Fine_DutyCorrection+0x224>)
   8abb0:	681a      	ldr	r2, [r3, #0]
   8abb2:	4b3e      	ldr	r3, [pc, #248]	; (8acac <Fine_DutyCorrection+0x23c>)
   8abb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8abb8:	4610      	mov	r0, r2
   8abba:	4798      	blx	r3
   8abbc:	4603      	mov	r3, r0
   8abbe:	4618      	mov	r0, r3
   8abc0:	4b33      	ldr	r3, [pc, #204]	; (8ac90 <Fine_DutyCorrection+0x220>)
   8abc2:	681a      	ldr	r2, [r3, #0]
   8abc4:	4b3a      	ldr	r3, [pc, #232]	; (8acb0 <Fine_DutyCorrection+0x240>)
   8abc6:	4611      	mov	r1, r2
   8abc8:	4798      	blx	r3
   8abca:	4603      	mov	r3, r0
   8abcc:	2b00      	cmp	r3, #0
   8abce:	d073      	beq.n	8acb8 <Fine_DutyCorrection+0x248>
   8abd0:	4b2f      	ldr	r3, [pc, #188]	; (8ac90 <Fine_DutyCorrection+0x220>)
   8abd2:	681a      	ldr	r2, [r3, #0]
   8abd4:	4b27      	ldr	r3, [pc, #156]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8abd6:	4610      	mov	r0, r2
   8abd8:	4798      	blx	r3
   8abda:	4605      	mov	r5, r0
   8abdc:	460e      	mov	r6, r1
   8abde:	4b2d      	ldr	r3, [pc, #180]	; (8ac94 <Fine_DutyCorrection+0x224>)
   8abe0:	681a      	ldr	r2, [r3, #0]
   8abe2:	4b24      	ldr	r3, [pc, #144]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8abe4:	4610      	mov	r0, r2
   8abe6:	4798      	blx	r3
   8abe8:	4c2b      	ldr	r4, [pc, #172]	; (8ac98 <Fine_DutyCorrection+0x228>)
   8abea:	f04f 0200 	mov.w	r2, #0
   8abee:	4b31      	ldr	r3, [pc, #196]	; (8acb4 <Fine_DutyCorrection+0x244>)
   8abf0:	47a0      	blx	r4
   8abf2:	4603      	mov	r3, r0
   8abf4:	460c      	mov	r4, r1
   8abf6:	461a      	mov	r2, r3
   8abf8:	4623      	mov	r3, r4
   8abfa:	4c1f      	ldr	r4, [pc, #124]	; (8ac78 <Fine_DutyCorrection+0x208>)
   8abfc:	4628      	mov	r0, r5
   8abfe:	4631      	mov	r1, r6
   8ac00:	47a0      	blx	r4
   8ac02:	4603      	mov	r3, r0
   8ac04:	2b00      	cmp	r3, #0
   8ac06:	d057      	beq.n	8acb8 <Fine_DutyCorrection+0x248>
   8ac08:	4b25      	ldr	r3, [pc, #148]	; (8aca0 <Fine_DutyCorrection+0x230>)
   8ac0a:	681a      	ldr	r2, [r3, #0]
   8ac0c:	4b19      	ldr	r3, [pc, #100]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ac0e:	4610      	mov	r0, r2
   8ac10:	4798      	blx	r3
   8ac12:	4605      	mov	r5, r0
   8ac14:	460e      	mov	r6, r1
   8ac16:	4b23      	ldr	r3, [pc, #140]	; (8aca4 <Fine_DutyCorrection+0x234>)
   8ac18:	681a      	ldr	r2, [r3, #0]
   8ac1a:	4b16      	ldr	r3, [pc, #88]	; (8ac74 <Fine_DutyCorrection+0x204>)
   8ac1c:	4610      	mov	r0, r2
   8ac1e:	4798      	blx	r3
   8ac20:	4c1d      	ldr	r4, [pc, #116]	; (8ac98 <Fine_DutyCorrection+0x228>)
   8ac22:	f04f 0200 	mov.w	r2, #0
   8ac26:	4b1d      	ldr	r3, [pc, #116]	; (8ac9c <Fine_DutyCorrection+0x22c>)
   8ac28:	47a0      	blx	r4
   8ac2a:	4603      	mov	r3, r0
   8ac2c:	460c      	mov	r4, r1
   8ac2e:	461a      	mov	r2, r3
   8ac30:	4623      	mov	r3, r4
   8ac32:	4c11      	ldr	r4, [pc, #68]	; (8ac78 <Fine_DutyCorrection+0x208>)
   8ac34:	4628      	mov	r0, r5
   8ac36:	4631      	mov	r1, r6
   8ac38:	47a0      	blx	r4
   8ac3a:	4603      	mov	r3, r0
   8ac3c:	2b00      	cmp	r3, #0
   8ac3e:	d03b      	beq.n	8acb8 <Fine_DutyCorrection+0x248>
		{																						// earlier value 38 chged on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8ac40:	4b0e      	ldr	r3, [pc, #56]	; (8ac7c <Fine_DutyCorrection+0x20c>)
   8ac42:	781b      	ldrb	r3, [r3, #0]
   8ac44:	b29a      	uxth	r2, r3
   8ac46:	4b18      	ldr	r3, [pc, #96]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ac48:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ac4c:	b29b      	uxth	r3, r3
   8ac4e:	4413      	add	r3, r2
   8ac50:	b29b      	uxth	r3, r3
   8ac52:	b21a      	sxth	r2, r3
   8ac54:	4b14      	ldr	r3, [pc, #80]	; (8aca8 <Fine_DutyCorrection+0x238>)
   8ac56:	801a      	strh	r2, [r3, #0]
   8ac58:	e3b9      	b.n	8b3ce <Fine_DutyCorrection+0x95e>
   8ac5a:	bf00      	nop
   8ac5c:	f3af 8000 	nop.w
   8ac60:	eb851eb8 	.word	0xeb851eb8
   8ac64:	3f9eb851 	.word	0x3f9eb851
   8ac68:	33333333 	.word	0x33333333
   8ac6c:	3fd33333 	.word	0x3fd33333
   8ac70:	200719d0 	.word	0x200719d0
   8ac74:	000a5c69 	.word	0x000a5c69
   8ac78:	000a6209 	.word	0x000a6209
   8ac7c:	200719d4 	.word	0x200719d4
   8ac80:	000a6231 	.word	0x000a6231
   8ac84:	000a621d 	.word	0x000a621d
   8ac88:	20070548 	.word	0x20070548
   8ac8c:	2007218a 	.word	0x2007218a
   8ac90:	200719b0 	.word	0x200719b0
   8ac94:	2007218c 	.word	0x2007218c
   8ac98:	000a59ad 	.word	0x000a59ad
   8ac9c:	3fe00000 	.word	0x3fe00000
   8aca0:	200719b4 	.word	0x200719b4
   8aca4:	20072178 	.word	0x20072178
   8aca8:	2007199e 	.word	0x2007199e
   8acac:	000a637d 	.word	0x000a637d
   8acb0:	000a68e1 	.word	0x000a68e1
   8acb4:	40040000 	.word	0x40040000
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
   8acb8:	4b93      	ldr	r3, [pc, #588]	; (8af08 <Fine_DutyCorrection+0x498>)
   8acba:	781b      	ldrb	r3, [r3, #0]
   8acbc:	2b01      	cmp	r3, #1
   8acbe:	d15b      	bne.n	8ad78 <Fine_DutyCorrection+0x308>
   8acc0:	4b92      	ldr	r3, [pc, #584]	; (8af0c <Fine_DutyCorrection+0x49c>)
   8acc2:	681a      	ldr	r2, [r3, #0]
   8acc4:	4b92      	ldr	r3, [pc, #584]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8acc6:	4610      	mov	r0, r2
   8acc8:	4798      	blx	r3
   8acca:	4605      	mov	r5, r0
   8accc:	460e      	mov	r6, r1
   8acce:	4b91      	ldr	r3, [pc, #580]	; (8af14 <Fine_DutyCorrection+0x4a4>)
   8acd0:	681a      	ldr	r2, [r3, #0]
   8acd2:	4b8f      	ldr	r3, [pc, #572]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8acd4:	4610      	mov	r0, r2
   8acd6:	4798      	blx	r3
   8acd8:	4c8f      	ldr	r4, [pc, #572]	; (8af18 <Fine_DutyCorrection+0x4a8>)
   8acda:	f04f 0200 	mov.w	r2, #0
   8acde:	4b8f      	ldr	r3, [pc, #572]	; (8af1c <Fine_DutyCorrection+0x4ac>)
   8ace0:	47a0      	blx	r4
   8ace2:	4603      	mov	r3, r0
   8ace4:	460c      	mov	r4, r1
   8ace6:	461a      	mov	r2, r3
   8ace8:	4623      	mov	r3, r4
   8acea:	4c8d      	ldr	r4, [pc, #564]	; (8af20 <Fine_DutyCorrection+0x4b0>)
   8acec:	4628      	mov	r0, r5
   8acee:	4631      	mov	r1, r6
   8acf0:	47a0      	blx	r4
   8acf2:	4603      	mov	r3, r0
   8acf4:	2b00      	cmp	r3, #0
   8acf6:	d03f      	beq.n	8ad78 <Fine_DutyCorrection+0x308>
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
   8acf8:	4b8a      	ldr	r3, [pc, #552]	; (8af24 <Fine_DutyCorrection+0x4b4>)
   8acfa:	681a      	ldr	r2, [r3, #0]
   8acfc:	4b8a      	ldr	r3, [pc, #552]	; (8af28 <Fine_DutyCorrection+0x4b8>)
   8acfe:	498b      	ldr	r1, [pc, #556]	; (8af2c <Fine_DutyCorrection+0x4bc>)
   8ad00:	4610      	mov	r0, r2
   8ad02:	4798      	blx	r3
   8ad04:	4603      	mov	r3, r0
   8ad06:	2b00      	cmp	r3, #0
   8ad08:	d027      	beq.n	8ad5a <Fine_DutyCorrection+0x2ea>
   8ad0a:	4b89      	ldr	r3, [pc, #548]	; (8af30 <Fine_DutyCorrection+0x4c0>)
   8ad0c:	681a      	ldr	r2, [r3, #0]
   8ad0e:	4b80      	ldr	r3, [pc, #512]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ad10:	4610      	mov	r0, r2
   8ad12:	4798      	blx	r3
   8ad14:	4605      	mov	r5, r0
   8ad16:	460e      	mov	r6, r1
   8ad18:	4b86      	ldr	r3, [pc, #536]	; (8af34 <Fine_DutyCorrection+0x4c4>)
   8ad1a:	681a      	ldr	r2, [r3, #0]
   8ad1c:	4b7c      	ldr	r3, [pc, #496]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ad1e:	4610      	mov	r0, r2
   8ad20:	4798      	blx	r3
   8ad22:	4c7d      	ldr	r4, [pc, #500]	; (8af18 <Fine_DutyCorrection+0x4a8>)
   8ad24:	a374      	add	r3, pc, #464	; (adr r3, 8aef8 <Fine_DutyCorrection+0x488>)
   8ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad2a:	47a0      	blx	r4
   8ad2c:	4603      	mov	r3, r0
   8ad2e:	460c      	mov	r4, r1
   8ad30:	461a      	mov	r2, r3
   8ad32:	4623      	mov	r3, r4
   8ad34:	4c80      	ldr	r4, [pc, #512]	; (8af38 <Fine_DutyCorrection+0x4c8>)
   8ad36:	4628      	mov	r0, r5
   8ad38:	4631      	mov	r1, r6
   8ad3a:	47a0      	blx	r4
   8ad3c:	4603      	mov	r3, r0
   8ad3e:	2b00      	cmp	r3, #0
   8ad40:	d00b      	beq.n	8ad5a <Fine_DutyCorrection+0x2ea>
			  avg_duty = avg_duty + duty_count;
   8ad42:	4b7e      	ldr	r3, [pc, #504]	; (8af3c <Fine_DutyCorrection+0x4cc>)
   8ad44:	781b      	ldrb	r3, [r3, #0]
   8ad46:	b29a      	uxth	r2, r3
   8ad48:	4b7d      	ldr	r3, [pc, #500]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad4a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ad4e:	b29b      	uxth	r3, r3
   8ad50:	4413      	add	r3, r2
   8ad52:	b29b      	uxth	r3, r3
   8ad54:	b21a      	sxth	r2, r3
   8ad56:	4b7a      	ldr	r3, [pc, #488]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad58:	801a      	strh	r2, [r3, #0]
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8ad5a:	4b79      	ldr	r3, [pc, #484]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad5c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ad60:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8ad64:	4293      	cmp	r3, r2
   8ad66:	f340 8332 	ble.w	8b3ce <Fine_DutyCorrection+0x95e>
			{
				avg_duty = 2300;
   8ad6a:	4b75      	ldr	r3, [pc, #468]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad6c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8ad70:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8ad72:	4b74      	ldr	r3, [pc, #464]	; (8af44 <Fine_DutyCorrection+0x4d4>)
   8ad74:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
			  avg_duty = avg_duty + duty_count;
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8ad76:	e32a      	b.n	8b3ce <Fine_DutyCorrection+0x95e>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8ad78:	4b63      	ldr	r3, [pc, #396]	; (8af08 <Fine_DutyCorrection+0x498>)
   8ad7a:	781b      	ldrb	r3, [r3, #0]
   8ad7c:	2b02      	cmp	r3, #2
   8ad7e:	f040 8326 	bne.w	8b3ce <Fine_DutyCorrection+0x95e>
				avg_duty = avg_duty;
   8ad82:	4b6f      	ldr	r3, [pc, #444]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad84:	f9b3 2000 	ldrsh.w	r2, [r3]
   8ad88:	4b6d      	ldr	r3, [pc, #436]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ad8a:	801a      	strh	r2, [r3, #0]

		}
	  avg_duty = avg_duty;
	}
	
}
   8ad8c:	e31f      	b.n	8b3ce <Fine_DutyCorrection+0x95e>
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
				avg_duty = avg_duty;
	}
	else if (SYSTEM_FLOW == 500)
   8ad8e:	4b6e      	ldr	r3, [pc, #440]	; (8af48 <Fine_DutyCorrection+0x4d8>)
   8ad90:	681b      	ldr	r3, [r3, #0]
   8ad92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8ad96:	f040 8188 	bne.w	8b0aa <Fine_DutyCorrection+0x63a>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8ad9a:	4b5b      	ldr	r3, [pc, #364]	; (8af08 <Fine_DutyCorrection+0x498>)
   8ad9c:	781b      	ldrb	r3, [r3, #0]
   8ad9e:	2b00      	cmp	r3, #0
   8ada0:	d14f      	bne.n	8ae42 <Fine_DutyCorrection+0x3d2>
   8ada2:	4b5a      	ldr	r3, [pc, #360]	; (8af0c <Fine_DutyCorrection+0x49c>)
   8ada4:	681a      	ldr	r2, [r3, #0]
   8ada6:	4b5a      	ldr	r3, [pc, #360]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ada8:	4610      	mov	r0, r2
   8adaa:	4798      	blx	r3
   8adac:	4605      	mov	r5, r0
   8adae:	460e      	mov	r6, r1
   8adb0:	4b58      	ldr	r3, [pc, #352]	; (8af14 <Fine_DutyCorrection+0x4a4>)
   8adb2:	681a      	ldr	r2, [r3, #0]
   8adb4:	4b56      	ldr	r3, [pc, #344]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8adb6:	4610      	mov	r0, r2
   8adb8:	4798      	blx	r3
   8adba:	4c57      	ldr	r4, [pc, #348]	; (8af18 <Fine_DutyCorrection+0x4a8>)
   8adbc:	a350      	add	r3, pc, #320	; (adr r3, 8af00 <Fine_DutyCorrection+0x490>)
   8adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
   8adc2:	47a0      	blx	r4
   8adc4:	4603      	mov	r3, r0
   8adc6:	460c      	mov	r4, r1
   8adc8:	461a      	mov	r2, r3
   8adca:	4623      	mov	r3, r4
   8adcc:	4c5f      	ldr	r4, [pc, #380]	; (8af4c <Fine_DutyCorrection+0x4dc>)
   8adce:	4628      	mov	r0, r5
   8add0:	4631      	mov	r1, r6
   8add2:	47a0      	blx	r4
   8add4:	4603      	mov	r3, r0
   8add6:	2b00      	cmp	r3, #0
   8add8:	d033      	beq.n	8ae42 <Fine_DutyCorrection+0x3d2>
   8adda:	4b55      	ldr	r3, [pc, #340]	; (8af30 <Fine_DutyCorrection+0x4c0>)
   8addc:	681a      	ldr	r2, [r3, #0]
   8adde:	4b4c      	ldr	r3, [pc, #304]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ade0:	4610      	mov	r0, r2
   8ade2:	4798      	blx	r3
   8ade4:	4605      	mov	r5, r0
   8ade6:	460e      	mov	r6, r1
   8ade8:	4b52      	ldr	r3, [pc, #328]	; (8af34 <Fine_DutyCorrection+0x4c4>)
   8adea:	681a      	ldr	r2, [r3, #0]
   8adec:	4b48      	ldr	r3, [pc, #288]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8adee:	4610      	mov	r0, r2
   8adf0:	4798      	blx	r3
   8adf2:	4c49      	ldr	r4, [pc, #292]	; (8af18 <Fine_DutyCorrection+0x4a8>)
   8adf4:	a340      	add	r3, pc, #256	; (adr r3, 8aef8 <Fine_DutyCorrection+0x488>)
   8adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8adfa:	47a0      	blx	r4
   8adfc:	4603      	mov	r3, r0
   8adfe:	460c      	mov	r4, r1
   8ae00:	461a      	mov	r2, r3
   8ae02:	4623      	mov	r3, r4
   8ae04:	4c51      	ldr	r4, [pc, #324]	; (8af4c <Fine_DutyCorrection+0x4dc>)
   8ae06:	4628      	mov	r0, r5
   8ae08:	4631      	mov	r1, r6
   8ae0a:	47a0      	blx	r4
   8ae0c:	4603      	mov	r3, r0
   8ae0e:	2b00      	cmp	r3, #0
   8ae10:	d017      	beq.n	8ae42 <Fine_DutyCorrection+0x3d2>
		{
			avg_duty = avg_duty - duty_count;
   8ae12:	4b4b      	ldr	r3, [pc, #300]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ae14:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ae18:	b29a      	uxth	r2, r3
   8ae1a:	4b48      	ldr	r3, [pc, #288]	; (8af3c <Fine_DutyCorrection+0x4cc>)
   8ae1c:	781b      	ldrb	r3, [r3, #0]
   8ae1e:	b29b      	uxth	r3, r3
   8ae20:	1ad3      	subs	r3, r2, r3
   8ae22:	b29b      	uxth	r3, r3
   8ae24:	b21a      	sxth	r2, r3
   8ae26:	4b46      	ldr	r3, [pc, #280]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ae28:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8ae2a:	4b45      	ldr	r3, [pc, #276]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ae2c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8ae30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8ae34:	f300 8133 	bgt.w	8b09e <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8ae38:	4b41      	ldr	r3, [pc, #260]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8ae3a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8ae3e:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.1)) && (Tmp3Val >= (Prescribed_T3+0.2)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8ae40:	e12d      	b.n	8b09e <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+0.5))) && (Tmp3Val <= (Prescribed_T3-0.2)) ) 
   8ae42:	4b31      	ldr	r3, [pc, #196]	; (8af08 <Fine_DutyCorrection+0x498>)
   8ae44:	781b      	ldrb	r3, [r3, #0]
   8ae46:	2b00      	cmp	r3, #0
   8ae48:	f040 8086 	bne.w	8af58 <Fine_DutyCorrection+0x4e8>
   8ae4c:	4b31      	ldr	r3, [pc, #196]	; (8af14 <Fine_DutyCorrection+0x4a4>)
   8ae4e:	681a      	ldr	r2, [r3, #0]
   8ae50:	4b3f      	ldr	r3, [pc, #252]	; (8af50 <Fine_DutyCorrection+0x4e0>)
   8ae52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8ae56:	4610      	mov	r0, r2
   8ae58:	4798      	blx	r3
   8ae5a:	4603      	mov	r3, r0
   8ae5c:	4618      	mov	r0, r3
   8ae5e:	4b2b      	ldr	r3, [pc, #172]	; (8af0c <Fine_DutyCorrection+0x49c>)
   8ae60:	681a      	ldr	r2, [r3, #0]
   8ae62:	4b31      	ldr	r3, [pc, #196]	; (8af28 <Fine_DutyCorrection+0x4b8>)
   8ae64:	4611      	mov	r1, r2
   8ae66:	4798      	blx	r3
   8ae68:	4603      	mov	r3, r0
   8ae6a:	2b00      	cmp	r3, #0
   8ae6c:	d074      	beq.n	8af58 <Fine_DutyCorrection+0x4e8>
   8ae6e:	4b27      	ldr	r3, [pc, #156]	; (8af0c <Fine_DutyCorrection+0x49c>)
   8ae70:	681a      	ldr	r2, [r3, #0]
   8ae72:	4b27      	ldr	r3, [pc, #156]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ae74:	4610      	mov	r0, r2
   8ae76:	4798      	blx	r3
   8ae78:	4605      	mov	r5, r0
   8ae7a:	460e      	mov	r6, r1
   8ae7c:	4b25      	ldr	r3, [pc, #148]	; (8af14 <Fine_DutyCorrection+0x4a4>)
   8ae7e:	681a      	ldr	r2, [r3, #0]
   8ae80:	4b23      	ldr	r3, [pc, #140]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8ae82:	4610      	mov	r0, r2
   8ae84:	4798      	blx	r3
   8ae86:	4c24      	ldr	r4, [pc, #144]	; (8af18 <Fine_DutyCorrection+0x4a8>)
   8ae88:	f04f 0200 	mov.w	r2, #0
   8ae8c:	4b23      	ldr	r3, [pc, #140]	; (8af1c <Fine_DutyCorrection+0x4ac>)
   8ae8e:	47a0      	blx	r4
   8ae90:	4603      	mov	r3, r0
   8ae92:	460c      	mov	r4, r1
   8ae94:	461a      	mov	r2, r3
   8ae96:	4623      	mov	r3, r4
   8ae98:	4c21      	ldr	r4, [pc, #132]	; (8af20 <Fine_DutyCorrection+0x4b0>)
   8ae9a:	4628      	mov	r0, r5
   8ae9c:	4631      	mov	r1, r6
   8ae9e:	47a0      	blx	r4
   8aea0:	4603      	mov	r3, r0
   8aea2:	2b00      	cmp	r3, #0
   8aea4:	d058      	beq.n	8af58 <Fine_DutyCorrection+0x4e8>
   8aea6:	4b22      	ldr	r3, [pc, #136]	; (8af30 <Fine_DutyCorrection+0x4c0>)
   8aea8:	681a      	ldr	r2, [r3, #0]
   8aeaa:	4b19      	ldr	r3, [pc, #100]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8aeac:	4610      	mov	r0, r2
   8aeae:	4798      	blx	r3
   8aeb0:	4605      	mov	r5, r0
   8aeb2:	460e      	mov	r6, r1
   8aeb4:	4b1f      	ldr	r3, [pc, #124]	; (8af34 <Fine_DutyCorrection+0x4c4>)
   8aeb6:	681a      	ldr	r2, [r3, #0]
   8aeb8:	4b15      	ldr	r3, [pc, #84]	; (8af10 <Fine_DutyCorrection+0x4a0>)
   8aeba:	4610      	mov	r0, r2
   8aebc:	4798      	blx	r3
   8aebe:	4c25      	ldr	r4, [pc, #148]	; (8af54 <Fine_DutyCorrection+0x4e4>)
   8aec0:	a30d      	add	r3, pc, #52	; (adr r3, 8aef8 <Fine_DutyCorrection+0x488>)
   8aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aec6:	47a0      	blx	r4
   8aec8:	4603      	mov	r3, r0
   8aeca:	460c      	mov	r4, r1
   8aecc:	461a      	mov	r2, r3
   8aece:	4623      	mov	r3, r4
   8aed0:	4c13      	ldr	r4, [pc, #76]	; (8af20 <Fine_DutyCorrection+0x4b0>)
   8aed2:	4628      	mov	r0, r5
   8aed4:	4631      	mov	r1, r6
   8aed6:	47a0      	blx	r4
   8aed8:	4603      	mov	r3, r0
   8aeda:	2b00      	cmp	r3, #0
   8aedc:	d03c      	beq.n	8af58 <Fine_DutyCorrection+0x4e8>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{																                          //38    changed on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8aede:	4b17      	ldr	r3, [pc, #92]	; (8af3c <Fine_DutyCorrection+0x4cc>)
   8aee0:	781b      	ldrb	r3, [r3, #0]
   8aee2:	b29a      	uxth	r2, r3
   8aee4:	4b16      	ldr	r3, [pc, #88]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8aee6:	f9b3 3000 	ldrsh.w	r3, [r3]
   8aeea:	b29b      	uxth	r3, r3
   8aeec:	4413      	add	r3, r2
   8aeee:	b29b      	uxth	r3, r3
   8aef0:	b21a      	sxth	r2, r3
   8aef2:	4b13      	ldr	r3, [pc, #76]	; (8af40 <Fine_DutyCorrection+0x4d0>)
   8aef4:	801a      	strh	r2, [r3, #0]
   8aef6:	e0d2      	b.n	8b09e <Fine_DutyCorrection+0x62e>
   8aef8:	9999999a 	.word	0x9999999a
   8aefc:	3fc99999 	.word	0x3fc99999
   8af00:	9999999a 	.word	0x9999999a
   8af04:	3fb99999 	.word	0x3fb99999
   8af08:	2007218a 	.word	0x2007218a
   8af0c:	200719b0 	.word	0x200719b0
   8af10:	000a5c69 	.word	0x000a5c69
   8af14:	2007218c 	.word	0x2007218c
   8af18:	000a59ad 	.word	0x000a59ad
   8af1c:	3fe00000 	.word	0x3fe00000
   8af20:	000a6209 	.word	0x000a6209
   8af24:	200719ac 	.word	0x200719ac
   8af28:	000a68e1 	.word	0x000a68e1
   8af2c:	42100000 	.word	0x42100000
   8af30:	200719b4 	.word	0x200719b4
   8af34:	20072178 	.word	0x20072178
   8af38:	000a61f5 	.word	0x000a61f5
   8af3c:	200719d4 	.word	0x200719d4
   8af40:	2007199e 	.word	0x2007199e
   8af44:	00099a95 	.word	0x00099a95
   8af48:	20070548 	.word	0x20070548
   8af4c:	000a621d 	.word	0x000a621d
   8af50:	000a637d 	.word	0x000a637d
   8af54:	000a59a9 	.word	0x000a59a9
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )  
   8af58:	4b8b      	ldr	r3, [pc, #556]	; (8b188 <Fine_DutyCorrection+0x718>)
   8af5a:	781b      	ldrb	r3, [r3, #0]
   8af5c:	2b01      	cmp	r3, #1
   8af5e:	d15a      	bne.n	8b016 <Fine_DutyCorrection+0x5a6>
   8af60:	4b8a      	ldr	r3, [pc, #552]	; (8b18c <Fine_DutyCorrection+0x71c>)
   8af62:	681a      	ldr	r2, [r3, #0]
   8af64:	4b8a      	ldr	r3, [pc, #552]	; (8b190 <Fine_DutyCorrection+0x720>)
   8af66:	4610      	mov	r0, r2
   8af68:	4798      	blx	r3
   8af6a:	4605      	mov	r5, r0
   8af6c:	460e      	mov	r6, r1
   8af6e:	4b89      	ldr	r3, [pc, #548]	; (8b194 <Fine_DutyCorrection+0x724>)
   8af70:	681a      	ldr	r2, [r3, #0]
   8af72:	4b87      	ldr	r3, [pc, #540]	; (8b190 <Fine_DutyCorrection+0x720>)
   8af74:	4610      	mov	r0, r2
   8af76:	4798      	blx	r3
   8af78:	4c87      	ldr	r4, [pc, #540]	; (8b198 <Fine_DutyCorrection+0x728>)
   8af7a:	f04f 0200 	mov.w	r2, #0
   8af7e:	4b87      	ldr	r3, [pc, #540]	; (8b19c <Fine_DutyCorrection+0x72c>)
   8af80:	47a0      	blx	r4
   8af82:	4603      	mov	r3, r0
   8af84:	460c      	mov	r4, r1
   8af86:	461a      	mov	r2, r3
   8af88:	4623      	mov	r3, r4
   8af8a:	4c85      	ldr	r4, [pc, #532]	; (8b1a0 <Fine_DutyCorrection+0x730>)
   8af8c:	4628      	mov	r0, r5
   8af8e:	4631      	mov	r1, r6
   8af90:	47a0      	blx	r4
   8af92:	4603      	mov	r3, r0
   8af94:	2b00      	cmp	r3, #0
   8af96:	d03e      	beq.n	8b016 <Fine_DutyCorrection+0x5a6>
		{
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8af98:	4b82      	ldr	r3, [pc, #520]	; (8b1a4 <Fine_DutyCorrection+0x734>)
   8af9a:	681a      	ldr	r2, [r3, #0]
   8af9c:	4b82      	ldr	r3, [pc, #520]	; (8b1a8 <Fine_DutyCorrection+0x738>)
   8af9e:	4983      	ldr	r1, [pc, #524]	; (8b1ac <Fine_DutyCorrection+0x73c>)
   8afa0:	4610      	mov	r0, r2
   8afa2:	4798      	blx	r3
   8afa4:	4603      	mov	r3, r0
   8afa6:	2b00      	cmp	r3, #0
   8afa8:	d027      	beq.n	8affa <Fine_DutyCorrection+0x58a>
   8afaa:	4b81      	ldr	r3, [pc, #516]	; (8b1b0 <Fine_DutyCorrection+0x740>)
   8afac:	681a      	ldr	r2, [r3, #0]
   8afae:	4b78      	ldr	r3, [pc, #480]	; (8b190 <Fine_DutyCorrection+0x720>)
   8afb0:	4610      	mov	r0, r2
   8afb2:	4798      	blx	r3
   8afb4:	4605      	mov	r5, r0
   8afb6:	460e      	mov	r6, r1
   8afb8:	4b7e      	ldr	r3, [pc, #504]	; (8b1b4 <Fine_DutyCorrection+0x744>)
   8afba:	681a      	ldr	r2, [r3, #0]
   8afbc:	4b74      	ldr	r3, [pc, #464]	; (8b190 <Fine_DutyCorrection+0x720>)
   8afbe:	4610      	mov	r0, r2
   8afc0:	4798      	blx	r3
   8afc2:	4c75      	ldr	r4, [pc, #468]	; (8b198 <Fine_DutyCorrection+0x728>)
   8afc4:	a36c      	add	r3, pc, #432	; (adr r3, 8b178 <Fine_DutyCorrection+0x708>)
   8afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8afca:	47a0      	blx	r4
   8afcc:	4603      	mov	r3, r0
   8afce:	460c      	mov	r4, r1
   8afd0:	461a      	mov	r2, r3
   8afd2:	4623      	mov	r3, r4
   8afd4:	4c78      	ldr	r4, [pc, #480]	; (8b1b8 <Fine_DutyCorrection+0x748>)
   8afd6:	4628      	mov	r0, r5
   8afd8:	4631      	mov	r1, r6
   8afda:	47a0      	blx	r4
   8afdc:	4603      	mov	r3, r0
   8afde:	2b00      	cmp	r3, #0
   8afe0:	d00b      	beq.n	8affa <Fine_DutyCorrection+0x58a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8afe2:	4b76      	ldr	r3, [pc, #472]	; (8b1bc <Fine_DutyCorrection+0x74c>)
   8afe4:	781b      	ldrb	r3, [r3, #0]
   8afe6:	b29a      	uxth	r2, r3
   8afe8:	4b75      	ldr	r3, [pc, #468]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8afea:	f9b3 3000 	ldrsh.w	r3, [r3]
   8afee:	b29b      	uxth	r3, r3
   8aff0:	4413      	add	r3, r2
   8aff2:	b29b      	uxth	r3, r3
   8aff4:	b21a      	sxth	r2, r3
   8aff6:	4b72      	ldr	r3, [pc, #456]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8aff8:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8affa:	4b71      	ldr	r3, [pc, #452]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8affc:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b000:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b004:	4293      	cmp	r3, r2
   8b006:	dd4a      	ble.n	8b09e <Fine_DutyCorrection+0x62e>
			{
				avg_duty = 2300;
   8b008:	4b6d      	ldr	r3, [pc, #436]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b00a:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b00e:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b010:	4b6c      	ldr	r3, [pc, #432]	; (8b1c4 <Fine_DutyCorrection+0x754>)
   8b012:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.1 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8b014:	e043      	b.n	8b09e <Fine_DutyCorrection+0x62e>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b016:	4b5c      	ldr	r3, [pc, #368]	; (8b188 <Fine_DutyCorrection+0x718>)
   8b018:	781b      	ldrb	r3, [r3, #0]
   8b01a:	2b02      	cmp	r3, #2
   8b01c:	d13f      	bne.n	8b09e <Fine_DutyCorrection+0x62e>
			{
				if (Check_4_Neutralstability())
   8b01e:	4b6a      	ldr	r3, [pc, #424]	; (8b1c8 <Fine_DutyCorrection+0x758>)
   8b020:	4798      	blx	r3
   8b022:	4603      	mov	r3, r0
   8b024:	2b00      	cmp	r3, #0
   8b026:	d03a      	beq.n	8b09e <Fine_DutyCorrection+0x62e>
				{
					if ((Tmp3Val - Prescribed_T3) >0.2)
   8b028:	4b61      	ldr	r3, [pc, #388]	; (8b1b0 <Fine_DutyCorrection+0x740>)
   8b02a:	681a      	ldr	r2, [r3, #0]
   8b02c:	4b61      	ldr	r3, [pc, #388]	; (8b1b4 <Fine_DutyCorrection+0x744>)
   8b02e:	6819      	ldr	r1, [r3, #0]
   8b030:	4b66      	ldr	r3, [pc, #408]	; (8b1cc <Fine_DutyCorrection+0x75c>)
   8b032:	4610      	mov	r0, r2
   8b034:	4798      	blx	r3
   8b036:	4603      	mov	r3, r0
   8b038:	461a      	mov	r2, r3
   8b03a:	4b55      	ldr	r3, [pc, #340]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b03c:	4610      	mov	r0, r2
   8b03e:	4798      	blx	r3
   8b040:	4c63      	ldr	r4, [pc, #396]	; (8b1d0 <Fine_DutyCorrection+0x760>)
   8b042:	a34f      	add	r3, pc, #316	; (adr r3, 8b180 <Fine_DutyCorrection+0x710>)
   8b044:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b048:	47a0      	blx	r4
   8b04a:	4603      	mov	r3, r0
   8b04c:	2b00      	cmp	r3, #0
   8b04e:	d009      	beq.n	8b064 <Fine_DutyCorrection+0x5f4>
					{
						avg_duty = avg_duty-6;
   8b050:	4b5b      	ldr	r3, [pc, #364]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b052:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b056:	b29b      	uxth	r3, r3
   8b058:	3b06      	subs	r3, #6
   8b05a:	b29b      	uxth	r3, r3
   8b05c:	b21a      	sxth	r2, r3
   8b05e:	4b58      	ldr	r3, [pc, #352]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b060:	801a      	strh	r2, [r3, #0]
   8b062:	e01c      	b.n	8b09e <Fine_DutyCorrection+0x62e>
					}
					else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b064:	4b53      	ldr	r3, [pc, #332]	; (8b1b4 <Fine_DutyCorrection+0x744>)
   8b066:	681a      	ldr	r2, [r3, #0]
   8b068:	4b51      	ldr	r3, [pc, #324]	; (8b1b0 <Fine_DutyCorrection+0x740>)
   8b06a:	6819      	ldr	r1, [r3, #0]
   8b06c:	4b57      	ldr	r3, [pc, #348]	; (8b1cc <Fine_DutyCorrection+0x75c>)
   8b06e:	4610      	mov	r0, r2
   8b070:	4798      	blx	r3
   8b072:	4603      	mov	r3, r0
   8b074:	461a      	mov	r2, r3
   8b076:	4b46      	ldr	r3, [pc, #280]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b078:	4610      	mov	r0, r2
   8b07a:	4798      	blx	r3
   8b07c:	4c54      	ldr	r4, [pc, #336]	; (8b1d0 <Fine_DutyCorrection+0x760>)
   8b07e:	a340      	add	r3, pc, #256	; (adr r3, 8b180 <Fine_DutyCorrection+0x710>)
   8b080:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b084:	47a0      	blx	r4
   8b086:	4603      	mov	r3, r0
   8b088:	2b00      	cmp	r3, #0
   8b08a:	d008      	beq.n	8b09e <Fine_DutyCorrection+0x62e>
					{
						avg_duty = avg_duty+6;
   8b08c:	4b4c      	ldr	r3, [pc, #304]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b08e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b092:	b29b      	uxth	r3, r3
   8b094:	3306      	adds	r3, #6
   8b096:	b29b      	uxth	r3, r3
   8b098:	b21a      	sxth	r2, r3
   8b09a:	4b49      	ldr	r3, [pc, #292]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b09c:	801a      	strh	r2, [r3, #0]
					}
				}		
			}
		
		
				avg_duty = avg_duty;
   8b09e:	4b48      	ldr	r3, [pc, #288]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b0a0:	f9b3 2000 	ldrsh.w	r2, [r3]
   8b0a4:	4b46      	ldr	r3, [pc, #280]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b0a6:	801a      	strh	r2, [r3, #0]

		}
	  avg_duty = avg_duty;
	}
	
}
   8b0a8:	e191      	b.n	8b3ce <Fine_DutyCorrection+0x95e>
		
				avg_duty = avg_duty;
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   8b0aa:	4b4a      	ldr	r3, [pc, #296]	; (8b1d4 <Fine_DutyCorrection+0x764>)
   8b0ac:	681b      	ldr	r3, [r3, #0]
   8b0ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8b0b2:	f040 818c 	bne.w	8b3ce <Fine_DutyCorrection+0x95e>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+0.5))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   8b0b6:	4b34      	ldr	r3, [pc, #208]	; (8b188 <Fine_DutyCorrection+0x718>)
   8b0b8:	781b      	ldrb	r3, [r3, #0]
   8b0ba:	2b00      	cmp	r3, #0
   8b0bc:	f040 8090 	bne.w	8b1e0 <Fine_DutyCorrection+0x770>
   8b0c0:	4b32      	ldr	r3, [pc, #200]	; (8b18c <Fine_DutyCorrection+0x71c>)
   8b0c2:	681a      	ldr	r2, [r3, #0]
   8b0c4:	4b32      	ldr	r3, [pc, #200]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b0c6:	4610      	mov	r0, r2
   8b0c8:	4798      	blx	r3
   8b0ca:	4605      	mov	r5, r0
   8b0cc:	460e      	mov	r6, r1
   8b0ce:	4b31      	ldr	r3, [pc, #196]	; (8b194 <Fine_DutyCorrection+0x724>)
   8b0d0:	681a      	ldr	r2, [r3, #0]
   8b0d2:	4b2f      	ldr	r3, [pc, #188]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b0d4:	4610      	mov	r0, r2
   8b0d6:	4798      	blx	r3
   8b0d8:	4c2f      	ldr	r4, [pc, #188]	; (8b198 <Fine_DutyCorrection+0x728>)
   8b0da:	f04f 0200 	mov.w	r2, #0
   8b0de:	4b2f      	ldr	r3, [pc, #188]	; (8b19c <Fine_DutyCorrection+0x72c>)
   8b0e0:	47a0      	blx	r4
   8b0e2:	4603      	mov	r3, r0
   8b0e4:	460c      	mov	r4, r1
   8b0e6:	461a      	mov	r2, r3
   8b0e8:	4623      	mov	r3, r4
   8b0ea:	4c3b      	ldr	r4, [pc, #236]	; (8b1d8 <Fine_DutyCorrection+0x768>)
   8b0ec:	4628      	mov	r0, r5
   8b0ee:	4631      	mov	r1, r6
   8b0f0:	47a0      	blx	r4
   8b0f2:	4603      	mov	r3, r0
   8b0f4:	2b00      	cmp	r3, #0
   8b0f6:	d073      	beq.n	8b1e0 <Fine_DutyCorrection+0x770>
   8b0f8:	4b2d      	ldr	r3, [pc, #180]	; (8b1b0 <Fine_DutyCorrection+0x740>)
   8b0fa:	681a      	ldr	r2, [r3, #0]
   8b0fc:	4b24      	ldr	r3, [pc, #144]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b0fe:	4610      	mov	r0, r2
   8b100:	4798      	blx	r3
   8b102:	4605      	mov	r5, r0
   8b104:	460e      	mov	r6, r1
   8b106:	4b2b      	ldr	r3, [pc, #172]	; (8b1b4 <Fine_DutyCorrection+0x744>)
   8b108:	681a      	ldr	r2, [r3, #0]
   8b10a:	4b21      	ldr	r3, [pc, #132]	; (8b190 <Fine_DutyCorrection+0x720>)
   8b10c:	4610      	mov	r0, r2
   8b10e:	4798      	blx	r3
   8b110:	4c21      	ldr	r4, [pc, #132]	; (8b198 <Fine_DutyCorrection+0x728>)
   8b112:	a319      	add	r3, pc, #100	; (adr r3, 8b178 <Fine_DutyCorrection+0x708>)
   8b114:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b118:	47a0      	blx	r4
   8b11a:	4603      	mov	r3, r0
   8b11c:	460c      	mov	r4, r1
   8b11e:	461a      	mov	r2, r3
   8b120:	4623      	mov	r3, r4
   8b122:	4c2d      	ldr	r4, [pc, #180]	; (8b1d8 <Fine_DutyCorrection+0x768>)
   8b124:	4628      	mov	r0, r5
   8b126:	4631      	mov	r1, r6
   8b128:	47a0      	blx	r4
   8b12a:	4603      	mov	r3, r0
   8b12c:	2b00      	cmp	r3, #0
   8b12e:	d057      	beq.n	8b1e0 <Fine_DutyCorrection+0x770>
									     //41 changed to 4.5 09082017 ; Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
   8b130:	4b23      	ldr	r3, [pc, #140]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b132:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b136:	b29a      	uxth	r2, r3
   8b138:	4b20      	ldr	r3, [pc, #128]	; (8b1bc <Fine_DutyCorrection+0x74c>)
   8b13a:	781b      	ldrb	r3, [r3, #0]
   8b13c:	b29b      	uxth	r3, r3
   8b13e:	1ad3      	subs	r3, r2, r3
   8b140:	b29b      	uxth	r3, r3
   8b142:	b21a      	sxth	r2, r3
   8b144:	4b1e      	ldr	r3, [pc, #120]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b146:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b148:	4b1d      	ldr	r3, [pc, #116]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b14a:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b14e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8b152:	f300 8136 	bgt.w	8b3c2 <Fine_DutyCorrection+0x952>
   8b156:	4b16      	ldr	r3, [pc, #88]	; (8b1b0 <Fine_DutyCorrection+0x740>)
   8b158:	681a      	ldr	r2, [r3, #0]
   8b15a:	4b16      	ldr	r3, [pc, #88]	; (8b1b4 <Fine_DutyCorrection+0x744>)
   8b15c:	6819      	ldr	r1, [r3, #0]
   8b15e:	4b1f      	ldr	r3, [pc, #124]	; (8b1dc <Fine_DutyCorrection+0x76c>)
   8b160:	4610      	mov	r0, r2
   8b162:	4798      	blx	r3
   8b164:	4603      	mov	r3, r0
   8b166:	2b00      	cmp	r3, #0
   8b168:	d100      	bne.n	8b16c <Fine_DutyCorrection+0x6fc>
   8b16a:	e12a      	b.n	8b3c2 <Fine_DutyCorrection+0x952>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8b16c:	4b14      	ldr	r3, [pc, #80]	; (8b1c0 <Fine_DutyCorrection+0x750>)
   8b16e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8b172:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+0.5))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
									     //41 changed to 4.5 09082017 ; Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b174:	e125      	b.n	8b3c2 <Fine_DutyCorrection+0x952>
   8b176:	bf00      	nop
   8b178:	9999999a 	.word	0x9999999a
   8b17c:	3fb99999 	.word	0x3fb99999
   8b180:	9999999a 	.word	0x9999999a
   8b184:	3fc99999 	.word	0x3fc99999
   8b188:	2007218a 	.word	0x2007218a
   8b18c:	200719b0 	.word	0x200719b0
   8b190:	000a5c69 	.word	0x000a5c69
   8b194:	2007218c 	.word	0x2007218c
   8b198:	000a59ad 	.word	0x000a59ad
   8b19c:	3fe00000 	.word	0x3fe00000
   8b1a0:	000a6209 	.word	0x000a6209
   8b1a4:	200719ac 	.word	0x200719ac
   8b1a8:	000a68e1 	.word	0x000a68e1
   8b1ac:	42100000 	.word	0x42100000
   8b1b0:	200719b4 	.word	0x200719b4
   8b1b4:	20072178 	.word	0x20072178
   8b1b8:	000a61f5 	.word	0x000a61f5
   8b1bc:	200719d4 	.word	0x200719d4
   8b1c0:	2007199e 	.word	0x2007199e
   8b1c4:	00099a95 	.word	0x00099a95
   8b1c8:	00089f71 	.word	0x00089f71
   8b1cc:	000a637d 	.word	0x000a637d
   8b1d0:	000a6231 	.word	0x000a6231
   8b1d4:	20070548 	.word	0x20070548
   8b1d8:	000a621d 	.word	0x000a621d
   8b1dc:	000a68cd 	.word	0x000a68cd
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
   8b1e0:	4b7f      	ldr	r3, [pc, #508]	; (8b3e0 <Fine_DutyCorrection+0x970>)
   8b1e2:	781b      	ldrb	r3, [r3, #0]
   8b1e4:	2b00      	cmp	r3, #0
   8b1e6:	d154      	bne.n	8b292 <Fine_DutyCorrection+0x822>
   8b1e8:	4b7e      	ldr	r3, [pc, #504]	; (8b3e4 <Fine_DutyCorrection+0x974>)
   8b1ea:	681a      	ldr	r2, [r3, #0]
   8b1ec:	4b7e      	ldr	r3, [pc, #504]	; (8b3e8 <Fine_DutyCorrection+0x978>)
   8b1ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8b1f2:	4610      	mov	r0, r2
   8b1f4:	4798      	blx	r3
   8b1f6:	4603      	mov	r3, r0
   8b1f8:	4618      	mov	r0, r3
   8b1fa:	4b7c      	ldr	r3, [pc, #496]	; (8b3ec <Fine_DutyCorrection+0x97c>)
   8b1fc:	681a      	ldr	r2, [r3, #0]
   8b1fe:	4b7c      	ldr	r3, [pc, #496]	; (8b3f0 <Fine_DutyCorrection+0x980>)
   8b200:	4611      	mov	r1, r2
   8b202:	4798      	blx	r3
   8b204:	4603      	mov	r3, r0
   8b206:	2b00      	cmp	r3, #0
   8b208:	d043      	beq.n	8b292 <Fine_DutyCorrection+0x822>
   8b20a:	4b76      	ldr	r3, [pc, #472]	; (8b3e4 <Fine_DutyCorrection+0x974>)
   8b20c:	681a      	ldr	r2, [r3, #0]
   8b20e:	4b79      	ldr	r3, [pc, #484]	; (8b3f4 <Fine_DutyCorrection+0x984>)
   8b210:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b214:	4610      	mov	r0, r2
   8b216:	4798      	blx	r3
   8b218:	4603      	mov	r3, r0
   8b21a:	4618      	mov	r0, r3
   8b21c:	4b73      	ldr	r3, [pc, #460]	; (8b3ec <Fine_DutyCorrection+0x97c>)
   8b21e:	681a      	ldr	r2, [r3, #0]
   8b220:	4b75      	ldr	r3, [pc, #468]	; (8b3f8 <Fine_DutyCorrection+0x988>)
   8b222:	4611      	mov	r1, r2
   8b224:	4798      	blx	r3
   8b226:	4603      	mov	r3, r0
   8b228:	2b00      	cmp	r3, #0
   8b22a:	d032      	beq.n	8b292 <Fine_DutyCorrection+0x822>
   8b22c:	4b73      	ldr	r3, [pc, #460]	; (8b3fc <Fine_DutyCorrection+0x98c>)
   8b22e:	681a      	ldr	r2, [r3, #0]
   8b230:	4b73      	ldr	r3, [pc, #460]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b232:	4610      	mov	r0, r2
   8b234:	4798      	blx	r3
   8b236:	4605      	mov	r5, r0
   8b238:	460e      	mov	r6, r1
   8b23a:	4b72      	ldr	r3, [pc, #456]	; (8b404 <Fine_DutyCorrection+0x994>)
   8b23c:	681a      	ldr	r2, [r3, #0]
   8b23e:	4b70      	ldr	r3, [pc, #448]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b240:	4610      	mov	r0, r2
   8b242:	4798      	blx	r3
   8b244:	4c70      	ldr	r4, [pc, #448]	; (8b408 <Fine_DutyCorrection+0x998>)
   8b246:	a364      	add	r3, pc, #400	; (adr r3, 8b3d8 <Fine_DutyCorrection+0x968>)
   8b248:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b24c:	47a0      	blx	r4
   8b24e:	4603      	mov	r3, r0
   8b250:	460c      	mov	r4, r1
   8b252:	461a      	mov	r2, r3
   8b254:	4623      	mov	r3, r4
   8b256:	4c6d      	ldr	r4, [pc, #436]	; (8b40c <Fine_DutyCorrection+0x99c>)
   8b258:	4628      	mov	r0, r5
   8b25a:	4631      	mov	r1, r6
   8b25c:	47a0      	blx	r4
   8b25e:	4603      	mov	r3, r0
   8b260:	2b00      	cmp	r3, #0
   8b262:	d016      	beq.n	8b292 <Fine_DutyCorrection+0x822>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b264:	4b6a      	ldr	r3, [pc, #424]	; (8b410 <Fine_DutyCorrection+0x9a0>)
   8b266:	681a      	ldr	r2, [r3, #0]
   8b268:	4b61      	ldr	r3, [pc, #388]	; (8b3f0 <Fine_DutyCorrection+0x980>)
   8b26a:	496a      	ldr	r1, [pc, #424]	; (8b414 <Fine_DutyCorrection+0x9a4>)
   8b26c:	4610      	mov	r0, r2
   8b26e:	4798      	blx	r3
   8b270:	4603      	mov	r3, r0
   8b272:	2b00      	cmp	r3, #0
   8b274:	f000 80a5 	beq.w	8b3c2 <Fine_DutyCorrection+0x952>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b278:	4b67      	ldr	r3, [pc, #412]	; (8b418 <Fine_DutyCorrection+0x9a8>)
   8b27a:	781b      	ldrb	r3, [r3, #0]
   8b27c:	b29a      	uxth	r2, r3
   8b27e:	4b67      	ldr	r3, [pc, #412]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b280:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b284:	b29b      	uxth	r3, r3
   8b286:	4413      	add	r3, r2
   8b288:	b29b      	uxth	r3, r3
   8b28a:	b21a      	sxth	r2, r3
   8b28c:	4b63      	ldr	r3, [pc, #396]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b28e:	801a      	strh	r2, [r3, #0]
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b290:	e097      	b.n	8b3c2 <Fine_DutyCorrection+0x952>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+1)) )  // 39.5
   8b292:	4b53      	ldr	r3, [pc, #332]	; (8b3e0 <Fine_DutyCorrection+0x970>)
   8b294:	781b      	ldrb	r3, [r3, #0]
   8b296:	2b01      	cmp	r3, #1
   8b298:	d14f      	bne.n	8b33a <Fine_DutyCorrection+0x8ca>
   8b29a:	4b52      	ldr	r3, [pc, #328]	; (8b3e4 <Fine_DutyCorrection+0x974>)
   8b29c:	681a      	ldr	r2, [r3, #0]
   8b29e:	4b55      	ldr	r3, [pc, #340]	; (8b3f4 <Fine_DutyCorrection+0x984>)
   8b2a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b2a4:	4610      	mov	r0, r2
   8b2a6:	4798      	blx	r3
   8b2a8:	4603      	mov	r3, r0
   8b2aa:	4618      	mov	r0, r3
   8b2ac:	4b4f      	ldr	r3, [pc, #316]	; (8b3ec <Fine_DutyCorrection+0x97c>)
   8b2ae:	681a      	ldr	r2, [r3, #0]
   8b2b0:	4b51      	ldr	r3, [pc, #324]	; (8b3f8 <Fine_DutyCorrection+0x988>)
   8b2b2:	4611      	mov	r1, r2
   8b2b4:	4798      	blx	r3
   8b2b6:	4603      	mov	r3, r0
   8b2b8:	2b00      	cmp	r3, #0
   8b2ba:	d03e      	beq.n	8b33a <Fine_DutyCorrection+0x8ca>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b2bc:	4b54      	ldr	r3, [pc, #336]	; (8b410 <Fine_DutyCorrection+0x9a0>)
   8b2be:	681a      	ldr	r2, [r3, #0]
   8b2c0:	4b4b      	ldr	r3, [pc, #300]	; (8b3f0 <Fine_DutyCorrection+0x980>)
   8b2c2:	4954      	ldr	r1, [pc, #336]	; (8b414 <Fine_DutyCorrection+0x9a4>)
   8b2c4:	4610      	mov	r0, r2
   8b2c6:	4798      	blx	r3
   8b2c8:	4603      	mov	r3, r0
   8b2ca:	2b00      	cmp	r3, #0
   8b2cc:	d027      	beq.n	8b31e <Fine_DutyCorrection+0x8ae>
   8b2ce:	4b4b      	ldr	r3, [pc, #300]	; (8b3fc <Fine_DutyCorrection+0x98c>)
   8b2d0:	681a      	ldr	r2, [r3, #0]
   8b2d2:	4b4b      	ldr	r3, [pc, #300]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b2d4:	4610      	mov	r0, r2
   8b2d6:	4798      	blx	r3
   8b2d8:	4605      	mov	r5, r0
   8b2da:	460e      	mov	r6, r1
   8b2dc:	4b49      	ldr	r3, [pc, #292]	; (8b404 <Fine_DutyCorrection+0x994>)
   8b2de:	681a      	ldr	r2, [r3, #0]
   8b2e0:	4b47      	ldr	r3, [pc, #284]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b2e2:	4610      	mov	r0, r2
   8b2e4:	4798      	blx	r3
   8b2e6:	4c48      	ldr	r4, [pc, #288]	; (8b408 <Fine_DutyCorrection+0x998>)
   8b2e8:	a33b      	add	r3, pc, #236	; (adr r3, 8b3d8 <Fine_DutyCorrection+0x968>)
   8b2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b2ee:	47a0      	blx	r4
   8b2f0:	4603      	mov	r3, r0
   8b2f2:	460c      	mov	r4, r1
   8b2f4:	461a      	mov	r2, r3
   8b2f6:	4623      	mov	r3, r4
   8b2f8:	4c44      	ldr	r4, [pc, #272]	; (8b40c <Fine_DutyCorrection+0x99c>)
   8b2fa:	4628      	mov	r0, r5
   8b2fc:	4631      	mov	r1, r6
   8b2fe:	47a0      	blx	r4
   8b300:	4603      	mov	r3, r0
   8b302:	2b00      	cmp	r3, #0
   8b304:	d00b      	beq.n	8b31e <Fine_DutyCorrection+0x8ae>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b306:	4b44      	ldr	r3, [pc, #272]	; (8b418 <Fine_DutyCorrection+0x9a8>)
   8b308:	781b      	ldrb	r3, [r3, #0]
   8b30a:	b29a      	uxth	r2, r3
   8b30c:	4b43      	ldr	r3, [pc, #268]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b30e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b312:	b29b      	uxth	r3, r3
   8b314:	4413      	add	r3, r2
   8b316:	b29b      	uxth	r3, r3
   8b318:	b21a      	sxth	r2, r3
   8b31a:	4b40      	ldr	r3, [pc, #256]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b31c:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b31e:	4b3f      	ldr	r3, [pc, #252]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b320:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b324:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b328:	4293      	cmp	r3, r2
   8b32a:	dd4a      	ble.n	8b3c2 <Fine_DutyCorrection+0x952>
			{
				avg_duty = 2500;
   8b32c:	4b3b      	ldr	r3, [pc, #236]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b32e:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b332:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b334:	4b3a      	ldr	r3, [pc, #232]	; (8b420 <Fine_DutyCorrection+0x9b0>)
   8b336:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b338:	e043      	b.n	8b3c2 <Fine_DutyCorrection+0x952>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b33a:	4b29      	ldr	r3, [pc, #164]	; (8b3e0 <Fine_DutyCorrection+0x970>)
   8b33c:	781b      	ldrb	r3, [r3, #0]
   8b33e:	2b02      	cmp	r3, #2
   8b340:	d13f      	bne.n	8b3c2 <Fine_DutyCorrection+0x952>
		{
				
			if (Check_4_Neutralstability())
   8b342:	4b38      	ldr	r3, [pc, #224]	; (8b424 <Fine_DutyCorrection+0x9b4>)
   8b344:	4798      	blx	r3
   8b346:	4603      	mov	r3, r0
   8b348:	2b00      	cmp	r3, #0
   8b34a:	d03a      	beq.n	8b3c2 <Fine_DutyCorrection+0x952>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8b34c:	4b2b      	ldr	r3, [pc, #172]	; (8b3fc <Fine_DutyCorrection+0x98c>)
   8b34e:	681a      	ldr	r2, [r3, #0]
   8b350:	4b2c      	ldr	r3, [pc, #176]	; (8b404 <Fine_DutyCorrection+0x994>)
   8b352:	6819      	ldr	r1, [r3, #0]
   8b354:	4b24      	ldr	r3, [pc, #144]	; (8b3e8 <Fine_DutyCorrection+0x978>)
   8b356:	4610      	mov	r0, r2
   8b358:	4798      	blx	r3
   8b35a:	4603      	mov	r3, r0
   8b35c:	461a      	mov	r2, r3
   8b35e:	4b28      	ldr	r3, [pc, #160]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b360:	4610      	mov	r0, r2
   8b362:	4798      	blx	r3
   8b364:	4c30      	ldr	r4, [pc, #192]	; (8b428 <Fine_DutyCorrection+0x9b8>)
   8b366:	a31c      	add	r3, pc, #112	; (adr r3, 8b3d8 <Fine_DutyCorrection+0x968>)
   8b368:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b36c:	47a0      	blx	r4
   8b36e:	4603      	mov	r3, r0
   8b370:	2b00      	cmp	r3, #0
   8b372:	d009      	beq.n	8b388 <Fine_DutyCorrection+0x918>
				{
					avg_duty = avg_duty-6;
   8b374:	4b29      	ldr	r3, [pc, #164]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b376:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b37a:	b29b      	uxth	r3, r3
   8b37c:	3b06      	subs	r3, #6
   8b37e:	b29b      	uxth	r3, r3
   8b380:	b21a      	sxth	r2, r3
   8b382:	4b26      	ldr	r3, [pc, #152]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b384:	801a      	strh	r2, [r3, #0]
   8b386:	e01c      	b.n	8b3c2 <Fine_DutyCorrection+0x952>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b388:	4b1e      	ldr	r3, [pc, #120]	; (8b404 <Fine_DutyCorrection+0x994>)
   8b38a:	681a      	ldr	r2, [r3, #0]
   8b38c:	4b1b      	ldr	r3, [pc, #108]	; (8b3fc <Fine_DutyCorrection+0x98c>)
   8b38e:	6819      	ldr	r1, [r3, #0]
   8b390:	4b15      	ldr	r3, [pc, #84]	; (8b3e8 <Fine_DutyCorrection+0x978>)
   8b392:	4610      	mov	r0, r2
   8b394:	4798      	blx	r3
   8b396:	4603      	mov	r3, r0
   8b398:	461a      	mov	r2, r3
   8b39a:	4b19      	ldr	r3, [pc, #100]	; (8b400 <Fine_DutyCorrection+0x990>)
   8b39c:	4610      	mov	r0, r2
   8b39e:	4798      	blx	r3
   8b3a0:	4c21      	ldr	r4, [pc, #132]	; (8b428 <Fine_DutyCorrection+0x9b8>)
   8b3a2:	a30d      	add	r3, pc, #52	; (adr r3, 8b3d8 <Fine_DutyCorrection+0x968>)
   8b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b3a8:	47a0      	blx	r4
   8b3aa:	4603      	mov	r3, r0
   8b3ac:	2b00      	cmp	r3, #0
   8b3ae:	d008      	beq.n	8b3c2 <Fine_DutyCorrection+0x952>
				{
					avg_duty = avg_duty+6;
   8b3b0:	4b1a      	ldr	r3, [pc, #104]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b3b2:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b3b6:	b29b      	uxth	r3, r3
   8b3b8:	3306      	adds	r3, #6
   8b3ba:	b29b      	uxth	r3, r3
   8b3bc:	b21a      	sxth	r2, r3
   8b3be:	4b17      	ldr	r3, [pc, #92]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b3c0:	801a      	strh	r2, [r3, #0]
				}
			}
			

		}
	  avg_duty = avg_duty;
   8b3c2:	4b16      	ldr	r3, [pc, #88]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b3c4:	f9b3 2000 	ldrsh.w	r2, [r3]
   8b3c8:	4b14      	ldr	r3, [pc, #80]	; (8b41c <Fine_DutyCorrection+0x9ac>)
   8b3ca:	801a      	strh	r2, [r3, #0]
	}
	
}
   8b3cc:	e7ff      	b.n	8b3ce <Fine_DutyCorrection+0x95e>
   8b3ce:	bf00      	nop
   8b3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b3d2:	bf00      	nop
   8b3d4:	f3af 8000 	nop.w
   8b3d8:	9999999a 	.word	0x9999999a
   8b3dc:	3fc99999 	.word	0x3fc99999
   8b3e0:	2007218a 	.word	0x2007218a
   8b3e4:	2007218c 	.word	0x2007218c
   8b3e8:	000a637d 	.word	0x000a637d
   8b3ec:	200719b0 	.word	0x200719b0
   8b3f0:	000a68e1 	.word	0x000a68e1
   8b3f4:	000a6381 	.word	0x000a6381
   8b3f8:	000a68f5 	.word	0x000a68f5
   8b3fc:	200719b4 	.word	0x200719b4
   8b400:	000a5c69 	.word	0x000a5c69
   8b404:	20072178 	.word	0x20072178
   8b408:	000a59ad 	.word	0x000a59ad
   8b40c:	000a61f5 	.word	0x000a61f5
   8b410:	200719ac 	.word	0x200719ac
   8b414:	42100000 	.word	0x42100000
   8b418:	200719d4 	.word	0x200719d4
   8b41c:	2007199e 	.word	0x2007199e
   8b420:	00099a95 	.word	0x00099a95
   8b424:	00089f71 	.word	0x00089f71
   8b428:	000a6231 	.word	0x000a6231

0008b42c <DataDisplay>:

DataDisplay()
{
   8b42c:	b580      	push	{r7, lr}
   8b42e:	b082      	sub	sp, #8
   8b430:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   8b432:	2300      	movs	r3, #0
   8b434:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   8b436:	4b23      	ldr	r3, [pc, #140]	; (8b4c4 <DataDisplay+0x98>)
   8b438:	681a      	ldr	r2, [r3, #0]
   8b43a:	4b23      	ldr	r3, [pc, #140]	; (8b4c8 <DataDisplay+0x9c>)
   8b43c:	4610      	mov	r0, r2
   8b43e:	4798      	blx	r3
   8b440:	4603      	mov	r3, r0
   8b442:	b29b      	uxth	r3, r3
   8b444:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   8b446:	2304      	movs	r3, #4
   8b448:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b44a:	1d3b      	adds	r3, r7, #4
   8b44c:	2204      	movs	r2, #4
   8b44e:	4619      	mov	r1, r3
   8b450:	2037      	movs	r0, #55	; 0x37
   8b452:	4b1e      	ldr	r3, [pc, #120]	; (8b4cc <DataDisplay+0xa0>)
   8b454:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b456:	2300      	movs	r3, #0
   8b458:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   8b45a:	4b1d      	ldr	r3, [pc, #116]	; (8b4d0 <DataDisplay+0xa4>)
   8b45c:	681a      	ldr	r2, [r3, #0]
   8b45e:	4b1a      	ldr	r3, [pc, #104]	; (8b4c8 <DataDisplay+0x9c>)
   8b460:	4610      	mov	r0, r2
   8b462:	4798      	blx	r3
   8b464:	4603      	mov	r3, r0
   8b466:	b29b      	uxth	r3, r3
   8b468:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   8b46a:	2305      	movs	r3, #5
   8b46c:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b46e:	1d3b      	adds	r3, r7, #4
   8b470:	2204      	movs	r2, #4
   8b472:	4619      	mov	r1, r3
   8b474:	2037      	movs	r0, #55	; 0x37
   8b476:	4b15      	ldr	r3, [pc, #84]	; (8b4cc <DataDisplay+0xa0>)
   8b478:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b47a:	2300      	movs	r3, #0
   8b47c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   8b47e:	4b15      	ldr	r3, [pc, #84]	; (8b4d4 <DataDisplay+0xa8>)
   8b480:	681a      	ldr	r2, [r3, #0]
   8b482:	4b11      	ldr	r3, [pc, #68]	; (8b4c8 <DataDisplay+0x9c>)
   8b484:	4610      	mov	r0, r2
   8b486:	4798      	blx	r3
   8b488:	4603      	mov	r3, r0
   8b48a:	b29b      	uxth	r3, r3
   8b48c:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   8b48e:	2306      	movs	r3, #6
   8b490:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b492:	1d3b      	adds	r3, r7, #4
   8b494:	2204      	movs	r2, #4
   8b496:	4619      	mov	r1, r3
   8b498:	2037      	movs	r0, #55	; 0x37
   8b49a:	4b0c      	ldr	r3, [pc, #48]	; (8b4cc <DataDisplay+0xa0>)
   8b49c:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b49e:	2300      	movs	r3, #0
   8b4a0:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8b4a2:	4b0d      	ldr	r3, [pc, #52]	; (8b4d8 <DataDisplay+0xac>)
   8b4a4:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b4a8:	b29b      	uxth	r3, r3
   8b4aa:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8b4ac:	2307      	movs	r3, #7
   8b4ae:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b4b0:	1d3b      	adds	r3, r7, #4
   8b4b2:	2204      	movs	r2, #4
   8b4b4:	4619      	mov	r1, r3
   8b4b6:	2037      	movs	r0, #55	; 0x37
   8b4b8:	4b04      	ldr	r3, [pc, #16]	; (8b4cc <DataDisplay+0xa0>)
   8b4ba:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   8b4bc:	bf00      	nop
   8b4be:	3708      	adds	r7, #8
   8b4c0:	46bd      	mov	sp, r7
   8b4c2:	bd80      	pop	{r7, pc}
   8b4c4:	200719ac 	.word	0x200719ac
   8b4c8:	000a6969 	.word	0x000a6969
   8b4cc:	0009b805 	.word	0x0009b805
   8b4d0:	200719b0 	.word	0x200719b0
   8b4d4:	200719b4 	.word	0x200719b4
   8b4d8:	2007199e 	.word	0x2007199e

0008b4dc <Hot_Rinse>:


void Hot_Rinse()
{
   8b4dc:	b590      	push	{r4, r7, lr}
   8b4de:	b083      	sub	sp, #12
   8b4e0:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   8b4e2:	4b84      	ldr	r3, [pc, #528]	; (8b6f4 <Hot_Rinse+0x218>)
   8b4e4:	881b      	ldrh	r3, [r3, #0]
   8b4e6:	3301      	adds	r3, #1
   8b4e8:	b29a      	uxth	r2, r3
   8b4ea:	4b82      	ldr	r3, [pc, #520]	; (8b6f4 <Hot_Rinse+0x218>)
   8b4ec:	801a      	strh	r2, [r3, #0]
		if(HeaterState == CL_HEATER_STATE_OFF  )
   8b4ee:	4b82      	ldr	r3, [pc, #520]	; (8b6f8 <Hot_Rinse+0x21c>)
   8b4f0:	781b      	ldrb	r3, [r3, #0]
   8b4f2:	2b04      	cmp	r3, #4
   8b4f4:	d102      	bne.n	8b4fc <Hot_Rinse+0x20>
		{
			sv_cntrl_poweroffheater();
   8b4f6:	4b81      	ldr	r3, [pc, #516]	; (8b6fc <Hot_Rinse+0x220>)
   8b4f8:	4798      	blx	r3
			return;
   8b4fa:	e0f7      	b.n	8b6ec <Hot_Rinse+0x210>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8b4fc:	4b7e      	ldr	r3, [pc, #504]	; (8b6f8 <Hot_Rinse+0x21c>)
   8b4fe:	781b      	ldrb	r3, [r3, #0]
   8b500:	2b00      	cmp	r3, #0
   8b502:	f000 80f2 	beq.w	8b6ea <Hot_Rinse+0x20e>
   8b506:	4b7c      	ldr	r3, [pc, #496]	; (8b6f8 <Hot_Rinse+0x21c>)
   8b508:	781b      	ldrb	r3, [r3, #0]
   8b50a:	2b00      	cmp	r3, #0
   8b50c:	f000 80ed 	beq.w	8b6ea <Hot_Rinse+0x20e>
			return;
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		if(HeaterState == CL_HEATER_STATE_ON)
   8b510:	4b79      	ldr	r3, [pc, #484]	; (8b6f8 <Hot_Rinse+0x21c>)
   8b512:	781b      	ldrb	r3, [r3, #0]
   8b514:	2b01      	cmp	r3, #1
   8b516:	d107      	bne.n	8b528 <Hot_Rinse+0x4c>
		{
			sv_cntrl_poweronheater();
   8b518:	4b79      	ldr	r3, [pc, #484]	; (8b700 <Hot_Rinse+0x224>)
   8b51a:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   8b51c:	4b79      	ldr	r3, [pc, #484]	; (8b704 <Hot_Rinse+0x228>)
   8b51e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b522:	4618      	mov	r0, r3
   8b524:	4b78      	ldr	r3, [pc, #480]	; (8b708 <Hot_Rinse+0x22c>)
   8b526:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   8b528:	4b78      	ldr	r3, [pc, #480]	; (8b70c <Hot_Rinse+0x230>)
   8b52a:	681b      	ldr	r3, [r3, #0]
   8b52c:	4a78      	ldr	r2, [pc, #480]	; (8b710 <Hot_Rinse+0x234>)
   8b52e:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8b530:	1dbb      	adds	r3, r7, #6
   8b532:	4619      	mov	r1, r3
   8b534:	2013      	movs	r0, #19
   8b536:	4b77      	ldr	r3, [pc, #476]	; (8b714 <Hot_Rinse+0x238>)
   8b538:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// 			Tmp2Val = Tmp2Val - - 0.4;                                     // sensor offset

			Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   8b53a:	4b74      	ldr	r3, [pc, #464]	; (8b70c <Hot_Rinse+0x230>)
   8b53c:	681a      	ldr	r2, [r3, #0]
   8b53e:	4b76      	ldr	r3, [pc, #472]	; (8b718 <Hot_Rinse+0x23c>)
   8b540:	4976      	ldr	r1, [pc, #472]	; (8b71c <Hot_Rinse+0x240>)
   8b542:	4610      	mov	r0, r2
   8b544:	4798      	blx	r3
   8b546:	4603      	mov	r3, r0
   8b548:	461c      	mov	r4, r3
   8b54a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8b54e:	4b74      	ldr	r3, [pc, #464]	; (8b720 <Hot_Rinse+0x244>)
   8b550:	4610      	mov	r0, r2
   8b552:	4798      	blx	r3
   8b554:	4602      	mov	r2, r0
   8b556:	4b73      	ldr	r3, [pc, #460]	; (8b724 <Hot_Rinse+0x248>)
   8b558:	4973      	ldr	r1, [pc, #460]	; (8b728 <Hot_Rinse+0x24c>)
   8b55a:	4610      	mov	r0, r2
   8b55c:	4798      	blx	r3
   8b55e:	4603      	mov	r3, r0
   8b560:	461a      	mov	r2, r3
   8b562:	4b72      	ldr	r3, [pc, #456]	; (8b72c <Hot_Rinse+0x250>)
   8b564:	4611      	mov	r1, r2
   8b566:	4620      	mov	r0, r4
   8b568:	4798      	blx	r3
   8b56a:	4603      	mov	r3, r0
   8b56c:	461a      	mov	r2, r3
   8b56e:	4b6d      	ldr	r3, [pc, #436]	; (8b724 <Hot_Rinse+0x248>)
   8b570:	496f      	ldr	r1, [pc, #444]	; (8b730 <Hot_Rinse+0x254>)
   8b572:	4610      	mov	r0, r2
   8b574:	4798      	blx	r3
   8b576:	4603      	mov	r3, r0
   8b578:	461a      	mov	r2, r3
   8b57a:	4b64      	ldr	r3, [pc, #400]	; (8b70c <Hot_Rinse+0x230>)
   8b57c:	601a      	str	r2, [r3, #0]
//			Tmp2Val = (float)sensordata/100;
		}
		
		if (!(count_500ms %20))
   8b57e:	4b5d      	ldr	r3, [pc, #372]	; (8b6f4 <Hot_Rinse+0x218>)
   8b580:	881a      	ldrh	r2, [r3, #0]
   8b582:	4b6c      	ldr	r3, [pc, #432]	; (8b734 <Hot_Rinse+0x258>)
   8b584:	fba3 1302 	umull	r1, r3, r3, r2
   8b588:	0919      	lsrs	r1, r3, #4
   8b58a:	460b      	mov	r3, r1
   8b58c:	009b      	lsls	r3, r3, #2
   8b58e:	440b      	add	r3, r1
   8b590:	009b      	lsls	r3, r3, #2
   8b592:	1ad3      	subs	r3, r2, r3
   8b594:	b29b      	uxth	r3, r3
   8b596:	2b00      	cmp	r3, #0
   8b598:	d103      	bne.n	8b5a2 <Hot_Rinse+0xc6>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8b59a:	4b67      	ldr	r3, [pc, #412]	; (8b738 <Hot_Rinse+0x25c>)
   8b59c:	681b      	ldr	r3, [r3, #0]
   8b59e:	4a67      	ldr	r2, [pc, #412]	; (8b73c <Hot_Rinse+0x260>)
   8b5a0:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8b5a2:	1dbb      	adds	r3, r7, #6
   8b5a4:	4619      	mov	r1, r3
   8b5a6:	2014      	movs	r0, #20
   8b5a8:	4b5a      	ldr	r3, [pc, #360]	; (8b714 <Hot_Rinse+0x238>)
   8b5aa:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 			Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
			Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   8b5ac:	4b62      	ldr	r3, [pc, #392]	; (8b738 <Hot_Rinse+0x25c>)
   8b5ae:	681a      	ldr	r2, [r3, #0]
   8b5b0:	4b59      	ldr	r3, [pc, #356]	; (8b718 <Hot_Rinse+0x23c>)
   8b5b2:	495a      	ldr	r1, [pc, #360]	; (8b71c <Hot_Rinse+0x240>)
   8b5b4:	4610      	mov	r0, r2
   8b5b6:	4798      	blx	r3
   8b5b8:	4603      	mov	r3, r0
   8b5ba:	461c      	mov	r4, r3
   8b5bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8b5c0:	4b57      	ldr	r3, [pc, #348]	; (8b720 <Hot_Rinse+0x244>)
   8b5c2:	4610      	mov	r0, r2
   8b5c4:	4798      	blx	r3
   8b5c6:	4602      	mov	r2, r0
   8b5c8:	4b56      	ldr	r3, [pc, #344]	; (8b724 <Hot_Rinse+0x248>)
   8b5ca:	4957      	ldr	r1, [pc, #348]	; (8b728 <Hot_Rinse+0x24c>)
   8b5cc:	4610      	mov	r0, r2
   8b5ce:	4798      	blx	r3
   8b5d0:	4603      	mov	r3, r0
   8b5d2:	461a      	mov	r2, r3
   8b5d4:	4b55      	ldr	r3, [pc, #340]	; (8b72c <Hot_Rinse+0x250>)
   8b5d6:	4611      	mov	r1, r2
   8b5d8:	4620      	mov	r0, r4
   8b5da:	4798      	blx	r3
   8b5dc:	4603      	mov	r3, r0
   8b5de:	461a      	mov	r2, r3
   8b5e0:	4b50      	ldr	r3, [pc, #320]	; (8b724 <Hot_Rinse+0x248>)
   8b5e2:	4953      	ldr	r1, [pc, #332]	; (8b730 <Hot_Rinse+0x254>)
   8b5e4:	4610      	mov	r0, r2
   8b5e6:	4798      	blx	r3
   8b5e8:	4603      	mov	r3, r0
   8b5ea:	461a      	mov	r2, r3
   8b5ec:	4b52      	ldr	r3, [pc, #328]	; (8b738 <Hot_Rinse+0x25c>)
   8b5ee:	601a      	str	r2, [r3, #0]
//			Tmp3Val = (float)sensordata /100;
		}
		
		
		if (!(count_500ms %20))
   8b5f0:	4b40      	ldr	r3, [pc, #256]	; (8b6f4 <Hot_Rinse+0x218>)
   8b5f2:	881a      	ldrh	r2, [r3, #0]
   8b5f4:	4b4f      	ldr	r3, [pc, #316]	; (8b734 <Hot_Rinse+0x258>)
   8b5f6:	fba3 1302 	umull	r1, r3, r3, r2
   8b5fa:	0919      	lsrs	r1, r3, #4
   8b5fc:	460b      	mov	r3, r1
   8b5fe:	009b      	lsls	r3, r3, #2
   8b600:	440b      	add	r3, r1
   8b602:	009b      	lsls	r3, r3, #2
   8b604:	1ad3      	subs	r3, r2, r3
   8b606:	b29b      	uxth	r3, r3
   8b608:	2b00      	cmp	r3, #0
   8b60a:	d16f      	bne.n	8b6ec <Hot_Rinse+0x210>
		{
			
		
		if ((Tmp2Val - 75) > 5 )     
   8b60c:	4b3f      	ldr	r3, [pc, #252]	; (8b70c <Hot_Rinse+0x230>)
   8b60e:	681a      	ldr	r2, [r3, #0]
   8b610:	4b4b      	ldr	r3, [pc, #300]	; (8b740 <Hot_Rinse+0x264>)
   8b612:	494c      	ldr	r1, [pc, #304]	; (8b744 <Hot_Rinse+0x268>)
   8b614:	4610      	mov	r0, r2
   8b616:	4798      	blx	r3
   8b618:	4603      	mov	r3, r0
   8b61a:	461a      	mov	r2, r3
   8b61c:	4b4a      	ldr	r3, [pc, #296]	; (8b748 <Hot_Rinse+0x26c>)
   8b61e:	494b      	ldr	r1, [pc, #300]	; (8b74c <Hot_Rinse+0x270>)
   8b620:	4610      	mov	r0, r2
   8b622:	4798      	blx	r3
   8b624:	4603      	mov	r3, r0
   8b626:	2b00      	cmp	r3, #0
   8b628:	d014      	beq.n	8b654 <Hot_Rinse+0x178>
		{
			avg_duty = avg_duty - 100;
   8b62a:	4b36      	ldr	r3, [pc, #216]	; (8b704 <Hot_Rinse+0x228>)
   8b62c:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b630:	b29b      	uxth	r3, r3
   8b632:	3b64      	subs	r3, #100	; 0x64
   8b634:	b29b      	uxth	r3, r3
   8b636:	b21a      	sxth	r2, r3
   8b638:	4b32      	ldr	r3, [pc, #200]	; (8b704 <Hot_Rinse+0x228>)
   8b63a:	801a      	strh	r2, [r3, #0]
			if (avg_duty <2500)
   8b63c:	4b31      	ldr	r3, [pc, #196]	; (8b704 <Hot_Rinse+0x228>)
   8b63e:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b642:	f640 12c3 	movw	r2, #2499	; 0x9c3
   8b646:	4293      	cmp	r3, r2
   8b648:	dc48      	bgt.n	8b6dc <Hot_Rinse+0x200>
			{
				avg_duty = 2500;
   8b64a:	4b2e      	ldr	r3, [pc, #184]	; (8b704 <Hot_Rinse+0x228>)
   8b64c:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b650:	801a      	strh	r2, [r3, #0]
   8b652:	e043      	b.n	8b6dc <Hot_Rinse+0x200>
			}
			
		}
		else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8b654:	4b2d      	ldr	r3, [pc, #180]	; (8b70c <Hot_Rinse+0x230>)
   8b656:	681a      	ldr	r2, [r3, #0]
   8b658:	4b39      	ldr	r3, [pc, #228]	; (8b740 <Hot_Rinse+0x264>)
   8b65a:	4611      	mov	r1, r2
   8b65c:	4839      	ldr	r0, [pc, #228]	; (8b744 <Hot_Rinse+0x268>)
   8b65e:	4798      	blx	r3
   8b660:	4603      	mov	r3, r0
   8b662:	461a      	mov	r2, r3
   8b664:	4b38      	ldr	r3, [pc, #224]	; (8b748 <Hot_Rinse+0x26c>)
   8b666:	4939      	ldr	r1, [pc, #228]	; (8b74c <Hot_Rinse+0x270>)
   8b668:	4610      	mov	r0, r2
   8b66a:	4798      	blx	r3
   8b66c:	4603      	mov	r3, r0
   8b66e:	2b00      	cmp	r3, #0
   8b670:	d01d      	beq.n	8b6ae <Hot_Rinse+0x1d2>
   8b672:	4b31      	ldr	r3, [pc, #196]	; (8b738 <Hot_Rinse+0x25c>)
   8b674:	681a      	ldr	r2, [r3, #0]
   8b676:	4b36      	ldr	r3, [pc, #216]	; (8b750 <Hot_Rinse+0x274>)
   8b678:	4936      	ldr	r1, [pc, #216]	; (8b754 <Hot_Rinse+0x278>)
   8b67a:	4610      	mov	r0, r2
   8b67c:	4798      	blx	r3
   8b67e:	4603      	mov	r3, r0
   8b680:	2b00      	cmp	r3, #0
   8b682:	d014      	beq.n	8b6ae <Hot_Rinse+0x1d2>
		{
			avg_duty = avg_duty + 80;
   8b684:	4b1f      	ldr	r3, [pc, #124]	; (8b704 <Hot_Rinse+0x228>)
   8b686:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b68a:	b29b      	uxth	r3, r3
   8b68c:	3350      	adds	r3, #80	; 0x50
   8b68e:	b29b      	uxth	r3, r3
   8b690:	b21a      	sxth	r2, r3
   8b692:	4b1c      	ldr	r3, [pc, #112]	; (8b704 <Hot_Rinse+0x228>)
   8b694:	801a      	strh	r2, [r3, #0]
			if (avg_duty >3500)
   8b696:	4b1b      	ldr	r3, [pc, #108]	; (8b704 <Hot_Rinse+0x228>)
   8b698:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b69c:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b6a0:	4293      	cmp	r3, r2
   8b6a2:	dd1b      	ble.n	8b6dc <Hot_Rinse+0x200>
			{
				avg_duty = 3500;
   8b6a4:	4b17      	ldr	r3, [pc, #92]	; (8b704 <Hot_Rinse+0x228>)
   8b6a6:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b6aa:	801a      	strh	r2, [r3, #0]
			
		}
		else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
		{
			avg_duty = avg_duty + 80;
			if (avg_duty >3500)
   8b6ac:	e016      	b.n	8b6dc <Hot_Rinse+0x200>
			{
				avg_duty = 3500;
			}
		}
		
		else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8b6ae:	4b22      	ldr	r3, [pc, #136]	; (8b738 <Hot_Rinse+0x25c>)
   8b6b0:	681a      	ldr	r2, [r3, #0]
   8b6b2:	4b27      	ldr	r3, [pc, #156]	; (8b750 <Hot_Rinse+0x274>)
   8b6b4:	4928      	ldr	r1, [pc, #160]	; (8b758 <Hot_Rinse+0x27c>)
   8b6b6:	4610      	mov	r0, r2
   8b6b8:	4798      	blx	r3
   8b6ba:	4603      	mov	r3, r0
   8b6bc:	2b00      	cmp	r3, #0
   8b6be:	d00d      	beq.n	8b6dc <Hot_Rinse+0x200>
   8b6c0:	4b1d      	ldr	r3, [pc, #116]	; (8b738 <Hot_Rinse+0x25c>)
   8b6c2:	681a      	ldr	r2, [r3, #0]
   8b6c4:	4b25      	ldr	r3, [pc, #148]	; (8b75c <Hot_Rinse+0x280>)
   8b6c6:	4923      	ldr	r1, [pc, #140]	; (8b754 <Hot_Rinse+0x278>)
   8b6c8:	4610      	mov	r0, r2
   8b6ca:	4798      	blx	r3
   8b6cc:	4603      	mov	r3, r0
   8b6ce:	2b00      	cmp	r3, #0
   8b6d0:	d004      	beq.n	8b6dc <Hot_Rinse+0x200>
		{
			avg_duty = avg_duty;
   8b6d2:	4b0c      	ldr	r3, [pc, #48]	; (8b704 <Hot_Rinse+0x228>)
   8b6d4:	f9b3 2000 	ldrsh.w	r2, [r3]
   8b6d8:	4b0a      	ldr	r3, [pc, #40]	; (8b704 <Hot_Rinse+0x228>)
   8b6da:	801a      	strh	r2, [r3, #0]
		}
		
	sv_cntrl_incheater(avg_duty);
   8b6dc:	4b09      	ldr	r3, [pc, #36]	; (8b704 <Hot_Rinse+0x228>)
   8b6de:	f9b3 3000 	ldrsh.w	r3, [r3]
   8b6e2:	4618      	mov	r0, r3
   8b6e4:	4b08      	ldr	r3, [pc, #32]	; (8b708 <Hot_Rinse+0x22c>)
   8b6e6:	4798      	blx	r3
   8b6e8:	e000      	b.n	8b6ec <Hot_Rinse+0x210>
			sv_cntrl_poweroffheater();
			return;
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
		{
			return;
   8b6ea:	bf00      	nop
		
	sv_cntrl_incheater(avg_duty);
		
		}
	
}
   8b6ec:	370c      	adds	r7, #12
   8b6ee:	46bd      	mov	sp, r7
   8b6f0:	bd90      	pop	{r4, r7, pc}
   8b6f2:	bf00      	nop
   8b6f4:	200719b8 	.word	0x200719b8
   8b6f8:	2007199b 	.word	0x2007199b
   8b6fc:	00099a95 	.word	0x00099a95
   8b700:	00099a81 	.word	0x00099a81
   8b704:	2007199e 	.word	0x2007199e
   8b708:	00099b89 	.word	0x00099b89
   8b70c:	200719b0 	.word	0x200719b0
   8b710:	200719c8 	.word	0x200719c8
   8b714:	0008e6a1 	.word	0x0008e6a1
   8b718:	000a6591 	.word	0x000a6591
   8b71c:	41100000 	.word	0x41100000
   8b720:	000a64e9 	.word	0x000a64e9
   8b724:	000a66f9 	.word	0x000a66f9
   8b728:	42c80000 	.word	0x42c80000
   8b72c:	000a6381 	.word	0x000a6381
   8b730:	41200000 	.word	0x41200000
   8b734:	cccccccd 	.word	0xcccccccd
   8b738:	200719b4 	.word	0x200719b4
   8b73c:	2007217c 	.word	0x2007217c
   8b740:	000a637d 	.word	0x000a637d
   8b744:	42960000 	.word	0x42960000
   8b748:	000a6909 	.word	0x000a6909
   8b74c:	40a00000 	.word	0x40a00000
   8b750:	000a68e1 	.word	0x000a68e1
   8b754:	428c0000 	.word	0x428c0000
   8b758:	42a00000 	.word	0x42a00000
   8b75c:	000a68f5 	.word	0x000a68f5

0008b760 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8b760:	b580      	push	{r7, lr}
   8b762:	b090      	sub	sp, #64	; 0x40
   8b764:	af00      	add	r7, sp, #0
   8b766:	4603      	mov	r3, r0
   8b768:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8b76a:	2300      	movs	r3, #0
   8b76c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8b770:	2300      	movs	r3, #0
   8b772:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8b776:	2300      	movs	r3, #0
   8b778:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8b77a:	f107 0239 	add.w	r2, r7, #57	; 0x39
   8b77e:	79fb      	ldrb	r3, [r7, #7]
   8b780:	4611      	mov	r1, r2
   8b782:	4618      	mov	r0, r3
   8b784:	4b82      	ldr	r3, [pc, #520]	; (8b990 <Cl_Init_Controller+0x230>)
   8b786:	4798      	blx	r3
	switch (Cl_Init_States)
   8b788:	4b82      	ldr	r3, [pc, #520]	; (8b994 <Cl_Init_Controller+0x234>)
   8b78a:	781b      	ldrb	r3, [r3, #0]
   8b78c:	2b08      	cmp	r3, #8
   8b78e:	f200 80f8 	bhi.w	8b982 <Cl_Init_Controller+0x222>
   8b792:	a201      	add	r2, pc, #4	; (adr r2, 8b798 <Cl_Init_Controller+0x38>)
   8b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b798:	0008b7bd 	.word	0x0008b7bd
   8b79c:	0008b8cb 	.word	0x0008b8cb
   8b7a0:	0008b8f5 	.word	0x0008b8f5
   8b7a4:	0008b983 	.word	0x0008b983
   8b7a8:	0008b983 	.word	0x0008b983
   8b7ac:	0008b91d 	.word	0x0008b91d
   8b7b0:	0008b983 	.word	0x0008b983
   8b7b4:	0008b983 	.word	0x0008b983
   8b7b8:	0008b94d 	.word	0x0008b94d
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8b7bc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b7c0:	2b01      	cmp	r3, #1
   8b7c2:	d000      	beq.n	8b7c6 <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8b7c4:	e080      	b.n	8b8c8 <Cl_Init_Controller+0x168>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8b7c6:	4b73      	ldr	r3, [pc, #460]	; (8b994 <Cl_Init_Controller+0x234>)
   8b7c8:	2201      	movs	r2, #1
   8b7ca:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8b7cc:	2302      	movs	r3, #2
   8b7ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b7d2:	231a      	movs	r3, #26
   8b7d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b7d8:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b7dc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b7e0:	2201      	movs	r2, #1
   8b7e2:	4618      	mov	r0, r3
   8b7e4:	4b6c      	ldr	r3, [pc, #432]	; (8b998 <Cl_Init_Controller+0x238>)
   8b7e6:	4798      	blx	r3
   8b7e8:	4603      	mov	r3, r0
   8b7ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8b7ee:	4b69      	ldr	r3, [pc, #420]	; (8b994 <Cl_Init_Controller+0x234>)
   8b7f0:	2205      	movs	r2, #5
   8b7f2:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8b7f4:	2305      	movs	r3, #5
   8b7f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b7fa:	231a      	movs	r3, #26
   8b7fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b800:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b804:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b808:	2201      	movs	r2, #1
   8b80a:	4618      	mov	r0, r3
   8b80c:	4b62      	ldr	r3, [pc, #392]	; (8b998 <Cl_Init_Controller+0x238>)
   8b80e:	4798      	blx	r3
   8b810:	4603      	mov	r3, r0
   8b812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8b816:	e00d      	b.n	8b834 <Cl_Init_Controller+0xd4>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8b818:	4a60      	ldr	r2, [pc, #384]	; (8b99c <Cl_Init_Controller+0x23c>)
   8b81a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b81c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b822:	009b      	lsls	r3, r3, #2
   8b824:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8b828:	440b      	add	r3, r1
   8b82a:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8b82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b830:	3301      	adds	r3, #1
   8b832:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8b834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b836:	2b09      	cmp	r3, #9
   8b838:	ddee      	ble.n	8b818 <Cl_Init_Controller+0xb8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8b83a:	2300      	movs	r3, #0
   8b83c:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8b83e:	e00f      	b.n	8b860 <Cl_Init_Controller+0x100>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8b840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b842:	009b      	lsls	r3, r3, #2
   8b844:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8b848:	4413      	add	r3, r2
   8b84a:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8b84e:	4953      	ldr	r1, [pc, #332]	; (8b99c <Cl_Init_Controller+0x23c>)
   8b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b852:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8b856:	429a      	cmp	r2, r3
   8b858:	d106      	bne.n	8b868 <Cl_Init_Controller+0x108>
							{
								// test FAILed
								break;
							}
							count++;
   8b85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b85c:	3301      	adds	r3, #1
   8b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8b860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8b862:	2b09      	cmp	r3, #9
   8b864:	ddec      	ble.n	8b840 <Cl_Init_Controller+0xe0>
   8b866:	e000      	b.n	8b86a <Cl_Init_Controller+0x10a>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
							{
								// test FAILed
								break;
   8b868:	bf00      	nop
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8b86a:	4b4a      	ldr	r3, [pc, #296]	; (8b994 <Cl_Init_Controller+0x234>)
   8b86c:	2207      	movs	r2, #7
   8b86e:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8b870:	2307      	movs	r3, #7
   8b872:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b876:	231a      	movs	r3, #26
   8b878:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b87c:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b880:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b884:	2201      	movs	r2, #1
   8b886:	4618      	mov	r0, r3
   8b888:	4b43      	ldr	r3, [pc, #268]	; (8b998 <Cl_Init_Controller+0x238>)
   8b88a:	4798      	blx	r3
   8b88c:	4603      	mov	r3, r0
   8b88e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8b892:	4b40      	ldr	r3, [pc, #256]	; (8b994 <Cl_Init_Controller+0x234>)
   8b894:	2208      	movs	r2, #8
   8b896:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8b898:	2308      	movs	r3, #8
   8b89a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8b89e:	231b      	movs	r3, #27
   8b8a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8b8a4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   8b8a8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   8b8ac:	2200      	movs	r2, #0
   8b8ae:	4618      	mov	r0, r3
   8b8b0:	4b39      	ldr	r3, [pc, #228]	; (8b998 <Cl_Init_Controller+0x238>)
   8b8b2:	4798      	blx	r3
   8b8b4:	4603      	mov	r3, r0
   8b8b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8b8ba:	2000      	movs	r0, #0
   8b8bc:	4b38      	ldr	r3, [pc, #224]	; (8b9a0 <Cl_Init_Controller+0x240>)
   8b8be:	4798      	blx	r3
   8b8c0:	4603      	mov	r3, r0
   8b8c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8b8c6:	bf00      	nop
						default:break;
					}
		break;
   8b8c8:	e05c      	b.n	8b984 <Cl_Init_Controller+0x224>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8b8ca:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b8ce:	3b02      	subs	r3, #2
   8b8d0:	2b04      	cmp	r3, #4
   8b8d2:	d80d      	bhi.n	8b8f0 <Cl_Init_Controller+0x190>
   8b8d4:	a201      	add	r2, pc, #4	; (adr r2, 8b8dc <Cl_Init_Controller+0x17c>)
   8b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b8da:	bf00      	nop
   8b8dc:	0008b8f1 	.word	0x0008b8f1
   8b8e0:	0008b8f1 	.word	0x0008b8f1
   8b8e4:	0008b8f1 	.word	0x0008b8f1
   8b8e8:	0008b8f1 	.word	0x0008b8f1
   8b8ec:	0008b8f1 	.word	0x0008b8f1
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b8f0:	bf00      	nop
					}
		break;
   8b8f2:	e047      	b.n	8b984 <Cl_Init_Controller+0x224>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8b8f4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b8f8:	3b02      	subs	r3, #2
   8b8fa:	2b04      	cmp	r3, #4
   8b8fc:	d80c      	bhi.n	8b918 <Cl_Init_Controller+0x1b8>
   8b8fe:	a201      	add	r2, pc, #4	; (adr r2, 8b904 <Cl_Init_Controller+0x1a4>)
   8b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b904:	0008b919 	.word	0x0008b919
   8b908:	0008b919 	.word	0x0008b919
   8b90c:	0008b919 	.word	0x0008b919
   8b910:	0008b919 	.word	0x0008b919
   8b914:	0008b919 	.word	0x0008b919
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b918:	bf00      	nop
					}
		break;
   8b91a:	e033      	b.n	8b984 <Cl_Init_Controller+0x224>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8b91c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b920:	3b02      	subs	r3, #2
   8b922:	2b04      	cmp	r3, #4
   8b924:	d810      	bhi.n	8b948 <Cl_Init_Controller+0x1e8>
   8b926:	a201      	add	r2, pc, #4	; (adr r2, 8b92c <Cl_Init_Controller+0x1cc>)
   8b928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b92c:	0008b949 	.word	0x0008b949
   8b930:	0008b949 	.word	0x0008b949
   8b934:	0008b941 	.word	0x0008b941
   8b938:	0008b949 	.word	0x0008b949
   8b93c:	0008b949 	.word	0x0008b949
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8b940:	4b14      	ldr	r3, [pc, #80]	; (8b994 <Cl_Init_Controller+0x234>)
   8b942:	2208      	movs	r2, #8
   8b944:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8b946:	e000      	b.n	8b94a <Cl_Init_Controller+0x1ea>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8b948:	bf00      	nop
					}
		break;
   8b94a:	e01b      	b.n	8b984 <Cl_Init_Controller+0x224>
		case CL_INIT_READY:
							switch(cl_initevent)
   8b94c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b950:	3b02      	subs	r3, #2
   8b952:	2b04      	cmp	r3, #4
   8b954:	d813      	bhi.n	8b97e <Cl_Init_Controller+0x21e>
   8b956:	a201      	add	r2, pc, #4	; (adr r2, 8b95c <Cl_Init_Controller+0x1fc>)
   8b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b95c:	0008b97f 	.word	0x0008b97f
   8b960:	0008b97f 	.word	0x0008b97f
   8b964:	0008b971 	.word	0x0008b971
   8b968:	0008b97f 	.word	0x0008b97f
   8b96c:	0008b97f 	.word	0x0008b97f
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8b970:	2043      	movs	r0, #67	; 0x43
   8b972:	4b0c      	ldr	r3, [pc, #48]	; (8b9a4 <Cl_Init_Controller+0x244>)
   8b974:	4798      	blx	r3
   8b976:	4603      	mov	r3, r0
   8b978:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8b97c:	e000      	b.n	8b980 <Cl_Init_Controller+0x220>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8b97e:	bf00      	nop
							}
					

		break;
   8b980:	e000      	b.n	8b984 <Cl_Init_Controller+0x224>

			
			default: break;
   8b982:	bf00      	nop
	}
return CL_OK;	
   8b984:	2300      	movs	r3, #0
}
   8b986:	4618      	mov	r0, r3
   8b988:	3740      	adds	r7, #64	; 0x40
   8b98a:	46bd      	mov	sp, r7
   8b98c:	bd80      	pop	{r7, pc}
   8b98e:	bf00      	nop
   8b990:	0008b9a9 	.word	0x0008b9a9
   8b994:	200719d5 	.word	0x200719d5
   8b998:	0009b805 	.word	0x0009b805
   8b99c:	2007054c 	.word	0x2007054c
   8b9a0:	0008f759 	.word	0x0008f759
   8b9a4:	0008ba55 	.word	0x0008ba55

0008b9a8 <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8b9a8:	b480      	push	{r7}
   8b9aa:	b083      	sub	sp, #12
   8b9ac:	af00      	add	r7, sp, #0
   8b9ae:	4603      	mov	r3, r0
   8b9b0:	6039      	str	r1, [r7, #0]
   8b9b2:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8b9b4:	79fb      	ldrb	r3, [r7, #7]
   8b9b6:	3b2a      	subs	r3, #42	; 0x2a
   8b9b8:	2b13      	cmp	r3, #19
   8b9ba:	d843      	bhi.n	8ba44 <cl_init_translatemacevent+0x9c>
   8b9bc:	a201      	add	r2, pc, #4	; (adr r2, 8b9c4 <cl_init_translatemacevent+0x1c>)
   8b9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b9c2:	bf00      	nop
   8b9c4:	0008ba15 	.word	0x0008ba15
   8b9c8:	0008ba45 	.word	0x0008ba45
   8b9cc:	0008ba45 	.word	0x0008ba45
   8b9d0:	0008ba45 	.word	0x0008ba45
   8b9d4:	0008ba45 	.word	0x0008ba45
   8b9d8:	0008ba45 	.word	0x0008ba45
   8b9dc:	0008ba45 	.word	0x0008ba45
   8b9e0:	0008ba45 	.word	0x0008ba45
   8b9e4:	0008ba45 	.word	0x0008ba45
   8b9e8:	0008ba45 	.word	0x0008ba45
   8b9ec:	0008ba45 	.word	0x0008ba45
   8b9f0:	0008ba45 	.word	0x0008ba45
   8b9f4:	0008ba45 	.word	0x0008ba45
   8b9f8:	0008ba45 	.word	0x0008ba45
   8b9fc:	0008ba45 	.word	0x0008ba45
   8ba00:	0008ba1d 	.word	0x0008ba1d
   8ba04:	0008ba25 	.word	0x0008ba25
   8ba08:	0008ba2d 	.word	0x0008ba2d
   8ba0c:	0008ba35 	.word	0x0008ba35
   8ba10:	0008ba3d 	.word	0x0008ba3d
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8ba14:	683b      	ldr	r3, [r7, #0]
   8ba16:	2201      	movs	r2, #1
   8ba18:	701a      	strb	r2, [r3, #0]
		break;
   8ba1a:	e014      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8ba1c:	683b      	ldr	r3, [r7, #0]
   8ba1e:	2202      	movs	r2, #2
   8ba20:	701a      	strb	r2, [r3, #0]
		break;
   8ba22:	e010      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8ba24:	683b      	ldr	r3, [r7, #0]
   8ba26:	2203      	movs	r2, #3
   8ba28:	701a      	strb	r2, [r3, #0]
		break;
   8ba2a:	e00c      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8ba2c:	683b      	ldr	r3, [r7, #0]
   8ba2e:	2204      	movs	r2, #4
   8ba30:	701a      	strb	r2, [r3, #0]
		break;		
   8ba32:	e008      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8ba34:	683b      	ldr	r3, [r7, #0]
   8ba36:	2205      	movs	r2, #5
   8ba38:	701a      	strb	r2, [r3, #0]
		break;	
   8ba3a:	e004      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8ba3c:	683b      	ldr	r3, [r7, #0]
   8ba3e:	2206      	movs	r2, #6
   8ba40:	701a      	strb	r2, [r3, #0]
		break;
   8ba42:	e000      	b.n	8ba46 <cl_init_translatemacevent+0x9e>
		default:
		break;
   8ba44:	bf00      	nop
	}
	return CL_OK;
   8ba46:	2300      	movs	r3, #0
}
   8ba48:	4618      	mov	r0, r3
   8ba4a:	370c      	adds	r7, #12
   8ba4c:	46bd      	mov	sp, r7
   8ba4e:	bc80      	pop	{r7}
   8ba50:	4770      	bx	lr
   8ba52:	bf00      	nop

0008ba54 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8ba54:	b480      	push	{r7}
   8ba56:	b085      	sub	sp, #20
   8ba58:	af00      	add	r7, sp, #0
   8ba5a:	4603      	mov	r3, r0
   8ba5c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8ba5e:	2300      	movs	r3, #0
   8ba60:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8ba62:	4b0d      	ldr	r3, [pc, #52]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba64:	781b      	ldrb	r3, [r3, #0]
   8ba66:	2b09      	cmp	r3, #9
   8ba68:	d80f      	bhi.n	8ba8a <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8ba6a:	4b0b      	ldr	r3, [pc, #44]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba6c:	781b      	ldrb	r3, [r3, #0]
   8ba6e:	461a      	mov	r2, r3
   8ba70:	4b09      	ldr	r3, [pc, #36]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba72:	4413      	add	r3, r2
   8ba74:	79fa      	ldrb	r2, [r7, #7]
   8ba76:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8ba78:	4b07      	ldr	r3, [pc, #28]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba7a:	2201      	movs	r2, #1
   8ba7c:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8ba7e:	4b06      	ldr	r3, [pc, #24]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba80:	781b      	ldrb	r3, [r3, #0]
   8ba82:	3301      	adds	r3, #1
   8ba84:	b2da      	uxtb	r2, r3
   8ba86:	4b04      	ldr	r3, [pc, #16]	; (8ba98 <Cl_mac_apprequesthandler+0x44>)
   8ba88:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8ba8a:	7bfb      	ldrb	r3, [r7, #15]
   8ba8c:	4618      	mov	r0, r3
   8ba8e:	3714      	adds	r7, #20
   8ba90:	46bd      	mov	sp, r7
   8ba92:	bc80      	pop	{r7}
   8ba94:	4770      	bx	lr
   8ba96:	bf00      	nop
   8ba98:	20072314 	.word	0x20072314

0008ba9c <main>:
extern Cl_Uint8Type cur_data ;
extern Cl_Uint8Type cur_datasize;
extern Cl_Uint8Type flag_hotcitric, flag_hotrinse,flag_na , flag_citric;
Cl_Uint8Type queue_sequence_counter = 0;
int main(void)
          {
   8ba9c:	b580      	push	{r7, lr}
   8ba9e:	b084      	sub	sp, #16
   8baa0:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8baa2:	2304      	movs	r3, #4
   8baa4:	73fb      	strb	r3, [r7, #15]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8baa6:	2300      	movs	r3, #0
   8baa8:	72fb      	strb	r3, [r7, #11]
	Cl_Uint8Type Cl_MacEventData = 0;
   8baaa:	2300      	movs	r3, #0
   8baac:	72bb      	strb	r3, [r7, #10]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   cl_Datastreamtype cl_temp  ;
	board_init();
   8baae:	4ba1      	ldr	r3, [pc, #644]	; (8bd34 <main+0x298>)
   8bab0:	4798      	blx	r3
	sysclk_init();	
   8bab2:	4ba1      	ldr	r3, [pc, #644]	; (8bd38 <main+0x29c>)
   8bab4:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8bab6:	4ba1      	ldr	r3, [pc, #644]	; (8bd3c <main+0x2a0>)
   8bab8:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8baba:	200b      	movs	r0, #11
   8babc:	4ba0      	ldr	r3, [pc, #640]	; (8bd40 <main+0x2a4>)
   8babe:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8bac0:	2016      	movs	r0, #22
   8bac2:	4b9f      	ldr	r3, [pc, #636]	; (8bd40 <main+0x2a4>)
   8bac4:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8bac6:	2001      	movs	r0, #1
   8bac8:	4b9e      	ldr	r3, [pc, #632]	; (8bd44 <main+0x2a8>)
   8baca:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8bacc:	2002      	movs	r0, #2
   8bace:	4b9d      	ldr	r3, [pc, #628]	; (8bd44 <main+0x2a8>)
   8bad0:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8bad2:	2004      	movs	r0, #4
   8bad4:	4b9b      	ldr	r3, [pc, #620]	; (8bd44 <main+0x2a8>)
   8bad6:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8bad8:	2005      	movs	r0, #5
   8bada:	4b9a      	ldr	r3, [pc, #616]	; (8bd44 <main+0x2a8>)
   8badc:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8bade:	2001      	movs	r0, #1
   8bae0:	4b99      	ldr	r3, [pc, #612]	; (8bd48 <main+0x2ac>)
   8bae2:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8bae4:	2002      	movs	r0, #2
   8bae6:	4b98      	ldr	r3, [pc, #608]	; (8bd48 <main+0x2ac>)
   8bae8:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8baea:	2004      	movs	r0, #4
   8baec:	4b96      	ldr	r3, [pc, #600]	; (8bd48 <main+0x2ac>)
   8baee:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8baf0:	2005      	movs	r0, #5
   8baf2:	4b95      	ldr	r3, [pc, #596]	; (8bd48 <main+0x2ac>)
   8baf4:	4798      	blx	r3
	
   
	Cl_MacRetval = Cl_MacInit(); 	
   8baf6:	4b95      	ldr	r3, [pc, #596]	; (8bd4c <main+0x2b0>)
   8baf8:	4798      	blx	r3
   8bafa:	4603      	mov	r3, r0
   8bafc:	73fb      	strb	r3, [r7, #15]
	for(temp100 = 1;temp100<=20; temp100++)
   8bafe:	2301      	movs	r3, #1
   8bb00:	81bb      	strh	r3, [r7, #12]
   8bb02:	e00a      	b.n	8bb1a <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8bb04:	89bb      	ldrh	r3, [r7, #12]
   8bb06:	b2db      	uxtb	r3, r3
   8bb08:	4618      	mov	r0, r3
   8bb0a:	4b91      	ldr	r3, [pc, #580]	; (8bd50 <main+0x2b4>)
   8bb0c:	4798      	blx	r3
		cl_wait(10);
   8bb0e:	200a      	movs	r0, #10
   8bb10:	4b90      	ldr	r3, [pc, #576]	; (8bd54 <main+0x2b8>)
   8bb12:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
	sv_cntrl_deactivatepump(HEPARINPUMP);
	
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8bb14:	89bb      	ldrh	r3, [r7, #12]
   8bb16:	3301      	adds	r3, #1
   8bb18:	81bb      	strh	r3, [r7, #12]
   8bb1a:	89bb      	ldrh	r3, [r7, #12]
   8bb1c:	2b14      	cmp	r3, #20
   8bb1e:	d9f1      	bls.n	8bb04 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8bb20:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8bb24:	201d      	movs	r0, #29
   8bb26:	4b8c      	ldr	r3, [pc, #560]	; (8bd58 <main+0x2bc>)
   8bb28:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8bb2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bb2e:	200a      	movs	r0, #10
   8bb30:	4b8a      	ldr	r3, [pc, #552]	; (8bd5c <main+0x2c0>)
   8bb32:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8bb34:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8bb38:	201b      	movs	r0, #27
   8bb3a:	4b87      	ldr	r3, [pc, #540]	; (8bd58 <main+0x2bc>)
   8bb3c:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8bb3e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bb42:	200e      	movs	r0, #14
   8bb44:	4b85      	ldr	r3, [pc, #532]	; (8bd5c <main+0x2c0>)
   8bb46:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8bb48:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8bb4c:	2002      	movs	r0, #2
   8bb4e:	4b83      	ldr	r3, [pc, #524]	; (8bd5c <main+0x2c0>)
   8bb50:	4798      	blx	r3
	
	
	
	
	sv_cntrl_buzzer();
   8bb52:	4b83      	ldr	r3, [pc, #524]	; (8bd60 <main+0x2c4>)
   8bb54:	4798      	blx	r3
	sv_cntrl_nobuzzer();
   8bb56:	4b83      	ldr	r3, [pc, #524]	; (8bd64 <main+0x2c8>)
   8bb58:	4798      	blx	r3
	sv_cntrl_setyellowalarm();
   8bb5a:	4b83      	ldr	r3, [pc, #524]	; (8bd68 <main+0x2cc>)
   8bb5c:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   8bb5e:	4b83      	ldr	r3, [pc, #524]	; (8bd6c <main+0x2d0>)
   8bb60:	4798      	blx	r3
	sv_cntrl_setredalarm();
   8bb62:	4b83      	ldr	r3, [pc, #524]	; (8bd70 <main+0x2d4>)
   8bb64:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   8bb66:	4b83      	ldr	r3, [pc, #524]	; (8bd74 <main+0x2d8>)
   8bb68:	4798      	blx	r3
	sv_cntrl_setgreenalarm();
   8bb6a:	4b83      	ldr	r3, [pc, #524]	; (8bd78 <main+0x2dc>)
   8bb6c:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   8bb6e:	4b83      	ldr	r3, [pc, #524]	; (8bd7c <main+0x2e0>)
   8bb70:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	sv_cntrl_activate_valve( VALVE_ID17);
   8bb72:	2011      	movs	r0, #17
   8bb74:	4b82      	ldr	r3, [pc, #520]	; (8bd80 <main+0x2e4>)
   8bb76:	4798      	blx	r3
	
	Cl_MacRetval = Cl_App_init(); 
   8bb78:	4b82      	ldr	r3, [pc, #520]	; (8bd84 <main+0x2e8>)
   8bb7a:	4798      	blx	r3
   8bb7c:	4603      	mov	r3, r0
   8bb7e:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bb80:	7bfb      	ldrb	r3, [r7, #15]
   8bb82:	2b00      	cmp	r3, #0
   8bb84:	d001      	beq.n	8bb8a <main+0xee>
   8bb86:	4b80      	ldr	r3, [pc, #512]	; (8bd88 <main+0x2ec>)
   8bb88:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8bb8a:	4b80      	ldr	r3, [pc, #512]	; (8bd8c <main+0x2f0>)
   8bb8c:	4798      	blx	r3
   8bb8e:	4603      	mov	r3, r0
   8bb90:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bb92:	7bfb      	ldrb	r3, [r7, #15]
   8bb94:	2b00      	cmp	r3, #0
   8bb96:	d001      	beq.n	8bb9c <main+0x100>
   8bb98:	4b7b      	ldr	r3, [pc, #492]	; (8bd88 <main+0x2ec>)
   8bb9a:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8bb9c:	4b7c      	ldr	r3, [pc, #496]	; (8bd90 <main+0x2f4>)
   8bb9e:	2204      	movs	r2, #4
   8bba0:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8bba2:	2304      	movs	r3, #4
   8bba4:	73fb      	strb	r3, [r7, #15]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8bba6:	4b7b      	ldr	r3, [pc, #492]	; (8bd94 <main+0x2f8>)
   8bba8:	4798      	blx	r3
   8bbaa:	4603      	mov	r3, r0
   8bbac:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8bbae:	7bfb      	ldrb	r3, [r7, #15]
   8bbb0:	2b00      	cmp	r3, #0
   8bbb2:	d001      	beq.n	8bbb8 <main+0x11c>
   8bbb4:	4b74      	ldr	r3, [pc, #464]	; (8bd88 <main+0x2ec>)
   8bbb6:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8bbb8:	7bfb      	ldrb	r3, [r7, #15]
   8bbba:	2b00      	cmp	r3, #0
   8bbbc:	d105      	bne.n	8bbca <main+0x12e>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8bbbe:	4b76      	ldr	r3, [pc, #472]	; (8bd98 <main+0x2fc>)
   8bbc0:	2201      	movs	r2, #1
   8bbc2:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8bbc4:	4b72      	ldr	r3, [pc, #456]	; (8bd90 <main+0x2f4>)
   8bbc6:	2202      	movs	r2, #2
   8bbc8:	701a      	strb	r2, [r3, #0]
	while (FOREVER)  // LOOP MAIN
	{

//sv_cntrl_setyellowalarm();
//sv_cntrl_deactivate_valve( VALVE_ID18);
	Cl_Mac_StateDummy = Cl_MacState;
   8bbca:	4b71      	ldr	r3, [pc, #452]	; (8bd90 <main+0x2f4>)
   8bbcc:	781a      	ldrb	r2, [r3, #0]
   8bbce:	4b73      	ldr	r3, [pc, #460]	; (8bd9c <main+0x300>)
   8bbd0:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8bbd2:	4b73      	ldr	r3, [pc, #460]	; (8bda0 <main+0x304>)
   8bbd4:	681b      	ldr	r3, [r3, #0]
   8bbd6:	4a73      	ldr	r2, [pc, #460]	; (8bda4 <main+0x308>)
   8bbd8:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8bbda:	4b73      	ldr	r3, [pc, #460]	; (8bda8 <main+0x30c>)
   8bbdc:	4798      	blx	r3
   8bbde:	4603      	mov	r3, r0
   8bbe0:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforBCEvent();
   8bbe2:	4b72      	ldr	r3, [pc, #456]	; (8bdac <main+0x310>)
   8bbe4:	4798      	blx	r3
   8bbe6:	4603      	mov	r3, r0
   8bbe8:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8bbea:	4b71      	ldr	r3, [pc, #452]	; (8bdb0 <main+0x314>)
   8bbec:	4798      	blx	r3
   8bbee:	4603      	mov	r3, r0
   8bbf0:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bbf2:	7bfb      	ldrb	r3, [r7, #15]
   8bbf4:	2b00      	cmp	r3, #0
   8bbf6:	d001      	beq.n	8bbfc <main+0x160>
   8bbf8:	4b63      	ldr	r3, [pc, #396]	; (8bd88 <main+0x2ec>)
   8bbfa:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8bbfc:	4b6d      	ldr	r3, [pc, #436]	; (8bdb4 <main+0x318>)
   8bbfe:	4798      	blx	r3
   8bc00:	4603      	mov	r3, r0
   8bc02:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bc04:	7bfb      	ldrb	r3, [r7, #15]
   8bc06:	2b00      	cmp	r3, #0
   8bc08:	d001      	beq.n	8bc0e <main+0x172>
   8bc0a:	4b5f      	ldr	r3, [pc, #380]	; (8bd88 <main+0x2ec>)
   8bc0c:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8bc0e:	4b64      	ldr	r3, [pc, #400]	; (8bda0 <main+0x304>)
   8bc10:	681a      	ldr	r2, [r3, #0]
   8bc12:	4b64      	ldr	r3, [pc, #400]	; (8bda4 <main+0x308>)
   8bc14:	681b      	ldr	r3, [r3, #0]
   8bc16:	1ad3      	subs	r3, r2, r3
   8bc18:	4a67      	ldr	r2, [pc, #412]	; (8bdb8 <main+0x31c>)
   8bc1a:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8bc1c:	2032      	movs	r0, #50	; 0x32
   8bc1e:	4b67      	ldr	r3, [pc, #412]	; (8bdbc <main+0x320>)
   8bc20:	4798      	blx	r3
   8bc22:	4603      	mov	r3, r0
   8bc24:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bc26:	7bfb      	ldrb	r3, [r7, #15]
   8bc28:	2b00      	cmp	r3, #0
   8bc2a:	f002 8027 	beq.w	8dc7c <main+0x21e0>
   8bc2e:	4b56      	ldr	r3, [pc, #344]	; (8bd88 <main+0x2ec>)
   8bc30:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8bc32:	f002 b823 	b.w	8dc7c <main+0x21e0>
		
		{
		Cl_MacEvent = EVT_NULL;
   8bc36:	4b62      	ldr	r3, [pc, #392]	; (8bdc0 <main+0x324>)
   8bc38:	2200      	movs	r2, #0
   8bc3a:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8bc3c:	4b61      	ldr	r3, [pc, #388]	; (8bdc4 <main+0x328>)
   8bc3e:	4798      	blx	r3
   8bc40:	4603      	mov	r3, r0
   8bc42:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bc44:	7bfb      	ldrb	r3, [r7, #15]
   8bc46:	2b00      	cmp	r3, #0
   8bc48:	d001      	beq.n	8bc4e <main+0x1b2>
   8bc4a:	4b4f      	ldr	r3, [pc, #316]	; (8bd88 <main+0x2ec>)
   8bc4c:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8bc4e:	4b5e      	ldr	r3, [pc, #376]	; (8bdc8 <main+0x32c>)
   8bc50:	781b      	ldrb	r3, [r3, #0]
   8bc52:	2b00      	cmp	r3, #0
   8bc54:	f002 8012 	beq.w	8dc7c <main+0x21e0>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8bc58:	4b59      	ldr	r3, [pc, #356]	; (8bdc0 <main+0x324>)
   8bc5a:	781b      	ldrb	r3, [r3, #0]
   8bc5c:	4618      	mov	r0, r3
   8bc5e:	4b57      	ldr	r3, [pc, #348]	; (8bdbc <main+0x320>)
   8bc60:	4798      	blx	r3
   8bc62:	4603      	mov	r3, r0
   8bc64:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8bc66:	7bfb      	ldrb	r3, [r7, #15]
   8bc68:	2b00      	cmp	r3, #0
   8bc6a:	d001      	beq.n	8bc70 <main+0x1d4>
   8bc6c:	4b46      	ldr	r3, [pc, #280]	; (8bd88 <main+0x2ec>)
   8bc6e:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8bc70:	4b53      	ldr	r3, [pc, #332]	; (8bdc0 <main+0x324>)
   8bc72:	781b      	ldrb	r3, [r3, #0]
   8bc74:	2b02      	cmp	r3, #2
   8bc76:	d114      	bne.n	8bca2 <main+0x206>
			{
				//send sync
				// save the data command 
				if(ackCommand = Cl_ConsoleRxMsg.data.byte[0]){
   8bc78:	4b54      	ldr	r3, [pc, #336]	; (8bdcc <main+0x330>)
   8bc7a:	791a      	ldrb	r2, [r3, #4]
   8bc7c:	4b54      	ldr	r3, [pc, #336]	; (8bdd0 <main+0x334>)
   8bc7e:	701a      	strb	r2, [r3, #0]
   8bc80:	4b53      	ldr	r3, [pc, #332]	; (8bdd0 <main+0x334>)
   8bc82:	781b      	ldrb	r3, [r3, #0]
   8bc84:	2b00      	cmp	r3, #0
   8bc86:	d109      	bne.n	8bc9c <main+0x200>
					
				}
				else{
					// again send 
					Cl_SendDatatoconsole(cur_command, cur_data,cur_datasize);
   8bc88:	4b52      	ldr	r3, [pc, #328]	; (8bdd4 <main+0x338>)
   8bc8a:	7818      	ldrb	r0, [r3, #0]
   8bc8c:	4b52      	ldr	r3, [pc, #328]	; (8bdd8 <main+0x33c>)
   8bc8e:	781b      	ldrb	r3, [r3, #0]
   8bc90:	4619      	mov	r1, r3
   8bc92:	4b52      	ldr	r3, [pc, #328]	; (8bddc <main+0x340>)
   8bc94:	781b      	ldrb	r3, [r3, #0]
   8bc96:	461a      	mov	r2, r3
   8bc98:	4b51      	ldr	r3, [pc, #324]	; (8bde0 <main+0x344>)
   8bc9a:	4798      	blx	r3
				}
				ConsoleSync = true;
   8bc9c:	4b51      	ldr	r3, [pc, #324]	; (8bde4 <main+0x348>)
   8bc9e:	2201      	movs	r2, #1
   8bca0:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8bca2:	4b47      	ldr	r3, [pc, #284]	; (8bdc0 <main+0x324>)
   8bca4:	781b      	ldrb	r3, [r3, #0]
   8bca6:	2b01      	cmp	r3, #1
   8bca8:	d111      	bne.n	8bcce <main+0x232>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8bcaa:	2303      	movs	r3, #3
   8bcac:	70fb      	strb	r3, [r7, #3]
				ConsoleSync = true;
   8bcae:	4b4d      	ldr	r3, [pc, #308]	; (8bde4 <main+0x348>)
   8bcb0:	2201      	movs	r2, #1
   8bcb2:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8bcb4:	1cfb      	adds	r3, r7, #3
   8bcb6:	2201      	movs	r2, #1
   8bcb8:	4619      	mov	r1, r3
   8bcba:	2004      	movs	r0, #4
   8bcbc:	4b48      	ldr	r3, [pc, #288]	; (8bde0 <main+0x344>)
   8bcbe:	4798      	blx	r3
   8bcc0:	4603      	mov	r3, r0
   8bcc2:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8bcc4:	7bfb      	ldrb	r3, [r7, #15]
   8bcc6:	2b00      	cmp	r3, #0
   8bcc8:	d001      	beq.n	8bcce <main+0x232>
   8bcca:	4b2f      	ldr	r3, [pc, #188]	; (8bd88 <main+0x2ec>)
   8bccc:	4798      	blx	r3
				}
				
			}			
			
			
				switch (Cl_MacState)
   8bcce:	4b30      	ldr	r3, [pc, #192]	; (8bd90 <main+0x2f4>)
   8bcd0:	781b      	ldrb	r3, [r3, #0]
   8bcd2:	3b01      	subs	r3, #1
   8bcd4:	2b14      	cmp	r3, #20
   8bcd6:	f201 87c5 	bhi.w	8dc64 <main+0x21c8>
   8bcda:	a201      	add	r2, pc, #4	; (adr r2, 8bce0 <main+0x244>)
   8bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bce0:	0008dc65 	.word	0x0008dc65
   8bce4:	0008bde9 	.word	0x0008bde9
   8bce8:	0008dc65 	.word	0x0008dc65
   8bcec:	0008dc65 	.word	0x0008dc65
   8bcf0:	0008bef9 	.word	0x0008bef9
   8bcf4:	0008c411 	.word	0x0008c411
   8bcf8:	0008c4c7 	.word	0x0008c4c7
   8bcfc:	0008c1d7 	.word	0x0008c1d7
   8bd00:	0008dc65 	.word	0x0008dc65
   8bd04:	0008c76d 	.word	0x0008c76d
   8bd08:	0008ca5d 	.word	0x0008ca5d
   8bd0c:	0008ccfd 	.word	0x0008ccfd
   8bd10:	0008cecf 	.word	0x0008cecf
   8bd14:	0008cee9 	.word	0x0008cee9
   8bd18:	0008d6d7 	.word	0x0008d6d7
   8bd1c:	0008d965 	.word	0x0008d965
   8bd20:	0008da93 	.word	0x0008da93
   8bd24:	0008dc5d 	.word	0x0008dc5d
   8bd28:	0008dc61 	.word	0x0008dc61
   8bd2c:	0008d129 	.word	0x0008d129
   8bd30:	0008d445 	.word	0x0008d445
   8bd34:	0009a445 	.word	0x0009a445
   8bd38:	0008044d 	.word	0x0008044d
   8bd3c:	0009a2a5 	.word	0x0009a2a5
   8bd40:	0009abcd 	.word	0x0009abcd
   8bd44:	00099a09 	.word	0x00099a09
   8bd48:	00099a45 	.word	0x00099a45
   8bd4c:	0008dce9 	.word	0x0008dce9
   8bd50:	00099ac9 	.word	0x00099ac9
   8bd54:	00093009 	.word	0x00093009
   8bd58:	00099dc1 	.word	0x00099dc1
   8bd5c:	00099da1 	.word	0x00099da1
   8bd60:	00099d3d 	.word	0x00099d3d
   8bd64:	00099d8d 	.word	0x00099d8d
   8bd68:	00099d15 	.word	0x00099d15
   8bd6c:	00099d65 	.word	0x00099d65
   8bd70:	00099d01 	.word	0x00099d01
   8bd74:	00099d51 	.word	0x00099d51
   8bd78:	00099d29 	.word	0x00099d29
   8bd7c:	00099d79 	.word	0x00099d79
   8bd80:	00099aa9 	.word	0x00099aa9
   8bd84:	0008ddbd 	.word	0x0008ddbd
   8bd88:	00088e75 	.word	0x00088e75
   8bd8c:	0008de85 	.word	0x0008de85
   8bd90:	20070574 	.word	0x20070574
   8bd94:	0009bbbd 	.word	0x0009bbbd
   8bd98:	200719d7 	.word	0x200719d7
   8bd9c:	200725b7 	.word	0x200725b7
   8bda0:	20071a98 	.word	0x20071a98
   8bda4:	20072370 	.word	0x20072370
   8bda8:	0008dea9 	.word	0x0008dea9
   8bdac:	0008e2c1 	.word	0x0008e2c1
   8bdb0:	0008e295 	.word	0x0008e295
   8bdb4:	0008ded9 	.word	0x0008ded9
   8bdb8:	200724d8 	.word	0x200724d8
   8bdbc:	00088e85 	.word	0x00088e85
   8bdc0:	200719d6 	.word	0x200719d6
   8bdc4:	0008df59 	.word	0x0008df59
   8bdc8:	200719d8 	.word	0x200719d8
   8bdcc:	200723e8 	.word	0x200723e8
   8bdd0:	2007280f 	.word	0x2007280f
   8bdd4:	2007280d 	.word	0x2007280d
   8bdd8:	2007280e 	.word	0x2007280e
   8bddc:	2007280c 	.word	0x2007280c
   8bde0:	0009b805 	.word	0x0009b805
   8bde4:	20070575 	.word	0x20070575
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8bde8:	4bc8      	ldr	r3, [pc, #800]	; (8c10c <main+0x670>)
   8bdea:	781b      	ldrb	r3, [r3, #0]
   8bdec:	3b2a      	subs	r3, #42	; 0x2a
   8bdee:	2b19      	cmp	r3, #25
   8bdf0:	d87c      	bhi.n	8beec <main+0x450>
   8bdf2:	a201      	add	r2, pc, #4	; (adr r2, 8bdf8 <main+0x35c>)
   8bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bdf8:	0008be61 	.word	0x0008be61
   8bdfc:	0008beed 	.word	0x0008beed
   8be00:	0008beed 	.word	0x0008beed
   8be04:	0008beed 	.word	0x0008beed
   8be08:	0008beed 	.word	0x0008beed
   8be0c:	0008beed 	.word	0x0008beed
   8be10:	0008beed 	.word	0x0008beed
   8be14:	0008beed 	.word	0x0008beed
   8be18:	0008beed 	.word	0x0008beed
   8be1c:	0008beed 	.word	0x0008beed
   8be20:	0008beed 	.word	0x0008beed
   8be24:	0008beed 	.word	0x0008beed
   8be28:	0008beed 	.word	0x0008beed
   8be2c:	0008beed 	.word	0x0008beed
   8be30:	0008beed 	.word	0x0008beed
   8be34:	0008becd 	.word	0x0008becd
   8be38:	0008beed 	.word	0x0008beed
   8be3c:	0008becd 	.word	0x0008becd
   8be40:	0008becd 	.word	0x0008becd
   8be44:	0008becd 	.word	0x0008becd
   8be48:	0008beed 	.word	0x0008beed
   8be4c:	0008beed 	.word	0x0008beed
   8be50:	0008beed 	.word	0x0008beed
   8be54:	0008beed 	.word	0x0008beed
   8be58:	0008beed 	.word	0x0008beed
   8be5c:	0008be81 	.word	0x0008be81
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8be60:	4baa      	ldr	r3, [pc, #680]	; (8c10c <main+0x670>)
   8be62:	781b      	ldrb	r3, [r3, #0]
   8be64:	4618      	mov	r0, r3
   8be66:	4baa      	ldr	r3, [pc, #680]	; (8c110 <main+0x674>)
   8be68:	4798      	blx	r3
   8be6a:	4603      	mov	r3, r0
   8be6c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8be6e:	7bfb      	ldrb	r3, [r7, #15]
   8be70:	2b00      	cmp	r3, #0
   8be72:	d001      	beq.n	8be78 <main+0x3dc>
   8be74:	4ba7      	ldr	r3, [pc, #668]	; (8c114 <main+0x678>)
   8be76:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8be78:	4ba4      	ldr	r3, [pc, #656]	; (8c10c <main+0x670>)
   8be7a:	2200      	movs	r2, #0
   8be7c:	701a      	strb	r2, [r3, #0]
						break;
   8be7e:	e039      	b.n	8bef4 <main+0x458>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8be80:	202b      	movs	r0, #43	; 0x2b
   8be82:	4ba3      	ldr	r3, [pc, #652]	; (8c110 <main+0x674>)
   8be84:	4798      	blx	r3
   8be86:	4603      	mov	r3, r0
   8be88:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8be8a:	7bfb      	ldrb	r3, [r7, #15]
   8be8c:	2b00      	cmp	r3, #0
   8be8e:	d001      	beq.n	8be94 <main+0x3f8>
   8be90:	4ba0      	ldr	r3, [pc, #640]	; (8c114 <main+0x678>)
   8be92:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8be94:	7bfb      	ldrb	r3, [r7, #15]
   8be96:	2b00      	cmp	r3, #0
   8be98:	d109      	bne.n	8beae <main+0x412>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8be9a:	202b      	movs	r0, #43	; 0x2b
   8be9c:	4b9e      	ldr	r3, [pc, #632]	; (8c118 <main+0x67c>)
   8be9e:	4798      	blx	r3
   8bea0:	4603      	mov	r3, r0
   8bea2:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8bea4:	7bfb      	ldrb	r3, [r7, #15]
   8bea6:	2b00      	cmp	r3, #0
   8bea8:	d001      	beq.n	8beae <main+0x412>
   8beaa:	4b9a      	ldr	r3, [pc, #616]	; (8c114 <main+0x678>)
   8beac:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8beae:	7bfb      	ldrb	r3, [r7, #15]
   8beb0:	2b00      	cmp	r3, #0
   8beb2:	d11e      	bne.n	8bef2 <main+0x456>
								{
									Cl_MacEvent = EVT_NULL;
   8beb4:	4b95      	ldr	r3, [pc, #596]	; (8c10c <main+0x670>)
   8beb6:	2200      	movs	r2, #0
   8beb8:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8beba:	4b98      	ldr	r3, [pc, #608]	; (8c11c <main+0x680>)
   8bebc:	2205      	movs	r2, #5
   8bebe:	701a      	strb	r2, [r3, #0]
									//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
									ASSERT_ERROR(Cl_MacRetval);
   8bec0:	7bfb      	ldrb	r3, [r7, #15]
   8bec2:	2b00      	cmp	r3, #0
   8bec4:	d015      	beq.n	8bef2 <main+0x456>
   8bec6:	4b93      	ldr	r3, [pc, #588]	; (8c114 <main+0x678>)
   8bec8:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8beca:	e012      	b.n	8bef2 <main+0x456>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8becc:	4b8f      	ldr	r3, [pc, #572]	; (8c10c <main+0x670>)
   8bece:	781b      	ldrb	r3, [r3, #0]
   8bed0:	4618      	mov	r0, r3
   8bed2:	4b8f      	ldr	r3, [pc, #572]	; (8c110 <main+0x674>)
   8bed4:	4798      	blx	r3
   8bed6:	4603      	mov	r3, r0
   8bed8:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8beda:	7bfb      	ldrb	r3, [r7, #15]
   8bedc:	2b00      	cmp	r3, #0
   8bede:	d001      	beq.n	8bee4 <main+0x448>
   8bee0:	4b8c      	ldr	r3, [pc, #560]	; (8c114 <main+0x678>)
   8bee2:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8bee4:	4b89      	ldr	r3, [pc, #548]	; (8c10c <main+0x670>)
   8bee6:	2200      	movs	r2, #0
   8bee8:	701a      	strb	r2, [r3, #0]

						break;
   8beea:	e003      	b.n	8bef4 <main+0x458>
						default: break;
   8beec:	bf00      	nop
   8beee:	f001 bebc 	b.w	8dc6a <main+0x21ce>

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8bef2:	bf00      	nop
							Cl_MacEvent = EVT_NULL;

						break;
						default: break;
					}
					break;
   8bef4:	f001 beb9 	b.w	8dc6a <main+0x21ce>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8bef8:	4b84      	ldr	r3, [pc, #528]	; (8c10c <main+0x670>)
   8befa:	781b      	ldrb	r3, [r3, #0]
   8befc:	3b07      	subs	r3, #7
   8befe:	2b55      	cmp	r3, #85	; 0x55
   8bf00:	f200 8160 	bhi.w	8c1c4 <main+0x728>
   8bf04:	a201      	add	r2, pc, #4	; (adr r2, 8bf0c <main+0x470>)
   8bf06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bf0a:	bf00      	nop
   8bf0c:	0008c085 	.word	0x0008c085
   8bf10:	0008c1c5 	.word	0x0008c1c5
   8bf14:	0008c153 	.word	0x0008c153
   8bf18:	0008c065 	.word	0x0008c065
   8bf1c:	0008c065 	.word	0x0008c065
   8bf20:	0008c065 	.word	0x0008c065
   8bf24:	0008c1c5 	.word	0x0008c1c5
   8bf28:	0008c1c5 	.word	0x0008c1c5
   8bf2c:	0008c0e5 	.word	0x0008c0e5
   8bf30:	0008c1c5 	.word	0x0008c1c5
   8bf34:	0008c1c5 	.word	0x0008c1c5
   8bf38:	0008c1c5 	.word	0x0008c1c5
   8bf3c:	0008c1c5 	.word	0x0008c1c5
   8bf40:	0008c1c5 	.word	0x0008c1c5
   8bf44:	0008c1c5 	.word	0x0008c1c5
   8bf48:	0008c1c5 	.word	0x0008c1c5
   8bf4c:	0008c1c5 	.word	0x0008c1c5
   8bf50:	0008c1c5 	.word	0x0008c1c5
   8bf54:	0008c1c5 	.word	0x0008c1c5
   8bf58:	0008c1c5 	.word	0x0008c1c5
   8bf5c:	0008c1c5 	.word	0x0008c1c5
   8bf60:	0008c1c5 	.word	0x0008c1c5
   8bf64:	0008c1c5 	.word	0x0008c1c5
   8bf68:	0008c1c5 	.word	0x0008c1c5
   8bf6c:	0008c1c5 	.word	0x0008c1c5
   8bf70:	0008c1c5 	.word	0x0008c1c5
   8bf74:	0008c1c5 	.word	0x0008c1c5
   8bf78:	0008c1c5 	.word	0x0008c1c5
   8bf7c:	0008c1c5 	.word	0x0008c1c5
   8bf80:	0008c1c5 	.word	0x0008c1c5
   8bf84:	0008c1c5 	.word	0x0008c1c5
   8bf88:	0008c1c5 	.word	0x0008c1c5
   8bf8c:	0008c1c5 	.word	0x0008c1c5
   8bf90:	0008c1c5 	.word	0x0008c1c5
   8bf94:	0008c1c5 	.word	0x0008c1c5
   8bf98:	0008c1c5 	.word	0x0008c1c5
   8bf9c:	0008c065 	.word	0x0008c065
   8bfa0:	0008c1c5 	.word	0x0008c1c5
   8bfa4:	0008c065 	.word	0x0008c065
   8bfa8:	0008c065 	.word	0x0008c065
   8bfac:	0008c1c5 	.word	0x0008c1c5
   8bfb0:	0008c1c5 	.word	0x0008c1c5
   8bfb4:	0008c1c5 	.word	0x0008c1c5
   8bfb8:	0008c1c5 	.word	0x0008c1c5
   8bfbc:	0008c1c5 	.word	0x0008c1c5
   8bfc0:	0008c1c5 	.word	0x0008c1c5
   8bfc4:	0008c1c5 	.word	0x0008c1c5
   8bfc8:	0008c1c5 	.word	0x0008c1c5
   8bfcc:	0008c1c5 	.word	0x0008c1c5
   8bfd0:	0008c1c5 	.word	0x0008c1c5
   8bfd4:	0008c065 	.word	0x0008c065
   8bfd8:	0008c1c5 	.word	0x0008c1c5
   8bfdc:	0008c065 	.word	0x0008c065
   8bfe0:	0008c065 	.word	0x0008c065
   8bfe4:	0008c065 	.word	0x0008c065
   8bfe8:	0008c1c5 	.word	0x0008c1c5
   8bfec:	0008c129 	.word	0x0008c129
   8bff0:	0008c1c5 	.word	0x0008c1c5
   8bff4:	0008c1c5 	.word	0x0008c1c5
   8bff8:	0008c1c5 	.word	0x0008c1c5
   8bffc:	0008c1c5 	.word	0x0008c1c5
   8c000:	0008c1c5 	.word	0x0008c1c5
   8c004:	0008c1c5 	.word	0x0008c1c5
   8c008:	0008c1c5 	.word	0x0008c1c5
   8c00c:	0008c1c5 	.word	0x0008c1c5
   8c010:	0008c1c5 	.word	0x0008c1c5
   8c014:	0008c1c5 	.word	0x0008c1c5
   8c018:	0008c1c5 	.word	0x0008c1c5
   8c01c:	0008c1c5 	.word	0x0008c1c5
   8c020:	0008c1c5 	.word	0x0008c1c5
   8c024:	0008c1c5 	.word	0x0008c1c5
   8c028:	0008c1c5 	.word	0x0008c1c5
   8c02c:	0008c1c5 	.word	0x0008c1c5
   8c030:	0008c1c5 	.word	0x0008c1c5
   8c034:	0008c1c5 	.word	0x0008c1c5
   8c038:	0008c1c5 	.word	0x0008c1c5
   8c03c:	0008c1c5 	.word	0x0008c1c5
   8c040:	0008c1c5 	.word	0x0008c1c5
   8c044:	0008c1c5 	.word	0x0008c1c5
   8c048:	0008c1c5 	.word	0x0008c1c5
   8c04c:	0008c1c5 	.word	0x0008c1c5
   8c050:	0008c1c5 	.word	0x0008c1c5
   8c054:	0008c1c5 	.word	0x0008c1c5
   8c058:	0008c1c5 	.word	0x0008c1c5
   8c05c:	0008c065 	.word	0x0008c065
   8c060:	0008c065 	.word	0x0008c065
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c064:	4b29      	ldr	r3, [pc, #164]	; (8c10c <main+0x670>)
   8c066:	781b      	ldrb	r3, [r3, #0]
   8c068:	4618      	mov	r0, r3
   8c06a:	4b2b      	ldr	r3, [pc, #172]	; (8c118 <main+0x67c>)
   8c06c:	4798      	blx	r3
   8c06e:	4603      	mov	r3, r0
   8c070:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c072:	7bfb      	ldrb	r3, [r7, #15]
   8c074:	2b00      	cmp	r3, #0
   8c076:	d001      	beq.n	8c07c <main+0x5e0>
   8c078:	4b26      	ldr	r3, [pc, #152]	; (8c114 <main+0x678>)
   8c07a:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8c07c:	4b23      	ldr	r3, [pc, #140]	; (8c10c <main+0x670>)
   8c07e:	2200      	movs	r2, #0
   8c080:	701a      	strb	r2, [r3, #0]
							break;
   8c082:	e0a6      	b.n	8c1d2 <main+0x736>

					
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8c084:	4b26      	ldr	r3, [pc, #152]	; (8c120 <main+0x684>)
   8c086:	2200      	movs	r2, #0
   8c088:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c08a:	4b20      	ldr	r3, [pc, #128]	; (8c10c <main+0x670>)
   8c08c:	781b      	ldrb	r3, [r3, #0]
   8c08e:	4618      	mov	r0, r3
   8c090:	4b21      	ldr	r3, [pc, #132]	; (8c118 <main+0x67c>)
   8c092:	4798      	blx	r3
   8c094:	4603      	mov	r3, r0
   8c096:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c098:	7bfb      	ldrb	r3, [r7, #15]
   8c09a:	2b00      	cmp	r3, #0
   8c09c:	d001      	beq.n	8c0a2 <main+0x606>
   8c09e:	4b1d      	ldr	r3, [pc, #116]	; (8c114 <main+0x678>)
   8c0a0:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8c0a2:	7bfb      	ldrb	r3, [r7, #15]
   8c0a4:	2b00      	cmp	r3, #0
   8c0a6:	d10e      	bne.n	8c0c6 <main+0x62a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c0a8:	4b18      	ldr	r3, [pc, #96]	; (8c10c <main+0x670>)
   8c0aa:	781b      	ldrb	r3, [r3, #0]
   8c0ac:	4618      	mov	r0, r3
   8c0ae:	4b1d      	ldr	r3, [pc, #116]	; (8c124 <main+0x688>)
   8c0b0:	4798      	blx	r3
   8c0b2:	4603      	mov	r3, r0
   8c0b4:	73fb      	strb	r3, [r7, #15]
								if(Cl_MacRetval != CL_REJECTED)
   8c0b6:	7bfb      	ldrb	r3, [r7, #15]
   8c0b8:	2b03      	cmp	r3, #3
   8c0ba:	d004      	beq.n	8c0c6 <main+0x62a>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8c0bc:	7bfb      	ldrb	r3, [r7, #15]
   8c0be:	2b00      	cmp	r3, #0
   8c0c0:	d001      	beq.n	8c0c6 <main+0x62a>
   8c0c2:	4b14      	ldr	r3, [pc, #80]	; (8c114 <main+0x678>)
   8c0c4:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8c0c6:	7bfb      	ldrb	r3, [r7, #15]
   8c0c8:	2b00      	cmp	r3, #0
   8c0ca:	d107      	bne.n	8c0dc <main+0x640>
							{
								Cl_MacState = MAC_RINSE;
   8c0cc:	4b13      	ldr	r3, [pc, #76]	; (8c11c <main+0x680>)
   8c0ce:	2207      	movs	r2, #7
   8c0d0:	701a      	strb	r2, [r3, #0]
								//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);			
   8c0d2:	7bfb      	ldrb	r3, [r7, #15]
   8c0d4:	2b00      	cmp	r3, #0
   8c0d6:	d001      	beq.n	8c0dc <main+0x640>
   8c0d8:	4b0e      	ldr	r3, [pc, #56]	; (8c114 <main+0x678>)
   8c0da:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c0dc:	4b0b      	ldr	r3, [pc, #44]	; (8c10c <main+0x670>)
   8c0de:	2200      	movs	r2, #0
   8c0e0:	701a      	strb	r2, [r3, #0]
						break;
   8c0e2:	e076      	b.n	8c1d2 <main+0x736>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c0e4:	4b09      	ldr	r3, [pc, #36]	; (8c10c <main+0x670>)
   8c0e6:	781b      	ldrb	r3, [r3, #0]
   8c0e8:	4618      	mov	r0, r3
   8c0ea:	4b0e      	ldr	r3, [pc, #56]	; (8c124 <main+0x688>)
   8c0ec:	4798      	blx	r3
   8c0ee:	4603      	mov	r3, r0
   8c0f0:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c0f2:	7bfb      	ldrb	r3, [r7, #15]
   8c0f4:	2b00      	cmp	r3, #0
   8c0f6:	d001      	beq.n	8c0fc <main+0x660>
   8c0f8:	4b06      	ldr	r3, [pc, #24]	; (8c114 <main+0x678>)
   8c0fa:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c0fc:	7bfb      	ldrb	r3, [r7, #15]
   8c0fe:	2b00      	cmp	r3, #0
   8c100:	d163      	bne.n	8c1ca <main+0x72e>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c102:	4b06      	ldr	r3, [pc, #24]	; (8c11c <main+0x680>)
   8c104:	220a      	movs	r2, #10
   8c106:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8c108:	e05f      	b.n	8c1ca <main+0x72e>
   8c10a:	bf00      	nop
   8c10c:	200719d6 	.word	0x200719d6
   8c110:	0008b761 	.word	0x0008b761
   8c114:	00088e75 	.word	0x00088e75
   8c118:	000a4ad1 	.word	0x000a4ad1
   8c11c:	20070574 	.word	0x20070574
   8c120:	200719dc 	.word	0x200719dc
   8c124:	000a22c9 	.word	0x000a22c9
						//	ASSERT_ERROR(Cl_MacRetval);
						//	if( Cl_MacRetval == CL_OK)
						//	{
								
							
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c128:	4bb2      	ldr	r3, [pc, #712]	; (8c3f4 <main+0x958>)
   8c12a:	781b      	ldrb	r3, [r3, #0]
   8c12c:	4618      	mov	r0, r3
   8c12e:	4bb2      	ldr	r3, [pc, #712]	; (8c3f8 <main+0x95c>)
   8c130:	4798      	blx	r3
   8c132:	4603      	mov	r3, r0
   8c134:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c136:	7bfb      	ldrb	r3, [r7, #15]
   8c138:	2b00      	cmp	r3, #0
   8c13a:	d001      	beq.n	8c140 <main+0x6a4>
   8c13c:	4baf      	ldr	r3, [pc, #700]	; (8c3fc <main+0x960>)
   8c13e:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8c140:	4baf      	ldr	r3, [pc, #700]	; (8c400 <main+0x964>)
   8c142:	2208      	movs	r2, #8
   8c144:	701a      	strb	r2, [r3, #0]
								//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c146:	7bfb      	ldrb	r3, [r7, #15]
   8c148:	2b00      	cmp	r3, #0
   8c14a:	d041      	beq.n	8c1d0 <main+0x734>
   8c14c:	4bab      	ldr	r3, [pc, #684]	; (8c3fc <main+0x960>)
   8c14e:	4798      	blx	r3
// 							{
// 								// Handle error
// 							}
							

						break;
   8c150:	e03e      	b.n	8c1d0 <main+0x734>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c152:	4ba8      	ldr	r3, [pc, #672]	; (8c3f4 <main+0x958>)
   8c154:	781b      	ldrb	r3, [r3, #0]
   8c156:	4618      	mov	r0, r3
   8c158:	4baa      	ldr	r3, [pc, #680]	; (8c404 <main+0x968>)
   8c15a:	4798      	blx	r3
   8c15c:	4603      	mov	r3, r0
   8c15e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c160:	7bfb      	ldrb	r3, [r7, #15]
   8c162:	2b00      	cmp	r3, #0
   8c164:	d001      	beq.n	8c16a <main+0x6ce>
   8c166:	4ba5      	ldr	r3, [pc, #660]	; (8c3fc <main+0x960>)
   8c168:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8c16a:	7bfb      	ldrb	r3, [r7, #15]
   8c16c:	2b02      	cmp	r3, #2
   8c16e:	d10b      	bne.n	8c188 <main+0x6ec>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c170:	4ba0      	ldr	r3, [pc, #640]	; (8c3f4 <main+0x958>)
   8c172:	781b      	ldrb	r3, [r3, #0]
   8c174:	4618      	mov	r0, r3
   8c176:	4ba4      	ldr	r3, [pc, #656]	; (8c408 <main+0x96c>)
   8c178:	4798      	blx	r3
   8c17a:	4603      	mov	r3, r0
   8c17c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c17e:	7bfb      	ldrb	r3, [r7, #15]
   8c180:	2b00      	cmp	r3, #0
   8c182:	d001      	beq.n	8c188 <main+0x6ec>
   8c184:	4b9d      	ldr	r3, [pc, #628]	; (8c3fc <main+0x960>)
   8c186:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8c188:	7bfb      	ldrb	r3, [r7, #15]
   8c18a:	2b02      	cmp	r3, #2
   8c18c:	d10b      	bne.n	8c1a6 <main+0x70a>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c18e:	4b99      	ldr	r3, [pc, #612]	; (8c3f4 <main+0x958>)
   8c190:	781b      	ldrb	r3, [r3, #0]
   8c192:	4618      	mov	r0, r3
   8c194:	4b9d      	ldr	r3, [pc, #628]	; (8c40c <main+0x970>)
   8c196:	4798      	blx	r3
   8c198:	4603      	mov	r3, r0
   8c19a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c19c:	7bfb      	ldrb	r3, [r7, #15]
   8c19e:	2b00      	cmp	r3, #0
   8c1a0:	d001      	beq.n	8c1a6 <main+0x70a>
   8c1a2:	4b96      	ldr	r3, [pc, #600]	; (8c3fc <main+0x960>)
   8c1a4:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8c1a6:	7bfb      	ldrb	r3, [r7, #15]
   8c1a8:	2b00      	cmp	r3, #0
   8c1aa:	d107      	bne.n	8c1bc <main+0x720>
							{
								Cl_MacState = MAC_DPREP;
   8c1ac:	4b94      	ldr	r3, [pc, #592]	; (8c400 <main+0x964>)
   8c1ae:	220b      	movs	r2, #11
   8c1b0:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c1b2:	7bfb      	ldrb	r3, [r7, #15]
   8c1b4:	2b00      	cmp	r3, #0
   8c1b6:	d001      	beq.n	8c1bc <main+0x720>
   8c1b8:	4b90      	ldr	r3, [pc, #576]	; (8c3fc <main+0x960>)
   8c1ba:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c1bc:	4b8d      	ldr	r3, [pc, #564]	; (8c3f4 <main+0x958>)
   8c1be:	2200      	movs	r2, #0
   8c1c0:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8c1c2:	e006      	b.n	8c1d2 <main+0x736>

						
						default: break;
   8c1c4:	bf00      	nop
   8c1c6:	f001 bd50 	b.w	8dc6a <main+0x21ce>
							else
							{
									// Handle error
							}
							
						break;
   8c1ca:	bf00      	nop
   8c1cc:	f001 bd4d 	b.w	8dc6a <main+0x21ce>
// 							{
// 								// Handle error
// 							}
							

						break;
   8c1d0:	bf00      	nop
						break;

						
						default: break;
					}
					break;
   8c1d2:	f001 bd4a 	b.w	8dc6a <main+0x21ce>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8c1d6:	4b87      	ldr	r3, [pc, #540]	; (8c3f4 <main+0x958>)
   8c1d8:	781b      	ldrb	r3, [r3, #0]
   8c1da:	3b07      	subs	r3, #7
   8c1dc:	2b4d      	cmp	r3, #77	; 0x4d
   8c1de:	f200 80fb 	bhi.w	8c3d8 <main+0x93c>
   8c1e2:	a201      	add	r2, pc, #4	; (adr r2, 8c1e8 <main+0x74c>)
   8c1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c1e8:	0008c369 	.word	0x0008c369
   8c1ec:	0008c3d9 	.word	0x0008c3d9
   8c1f0:	0008c3d9 	.word	0x0008c3d9
   8c1f4:	0008c369 	.word	0x0008c369
   8c1f8:	0008c369 	.word	0x0008c369
   8c1fc:	0008c369 	.word	0x0008c369
   8c200:	0008c3d9 	.word	0x0008c3d9
   8c204:	0008c3d9 	.word	0x0008c3d9
   8c208:	0008c3d9 	.word	0x0008c3d9
   8c20c:	0008c3d9 	.word	0x0008c3d9
   8c210:	0008c3d9 	.word	0x0008c3d9
   8c214:	0008c3d9 	.word	0x0008c3d9
   8c218:	0008c3d9 	.word	0x0008c3d9
   8c21c:	0008c3d9 	.word	0x0008c3d9
   8c220:	0008c3d9 	.word	0x0008c3d9
   8c224:	0008c3d9 	.word	0x0008c3d9
   8c228:	0008c3d9 	.word	0x0008c3d9
   8c22c:	0008c3d9 	.word	0x0008c3d9
   8c230:	0008c3d9 	.word	0x0008c3d9
   8c234:	0008c3d9 	.word	0x0008c3d9
   8c238:	0008c3d9 	.word	0x0008c3d9
   8c23c:	0008c3d9 	.word	0x0008c3d9
   8c240:	0008c3d9 	.word	0x0008c3d9
   8c244:	0008c3d9 	.word	0x0008c3d9
   8c248:	0008c3d9 	.word	0x0008c3d9
   8c24c:	0008c3d9 	.word	0x0008c3d9
   8c250:	0008c3d9 	.word	0x0008c3d9
   8c254:	0008c3d9 	.word	0x0008c3d9
   8c258:	0008c3d9 	.word	0x0008c3d9
   8c25c:	0008c3d9 	.word	0x0008c3d9
   8c260:	0008c3d9 	.word	0x0008c3d9
   8c264:	0008c3d9 	.word	0x0008c3d9
   8c268:	0008c3d9 	.word	0x0008c3d9
   8c26c:	0008c3d9 	.word	0x0008c3d9
   8c270:	0008c359 	.word	0x0008c359
   8c274:	0008c3d9 	.word	0x0008c3d9
   8c278:	0008c3d9 	.word	0x0008c3d9
   8c27c:	0008c3d9 	.word	0x0008c3d9
   8c280:	0008c3d9 	.word	0x0008c3d9
   8c284:	0008c359 	.word	0x0008c359
   8c288:	0008c3d9 	.word	0x0008c3d9
   8c28c:	0008c3d9 	.word	0x0008c3d9
   8c290:	0008c3d9 	.word	0x0008c3d9
   8c294:	0008c3d9 	.word	0x0008c3d9
   8c298:	0008c3d9 	.word	0x0008c3d9
   8c29c:	0008c3d9 	.word	0x0008c3d9
   8c2a0:	0008c3d9 	.word	0x0008c3d9
   8c2a4:	0008c3d9 	.word	0x0008c3d9
   8c2a8:	0008c3d9 	.word	0x0008c3d9
   8c2ac:	0008c321 	.word	0x0008c321
   8c2b0:	0008c321 	.word	0x0008c321
   8c2b4:	0008c321 	.word	0x0008c321
   8c2b8:	0008c321 	.word	0x0008c321
   8c2bc:	0008c321 	.word	0x0008c321
   8c2c0:	0008c3d9 	.word	0x0008c3d9
   8c2c4:	0008c3d9 	.word	0x0008c3d9
   8c2c8:	0008c369 	.word	0x0008c369
   8c2cc:	0008c369 	.word	0x0008c369
   8c2d0:	0008c369 	.word	0x0008c369
   8c2d4:	0008c3d9 	.word	0x0008c3d9
   8c2d8:	0008c3d9 	.word	0x0008c3d9
   8c2dc:	0008c383 	.word	0x0008c383
   8c2e0:	0008c383 	.word	0x0008c383
   8c2e4:	0008c3d9 	.word	0x0008c3d9
   8c2e8:	0008c3d9 	.word	0x0008c3d9
   8c2ec:	0008c3d9 	.word	0x0008c3d9
   8c2f0:	0008c3d9 	.word	0x0008c3d9
   8c2f4:	0008c3d9 	.word	0x0008c3d9
   8c2f8:	0008c3d9 	.word	0x0008c3d9
   8c2fc:	0008c3d9 	.word	0x0008c3d9
   8c300:	0008c3d9 	.word	0x0008c3d9
   8c304:	0008c3d9 	.word	0x0008c3d9
   8c308:	0008c3d9 	.word	0x0008c3d9
   8c30c:	0008c3d9 	.word	0x0008c3d9
   8c310:	0008c369 	.word	0x0008c369
   8c314:	0008c39d 	.word	0x0008c39d
   8c318:	0008c39d 	.word	0x0008c39d
   8c31c:	0008c3b7 	.word	0x0008c3b7
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c320:	4b34      	ldr	r3, [pc, #208]	; (8c3f4 <main+0x958>)
   8c322:	781b      	ldrb	r3, [r3, #0]
   8c324:	4618      	mov	r0, r3
   8c326:	4b34      	ldr	r3, [pc, #208]	; (8c3f8 <main+0x95c>)
   8c328:	4798      	blx	r3
   8c32a:	4603      	mov	r3, r0
   8c32c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c32e:	7bfb      	ldrb	r3, [r7, #15]
   8c330:	2b00      	cmp	r3, #0
   8c332:	d001      	beq.n	8c338 <main+0x89c>
   8c334:	4b31      	ldr	r3, [pc, #196]	; (8c3fc <main+0x960>)
   8c336:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c338:	7bfb      	ldrb	r3, [r7, #15]
   8c33a:	2b00      	cmp	r3, #0
   8c33c:	d14e      	bne.n	8c3dc <main+0x940>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c33e:	4b2d      	ldr	r3, [pc, #180]	; (8c3f4 <main+0x958>)
   8c340:	781b      	ldrb	r3, [r3, #0]
   8c342:	4618      	mov	r0, r3
   8c344:	4b30      	ldr	r3, [pc, #192]	; (8c408 <main+0x96c>)
   8c346:	4798      	blx	r3
   8c348:	4603      	mov	r3, r0
   8c34a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c34c:	7bfb      	ldrb	r3, [r7, #15]
   8c34e:	2b00      	cmp	r3, #0
   8c350:	d044      	beq.n	8c3dc <main+0x940>
   8c352:	4b2a      	ldr	r3, [pc, #168]	; (8c3fc <main+0x960>)
   8c354:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c356:	e041      	b.n	8c3dc <main+0x940>
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						case EVT_ALARM_TRIGGERED:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c358:	4b26      	ldr	r3, [pc, #152]	; (8c3f4 <main+0x958>)
   8c35a:	781b      	ldrb	r3, [r3, #0]
   8c35c:	4618      	mov	r0, r3
   8c35e:	4b26      	ldr	r3, [pc, #152]	; (8c3f8 <main+0x95c>)
   8c360:	4798      	blx	r3
   8c362:	4603      	mov	r3, r0
   8c364:	73fb      	strb	r3, [r7, #15]
						
						break;
   8c366:	e040      	b.n	8c3ea <main+0x94e>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c368:	4b22      	ldr	r3, [pc, #136]	; (8c3f4 <main+0x958>)
   8c36a:	781b      	ldrb	r3, [r3, #0]
   8c36c:	4618      	mov	r0, r3
   8c36e:	4b22      	ldr	r3, [pc, #136]	; (8c3f8 <main+0x95c>)
   8c370:	4798      	blx	r3
   8c372:	4603      	mov	r3, r0
   8c374:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c376:	7bfb      	ldrb	r3, [r7, #15]
   8c378:	2b00      	cmp	r3, #0
   8c37a:	d031      	beq.n	8c3e0 <main+0x944>
   8c37c:	4b1f      	ldr	r3, [pc, #124]	; (8c3fc <main+0x960>)
   8c37e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c380:	e02e      	b.n	8c3e0 <main+0x944>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c382:	4b1c      	ldr	r3, [pc, #112]	; (8c3f4 <main+0x958>)
   8c384:	781b      	ldrb	r3, [r3, #0]
   8c386:	4618      	mov	r0, r3
   8c388:	4b1f      	ldr	r3, [pc, #124]	; (8c408 <main+0x96c>)
   8c38a:	4798      	blx	r3
   8c38c:	4603      	mov	r3, r0
   8c38e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c390:	7bfb      	ldrb	r3, [r7, #15]
   8c392:	2b00      	cmp	r3, #0
   8c394:	d026      	beq.n	8c3e4 <main+0x948>
   8c396:	4b19      	ldr	r3, [pc, #100]	; (8c3fc <main+0x960>)
   8c398:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c39a:	e023      	b.n	8c3e4 <main+0x948>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c39c:	4b15      	ldr	r3, [pc, #84]	; (8c3f4 <main+0x958>)
   8c39e:	781b      	ldrb	r3, [r3, #0]
   8c3a0:	4618      	mov	r0, r3
   8c3a2:	4b15      	ldr	r3, [pc, #84]	; (8c3f8 <main+0x95c>)
   8c3a4:	4798      	blx	r3
   8c3a6:	4603      	mov	r3, r0
   8c3a8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c3aa:	7bfb      	ldrb	r3, [r7, #15]
   8c3ac:	2b00      	cmp	r3, #0
   8c3ae:	d01b      	beq.n	8c3e8 <main+0x94c>
   8c3b0:	4b12      	ldr	r3, [pc, #72]	; (8c3fc <main+0x960>)
   8c3b2:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c3b4:	e018      	b.n	8c3e8 <main+0x94c>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c3b6:	202b      	movs	r0, #43	; 0x2b
   8c3b8:	4b12      	ldr	r3, [pc, #72]	; (8c404 <main+0x968>)
   8c3ba:	4798      	blx	r3
   8c3bc:	4603      	mov	r3, r0
   8c3be:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c3c0:	7bfb      	ldrb	r3, [r7, #15]
   8c3c2:	2b00      	cmp	r3, #0
   8c3c4:	d001      	beq.n	8c3ca <main+0x92e>
   8c3c6:	4b0d      	ldr	r3, [pc, #52]	; (8c3fc <main+0x960>)
   8c3c8:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8c3ca:	4b0d      	ldr	r3, [pc, #52]	; (8c400 <main+0x964>)
   8c3cc:	2205      	movs	r2, #5
   8c3ce:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8c3d0:	4b08      	ldr	r3, [pc, #32]	; (8c3f4 <main+0x958>)
   8c3d2:	2200      	movs	r2, #0
   8c3d4:	701a      	strb	r2, [r3, #0]
						break;
   8c3d6:	e008      	b.n	8c3ea <main+0x94e>
						default:break;
   8c3d8:	bf00      	nop
   8c3da:	e006      	b.n	8c3ea <main+0x94e>
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c3dc:	bf00      	nop
   8c3de:	e004      	b.n	8c3ea <main+0x94e>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c3e0:	bf00      	nop
   8c3e2:	e002      	b.n	8c3ea <main+0x94e>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c3e4:	bf00      	nop
   8c3e6:	e000      	b.n	8c3ea <main+0x94e>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c3e8:	bf00      	nop
						Cl_MacEvent = EVT_NULL;
						break;
						default:break;
					}
	
					Cl_MacEvent = EVT_NULL;
   8c3ea:	4b02      	ldr	r3, [pc, #8]	; (8c3f4 <main+0x958>)
   8c3ec:	2200      	movs	r2, #0
   8c3ee:	701a      	strb	r2, [r3, #0]
					break;
   8c3f0:	f001 bc3b 	b.w	8dc6a <main+0x21ce>
   8c3f4:	200719d6 	.word	0x200719d6
   8c3f8:	0009bfa1 	.word	0x0009bfa1
   8c3fc:	00088e75 	.word	0x00088e75
   8c400:	20070574 	.word	0x20070574
   8c404:	000a4ad1 	.word	0x000a4ad1
   8c408:	000a22c9 	.word	0x000a22c9
   8c40c:	0009e1d1 	.word	0x0009e1d1
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8c410:	4bc4      	ldr	r3, [pc, #784]	; (8c724 <main+0xc88>)
   8c412:	781b      	ldrb	r3, [r3, #0]
   8c414:	3b07      	subs	r3, #7
   8c416:	2b27      	cmp	r3, #39	; 0x27
   8c418:	d852      	bhi.n	8c4c0 <main+0xa24>
   8c41a:	a201      	add	r2, pc, #4	; (adr r2, 8c420 <main+0x984>)
   8c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c420:	0008c4c1 	.word	0x0008c4c1
   8c424:	0008c4c1 	.word	0x0008c4c1
   8c428:	0008c4c1 	.word	0x0008c4c1
   8c42c:	0008c4c1 	.word	0x0008c4c1
   8c430:	0008c4c1 	.word	0x0008c4c1
   8c434:	0008c4c1 	.word	0x0008c4c1
   8c438:	0008c4c1 	.word	0x0008c4c1
   8c43c:	0008c4c1 	.word	0x0008c4c1
   8c440:	0008c4c1 	.word	0x0008c4c1
   8c444:	0008c4c1 	.word	0x0008c4c1
   8c448:	0008c4c1 	.word	0x0008c4c1
   8c44c:	0008c4c1 	.word	0x0008c4c1
   8c450:	0008c4c1 	.word	0x0008c4c1
   8c454:	0008c4c1 	.word	0x0008c4c1
   8c458:	0008c4c1 	.word	0x0008c4c1
   8c45c:	0008c4c1 	.word	0x0008c4c1
   8c460:	0008c4c1 	.word	0x0008c4c1
   8c464:	0008c4c1 	.word	0x0008c4c1
   8c468:	0008c4c1 	.word	0x0008c4c1
   8c46c:	0008c4c1 	.word	0x0008c4c1
   8c470:	0008c4c1 	.word	0x0008c4c1
   8c474:	0008c4c1 	.word	0x0008c4c1
   8c478:	0008c4c1 	.word	0x0008c4c1
   8c47c:	0008c4c1 	.word	0x0008c4c1
   8c480:	0008c4c1 	.word	0x0008c4c1
   8c484:	0008c4c1 	.word	0x0008c4c1
   8c488:	0008c4c1 	.word	0x0008c4c1
   8c48c:	0008c4c1 	.word	0x0008c4c1
   8c490:	0008c4c1 	.word	0x0008c4c1
   8c494:	0008c4c1 	.word	0x0008c4c1
   8c498:	0008c4c1 	.word	0x0008c4c1
   8c49c:	0008c4c1 	.word	0x0008c4c1
   8c4a0:	0008c4c1 	.word	0x0008c4c1
   8c4a4:	0008c4c1 	.word	0x0008c4c1
   8c4a8:	0008c4c1 	.word	0x0008c4c1
   8c4ac:	0008c4c1 	.word	0x0008c4c1
   8c4b0:	0008c4c1 	.word	0x0008c4c1
   8c4b4:	0008c4c1 	.word	0x0008c4c1
   8c4b8:	0008c4c1 	.word	0x0008c4c1
   8c4bc:	0008c4c1 	.word	0x0008c4c1
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8c4c0:	bf00      	nop
					}
					break;
   8c4c2:	f001 bbd2 	b.w	8dc6a <main+0x21ce>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8c4c6:	4b97      	ldr	r3, [pc, #604]	; (8c724 <main+0xc88>)
   8c4c8:	781b      	ldrb	r3, [r3, #0]
   8c4ca:	3b07      	subs	r3, #7
   8c4cc:	2b4a      	cmp	r3, #74	; 0x4a
   8c4ce:	f200 8144 	bhi.w	8c75a <main+0xcbe>
   8c4d2:	a201      	add	r2, pc, #4	; (adr r2, 8c4d8 <main+0xa3c>)
   8c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c4d8:	0008c605 	.word	0x0008c605
   8c4dc:	0008c6eb 	.word	0x0008c6eb
   8c4e0:	0008c689 	.word	0x0008c689
   8c4e4:	0008c741 	.word	0x0008c741
   8c4e8:	0008c741 	.word	0x0008c741
   8c4ec:	0008c741 	.word	0x0008c741
   8c4f0:	0008c75b 	.word	0x0008c75b
   8c4f4:	0008c75b 	.word	0x0008c75b
   8c4f8:	0008c70b 	.word	0x0008c70b
   8c4fc:	0008c70b 	.word	0x0008c70b
   8c500:	0008c75b 	.word	0x0008c75b
   8c504:	0008c75b 	.word	0x0008c75b
   8c508:	0008c75b 	.word	0x0008c75b
   8c50c:	0008c75b 	.word	0x0008c75b
   8c510:	0008c75b 	.word	0x0008c75b
   8c514:	0008c75b 	.word	0x0008c75b
   8c518:	0008c75b 	.word	0x0008c75b
   8c51c:	0008c75b 	.word	0x0008c75b
   8c520:	0008c75b 	.word	0x0008c75b
   8c524:	0008c75b 	.word	0x0008c75b
   8c528:	0008c75b 	.word	0x0008c75b
   8c52c:	0008c75b 	.word	0x0008c75b
   8c530:	0008c75b 	.word	0x0008c75b
   8c534:	0008c75b 	.word	0x0008c75b
   8c538:	0008c70b 	.word	0x0008c70b
   8c53c:	0008c70b 	.word	0x0008c70b
   8c540:	0008c75b 	.word	0x0008c75b
   8c544:	0008c75b 	.word	0x0008c75b
   8c548:	0008c75b 	.word	0x0008c75b
   8c54c:	0008c75b 	.word	0x0008c75b
   8c550:	0008c75b 	.word	0x0008c75b
   8c554:	0008c741 	.word	0x0008c741
   8c558:	0008c741 	.word	0x0008c741
   8c55c:	0008c741 	.word	0x0008c741
   8c560:	0008c689 	.word	0x0008c689
   8c564:	0008c75b 	.word	0x0008c75b
   8c568:	0008c75b 	.word	0x0008c75b
   8c56c:	0008c75b 	.word	0x0008c75b
   8c570:	0008c689 	.word	0x0008c689
   8c574:	0008c689 	.word	0x0008c689
   8c578:	0008c75b 	.word	0x0008c75b
   8c57c:	0008c75b 	.word	0x0008c75b
   8c580:	0008c669 	.word	0x0008c669
   8c584:	0008c75b 	.word	0x0008c75b
   8c588:	0008c75b 	.word	0x0008c75b
   8c58c:	0008c75b 	.word	0x0008c75b
   8c590:	0008c75b 	.word	0x0008c75b
   8c594:	0008c75b 	.word	0x0008c75b
   8c598:	0008c75b 	.word	0x0008c75b
   8c59c:	0008c689 	.word	0x0008c689
   8c5a0:	0008c689 	.word	0x0008c689
   8c5a4:	0008c689 	.word	0x0008c689
   8c5a8:	0008c689 	.word	0x0008c689
   8c5ac:	0008c689 	.word	0x0008c689
   8c5b0:	0008c689 	.word	0x0008c689
   8c5b4:	0008c75b 	.word	0x0008c75b
   8c5b8:	0008c75b 	.word	0x0008c75b
   8c5bc:	0008c75b 	.word	0x0008c75b
   8c5c0:	0008c75b 	.word	0x0008c75b
   8c5c4:	0008c75b 	.word	0x0008c75b
   8c5c8:	0008c75b 	.word	0x0008c75b
   8c5cc:	0008c75b 	.word	0x0008c75b
   8c5d0:	0008c75b 	.word	0x0008c75b
   8c5d4:	0008c75b 	.word	0x0008c75b
   8c5d8:	0008c75b 	.word	0x0008c75b
   8c5dc:	0008c6a9 	.word	0x0008c6a9
   8c5e0:	0008c75b 	.word	0x0008c75b
   8c5e4:	0008c75b 	.word	0x0008c75b
   8c5e8:	0008c75b 	.word	0x0008c75b
   8c5ec:	0008c75b 	.word	0x0008c75b
   8c5f0:	0008c75b 	.word	0x0008c75b
   8c5f4:	0008c75b 	.word	0x0008c75b
   8c5f8:	0008c75b 	.word	0x0008c75b
   8c5fc:	0008c75b 	.word	0x0008c75b
   8c600:	0008c689 	.word	0x0008c689
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8c604:	4b48      	ldr	r3, [pc, #288]	; (8c728 <main+0xc8c>)
   8c606:	2200      	movs	r2, #0
   8c608:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c60a:	4b46      	ldr	r3, [pc, #280]	; (8c724 <main+0xc88>)
   8c60c:	781b      	ldrb	r3, [r3, #0]
   8c60e:	4618      	mov	r0, r3
   8c610:	4b46      	ldr	r3, [pc, #280]	; (8c72c <main+0xc90>)
   8c612:	4798      	blx	r3
   8c614:	4603      	mov	r3, r0
   8c616:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c618:	7bfb      	ldrb	r3, [r7, #15]
   8c61a:	2b00      	cmp	r3, #0
   8c61c:	d001      	beq.n	8c622 <main+0xb86>
   8c61e:	4b44      	ldr	r3, [pc, #272]	; (8c730 <main+0xc94>)
   8c620:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c622:	7bfb      	ldrb	r3, [r7, #15]
   8c624:	2b00      	cmp	r3, #0
   8c626:	d10c      	bne.n	8c642 <main+0xba6>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c628:	4b3e      	ldr	r3, [pc, #248]	; (8c724 <main+0xc88>)
   8c62a:	781b      	ldrb	r3, [r3, #0]
   8c62c:	4618      	mov	r0, r3
   8c62e:	4b41      	ldr	r3, [pc, #260]	; (8c734 <main+0xc98>)
   8c630:	4798      	blx	r3
   8c632:	4603      	mov	r3, r0
   8c634:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8c636:	7bfb      	ldrb	r3, [r7, #15]
   8c638:	2b00      	cmp	r3, #0
   8c63a:	d011      	beq.n	8c660 <main+0xbc4>
   8c63c:	4b3c      	ldr	r3, [pc, #240]	; (8c730 <main+0xc94>)
   8c63e:	4798      	blx	r3
   8c640:	e00e      	b.n	8c660 <main+0xbc4>
							}
							else if(Cl_MacRetval == CL_OK)
   8c642:	7bfb      	ldrb	r3, [r7, #15]
   8c644:	2b00      	cmp	r3, #0
   8c646:	d10b      	bne.n	8c660 <main+0xbc4>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c648:	4b36      	ldr	r3, [pc, #216]	; (8c724 <main+0xc88>)
   8c64a:	781b      	ldrb	r3, [r3, #0]
   8c64c:	4618      	mov	r0, r3
   8c64e:	4b39      	ldr	r3, [pc, #228]	; (8c734 <main+0xc98>)
   8c650:	4798      	blx	r3
   8c652:	4603      	mov	r3, r0
   8c654:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c656:	7bfb      	ldrb	r3, [r7, #15]
   8c658:	2b00      	cmp	r3, #0
   8c65a:	d001      	beq.n	8c660 <main+0xbc4>
   8c65c:	4b34      	ldr	r3, [pc, #208]	; (8c730 <main+0xc94>)
   8c65e:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c660:	4b30      	ldr	r3, [pc, #192]	; (8c724 <main+0xc88>)
   8c662:	2200      	movs	r2, #0
   8c664:	701a      	strb	r2, [r3, #0]
						break;
   8c666:	e07f      	b.n	8c768 <main+0xccc>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c668:	4b2e      	ldr	r3, [pc, #184]	; (8c724 <main+0xc88>)
   8c66a:	781b      	ldrb	r3, [r3, #0]
   8c66c:	4618      	mov	r0, r3
   8c66e:	4b31      	ldr	r3, [pc, #196]	; (8c734 <main+0xc98>)
   8c670:	4798      	blx	r3
   8c672:	4603      	mov	r3, r0
   8c674:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c676:	7bfb      	ldrb	r3, [r7, #15]
   8c678:	2b00      	cmp	r3, #0
   8c67a:	d001      	beq.n	8c680 <main+0xbe4>
   8c67c:	4b2c      	ldr	r3, [pc, #176]	; (8c730 <main+0xc94>)
   8c67e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c680:	4b28      	ldr	r3, [pc, #160]	; (8c724 <main+0xc88>)
   8c682:	2200      	movs	r2, #0
   8c684:	701a      	strb	r2, [r3, #0]
						break;
   8c686:	e06f      	b.n	8c768 <main+0xccc>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c688:	4b26      	ldr	r3, [pc, #152]	; (8c724 <main+0xc88>)
   8c68a:	781b      	ldrb	r3, [r3, #0]
   8c68c:	4618      	mov	r0, r3
   8c68e:	4b29      	ldr	r3, [pc, #164]	; (8c734 <main+0xc98>)
   8c690:	4798      	blx	r3
   8c692:	4603      	mov	r3, r0
   8c694:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c696:	7bfb      	ldrb	r3, [r7, #15]
   8c698:	2b00      	cmp	r3, #0
   8c69a:	d001      	beq.n	8c6a0 <main+0xc04>
   8c69c:	4b24      	ldr	r3, [pc, #144]	; (8c730 <main+0xc94>)
   8c69e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8c6a0:	4b20      	ldr	r3, [pc, #128]	; (8c724 <main+0xc88>)
   8c6a2:	2200      	movs	r2, #0
   8c6a4:	701a      	strb	r2, [r3, #0]
						break;
   8c6a6:	e05f      	b.n	8c768 <main+0xccc>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c6a8:	4b1e      	ldr	r3, [pc, #120]	; (8c724 <main+0xc88>)
   8c6aa:	781b      	ldrb	r3, [r3, #0]
   8c6ac:	4618      	mov	r0, r3
   8c6ae:	4b21      	ldr	r3, [pc, #132]	; (8c734 <main+0xc98>)
   8c6b0:	4798      	blx	r3
   8c6b2:	4603      	mov	r3, r0
   8c6b4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c6b6:	7bfb      	ldrb	r3, [r7, #15]
   8c6b8:	2b00      	cmp	r3, #0
   8c6ba:	d001      	beq.n	8c6c0 <main+0xc24>
   8c6bc:	4b1c      	ldr	r3, [pc, #112]	; (8c730 <main+0xc94>)
   8c6be:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c6c0:	7bfb      	ldrb	r3, [r7, #15]
   8c6c2:	2b00      	cmp	r3, #0
   8c6c4:	d109      	bne.n	8c6da <main+0xc3e>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c6c6:	4b1c      	ldr	r3, [pc, #112]	; (8c738 <main+0xc9c>)
   8c6c8:	220a      	movs	r2, #10
   8c6ca:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8c6cc:	230a      	movs	r3, #10
   8c6ce:	727b      	strb	r3, [r7, #9]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c6d0:	7bfb      	ldrb	r3, [r7, #15]
   8c6d2:	2b00      	cmp	r3, #0
   8c6d4:	d001      	beq.n	8c6da <main+0xc3e>
   8c6d6:	4b16      	ldr	r3, [pc, #88]	; (8c730 <main+0xc94>)
   8c6d8:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8c6da:	4b18      	ldr	r3, [pc, #96]	; (8c73c <main+0xca0>)
   8c6dc:	4798      	blx	r3
   8c6de:	4603      	mov	r3, r0
   8c6e0:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacEvent = EVT_NULL;
   8c6e2:	4b10      	ldr	r3, [pc, #64]	; (8c724 <main+0xc88>)
   8c6e4:	2200      	movs	r2, #0
   8c6e6:	701a      	strb	r2, [r3, #0]
						break;
   8c6e8:	e03e      	b.n	8c768 <main+0xccc>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c6ea:	4b0e      	ldr	r3, [pc, #56]	; (8c724 <main+0xc88>)
   8c6ec:	781b      	ldrb	r3, [r3, #0]
   8c6ee:	4618      	mov	r0, r3
   8c6f0:	4b10      	ldr	r3, [pc, #64]	; (8c734 <main+0xc98>)
   8c6f2:	4798      	blx	r3
   8c6f4:	4603      	mov	r3, r0
   8c6f6:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c6f8:	7bfb      	ldrb	r3, [r7, #15]
   8c6fa:	2b00      	cmp	r3, #0
   8c6fc:	d001      	beq.n	8c702 <main+0xc66>
   8c6fe:	4b0c      	ldr	r3, [pc, #48]	; (8c730 <main+0xc94>)
   8c700:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8c702:	4b08      	ldr	r3, [pc, #32]	; (8c724 <main+0xc88>)
   8c704:	2200      	movs	r2, #0
   8c706:	701a      	strb	r2, [r3, #0]
						break;
   8c708:	e02e      	b.n	8c768 <main+0xccc>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c70a:	4b06      	ldr	r3, [pc, #24]	; (8c724 <main+0xc88>)
   8c70c:	781b      	ldrb	r3, [r3, #0]
   8c70e:	4618      	mov	r0, r3
   8c710:	4b08      	ldr	r3, [pc, #32]	; (8c734 <main+0xc98>)
   8c712:	4798      	blx	r3
   8c714:	4603      	mov	r3, r0
   8c716:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c718:	7bfb      	ldrb	r3, [r7, #15]
   8c71a:	2b00      	cmp	r3, #0
   8c71c:	d020      	beq.n	8c760 <main+0xcc4>
   8c71e:	4b04      	ldr	r3, [pc, #16]	; (8c730 <main+0xc94>)
   8c720:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8c722:	e01d      	b.n	8c760 <main+0xcc4>
   8c724:	200719d6 	.word	0x200719d6
   8c728:	200719dc 	.word	0x200719dc
   8c72c:	000a4ad1 	.word	0x000a4ad1
   8c730:	00088e75 	.word	0x00088e75
   8c734:	000a22c9 	.word	0x000a22c9
   8c738:	20070574 	.word	0x20070574
   8c73c:	000853a5 	.word	0x000853a5
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c740:	4baa      	ldr	r3, [pc, #680]	; (8c9ec <main+0xf50>)
   8c742:	781b      	ldrb	r3, [r3, #0]
   8c744:	4618      	mov	r0, r3
   8c746:	4baa      	ldr	r3, [pc, #680]	; (8c9f0 <main+0xf54>)
   8c748:	4798      	blx	r3
   8c74a:	4603      	mov	r3, r0
   8c74c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c74e:	7bfb      	ldrb	r3, [r7, #15]
   8c750:	2b00      	cmp	r3, #0
   8c752:	d008      	beq.n	8c766 <main+0xcca>
   8c754:	4ba7      	ldr	r3, [pc, #668]	; (8c9f4 <main+0xf58>)
   8c756:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8c758:	e005      	b.n	8c766 <main+0xcca>
						default: break;
   8c75a:	bf00      	nop
   8c75c:	f001 ba85 	b.w	8dc6a <main+0x21ce>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8c760:	bf00      	nop
   8c762:	f001 ba82 	b.w	8dc6a <main+0x21ce>
						ASSERT_ERROR(Cl_MacRetval);
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8c766:	bf00      	nop
						default: break;
					}
					break;
   8c768:	f001 ba7f 	b.w	8dc6a <main+0x21ce>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8c76c:	4b9f      	ldr	r3, [pc, #636]	; (8c9ec <main+0xf50>)
   8c76e:	781b      	ldrb	r3, [r3, #0]
   8c770:	3b07      	subs	r3, #7
   8c772:	2b38      	cmp	r3, #56	; 0x38
   8c774:	f200 815d 	bhi.w	8ca32 <main+0xf96>
   8c778:	a201      	add	r2, pc, #4	; (adr r2, 8c780 <main+0xce4>)
   8c77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c77e:	bf00      	nop
   8c780:	0008c8bb 	.word	0x0008c8bb
   8c784:	0008ca33 	.word	0x0008ca33
   8c788:	0008c915 	.word	0x0008c915
   8c78c:	0008ca0d 	.word	0x0008ca0d
   8c790:	0008ca0d 	.word	0x0008ca0d
   8c794:	0008ca0d 	.word	0x0008ca0d
   8c798:	0008ca33 	.word	0x0008ca33
   8c79c:	0008ca33 	.word	0x0008ca33
   8c7a0:	0008c9d3 	.word	0x0008c9d3
   8c7a4:	0008c9d3 	.word	0x0008c9d3
   8c7a8:	0008ca33 	.word	0x0008ca33
   8c7ac:	0008ca33 	.word	0x0008ca33
   8c7b0:	0008ca33 	.word	0x0008ca33
   8c7b4:	0008ca33 	.word	0x0008ca33
   8c7b8:	0008ca33 	.word	0x0008ca33
   8c7bc:	0008ca33 	.word	0x0008ca33
   8c7c0:	0008ca33 	.word	0x0008ca33
   8c7c4:	0008ca33 	.word	0x0008ca33
   8c7c8:	0008ca33 	.word	0x0008ca33
   8c7cc:	0008ca33 	.word	0x0008ca33
   8c7d0:	0008ca33 	.word	0x0008ca33
   8c7d4:	0008ca33 	.word	0x0008ca33
   8c7d8:	0008c987 	.word	0x0008c987
   8c7dc:	0008ca33 	.word	0x0008ca33
   8c7e0:	0008c9ad 	.word	0x0008c9ad
   8c7e4:	0008c9ad 	.word	0x0008c9ad
   8c7e8:	0008ca33 	.word	0x0008ca33
   8c7ec:	0008ca33 	.word	0x0008ca33
   8c7f0:	0008ca33 	.word	0x0008ca33
   8c7f4:	0008ca33 	.word	0x0008ca33
   8c7f8:	0008ca33 	.word	0x0008ca33
   8c7fc:	0008ca0d 	.word	0x0008ca0d
   8c800:	0008ca0d 	.word	0x0008ca0d
   8c804:	0008ca0d 	.word	0x0008ca0d
   8c808:	0008ca33 	.word	0x0008ca33
   8c80c:	0008ca33 	.word	0x0008ca33
   8c810:	0008ca33 	.word	0x0008ca33
   8c814:	0008ca33 	.word	0x0008ca33
   8c818:	0008c865 	.word	0x0008c865
   8c81c:	0008c865 	.word	0x0008c865
   8c820:	0008ca33 	.word	0x0008ca33
   8c824:	0008ca33 	.word	0x0008ca33
   8c828:	0008ca33 	.word	0x0008ca33
   8c82c:	0008ca33 	.word	0x0008ca33
   8c830:	0008ca33 	.word	0x0008ca33
   8c834:	0008ca33 	.word	0x0008ca33
   8c838:	0008ca33 	.word	0x0008ca33
   8c83c:	0008ca33 	.word	0x0008ca33
   8c840:	0008ca33 	.word	0x0008ca33
   8c844:	0008ca33 	.word	0x0008ca33
   8c848:	0008ca33 	.word	0x0008ca33
   8c84c:	0008ca33 	.word	0x0008ca33
   8c850:	0008ca33 	.word	0x0008ca33
   8c854:	0008ca33 	.word	0x0008ca33
   8c858:	0008ca33 	.word	0x0008ca33
   8c85c:	0008ca33 	.word	0x0008ca33
   8c860:	0008c875 	.word	0x0008c875
				
					{
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c864:	4b61      	ldr	r3, [pc, #388]	; (8c9ec <main+0xf50>)
   8c866:	781b      	ldrb	r3, [r3, #0]
   8c868:	4618      	mov	r0, r3
   8c86a:	4b61      	ldr	r3, [pc, #388]	; (8c9f0 <main+0xf54>)
   8c86c:	4798      	blx	r3
   8c86e:	4603      	mov	r3, r0
   8c870:	73fb      	strb	r3, [r7, #15]
						break;
   8c872:	e0f1      	b.n	8ca58 <main+0xfbc>

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8c874:	4b5d      	ldr	r3, [pc, #372]	; (8c9ec <main+0xf50>)
   8c876:	781b      	ldrb	r3, [r3, #0]
   8c878:	4618      	mov	r0, r3
   8c87a:	4b5f      	ldr	r3, [pc, #380]	; (8c9f8 <main+0xf5c>)
   8c87c:	4798      	blx	r3
   8c87e:	4603      	mov	r3, r0
   8c880:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c882:	7bfb      	ldrb	r3, [r7, #15]
   8c884:	2b00      	cmp	r3, #0
   8c886:	d001      	beq.n	8c88c <main+0xdf0>
   8c888:	4b5a      	ldr	r3, [pc, #360]	; (8c9f4 <main+0xf58>)
   8c88a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c88c:	7bfb      	ldrb	r3, [r7, #15]
   8c88e:	2b00      	cmp	r3, #0
   8c890:	d10b      	bne.n	8c8aa <main+0xe0e>
							{
							Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c892:	4b56      	ldr	r3, [pc, #344]	; (8c9ec <main+0xf50>)
   8c894:	781b      	ldrb	r3, [r3, #0]
   8c896:	4618      	mov	r0, r3
   8c898:	4b58      	ldr	r3, [pc, #352]	; (8c9fc <main+0xf60>)
   8c89a:	4798      	blx	r3
   8c89c:	4603      	mov	r3, r0
   8c89e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c8a0:	7bfb      	ldrb	r3, [r7, #15]
   8c8a2:	2b00      	cmp	r3, #0
   8c8a4:	d001      	beq.n	8c8aa <main+0xe0e>
   8c8a6:	4b53      	ldr	r3, [pc, #332]	; (8c9f4 <main+0xf58>)
   8c8a8:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c8aa:	7bfb      	ldrb	r3, [r7, #15]
   8c8ac:	2b00      	cmp	r3, #0
   8c8ae:	f040 80c3 	bne.w	8ca38 <main+0xf9c>
							{
								Cl_MacState = MAC_DISINFECT;
   8c8b2:	4b53      	ldr	r3, [pc, #332]	; (8ca00 <main+0xf64>)
   8c8b4:	2208      	movs	r2, #8
   8c8b6:	701a      	strb	r2, [r3, #0]
							else
							{
								// handdle error
							}
						
						break;
   8c8b8:	e0be      	b.n	8ca38 <main+0xf9c>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c8ba:	4b4c      	ldr	r3, [pc, #304]	; (8c9ec <main+0xf50>)
   8c8bc:	781b      	ldrb	r3, [r3, #0]
   8c8be:	4618      	mov	r0, r3
   8c8c0:	4b50      	ldr	r3, [pc, #320]	; (8ca04 <main+0xf68>)
   8c8c2:	4798      	blx	r3
   8c8c4:	4603      	mov	r3, r0
   8c8c6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c8c8:	7bfb      	ldrb	r3, [r7, #15]
   8c8ca:	2b00      	cmp	r3, #0
   8c8cc:	d001      	beq.n	8c8d2 <main+0xe36>
   8c8ce:	4b49      	ldr	r3, [pc, #292]	; (8c9f4 <main+0xf58>)
   8c8d0:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8c8d2:	7bfb      	ldrb	r3, [r7, #15]
   8c8d4:	2b00      	cmp	r3, #0
   8c8d6:	d10b      	bne.n	8c8f0 <main+0xe54>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c8d8:	4b44      	ldr	r3, [pc, #272]	; (8c9ec <main+0xf50>)
   8c8da:	781b      	ldrb	r3, [r3, #0]
   8c8dc:	4618      	mov	r0, r3
   8c8de:	4b44      	ldr	r3, [pc, #272]	; (8c9f0 <main+0xf54>)
   8c8e0:	4798      	blx	r3
   8c8e2:	4603      	mov	r3, r0
   8c8e4:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8c8e6:	7bfb      	ldrb	r3, [r7, #15]
   8c8e8:	2b00      	cmp	r3, #0
   8c8ea:	d001      	beq.n	8c8f0 <main+0xe54>
   8c8ec:	4b41      	ldr	r3, [pc, #260]	; (8c9f4 <main+0xf58>)
   8c8ee:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8c8f0:	7bfb      	ldrb	r3, [r7, #15]
   8c8f2:	2b00      	cmp	r3, #0
   8c8f4:	d102      	bne.n	8c8fc <main+0xe60>
								{
									Cl_MacState = MAC_RINSE;
   8c8f6:	4b42      	ldr	r3, [pc, #264]	; (8ca00 <main+0xf64>)
   8c8f8:	2207      	movs	r2, #7
   8c8fa:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8c8fc:	7bfb      	ldrb	r3, [r7, #15]
   8c8fe:	2b00      	cmp	r3, #0
   8c900:	d104      	bne.n	8c90c <main+0xe70>
								{
								//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c902:	7bfb      	ldrb	r3, [r7, #15]
   8c904:	2b00      	cmp	r3, #0
   8c906:	d001      	beq.n	8c90c <main+0xe70>
   8c908:	4b3a      	ldr	r3, [pc, #232]	; (8c9f4 <main+0xf58>)
   8c90a:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8c90c:	4b37      	ldr	r3, [pc, #220]	; (8c9ec <main+0xf50>)
   8c90e:	2200      	movs	r2, #0
   8c910:	701a      	strb	r2, [r3, #0]
						break;
   8c912:	e0a1      	b.n	8ca58 <main+0xfbc>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c914:	4b35      	ldr	r3, [pc, #212]	; (8c9ec <main+0xf50>)
   8c916:	781b      	ldrb	r3, [r3, #0]
   8c918:	4618      	mov	r0, r3
   8c91a:	4b3a      	ldr	r3, [pc, #232]	; (8ca04 <main+0xf68>)
   8c91c:	4798      	blx	r3
   8c91e:	4603      	mov	r3, r0
   8c920:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c922:	7bfb      	ldrb	r3, [r7, #15]
   8c924:	2b00      	cmp	r3, #0
   8c926:	d001      	beq.n	8c92c <main+0xe90>
   8c928:	4b32      	ldr	r3, [pc, #200]	; (8c9f4 <main+0xf58>)
   8c92a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c92c:	7bfb      	ldrb	r3, [r7, #15]
   8c92e:	2b00      	cmp	r3, #0
   8c930:	d10b      	bne.n	8c94a <main+0xeae>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c932:	4b2e      	ldr	r3, [pc, #184]	; (8c9ec <main+0xf50>)
   8c934:	781b      	ldrb	r3, [r3, #0]
   8c936:	4618      	mov	r0, r3
   8c938:	4b2d      	ldr	r3, [pc, #180]	; (8c9f0 <main+0xf54>)
   8c93a:	4798      	blx	r3
   8c93c:	4603      	mov	r3, r0
   8c93e:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c940:	7bfb      	ldrb	r3, [r7, #15]
   8c942:	2b00      	cmp	r3, #0
   8c944:	d001      	beq.n	8c94a <main+0xeae>
   8c946:	4b2b      	ldr	r3, [pc, #172]	; (8c9f4 <main+0xf58>)
   8c948:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c94a:	7bfb      	ldrb	r3, [r7, #15]
   8c94c:	2b00      	cmp	r3, #0
   8c94e:	d10b      	bne.n	8c968 <main+0xecc>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c950:	4b26      	ldr	r3, [pc, #152]	; (8c9ec <main+0xf50>)
   8c952:	781b      	ldrb	r3, [r3, #0]
   8c954:	4618      	mov	r0, r3
   8c956:	4b2c      	ldr	r3, [pc, #176]	; (8ca08 <main+0xf6c>)
   8c958:	4798      	blx	r3
   8c95a:	4603      	mov	r3, r0
   8c95c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c95e:	7bfb      	ldrb	r3, [r7, #15]
   8c960:	2b00      	cmp	r3, #0
   8c962:	d001      	beq.n	8c968 <main+0xecc>
   8c964:	4b23      	ldr	r3, [pc, #140]	; (8c9f4 <main+0xf58>)
   8c966:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8c968:	7bfb      	ldrb	r3, [r7, #15]
   8c96a:	2b00      	cmp	r3, #0
   8c96c:	d102      	bne.n	8c974 <main+0xed8>
							{
									Cl_MacState = MAC_DPREP;
   8c96e:	4b24      	ldr	r3, [pc, #144]	; (8ca00 <main+0xf64>)
   8c970:	220b      	movs	r2, #11
   8c972:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8c974:	7bfb      	ldrb	r3, [r7, #15]
   8c976:	2b00      	cmp	r3, #0
   8c978:	d161      	bne.n	8ca3e <main+0xfa2>
							{
							//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
							ASSERT_ERROR(Cl_MacRetval);
   8c97a:	7bfb      	ldrb	r3, [r7, #15]
   8c97c:	2b00      	cmp	r3, #0
   8c97e:	d05e      	beq.n	8ca3e <main+0xfa2>
   8c980:	4b1c      	ldr	r3, [pc, #112]	; (8c9f4 <main+0xf58>)
   8c982:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8c984:	e05b      	b.n	8ca3e <main+0xfa2>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c986:	4b19      	ldr	r3, [pc, #100]	; (8c9ec <main+0xf50>)
   8c988:	781b      	ldrb	r3, [r3, #0]
   8c98a:	4618      	mov	r0, r3
   8c98c:	4b1e      	ldr	r3, [pc, #120]	; (8ca08 <main+0xf6c>)
   8c98e:	4798      	blx	r3
   8c990:	4603      	mov	r3, r0
   8c992:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c994:	7bfb      	ldrb	r3, [r7, #15]
   8c996:	2b00      	cmp	r3, #0
   8c998:	d001      	beq.n	8c99e <main+0xf02>
   8c99a:	4b16      	ldr	r3, [pc, #88]	; (8c9f4 <main+0xf58>)
   8c99c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c99e:	7bfb      	ldrb	r3, [r7, #15]
   8c9a0:	2b00      	cmp	r3, #0
   8c9a2:	d14f      	bne.n	8ca44 <main+0xfa8>
							{
									Cl_MacState = MAC_DPREP;
   8c9a4:	4b16      	ldr	r3, [pc, #88]	; (8ca00 <main+0xf64>)
   8c9a6:	220b      	movs	r2, #11
   8c9a8:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8c9aa:	e04b      	b.n	8ca44 <main+0xfa8>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c9ac:	4b0f      	ldr	r3, [pc, #60]	; (8c9ec <main+0xf50>)
   8c9ae:	781b      	ldrb	r3, [r3, #0]
   8c9b0:	4618      	mov	r0, r3
   8c9b2:	4b0f      	ldr	r3, [pc, #60]	; (8c9f0 <main+0xf54>)
   8c9b4:	4798      	blx	r3
   8c9b6:	4603      	mov	r3, r0
   8c9b8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c9ba:	7bfb      	ldrb	r3, [r7, #15]
   8c9bc:	2b00      	cmp	r3, #0
   8c9be:	d001      	beq.n	8c9c4 <main+0xf28>
   8c9c0:	4b0c      	ldr	r3, [pc, #48]	; (8c9f4 <main+0xf58>)
   8c9c2:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c9c4:	7bfb      	ldrb	r3, [r7, #15]
   8c9c6:	2b00      	cmp	r3, #0
   8c9c8:	d13f      	bne.n	8ca4a <main+0xfae>
							{
								Cl_MacState = MAC_DPREP;
   8c9ca:	4b0d      	ldr	r3, [pc, #52]	; (8ca00 <main+0xf64>)
   8c9cc:	220b      	movs	r2, #11
   8c9ce:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8c9d0:	e03b      	b.n	8ca4a <main+0xfae>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c9d2:	4b06      	ldr	r3, [pc, #24]	; (8c9ec <main+0xf50>)
   8c9d4:	781b      	ldrb	r3, [r3, #0]
   8c9d6:	4618      	mov	r0, r3
   8c9d8:	4b05      	ldr	r3, [pc, #20]	; (8c9f0 <main+0xf54>)
   8c9da:	4798      	blx	r3
   8c9dc:	4603      	mov	r3, r0
   8c9de:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c9e0:	7bfb      	ldrb	r3, [r7, #15]
   8c9e2:	2b00      	cmp	r3, #0
   8c9e4:	d034      	beq.n	8ca50 <main+0xfb4>
   8c9e6:	4b03      	ldr	r3, [pc, #12]	; (8c9f4 <main+0xf58>)
   8c9e8:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8c9ea:	e031      	b.n	8ca50 <main+0xfb4>
   8c9ec:	200719d6 	.word	0x200719d6
   8c9f0:	000a22c9 	.word	0x000a22c9
   8c9f4:	00088e75 	.word	0x00088e75
   8c9f8:	000854b5 	.word	0x000854b5
   8c9fc:	0009bfa1 	.word	0x0009bfa1
   8ca00:	20070574 	.word	0x20070574
   8ca04:	000a4ad1 	.word	0x000a4ad1
   8ca08:	0009e1d1 	.word	0x0009e1d1
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8ca0c:	4bb5      	ldr	r3, [pc, #724]	; (8cce4 <main+0x1248>)
   8ca0e:	781b      	ldrb	r3, [r3, #0]
   8ca10:	4618      	mov	r0, r3
   8ca12:	4bb5      	ldr	r3, [pc, #724]	; (8cce8 <main+0x124c>)
   8ca14:	4798      	blx	r3
   8ca16:	4603      	mov	r3, r0
   8ca18:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ca1a:	7bfb      	ldrb	r3, [r7, #15]
   8ca1c:	2b00      	cmp	r3, #0
   8ca1e:	d001      	beq.n	8ca24 <main+0xf88>
   8ca20:	4bb2      	ldr	r3, [pc, #712]	; (8ccec <main+0x1250>)
   8ca22:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ca24:	7bfb      	ldrb	r3, [r7, #15]
   8ca26:	2b00      	cmp	r3, #0
   8ca28:	d115      	bne.n	8ca56 <main+0xfba>
							{
								Cl_MacState = MAC_DPREP;
   8ca2a:	4bb1      	ldr	r3, [pc, #708]	; (8ccf0 <main+0x1254>)
   8ca2c:	220b      	movs	r2, #11
   8ca2e:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
																		
						break;
   8ca30:	e011      	b.n	8ca56 <main+0xfba>
						default: break;
   8ca32:	bf00      	nop
   8ca34:	f001 b919 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handdle error
							}
						
						break;
   8ca38:	bf00      	nop
   8ca3a:	f001 b916 	b.w	8dc6a <main+0x21ce>
							}
							else
							{
								// handle error
							}
						break;
   8ca3e:	bf00      	nop
   8ca40:	f001 b913 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}
						
						break;
   8ca44:	bf00      	nop
   8ca46:	f001 b910 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}
													
						break;
   8ca4a:	bf00      	nop
   8ca4c:	f001 b90d 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}
													
						break;
   8ca50:	bf00      	nop
   8ca52:	f001 b90a 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}
																		
						break;
   8ca56:	bf00      	nop
						default: break;
					}
					break;
   8ca58:	f001 b907 	b.w	8dc6a <main+0x21ce>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8ca5c:	4ba1      	ldr	r3, [pc, #644]	; (8cce4 <main+0x1248>)
   8ca5e:	781b      	ldrb	r3, [r3, #0]
   8ca60:	3b09      	subs	r3, #9
   8ca62:	2b4f      	cmp	r3, #79	; 0x4f
   8ca64:	f200 8128 	bhi.w	8ccb8 <main+0x121c>
   8ca68:	a201      	add	r2, pc, #4	; (adr r2, 8ca70 <main+0xfd4>)
   8ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ca6e:	bf00      	nop
   8ca70:	0008cbc7 	.word	0x0008cbc7
   8ca74:	0008cbc7 	.word	0x0008cbc7
   8ca78:	0008cbc7 	.word	0x0008cbc7
   8ca7c:	0008cbc7 	.word	0x0008cbc7
   8ca80:	0008ccb9 	.word	0x0008ccb9
   8ca84:	0008ccb9 	.word	0x0008ccb9
   8ca88:	0008cbed 	.word	0x0008cbed
   8ca8c:	0008cbc7 	.word	0x0008cbc7
   8ca90:	0008cbc7 	.word	0x0008cbc7
   8ca94:	0008cc9f 	.word	0x0008cc9f
   8ca98:	0008cbc7 	.word	0x0008cbc7
   8ca9c:	0008cbc7 	.word	0x0008cbc7
   8caa0:	0008cbc7 	.word	0x0008cbc7
   8caa4:	0008cc39 	.word	0x0008cc39
   8caa8:	0008ccb9 	.word	0x0008ccb9
   8caac:	0008ccb9 	.word	0x0008ccb9
   8cab0:	0008ccb9 	.word	0x0008ccb9
   8cab4:	0008ccb9 	.word	0x0008ccb9
   8cab8:	0008ccb9 	.word	0x0008ccb9
   8cabc:	0008ccb9 	.word	0x0008ccb9
   8cac0:	0008cbc7 	.word	0x0008cbc7
   8cac4:	0008cbc7 	.word	0x0008cbc7
   8cac8:	0008cc13 	.word	0x0008cc13
   8cacc:	0008ccb9 	.word	0x0008ccb9
   8cad0:	0008ccb9 	.word	0x0008ccb9
   8cad4:	0008ccb9 	.word	0x0008ccb9
   8cad8:	0008ccb9 	.word	0x0008ccb9
   8cadc:	0008ccb9 	.word	0x0008ccb9
   8cae0:	0008ccb9 	.word	0x0008ccb9
   8cae4:	0008cbc7 	.word	0x0008cbc7
   8cae8:	0008cbc7 	.word	0x0008cbc7
   8caec:	0008cbc7 	.word	0x0008cbc7
   8caf0:	0008cbc7 	.word	0x0008cbc7
   8caf4:	0008ccb9 	.word	0x0008ccb9
   8caf8:	0008ccb9 	.word	0x0008ccb9
   8cafc:	0008ccb9 	.word	0x0008ccb9
   8cb00:	0008cbc7 	.word	0x0008cbc7
   8cb04:	0008cbc7 	.word	0x0008cbc7
   8cb08:	0008ccb9 	.word	0x0008ccb9
   8cb0c:	0008ccb9 	.word	0x0008ccb9
   8cb10:	0008ccb9 	.word	0x0008ccb9
   8cb14:	0008ccb9 	.word	0x0008ccb9
   8cb18:	0008ccb9 	.word	0x0008ccb9
   8cb1c:	0008ccb9 	.word	0x0008ccb9
   8cb20:	0008ccb9 	.word	0x0008ccb9
   8cb24:	0008ccb9 	.word	0x0008ccb9
   8cb28:	0008ccb9 	.word	0x0008ccb9
   8cb2c:	0008cbc7 	.word	0x0008cbc7
   8cb30:	0008cbc7 	.word	0x0008cbc7
   8cb34:	0008cbc7 	.word	0x0008cbc7
   8cb38:	0008cbc7 	.word	0x0008cbc7
   8cb3c:	0008cbc7 	.word	0x0008cbc7
   8cb40:	0008cbc7 	.word	0x0008cbc7
   8cb44:	0008ccb9 	.word	0x0008ccb9
   8cb48:	0008ccb9 	.word	0x0008ccb9
   8cb4c:	0008ccb9 	.word	0x0008ccb9
   8cb50:	0008ccb9 	.word	0x0008ccb9
   8cb54:	0008ccb9 	.word	0x0008ccb9
   8cb58:	0008ccb9 	.word	0x0008ccb9
   8cb5c:	0008ccb9 	.word	0x0008ccb9
   8cb60:	0008ccb9 	.word	0x0008ccb9
   8cb64:	0008ccb9 	.word	0x0008ccb9
   8cb68:	0008ccb9 	.word	0x0008ccb9
   8cb6c:	0008ccb9 	.word	0x0008ccb9
   8cb70:	0008ccb9 	.word	0x0008ccb9
   8cb74:	0008ccb9 	.word	0x0008ccb9
   8cb78:	0008ccb9 	.word	0x0008ccb9
   8cb7c:	0008cc6f 	.word	0x0008cc6f
   8cb80:	0008ccb9 	.word	0x0008ccb9
   8cb84:	0008ccb9 	.word	0x0008ccb9
   8cb88:	0008ccb9 	.word	0x0008ccb9
   8cb8c:	0008ccb9 	.word	0x0008ccb9
   8cb90:	0008ccb9 	.word	0x0008ccb9
   8cb94:	0008ccb9 	.word	0x0008ccb9
   8cb98:	0008ccb9 	.word	0x0008ccb9
   8cb9c:	0008ccb9 	.word	0x0008ccb9
   8cba0:	0008ccb9 	.word	0x0008ccb9
   8cba4:	0008ccb9 	.word	0x0008ccb9
   8cba8:	0008ccb9 	.word	0x0008ccb9
   8cbac:	0008cbb1 	.word	0x0008cbb1
						{
							
							case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							Cl_MacState = MAC_ISOUF;
   8cbb0:	4b4f      	ldr	r3, [pc, #316]	; (8ccf0 <main+0x1254>)
   8cbb2:	2214      	movs	r2, #20
   8cbb4:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8cbb6:	4b4b      	ldr	r3, [pc, #300]	; (8cce4 <main+0x1248>)
   8cbb8:	781b      	ldrb	r3, [r3, #0]
   8cbba:	4618      	mov	r0, r3
   8cbbc:	4b4d      	ldr	r3, [pc, #308]	; (8ccf4 <main+0x1258>)
   8cbbe:	4798      	blx	r3
   8cbc0:	4603      	mov	r3, r0
   8cbc2:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8cbc4:	e08b      	b.n	8ccde <main+0x1242>
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cbc6:	4b47      	ldr	r3, [pc, #284]	; (8cce4 <main+0x1248>)
   8cbc8:	781b      	ldrb	r3, [r3, #0]
   8cbca:	4618      	mov	r0, r3
   8cbcc:	4b4a      	ldr	r3, [pc, #296]	; (8ccf8 <main+0x125c>)
   8cbce:	4798      	blx	r3
   8cbd0:	4603      	mov	r3, r0
   8cbd2:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbd4:	7bfb      	ldrb	r3, [r7, #15]
   8cbd6:	2b00      	cmp	r3, #0
   8cbd8:	d001      	beq.n	8cbde <main+0x1142>
   8cbda:	4b44      	ldr	r3, [pc, #272]	; (8ccec <main+0x1250>)
   8cbdc:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cbde:	7bfb      	ldrb	r3, [r7, #15]
   8cbe0:	2b00      	cmp	r3, #0
   8cbe2:	d16c      	bne.n	8ccbe <main+0x1222>
							{
								Cl_MacState = MAC_DPREP;
   8cbe4:	4b42      	ldr	r3, [pc, #264]	; (8ccf0 <main+0x1254>)
   8cbe6:	220b      	movs	r2, #11
   8cbe8:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8cbea:	e068      	b.n	8ccbe <main+0x1222>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cbec:	4b3d      	ldr	r3, [pc, #244]	; (8cce4 <main+0x1248>)
   8cbee:	781b      	ldrb	r3, [r3, #0]
   8cbf0:	4618      	mov	r0, r3
   8cbf2:	4b41      	ldr	r3, [pc, #260]	; (8ccf8 <main+0x125c>)
   8cbf4:	4798      	blx	r3
   8cbf6:	4603      	mov	r3, r0
   8cbf8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbfa:	7bfb      	ldrb	r3, [r7, #15]
   8cbfc:	2b00      	cmp	r3, #0
   8cbfe:	d001      	beq.n	8cc04 <main+0x1168>
   8cc00:	4b3a      	ldr	r3, [pc, #232]	; (8ccec <main+0x1250>)
   8cc02:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cc04:	7bfb      	ldrb	r3, [r7, #15]
   8cc06:	2b00      	cmp	r3, #0
   8cc08:	d15c      	bne.n	8ccc4 <main+0x1228>
							{
								Cl_MacState = MAC_DPREP;
   8cc0a:	4b39      	ldr	r3, [pc, #228]	; (8ccf0 <main+0x1254>)
   8cc0c:	220b      	movs	r2, #11
   8cc0e:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cc10:	e058      	b.n	8ccc4 <main+0x1228>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc12:	4b34      	ldr	r3, [pc, #208]	; (8cce4 <main+0x1248>)
   8cc14:	781b      	ldrb	r3, [r3, #0]
   8cc16:	4618      	mov	r0, r3
   8cc18:	4b37      	ldr	r3, [pc, #220]	; (8ccf8 <main+0x125c>)
   8cc1a:	4798      	blx	r3
   8cc1c:	4603      	mov	r3, r0
   8cc1e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cc20:	7bfb      	ldrb	r3, [r7, #15]
   8cc22:	2b00      	cmp	r3, #0
   8cc24:	d001      	beq.n	8cc2a <main+0x118e>
   8cc26:	4b31      	ldr	r3, [pc, #196]	; (8ccec <main+0x1250>)
   8cc28:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cc2a:	7bfb      	ldrb	r3, [r7, #15]
   8cc2c:	2b00      	cmp	r3, #0
   8cc2e:	d14c      	bne.n	8ccca <main+0x122e>
							{
								Cl_MacState = MAC_DPREP;
   8cc30:	4b2f      	ldr	r3, [pc, #188]	; (8ccf0 <main+0x1254>)
   8cc32:	220b      	movs	r2, #11
   8cc34:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cc36:	e048      	b.n	8ccca <main+0x122e>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc38:	4b2a      	ldr	r3, [pc, #168]	; (8cce4 <main+0x1248>)
   8cc3a:	781b      	ldrb	r3, [r3, #0]
   8cc3c:	4618      	mov	r0, r3
   8cc3e:	4b2e      	ldr	r3, [pc, #184]	; (8ccf8 <main+0x125c>)
   8cc40:	4798      	blx	r3
   8cc42:	4603      	mov	r3, r0
   8cc44:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cc46:	7bfb      	ldrb	r3, [r7, #15]
   8cc48:	2b00      	cmp	r3, #0
   8cc4a:	d001      	beq.n	8cc50 <main+0x11b4>
   8cc4c:	4b27      	ldr	r3, [pc, #156]	; (8ccec <main+0x1250>)
   8cc4e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cc50:	7bfb      	ldrb	r3, [r7, #15]
   8cc52:	2b00      	cmp	r3, #0
   8cc54:	d102      	bne.n	8cc5c <main+0x11c0>
							{
								Cl_MacState = MAC_DPREP;
   8cc56:	4b26      	ldr	r3, [pc, #152]	; (8ccf0 <main+0x1254>)
   8cc58:	220b      	movs	r2, #11
   8cc5a:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8cc5c:	4b24      	ldr	r3, [pc, #144]	; (8ccf0 <main+0x1254>)
   8cc5e:	220c      	movs	r2, #12
   8cc60:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cc62:	7bfb      	ldrb	r3, [r7, #15]
   8cc64:	2b00      	cmp	r3, #0
   8cc66:	d033      	beq.n	8ccd0 <main+0x1234>
   8cc68:	4b20      	ldr	r3, [pc, #128]	; (8ccec <main+0x1250>)
   8cc6a:	4798      	blx	r3
						
						break;
   8cc6c:	e030      	b.n	8ccd0 <main+0x1234>
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc6e:	4b1d      	ldr	r3, [pc, #116]	; (8cce4 <main+0x1248>)
   8cc70:	781b      	ldrb	r3, [r3, #0]
   8cc72:	4618      	mov	r0, r3
   8cc74:	4b20      	ldr	r3, [pc, #128]	; (8ccf8 <main+0x125c>)
   8cc76:	4798      	blx	r3
   8cc78:	4603      	mov	r3, r0
   8cc7a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cc7c:	7bfb      	ldrb	r3, [r7, #15]
   8cc7e:	2b00      	cmp	r3, #0
   8cc80:	d001      	beq.n	8cc86 <main+0x11ea>
   8cc82:	4b1a      	ldr	r3, [pc, #104]	; (8ccec <main+0x1250>)
   8cc84:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8cc86:	7bfb      	ldrb	r3, [r7, #15]
   8cc88:	2b00      	cmp	r3, #0
   8cc8a:	d124      	bne.n	8ccd6 <main+0x123a>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8cc8c:	4b18      	ldr	r3, [pc, #96]	; (8ccf0 <main+0x1254>)
   8cc8e:	220e      	movs	r2, #14
   8cc90:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cc92:	7bfb      	ldrb	r3, [r7, #15]
   8cc94:	2b00      	cmp	r3, #0
   8cc96:	d01e      	beq.n	8ccd6 <main+0x123a>
   8cc98:	4b14      	ldr	r3, [pc, #80]	; (8ccec <main+0x1250>)
   8cc9a:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8cc9c:	e01b      	b.n	8ccd6 <main+0x123a>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cc9e:	4b11      	ldr	r3, [pc, #68]	; (8cce4 <main+0x1248>)
   8cca0:	781b      	ldrb	r3, [r3, #0]
   8cca2:	4618      	mov	r0, r3
   8cca4:	4b14      	ldr	r3, [pc, #80]	; (8ccf8 <main+0x125c>)
   8cca6:	4798      	blx	r3
   8cca8:	4603      	mov	r3, r0
   8ccaa:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ccac:	7bfb      	ldrb	r3, [r7, #15]
   8ccae:	2b00      	cmp	r3, #0
   8ccb0:	d014      	beq.n	8ccdc <main+0x1240>
   8ccb2:	4b0e      	ldr	r3, [pc, #56]	; (8ccec <main+0x1250>)
   8ccb4:	4798      	blx	r3



						break;
   8ccb6:	e011      	b.n	8ccdc <main+0x1240>

						default: break;
   8ccb8:	bf00      	nop
   8ccba:	f000 bfd6 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}
							
						break;
   8ccbe:	bf00      	nop
   8ccc0:	f000 bfd3 	b.w	8dc6a <main+0x21ce>
							}
							else
							{
								// handle error
							}
						break;
   8ccc4:	bf00      	nop
   8ccc6:	f000 bfd0 	b.w	8dc6a <main+0x21ce>
							}
							else
							{
								// handle error
							}
						break;
   8ccca:	bf00      	nop
   8cccc:	f000 bfcd 	b.w	8dc6a <main+0x21ce>
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
						
						break;
   8ccd0:	bf00      	nop
   8ccd2:	f000 bfca 	b.w	8dc6a <main+0x21ce>
						}
						else
						{
							// handle error
						}
						break;
   8ccd6:	bf00      	nop
   8ccd8:	f000 bfc7 	b.w	8dc6a <main+0x21ce>
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);



						break;
   8ccdc:	bf00      	nop

						default: break;
					}
					break;
   8ccde:	f000 bfc4 	b.w	8dc6a <main+0x21ce>
   8cce2:	bf00      	nop
   8cce4:	200719d6 	.word	0x200719d6
   8cce8:	000a22c9 	.word	0x000a22c9
   8ccec:	00088e75 	.word	0x00088e75
   8ccf0:	20070574 	.word	0x20070574
   8ccf4:	00094281 	.word	0x00094281
   8ccf8:	0009e1d1 	.word	0x0009e1d1
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8ccfc:	4bd5      	ldr	r3, [pc, #852]	; (8d054 <main+0x15b8>)
   8ccfe:	781b      	ldrb	r3, [r3, #0]
   8cd00:	3b0a      	subs	r3, #10
   8cd02:	2b42      	cmp	r3, #66	; 0x42
   8cd04:	f200 80d4 	bhi.w	8ceb0 <main+0x1414>
   8cd08:	a201      	add	r2, pc, #4	; (adr r2, 8cd10 <main+0x1274>)
   8cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cd0e:	bf00      	nop
   8cd10:	0008ce1d 	.word	0x0008ce1d
   8cd14:	0008ce1d 	.word	0x0008ce1d
   8cd18:	0008ce1d 	.word	0x0008ce1d
   8cd1c:	0008ceb1 	.word	0x0008ceb1
   8cd20:	0008ceb1 	.word	0x0008ceb1
   8cd24:	0008ce37 	.word	0x0008ce37
   8cd28:	0008ceb1 	.word	0x0008ceb1
   8cd2c:	0008ce1d 	.word	0x0008ce1d
   8cd30:	0008ce1d 	.word	0x0008ce1d
   8cd34:	0008ce1d 	.word	0x0008ce1d
   8cd38:	0008ce1d 	.word	0x0008ce1d
   8cd3c:	0008ceb1 	.word	0x0008ceb1
   8cd40:	0008ce1d 	.word	0x0008ce1d
   8cd44:	0008ceb1 	.word	0x0008ceb1
   8cd48:	0008ceb1 	.word	0x0008ceb1
   8cd4c:	0008ceb1 	.word	0x0008ceb1
   8cd50:	0008ceb1 	.word	0x0008ceb1
   8cd54:	0008ceb1 	.word	0x0008ceb1
   8cd58:	0008ceb1 	.word	0x0008ceb1
   8cd5c:	0008ceb1 	.word	0x0008ceb1
   8cd60:	0008ceb1 	.word	0x0008ceb1
   8cd64:	0008ceb1 	.word	0x0008ceb1
   8cd68:	0008ceb1 	.word	0x0008ceb1
   8cd6c:	0008ceb1 	.word	0x0008ceb1
   8cd70:	0008ceb1 	.word	0x0008ceb1
   8cd74:	0008ceb1 	.word	0x0008ceb1
   8cd78:	0008ceb1 	.word	0x0008ceb1
   8cd7c:	0008ceb1 	.word	0x0008ceb1
   8cd80:	0008ce1d 	.word	0x0008ce1d
   8cd84:	0008ce1d 	.word	0x0008ce1d
   8cd88:	0008ce1d 	.word	0x0008ce1d
   8cd8c:	0008ceb1 	.word	0x0008ceb1
   8cd90:	0008ceb1 	.word	0x0008ceb1
   8cd94:	0008ceb1 	.word	0x0008ceb1
   8cd98:	0008ceb1 	.word	0x0008ceb1
   8cd9c:	0008ce1d 	.word	0x0008ce1d
   8cda0:	0008ce1d 	.word	0x0008ce1d
   8cda4:	0008ceb1 	.word	0x0008ceb1
   8cda8:	0008ceb1 	.word	0x0008ceb1
   8cdac:	0008ceb1 	.word	0x0008ceb1
   8cdb0:	0008ceb1 	.word	0x0008ceb1
   8cdb4:	0008ceb1 	.word	0x0008ceb1
   8cdb8:	0008ceb1 	.word	0x0008ceb1
   8cdbc:	0008ceb1 	.word	0x0008ceb1
   8cdc0:	0008ceb1 	.word	0x0008ceb1
   8cdc4:	0008ceb1 	.word	0x0008ceb1
   8cdc8:	0008ceb1 	.word	0x0008ceb1
   8cdcc:	0008ceb1 	.word	0x0008ceb1
   8cdd0:	0008ce1d 	.word	0x0008ce1d
   8cdd4:	0008ce1d 	.word	0x0008ce1d
   8cdd8:	0008ce1d 	.word	0x0008ce1d
   8cddc:	0008ce1d 	.word	0x0008ce1d
   8cde0:	0008ceb1 	.word	0x0008ceb1
   8cde4:	0008ceb1 	.word	0x0008ceb1
   8cde8:	0008ceb1 	.word	0x0008ceb1
   8cdec:	0008ceb1 	.word	0x0008ceb1
   8cdf0:	0008ceb1 	.word	0x0008ceb1
   8cdf4:	0008ceb1 	.word	0x0008ceb1
   8cdf8:	0008ceb1 	.word	0x0008ceb1
   8cdfc:	0008ceb1 	.word	0x0008ceb1
   8ce00:	0008ceb1 	.word	0x0008ceb1
   8ce04:	0008ceb1 	.word	0x0008ceb1
   8ce08:	0008ceb1 	.word	0x0008ceb1
   8ce0c:	0008ce67 	.word	0x0008ce67
   8ce10:	0008ceb1 	.word	0x0008ceb1
   8ce14:	0008ceb1 	.word	0x0008ceb1
   8ce18:	0008ce81 	.word	0x0008ce81
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce1c:	4b8d      	ldr	r3, [pc, #564]	; (8d054 <main+0x15b8>)
   8ce1e:	781b      	ldrb	r3, [r3, #0]
   8ce20:	4618      	mov	r0, r3
   8ce22:	4b8d      	ldr	r3, [pc, #564]	; (8d058 <main+0x15bc>)
   8ce24:	4798      	blx	r3
   8ce26:	4603      	mov	r3, r0
   8ce28:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce2a:	7bfb      	ldrb	r3, [r7, #15]
   8ce2c:	2b00      	cmp	r3, #0
   8ce2e:	d042      	beq.n	8ceb6 <main+0x141a>
   8ce30:	4b8a      	ldr	r3, [pc, #552]	; (8d05c <main+0x15c0>)
   8ce32:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8ce34:	e03f      	b.n	8ceb6 <main+0x141a>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce36:	4b87      	ldr	r3, [pc, #540]	; (8d054 <main+0x15b8>)
   8ce38:	781b      	ldrb	r3, [r3, #0]
   8ce3a:	4618      	mov	r0, r3
   8ce3c:	4b86      	ldr	r3, [pc, #536]	; (8d058 <main+0x15bc>)
   8ce3e:	4798      	blx	r3
   8ce40:	4603      	mov	r3, r0
   8ce42:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce44:	7bfb      	ldrb	r3, [r7, #15]
   8ce46:	2b00      	cmp	r3, #0
   8ce48:	d001      	beq.n	8ce4e <main+0x13b2>
   8ce4a:	4b84      	ldr	r3, [pc, #528]	; (8d05c <main+0x15c0>)
   8ce4c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce4e:	7bfb      	ldrb	r3, [r7, #15]
   8ce50:	2b00      	cmp	r3, #0
   8ce52:	d133      	bne.n	8cebc <main+0x1420>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8ce54:	4b82      	ldr	r3, [pc, #520]	; (8d060 <main+0x15c4>)
   8ce56:	220c      	movs	r2, #12
   8ce58:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
								ASSERT_ERROR(Cl_MacRetval);
   8ce5a:	7bfb      	ldrb	r3, [r7, #15]
   8ce5c:	2b00      	cmp	r3, #0
   8ce5e:	d02d      	beq.n	8cebc <main+0x1420>
   8ce60:	4b7e      	ldr	r3, [pc, #504]	; (8d05c <main+0x15c0>)
   8ce62:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8ce64:	e02a      	b.n	8cebc <main+0x1420>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce66:	4b7b      	ldr	r3, [pc, #492]	; (8d054 <main+0x15b8>)
   8ce68:	781b      	ldrb	r3, [r3, #0]
   8ce6a:	4618      	mov	r0, r3
   8ce6c:	4b7a      	ldr	r3, [pc, #488]	; (8d058 <main+0x15bc>)
   8ce6e:	4798      	blx	r3
   8ce70:	4603      	mov	r3, r0
   8ce72:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce74:	7bfb      	ldrb	r3, [r7, #15]
   8ce76:	2b00      	cmp	r3, #0
   8ce78:	d023      	beq.n	8cec2 <main+0x1426>
   8ce7a:	4b78      	ldr	r3, [pc, #480]	; (8d05c <main+0x15c0>)
   8ce7c:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8ce7e:	e020      	b.n	8cec2 <main+0x1426>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce80:	4b74      	ldr	r3, [pc, #464]	; (8d054 <main+0x15b8>)
   8ce82:	781b      	ldrb	r3, [r3, #0]
   8ce84:	4618      	mov	r0, r3
   8ce86:	4b74      	ldr	r3, [pc, #464]	; (8d058 <main+0x15bc>)
   8ce88:	4798      	blx	r3
   8ce8a:	4603      	mov	r3, r0
   8ce8c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce8e:	7bfb      	ldrb	r3, [r7, #15]
   8ce90:	2b00      	cmp	r3, #0
   8ce92:	d001      	beq.n	8ce98 <main+0x13fc>
   8ce94:	4b71      	ldr	r3, [pc, #452]	; (8d05c <main+0x15c0>)
   8ce96:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce98:	7bfb      	ldrb	r3, [r7, #15]
   8ce9a:	2b00      	cmp	r3, #0
   8ce9c:	d114      	bne.n	8cec8 <main+0x142c>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8ce9e:	4b70      	ldr	r3, [pc, #448]	; (8d060 <main+0x15c4>)
   8cea0:	220e      	movs	r2, #14
   8cea2:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cea4:	7bfb      	ldrb	r3, [r7, #15]
   8cea6:	2b00      	cmp	r3, #0
   8cea8:	d00e      	beq.n	8cec8 <main+0x142c>
   8ceaa:	4b6c      	ldr	r3, [pc, #432]	; (8d05c <main+0x15c0>)
   8ceac:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8ceae:	e00b      	b.n	8cec8 <main+0x142c>
					

						default: break;
   8ceb0:	bf00      	nop
   8ceb2:	f000 beda 	b.w	8dc6a <main+0x21ce>
						ASSERT_ERROR(Cl_MacRetval);
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8ceb6:	bf00      	nop
   8ceb8:	f000 bed7 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}

						break;
   8cebc:	bf00      	nop
   8cebe:	f000 bed4 	b.w	8dc6a <main+0x21ce>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8cec2:	bf00      	nop
   8cec4:	f000 bed1 	b.w	8dc6a <main+0x21ce>
							else
							{
								// handle error
							}

						break;
   8cec8:	bf00      	nop
					

						default: break;
					}
					break;
   8ceca:	f000 bece 	b.w	8dc6a <main+0x21ce>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8cece:	4b61      	ldr	r3, [pc, #388]	; (8d054 <main+0x15b8>)
   8ced0:	781b      	ldrb	r3, [r3, #0]
   8ced2:	2b07      	cmp	r3, #7
   8ced4:	d002      	beq.n	8cedc <main+0x1440>
   8ced6:	2b09      	cmp	r3, #9
   8ced8:	d003      	beq.n	8cee2 <main+0x1446>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8ceda:	e003      	b.n	8cee4 <main+0x1448>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8cedc:	bf00      	nop
   8cede:	f000 bec4 	b.w	8dc6a <main+0x21ce>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8cee2:	bf00      	nop
						default: break;
					}
					break;
   8cee4:	f000 bec1 	b.w	8dc6a <main+0x21ce>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8cee8:	4b5a      	ldr	r3, [pc, #360]	; (8d054 <main+0x15b8>)
   8ceea:	781b      	ldrb	r3, [r3, #0]
   8ceec:	3b0a      	subs	r3, #10
   8ceee:	2b4e      	cmp	r3, #78	; 0x4e
   8cef0:	f200 8111 	bhi.w	8d116 <main+0x167a>
   8cef4:	a201      	add	r2, pc, #4	; (adr r2, 8cefc <main+0x1460>)
   8cef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cefa:	bf00      	nop
   8cefc:	0008d039 	.word	0x0008d039
   8cf00:	0008d039 	.word	0x0008d039
   8cf04:	0008d039 	.word	0x0008d039
   8cf08:	0008d117 	.word	0x0008d117
   8cf0c:	0008d117 	.word	0x0008d117
   8cf10:	0008d117 	.word	0x0008d117
   8cf14:	0008d117 	.word	0x0008d117
   8cf18:	0008d117 	.word	0x0008d117
   8cf1c:	0008d117 	.word	0x0008d117
   8cf20:	0008d117 	.word	0x0008d117
   8cf24:	0008d117 	.word	0x0008d117
   8cf28:	0008d039 	.word	0x0008d039
   8cf2c:	0008d117 	.word	0x0008d117
   8cf30:	0008d065 	.word	0x0008d065
   8cf34:	0008d117 	.word	0x0008d117
   8cf38:	0008d117 	.word	0x0008d117
   8cf3c:	0008d039 	.word	0x0008d039
   8cf40:	0008d039 	.word	0x0008d039
   8cf44:	0008d039 	.word	0x0008d039
   8cf48:	0008d117 	.word	0x0008d117
   8cf4c:	0008d117 	.word	0x0008d117
   8cf50:	0008d117 	.word	0x0008d117
   8cf54:	0008d117 	.word	0x0008d117
   8cf58:	0008d039 	.word	0x0008d039
   8cf5c:	0008d117 	.word	0x0008d117
   8cf60:	0008d117 	.word	0x0008d117
   8cf64:	0008d117 	.word	0x0008d117
   8cf68:	0008d117 	.word	0x0008d117
   8cf6c:	0008d117 	.word	0x0008d117
   8cf70:	0008d039 	.word	0x0008d039
   8cf74:	0008d039 	.word	0x0008d039
   8cf78:	0008d117 	.word	0x0008d117
   8cf7c:	0008d117 	.word	0x0008d117
   8cf80:	0008d117 	.word	0x0008d117
   8cf84:	0008d117 	.word	0x0008d117
   8cf88:	0008d039 	.word	0x0008d039
   8cf8c:	0008d039 	.word	0x0008d039
   8cf90:	0008d117 	.word	0x0008d117
   8cf94:	0008d117 	.word	0x0008d117
   8cf98:	0008d117 	.word	0x0008d117
   8cf9c:	0008d117 	.word	0x0008d117
   8cfa0:	0008d117 	.word	0x0008d117
   8cfa4:	0008d117 	.word	0x0008d117
   8cfa8:	0008d117 	.word	0x0008d117
   8cfac:	0008d117 	.word	0x0008d117
   8cfb0:	0008d117 	.word	0x0008d117
   8cfb4:	0008d039 	.word	0x0008d039
   8cfb8:	0008d117 	.word	0x0008d117
   8cfbc:	0008d039 	.word	0x0008d039
   8cfc0:	0008d039 	.word	0x0008d039
   8cfc4:	0008d117 	.word	0x0008d117
   8cfc8:	0008d117 	.word	0x0008d117
   8cfcc:	0008d117 	.word	0x0008d117
   8cfd0:	0008d117 	.word	0x0008d117
   8cfd4:	0008d117 	.word	0x0008d117
   8cfd8:	0008d117 	.word	0x0008d117
   8cfdc:	0008d117 	.word	0x0008d117
   8cfe0:	0008d117 	.word	0x0008d117
   8cfe4:	0008d117 	.word	0x0008d117
   8cfe8:	0008d117 	.word	0x0008d117
   8cfec:	0008d117 	.word	0x0008d117
   8cff0:	0008d117 	.word	0x0008d117
   8cff4:	0008d117 	.word	0x0008d117
   8cff8:	0008d117 	.word	0x0008d117
   8cffc:	0008d117 	.word	0x0008d117
   8d000:	0008d117 	.word	0x0008d117
   8d004:	0008d117 	.word	0x0008d117
   8d008:	0008d117 	.word	0x0008d117
   8d00c:	0008d117 	.word	0x0008d117
   8d010:	0008d117 	.word	0x0008d117
   8d014:	0008d117 	.word	0x0008d117
   8d018:	0008d117 	.word	0x0008d117
   8d01c:	0008d117 	.word	0x0008d117
   8d020:	0008d117 	.word	0x0008d117
   8d024:	0008d117 	.word	0x0008d117
   8d028:	0008d039 	.word	0x0008d039
   8d02c:	0008d117 	.word	0x0008d117
   8d030:	0008d117 	.word	0x0008d117
   8d034:	0008d101 	.word	0x0008d101
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d038:	4b06      	ldr	r3, [pc, #24]	; (8d054 <main+0x15b8>)
   8d03a:	781b      	ldrb	r3, [r3, #0]
   8d03c:	4618      	mov	r0, r3
   8d03e:	4b06      	ldr	r3, [pc, #24]	; (8d058 <main+0x15bc>)
   8d040:	4798      	blx	r3
   8d042:	4603      	mov	r3, r0
   8d044:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d046:	7bfb      	ldrb	r3, [r7, #15]
   8d048:	2b00      	cmp	r3, #0
   8d04a:	d067      	beq.n	8d11c <main+0x1680>
   8d04c:	4b03      	ldr	r3, [pc, #12]	; (8d05c <main+0x15c0>)
   8d04e:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d050:	e064      	b.n	8d11c <main+0x1680>
   8d052:	bf00      	nop
   8d054:	200719d6 	.word	0x200719d6
   8d058:	0009e1d1 	.word	0x0009e1d1
   8d05c:	00088e75 	.word	0x00088e75
   8d060:	20070574 	.word	0x20070574
						//case EVT_CONSOLE_COMMAND_GET_DATA:
					//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
					//	ASSERT_ERROR(Cl_MacRetval);
					//	break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d064:	4bac      	ldr	r3, [pc, #688]	; (8d318 <main+0x187c>)
   8d066:	781b      	ldrb	r3, [r3, #0]
   8d068:	4618      	mov	r0, r3
   8d06a:	4bac      	ldr	r3, [pc, #688]	; (8d31c <main+0x1880>)
   8d06c:	4798      	blx	r3
   8d06e:	4603      	mov	r3, r0
   8d070:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d072:	7bfb      	ldrb	r3, [r7, #15]
   8d074:	2b00      	cmp	r3, #0
   8d076:	d001      	beq.n	8d07c <main+0x15e0>
   8d078:	4ba9      	ldr	r3, [pc, #676]	; (8d320 <main+0x1884>)
   8d07a:	4798      	blx	r3
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d07c:	7bfb      	ldrb	r3, [r7, #15]
   8d07e:	2b00      	cmp	r3, #0
   8d080:	d002      	beq.n	8d088 <main+0x15ec>
   8d082:	7bfb      	ldrb	r3, [r7, #15]
   8d084:	2b03      	cmp	r3, #3
   8d086:	d10b      	bne.n	8d0a0 <main+0x1604>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d088:	4ba3      	ldr	r3, [pc, #652]	; (8d318 <main+0x187c>)
   8d08a:	781b      	ldrb	r3, [r3, #0]
   8d08c:	4618      	mov	r0, r3
   8d08e:	4ba5      	ldr	r3, [pc, #660]	; (8d324 <main+0x1888>)
   8d090:	4798      	blx	r3
   8d092:	4603      	mov	r3, r0
   8d094:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d096:	7bfb      	ldrb	r3, [r7, #15]
   8d098:	2b00      	cmp	r3, #0
   8d09a:	d001      	beq.n	8d0a0 <main+0x1604>
   8d09c:	4ba0      	ldr	r3, [pc, #640]	; (8d320 <main+0x1884>)
   8d09e:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d0a0:	7bfb      	ldrb	r3, [r7, #15]
   8d0a2:	2b00      	cmp	r3, #0
   8d0a4:	d002      	beq.n	8d0ac <main+0x1610>
   8d0a6:	7bfb      	ldrb	r3, [r7, #15]
   8d0a8:	2b03      	cmp	r3, #3
   8d0aa:	d10b      	bne.n	8d0c4 <main+0x1628>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d0ac:	4b9a      	ldr	r3, [pc, #616]	; (8d318 <main+0x187c>)
   8d0ae:	781b      	ldrb	r3, [r3, #0]
   8d0b0:	4618      	mov	r0, r3
   8d0b2:	4b9d      	ldr	r3, [pc, #628]	; (8d328 <main+0x188c>)
   8d0b4:	4798      	blx	r3
   8d0b6:	4603      	mov	r3, r0
   8d0b8:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d0ba:	7bfb      	ldrb	r3, [r7, #15]
   8d0bc:	2b00      	cmp	r3, #0
   8d0be:	d001      	beq.n	8d0c4 <main+0x1628>
   8d0c0:	4b97      	ldr	r3, [pc, #604]	; (8d320 <main+0x1884>)
   8d0c2:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d0c4:	7bfb      	ldrb	r3, [r7, #15]
   8d0c6:	2b00      	cmp	r3, #0
   8d0c8:	d002      	beq.n	8d0d0 <main+0x1634>
   8d0ca:	7bfb      	ldrb	r3, [r7, #15]
   8d0cc:	2b03      	cmp	r3, #3
   8d0ce:	d10b      	bne.n	8d0e8 <main+0x164c>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d0d0:	4b91      	ldr	r3, [pc, #580]	; (8d318 <main+0x187c>)
   8d0d2:	781b      	ldrb	r3, [r3, #0]
   8d0d4:	4618      	mov	r0, r3
   8d0d6:	4b95      	ldr	r3, [pc, #596]	; (8d32c <main+0x1890>)
   8d0d8:	4798      	blx	r3
   8d0da:	4603      	mov	r3, r0
   8d0dc:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d0de:	7bfb      	ldrb	r3, [r7, #15]
   8d0e0:	2b00      	cmp	r3, #0
   8d0e2:	d001      	beq.n	8d0e8 <main+0x164c>
   8d0e4:	4b8e      	ldr	r3, [pc, #568]	; (8d320 <main+0x1884>)
   8d0e6:	4798      	blx	r3
							else
							{
								//handle error
							}

						if(Cl_MacRetval == CL_OK)
   8d0e8:	7bfb      	ldrb	r3, [r7, #15]
   8d0ea:	2b00      	cmp	r3, #0
   8d0ec:	d119      	bne.n	8d122 <main+0x1686>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d0ee:	4b90      	ldr	r3, [pc, #576]	; (8d330 <main+0x1894>)
   8d0f0:	220f      	movs	r2, #15
   8d0f2:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d0f4:	7bfb      	ldrb	r3, [r7, #15]
   8d0f6:	2b00      	cmp	r3, #0
   8d0f8:	d013      	beq.n	8d122 <main+0x1686>
   8d0fa:	4b89      	ldr	r3, [pc, #548]	; (8d320 <main+0x1884>)
   8d0fc:	4798      	blx	r3
						}
						break;
   8d0fe:	e010      	b.n	8d122 <main+0x1686>
						
						// add case for isouf start event
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d100:	4b8b      	ldr	r3, [pc, #556]	; (8d330 <main+0x1894>)
   8d102:	2214      	movs	r2, #20
   8d104:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d106:	4b84      	ldr	r3, [pc, #528]	; (8d318 <main+0x187c>)
   8d108:	781b      	ldrb	r3, [r3, #0]
   8d10a:	4618      	mov	r0, r3
   8d10c:	4b89      	ldr	r3, [pc, #548]	; (8d334 <main+0x1898>)
   8d10e:	4798      	blx	r3
   8d110:	4603      	mov	r3, r0
   8d112:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d114:	e006      	b.n	8d124 <main+0x1688>
						
						default: break;
   8d116:	bf00      	nop
   8d118:	f000 bda7 	b.w	8dc6a <main+0x21ce>
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d11c:	bf00      	nop
   8d11e:	f000 bda4 	b.w	8dc6a <main+0x21ce>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d122:	bf00      	nop
						
						break;
						
						default: break;
					}
					break;
   8d124:	f000 bda1 	b.w	8dc6a <main+0x21ce>
					
					case MAC_ISOUF:
					
					switch(Cl_MacEvent){
   8d128:	4b7b      	ldr	r3, [pc, #492]	; (8d318 <main+0x187c>)
   8d12a:	781b      	ldrb	r3, [r3, #0]
   8d12c:	3b07      	subs	r3, #7
   8d12e:	2b53      	cmp	r3, #83	; 0x53
   8d130:	f200 859a 	bhi.w	8dc68 <main+0x21cc>
   8d134:	a201      	add	r2, pc, #4	; (adr r2, 8d13c <main+0x16a0>)
   8d136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d13a:	bf00      	nop
   8d13c:	0008d3d9 	.word	0x0008d3d9
   8d140:	0008dc69 	.word	0x0008dc69
   8d144:	0008dc69 	.word	0x0008dc69
   8d148:	0008d29d 	.word	0x0008d29d
   8d14c:	0008d29d 	.word	0x0008d29d
   8d150:	0008d29d 	.word	0x0008d29d
   8d154:	0008dc69 	.word	0x0008dc69
   8d158:	0008dc69 	.word	0x0008dc69
   8d15c:	0008dc69 	.word	0x0008dc69
   8d160:	0008dc69 	.word	0x0008dc69
   8d164:	0008dc69 	.word	0x0008dc69
   8d168:	0008dc69 	.word	0x0008dc69
   8d16c:	0008dc69 	.word	0x0008dc69
   8d170:	0008dc69 	.word	0x0008dc69
   8d174:	0008d29d 	.word	0x0008d29d
   8d178:	0008dc69 	.word	0x0008dc69
   8d17c:	0008d33d 	.word	0x0008d33d
   8d180:	0008dc69 	.word	0x0008dc69
   8d184:	0008dc69 	.word	0x0008dc69
   8d188:	0008d29d 	.word	0x0008d29d
   8d18c:	0008d29d 	.word	0x0008d29d
   8d190:	0008dc69 	.word	0x0008dc69
   8d194:	0008dc69 	.word	0x0008dc69
   8d198:	0008dc69 	.word	0x0008dc69
   8d19c:	0008dc69 	.word	0x0008dc69
   8d1a0:	0008dc69 	.word	0x0008dc69
   8d1a4:	0008dc69 	.word	0x0008dc69
   8d1a8:	0008dc69 	.word	0x0008dc69
   8d1ac:	0008dc69 	.word	0x0008dc69
   8d1b0:	0008dc69 	.word	0x0008dc69
   8d1b4:	0008dc69 	.word	0x0008dc69
   8d1b8:	0008dc69 	.word	0x0008dc69
   8d1bc:	0008d29d 	.word	0x0008d29d
   8d1c0:	0008d29d 	.word	0x0008d29d
   8d1c4:	0008d29d 	.word	0x0008d29d
   8d1c8:	0008dc69 	.word	0x0008dc69
   8d1cc:	0008dc69 	.word	0x0008dc69
   8d1d0:	0008dc69 	.word	0x0008dc69
   8d1d4:	0008d29d 	.word	0x0008d29d
   8d1d8:	0008d29d 	.word	0x0008d29d
   8d1dc:	0008dc69 	.word	0x0008dc69
   8d1e0:	0008dc69 	.word	0x0008dc69
   8d1e4:	0008dc69 	.word	0x0008dc69
   8d1e8:	0008dc69 	.word	0x0008dc69
   8d1ec:	0008dc69 	.word	0x0008dc69
   8d1f0:	0008dc69 	.word	0x0008dc69
   8d1f4:	0008dc69 	.word	0x0008dc69
   8d1f8:	0008dc69 	.word	0x0008dc69
   8d1fc:	0008dc69 	.word	0x0008dc69
   8d200:	0008d29d 	.word	0x0008d29d
   8d204:	0008dc69 	.word	0x0008dc69
   8d208:	0008d29d 	.word	0x0008d29d
   8d20c:	0008d29d 	.word	0x0008d29d
   8d210:	0008d29d 	.word	0x0008d29d
   8d214:	0008d29d 	.word	0x0008d29d
   8d218:	0008dc69 	.word	0x0008dc69
   8d21c:	0008dc69 	.word	0x0008dc69
   8d220:	0008dc69 	.word	0x0008dc69
   8d224:	0008dc69 	.word	0x0008dc69
   8d228:	0008dc69 	.word	0x0008dc69
   8d22c:	0008dc69 	.word	0x0008dc69
   8d230:	0008dc69 	.word	0x0008dc69
   8d234:	0008dc69 	.word	0x0008dc69
   8d238:	0008dc69 	.word	0x0008dc69
   8d23c:	0008dc69 	.word	0x0008dc69
   8d240:	0008dc69 	.word	0x0008dc69
   8d244:	0008dc69 	.word	0x0008dc69
   8d248:	0008dc69 	.word	0x0008dc69
   8d24c:	0008dc69 	.word	0x0008dc69
   8d250:	0008dc69 	.word	0x0008dc69
   8d254:	0008dc69 	.word	0x0008dc69
   8d258:	0008dc69 	.word	0x0008dc69
   8d25c:	0008dc69 	.word	0x0008dc69
   8d260:	0008dc69 	.word	0x0008dc69
   8d264:	0008dc69 	.word	0x0008dc69
   8d268:	0008dc69 	.word	0x0008dc69
   8d26c:	0008dc69 	.word	0x0008dc69
   8d270:	0008dc69 	.word	0x0008dc69
   8d274:	0008dc69 	.word	0x0008dc69
   8d278:	0008dc69 	.word	0x0008dc69
   8d27c:	0008dc69 	.word	0x0008dc69
   8d280:	0008d28d 	.word	0x0008d28d
   8d284:	0008d2fb 	.word	0x0008d2fb
   8d288:	0008d2bd 	.word	0x0008d2bd
					
					case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							//Cl_MacState = MAC_ISOUF;
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d28c:	4b22      	ldr	r3, [pc, #136]	; (8d318 <main+0x187c>)
   8d28e:	781b      	ldrb	r3, [r3, #0]
   8d290:	4618      	mov	r0, r3
   8d292:	4b28      	ldr	r3, [pc, #160]	; (8d334 <main+0x1898>)
   8d294:	4798      	blx	r3
   8d296:	4603      	mov	r3, r0
   8d298:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8d29a:	e0d1      	b.n	8d440 <main+0x19a4>
						case EVT_ALERT_TRIGGERED:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d29c:	4b1e      	ldr	r3, [pc, #120]	; (8d318 <main+0x187c>)
   8d29e:	781b      	ldrb	r3, [r3, #0]
   8d2a0:	4618      	mov	r0, r3
   8d2a2:	4b24      	ldr	r3, [pc, #144]	; (8d334 <main+0x1898>)
   8d2a4:	4798      	blx	r3
   8d2a6:	4603      	mov	r3, r0
   8d2a8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d2aa:	7bfb      	ldrb	r3, [r7, #15]
   8d2ac:	2b00      	cmp	r3, #0
   8d2ae:	d001      	beq.n	8d2b4 <main+0x1818>
   8d2b0:	4b1b      	ldr	r3, [pc, #108]	; (8d320 <main+0x1884>)
   8d2b2:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d2b4:	4b18      	ldr	r3, [pc, #96]	; (8d318 <main+0x187c>)
   8d2b6:	2200      	movs	r2, #0
   8d2b8:	701a      	strb	r2, [r3, #0]
						break;
   8d2ba:	e0c1      	b.n	8d440 <main+0x19a4>
						
						case MACREQ_ISOUF_COMPLETED:
						
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d2bc:	4b16      	ldr	r3, [pc, #88]	; (8d318 <main+0x187c>)
   8d2be:	781b      	ldrb	r3, [r3, #0]
   8d2c0:	4618      	mov	r0, r3
   8d2c2:	4b1c      	ldr	r3, [pc, #112]	; (8d334 <main+0x1898>)
   8d2c4:	4798      	blx	r3
   8d2c6:	4603      	mov	r3, r0
   8d2c8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d2ca:	7bfb      	ldrb	r3, [r7, #15]
   8d2cc:	2b00      	cmp	r3, #0
   8d2ce:	d001      	beq.n	8d2d4 <main+0x1838>
   8d2d0:	4b13      	ldr	r3, [pc, #76]	; (8d320 <main+0x1884>)
   8d2d2:	4798      	blx	r3
						if( Cl_MacRetval == CL_OK)
   8d2d4:	7bfb      	ldrb	r3, [r7, #15]
   8d2d6:	2b00      	cmp	r3, #0
   8d2d8:	d10b      	bne.n	8d2f2 <main+0x1856>
						{
							
						//	Cl_MacRetval = Cl_rinse_init();
						//	Cl_MacRetval = Cl_stby_init();
						//	Cl_MacRetval = Cl_dprep_init();
							Cl_MacRetval =Cl_isouf_init();
   8d2da:	4b17      	ldr	r3, [pc, #92]	; (8d338 <main+0x189c>)
   8d2dc:	4798      	blx	r3
   8d2de:	4603      	mov	r3, r0
   8d2e0:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacState = MAC_POST_ISOUF_STANDBY;
   8d2e2:	4b13      	ldr	r3, [pc, #76]	; (8d330 <main+0x1894>)
   8d2e4:	2215      	movs	r2, #21
   8d2e6:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d2e8:	7bfb      	ldrb	r3, [r7, #15]
   8d2ea:	2b00      	cmp	r3, #0
   8d2ec:	d001      	beq.n	8d2f2 <main+0x1856>
   8d2ee:	4b0c      	ldr	r3, [pc, #48]	; (8d320 <main+0x1884>)
   8d2f0:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d2f2:	4b09      	ldr	r3, [pc, #36]	; (8d318 <main+0x187c>)
   8d2f4:	2200      	movs	r2, #0
   8d2f6:	701a      	strb	r2, [r3, #0]
						break;
   8d2f8:	e0a2      	b.n	8d440 <main+0x19a4>
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d2fa:	4b07      	ldr	r3, [pc, #28]	; (8d318 <main+0x187c>)
   8d2fc:	781b      	ldrb	r3, [r3, #0]
   8d2fe:	4618      	mov	r0, r3
   8d300:	4b0c      	ldr	r3, [pc, #48]	; (8d334 <main+0x1898>)
   8d302:	4798      	blx	r3
   8d304:	4603      	mov	r3, r0
   8d306:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d308:	7bfb      	ldrb	r3, [r7, #15]
   8d30a:	2b00      	cmp	r3, #0
   8d30c:	f000 8094 	beq.w	8d438 <main+0x199c>
   8d310:	4b03      	ldr	r3, [pc, #12]	; (8d320 <main+0x1884>)
   8d312:	4798      	blx	r3
						break;
   8d314:	e090      	b.n	8d438 <main+0x199c>
   8d316:	bf00      	nop
   8d318:	200719d6 	.word	0x200719d6
   8d31c:	000a4ad1 	.word	0x000a4ad1
   8d320:	00088e75 	.word	0x00088e75
   8d324:	000a22c9 	.word	0x000a22c9
   8d328:	0009e1d1 	.word	0x0009e1d1
   8d32c:	000854b5 	.word	0x000854b5
   8d330:	20070574 	.word	0x20070574
   8d334:	00094281 	.word	0x00094281
   8d338:	00095b51 	.word	0x00095b51
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d33c:	4ba0      	ldr	r3, [pc, #640]	; (8d5c0 <main+0x1b24>)
   8d33e:	781b      	ldrb	r3, [r3, #0]
   8d340:	4618      	mov	r0, r3
   8d342:	4ba0      	ldr	r3, [pc, #640]	; (8d5c4 <main+0x1b28>)
   8d344:	4798      	blx	r3
   8d346:	4603      	mov	r3, r0
   8d348:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d34a:	7bfb      	ldrb	r3, [r7, #15]
   8d34c:	2b00      	cmp	r3, #0
   8d34e:	d001      	beq.n	8d354 <main+0x18b8>
   8d350:	4b9d      	ldr	r3, [pc, #628]	; (8d5c8 <main+0x1b2c>)
   8d352:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d354:	7bfb      	ldrb	r3, [r7, #15]
   8d356:	2b00      	cmp	r3, #0
   8d358:	d002      	beq.n	8d360 <main+0x18c4>
   8d35a:	7bfb      	ldrb	r3, [r7, #15]
   8d35c:	2b03      	cmp	r3, #3
   8d35e:	d10b      	bne.n	8d378 <main+0x18dc>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d360:	4b97      	ldr	r3, [pc, #604]	; (8d5c0 <main+0x1b24>)
   8d362:	781b      	ldrb	r3, [r3, #0]
   8d364:	4618      	mov	r0, r3
   8d366:	4b99      	ldr	r3, [pc, #612]	; (8d5cc <main+0x1b30>)
   8d368:	4798      	blx	r3
   8d36a:	4603      	mov	r3, r0
   8d36c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d36e:	7bfb      	ldrb	r3, [r7, #15]
   8d370:	2b00      	cmp	r3, #0
   8d372:	d001      	beq.n	8d378 <main+0x18dc>
   8d374:	4b94      	ldr	r3, [pc, #592]	; (8d5c8 <main+0x1b2c>)
   8d376:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d378:	7bfb      	ldrb	r3, [r7, #15]
   8d37a:	2b00      	cmp	r3, #0
   8d37c:	d002      	beq.n	8d384 <main+0x18e8>
   8d37e:	7bfb      	ldrb	r3, [r7, #15]
   8d380:	2b03      	cmp	r3, #3
   8d382:	d10b      	bne.n	8d39c <main+0x1900>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d384:	4b8e      	ldr	r3, [pc, #568]	; (8d5c0 <main+0x1b24>)
   8d386:	781b      	ldrb	r3, [r3, #0]
   8d388:	4618      	mov	r0, r3
   8d38a:	4b91      	ldr	r3, [pc, #580]	; (8d5d0 <main+0x1b34>)
   8d38c:	4798      	blx	r3
   8d38e:	4603      	mov	r3, r0
   8d390:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d392:	7bfb      	ldrb	r3, [r7, #15]
   8d394:	2b00      	cmp	r3, #0
   8d396:	d001      	beq.n	8d39c <main+0x1900>
   8d398:	4b8b      	ldr	r3, [pc, #556]	; (8d5c8 <main+0x1b2c>)
   8d39a:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d39c:	7bfb      	ldrb	r3, [r7, #15]
   8d39e:	2b00      	cmp	r3, #0
   8d3a0:	d002      	beq.n	8d3a8 <main+0x190c>
   8d3a2:	7bfb      	ldrb	r3, [r7, #15]
   8d3a4:	2b03      	cmp	r3, #3
   8d3a6:	d10b      	bne.n	8d3c0 <main+0x1924>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d3a8:	4b85      	ldr	r3, [pc, #532]	; (8d5c0 <main+0x1b24>)
   8d3aa:	781b      	ldrb	r3, [r3, #0]
   8d3ac:	4618      	mov	r0, r3
   8d3ae:	4b89      	ldr	r3, [pc, #548]	; (8d5d4 <main+0x1b38>)
   8d3b0:	4798      	blx	r3
   8d3b2:	4603      	mov	r3, r0
   8d3b4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d3b6:	7bfb      	ldrb	r3, [r7, #15]
   8d3b8:	2b00      	cmp	r3, #0
   8d3ba:	d001      	beq.n	8d3c0 <main+0x1924>
   8d3bc:	4b82      	ldr	r3, [pc, #520]	; (8d5c8 <main+0x1b2c>)
   8d3be:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d3c0:	7bfb      	ldrb	r3, [r7, #15]
   8d3c2:	2b00      	cmp	r3, #0
   8d3c4:	d13b      	bne.n	8d43e <main+0x19a2>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d3c6:	4b84      	ldr	r3, [pc, #528]	; (8d5d8 <main+0x1b3c>)
   8d3c8:	220f      	movs	r2, #15
   8d3ca:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d3cc:	7bfb      	ldrb	r3, [r7, #15]
   8d3ce:	2b00      	cmp	r3, #0
   8d3d0:	d035      	beq.n	8d43e <main+0x19a2>
   8d3d2:	4b7d      	ldr	r3, [pc, #500]	; (8d5c8 <main+0x1b2c>)
   8d3d4:	4798      	blx	r3
						}
						break;
   8d3d6:	e032      	b.n	8d43e <main+0x19a2>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						loopcountinsec = 0;
   8d3d8:	4b80      	ldr	r3, [pc, #512]	; (8d5dc <main+0x1b40>)
   8d3da:	2200      	movs	r2, #0
   8d3dc:	601a      	str	r2, [r3, #0]
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d3de:	4b78      	ldr	r3, [pc, #480]	; (8d5c0 <main+0x1b24>)
   8d3e0:	781b      	ldrb	r3, [r3, #0]
   8d3e2:	4618      	mov	r0, r3
   8d3e4:	4b77      	ldr	r3, [pc, #476]	; (8d5c4 <main+0x1b28>)
   8d3e6:	4798      	blx	r3
   8d3e8:	4603      	mov	r3, r0
   8d3ea:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d3ec:	7bfb      	ldrb	r3, [r7, #15]
   8d3ee:	2b00      	cmp	r3, #0
   8d3f0:	d001      	beq.n	8d3f6 <main+0x195a>
   8d3f2:	4b75      	ldr	r3, [pc, #468]	; (8d5c8 <main+0x1b2c>)
   8d3f4:	4798      	blx	r3

						if(Cl_MacRetval == CL_OK)
   8d3f6:	7bfb      	ldrb	r3, [r7, #15]
   8d3f8:	2b00      	cmp	r3, #0
   8d3fa:	d10e      	bne.n	8d41a <main+0x197e>
						{
							
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d3fc:	4b70      	ldr	r3, [pc, #448]	; (8d5c0 <main+0x1b24>)
   8d3fe:	781b      	ldrb	r3, [r3, #0]
   8d400:	4618      	mov	r0, r3
   8d402:	4b72      	ldr	r3, [pc, #456]	; (8d5cc <main+0x1b30>)
   8d404:	4798      	blx	r3
   8d406:	4603      	mov	r3, r0
   8d408:	73fb      	strb	r3, [r7, #15]
							if(Cl_MacRetval != CL_REJECTED)
   8d40a:	7bfb      	ldrb	r3, [r7, #15]
   8d40c:	2b03      	cmp	r3, #3
   8d40e:	d004      	beq.n	8d41a <main+0x197e>
							{
								ASSERT_ERROR(Cl_MacRetval);
   8d410:	7bfb      	ldrb	r3, [r7, #15]
   8d412:	2b00      	cmp	r3, #0
   8d414:	d001      	beq.n	8d41a <main+0x197e>
   8d416:	4b6c      	ldr	r3, [pc, #432]	; (8d5c8 <main+0x1b2c>)
   8d418:	4798      	blx	r3
							}
							
						}
						if( Cl_MacRetval == CL_OK)
   8d41a:	7bfb      	ldrb	r3, [r7, #15]
   8d41c:	2b00      	cmp	r3, #0
   8d41e:	d107      	bne.n	8d430 <main+0x1994>
						{
							Cl_MacState = MAC_RINSE;
   8d420:	4b6d      	ldr	r3, [pc, #436]	; (8d5d8 <main+0x1b3c>)
   8d422:	2207      	movs	r2, #7
   8d424:	701a      	strb	r2, [r3, #0]
						//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d426:	7bfb      	ldrb	r3, [r7, #15]
   8d428:	2b00      	cmp	r3, #0
   8d42a:	d001      	beq.n	8d430 <main+0x1994>
   8d42c:	4b66      	ldr	r3, [pc, #408]	; (8d5c8 <main+0x1b2c>)
   8d42e:	4798      	blx	r3
						}
						if( Cl_MacRetval != CL_OK)
						{
							// Handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d430:	4b63      	ldr	r3, [pc, #396]	; (8d5c0 <main+0x1b24>)
   8d432:	2200      	movs	r2, #0
   8d434:	701a      	strb	r2, [r3, #0]
						break;
   8d436:	e003      	b.n	8d440 <main+0x19a4>
						break;
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8d438:	bf00      	nop
   8d43a:	f000 bc15 	b.w	8dc68 <main+0x21cc>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d43e:	bf00      	nop
						break;

						
					}
					
					break;
   8d440:	f000 bc12 	b.w	8dc68 <main+0x21cc>
					
					case MAC_POST_ISOUF_STANDBY:
					
					switch(Cl_MacEvent){
   8d444:	4b5e      	ldr	r3, [pc, #376]	; (8d5c0 <main+0x1b24>)
   8d446:	781b      	ldrb	r3, [r3, #0]
   8d448:	3b07      	subs	r3, #7
   8d44a:	2b51      	cmp	r3, #81	; 0x51
   8d44c:	f200 813d 	bhi.w	8d6ca <main+0x1c2e>
   8d450:	a201      	add	r2, pc, #4	; (adr r2, 8d458 <main+0x19bc>)
   8d452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d456:	bf00      	nop
   8d458:	0008d681 	.word	0x0008d681
   8d45c:	0008d6cb 	.word	0x0008d6cb
   8d460:	0008d6cb 	.word	0x0008d6cb
   8d464:	0008d5a1 	.word	0x0008d5a1
   8d468:	0008d5a1 	.word	0x0008d5a1
   8d46c:	0008d5a1 	.word	0x0008d5a1
   8d470:	0008d6cb 	.word	0x0008d6cb
   8d474:	0008d6cb 	.word	0x0008d6cb
   8d478:	0008d6cb 	.word	0x0008d6cb
   8d47c:	0008d6cb 	.word	0x0008d6cb
   8d480:	0008d6cb 	.word	0x0008d6cb
   8d484:	0008d6cb 	.word	0x0008d6cb
   8d488:	0008d6cb 	.word	0x0008d6cb
   8d48c:	0008d6cb 	.word	0x0008d6cb
   8d490:	0008d5a1 	.word	0x0008d5a1
   8d494:	0008d6cb 	.word	0x0008d6cb
   8d498:	0008d5e5 	.word	0x0008d5e5
   8d49c:	0008d6cb 	.word	0x0008d6cb
   8d4a0:	0008d6cb 	.word	0x0008d6cb
   8d4a4:	0008d6cb 	.word	0x0008d6cb
   8d4a8:	0008d6cb 	.word	0x0008d6cb
   8d4ac:	0008d6cb 	.word	0x0008d6cb
   8d4b0:	0008d6cb 	.word	0x0008d6cb
   8d4b4:	0008d6cb 	.word	0x0008d6cb
   8d4b8:	0008d6cb 	.word	0x0008d6cb
   8d4bc:	0008d6cb 	.word	0x0008d6cb
   8d4c0:	0008d6cb 	.word	0x0008d6cb
   8d4c4:	0008d6cb 	.word	0x0008d6cb
   8d4c8:	0008d6cb 	.word	0x0008d6cb
   8d4cc:	0008d6cb 	.word	0x0008d6cb
   8d4d0:	0008d6cb 	.word	0x0008d6cb
   8d4d4:	0008d6cb 	.word	0x0008d6cb
   8d4d8:	0008d5a1 	.word	0x0008d5a1
   8d4dc:	0008d5a1 	.word	0x0008d5a1
   8d4e0:	0008d5a1 	.word	0x0008d5a1
   8d4e4:	0008d6cb 	.word	0x0008d6cb
   8d4e8:	0008d6cb 	.word	0x0008d6cb
   8d4ec:	0008d6cb 	.word	0x0008d6cb
   8d4f0:	0008d5a1 	.word	0x0008d5a1
   8d4f4:	0008d5a1 	.word	0x0008d5a1
   8d4f8:	0008d6cb 	.word	0x0008d6cb
   8d4fc:	0008d6cb 	.word	0x0008d6cb
   8d500:	0008d6cb 	.word	0x0008d6cb
   8d504:	0008d6cb 	.word	0x0008d6cb
   8d508:	0008d6cb 	.word	0x0008d6cb
   8d50c:	0008d6cb 	.word	0x0008d6cb
   8d510:	0008d6cb 	.word	0x0008d6cb
   8d514:	0008d6cb 	.word	0x0008d6cb
   8d518:	0008d6cb 	.word	0x0008d6cb
   8d51c:	0008d5a1 	.word	0x0008d5a1
   8d520:	0008d6cb 	.word	0x0008d6cb
   8d524:	0008d5a1 	.word	0x0008d5a1
   8d528:	0008d5a1 	.word	0x0008d5a1
   8d52c:	0008d5a1 	.word	0x0008d5a1
   8d530:	0008d5a1 	.word	0x0008d5a1
   8d534:	0008d6cb 	.word	0x0008d6cb
   8d538:	0008d6cb 	.word	0x0008d6cb
   8d53c:	0008d6cb 	.word	0x0008d6cb
   8d540:	0008d6cb 	.word	0x0008d6cb
   8d544:	0008d6cb 	.word	0x0008d6cb
   8d548:	0008d6cb 	.word	0x0008d6cb
   8d54c:	0008d6cb 	.word	0x0008d6cb
   8d550:	0008d6cb 	.word	0x0008d6cb
   8d554:	0008d6cb 	.word	0x0008d6cb
   8d558:	0008d6cb 	.word	0x0008d6cb
   8d55c:	0008d6cb 	.word	0x0008d6cb
   8d560:	0008d6cb 	.word	0x0008d6cb
   8d564:	0008d6cb 	.word	0x0008d6cb
   8d568:	0008d6cb 	.word	0x0008d6cb
   8d56c:	0008d6cb 	.word	0x0008d6cb
   8d570:	0008d6cb 	.word	0x0008d6cb
   8d574:	0008d6cb 	.word	0x0008d6cb
   8d578:	0008d6cb 	.word	0x0008d6cb
   8d57c:	0008d6cb 	.word	0x0008d6cb
   8d580:	0008d6cb 	.word	0x0008d6cb
   8d584:	0008d6cb 	.word	0x0008d6cb
   8d588:	0008d6cb 	.word	0x0008d6cb
   8d58c:	0008d6cb 	.word	0x0008d6cb
   8d590:	0008d6cb 	.word	0x0008d6cb
   8d594:	0008d6cb 	.word	0x0008d6cb
   8d598:	0008d6cb 	.word	0x0008d6cb
   8d59c:	0008d6b5 	.word	0x0008d6b5
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d5a0:	4b07      	ldr	r3, [pc, #28]	; (8d5c0 <main+0x1b24>)
   8d5a2:	781b      	ldrb	r3, [r3, #0]
   8d5a4:	4618      	mov	r0, r3
   8d5a6:	4b0e      	ldr	r3, [pc, #56]	; (8d5e0 <main+0x1b44>)
   8d5a8:	4798      	blx	r3
   8d5aa:	4603      	mov	r3, r0
   8d5ac:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d5ae:	7bfb      	ldrb	r3, [r7, #15]
   8d5b0:	2b00      	cmp	r3, #0
   8d5b2:	d001      	beq.n	8d5b8 <main+0x1b1c>
   8d5b4:	4b04      	ldr	r3, [pc, #16]	; (8d5c8 <main+0x1b2c>)
   8d5b6:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d5b8:	4b01      	ldr	r3, [pc, #4]	; (8d5c0 <main+0x1b24>)
   8d5ba:	2200      	movs	r2, #0
   8d5bc:	701a      	strb	r2, [r3, #0]
						break;
   8d5be:	e089      	b.n	8d6d4 <main+0x1c38>
   8d5c0:	200719d6 	.word	0x200719d6
   8d5c4:	000a4ad1 	.word	0x000a4ad1
   8d5c8:	00088e75 	.word	0x00088e75
   8d5cc:	000a22c9 	.word	0x000a22c9
   8d5d0:	0009e1d1 	.word	0x0009e1d1
   8d5d4:	000854b5 	.word	0x000854b5
   8d5d8:	20070574 	.word	0x20070574
   8d5dc:	200719dc 	.word	0x200719dc
   8d5e0:	00094281 	.word	0x00094281
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d5e4:	4bac      	ldr	r3, [pc, #688]	; (8d898 <main+0x1dfc>)
   8d5e6:	781b      	ldrb	r3, [r3, #0]
   8d5e8:	4618      	mov	r0, r3
   8d5ea:	4bac      	ldr	r3, [pc, #688]	; (8d89c <main+0x1e00>)
   8d5ec:	4798      	blx	r3
   8d5ee:	4603      	mov	r3, r0
   8d5f0:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d5f2:	7bfb      	ldrb	r3, [r7, #15]
   8d5f4:	2b00      	cmp	r3, #0
   8d5f6:	d001      	beq.n	8d5fc <main+0x1b60>
   8d5f8:	4ba9      	ldr	r3, [pc, #676]	; (8d8a0 <main+0x1e04>)
   8d5fa:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d5fc:	7bfb      	ldrb	r3, [r7, #15]
   8d5fe:	2b00      	cmp	r3, #0
   8d600:	d002      	beq.n	8d608 <main+0x1b6c>
   8d602:	7bfb      	ldrb	r3, [r7, #15]
   8d604:	2b03      	cmp	r3, #3
   8d606:	d10b      	bne.n	8d620 <main+0x1b84>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d608:	4ba3      	ldr	r3, [pc, #652]	; (8d898 <main+0x1dfc>)
   8d60a:	781b      	ldrb	r3, [r3, #0]
   8d60c:	4618      	mov	r0, r3
   8d60e:	4ba5      	ldr	r3, [pc, #660]	; (8d8a4 <main+0x1e08>)
   8d610:	4798      	blx	r3
   8d612:	4603      	mov	r3, r0
   8d614:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d616:	7bfb      	ldrb	r3, [r7, #15]
   8d618:	2b00      	cmp	r3, #0
   8d61a:	d001      	beq.n	8d620 <main+0x1b84>
   8d61c:	4ba0      	ldr	r3, [pc, #640]	; (8d8a0 <main+0x1e04>)
   8d61e:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d620:	7bfb      	ldrb	r3, [r7, #15]
   8d622:	2b00      	cmp	r3, #0
   8d624:	d002      	beq.n	8d62c <main+0x1b90>
   8d626:	7bfb      	ldrb	r3, [r7, #15]
   8d628:	2b03      	cmp	r3, #3
   8d62a:	d10b      	bne.n	8d644 <main+0x1ba8>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d62c:	4b9a      	ldr	r3, [pc, #616]	; (8d898 <main+0x1dfc>)
   8d62e:	781b      	ldrb	r3, [r3, #0]
   8d630:	4618      	mov	r0, r3
   8d632:	4b9d      	ldr	r3, [pc, #628]	; (8d8a8 <main+0x1e0c>)
   8d634:	4798      	blx	r3
   8d636:	4603      	mov	r3, r0
   8d638:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d63a:	7bfb      	ldrb	r3, [r7, #15]
   8d63c:	2b00      	cmp	r3, #0
   8d63e:	d001      	beq.n	8d644 <main+0x1ba8>
   8d640:	4b97      	ldr	r3, [pc, #604]	; (8d8a0 <main+0x1e04>)
   8d642:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d644:	7bfb      	ldrb	r3, [r7, #15]
   8d646:	2b00      	cmp	r3, #0
   8d648:	d002      	beq.n	8d650 <main+0x1bb4>
   8d64a:	7bfb      	ldrb	r3, [r7, #15]
   8d64c:	2b03      	cmp	r3, #3
   8d64e:	d10b      	bne.n	8d668 <main+0x1bcc>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d650:	4b91      	ldr	r3, [pc, #580]	; (8d898 <main+0x1dfc>)
   8d652:	781b      	ldrb	r3, [r3, #0]
   8d654:	4618      	mov	r0, r3
   8d656:	4b95      	ldr	r3, [pc, #596]	; (8d8ac <main+0x1e10>)
   8d658:	4798      	blx	r3
   8d65a:	4603      	mov	r3, r0
   8d65c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d65e:	7bfb      	ldrb	r3, [r7, #15]
   8d660:	2b00      	cmp	r3, #0
   8d662:	d001      	beq.n	8d668 <main+0x1bcc>
   8d664:	4b8e      	ldr	r3, [pc, #568]	; (8d8a0 <main+0x1e04>)
   8d666:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d668:	7bfb      	ldrb	r3, [r7, #15]
   8d66a:	2b00      	cmp	r3, #0
   8d66c:	d12f      	bne.n	8d6ce <main+0x1c32>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d66e:	4b90      	ldr	r3, [pc, #576]	; (8d8b0 <main+0x1e14>)
   8d670:	220f      	movs	r2, #15
   8d672:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d674:	7bfb      	ldrb	r3, [r7, #15]
   8d676:	2b00      	cmp	r3, #0
   8d678:	d029      	beq.n	8d6ce <main+0x1c32>
   8d67a:	4b89      	ldr	r3, [pc, #548]	; (8d8a0 <main+0x1e04>)
   8d67c:	4798      	blx	r3
						}
						break;
   8d67e:	e026      	b.n	8d6ce <main+0x1c32>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						//Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
						//ASSERT_ERROR(Cl_MacRetval);
						//if(Cl_MacRetval == CL_OK)
						//{
							Cl_rinse_init();
   8d680:	4b8c      	ldr	r3, [pc, #560]	; (8d8b4 <main+0x1e18>)
   8d682:	4798      	blx	r3
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d684:	4b84      	ldr	r3, [pc, #528]	; (8d898 <main+0x1dfc>)
   8d686:	781b      	ldrb	r3, [r3, #0]
   8d688:	4618      	mov	r0, r3
   8d68a:	4b86      	ldr	r3, [pc, #536]	; (8d8a4 <main+0x1e08>)
   8d68c:	4798      	blx	r3
   8d68e:	4603      	mov	r3, r0
   8d690:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d692:	7bfb      	ldrb	r3, [r7, #15]
   8d694:	2b00      	cmp	r3, #0
   8d696:	d001      	beq.n	8d69c <main+0x1c00>
   8d698:	4b81      	ldr	r3, [pc, #516]	; (8d8a0 <main+0x1e04>)
   8d69a:	4798      	blx	r3
						//else
						//{
							//handle error
						//}
						
						if( Cl_MacRetval == CL_OK)
   8d69c:	7bfb      	ldrb	r3, [r7, #15]
   8d69e:	2b00      	cmp	r3, #0
   8d6a0:	d117      	bne.n	8d6d2 <main+0x1c36>
						{
							Cl_MacState = MAC_RINSE;
   8d6a2:	4b83      	ldr	r3, [pc, #524]	; (8d8b0 <main+0x1e14>)
   8d6a4:	2207      	movs	r2, #7
   8d6a6:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d6a8:	7bfb      	ldrb	r3, [r7, #15]
   8d6aa:	2b00      	cmp	r3, #0
   8d6ac:	d011      	beq.n	8d6d2 <main+0x1c36>
   8d6ae:	4b7c      	ldr	r3, [pc, #496]	; (8d8a0 <main+0x1e04>)
   8d6b0:	4798      	blx	r3
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d6b2:	e00e      	b.n	8d6d2 <main+0x1c36>
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d6b4:	4b7e      	ldr	r3, [pc, #504]	; (8d8b0 <main+0x1e14>)
   8d6b6:	2214      	movs	r2, #20
   8d6b8:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d6ba:	4b77      	ldr	r3, [pc, #476]	; (8d898 <main+0x1dfc>)
   8d6bc:	781b      	ldrb	r3, [r3, #0]
   8d6be:	4618      	mov	r0, r3
   8d6c0:	4b7d      	ldr	r3, [pc, #500]	; (8d8b8 <main+0x1e1c>)
   8d6c2:	4798      	blx	r3
   8d6c4:	4603      	mov	r3, r0
   8d6c6:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d6c8:	e004      	b.n	8d6d4 <main+0x1c38>
						
						
						default: break;
   8d6ca:	bf00      	nop
   8d6cc:	e2cd      	b.n	8dc6a <main+0x21ce>
						{
							Cl_MacState = MAC_DIALYSIS;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
						}
						break;
   8d6ce:	bf00      	nop
   8d6d0:	e2cb      	b.n	8dc6a <main+0x21ce>
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d6d2:	bf00      	nop
						break;
						
						
						default: break;
					}
					break;
   8d6d4:	e2c9      	b.n	8dc6a <main+0x21ce>
					
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8d6d6:	4b70      	ldr	r3, [pc, #448]	; (8d898 <main+0x1dfc>)
   8d6d8:	781b      	ldrb	r3, [r3, #0]
   8d6da:	3b07      	subs	r3, #7
   8d6dc:	2b57      	cmp	r3, #87	; 0x57
   8d6de:	f200 813b 	bhi.w	8d958 <main+0x1ebc>
   8d6e2:	a201      	add	r2, pc, #4	; (adr r2, 8d6e8 <main+0x1c4c>)
   8d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d6e8:	0008d8bd 	.word	0x0008d8bd
   8d6ec:	0008d959 	.word	0x0008d959
   8d6f0:	0008d959 	.word	0x0008d959
   8d6f4:	0008d849 	.word	0x0008d849
   8d6f8:	0008d849 	.word	0x0008d849
   8d6fc:	0008d849 	.word	0x0008d849
   8d700:	0008d959 	.word	0x0008d959
   8d704:	0008d959 	.word	0x0008d959
   8d708:	0008d959 	.word	0x0008d959
   8d70c:	0008d959 	.word	0x0008d959
   8d710:	0008d959 	.word	0x0008d959
   8d714:	0008d959 	.word	0x0008d959
   8d718:	0008d959 	.word	0x0008d959
   8d71c:	0008d959 	.word	0x0008d959
   8d720:	0008d849 	.word	0x0008d849
   8d724:	0008d959 	.word	0x0008d959
   8d728:	0008d959 	.word	0x0008d959
   8d72c:	0008d869 	.word	0x0008d869
   8d730:	0008d849 	.word	0x0008d849
   8d734:	0008d849 	.word	0x0008d849
   8d738:	0008d849 	.word	0x0008d849
   8d73c:	0008d959 	.word	0x0008d959
   8d740:	0008d959 	.word	0x0008d959
   8d744:	0008d959 	.word	0x0008d959
   8d748:	0008d959 	.word	0x0008d959
   8d74c:	0008d959 	.word	0x0008d959
   8d750:	0008d959 	.word	0x0008d959
   8d754:	0008d959 	.word	0x0008d959
   8d758:	0008d959 	.word	0x0008d959
   8d75c:	0008d959 	.word	0x0008d959
   8d760:	0008d959 	.word	0x0008d959
   8d764:	0008d959 	.word	0x0008d959
   8d768:	0008d849 	.word	0x0008d849
   8d76c:	0008d849 	.word	0x0008d849
   8d770:	0008d849 	.word	0x0008d849
   8d774:	0008d959 	.word	0x0008d959
   8d778:	0008d959 	.word	0x0008d959
   8d77c:	0008d959 	.word	0x0008d959
   8d780:	0008d849 	.word	0x0008d849
   8d784:	0008d849 	.word	0x0008d849
   8d788:	0008d959 	.word	0x0008d959
   8d78c:	0008d959 	.word	0x0008d959
   8d790:	0008d959 	.word	0x0008d959
   8d794:	0008d959 	.word	0x0008d959
   8d798:	0008d959 	.word	0x0008d959
   8d79c:	0008d959 	.word	0x0008d959
   8d7a0:	0008d959 	.word	0x0008d959
   8d7a4:	0008d959 	.word	0x0008d959
   8d7a8:	0008d959 	.word	0x0008d959
   8d7ac:	0008d849 	.word	0x0008d849
   8d7b0:	0008d959 	.word	0x0008d959
   8d7b4:	0008d849 	.word	0x0008d849
   8d7b8:	0008d849 	.word	0x0008d849
   8d7bc:	0008d849 	.word	0x0008d849
   8d7c0:	0008d849 	.word	0x0008d849
   8d7c4:	0008d959 	.word	0x0008d959
   8d7c8:	0008d959 	.word	0x0008d959
   8d7cc:	0008d959 	.word	0x0008d959
   8d7d0:	0008d959 	.word	0x0008d959
   8d7d4:	0008d959 	.word	0x0008d959
   8d7d8:	0008d959 	.word	0x0008d959
   8d7dc:	0008d959 	.word	0x0008d959
   8d7e0:	0008d959 	.word	0x0008d959
   8d7e4:	0008d959 	.word	0x0008d959
   8d7e8:	0008d959 	.word	0x0008d959
   8d7ec:	0008d959 	.word	0x0008d959
   8d7f0:	0008d959 	.word	0x0008d959
   8d7f4:	0008d959 	.word	0x0008d959
   8d7f8:	0008d959 	.word	0x0008d959
   8d7fc:	0008d959 	.word	0x0008d959
   8d800:	0008d959 	.word	0x0008d959
   8d804:	0008d959 	.word	0x0008d959
   8d808:	0008d959 	.word	0x0008d959
   8d80c:	0008d90b 	.word	0x0008d90b
   8d810:	0008d959 	.word	0x0008d959
   8d814:	0008d959 	.word	0x0008d959
   8d818:	0008d959 	.word	0x0008d959
   8d81c:	0008d959 	.word	0x0008d959
   8d820:	0008d959 	.word	0x0008d959
   8d824:	0008d959 	.word	0x0008d959
   8d828:	0008d959 	.word	0x0008d959
   8d82c:	0008d959 	.word	0x0008d959
   8d830:	0008d959 	.word	0x0008d959
   8d834:	0008d959 	.word	0x0008d959
   8d838:	0008d959 	.word	0x0008d959
   8d83c:	0008d959 	.word	0x0008d959
   8d840:	0008d959 	.word	0x0008d959
   8d844:	0008d883 	.word	0x0008d883
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d848:	4b13      	ldr	r3, [pc, #76]	; (8d898 <main+0x1dfc>)
   8d84a:	781b      	ldrb	r3, [r3, #0]
   8d84c:	4618      	mov	r0, r3
   8d84e:	4b17      	ldr	r3, [pc, #92]	; (8d8ac <main+0x1e10>)
   8d850:	4798      	blx	r3
   8d852:	4603      	mov	r3, r0
   8d854:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d856:	7bfb      	ldrb	r3, [r7, #15]
   8d858:	2b00      	cmp	r3, #0
   8d85a:	d001      	beq.n	8d860 <main+0x1dc4>
   8d85c:	4b10      	ldr	r3, [pc, #64]	; (8d8a0 <main+0x1e04>)
   8d85e:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8d860:	4b0d      	ldr	r3, [pc, #52]	; (8d898 <main+0x1dfc>)
   8d862:	2200      	movs	r2, #0
   8d864:	701a      	strb	r2, [r3, #0]
						break;
   8d866:	e07c      	b.n	8d962 <main+0x1ec6>
// 							{
// 								// handle error
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d868:	4b0b      	ldr	r3, [pc, #44]	; (8d898 <main+0x1dfc>)
   8d86a:	781b      	ldrb	r3, [r3, #0]
   8d86c:	4618      	mov	r0, r3
   8d86e:	4b0f      	ldr	r3, [pc, #60]	; (8d8ac <main+0x1e10>)
   8d870:	4798      	blx	r3
   8d872:	4603      	mov	r3, r0
   8d874:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d876:	7bfb      	ldrb	r3, [r7, #15]
   8d878:	2b00      	cmp	r3, #0
   8d87a:	d06f      	beq.n	8d95c <main+0x1ec0>
   8d87c:	4b08      	ldr	r3, [pc, #32]	; (8d8a0 <main+0x1e04>)
   8d87e:	4798      	blx	r3
						break;
   8d880:	e06c      	b.n	8d95c <main+0x1ec0>
							// handle error
						}
						break;
						#endif
						case MACREQ_POST_DIALYSIS_ISOUF_REQ :
						Cl_MacState = MAC_ISOUF;
   8d882:	4b0b      	ldr	r3, [pc, #44]	; (8d8b0 <main+0x1e14>)
   8d884:	2214      	movs	r2, #20
   8d886:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d888:	4b03      	ldr	r3, [pc, #12]	; (8d898 <main+0x1dfc>)
   8d88a:	781b      	ldrb	r3, [r3, #0]
   8d88c:	4618      	mov	r0, r3
   8d88e:	4b0a      	ldr	r3, [pc, #40]	; (8d8b8 <main+0x1e1c>)
   8d890:	4798      	blx	r3
   8d892:	4603      	mov	r3, r0
   8d894:	73fb      	strb	r3, [r7, #15]
						
						break;
   8d896:	e064      	b.n	8d962 <main+0x1ec6>
   8d898:	200719d6 	.word	0x200719d6
   8d89c:	000a4ad1 	.word	0x000a4ad1
   8d8a0:	00088e75 	.word	0x00088e75
   8d8a4:	000a22c9 	.word	0x000a22c9
   8d8a8:	0009e1d1 	.word	0x0009e1d1
   8d8ac:	000854b5 	.word	0x000854b5
   8d8b0:	20070574 	.word	0x20070574
   8d8b4:	000a39bd 	.word	0x000a39bd
   8d8b8:	00094281 	.word	0x00094281
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d8bc:	4bb9      	ldr	r3, [pc, #740]	; (8dba4 <main+0x2108>)
   8d8be:	781b      	ldrb	r3, [r3, #0]
   8d8c0:	4618      	mov	r0, r3
   8d8c2:	4bb9      	ldr	r3, [pc, #740]	; (8dba8 <main+0x210c>)
   8d8c4:	4798      	blx	r3
   8d8c6:	4603      	mov	r3, r0
   8d8c8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d8ca:	7bfb      	ldrb	r3, [r7, #15]
   8d8cc:	2b00      	cmp	r3, #0
   8d8ce:	d001      	beq.n	8d8d4 <main+0x1e38>
   8d8d0:	4bb6      	ldr	r3, [pc, #728]	; (8dbac <main+0x2110>)
   8d8d2:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d8d4:	7bfb      	ldrb	r3, [r7, #15]
   8d8d6:	2b00      	cmp	r3, #0
   8d8d8:	d10b      	bne.n	8d8f2 <main+0x1e56>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d8da:	4bb2      	ldr	r3, [pc, #712]	; (8dba4 <main+0x2108>)
   8d8dc:	781b      	ldrb	r3, [r3, #0]
   8d8de:	4618      	mov	r0, r3
   8d8e0:	4bb3      	ldr	r3, [pc, #716]	; (8dbb0 <main+0x2114>)
   8d8e2:	4798      	blx	r3
   8d8e4:	4603      	mov	r3, r0
   8d8e6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d8e8:	7bfb      	ldrb	r3, [r7, #15]
   8d8ea:	2b00      	cmp	r3, #0
   8d8ec:	d001      	beq.n	8d8f2 <main+0x1e56>
   8d8ee:	4baf      	ldr	r3, [pc, #700]	; (8dbac <main+0x2110>)
   8d8f0:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8d8f2:	7bfb      	ldrb	r3, [r7, #15]
   8d8f4:	2b00      	cmp	r3, #0
   8d8f6:	d133      	bne.n	8d960 <main+0x1ec4>
							{
								Cl_MacState = MAC_RINSE;
   8d8f8:	4bae      	ldr	r3, [pc, #696]	; (8dbb4 <main+0x2118>)
   8d8fa:	2207      	movs	r2, #7
   8d8fc:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);
   8d8fe:	7bfb      	ldrb	r3, [r7, #15]
   8d900:	2b00      	cmp	r3, #0
   8d902:	d02d      	beq.n	8d960 <main+0x1ec4>
   8d904:	4ba9      	ldr	r3, [pc, #676]	; (8dbac <main+0x2110>)
   8d906:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8d908:	e02a      	b.n	8d960 <main+0x1ec4>
		
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d90a:	4ba6      	ldr	r3, [pc, #664]	; (8dba4 <main+0x2108>)
   8d90c:	781b      	ldrb	r3, [r3, #0]
   8d90e:	4618      	mov	r0, r3
   8d910:	4ba9      	ldr	r3, [pc, #676]	; (8dbb8 <main+0x211c>)
   8d912:	4798      	blx	r3
   8d914:	4603      	mov	r3, r0
   8d916:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d918:	7bfb      	ldrb	r3, [r7, #15]
   8d91a:	2b00      	cmp	r3, #0
   8d91c:	d001      	beq.n	8d922 <main+0x1e86>
   8d91e:	4ba3      	ldr	r3, [pc, #652]	; (8dbac <main+0x2110>)
   8d920:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8d922:	7bfb      	ldrb	r3, [r7, #15]
   8d924:	2b00      	cmp	r3, #0
   8d926:	d113      	bne.n	8d950 <main+0x1eb4>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8d928:	4ba4      	ldr	r3, [pc, #656]	; (8dbbc <main+0x2120>)
   8d92a:	4798      	blx	r3
   8d92c:	4603      	mov	r3, r0
   8d92e:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_stby_init();
   8d930:	4ba3      	ldr	r3, [pc, #652]	; (8dbc0 <main+0x2124>)
   8d932:	4798      	blx	r3
   8d934:	4603      	mov	r3, r0
   8d936:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_dprep_init();
   8d938:	4ba2      	ldr	r3, [pc, #648]	; (8dbc4 <main+0x2128>)
   8d93a:	4798      	blx	r3
   8d93c:	4603      	mov	r3, r0
   8d93e:	73fb      	strb	r3, [r7, #15]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8d940:	4b9c      	ldr	r3, [pc, #624]	; (8dbb4 <main+0x2118>)
   8d942:	2211      	movs	r2, #17
   8d944:	701a      	strb	r2, [r3, #0]
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8d946:	7bfb      	ldrb	r3, [r7, #15]
   8d948:	2b00      	cmp	r3, #0
   8d94a:	d001      	beq.n	8d950 <main+0x1eb4>
   8d94c:	4b97      	ldr	r3, [pc, #604]	; (8dbac <main+0x2110>)
   8d94e:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8d950:	4b94      	ldr	r3, [pc, #592]	; (8dba4 <main+0x2108>)
   8d952:	2200      	movs	r2, #0
   8d954:	701a      	strb	r2, [r3, #0]
						break;
   8d956:	e004      	b.n	8d962 <main+0x1ec6>
						default: break;
   8d958:	bf00      	nop
   8d95a:	e186      	b.n	8dc6a <main+0x21ce>
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						ASSERT_ERROR(Cl_MacRetval);
						break;
   8d95c:	bf00      	nop
   8d95e:	e184      	b.n	8dc6a <main+0x21ce>
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8d960:	bf00      	nop
							}
							Cl_MacEvent = EVT_NULL;
						break;
						default: break;
					}
					break;
   8d962:	e182      	b.n	8dc6a <main+0x21ce>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8d964:	4b8f      	ldr	r3, [pc, #572]	; (8dba4 <main+0x2108>)
   8d966:	781b      	ldrb	r3, [r3, #0]
   8d968:	3b07      	subs	r3, #7
   8d96a:	2b21      	cmp	r3, #33	; 0x21
   8d96c:	f200 808d 	bhi.w	8da8a <main+0x1fee>
   8d970:	a201      	add	r2, pc, #4	; (adr r2, 8d978 <main+0x1edc>)
   8d972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d976:	bf00      	nop
   8d978:	0008da11 	.word	0x0008da11
   8d97c:	0008da8b 	.word	0x0008da8b
   8d980:	0008da8b 	.word	0x0008da8b
   8d984:	0008da01 	.word	0x0008da01
   8d988:	0008da01 	.word	0x0008da01
   8d98c:	0008da01 	.word	0x0008da01
   8d990:	0008da8b 	.word	0x0008da8b
   8d994:	0008da8b 	.word	0x0008da8b
   8d998:	0008da8b 	.word	0x0008da8b
   8d99c:	0008da8b 	.word	0x0008da8b
   8d9a0:	0008da8b 	.word	0x0008da8b
   8d9a4:	0008da8b 	.word	0x0008da8b
   8d9a8:	0008da8b 	.word	0x0008da8b
   8d9ac:	0008da8b 	.word	0x0008da8b
   8d9b0:	0008da8b 	.word	0x0008da8b
   8d9b4:	0008da8b 	.word	0x0008da8b
   8d9b8:	0008da8b 	.word	0x0008da8b
   8d9bc:	0008da8b 	.word	0x0008da8b
   8d9c0:	0008da8b 	.word	0x0008da8b
   8d9c4:	0008da65 	.word	0x0008da65
   8d9c8:	0008da65 	.word	0x0008da65
   8d9cc:	0008da8b 	.word	0x0008da8b
   8d9d0:	0008da8b 	.word	0x0008da8b
   8d9d4:	0008da8b 	.word	0x0008da8b
   8d9d8:	0008da8b 	.word	0x0008da8b
   8d9dc:	0008da8b 	.word	0x0008da8b
   8d9e0:	0008da8b 	.word	0x0008da8b
   8d9e4:	0008da8b 	.word	0x0008da8b
   8d9e8:	0008da8b 	.word	0x0008da8b
   8d9ec:	0008da8b 	.word	0x0008da8b
   8d9f0:	0008da8b 	.word	0x0008da8b
   8d9f4:	0008da8b 	.word	0x0008da8b
   8d9f8:	0008da01 	.word	0x0008da01
   8d9fc:	0008da01 	.word	0x0008da01
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8da00:	4b68      	ldr	r3, [pc, #416]	; (8dba4 <main+0x2108>)
   8da02:	781b      	ldrb	r3, [r3, #0]
   8da04:	4618      	mov	r0, r3
   8da06:	4b68      	ldr	r3, [pc, #416]	; (8dba8 <main+0x210c>)
   8da08:	4798      	blx	r3
   8da0a:	4603      	mov	r3, r0
   8da0c:	73fb      	strb	r3, [r7, #15]
						break;
   8da0e:	e03f      	b.n	8da90 <main+0x1ff4>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8da10:	4b64      	ldr	r3, [pc, #400]	; (8dba4 <main+0x2108>)
   8da12:	781b      	ldrb	r3, [r3, #0]
   8da14:	4618      	mov	r0, r3
   8da16:	4b64      	ldr	r3, [pc, #400]	; (8dba8 <main+0x210c>)
   8da18:	4798      	blx	r3
   8da1a:	4603      	mov	r3, r0
   8da1c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8da1e:	7bfb      	ldrb	r3, [r7, #15]
   8da20:	2b00      	cmp	r3, #0
   8da22:	d001      	beq.n	8da28 <main+0x1f8c>
   8da24:	4b61      	ldr	r3, [pc, #388]	; (8dbac <main+0x2110>)
   8da26:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8da28:	7bfb      	ldrb	r3, [r7, #15]
   8da2a:	2b00      	cmp	r3, #0
   8da2c:	d10b      	bne.n	8da46 <main+0x1faa>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8da2e:	4b5d      	ldr	r3, [pc, #372]	; (8dba4 <main+0x2108>)
   8da30:	781b      	ldrb	r3, [r3, #0]
   8da32:	4618      	mov	r0, r3
   8da34:	4b5e      	ldr	r3, [pc, #376]	; (8dbb0 <main+0x2114>)
   8da36:	4798      	blx	r3
   8da38:	4603      	mov	r3, r0
   8da3a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8da3c:	7bfb      	ldrb	r3, [r7, #15]
   8da3e:	2b00      	cmp	r3, #0
   8da40:	d001      	beq.n	8da46 <main+0x1faa>
   8da42:	4b5a      	ldr	r3, [pc, #360]	; (8dbac <main+0x2110>)
   8da44:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8da46:	7bfb      	ldrb	r3, [r7, #15]
   8da48:	2b00      	cmp	r3, #0
   8da4a:	d107      	bne.n	8da5c <main+0x1fc0>
							{
								Cl_MacState = MAC_RINSE;
   8da4c:	4b59      	ldr	r3, [pc, #356]	; (8dbb4 <main+0x2118>)
   8da4e:	2207      	movs	r2, #7
   8da50:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8da52:	7bfb      	ldrb	r3, [r7, #15]
   8da54:	2b00      	cmp	r3, #0
   8da56:	d001      	beq.n	8da5c <main+0x1fc0>
   8da58:	4b54      	ldr	r3, [pc, #336]	; (8dbac <main+0x2110>)
   8da5a:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8da5c:	4b51      	ldr	r3, [pc, #324]	; (8dba4 <main+0x2108>)
   8da5e:	2200      	movs	r2, #0
   8da60:	701a      	strb	r2, [r3, #0]
						break;
   8da62:	e015      	b.n	8da90 <main+0x1ff4>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8da64:	4b4f      	ldr	r3, [pc, #316]	; (8dba4 <main+0x2108>)
   8da66:	781b      	ldrb	r3, [r3, #0]
   8da68:	4618      	mov	r0, r3
   8da6a:	4b53      	ldr	r3, [pc, #332]	; (8dbb8 <main+0x211c>)
   8da6c:	4798      	blx	r3
   8da6e:	4603      	mov	r3, r0
   8da70:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8da72:	7bfb      	ldrb	r3, [r7, #15]
   8da74:	2b00      	cmp	r3, #0
   8da76:	d001      	beq.n	8da7c <main+0x1fe0>
   8da78:	4b4c      	ldr	r3, [pc, #304]	; (8dbac <main+0x2110>)
   8da7a:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8da7c:	7bfb      	ldrb	r3, [r7, #15]
   8da7e:	2b00      	cmp	r3, #0
   8da80:	d105      	bne.n	8da8e <main+0x1ff2>
								{
									Cl_MacState = MAC_DIALYSIS;
   8da82:	4b4c      	ldr	r3, [pc, #304]	; (8dbb4 <main+0x2118>)
   8da84:	220f      	movs	r2, #15
   8da86:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8da88:	e001      	b.n	8da8e <main+0x1ff2>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8da8a:	bf00      	nop
   8da8c:	e0ed      	b.n	8dc6a <main+0x21ce>
								else
								{
									//handle error
								}
						
						break;
   8da8e:	bf00      	nop
						}
						break;
						#endif
						default: break;
					}
					break;
   8da90:	e0eb      	b.n	8dc6a <main+0x21ce>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8da92:	4b44      	ldr	r3, [pc, #272]	; (8dba4 <main+0x2108>)
   8da94:	781b      	ldrb	r3, [r3, #0]
   8da96:	3b07      	subs	r3, #7
   8da98:	2b38      	cmp	r3, #56	; 0x38
   8da9a:	f200 80db 	bhi.w	8dc54 <main+0x21b8>
   8da9e:	a201      	add	r2, pc, #4	; (adr r2, 8daa4 <main+0x2008>)
   8daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8daa4:	0008dc01 	.word	0x0008dc01
   8daa8:	0008dc55 	.word	0x0008dc55
   8daac:	0008dc55 	.word	0x0008dc55
   8dab0:	0008db89 	.word	0x0008db89
   8dab4:	0008db89 	.word	0x0008db89
   8dab8:	0008db89 	.word	0x0008db89
   8dabc:	0008dc55 	.word	0x0008dc55
   8dac0:	0008dc55 	.word	0x0008dc55
   8dac4:	0008dc55 	.word	0x0008dc55
   8dac8:	0008dc55 	.word	0x0008dc55
   8dacc:	0008dc55 	.word	0x0008dc55
   8dad0:	0008dc55 	.word	0x0008dc55
   8dad4:	0008dc55 	.word	0x0008dc55
   8dad8:	0008dc55 	.word	0x0008dc55
   8dadc:	0008dc55 	.word	0x0008dc55
   8dae0:	0008dc55 	.word	0x0008dc55
   8dae4:	0008dc55 	.word	0x0008dc55
   8dae8:	0008dc55 	.word	0x0008dc55
   8daec:	0008dc55 	.word	0x0008dc55
   8daf0:	0008db89 	.word	0x0008db89
   8daf4:	0008db89 	.word	0x0008db89
   8daf8:	0008dc55 	.word	0x0008dc55
   8dafc:	0008dc55 	.word	0x0008dc55
   8db00:	0008dc55 	.word	0x0008dc55
   8db04:	0008dc55 	.word	0x0008dc55
   8db08:	0008dc55 	.word	0x0008dc55
   8db0c:	0008dc55 	.word	0x0008dc55
   8db10:	0008dc55 	.word	0x0008dc55
   8db14:	0008dc55 	.word	0x0008dc55
   8db18:	0008dc55 	.word	0x0008dc55
   8db1c:	0008dc55 	.word	0x0008dc55
   8db20:	0008dc55 	.word	0x0008dc55
   8db24:	0008db89 	.word	0x0008db89
   8db28:	0008db89 	.word	0x0008db89
   8db2c:	0008dc55 	.word	0x0008dc55
   8db30:	0008dc55 	.word	0x0008dc55
   8db34:	0008dc55 	.word	0x0008dc55
   8db38:	0008dc55 	.word	0x0008dc55
   8db3c:	0008dc55 	.word	0x0008dc55
   8db40:	0008dc55 	.word	0x0008dc55
   8db44:	0008dc55 	.word	0x0008dc55
   8db48:	0008dc55 	.word	0x0008dc55
   8db4c:	0008dc55 	.word	0x0008dc55
   8db50:	0008dc55 	.word	0x0008dc55
   8db54:	0008dc55 	.word	0x0008dc55
   8db58:	0008dc55 	.word	0x0008dc55
   8db5c:	0008dc55 	.word	0x0008dc55
   8db60:	0008dc55 	.word	0x0008dc55
   8db64:	0008dc55 	.word	0x0008dc55
   8db68:	0008dc55 	.word	0x0008dc55
   8db6c:	0008dc55 	.word	0x0008dc55
   8db70:	0008dc55 	.word	0x0008dc55
   8db74:	0008dc55 	.word	0x0008dc55
   8db78:	0008dc55 	.word	0x0008dc55
   8db7c:	0008dc55 	.word	0x0008dc55
   8db80:	0008dc55 	.word	0x0008dc55
   8db84:	0008dbc9 	.word	0x0008dbc9
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8db88:	4b06      	ldr	r3, [pc, #24]	; (8dba4 <main+0x2108>)
   8db8a:	781b      	ldrb	r3, [r3, #0]
   8db8c:	4618      	mov	r0, r3
   8db8e:	4b0a      	ldr	r3, [pc, #40]	; (8dbb8 <main+0x211c>)
   8db90:	4798      	blx	r3
   8db92:	4603      	mov	r3, r0
   8db94:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8db96:	7bfb      	ldrb	r3, [r7, #15]
   8db98:	2b00      	cmp	r3, #0
   8db9a:	d05d      	beq.n	8dc58 <main+0x21bc>
   8db9c:	4b03      	ldr	r3, [pc, #12]	; (8dbac <main+0x2110>)
   8db9e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8dba0:	e05a      	b.n	8dc58 <main+0x21bc>
   8dba2:	bf00      	nop
   8dba4:	200719d6 	.word	0x200719d6
   8dba8:	000a4ad1 	.word	0x000a4ad1
   8dbac:	00088e75 	.word	0x00088e75
   8dbb0:	000a22c9 	.word	0x000a22c9
   8dbb4:	20070574 	.word	0x20070574
   8dbb8:	000854b5 	.word	0x000854b5
   8dbbc:	000a39bd 	.word	0x000a39bd
   8dbc0:	000a5659 	.word	0x000a5659
   8dbc4:	0009e08d 	.word	0x0009e08d
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dbc8:	4b3a      	ldr	r3, [pc, #232]	; (8dcb4 <main+0x2218>)
   8dbca:	781b      	ldrb	r3, [r3, #0]
   8dbcc:	4618      	mov	r0, r3
   8dbce:	4b3a      	ldr	r3, [pc, #232]	; (8dcb8 <main+0x221c>)
   8dbd0:	4798      	blx	r3
   8dbd2:	4603      	mov	r3, r0
   8dbd4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dbd6:	7bfb      	ldrb	r3, [r7, #15]
   8dbd8:	2b00      	cmp	r3, #0
   8dbda:	d001      	beq.n	8dbe0 <main+0x2144>
   8dbdc:	4b37      	ldr	r3, [pc, #220]	; (8dcbc <main+0x2220>)
   8dbde:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8dbe0:	4b34      	ldr	r3, [pc, #208]	; (8dcb4 <main+0x2218>)
   8dbe2:	781b      	ldrb	r3, [r3, #0]
   8dbe4:	4618      	mov	r0, r3
   8dbe6:	4b36      	ldr	r3, [pc, #216]	; (8dcc0 <main+0x2224>)
   8dbe8:	4798      	blx	r3
   8dbea:	4603      	mov	r3, r0
   8dbec:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dbee:	7bfb      	ldrb	r3, [r7, #15]
   8dbf0:	2b00      	cmp	r3, #0
   8dbf2:	d001      	beq.n	8dbf8 <main+0x215c>
   8dbf4:	4b31      	ldr	r3, [pc, #196]	; (8dcbc <main+0x2220>)
   8dbf6:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8dbf8:	4b32      	ldr	r3, [pc, #200]	; (8dcc4 <main+0x2228>)
   8dbfa:	2208      	movs	r2, #8
   8dbfc:	701a      	strb	r2, [r3, #0]
						
						break;
   8dbfe:	e02c      	b.n	8dc5a <main+0x21be>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dc00:	4b2c      	ldr	r3, [pc, #176]	; (8dcb4 <main+0x2218>)
   8dc02:	781b      	ldrb	r3, [r3, #0]
   8dc04:	4618      	mov	r0, r3
   8dc06:	4b30      	ldr	r3, [pc, #192]	; (8dcc8 <main+0x222c>)
   8dc08:	4798      	blx	r3
   8dc0a:	4603      	mov	r3, r0
   8dc0c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dc0e:	7bfb      	ldrb	r3, [r7, #15]
   8dc10:	2b00      	cmp	r3, #0
   8dc12:	d001      	beq.n	8dc18 <main+0x217c>
   8dc14:	4b29      	ldr	r3, [pc, #164]	; (8dcbc <main+0x2220>)
   8dc16:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8dc18:	7bfb      	ldrb	r3, [r7, #15]
   8dc1a:	2b00      	cmp	r3, #0
   8dc1c:	d10b      	bne.n	8dc36 <main+0x219a>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8dc1e:	4b25      	ldr	r3, [pc, #148]	; (8dcb4 <main+0x2218>)
   8dc20:	781b      	ldrb	r3, [r3, #0]
   8dc22:	4618      	mov	r0, r3
   8dc24:	4b29      	ldr	r3, [pc, #164]	; (8dccc <main+0x2230>)
   8dc26:	4798      	blx	r3
   8dc28:	4603      	mov	r3, r0
   8dc2a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8dc2c:	7bfb      	ldrb	r3, [r7, #15]
   8dc2e:	2b00      	cmp	r3, #0
   8dc30:	d001      	beq.n	8dc36 <main+0x219a>
   8dc32:	4b22      	ldr	r3, [pc, #136]	; (8dcbc <main+0x2220>)
   8dc34:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8dc36:	7bfb      	ldrb	r3, [r7, #15]
   8dc38:	2b00      	cmp	r3, #0
   8dc3a:	d107      	bne.n	8dc4c <main+0x21b0>
							{
								Cl_MacState = MAC_RINSE;
   8dc3c:	4b21      	ldr	r3, [pc, #132]	; (8dcc4 <main+0x2228>)
   8dc3e:	2207      	movs	r2, #7
   8dc40:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8dc42:	7bfb      	ldrb	r3, [r7, #15]
   8dc44:	2b00      	cmp	r3, #0
   8dc46:	d001      	beq.n	8dc4c <main+0x21b0>
   8dc48:	4b1c      	ldr	r3, [pc, #112]	; (8dcbc <main+0x2220>)
   8dc4a:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dc4c:	4b19      	ldr	r3, [pc, #100]	; (8dcb4 <main+0x2218>)
   8dc4e:	2200      	movs	r2, #0
   8dc50:	701a      	strb	r2, [r3, #0]
						break;
   8dc52:	e002      	b.n	8dc5a <main+0x21be>
						

						default: break;
   8dc54:	bf00      	nop
   8dc56:	e008      	b.n	8dc6a <main+0x21ce>
						ASSERT_ERROR(Cl_MacRetval);
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8dc58:	bf00      	nop
						break;
						

						default: break;
					}
					break;
   8dc5a:	e006      	b.n	8dc6a <main+0x21ce>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8dc5c:	bf00      	nop
					}
					break;
   8dc5e:	e004      	b.n	8dc6a <main+0x21ce>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8dc60:	bf00      	nop
					}
					break;
   8dc62:	e002      	b.n	8dc6a <main+0x21ce>
					default :
					break;
   8dc64:	bf00      	nop
   8dc66:	e000      	b.n	8dc6a <main+0x21ce>
						break;

						
					}
					
					break;
   8dc68:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8dc6a:	4b19      	ldr	r3, [pc, #100]	; (8dcd0 <main+0x2234>)
   8dc6c:	4798      	blx	r3
   8dc6e:	4603      	mov	r3, r0
   8dc70:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8dc72:	7bfb      	ldrb	r3, [r7, #15]
   8dc74:	2b00      	cmp	r3, #0
   8dc76:	d001      	beq.n	8dc7c <main+0x21e0>
   8dc78:	4b10      	ldr	r3, [pc, #64]	; (8dcbc <main+0x2220>)
   8dc7a:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue3.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8dc7c:	4b15      	ldr	r3, [pc, #84]	; (8dcd4 <main+0x2238>)
   8dc7e:	781b      	ldrb	r3, [r3, #0]
   8dc80:	2b00      	cmp	r3, #0
   8dc82:	f47d afd8 	bne.w	8bc36 <main+0x19a>
   8dc86:	4b14      	ldr	r3, [pc, #80]	; (8dcd8 <main+0x223c>)
   8dc88:	781b      	ldrb	r3, [r3, #0]
   8dc8a:	2b00      	cmp	r3, #0
   8dc8c:	f47d afd3 	bne.w	8bc36 <main+0x19a>
   8dc90:	4b12      	ldr	r3, [pc, #72]	; (8dcdc <main+0x2240>)
   8dc92:	781b      	ldrb	r3, [r3, #0]
   8dc94:	2b00      	cmp	r3, #0
   8dc96:	f47d afce 	bne.w	8bc36 <main+0x19a>
   8dc9a:	4b11      	ldr	r3, [pc, #68]	; (8dce0 <main+0x2244>)
   8dc9c:	781b      	ldrb	r3, [r3, #0]
   8dc9e:	2b00      	cmp	r3, #0
   8dca0:	f47d afc9 	bne.w	8bc36 <main+0x19a>
   8dca4:	4b0f      	ldr	r3, [pc, #60]	; (8dce4 <main+0x2248>)
   8dca6:	781b      	ldrb	r3, [r3, #0]
   8dca8:	2b00      	cmp	r3, #0
   8dcaa:	f47d afc4 	bne.w	8bc36 <main+0x19a>
		
		}
		
		//sv_cntrl_resetyellowalarm();

	}
   8dcae:	f7fd bf8c 	b.w	8bbca <main+0x12e>
   8dcb2:	bf00      	nop
   8dcb4:	200719d6 	.word	0x200719d6
   8dcb8:	000854b5 	.word	0x000854b5
   8dcbc:	00088e75 	.word	0x00088e75
   8dcc0:	0009bfa1 	.word	0x0009bfa1
   8dcc4:	20070574 	.word	0x20070574
   8dcc8:	000a4ad1 	.word	0x000a4ad1
   8dccc:	000a22c9 	.word	0x000a22c9
   8dcd0:	0008e285 	.word	0x0008e285
   8dcd4:	200724dc 	.word	0x200724dc
   8dcd8:	20072314 	.word	0x20072314
   8dcdc:	20072190 	.word	0x20072190
   8dce0:	20072424 	.word	0x20072424
   8dce4:	200722b8 	.word	0x200722b8

0008dce8 <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8dce8:	b580      	push	{r7, lr}
   8dcea:	b082      	sub	sp, #8
   8dcec:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8dcee:	2300      	movs	r3, #0
   8dcf0:	71fb      	strb	r3, [r7, #7]
		
		queue_sequence_counter = 0;
   8dcf2:	4b28      	ldr	r3, [pc, #160]	; (8dd94 <Cl_MacInit+0xac>)
   8dcf4:	2200      	movs	r2, #0
   8dcf6:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8dcf8:	4b27      	ldr	r3, [pc, #156]	; (8dd98 <Cl_MacInit+0xb0>)
   8dcfa:	2200      	movs	r2, #0
   8dcfc:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8dcfe:	4b26      	ldr	r3, [pc, #152]	; (8dd98 <Cl_MacInit+0xb0>)
   8dd00:	2200      	movs	r2, #0
   8dd02:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8dd04:	4b24      	ldr	r3, [pc, #144]	; (8dd98 <Cl_MacInit+0xb0>)
   8dd06:	2200      	movs	r2, #0
   8dd08:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue4.Cl_MacEvent[0] =0;
   8dd0a:	4b24      	ldr	r3, [pc, #144]	; (8dd9c <Cl_MacInit+0xb4>)
   8dd0c:	2200      	movs	r2, #0
   8dd0e:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue4.Cl_MacNewEvent = false;
   8dd10:	4b22      	ldr	r3, [pc, #136]	; (8dd9c <Cl_MacInit+0xb4>)
   8dd12:	2200      	movs	r2, #0
   8dd14:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount = 0;
   8dd16:	4b21      	ldr	r3, [pc, #132]	; (8dd9c <Cl_MacInit+0xb4>)
   8dd18:	2200      	movs	r2, #0
   8dd1a:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueueBc.Cl_MacEvent[0] =0;
   8dd1c:	4b20      	ldr	r3, [pc, #128]	; (8dda0 <Cl_MacInit+0xb8>)
   8dd1e:	2200      	movs	r2, #0
   8dd20:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueueBc.Cl_MacNewEvent = false;
   8dd22:	4b1f      	ldr	r3, [pc, #124]	; (8dda0 <Cl_MacInit+0xb8>)
   8dd24:	2200      	movs	r2, #0
   8dd26:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount = 0;
   8dd28:	4b1d      	ldr	r3, [pc, #116]	; (8dda0 <Cl_MacInit+0xb8>)
   8dd2a:	2200      	movs	r2, #0
   8dd2c:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8dd2e:	4b1d      	ldr	r3, [pc, #116]	; (8dda4 <Cl_MacInit+0xbc>)
   8dd30:	2214      	movs	r2, #20
   8dd32:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8dd34:	4b1c      	ldr	r3, [pc, #112]	; (8dda8 <Cl_MacInit+0xc0>)
   8dd36:	2228      	movs	r2, #40	; 0x28
   8dd38:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8dd3c:	4b1b      	ldr	r3, [pc, #108]	; (8ddac <Cl_MacInit+0xc4>)
   8dd3e:	2201      	movs	r2, #1
   8dd40:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8dd42:	4b1a      	ldr	r3, [pc, #104]	; (8ddac <Cl_MacInit+0xc4>)
   8dd44:	2200      	movs	r2, #0
   8dd46:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8dd48:	4b18      	ldr	r3, [pc, #96]	; (8ddac <Cl_MacInit+0xc4>)
   8dd4a:	2200      	movs	r2, #0
   8dd4c:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8dd4e:	4b17      	ldr	r3, [pc, #92]	; (8ddac <Cl_MacInit+0xc4>)
   8dd50:	2201      	movs	r2, #1
   8dd52:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8dd54:	4b15      	ldr	r3, [pc, #84]	; (8ddac <Cl_MacInit+0xc4>)
   8dd56:	2200      	movs	r2, #0
   8dd58:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8dd5a:	4b15      	ldr	r3, [pc, #84]	; (8ddb0 <Cl_MacInit+0xc8>)
   8dd5c:	2201      	movs	r2, #1
   8dd5e:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8dd60:	4b13      	ldr	r3, [pc, #76]	; (8ddb0 <Cl_MacInit+0xc8>)
   8dd62:	2200      	movs	r2, #0
   8dd64:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8dd66:	4b12      	ldr	r3, [pc, #72]	; (8ddb0 <Cl_MacInit+0xc8>)
   8dd68:	2200      	movs	r2, #0
   8dd6a:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8dd6c:	4b10      	ldr	r3, [pc, #64]	; (8ddb0 <Cl_MacInit+0xc8>)
   8dd6e:	2200      	movs	r2, #0
   8dd70:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8dd72:	4b0f      	ldr	r3, [pc, #60]	; (8ddb0 <Cl_MacInit+0xc8>)
   8dd74:	2200      	movs	r2, #0
   8dd76:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8dd78:	4b0e      	ldr	r3, [pc, #56]	; (8ddb4 <Cl_MacInit+0xcc>)
   8dd7a:	2202      	movs	r2, #2
   8dd7c:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8dd7e:	79fb      	ldrb	r3, [r7, #7]
   8dd80:	2b00      	cmp	r3, #0
   8dd82:	d001      	beq.n	8dd88 <Cl_MacInit+0xa0>
   8dd84:	4b0c      	ldr	r3, [pc, #48]	; (8ddb8 <Cl_MacInit+0xd0>)
   8dd86:	4798      	blx	r3
		return Cl_MacRetval;
   8dd88:	79fb      	ldrb	r3, [r7, #7]
}
   8dd8a:	4618      	mov	r0, r3
   8dd8c:	3708      	adds	r7, #8
   8dd8e:	46bd      	mov	sp, r7
   8dd90:	bd80      	pop	{r7, pc}
   8dd92:	bf00      	nop
   8dd94:	200719d9 	.word	0x200719d9
   8dd98:	20072314 	.word	0x20072314
   8dd9c:	200722b8 	.word	0x200722b8
   8dda0:	200724dc 	.word	0x200724dc
   8dda4:	200723c8 	.word	0x200723c8
   8dda8:	200721ec 	.word	0x200721ec
   8ddac:	20072404 	.word	0x20072404
   8ddb0:	20072270 	.word	0x20072270
   8ddb4:	20070574 	.word	0x20070574
   8ddb8:	00088e75 	.word	0x00088e75

0008ddbc <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8ddbc:	b580      	push	{r7, lr}
   8ddbe:	b082      	sub	sp, #8
   8ddc0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8ddc2:	2304      	movs	r3, #4
   8ddc4:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8ddc6:	4b26      	ldr	r3, [pc, #152]	; (8de60 <Cl_App_init+0xa4>)
   8ddc8:	4798      	blx	r3
   8ddca:	4603      	mov	r3, r0
   8ddcc:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8ddce:	79fb      	ldrb	r3, [r7, #7]
   8ddd0:	2b00      	cmp	r3, #0
   8ddd2:	d001      	beq.n	8ddd8 <Cl_App_init+0x1c>
   8ddd4:	4b23      	ldr	r3, [pc, #140]	; (8de64 <Cl_App_init+0xa8>)
   8ddd6:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8ddd8:	4b23      	ldr	r3, [pc, #140]	; (8de68 <Cl_App_init+0xac>)
   8ddda:	4798      	blx	r3
   8dddc:	4603      	mov	r3, r0
   8ddde:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8dde0:	79fb      	ldrb	r3, [r7, #7]
   8dde2:	2b00      	cmp	r3, #0
   8dde4:	d001      	beq.n	8ddea <Cl_App_init+0x2e>
   8dde6:	4b1f      	ldr	r3, [pc, #124]	; (8de64 <Cl_App_init+0xa8>)
   8dde8:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8ddea:	4b20      	ldr	r3, [pc, #128]	; (8de6c <Cl_App_init+0xb0>)
   8ddec:	4798      	blx	r3
   8ddee:	4603      	mov	r3, r0
   8ddf0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8ddf2:	79fb      	ldrb	r3, [r7, #7]
   8ddf4:	2b00      	cmp	r3, #0
   8ddf6:	d001      	beq.n	8ddfc <Cl_App_init+0x40>
   8ddf8:	4b1a      	ldr	r3, [pc, #104]	; (8de64 <Cl_App_init+0xa8>)
   8ddfa:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8ddfc:	4b1c      	ldr	r3, [pc, #112]	; (8de70 <Cl_App_init+0xb4>)
   8ddfe:	4798      	blx	r3
   8de00:	4603      	mov	r3, r0
   8de02:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8de04:	79fb      	ldrb	r3, [r7, #7]
   8de06:	2b00      	cmp	r3, #0
   8de08:	d001      	beq.n	8de0e <Cl_App_init+0x52>
   8de0a:	4b16      	ldr	r3, [pc, #88]	; (8de64 <Cl_App_init+0xa8>)
   8de0c:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8de0e:	4b19      	ldr	r3, [pc, #100]	; (8de74 <Cl_App_init+0xb8>)
   8de10:	4798      	blx	r3
   8de12:	4603      	mov	r3, r0
   8de14:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8de16:	79fb      	ldrb	r3, [r7, #7]
   8de18:	2b00      	cmp	r3, #0
   8de1a:	d001      	beq.n	8de20 <Cl_App_init+0x64>
   8de1c:	4b11      	ldr	r3, [pc, #68]	; (8de64 <Cl_App_init+0xa8>)
   8de1e:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8de20:	4b15      	ldr	r3, [pc, #84]	; (8de78 <Cl_App_init+0xbc>)
   8de22:	4798      	blx	r3
   8de24:	4603      	mov	r3, r0
   8de26:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8de28:	79fb      	ldrb	r3, [r7, #7]
   8de2a:	2b00      	cmp	r3, #0
   8de2c:	d001      	beq.n	8de32 <Cl_App_init+0x76>
   8de2e:	4b0d      	ldr	r3, [pc, #52]	; (8de64 <Cl_App_init+0xa8>)
   8de30:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8de32:	4b12      	ldr	r3, [pc, #72]	; (8de7c <Cl_App_init+0xc0>)
   8de34:	4798      	blx	r3
   8de36:	4603      	mov	r3, r0
   8de38:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8de3a:	79fb      	ldrb	r3, [r7, #7]
   8de3c:	2b00      	cmp	r3, #0
   8de3e:	d001      	beq.n	8de44 <Cl_App_init+0x88>
   8de40:	4b08      	ldr	r3, [pc, #32]	; (8de64 <Cl_App_init+0xa8>)
   8de42:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8de44:	4b0e      	ldr	r3, [pc, #56]	; (8de80 <Cl_App_init+0xc4>)
   8de46:	4798      	blx	r3
   8de48:	4603      	mov	r3, r0
   8de4a:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8de4c:	79fb      	ldrb	r3, [r7, #7]
   8de4e:	2b00      	cmp	r3, #0
   8de50:	d001      	beq.n	8de56 <Cl_App_init+0x9a>
   8de52:	4b04      	ldr	r3, [pc, #16]	; (8de64 <Cl_App_init+0xa8>)
   8de54:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8de56:	2300      	movs	r3, #0
	
}
   8de58:	4618      	mov	r0, r3
   8de5a:	3708      	adds	r7, #8
   8de5c:	46bd      	mov	sp, r7
   8de5e:	bd80      	pop	{r7, pc}
   8de60:	00080bb9 	.word	0x00080bb9
   8de64:	00088e75 	.word	0x00088e75
   8de68:	0009bd0d 	.word	0x0009bd0d
   8de6c:	0009bf91 	.word	0x0009bf91
   8de70:	000853a5 	.word	0x000853a5
   8de74:	0009e08d 	.word	0x0009e08d
   8de78:	000a39bd 	.word	0x000a39bd
   8de7c:	000a5659 	.word	0x000a5659
   8de80:	000849e1 	.word	0x000849e1

0008de84 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8de84:	b580      	push	{r7, lr}
   8de86:	b082      	sub	sp, #8
   8de88:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8de8a:	2304      	movs	r3, #4
   8de8c:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8de8e:	79fb      	ldrb	r3, [r7, #7]
   8de90:	2b00      	cmp	r3, #0
   8de92:	d001      	beq.n	8de98 <Cl_Mac_Configure+0x14>
   8de94:	4b03      	ldr	r3, [pc, #12]	; (8dea4 <Cl_Mac_Configure+0x20>)
   8de96:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8de98:	2300      	movs	r3, #0
}
   8de9a:	4618      	mov	r0, r3
   8de9c:	3708      	adds	r7, #8
   8de9e:	46bd      	mov	sp, r7
   8dea0:	bd80      	pop	{r7, pc}
   8dea2:	bf00      	nop
   8dea4:	00088e75 	.word	0x00088e75

0008dea8 <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8dea8:	b580      	push	{r7, lr}
   8deaa:	b082      	sub	sp, #8
   8deac:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8deae:	2304      	movs	r3, #4
   8deb0:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8deb2:	4b07      	ldr	r3, [pc, #28]	; (8ded0 <Cl_Mac_GetSystem_Status_Query+0x28>)
   8deb4:	4798      	blx	r3
   8deb6:	4603      	mov	r3, r0
   8deb8:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8deba:	79fb      	ldrb	r3, [r7, #7]
   8debc:	2b00      	cmp	r3, #0
   8debe:	d001      	beq.n	8dec4 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8dec0:	4b04      	ldr	r3, [pc, #16]	; (8ded4 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8dec2:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8dec4:	2300      	movs	r3, #0
}
   8dec6:	4618      	mov	r0, r3
   8dec8:	3708      	adds	r7, #8
   8deca:	46bd      	mov	sp, r7
   8decc:	bd80      	pop	{r7, pc}
   8dece:	bf00      	nop
   8ded0:	0008e2ed 	.word	0x0008e2ed
   8ded4:	00088e75 	.word	0x00088e75

0008ded8 <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8ded8:	b580      	push	{r7, lr}
   8deda:	b082      	sub	sp, #8
   8dedc:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8dede:	4b19      	ldr	r3, [pc, #100]	; (8df44 <Cl_MacCheckforConsoleMessage+0x6c>)
   8dee0:	4798      	blx	r3
   8dee2:	4603      	mov	r3, r0
   8dee4:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8dee6:	79fb      	ldrb	r3, [r7, #7]
   8dee8:	2b00      	cmp	r3, #0
   8deea:	d001      	beq.n	8def0 <Cl_MacCheckforConsoleMessage+0x18>
   8deec:	4b16      	ldr	r3, [pc, #88]	; (8df48 <Cl_MacCheckforConsoleMessage+0x70>)
   8deee:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8def0:	79fb      	ldrb	r3, [r7, #7]
   8def2:	2b00      	cmp	r3, #0
   8def4:	d108      	bne.n	8df08 <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8def6:	4b15      	ldr	r3, [pc, #84]	; (8df4c <Cl_MacCheckforConsoleMessage+0x74>)
   8def8:	4798      	blx	r3
   8defa:	4603      	mov	r3, r0
   8defc:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8defe:	79fb      	ldrb	r3, [r7, #7]
   8df00:	2b00      	cmp	r3, #0
   8df02:	d001      	beq.n	8df08 <Cl_MacCheckforConsoleMessage+0x30>
   8df04:	4b10      	ldr	r3, [pc, #64]	; (8df48 <Cl_MacCheckforConsoleMessage+0x70>)
   8df06:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8df08:	79fb      	ldrb	r3, [r7, #7]
   8df0a:	2b00      	cmp	r3, #0
   8df0c:	d108      	bne.n	8df20 <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8df0e:	4b10      	ldr	r3, [pc, #64]	; (8df50 <Cl_MacCheckforConsoleMessage+0x78>)
   8df10:	4798      	blx	r3
   8df12:	4603      	mov	r3, r0
   8df14:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8df16:	79fb      	ldrb	r3, [r7, #7]
   8df18:	2b00      	cmp	r3, #0
   8df1a:	d001      	beq.n	8df20 <Cl_MacCheckforConsoleMessage+0x48>
   8df1c:	4b0a      	ldr	r3, [pc, #40]	; (8df48 <Cl_MacCheckforConsoleMessage+0x70>)
   8df1e:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8df20:	79fb      	ldrb	r3, [r7, #7]
   8df22:	2b00      	cmp	r3, #0
   8df24:	d108      	bne.n	8df38 <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8df26:	4b0b      	ldr	r3, [pc, #44]	; (8df54 <Cl_MacCheckforConsoleMessage+0x7c>)
   8df28:	4798      	blx	r3
   8df2a:	4603      	mov	r3, r0
   8df2c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8df2e:	79fb      	ldrb	r3, [r7, #7]
   8df30:	2b00      	cmp	r3, #0
   8df32:	d001      	beq.n	8df38 <Cl_MacCheckforConsoleMessage+0x60>
   8df34:	4b04      	ldr	r3, [pc, #16]	; (8df48 <Cl_MacCheckforConsoleMessage+0x70>)
   8df36:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8df38:	2300      	movs	r3, #0
}
   8df3a:	4618      	mov	r0, r3
   8df3c:	3708      	adds	r7, #8
   8df3e:	46bd      	mov	sp, r7
   8df40:	bd80      	pop	{r7, pc}
   8df42:	bf00      	nop
   8df44:	0009b459 	.word	0x0009b459
   8df48:	00088e75 	.word	0x00088e75
   8df4c:	0009b4b9 	.word	0x0009b4b9
   8df50:	0009b499 	.word	0x0009b499
   8df54:	0009b621 	.word	0x0009b621

0008df58 <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8df58:	b480      	push	{r7}
   8df5a:	b083      	sub	sp, #12
   8df5c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8df5e:	2300      	movs	r3, #0
   8df60:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8df62:	4b97      	ldr	r3, [pc, #604]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8df64:	2200      	movs	r2, #0
   8df66:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8df68:	4b96      	ldr	r3, [pc, #600]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8df6a:	2200      	movs	r2, #0
   8df6c:	701a      	strb	r2, [r3, #0]
	
	queue_sequence_counter++;
   8df6e:	4b96      	ldr	r3, [pc, #600]	; (8e1c8 <Cl_MacCreate_Macevent+0x270>)
   8df70:	781b      	ldrb	r3, [r3, #0]
   8df72:	3301      	adds	r3, #1
   8df74:	b2da      	uxtb	r2, r3
   8df76:	4b94      	ldr	r3, [pc, #592]	; (8e1c8 <Cl_MacCreate_Macevent+0x270>)
   8df78:	701a      	strb	r2, [r3, #0]
	if(queue_sequence_counter > 5){
   8df7a:	4b93      	ldr	r3, [pc, #588]	; (8e1c8 <Cl_MacCreate_Macevent+0x270>)
   8df7c:	781b      	ldrb	r3, [r3, #0]
   8df7e:	2b05      	cmp	r3, #5
   8df80:	d902      	bls.n	8df88 <Cl_MacCreate_Macevent+0x30>
		
		queue_sequence_counter = 1;
   8df82:	4b91      	ldr	r3, [pc, #580]	; (8e1c8 <Cl_MacCreate_Macevent+0x270>)
   8df84:	2201      	movs	r2, #1
   8df86:	701a      	strb	r2, [r3, #0]
	}
	
	switch(queue_sequence_counter){
   8df88:	4b8f      	ldr	r3, [pc, #572]	; (8e1c8 <Cl_MacCreate_Macevent+0x270>)
   8df8a:	781b      	ldrb	r3, [r3, #0]
   8df8c:	3b01      	subs	r3, #1
   8df8e:	2b04      	cmp	r3, #4
   8df90:	f200 816c 	bhi.w	8e26c <Cl_MacCreate_Macevent+0x314>
   8df94:	a201      	add	r2, pc, #4	; (adr r2, 8df9c <Cl_MacCreate_Macevent+0x44>)
   8df96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8df9a:	bf00      	nop
   8df9c:	0008dfb1 	.word	0x0008dfb1
   8dfa0:	0008e035 	.word	0x0008e035
   8dfa4:	0008e0b9 	.word	0x0008e0b9
   8dfa8:	0008e13d 	.word	0x0008e13d
   8dfac:	0008e1dd 	.word	0x0008e1dd
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8dfb0:	4b86      	ldr	r3, [pc, #536]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfb2:	785b      	ldrb	r3, [r3, #1]
   8dfb4:	2b00      	cmp	r3, #0
   8dfb6:	d035      	beq.n	8e024 <Cl_MacCreate_Macevent+0xcc>
   8dfb8:	4b84      	ldr	r3, [pc, #528]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfba:	781b      	ldrb	r3, [r3, #0]
   8dfbc:	2b00      	cmp	r3, #0
   8dfbe:	d031      	beq.n	8e024 <Cl_MacCreate_Macevent+0xcc>
		{
			

			Cl_MacNewEvent = true;
   8dfc0:	4b7f      	ldr	r3, [pc, #508]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8dfc2:	2201      	movs	r2, #1
   8dfc4:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
   8dfc6:	4b81      	ldr	r3, [pc, #516]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfc8:	789a      	ldrb	r2, [r3, #2]
   8dfca:	4b7e      	ldr	r3, [pc, #504]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8dfcc:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
   8dfce:	4b7f      	ldr	r3, [pc, #508]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfd0:	781b      	ldrb	r3, [r3, #0]
   8dfd2:	3b01      	subs	r3, #1
   8dfd4:	b2da      	uxtb	r2, r3
   8dfd6:	4b7d      	ldr	r3, [pc, #500]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfd8:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8dfda:	2300      	movs	r3, #0
   8dfdc:	71fb      	strb	r3, [r7, #7]
   8dfde:	e019      	b.n	8e014 <Cl_MacCreate_Macevent+0xbc>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8dfe0:	79fb      	ldrb	r3, [r7, #7]
   8dfe2:	2b09      	cmp	r3, #9
   8dfe4:	d80a      	bhi.n	8dffc <Cl_MacCreate_Macevent+0xa4>
				{
					Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = Cl_MacEventQueueBc.Cl_MacEvent[tempcount+1];
   8dfe6:	79fb      	ldrb	r3, [r7, #7]
   8dfe8:	79fa      	ldrb	r2, [r7, #7]
   8dfea:	3201      	adds	r2, #1
   8dfec:	4977      	ldr	r1, [pc, #476]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dfee:	440a      	add	r2, r1
   8dff0:	7891      	ldrb	r1, [r2, #2]
   8dff2:	4a76      	ldr	r2, [pc, #472]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8dff4:	4413      	add	r3, r2
   8dff6:	460a      	mov	r2, r1
   8dff8:	709a      	strb	r2, [r3, #2]
   8dffa:	e008      	b.n	8e00e <Cl_MacCreate_Macevent+0xb6>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8dffc:	79fb      	ldrb	r3, [r7, #7]
   8dffe:	2b09      	cmp	r3, #9
   8e000:	d90e      	bls.n	8e020 <Cl_MacCreate_Macevent+0xc8>
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
   8e002:	79fb      	ldrb	r3, [r7, #7]
   8e004:	4a71      	ldr	r2, [pc, #452]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8e006:	4413      	add	r3, r2
   8e008:	2200      	movs	r2, #0
   8e00a:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e00c:	e008      	b.n	8e020 <Cl_MacCreate_Macevent+0xc8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e00e:	79fb      	ldrb	r3, [r7, #7]
   8e010:	3301      	adds	r3, #1
   8e012:	71fb      	strb	r3, [r7, #7]
   8e014:	4b6d      	ldr	r3, [pc, #436]	; (8e1cc <Cl_MacCreate_Macevent+0x274>)
   8e016:	781b      	ldrb	r3, [r3, #0]
   8e018:	79fa      	ldrb	r2, [r7, #7]
   8e01a:	429a      	cmp	r2, r3
   8e01c:	d3e0      	bcc.n	8dfe0 <Cl_MacCreate_Macevent+0x88>
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e01e:	e008      	b.n	8e032 <Cl_MacCreate_Macevent+0xda>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e020:	bf00      	nop
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e022:	e006      	b.n	8e032 <Cl_MacCreate_Macevent+0xda>
			}
			
			
		}
		else{
			Cl_MacNewEvent = false;
   8e024:	4b66      	ldr	r3, [pc, #408]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e026:	2200      	movs	r2, #0
   8e028:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e02a:	4b66      	ldr	r3, [pc, #408]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e02c:	2200      	movs	r2, #0
   8e02e:	701a      	strb	r2, [r3, #0]
		}
		
		break;
   8e030:	e11c      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
   8e032:	e11b      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e034:	4b66      	ldr	r3, [pc, #408]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e036:	785b      	ldrb	r3, [r3, #1]
   8e038:	2b00      	cmp	r3, #0
   8e03a:	d035      	beq.n	8e0a8 <Cl_MacCreate_Macevent+0x150>
   8e03c:	4b64      	ldr	r3, [pc, #400]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e03e:	781b      	ldrb	r3, [r3, #0]
   8e040:	2b00      	cmp	r3, #0
   8e042:	d031      	beq.n	8e0a8 <Cl_MacCreate_Macevent+0x150>
		{
	

			Cl_MacNewEvent = true;
   8e044:	4b5e      	ldr	r3, [pc, #376]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e046:	2201      	movs	r2, #1
   8e048:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8e04a:	4b61      	ldr	r3, [pc, #388]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e04c:	789a      	ldrb	r2, [r3, #2]
   8e04e:	4b5d      	ldr	r3, [pc, #372]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e050:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8e052:	4b5f      	ldr	r3, [pc, #380]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e054:	781b      	ldrb	r3, [r3, #0]
   8e056:	3b01      	subs	r3, #1
   8e058:	b2da      	uxtb	r2, r3
   8e05a:	4b5d      	ldr	r3, [pc, #372]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e05c:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e05e:	2300      	movs	r3, #0
   8e060:	71fb      	strb	r3, [r7, #7]
   8e062:	e019      	b.n	8e098 <Cl_MacCreate_Macevent+0x140>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e064:	79fb      	ldrb	r3, [r7, #7]
   8e066:	2b09      	cmp	r3, #9
   8e068:	d80a      	bhi.n	8e080 <Cl_MacCreate_Macevent+0x128>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8e06a:	79fb      	ldrb	r3, [r7, #7]
   8e06c:	79fa      	ldrb	r2, [r7, #7]
   8e06e:	3201      	adds	r2, #1
   8e070:	4957      	ldr	r1, [pc, #348]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e072:	440a      	add	r2, r1
   8e074:	7891      	ldrb	r1, [r2, #2]
   8e076:	4a56      	ldr	r2, [pc, #344]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e078:	4413      	add	r3, r2
   8e07a:	460a      	mov	r2, r1
   8e07c:	709a      	strb	r2, [r3, #2]
   8e07e:	e008      	b.n	8e092 <Cl_MacCreate_Macevent+0x13a>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e080:	79fb      	ldrb	r3, [r7, #7]
   8e082:	2b09      	cmp	r3, #9
   8e084:	d90e      	bls.n	8e0a4 <Cl_MacCreate_Macevent+0x14c>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8e086:	79fb      	ldrb	r3, [r7, #7]
   8e088:	4a51      	ldr	r2, [pc, #324]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e08a:	4413      	add	r3, r2
   8e08c:	2200      	movs	r2, #0
   8e08e:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e090:	e008      	b.n	8e0a4 <Cl_MacCreate_Macevent+0x14c>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e092:	79fb      	ldrb	r3, [r7, #7]
   8e094:	3301      	adds	r3, #1
   8e096:	71fb      	strb	r3, [r7, #7]
   8e098:	4b4d      	ldr	r3, [pc, #308]	; (8e1d0 <Cl_MacCreate_Macevent+0x278>)
   8e09a:	781b      	ldrb	r3, [r3, #0]
   8e09c:	79fa      	ldrb	r2, [r7, #7]
   8e09e:	429a      	cmp	r2, r3
   8e0a0:	d3e0      	bcc.n	8e064 <Cl_MacCreate_Macevent+0x10c>
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e0a2:	e008      	b.n	8e0b6 <Cl_MacCreate_Macevent+0x15e>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e0a4:	bf00      	nop
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e0a6:	e006      	b.n	8e0b6 <Cl_MacCreate_Macevent+0x15e>
			}
	
	
		}
	else{
		Cl_MacNewEvent = false;
   8e0a8:	4b45      	ldr	r3, [pc, #276]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e0aa:	2200      	movs	r2, #0
   8e0ac:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e0ae:	4b45      	ldr	r3, [pc, #276]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e0b0:	2200      	movs	r2, #0
   8e0b2:	701a      	strb	r2, [r3, #0]
	}
		break;
   8e0b4:	e0da      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
   8e0b6:	e0d9      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e0b8:	4b46      	ldr	r3, [pc, #280]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0ba:	785b      	ldrb	r3, [r3, #1]
   8e0bc:	2b00      	cmp	r3, #0
   8e0be:	d035      	beq.n	8e12c <Cl_MacCreate_Macevent+0x1d4>
   8e0c0:	4b44      	ldr	r3, [pc, #272]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0c2:	781b      	ldrb	r3, [r3, #0]
   8e0c4:	2b00      	cmp	r3, #0
   8e0c6:	d031      	beq.n	8e12c <Cl_MacCreate_Macevent+0x1d4>
		{
			

			Cl_MacNewEvent = true;
   8e0c8:	4b3d      	ldr	r3, [pc, #244]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e0ca:	2201      	movs	r2, #1
   8e0cc:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
   8e0ce:	4b41      	ldr	r3, [pc, #260]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0d0:	789a      	ldrb	r2, [r3, #2]
   8e0d2:	4b3c      	ldr	r3, [pc, #240]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e0d4:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
   8e0d6:	4b3f      	ldr	r3, [pc, #252]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0d8:	781b      	ldrb	r3, [r3, #0]
   8e0da:	3b01      	subs	r3, #1
   8e0dc:	b2da      	uxtb	r2, r3
   8e0de:	4b3d      	ldr	r3, [pc, #244]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0e0:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e0e2:	2300      	movs	r3, #0
   8e0e4:	71fb      	strb	r3, [r7, #7]
   8e0e6:	e019      	b.n	8e11c <Cl_MacCreate_Macevent+0x1c4>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e0e8:	79fb      	ldrb	r3, [r7, #7]
   8e0ea:	2b09      	cmp	r3, #9
   8e0ec:	d80a      	bhi.n	8e104 <Cl_MacCreate_Macevent+0x1ac>
				{
					Cl_MacEventQueue4.Cl_MacEvent[tempcount] = Cl_MacEventQueue4.Cl_MacEvent[tempcount+1];
   8e0ee:	79fb      	ldrb	r3, [r7, #7]
   8e0f0:	79fa      	ldrb	r2, [r7, #7]
   8e0f2:	3201      	adds	r2, #1
   8e0f4:	4937      	ldr	r1, [pc, #220]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0f6:	440a      	add	r2, r1
   8e0f8:	7891      	ldrb	r1, [r2, #2]
   8e0fa:	4a36      	ldr	r2, [pc, #216]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e0fc:	4413      	add	r3, r2
   8e0fe:	460a      	mov	r2, r1
   8e100:	709a      	strb	r2, [r3, #2]
   8e102:	e008      	b.n	8e116 <Cl_MacCreate_Macevent+0x1be>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e104:	79fb      	ldrb	r3, [r7, #7]
   8e106:	2b09      	cmp	r3, #9
   8e108:	d90e      	bls.n	8e128 <Cl_MacCreate_Macevent+0x1d0>
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
   8e10a:	79fb      	ldrb	r3, [r7, #7]
   8e10c:	4a31      	ldr	r2, [pc, #196]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e10e:	4413      	add	r3, r2
   8e110:	2200      	movs	r2, #0
   8e112:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e114:	e008      	b.n	8e128 <Cl_MacCreate_Macevent+0x1d0>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e116:	79fb      	ldrb	r3, [r7, #7]
   8e118:	3301      	adds	r3, #1
   8e11a:	71fb      	strb	r3, [r7, #7]
   8e11c:	4b2d      	ldr	r3, [pc, #180]	; (8e1d4 <Cl_MacCreate_Macevent+0x27c>)
   8e11e:	781b      	ldrb	r3, [r3, #0]
   8e120:	79fa      	ldrb	r2, [r7, #7]
   8e122:	429a      	cmp	r2, r3
   8e124:	d3e0      	bcc.n	8e0e8 <Cl_MacCreate_Macevent+0x190>
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e126:	e008      	b.n	8e13a <Cl_MacCreate_Macevent+0x1e2>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e128:	bf00      	nop
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e12a:	e006      	b.n	8e13a <Cl_MacCreate_Macevent+0x1e2>
			}
			
			
		}
		else{
		Cl_MacNewEvent = false;
   8e12c:	4b24      	ldr	r3, [pc, #144]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e12e:	2200      	movs	r2, #0
   8e130:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e132:	4b24      	ldr	r3, [pc, #144]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e134:	2200      	movs	r2, #0
   8e136:	701a      	strb	r2, [r3, #0]
	}
		
		break;
   8e138:	e098      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
   8e13a:	e097      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e13c:	4b26      	ldr	r3, [pc, #152]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e13e:	785b      	ldrb	r3, [r3, #1]
   8e140:	2b00      	cmp	r3, #0
   8e142:	d035      	beq.n	8e1b0 <Cl_MacCreate_Macevent+0x258>
   8e144:	4b24      	ldr	r3, [pc, #144]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e146:	781b      	ldrb	r3, [r3, #0]
   8e148:	2b00      	cmp	r3, #0
   8e14a:	d031      	beq.n	8e1b0 <Cl_MacCreate_Macevent+0x258>
			{
				

				Cl_MacNewEvent = true;
   8e14c:	4b1c      	ldr	r3, [pc, #112]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e14e:	2201      	movs	r2, #1
   8e150:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8e152:	4b21      	ldr	r3, [pc, #132]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e154:	789a      	ldrb	r2, [r3, #2]
   8e156:	4b1b      	ldr	r3, [pc, #108]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e158:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8e15a:	4b1f      	ldr	r3, [pc, #124]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e15c:	781b      	ldrb	r3, [r3, #0]
   8e15e:	3b01      	subs	r3, #1
   8e160:	b2da      	uxtb	r2, r3
   8e162:	4b1d      	ldr	r3, [pc, #116]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e164:	701a      	strb	r2, [r3, #0]
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e166:	2300      	movs	r3, #0
   8e168:	71fb      	strb	r3, [r7, #7]
   8e16a:	e019      	b.n	8e1a0 <Cl_MacCreate_Macevent+0x248>
				{
					if(tempcount < MAC_EVENT_COUNT_MAX)
   8e16c:	79fb      	ldrb	r3, [r7, #7]
   8e16e:	2b09      	cmp	r3, #9
   8e170:	d80a      	bhi.n	8e188 <Cl_MacCreate_Macevent+0x230>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8e172:	79fb      	ldrb	r3, [r7, #7]
   8e174:	79fa      	ldrb	r2, [r7, #7]
   8e176:	3201      	adds	r2, #1
   8e178:	4917      	ldr	r1, [pc, #92]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e17a:	440a      	add	r2, r1
   8e17c:	7891      	ldrb	r1, [r2, #2]
   8e17e:	4a16      	ldr	r2, [pc, #88]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e180:	4413      	add	r3, r2
   8e182:	460a      	mov	r2, r1
   8e184:	709a      	strb	r2, [r3, #2]
   8e186:	e008      	b.n	8e19a <Cl_MacCreate_Macevent+0x242>

						
					}
					else
					{
						if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e188:	79fb      	ldrb	r3, [r7, #7]
   8e18a:	2b09      	cmp	r3, #9
   8e18c:	d90e      	bls.n	8e1ac <Cl_MacCreate_Macevent+0x254>
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
   8e18e:	79fb      	ldrb	r3, [r7, #7]
   8e190:	4a11      	ldr	r2, [pc, #68]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e192:	4413      	add	r3, r2
   8e194:	2200      	movs	r2, #0
   8e196:	709a      	strb	r2, [r3, #2]
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e198:	e008      	b.n	8e1ac <Cl_MacCreate_Macevent+0x254>

				Cl_MacNewEvent = true;
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e19a:	79fb      	ldrb	r3, [r7, #7]
   8e19c:	3301      	adds	r3, #1
   8e19e:	71fb      	strb	r3, [r7, #7]
   8e1a0:	4b0d      	ldr	r3, [pc, #52]	; (8e1d8 <Cl_MacCreate_Macevent+0x280>)
   8e1a2:	781b      	ldrb	r3, [r3, #0]
   8e1a4:	79fa      	ldrb	r2, [r7, #7]
   8e1a6:	429a      	cmp	r2, r3
   8e1a8:	d3e0      	bcc.n	8e16c <Cl_MacCreate_Macevent+0x214>
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e1aa:	e008      	b.n	8e1be <Cl_MacCreate_Macevent+0x266>
						if(tempcount >= MAC_EVENT_COUNT_MAX)
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e1ac:	bf00      	nop
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e1ae:	e006      	b.n	8e1be <Cl_MacCreate_Macevent+0x266>
				}
				
				
			}
			else{
		Cl_MacNewEvent = false;
   8e1b0:	4b03      	ldr	r3, [pc, #12]	; (8e1c0 <Cl_MacCreate_Macevent+0x268>)
   8e1b2:	2200      	movs	r2, #0
   8e1b4:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e1b6:	4b03      	ldr	r3, [pc, #12]	; (8e1c4 <Cl_MacCreate_Macevent+0x26c>)
   8e1b8:	2200      	movs	r2, #0
   8e1ba:	701a      	strb	r2, [r3, #0]
	}
			
		break;
   8e1bc:	e056      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
   8e1be:	e055      	b.n	8e26c <Cl_MacCreate_Macevent+0x314>
   8e1c0:	200719d8 	.word	0x200719d8
   8e1c4:	200719d6 	.word	0x200719d6
   8e1c8:	200719d9 	.word	0x200719d9
   8e1cc:	200724dc 	.word	0x200724dc
   8e1d0:	20072424 	.word	0x20072424
   8e1d4:	200722b8 	.word	0x200722b8
   8e1d8:	20072314 	.word	0x20072314
		case 5 : // timer events
		if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8e1dc:	4b26      	ldr	r3, [pc, #152]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e1de:	785b      	ldrb	r3, [r3, #1]
   8e1e0:	2b00      	cmp	r3, #0
   8e1e2:	d03c      	beq.n	8e25e <Cl_MacCreate_Macevent+0x306>
   8e1e4:	4b24      	ldr	r3, [pc, #144]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e1e6:	781b      	ldrb	r3, [r3, #0]
   8e1e8:	2b00      	cmp	r3, #0
   8e1ea:	d038      	beq.n	8e25e <Cl_MacCreate_Macevent+0x306>
		{
			

			Cl_MacNewEvent = true;
   8e1ec:	4b23      	ldr	r3, [pc, #140]	; (8e27c <Cl_MacCreate_Macevent+0x324>)
   8e1ee:	2201      	movs	r2, #1
   8e1f0:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8e1f2:	4b21      	ldr	r3, [pc, #132]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e1f4:	789a      	ldrb	r2, [r3, #2]
   8e1f6:	4b22      	ldr	r3, [pc, #136]	; (8e280 <Cl_MacCreate_Macevent+0x328>)
   8e1f8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8e1fa:	4b1f      	ldr	r3, [pc, #124]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e1fc:	781b      	ldrb	r3, [r3, #0]
   8e1fe:	3b01      	subs	r3, #1
   8e200:	b2da      	uxtb	r2, r3
   8e202:	4b1d      	ldr	r3, [pc, #116]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e204:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e206:	2300      	movs	r3, #0
   8e208:	71fb      	strb	r3, [r7, #7]
   8e20a:	e019      	b.n	8e240 <Cl_MacCreate_Macevent+0x2e8>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e20c:	79fb      	ldrb	r3, [r7, #7]
   8e20e:	2b09      	cmp	r3, #9
   8e210:	d80a      	bhi.n	8e228 <Cl_MacCreate_Macevent+0x2d0>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8e212:	79fb      	ldrb	r3, [r7, #7]
   8e214:	79fa      	ldrb	r2, [r7, #7]
   8e216:	3201      	adds	r2, #1
   8e218:	4917      	ldr	r1, [pc, #92]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e21a:	440a      	add	r2, r1
   8e21c:	7891      	ldrb	r1, [r2, #2]
   8e21e:	4a16      	ldr	r2, [pc, #88]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e220:	4413      	add	r3, r2
   8e222:	460a      	mov	r2, r1
   8e224:	709a      	strb	r2, [r3, #2]
   8e226:	e008      	b.n	8e23a <Cl_MacCreate_Macevent+0x2e2>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e228:	79fb      	ldrb	r3, [r7, #7]
   8e22a:	2b09      	cmp	r3, #9
   8e22c:	d90e      	bls.n	8e24c <Cl_MacCreate_Macevent+0x2f4>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8e22e:	79fb      	ldrb	r3, [r7, #7]
   8e230:	4a11      	ldr	r2, [pc, #68]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e232:	4413      	add	r3, r2
   8e234:	2200      	movs	r2, #0
   8e236:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e238:	e008      	b.n	8e24c <Cl_MacCreate_Macevent+0x2f4>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e23a:	79fb      	ldrb	r3, [r7, #7]
   8e23c:	3301      	adds	r3, #1
   8e23e:	71fb      	strb	r3, [r7, #7]
   8e240:	4b0d      	ldr	r3, [pc, #52]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e242:	781b      	ldrb	r3, [r3, #0]
   8e244:	79fa      	ldrb	r2, [r7, #7]
   8e246:	429a      	cmp	r2, r3
   8e248:	d3e0      	bcc.n	8e20c <Cl_MacCreate_Macevent+0x2b4>
   8e24a:	e000      	b.n	8e24e <Cl_MacCreate_Macevent+0x2f6>
					if(tempcount >= MAC_EVENT_COUNT_MAX)
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e24c:	bf00      	nop
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8e24e:	4b0a      	ldr	r3, [pc, #40]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e250:	781b      	ldrb	r3, [r3, #0]
   8e252:	461a      	mov	r2, r3
   8e254:	4b08      	ldr	r3, [pc, #32]	; (8e278 <Cl_MacCreate_Macevent+0x320>)
   8e256:	4413      	add	r3, r2
   8e258:	2200      	movs	r2, #0
   8e25a:	709a      	strb	r2, [r3, #2]
		{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
			
		}
		break;
   8e25c:	e005      	b.n	8e26a <Cl_MacCreate_Macevent+0x312>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8e25e:	4b07      	ldr	r3, [pc, #28]	; (8e27c <Cl_MacCreate_Macevent+0x324>)
   8e260:	2200      	movs	r2, #0
   8e262:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e264:	4b06      	ldr	r3, [pc, #24]	; (8e280 <Cl_MacCreate_Macevent+0x328>)
   8e266:	2200      	movs	r2, #0
   8e268:	701a      	strb	r2, [r3, #0]
			
		}
		break;
   8e26a:	bf00      	nop
			
			
		}
	*/

	return CL_OK;
   8e26c:	2300      	movs	r3, #0
}
   8e26e:	4618      	mov	r0, r3
   8e270:	370c      	adds	r7, #12
   8e272:	46bd      	mov	sp, r7
   8e274:	bc80      	pop	{r7}
   8e276:	4770      	bx	lr
   8e278:	20072190 	.word	0x20072190
   8e27c:	200719d8 	.word	0x200719d8
   8e280:	200719d6 	.word	0x200719d6

0008e284 <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8e284:	b480      	push	{r7}
   8e286:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8e288:	2300      	movs	r3, #0
	
}
   8e28a:	4618      	mov	r0, r3
   8e28c:	46bd      	mov	sp, r7
   8e28e:	bc80      	pop	{r7}
   8e290:	4770      	bx	lr
   8e292:	bf00      	nop

0008e294 <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8e294:	b580      	push	{r7, lr}
   8e296:	b082      	sub	sp, #8
   8e298:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8e29a:	4b07      	ldr	r3, [pc, #28]	; (8e2b8 <Cl_Mac_CheckforAlarms+0x24>)
   8e29c:	4798      	blx	r3
   8e29e:	4603      	mov	r3, r0
   8e2a0:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e2a2:	79fb      	ldrb	r3, [r7, #7]
   8e2a4:	2b00      	cmp	r3, #0
   8e2a6:	d001      	beq.n	8e2ac <Cl_Mac_CheckforAlarms+0x18>
   8e2a8:	4b04      	ldr	r3, [pc, #16]	; (8e2bc <Cl_Mac_CheckforAlarms+0x28>)
   8e2aa:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8e2ac:	2300      	movs	r3, #0
}
   8e2ae:	4618      	mov	r0, r3
   8e2b0:	3708      	adds	r7, #8
   8e2b2:	46bd      	mov	sp, r7
   8e2b4:	bd80      	pop	{r7, pc}
   8e2b6:	bf00      	nop
   8e2b8:	000814f9 	.word	0x000814f9
   8e2bc:	00088e75 	.word	0x00088e75

0008e2c0 <Cl_Mac_CheckforBCEvent>:

Cl_ReturnCodeType Cl_Mac_CheckforBCEvent(void)
{
   8e2c0:	b580      	push	{r7, lr}
   8e2c2:	b082      	sub	sp, #8
   8e2c4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_CheckBcEvent();
   8e2c6:	4b07      	ldr	r3, [pc, #28]	; (8e2e4 <Cl_Mac_CheckforBCEvent+0x24>)
   8e2c8:	4798      	blx	r3
   8e2ca:	4603      	mov	r3, r0
   8e2cc:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e2ce:	79fb      	ldrb	r3, [r7, #7]
   8e2d0:	2b00      	cmp	r3, #0
   8e2d2:	d001      	beq.n	8e2d8 <Cl_Mac_CheckforBCEvent+0x18>
   8e2d4:	4b04      	ldr	r3, [pc, #16]	; (8e2e8 <Cl_Mac_CheckforBCEvent+0x28>)
   8e2d6:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
	return CL_OK;
   8e2d8:	2300      	movs	r3, #0
}
   8e2da:	4618      	mov	r0, r3
   8e2dc:	3708      	adds	r7, #8
   8e2de:	46bd      	mov	sp, r7
   8e2e0:	bd80      	pop	{r7, pc}
   8e2e2:	bf00      	nop
   8e2e4:	00082f19 	.word	0x00082f19
   8e2e8:	00088e75 	.word	0x00088e75

0008e2ec <Cl_SysStat_System_Status_Query>:
static uint8_t Count_500ms =0;
extern float cl_utilities_CalConductivity(uint16_t ,float);
float PS1_bar =0,PS2_bar =0,PS3_bar =0;

Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8e2ec:	b580      	push	{r7, lr}
   8e2ee:	b098      	sub	sp, #96	; 0x60
   8e2f0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1, raw_data =0, cal_temp =0;
   8e2f2:	2300      	movs	r3, #0
   8e2f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   8e2f8:	2300      	movs	r3, #0
   8e2fa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8e2fe:	1d3b      	adds	r3, r7, #4
   8e300:	2156      	movs	r1, #86	; 0x56
   8e302:	4618      	mov	r0, r3
   8e304:	4b97      	ldr	r3, [pc, #604]	; (8e564 <Cl_SysStat_System_Status_Query+0x278>)
   8e306:	4798      	blx	r3
   8e308:	4603      	mov	r3, r0
   8e30a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8e30e:	4b96      	ldr	r3, [pc, #600]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e310:	2201      	movs	r2, #1
   8e312:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8e314:	4b94      	ldr	r3, [pc, #592]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e316:	2201      	movs	r2, #1
   8e318:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8e31a:	1d3b      	adds	r3, r7, #4
   8e31c:	4618      	mov	r0, r3
   8e31e:	4b93      	ldr	r3, [pc, #588]	; (8e56c <Cl_SysStat_System_Status_Query+0x280>)
   8e320:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8e322:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8e324:	4b90      	ldr	r3, [pc, #576]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e326:	869a      	strh	r2, [r3, #52]	; 0x34
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8e328:	8bfa      	ldrh	r2, [r7, #30]
   8e32a:	4b8f      	ldr	r3, [pc, #572]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e32c:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8e32e:	8abb      	ldrh	r3, [r7, #20]
   8e330:	2b00      	cmp	r3, #0
   8e332:	d007      	beq.n	8e344 <Cl_SysStat_System_Status_Query+0x58>
   8e334:	8abb      	ldrh	r3, [r7, #20]
   8e336:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8e33a:	4293      	cmp	r3, r2
   8e33c:	d002      	beq.n	8e344 <Cl_SysStat_System_Status_Query+0x58>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8e33e:	8aba      	ldrh	r2, [r7, #20]
   8e340:	4b89      	ldr	r3, [pc, #548]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e342:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8e344:	8afb      	ldrh	r3, [r7, #22]
   8e346:	2b00      	cmp	r3, #0
   8e348:	d007      	beq.n	8e35a <Cl_SysStat_System_Status_Query+0x6e>
   8e34a:	8afb      	ldrh	r3, [r7, #22]
   8e34c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8e350:	4293      	cmp	r3, r2
   8e352:	d002      	beq.n	8e35a <Cl_SysStat_System_Status_Query+0x6e>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8e354:	8afa      	ldrh	r2, [r7, #22]
   8e356:	4b84      	ldr	r3, [pc, #528]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e358:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8e35a:	8bba      	ldrh	r2, [r7, #28]
   8e35c:	4b82      	ldr	r3, [pc, #520]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e35e:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8e360:	89ba      	ldrh	r2, [r7, #12]
   8e362:	4b81      	ldr	r3, [pc, #516]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e364:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8e366:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8e36a:	4b7f      	ldr	r3, [pc, #508]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e36c:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8e36e:	88fa      	ldrh	r2, [r7, #6]
   8e370:	4b7d      	ldr	r3, [pc, #500]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e372:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8e374:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   8e376:	4b7c      	ldr	r3, [pc, #496]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e378:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8e37a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8e37c:	4b7a      	ldr	r3, [pc, #488]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e37e:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8e380:	4b79      	ldr	r3, [pc, #484]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e382:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   8e384:	4b78      	ldr	r3, [pc, #480]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e386:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8e388:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   8e38a:	4b77      	ldr	r3, [pc, #476]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e38c:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8e38e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8e390:	4b75      	ldr	r3, [pc, #468]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e392:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8e394:	8c3a      	ldrh	r2, [r7, #32]
   8e396:	4b74      	ldr	r3, [pc, #464]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e398:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8e39a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
   8e39e:	4b72      	ldr	r3, [pc, #456]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3a0:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8e3a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8e3a4:	4b70      	ldr	r3, [pc, #448]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3a6:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8e3a8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8e3ac:	2b00      	cmp	r3, #0
   8e3ae:	bf14      	ite	ne
   8e3b0:	2301      	movne	r3, #1
   8e3b2:	2300      	moveq	r3, #0
   8e3b4:	b2da      	uxtb	r2, r3
   8e3b6:	4b6c      	ldr	r3, [pc, #432]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8e3bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8e3c0:	2b00      	cmp	r3, #0
   8e3c2:	bf14      	ite	ne
   8e3c4:	2301      	movne	r3, #1
   8e3c6:	2300      	moveq	r3, #0
   8e3c8:	b2da      	uxtb	r2, r3
   8e3ca:	4b67      	ldr	r3, [pc, #412]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8e3d0:	793b      	ldrb	r3, [r7, #4]
   8e3d2:	2b00      	cmp	r3, #0
   8e3d4:	bf14      	ite	ne
   8e3d6:	2301      	movne	r3, #1
   8e3d8:	2300      	moveq	r3, #0
   8e3da:	b2da      	uxtb	r2, r3
   8e3dc:	4b62      	ldr	r3, [pc, #392]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3de:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8e3e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e3e4:	2b00      	cmp	r3, #0
   8e3e6:	bf14      	ite	ne
   8e3e8:	2301      	movne	r3, #1
   8e3ea:	2300      	moveq	r3, #0
   8e3ec:	b2da      	uxtb	r2, r3
   8e3ee:	4b5e      	ldr	r3, [pc, #376]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8e3f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8e3f6:	4b5c      	ldr	r3, [pc, #368]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3f8:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8e3fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8e3fc:	4b5a      	ldr	r3, [pc, #360]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e3fe:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8e400:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8e402:	4b59      	ldr	r3, [pc, #356]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e404:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8e406:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
   8e40a:	4b57      	ldr	r3, [pc, #348]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e40c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8e410:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8e412:	4b55      	ldr	r3, [pc, #340]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e414:	841a      	strh	r2, [r3, #32]
//	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
	raw_data = sv_sys_statbuffer.Temp1status;
   8e416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8e418:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768); 
   8e41c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e420:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e424:	fb02 f303 	mul.w	r3, r2, r3
   8e428:	2b00      	cmp	r3, #0
   8e42a:	da02      	bge.n	8e432 <Cl_SysStat_System_Status_Query+0x146>
   8e42c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e430:	33ff      	adds	r3, #255	; 0xff
   8e432:	141b      	asrs	r3, r3, #16
   8e434:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e438:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e43c:	4618      	mov	r0, r3
   8e43e:	4b4c      	ldr	r3, [pc, #304]	; (8e570 <Cl_SysStat_System_Status_Query+0x284>)
   8e440:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e442:	4b4c      	ldr	r3, [pc, #304]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e444:	681a      	ldr	r2, [r3, #0]
   8e446:	4b4c      	ldr	r3, [pc, #304]	; (8e578 <Cl_SysStat_System_Status_Query+0x28c>)
   8e448:	494c      	ldr	r1, [pc, #304]	; (8e57c <Cl_SysStat_System_Status_Query+0x290>)
   8e44a:	4610      	mov	r0, r2
   8e44c:	4798      	blx	r3
   8e44e:	4603      	mov	r3, r0
   8e450:	4618      	mov	r0, r3
   8e452:	4b48      	ldr	r3, [pc, #288]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e454:	681a      	ldr	r2, [r3, #0]
   8e456:	4b4a      	ldr	r3, [pc, #296]	; (8e580 <Cl_SysStat_System_Status_Query+0x294>)
   8e458:	4611      	mov	r1, r2
   8e45a:	4798      	blx	r3
   8e45c:	4603      	mov	r3, r0
   8e45e:	461a      	mov	r2, r3
   8e460:	4b48      	ldr	r3, [pc, #288]	; (8e584 <Cl_SysStat_System_Status_Query+0x298>)
   8e462:	4949      	ldr	r1, [pc, #292]	; (8e588 <Cl_SysStat_System_Status_Query+0x29c>)
   8e464:	4610      	mov	r0, r2
   8e466:	4798      	blx	r3
   8e468:	4603      	mov	r3, r0
   8e46a:	461a      	mov	r2, r3
   8e46c:	4b41      	ldr	r3, [pc, #260]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e46e:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp1status = res_temp_value  -75;
   8e470:	4b40      	ldr	r3, [pc, #256]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e472:	681a      	ldr	r2, [r3, #0]
   8e474:	4b45      	ldr	r3, [pc, #276]	; (8e58c <Cl_SysStat_System_Status_Query+0x2a0>)
   8e476:	4946      	ldr	r1, [pc, #280]	; (8e590 <Cl_SysStat_System_Status_Query+0x2a4>)
   8e478:	4610      	mov	r0, r2
   8e47a:	4798      	blx	r3
   8e47c:	4603      	mov	r3, r0
   8e47e:	461a      	mov	r2, r3
   8e480:	4b44      	ldr	r3, [pc, #272]	; (8e594 <Cl_SysStat_System_Status_Query+0x2a8>)
   8e482:	4610      	mov	r0, r2
   8e484:	4798      	blx	r3
   8e486:	4603      	mov	r3, r0
   8e488:	b29a      	uxth	r2, r3
   8e48a:	4b37      	ldr	r3, [pc, #220]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e48c:	851a      	strh	r2, [r3, #40]	; 0x28
//	cl_sys_statbuffer.Temp1status = res_temp_value -80 ;			
				
//	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
	raw_data = sv_sys_statbuffer.Temp2status;
   8e48e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e490:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e494:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e498:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e49c:	fb02 f303 	mul.w	r3, r2, r3
   8e4a0:	2b00      	cmp	r3, #0
   8e4a2:	da02      	bge.n	8e4aa <Cl_SysStat_System_Status_Query+0x1be>
   8e4a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e4a8:	33ff      	adds	r3, #255	; 0xff
   8e4aa:	141b      	asrs	r3, r3, #16
   8e4ac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e4b0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e4b4:	4618      	mov	r0, r3
   8e4b6:	4b2e      	ldr	r3, [pc, #184]	; (8e570 <Cl_SysStat_System_Status_Query+0x284>)
   8e4b8:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e4ba:	4b2e      	ldr	r3, [pc, #184]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e4bc:	681a      	ldr	r2, [r3, #0]
   8e4be:	4b2e      	ldr	r3, [pc, #184]	; (8e578 <Cl_SysStat_System_Status_Query+0x28c>)
   8e4c0:	492e      	ldr	r1, [pc, #184]	; (8e57c <Cl_SysStat_System_Status_Query+0x290>)
   8e4c2:	4610      	mov	r0, r2
   8e4c4:	4798      	blx	r3
   8e4c6:	4603      	mov	r3, r0
   8e4c8:	4618      	mov	r0, r3
   8e4ca:	4b2a      	ldr	r3, [pc, #168]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e4cc:	681a      	ldr	r2, [r3, #0]
   8e4ce:	4b2c      	ldr	r3, [pc, #176]	; (8e580 <Cl_SysStat_System_Status_Query+0x294>)
   8e4d0:	4611      	mov	r1, r2
   8e4d2:	4798      	blx	r3
   8e4d4:	4603      	mov	r3, r0
   8e4d6:	461a      	mov	r2, r3
   8e4d8:	4b2a      	ldr	r3, [pc, #168]	; (8e584 <Cl_SysStat_System_Status_Query+0x298>)
   8e4da:	492b      	ldr	r1, [pc, #172]	; (8e588 <Cl_SysStat_System_Status_Query+0x29c>)
   8e4dc:	4610      	mov	r0, r2
   8e4de:	4798      	blx	r3
   8e4e0:	4603      	mov	r3, r0
   8e4e2:	461a      	mov	r2, r3
   8e4e4:	4b23      	ldr	r3, [pc, #140]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e4e6:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp2status = res_temp_value -25;
   8e4e8:	4b22      	ldr	r3, [pc, #136]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e4ea:	681a      	ldr	r2, [r3, #0]
   8e4ec:	4b27      	ldr	r3, [pc, #156]	; (8e58c <Cl_SysStat_System_Status_Query+0x2a0>)
   8e4ee:	492a      	ldr	r1, [pc, #168]	; (8e598 <Cl_SysStat_System_Status_Query+0x2ac>)
   8e4f0:	4610      	mov	r0, r2
   8e4f2:	4798      	blx	r3
   8e4f4:	4603      	mov	r3, r0
   8e4f6:	461a      	mov	r2, r3
   8e4f8:	4b26      	ldr	r3, [pc, #152]	; (8e594 <Cl_SysStat_System_Status_Query+0x2a8>)
   8e4fa:	4610      	mov	r0, r2
   8e4fc:	4798      	blx	r3
   8e4fe:	4603      	mov	r3, r0
   8e500:	b29a      	uxth	r2, r3
   8e502:	4b19      	ldr	r3, [pc, #100]	; (8e568 <Cl_SysStat_System_Status_Query+0x27c>)
   8e504:	855a      	strh	r2, [r3, #42]	; 0x2a
//	cl_sys_statbuffer.Temp2status = res_temp_value +20 -770;
	
//	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
	raw_data = sv_sys_statbuffer.Temp3status;
   8e506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8e508:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e50c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e510:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e514:	fb02 f303 	mul.w	r3, r2, r3
   8e518:	2b00      	cmp	r3, #0
   8e51a:	da02      	bge.n	8e522 <Cl_SysStat_System_Status_Query+0x236>
   8e51c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e520:	33ff      	adds	r3, #255	; 0xff
   8e522:	141b      	asrs	r3, r3, #16
   8e524:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e528:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e52c:	4618      	mov	r0, r3
   8e52e:	4b10      	ldr	r3, [pc, #64]	; (8e570 <Cl_SysStat_System_Status_Query+0x284>)
   8e530:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e532:	4b10      	ldr	r3, [pc, #64]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e534:	681a      	ldr	r2, [r3, #0]
   8e536:	4b10      	ldr	r3, [pc, #64]	; (8e578 <Cl_SysStat_System_Status_Query+0x28c>)
   8e538:	4910      	ldr	r1, [pc, #64]	; (8e57c <Cl_SysStat_System_Status_Query+0x290>)
   8e53a:	4610      	mov	r0, r2
   8e53c:	4798      	blx	r3
   8e53e:	4603      	mov	r3, r0
   8e540:	4618      	mov	r0, r3
   8e542:	4b0c      	ldr	r3, [pc, #48]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e544:	681a      	ldr	r2, [r3, #0]
   8e546:	4b0e      	ldr	r3, [pc, #56]	; (8e580 <Cl_SysStat_System_Status_Query+0x294>)
   8e548:	4611      	mov	r1, r2
   8e54a:	4798      	blx	r3
   8e54c:	4603      	mov	r3, r0
   8e54e:	461a      	mov	r2, r3
   8e550:	4b0c      	ldr	r3, [pc, #48]	; (8e584 <Cl_SysStat_System_Status_Query+0x298>)
   8e552:	490d      	ldr	r1, [pc, #52]	; (8e588 <Cl_SysStat_System_Status_Query+0x29c>)
   8e554:	4610      	mov	r0, r2
   8e556:	4798      	blx	r3
   8e558:	4603      	mov	r3, r0
   8e55a:	461a      	mov	r2, r3
   8e55c:	4b05      	ldr	r3, [pc, #20]	; (8e574 <Cl_SysStat_System_Status_Query+0x288>)
   8e55e:	601a      	str	r2, [r3, #0]
   8e560:	e01c      	b.n	8e59c <Cl_SysStat_System_Status_Query+0x2b0>
   8e562:	bf00      	nop
   8e564:	00093051 	.word	0x00093051
   8e568:	2007221c 	.word	0x2007221c
   8e56c:	00099fe1 	.word	0x00099fe1
   8e570:	0008fc39 	.word	0x0008fc39
   8e574:	20071a48 	.word	0x20071a48
   8e578:	000a6591 	.word	0x000a6591
   8e57c:	41100000 	.word	0x41100000
   8e580:	000a6381 	.word	0x000a6381
   8e584:	000a66f9 	.word	0x000a66f9
   8e588:	41200000 	.word	0x41200000
   8e58c:	000a637d 	.word	0x000a637d
   8e590:	42960000 	.word	0x42960000
   8e594:	000a6969 	.word	0x000a6969
   8e598:	41c80000 	.word	0x41c80000
	cl_sys_statbuffer.Temp3status = res_temp_value -20 ;
   8e59c:	4b35      	ldr	r3, [pc, #212]	; (8e674 <Cl_SysStat_System_Status_Query+0x388>)
   8e59e:	681a      	ldr	r2, [r3, #0]
   8e5a0:	4b35      	ldr	r3, [pc, #212]	; (8e678 <Cl_SysStat_System_Status_Query+0x38c>)
   8e5a2:	4936      	ldr	r1, [pc, #216]	; (8e67c <Cl_SysStat_System_Status_Query+0x390>)
   8e5a4:	4610      	mov	r0, r2
   8e5a6:	4798      	blx	r3
   8e5a8:	4603      	mov	r3, r0
   8e5aa:	461a      	mov	r2, r3
   8e5ac:	4b34      	ldr	r3, [pc, #208]	; (8e680 <Cl_SysStat_System_Status_Query+0x394>)
   8e5ae:	4610      	mov	r0, r2
   8e5b0:	4798      	blx	r3
   8e5b2:	4603      	mov	r3, r0
   8e5b4:	b29a      	uxth	r2, r3
   8e5b6:	4b33      	ldr	r3, [pc, #204]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e5b8:	859a      	strh	r2, [r3, #44]	; 0x2c
//	cl_sys_statbuffer.Temp3status = res_temp_value +20 - 30 - 80 + 120 ;
	
//	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
	raw_data = sv_sys_statbuffer.Temp4status;
   8e5ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   8e5bc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e5c0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e5c4:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e5c8:	fb02 f303 	mul.w	r3, r2, r3
   8e5cc:	2b00      	cmp	r3, #0
   8e5ce:	da02      	bge.n	8e5d6 <Cl_SysStat_System_Status_Query+0x2ea>
   8e5d0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e5d4:	33ff      	adds	r3, #255	; 0xff
   8e5d6:	141b      	asrs	r3, r3, #16
   8e5d8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e5dc:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e5e0:	4618      	mov	r0, r3
   8e5e2:	4b29      	ldr	r3, [pc, #164]	; (8e688 <Cl_SysStat_System_Status_Query+0x39c>)
   8e5e4:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e5e6:	4b23      	ldr	r3, [pc, #140]	; (8e674 <Cl_SysStat_System_Status_Query+0x388>)
   8e5e8:	681a      	ldr	r2, [r3, #0]
   8e5ea:	4b28      	ldr	r3, [pc, #160]	; (8e68c <Cl_SysStat_System_Status_Query+0x3a0>)
   8e5ec:	4928      	ldr	r1, [pc, #160]	; (8e690 <Cl_SysStat_System_Status_Query+0x3a4>)
   8e5ee:	4610      	mov	r0, r2
   8e5f0:	4798      	blx	r3
   8e5f2:	4603      	mov	r3, r0
   8e5f4:	4618      	mov	r0, r3
   8e5f6:	4b1f      	ldr	r3, [pc, #124]	; (8e674 <Cl_SysStat_System_Status_Query+0x388>)
   8e5f8:	681a      	ldr	r2, [r3, #0]
   8e5fa:	4b26      	ldr	r3, [pc, #152]	; (8e694 <Cl_SysStat_System_Status_Query+0x3a8>)
   8e5fc:	4611      	mov	r1, r2
   8e5fe:	4798      	blx	r3
   8e600:	4603      	mov	r3, r0
   8e602:	461a      	mov	r2, r3
   8e604:	4b24      	ldr	r3, [pc, #144]	; (8e698 <Cl_SysStat_System_Status_Query+0x3ac>)
   8e606:	4925      	ldr	r1, [pc, #148]	; (8e69c <Cl_SysStat_System_Status_Query+0x3b0>)
   8e608:	4610      	mov	r0, r2
   8e60a:	4798      	blx	r3
   8e60c:	4603      	mov	r3, r0
   8e60e:	461a      	mov	r2, r3
   8e610:	4b18      	ldr	r3, [pc, #96]	; (8e674 <Cl_SysStat_System_Status_Query+0x388>)
   8e612:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp4status = res_temp_value ;
   8e614:	4b17      	ldr	r3, [pc, #92]	; (8e674 <Cl_SysStat_System_Status_Query+0x388>)
   8e616:	681a      	ldr	r2, [r3, #0]
   8e618:	4b19      	ldr	r3, [pc, #100]	; (8e680 <Cl_SysStat_System_Status_Query+0x394>)
   8e61a:	4610      	mov	r0, r2
   8e61c:	4798      	blx	r3
   8e61e:	4603      	mov	r3, r0
   8e620:	b29a      	uxth	r2, r3
   8e622:	4b18      	ldr	r3, [pc, #96]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e624:	85da      	strh	r2, [r3, #46]	; 0x2e
	
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8e626:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   8e628:	4b16      	ldr	r3, [pc, #88]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e62a:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8e62c:	8a3a      	ldrh	r2, [r7, #16]
   8e62e:	4b15      	ldr	r3, [pc, #84]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e630:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8e632:	8a7a      	ldrh	r2, [r7, #18]
   8e634:	4b13      	ldr	r3, [pc, #76]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e636:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8e638:	89fa      	ldrh	r2, [r7, #14]
   8e63a:	4b12      	ldr	r3, [pc, #72]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e63c:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8e63e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
   8e642:	4b10      	ldr	r3, [pc, #64]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8e648:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8e64c:	4b0d      	ldr	r3, [pc, #52]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e64e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8e652:	897a      	ldrh	r2, [r7, #10]
   8e654:	4b0b      	ldr	r3, [pc, #44]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e656:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8e658:	893a      	ldrh	r2, [r7, #8]
   8e65a:	4b0a      	ldr	r3, [pc, #40]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e65c:	809a      	strh	r2, [r3, #4]
	cl_sys_statbuffer.PowerFailure = sv_sys_statbuffer.PowerFailure;
   8e65e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
   8e662:	4b08      	ldr	r3, [pc, #32]	; (8e684 <Cl_SysStat_System_Status_Query+0x398>)
   8e664:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8e668:	2300      	movs	r3, #0
}
   8e66a:	4618      	mov	r0, r3
   8e66c:	3760      	adds	r7, #96	; 0x60
   8e66e:	46bd      	mov	sp, r7
   8e670:	bd80      	pop	{r7, pc}
   8e672:	bf00      	nop
   8e674:	20071a48 	.word	0x20071a48
   8e678:	000a637d 	.word	0x000a637d
   8e67c:	41a00000 	.word	0x41a00000
   8e680:	000a6969 	.word	0x000a6969
   8e684:	2007221c 	.word	0x2007221c
   8e688:	0008fc39 	.word	0x0008fc39
   8e68c:	000a6591 	.word	0x000a6591
   8e690:	41100000 	.word	0x41100000
   8e694:	000a6381 	.word	0x000a6381
   8e698:	000a66f9 	.word	0x000a66f9
   8e69c:	41200000 	.word	0x41200000

0008e6a0 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8e6a0:	b480      	push	{r7}
   8e6a2:	b085      	sub	sp, #20
   8e6a4:	af00      	add	r7, sp, #0
   8e6a6:	4603      	mov	r3, r0
   8e6a8:	6039      	str	r1, [r7, #0]
   8e6aa:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8e6ac:	2300      	movs	r3, #0
   8e6ae:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8e6b0:	79fb      	ldrb	r3, [r7, #7]
   8e6b2:	3b01      	subs	r3, #1
   8e6b4:	2b2f      	cmp	r3, #47	; 0x2f
   8e6b6:	f200 81e5 	bhi.w	8ea84 <Cl_SysStat_GetSensor_Status_Query+0x3e4>
   8e6ba:	a201      	add	r2, pc, #4	; (adr r2, 8e6c0 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e6c0:	0008ea67 	.word	0x0008ea67
   8e6c4:	0008ea85 	.word	0x0008ea85
   8e6c8:	0008e7e7 	.word	0x0008e7e7
   8e6cc:	0008e7f7 	.word	0x0008e7f7
   8e6d0:	0008e807 	.word	0x0008e807
   8e6d4:	0008e843 	.word	0x0008e843
   8e6d8:	0008e817 	.word	0x0008e817
   8e6dc:	0008e851 	.word	0x0008e851
   8e6e0:	0008e87b 	.word	0x0008e87b
   8e6e4:	0008e889 	.word	0x0008e889
   8e6e8:	0008e897 	.word	0x0008e897
   8e6ec:	0008e8c5 	.word	0x0008e8c5
   8e6f0:	0008e8f3 	.word	0x0008e8f3
   8e6f4:	0008e901 	.word	0x0008e901
   8e6f8:	0008e92f 	.word	0x0008e92f
   8e6fc:	0008e95d 	.word	0x0008e95d
   8e700:	0008ea85 	.word	0x0008ea85
   8e704:	0008e98b 	.word	0x0008e98b
   8e708:	0008e9c1 	.word	0x0008e9c1
   8e70c:	0008e9ef 	.word	0x0008e9ef
   8e710:	0008e85f 	.word	0x0008e85f
   8e714:	0008ea85 	.word	0x0008ea85
   8e718:	0008ea21 	.word	0x0008ea21
   8e71c:	0008ea2f 	.word	0x0008ea2f
   8e720:	0008ea59 	.word	0x0008ea59
   8e724:	0008e86d 	.word	0x0008e86d
   8e728:	0008ea3d 	.word	0x0008ea3d
   8e72c:	0008ea4b 	.word	0x0008ea4b
   8e730:	0008e7bd 	.word	0x0008e7bd
   8e734:	0008e7cb 	.word	0x0008e7cb
   8e738:	0008e7d9 	.word	0x0008e7d9
   8e73c:	0008e79d 	.word	0x0008e79d
   8e740:	0008e7ad 	.word	0x0008e7ad
   8e744:	0008e781 	.word	0x0008e781
   8e748:	0008e78f 	.word	0x0008e78f
   8e74c:	0008ea75 	.word	0x0008ea75
   8e750:	0008ea85 	.word	0x0008ea85
   8e754:	0008ea85 	.word	0x0008ea85
   8e758:	0008ea85 	.word	0x0008ea85
   8e75c:	0008ea85 	.word	0x0008ea85
   8e760:	0008ea85 	.word	0x0008ea85
   8e764:	0008ea85 	.word	0x0008ea85
   8e768:	0008ea85 	.word	0x0008ea85
   8e76c:	0008ea85 	.word	0x0008ea85
   8e770:	0008ea85 	.word	0x0008ea85
   8e774:	0008ea85 	.word	0x0008ea85
   8e778:	0008ea85 	.word	0x0008ea85
   8e77c:	0008ea13 	.word	0x0008ea13
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8e780:	4b89      	ldr	r3, [pc, #548]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e782:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8e784:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e786:	683b      	ldr	r3, [r7, #0]
   8e788:	89fa      	ldrh	r2, [r7, #14]
   8e78a:	801a      	strh	r2, [r3, #0]
			break;
   8e78c:	e17b      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8e78e:	4b86      	ldr	r3, [pc, #536]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e790:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8e792:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e794:	683b      	ldr	r3, [r7, #0]
   8e796:	89fa      	ldrh	r2, [r7, #14]
   8e798:	801a      	strh	r2, [r3, #0]
			break;
   8e79a:	e174      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8e79c:	4b82      	ldr	r3, [pc, #520]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e79e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8e7a2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7a4:	683b      	ldr	r3, [r7, #0]
   8e7a6:	89fa      	ldrh	r2, [r7, #14]
   8e7a8:	801a      	strh	r2, [r3, #0]
			break;
   8e7aa:	e16c      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8e7ac:	4b7e      	ldr	r3, [pc, #504]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8e7b2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7b4:	683b      	ldr	r3, [r7, #0]
   8e7b6:	89fa      	ldrh	r2, [r7, #14]
   8e7b8:	801a      	strh	r2, [r3, #0]
			
			break;
   8e7ba:	e164      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8e7bc:	4b7a      	ldr	r3, [pc, #488]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7be:	889b      	ldrh	r3, [r3, #4]
   8e7c0:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7c2:	683b      	ldr	r3, [r7, #0]
   8e7c4:	89fa      	ldrh	r2, [r7, #14]
   8e7c6:	801a      	strh	r2, [r3, #0]
			break;
   8e7c8:	e15d      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8e7ca:	4b77      	ldr	r3, [pc, #476]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7cc:	88db      	ldrh	r3, [r3, #6]
   8e7ce:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7d0:	683b      	ldr	r3, [r7, #0]
   8e7d2:	89fa      	ldrh	r2, [r7, #14]
   8e7d4:	801a      	strh	r2, [r3, #0]
			break;
   8e7d6:	e156      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8e7d8:	4b73      	ldr	r3, [pc, #460]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7da:	891b      	ldrh	r3, [r3, #8]
   8e7dc:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7de:	683b      	ldr	r3, [r7, #0]
   8e7e0:	89fa      	ldrh	r2, [r7, #14]
   8e7e2:	801a      	strh	r2, [r3, #0]
			break;
   8e7e4:	e14f      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8e7e6:	4b70      	ldr	r3, [pc, #448]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8e7ec:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7ee:	683b      	ldr	r3, [r7, #0]
   8e7f0:	89fa      	ldrh	r2, [r7, #14]
   8e7f2:	801a      	strh	r2, [r3, #0]
			break;
   8e7f4:	e147      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8e7f6:	4b6c      	ldr	r3, [pc, #432]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e7f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   8e7fc:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e7fe:	683b      	ldr	r3, [r7, #0]
   8e800:	89fa      	ldrh	r2, [r7, #14]
   8e802:	801a      	strh	r2, [r3, #0]
			break;
   8e804:	e13f      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8e806:	4b68      	ldr	r3, [pc, #416]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e808:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8e80c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e80e:	683b      	ldr	r3, [r7, #0]
   8e810:	89fa      	ldrh	r2, [r7, #14]
   8e812:	801a      	strh	r2, [r3, #0]
			break;
   8e814:	e137      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8e816:	4b65      	ldr	r3, [pc, #404]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e818:	7f9b      	ldrb	r3, [r3, #30]
   8e81a:	f083 0301 	eor.w	r3, r3, #1
   8e81e:	b2db      	uxtb	r3, r3
   8e820:	2b00      	cmp	r3, #0
   8e822:	d006      	beq.n	8e832 <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8e824:	4b60      	ldr	r3, [pc, #384]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e826:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8e828:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e82a:	683b      	ldr	r3, [r7, #0]
   8e82c:	89fa      	ldrh	r2, [r7, #14]
   8e82e:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8e830:	e129      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8e832:	4b5e      	ldr	r3, [pc, #376]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e834:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
   8e838:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e83a:	683b      	ldr	r3, [r7, #0]
   8e83c:	89fa      	ldrh	r2, [r7, #14]
   8e83e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8e840:	e121      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8e842:	4b59      	ldr	r3, [pc, #356]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e844:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   8e846:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e848:	683b      	ldr	r3, [r7, #0]
   8e84a:	89fa      	ldrh	r2, [r7, #14]
   8e84c:	801a      	strh	r2, [r3, #0]
			break;
   8e84e:	e11a      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8e850:	4b55      	ldr	r3, [pc, #340]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8e854:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e856:	683b      	ldr	r3, [r7, #0]
   8e858:	89fa      	ldrh	r2, [r7, #14]
   8e85a:	801a      	strh	r2, [r3, #0]
			break;
   8e85c:	e113      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8e85e:	4b52      	ldr	r3, [pc, #328]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e860:	8b9b      	ldrh	r3, [r3, #28]
   8e862:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e864:	683b      	ldr	r3, [r7, #0]
   8e866:	89fa      	ldrh	r2, [r7, #14]
   8e868:	801a      	strh	r2, [r3, #0]
			break;
   8e86a:	e10c      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8e86c:	4b4e      	ldr	r3, [pc, #312]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e86e:	8c1b      	ldrh	r3, [r3, #32]
   8e870:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e872:	683b      	ldr	r3, [r7, #0]
   8e874:	89fa      	ldrh	r2, [r7, #14]
   8e876:	801a      	strh	r2, [r3, #0]
			break;
   8e878:	e105      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8e87a:	4b4b      	ldr	r3, [pc, #300]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e87c:	8b1b      	ldrh	r3, [r3, #24]
   8e87e:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e880:	683b      	ldr	r3, [r7, #0]
   8e882:	89fa      	ldrh	r2, [r7, #14]
   8e884:	801a      	strh	r2, [r3, #0]
			break;
   8e886:	e0fe      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8e888:	4b47      	ldr	r3, [pc, #284]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e88a:	8b5b      	ldrh	r3, [r3, #26]
   8e88c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e88e:	683b      	ldr	r3, [r7, #0]
   8e890:	89fa      	ldrh	r2, [r7, #14]
   8e892:	801a      	strh	r2, [r3, #0]
			break;
   8e894:	e0f7      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8e896:	4b45      	ldr	r3, [pc, #276]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e898:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8e89c:	f083 0301 	eor.w	r3, r3, #1
   8e8a0:	b2db      	uxtb	r3, r3
   8e8a2:	2b00      	cmp	r3, #0
   8e8a4:	d006      	beq.n	8e8b4 <Cl_SysStat_GetSensor_Status_Query+0x214>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8e8a6:	4b40      	ldr	r3, [pc, #256]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e8a8:	8a1b      	ldrh	r3, [r3, #16]
   8e8aa:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8e8ac:	683b      	ldr	r3, [r7, #0]
   8e8ae:	89fa      	ldrh	r2, [r7, #14]
   8e8b0:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8e8b2:	e0e8      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8e8b4:	4b3d      	ldr	r3, [pc, #244]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e8b6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
   8e8ba:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e8bc:	683b      	ldr	r3, [r7, #0]
   8e8be:	89fa      	ldrh	r2, [r7, #14]
   8e8c0:	801a      	strh	r2, [r3, #0]
			}

			break;
   8e8c2:	e0e0      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8e8c4:	4b39      	ldr	r3, [pc, #228]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e8c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8e8ca:	f083 0301 	eor.w	r3, r3, #1
   8e8ce:	b2db      	uxtb	r3, r3
   8e8d0:	2b00      	cmp	r3, #0
   8e8d2:	d006      	beq.n	8e8e2 <Cl_SysStat_GetSensor_Status_Query+0x242>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8e8d4:	4b34      	ldr	r3, [pc, #208]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e8d6:	8a5b      	ldrh	r3, [r3, #18]
   8e8d8:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e8da:	683b      	ldr	r3, [r7, #0]
   8e8dc:	89fa      	ldrh	r2, [r7, #14]
   8e8de:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8e8e0:	e0d1      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8e8e2:	4b32      	ldr	r3, [pc, #200]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e8e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
   8e8e8:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e8ea:	683b      	ldr	r3, [r7, #0]
   8e8ec:	89fa      	ldrh	r2, [r7, #14]
   8e8ee:	801a      	strh	r2, [r3, #0]
			}
			break;
   8e8f0:	e0c9      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8e8f2:	4b2d      	ldr	r3, [pc, #180]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e8f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8e8f6:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e8f8:	683b      	ldr	r3, [r7, #0]
   8e8fa:	89fa      	ldrh	r2, [r7, #14]
   8e8fc:	801a      	strh	r2, [r3, #0]
			break;
   8e8fe:	e0c2      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8e900:	4b2a      	ldr	r3, [pc, #168]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e902:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8e906:	f083 0301 	eor.w	r3, r3, #1
   8e90a:	b2db      	uxtb	r3, r3
   8e90c:	2b00      	cmp	r3, #0
   8e90e:	d006      	beq.n	8e91e <Cl_SysStat_GetSensor_Status_Query+0x27e>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8e910:	4b25      	ldr	r3, [pc, #148]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e912:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8e914:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8e916:	683b      	ldr	r3, [r7, #0]
   8e918:	89fa      	ldrh	r2, [r7, #14]
   8e91a:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8e91c:	e0b3      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8e91e:	4b23      	ldr	r3, [pc, #140]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e920:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
   8e924:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8e926:	683b      	ldr	r3, [r7, #0]
   8e928:	89fa      	ldrh	r2, [r7, #14]
   8e92a:	801a      	strh	r2, [r3, #0]
					}
			break;
   8e92c:	e0ab      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8e92e:	4b1f      	ldr	r3, [pc, #124]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8e934:	f083 0301 	eor.w	r3, r3, #1
   8e938:	b2db      	uxtb	r3, r3
   8e93a:	2b00      	cmp	r3, #0
   8e93c:	d006      	beq.n	8e94c <Cl_SysStat_GetSensor_Status_Query+0x2ac>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8e93e:	4b1a      	ldr	r3, [pc, #104]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e940:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8e942:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8e944:	683b      	ldr	r3, [r7, #0]
   8e946:	89fa      	ldrh	r2, [r7, #14]
   8e948:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8e94a:	e09c      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8e94c:	4b17      	ldr	r3, [pc, #92]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e94e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
   8e952:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8e954:	683b      	ldr	r3, [r7, #0]
   8e956:	89fa      	ldrh	r2, [r7, #14]
   8e958:	801a      	strh	r2, [r3, #0]
					}
			break;
   8e95a:	e094      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8e95c:	4b13      	ldr	r3, [pc, #76]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e95e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8e962:	f083 0301 	eor.w	r3, r3, #1
   8e966:	b2db      	uxtb	r3, r3
   8e968:	2b00      	cmp	r3, #0
   8e96a:	d006      	beq.n	8e97a <Cl_SysStat_GetSensor_Status_Query+0x2da>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8e96c:	4b0e      	ldr	r3, [pc, #56]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e96e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8e970:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8e972:	683b      	ldr	r3, [r7, #0]
   8e974:	89fa      	ldrh	r2, [r7, #14]
   8e976:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8e978:	e085      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8e97a:	4b0c      	ldr	r3, [pc, #48]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e97c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
   8e980:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8e982:	683b      	ldr	r3, [r7, #0]
   8e984:	89fa      	ldrh	r2, [r7, #14]
   8e986:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8e988:	e07d      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8e98a:	4b08      	ldr	r3, [pc, #32]	; (8e9ac <Cl_SysStat_GetSensor_Status_Query+0x30c>)
   8e98c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8e990:	f083 0301 	eor.w	r3, r3, #1
   8e994:	b2db      	uxtb	r3, r3
   8e996:	2b00      	cmp	r3, #0
   8e998:	d00a      	beq.n	8e9b0 <Cl_SysStat_GetSensor_Status_Query+0x310>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8e99a:	4b03      	ldr	r3, [pc, #12]	; (8e9a8 <Cl_SysStat_GetSensor_Status_Query+0x308>)
   8e99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8e99e:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8e9a0:	683b      	ldr	r3, [r7, #0]
   8e9a2:	89fa      	ldrh	r2, [r7, #14]
   8e9a4:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8e9a6:	e06e      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
   8e9a8:	2007221c 	.word	0x2007221c
   8e9ac:	200725b8 	.word	0x200725b8
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8e9b0:	4b38      	ldr	r3, [pc, #224]	; (8ea94 <Cl_SysStat_GetSensor_Status_Query+0x3f4>)
   8e9b2:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
   8e9b6:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8e9b8:	683b      	ldr	r3, [r7, #0]
   8e9ba:	89fa      	ldrh	r2, [r7, #14]
   8e9bc:	801a      	strh	r2, [r3, #0]
						}


			break;
   8e9be:	e062      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8e9c0:	4b34      	ldr	r3, [pc, #208]	; (8ea94 <Cl_SysStat_GetSensor_Status_Query+0x3f4>)
   8e9c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8e9c6:	f083 0301 	eor.w	r3, r3, #1
   8e9ca:	b2db      	uxtb	r3, r3
   8e9cc:	2b00      	cmp	r3, #0
   8e9ce:	d006      	beq.n	8e9de <Cl_SysStat_GetSensor_Status_Query+0x33e>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8e9d0:	4b31      	ldr	r3, [pc, #196]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8e9d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8e9d4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e9d6:	683b      	ldr	r3, [r7, #0]
   8e9d8:	89fa      	ldrh	r2, [r7, #14]
   8e9da:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8e9dc:	e053      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8e9de:	4b2d      	ldr	r3, [pc, #180]	; (8ea94 <Cl_SysStat_GetSensor_Status_Query+0x3f4>)
   8e9e0:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
   8e9e4:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e9e6:	683b      	ldr	r3, [r7, #0]
   8e9e8:	89fa      	ldrh	r2, [r7, #14]
   8e9ea:	801a      	strh	r2, [r3, #0]
			}
			break;
   8e9ec:	e04b      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   8e9ee:	4b2b      	ldr	r3, [pc, #172]	; (8ea9c <Cl_SysStat_GetSensor_Status_Query+0x3fc>)
   8e9f0:	781b      	ldrb	r3, [r3, #0]
   8e9f2:	2b00      	cmp	r3, #0
   8e9f4:	d106      	bne.n	8ea04 <Cl_SysStat_GetSensor_Status_Query+0x364>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8e9f6:	4b28      	ldr	r3, [pc, #160]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8e9f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8e9fa:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   8e9fc:	683b      	ldr	r3, [r7, #0]
   8e9fe:	89fa      	ldrh	r2, [r7, #14]
   8ea00:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   8ea02:	e040      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   8ea04:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8ea08:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea0a:	683b      	ldr	r3, [r7, #0]
   8ea0c:	89fa      	ldrh	r2, [r7, #14]
   8ea0e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8ea10:	e039      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8ea12:	4b21      	ldr	r3, [pc, #132]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8ea16:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea18:	683b      	ldr	r3, [r7, #0]
   8ea1a:	89fa      	ldrh	r2, [r7, #14]
   8ea1c:	801a      	strh	r2, [r3, #0]
			break;
   8ea1e:	e032      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8ea20:	4b1d      	ldr	r3, [pc, #116]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea22:	899b      	ldrh	r3, [r3, #12]
   8ea24:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea26:	683b      	ldr	r3, [r7, #0]
   8ea28:	89fa      	ldrh	r2, [r7, #14]
   8ea2a:	801a      	strh	r2, [r3, #0]
			break;
   8ea2c:	e02b      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8ea2e:	4b1a      	ldr	r3, [pc, #104]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea30:	89db      	ldrh	r3, [r3, #14]
   8ea32:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea34:	683b      	ldr	r3, [r7, #0]
   8ea36:	89fa      	ldrh	r2, [r7, #14]
   8ea38:	801a      	strh	r2, [r3, #0]
			break;
   8ea3a:	e024      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8ea3c:	4b16      	ldr	r3, [pc, #88]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea3e:	895b      	ldrh	r3, [r3, #10]
   8ea40:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea42:	683b      	ldr	r3, [r7, #0]
   8ea44:	89fa      	ldrh	r2, [r7, #14]
   8ea46:	801a      	strh	r2, [r3, #0]
			break;
   8ea48:	e01d      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8ea4a:	4b13      	ldr	r3, [pc, #76]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea4c:	885b      	ldrh	r3, [r3, #2]
   8ea4e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea50:	683b      	ldr	r3, [r7, #0]
   8ea52:	89fa      	ldrh	r2, [r7, #14]
   8ea54:	801a      	strh	r2, [r3, #0]
			break;
   8ea56:	e016      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8ea58:	4b0f      	ldr	r3, [pc, #60]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8ea5c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea5e:	683b      	ldr	r3, [r7, #0]
   8ea60:	89fa      	ldrh	r2, [r7, #14]
   8ea62:	801a      	strh	r2, [r3, #0]
			break;
   8ea64:	e00f      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8ea66:	4b0c      	ldr	r3, [pc, #48]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea68:	781b      	ldrb	r3, [r3, #0]
   8ea6a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea6c:	683b      	ldr	r3, [r7, #0]
   8ea6e:	89fa      	ldrh	r2, [r7, #14]
   8ea70:	801a      	strh	r2, [r3, #0]
			break;  
   8ea72:	e008      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			
			case SENSOR_POWER_FAILURE:
				tempdata =  cl_sys_statbuffer.PowerFailure;
   8ea74:	4b08      	ldr	r3, [pc, #32]	; (8ea98 <Cl_SysStat_GetSensor_Status_Query+0x3f8>)
   8ea76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
   8ea7a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea7c:	683b      	ldr	r3, [r7, #0]
   8ea7e:	89fa      	ldrh	r2, [r7, #14]
   8ea80:	801a      	strh	r2, [r3, #0]
			break;
   8ea82:	e000      	b.n	8ea86 <Cl_SysStat_GetSensor_Status_Query+0x3e6>
			
			default:
			break;
   8ea84:	bf00      	nop
		}
	return CL_OK;
   8ea86:	2300      	movs	r3, #0
}
   8ea88:	4618      	mov	r0, r3
   8ea8a:	3714      	adds	r7, #20
   8ea8c:	46bd      	mov	sp, r7
   8ea8e:	bc80      	pop	{r7}
   8ea90:	4770      	bx	lr
   8ea92:	bf00      	nop
   8ea94:	200725b8 	.word	0x200725b8
   8ea98:	2007221c 	.word	0x2007221c
   8ea9c:	20071925 	.word	0x20071925

0008eaa0 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8eaa0:	b590      	push	{r4, r7, lr}
   8eaa2:	b09f      	sub	sp, #124	; 0x7c
   8eaa4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8eaa6:	2304      	movs	r3, #4
   8eaa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8eaac:	2300      	movs	r3, #0
   8eaae:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t sensordata=0,temp2=0;
   8eab2:	2300      	movs	r3, #0
   8eab4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8eab8:	2300      	movs	r3, #0
   8eaba:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8eabe:	2300      	movs	r3, #0
   8eac0:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	int16_t sensordatamillivolts =0;
   8eac4:	2300      	movs	r3, #0
   8eac6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t tempdata =0,count1;
   8eaca:	2300      	movs	r3, #0
   8eacc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int16_t Pressuredatainmillibars =0;
   8ead0:	2300      	movs	r3, #0
   8ead2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	uint16_t raw_cond =0;
   8ead6:	2300      	movs	r3, #0
   8ead8:	867b      	strh	r3, [r7, #50]	; 0x32
	StateLogDatatype data;
	Cl_Uint8Type dataarray[36] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   8eada:	f107 0308 	add.w	r3, r7, #8
   8eade:	2224      	movs	r2, #36	; 0x24
   8eae0:	2100      	movs	r1, #0
   8eae2:	4618      	mov	r0, r3
   8eae4:	4ba9      	ldr	r3, [pc, #676]	; (8ed8c <Cl_SysStat_mean_status_update+0x2ec>)
   8eae6:	4798      	blx	r3
	Count_500ms++;
   8eae8:	4ba9      	ldr	r3, [pc, #676]	; (8ed90 <Cl_SysStat_mean_status_update+0x2f0>)
   8eaea:	781b      	ldrb	r3, [r3, #0]
   8eaec:	3301      	adds	r3, #1
   8eaee:	b2da      	uxtb	r2, r3
   8eaf0:	4ba7      	ldr	r3, [pc, #668]	; (8ed90 <Cl_SysStat_mean_status_update+0x2f0>)
   8eaf2:	701a      	strb	r2, [r3, #0]
	
	float TS3;
	Cl_Uint8Type count=0;
   8eaf4:	2300      	movs	r3, #0
   8eaf6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8eafa:	4ba6      	ldr	r3, [pc, #664]	; (8ed94 <Cl_SysStat_mean_status_update+0x2f4>)
   8eafc:	781b      	ldrb	r3, [r3, #0]
   8eafe:	2b00      	cmp	r3, #0
   8eb00:	f000 85f7 	beq.w	8f6f2 <Cl_SysStat_mean_status_update+0xc52>
	{
	
		if(syncdone)
   8eb04:	4ba3      	ldr	r3, [pc, #652]	; (8ed94 <Cl_SysStat_mean_status_update+0x2f4>)
   8eb06:	781b      	ldrb	r3, [r3, #0]
   8eb08:	2b00      	cmp	r3, #0
   8eb0a:	f000 85f2 	beq.w	8f6f2 <Cl_SysStat_mean_status_update+0xc52>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8eb0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8eb12:	4619      	mov	r1, r3
   8eb14:	2012      	movs	r0, #18
   8eb16:	4ba0      	ldr	r3, [pc, #640]	; (8ed98 <Cl_SysStat_mean_status_update+0x2f8>)
   8eb18:	4798      	blx	r3
			{
							
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp1 =	(avgtmp1*9 + sensordata)/10;
   8eb1a:	4ba0      	ldr	r3, [pc, #640]	; (8ed9c <Cl_SysStat_mean_status_update+0x2fc>)
   8eb1c:	681a      	ldr	r2, [r3, #0]
   8eb1e:	4ba0      	ldr	r3, [pc, #640]	; (8eda0 <Cl_SysStat_mean_status_update+0x300>)
   8eb20:	49a0      	ldr	r1, [pc, #640]	; (8eda4 <Cl_SysStat_mean_status_update+0x304>)
   8eb22:	4610      	mov	r0, r2
   8eb24:	4798      	blx	r3
   8eb26:	4603      	mov	r3, r0
   8eb28:	461c      	mov	r4, r3
   8eb2a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8eb2e:	4b9e      	ldr	r3, [pc, #632]	; (8eda8 <Cl_SysStat_mean_status_update+0x308>)
   8eb30:	4610      	mov	r0, r2
   8eb32:	4798      	blx	r3
   8eb34:	4602      	mov	r2, r0
   8eb36:	4b9d      	ldr	r3, [pc, #628]	; (8edac <Cl_SysStat_mean_status_update+0x30c>)
   8eb38:	4611      	mov	r1, r2
   8eb3a:	4620      	mov	r0, r4
   8eb3c:	4798      	blx	r3
   8eb3e:	4603      	mov	r3, r0
   8eb40:	461a      	mov	r2, r3
   8eb42:	4b9b      	ldr	r3, [pc, #620]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8eb44:	499b      	ldr	r1, [pc, #620]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8eb46:	4610      	mov	r0, r2
   8eb48:	4798      	blx	r3
   8eb4a:	4603      	mov	r3, r0
   8eb4c:	461a      	mov	r2, r3
   8eb4e:	4b93      	ldr	r3, [pc, #588]	; (8ed9c <Cl_SysStat_mean_status_update+0x2fc>)
   8eb50:	601a      	str	r2, [r3, #0]
// //				temp = temp - 25 +12 + 2.5;
// 				bulk_data[0] = res_temp_value/10;
// 				//bulk_data[0] = toggle_count_flow;
//				bulk_data[0] = sensordata/10;
			
				bulk_data[0] = avgtmp1/10; // manav changed
   8eb52:	4b92      	ldr	r3, [pc, #584]	; (8ed9c <Cl_SysStat_mean_status_update+0x2fc>)
   8eb54:	681a      	ldr	r2, [r3, #0]
   8eb56:	4b96      	ldr	r3, [pc, #600]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8eb58:	4996      	ldr	r1, [pc, #600]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8eb5a:	4610      	mov	r0, r2
   8eb5c:	4798      	blx	r3
   8eb5e:	4603      	mov	r3, r0
   8eb60:	461a      	mov	r2, r3
   8eb62:	4b95      	ldr	r3, [pc, #596]	; (8edb8 <Cl_SysStat_mean_status_update+0x318>)
   8eb64:	4610      	mov	r0, r2
   8eb66:	4798      	blx	r3
   8eb68:	4603      	mov	r3, r0
   8eb6a:	b21b      	sxth	r3, r3
   8eb6c:	86bb      	strh	r3, [r7, #52]	; 0x34
				
				
				data.fourbytedata = avgtmp1/10;
   8eb6e:	4b8b      	ldr	r3, [pc, #556]	; (8ed9c <Cl_SysStat_mean_status_update+0x2fc>)
   8eb70:	681a      	ldr	r2, [r3, #0]
   8eb72:	4b8f      	ldr	r3, [pc, #572]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8eb74:	498f      	ldr	r1, [pc, #572]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8eb76:	4610      	mov	r0, r2
   8eb78:	4798      	blx	r3
   8eb7a:	4603      	mov	r3, r0
   8eb7c:	461a      	mov	r2, r3
   8eb7e:	4b8f      	ldr	r3, [pc, #572]	; (8edbc <Cl_SysStat_mean_status_update+0x31c>)
   8eb80:	4610      	mov	r0, r2
   8eb82:	4798      	blx	r3
   8eb84:	4603      	mov	r3, r0
   8eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8eb88:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eb8c:	1c5a      	adds	r2, r3, #1
   8eb8e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8eb92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8eb96:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eb9a:	440b      	add	r3, r1
   8eb9c:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8eba0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eba4:	1c5a      	adds	r2, r3, #1
   8eba6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ebaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ebae:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ebb2:	440b      	add	r3, r1
   8ebb4:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ebb8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ebbc:	1c5a      	adds	r2, r3, #1
   8ebbe:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ebc2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8ebc6:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ebca:	440b      	add	r3, r1
   8ebcc:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ebd0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ebd4:	1c5a      	adds	r2, r3, #1
   8ebd6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ebda:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8ebde:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ebe2:	440b      	add	r3, r1
   8ebe4:	f803 2c70 	strb.w	r2, [r3, #-112]
				
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8ebe8:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ebec:	4619      	mov	r1, r3
   8ebee:	2013      	movs	r0, #19
   8ebf0:	4b69      	ldr	r3, [pc, #420]	; (8ed98 <Cl_SysStat_mean_status_update+0x2f8>)
   8ebf2:	4798      	blx	r3
			{
// 					
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp2 =	((avgtmp2*9 + sensordata)/10 );
   8ebf4:	4b72      	ldr	r3, [pc, #456]	; (8edc0 <Cl_SysStat_mean_status_update+0x320>)
   8ebf6:	681a      	ldr	r2, [r3, #0]
   8ebf8:	4b69      	ldr	r3, [pc, #420]	; (8eda0 <Cl_SysStat_mean_status_update+0x300>)
   8ebfa:	496a      	ldr	r1, [pc, #424]	; (8eda4 <Cl_SysStat_mean_status_update+0x304>)
   8ebfc:	4610      	mov	r0, r2
   8ebfe:	4798      	blx	r3
   8ec00:	4603      	mov	r3, r0
   8ec02:	461c      	mov	r4, r3
   8ec04:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8ec08:	4b67      	ldr	r3, [pc, #412]	; (8eda8 <Cl_SysStat_mean_status_update+0x308>)
   8ec0a:	4610      	mov	r0, r2
   8ec0c:	4798      	blx	r3
   8ec0e:	4602      	mov	r2, r0
   8ec10:	4b66      	ldr	r3, [pc, #408]	; (8edac <Cl_SysStat_mean_status_update+0x30c>)
   8ec12:	4611      	mov	r1, r2
   8ec14:	4620      	mov	r0, r4
   8ec16:	4798      	blx	r3
   8ec18:	4603      	mov	r3, r0
   8ec1a:	461a      	mov	r2, r3
   8ec1c:	4b64      	ldr	r3, [pc, #400]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ec1e:	4965      	ldr	r1, [pc, #404]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ec20:	4610      	mov	r0, r2
   8ec22:	4798      	blx	r3
   8ec24:	4603      	mov	r3, r0
   8ec26:	461a      	mov	r2, r3
   8ec28:	4b65      	ldr	r3, [pc, #404]	; (8edc0 <Cl_SysStat_mean_status_update+0x320>)
   8ec2a:	601a      	str	r2, [r3, #0]
// 			//	temp = temp -45;                                      // commented for machine 2
// 			//	temp = temp - 25 +12;
// //				temp = temp - 25 + 8.1 ;
// 				bulk_data[1] = (res_temp_value- 4)/10;
//				bulk_data[1] = sensordata /10;
			bulk_data[1] = avgtmp2 /10; // manav changed
   8ec2c:	4b64      	ldr	r3, [pc, #400]	; (8edc0 <Cl_SysStat_mean_status_update+0x320>)
   8ec2e:	681a      	ldr	r2, [r3, #0]
   8ec30:	4b5f      	ldr	r3, [pc, #380]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ec32:	4960      	ldr	r1, [pc, #384]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ec34:	4610      	mov	r0, r2
   8ec36:	4798      	blx	r3
   8ec38:	4603      	mov	r3, r0
   8ec3a:	461a      	mov	r2, r3
   8ec3c:	4b5e      	ldr	r3, [pc, #376]	; (8edb8 <Cl_SysStat_mean_status_update+0x318>)
   8ec3e:	4610      	mov	r0, r2
   8ec40:	4798      	blx	r3
   8ec42:	4603      	mov	r3, r0
   8ec44:	b21b      	sxth	r3, r3
   8ec46:	86fb      	strh	r3, [r7, #54]	; 0x36
				
				data.fourbytedata = avgtmp2/10;
   8ec48:	4b5d      	ldr	r3, [pc, #372]	; (8edc0 <Cl_SysStat_mean_status_update+0x320>)
   8ec4a:	681a      	ldr	r2, [r3, #0]
   8ec4c:	4b58      	ldr	r3, [pc, #352]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ec4e:	4959      	ldr	r1, [pc, #356]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ec50:	4610      	mov	r0, r2
   8ec52:	4798      	blx	r3
   8ec54:	4603      	mov	r3, r0
   8ec56:	461a      	mov	r2, r3
   8ec58:	4b58      	ldr	r3, [pc, #352]	; (8edbc <Cl_SysStat_mean_status_update+0x31c>)
   8ec5a:	4610      	mov	r0, r2
   8ec5c:	4798      	blx	r3
   8ec5e:	4603      	mov	r3, r0
   8ec60:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8ec62:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ec66:	1c5a      	adds	r2, r3, #1
   8ec68:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ec6c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8ec70:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ec74:	440b      	add	r3, r1
   8ec76:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8ec7a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ec7e:	1c5a      	adds	r2, r3, #1
   8ec80:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ec84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ec88:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ec8c:	440b      	add	r3, r1
   8ec8e:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ec92:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ec96:	1c5a      	adds	r2, r3, #1
   8ec98:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ec9c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8eca0:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eca4:	440b      	add	r3, r1
   8eca6:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ecaa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ecae:	1c5a      	adds	r2, r3, #1
   8ecb0:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ecb4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8ecb8:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ecbc:	440b      	add	r3, r1
   8ecbe:	f803 2c70 	strb.w	r2, [r3, #-112]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8ecc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ecc6:	4619      	mov	r1, r3
   8ecc8:	2014      	movs	r0, #20
   8ecca:	4b33      	ldr	r3, [pc, #204]	; (8ed98 <Cl_SysStat_mean_status_update+0x2f8>)
   8eccc:	4798      	blx	r3
			{
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp3 =	(avgtmp3*9 + sensordata)/10;
   8ecce:	4b3d      	ldr	r3, [pc, #244]	; (8edc4 <Cl_SysStat_mean_status_update+0x324>)
   8ecd0:	681a      	ldr	r2, [r3, #0]
   8ecd2:	4b33      	ldr	r3, [pc, #204]	; (8eda0 <Cl_SysStat_mean_status_update+0x300>)
   8ecd4:	4933      	ldr	r1, [pc, #204]	; (8eda4 <Cl_SysStat_mean_status_update+0x304>)
   8ecd6:	4610      	mov	r0, r2
   8ecd8:	4798      	blx	r3
   8ecda:	4603      	mov	r3, r0
   8ecdc:	461c      	mov	r4, r3
   8ecde:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8ece2:	4b31      	ldr	r3, [pc, #196]	; (8eda8 <Cl_SysStat_mean_status_update+0x308>)
   8ece4:	4610      	mov	r0, r2
   8ece6:	4798      	blx	r3
   8ece8:	4602      	mov	r2, r0
   8ecea:	4b30      	ldr	r3, [pc, #192]	; (8edac <Cl_SysStat_mean_status_update+0x30c>)
   8ecec:	4611      	mov	r1, r2
   8ecee:	4620      	mov	r0, r4
   8ecf0:	4798      	blx	r3
   8ecf2:	4603      	mov	r3, r0
   8ecf4:	461a      	mov	r2, r3
   8ecf6:	4b2e      	ldr	r3, [pc, #184]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ecf8:	492e      	ldr	r1, [pc, #184]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ecfa:	4610      	mov	r0, r2
   8ecfc:	4798      	blx	r3
   8ecfe:	4603      	mov	r3, r0
   8ed00:	461a      	mov	r2, r3
   8ed02:	4b30      	ldr	r3, [pc, #192]	; (8edc4 <Cl_SysStat_mean_status_update+0x324>)
   8ed04:	601a      	str	r2, [r3, #0]
// 				TS3 = (res_temp_value/10) - 0.4;
// //				TS3 = (res_temp_value/100) - 3.1 - 2;
// //				TS3 = (avgtmp3/10) - 0.4;
// 				bulk_data[2] =  (uint16_t)(TS3); // * 10);
//				bulk_data[2] = sensordata/10;
			bulk_data[2] = avgtmp3/10;   // manav changed
   8ed06:	4b2f      	ldr	r3, [pc, #188]	; (8edc4 <Cl_SysStat_mean_status_update+0x324>)
   8ed08:	681a      	ldr	r2, [r3, #0]
   8ed0a:	4b29      	ldr	r3, [pc, #164]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ed0c:	4929      	ldr	r1, [pc, #164]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ed0e:	4610      	mov	r0, r2
   8ed10:	4798      	blx	r3
   8ed12:	4603      	mov	r3, r0
   8ed14:	461a      	mov	r2, r3
   8ed16:	4b28      	ldr	r3, [pc, #160]	; (8edb8 <Cl_SysStat_mean_status_update+0x318>)
   8ed18:	4610      	mov	r0, r2
   8ed1a:	4798      	blx	r3
   8ed1c:	4603      	mov	r3, r0
   8ed1e:	b21b      	sxth	r3, r3
   8ed20:	873b      	strh	r3, [r7, #56]	; 0x38
				
				data.fourbytedata = avgtmp3/10;
   8ed22:	4b28      	ldr	r3, [pc, #160]	; (8edc4 <Cl_SysStat_mean_status_update+0x324>)
   8ed24:	681a      	ldr	r2, [r3, #0]
   8ed26:	4b22      	ldr	r3, [pc, #136]	; (8edb0 <Cl_SysStat_mean_status_update+0x310>)
   8ed28:	4922      	ldr	r1, [pc, #136]	; (8edb4 <Cl_SysStat_mean_status_update+0x314>)
   8ed2a:	4610      	mov	r0, r2
   8ed2c:	4798      	blx	r3
   8ed2e:	4603      	mov	r3, r0
   8ed30:	461a      	mov	r2, r3
   8ed32:	4b22      	ldr	r3, [pc, #136]	; (8edbc <Cl_SysStat_mean_status_update+0x31c>)
   8ed34:	4610      	mov	r0, r2
   8ed36:	4798      	blx	r3
   8ed38:	4603      	mov	r3, r0
   8ed3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8ed3c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed40:	1c5a      	adds	r2, r3, #1
   8ed42:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8ed4a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed4e:	440b      	add	r3, r1
   8ed50:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8ed54:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed58:	1c5a      	adds	r2, r3, #1
   8ed5a:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed5e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ed62:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed66:	440b      	add	r3, r1
   8ed68:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ed6c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed70:	1c5a      	adds	r2, r3, #1
   8ed72:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed76:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8ed7a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed7e:	440b      	add	r3, r1
   8ed80:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ed84:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed88:	1c5a      	adds	r2, r3, #1
   8ed8a:	e01d      	b.n	8edc8 <Cl_SysStat_mean_status_update+0x328>
   8ed8c:	000a6ae5 	.word	0x000a6ae5
   8ed90:	20071a10 	.word	0x20071a10
   8ed94:	20071bc8 	.word	0x20071bc8
   8ed98:	0008e6a1 	.word	0x0008e6a1
   8ed9c:	200719f4 	.word	0x200719f4
   8eda0:	000a6591 	.word	0x000a6591
   8eda4:	41100000 	.word	0x41100000
   8eda8:	000a64e9 	.word	0x000a64e9
   8edac:	000a6381 	.word	0x000a6381
   8edb0:	000a66f9 	.word	0x000a66f9
   8edb4:	41200000 	.word	0x41200000
   8edb8:	000a691d 	.word	0x000a691d
   8edbc:	000a6969 	.word	0x000a6969
   8edc0:	200719f0 	.word	0x200719f0
   8edc4:	200719ec 	.word	0x200719ec
   8edc8:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8edcc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8edd0:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8edd4:	440b      	add	r3, r1
   8edd6:	f803 2c70 	strb.w	r2, [r3, #-112]
				
				TS3 = (float)avgtmp3 /100;
   8edda:	4b69      	ldr	r3, [pc, #420]	; (8ef80 <Cl_SysStat_mean_status_update+0x4e0>)
   8eddc:	681a      	ldr	r2, [r3, #0]
   8edde:	4b69      	ldr	r3, [pc, #420]	; (8ef84 <Cl_SysStat_mean_status_update+0x4e4>)
   8ede0:	4969      	ldr	r1, [pc, #420]	; (8ef88 <Cl_SysStat_mean_status_update+0x4e8>)
   8ede2:	4610      	mov	r0, r2
   8ede4:	4798      	blx	r3
   8ede6:	4603      	mov	r3, r0
   8ede8:	667b      	str	r3, [r7, #100]	; 0x64
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&raw_cond);
   8edea:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8edee:	4619      	mov	r1, r3
   8edf0:	2007      	movs	r0, #7
   8edf2:	4b66      	ldr	r3, [pc, #408]	; (8ef8c <Cl_SysStat_mean_status_update+0x4ec>)
   8edf4:	4798      	blx	r3
			{
			float conductivity_CS3;
			conductivity_CS3 = cl_utilities_CalConductivity(raw_cond,TS3);
   8edf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8edf8:	6e79      	ldr	r1, [r7, #100]	; 0x64
   8edfa:	4618      	mov	r0, r3
   8edfc:	4b64      	ldr	r3, [pc, #400]	; (8ef90 <Cl_SysStat_mean_status_update+0x4f0>)
   8edfe:	4798      	blx	r3
   8ee00:	6638      	str	r0, [r7, #96]	; 0x60
//			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
     		avgcond = avgcond + conductivity_CS3;
   8ee02:	4b64      	ldr	r3, [pc, #400]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ee04:	681a      	ldr	r2, [r3, #0]
   8ee06:	4b64      	ldr	r3, [pc, #400]	; (8ef98 <Cl_SysStat_mean_status_update+0x4f8>)
   8ee08:	6e39      	ldr	r1, [r7, #96]	; 0x60
   8ee0a:	4610      	mov	r0, r2
   8ee0c:	4798      	blx	r3
   8ee0e:	4603      	mov	r3, r0
   8ee10:	461a      	mov	r2, r3
   8ee12:	4b60      	ldr	r3, [pc, #384]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ee14:	601a      	str	r2, [r3, #0]
			
			if (Count_500ms == 11)
   8ee16:	4b61      	ldr	r3, [pc, #388]	; (8ef9c <Cl_SysStat_mean_status_update+0x4fc>)
   8ee18:	781b      	ldrb	r3, [r3, #0]
   8ee1a:	2b0b      	cmp	r3, #11
   8ee1c:	d110      	bne.n	8ee40 <Cl_SysStat_mean_status_update+0x3a0>
			{
				avgcond = avgcond/10;
   8ee1e:	4b5d      	ldr	r3, [pc, #372]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ee20:	681a      	ldr	r2, [r3, #0]
   8ee22:	4b58      	ldr	r3, [pc, #352]	; (8ef84 <Cl_SysStat_mean_status_update+0x4e4>)
   8ee24:	495e      	ldr	r1, [pc, #376]	; (8efa0 <Cl_SysStat_mean_status_update+0x500>)
   8ee26:	4610      	mov	r0, r2
   8ee28:	4798      	blx	r3
   8ee2a:	4603      	mov	r3, r0
   8ee2c:	461a      	mov	r2, r3
   8ee2e:	4b59      	ldr	r3, [pc, #356]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ee30:	601a      	str	r2, [r3, #0]
				Count_500ms =0;
   8ee32:	4b5a      	ldr	r3, [pc, #360]	; (8ef9c <Cl_SysStat_mean_status_update+0x4fc>)
   8ee34:	2200      	movs	r2, #0
   8ee36:	701a      	strb	r2, [r3, #0]
				avg_conductivity = avgcond;
   8ee38:	4b56      	ldr	r3, [pc, #344]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ee3a:	681b      	ldr	r3, [r3, #0]
   8ee3c:	4a59      	ldr	r2, [pc, #356]	; (8efa4 <Cl_SysStat_mean_status_update+0x504>)
   8ee3e:	6013      	str	r3, [r2, #0]

			}
	
			    bulk_data[3] = avg_conductivity;								// multiplication for display purpose
   8ee40:	4b58      	ldr	r3, [pc, #352]	; (8efa4 <Cl_SysStat_mean_status_update+0x504>)
   8ee42:	681a      	ldr	r2, [r3, #0]
   8ee44:	4b58      	ldr	r3, [pc, #352]	; (8efa8 <Cl_SysStat_mean_status_update+0x508>)
   8ee46:	4610      	mov	r0, r2
   8ee48:	4798      	blx	r3
   8ee4a:	4603      	mov	r3, r0
   8ee4c:	b21b      	sxth	r3, r3
   8ee4e:	877b      	strh	r3, [r7, #58]	; 0x3a
				data.fourbytedata = avg_conductivity;
   8ee50:	4b54      	ldr	r3, [pc, #336]	; (8efa4 <Cl_SysStat_mean_status_update+0x504>)
   8ee52:	681a      	ldr	r2, [r3, #0]
   8ee54:	4b55      	ldr	r3, [pc, #340]	; (8efac <Cl_SysStat_mean_status_update+0x50c>)
   8ee56:	4610      	mov	r0, r2
   8ee58:	4798      	blx	r3
   8ee5a:	4603      	mov	r3, r0
   8ee5c:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8ee5e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ee62:	1c5a      	adds	r2, r3, #1
   8ee64:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee68:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8ee6c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ee70:	440b      	add	r3, r1
   8ee72:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8ee76:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ee7a:	1c5a      	adds	r2, r3, #1
   8ee7c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee80:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ee84:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ee88:	440b      	add	r3, r1
   8ee8a:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ee8e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ee92:	1c5a      	adds	r2, r3, #1
   8ee94:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee98:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8ee9c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eea0:	440b      	add	r3, r1
   8eea2:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8eea6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eeaa:	1c5a      	adds	r2, r3, #1
   8eeac:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8eeb0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8eeb4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eeb8:	440b      	add	r3, r1
   8eeba:	f803 2c70 	strb.w	r2, [r3, #-112]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
		
//				bulk_data[3] = raw_cond;
***********************************************************************/	
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   8eebe:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8eec2:	4619      	mov	r1, r3
   8eec4:	2022      	movs	r0, #34	; 0x22
   8eec6:	4b31      	ldr	r3, [pc, #196]	; (8ef8c <Cl_SysStat_mean_status_update+0x4ec>)
   8eec8:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   8eeca:	4b32      	ldr	r3, [pc, #200]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8eecc:	681a      	ldr	r2, [r3, #0]
   8eece:	4b38      	ldr	r3, [pc, #224]	; (8efb0 <Cl_SysStat_mean_status_update+0x510>)
   8eed0:	f04f 0100 	mov.w	r1, #0
   8eed4:	4610      	mov	r0, r2
   8eed6:	4798      	blx	r3
   8eed8:	4603      	mov	r3, r0
   8eeda:	2b00      	cmp	r3, #0
   8eedc:	d008      	beq.n	8eef0 <Cl_SysStat_mean_status_update+0x450>
				{
					avgcond_acid = sensordata;
   8eede:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8eee2:	4b34      	ldr	r3, [pc, #208]	; (8efb4 <Cl_SysStat_mean_status_update+0x514>)
   8eee4:	4610      	mov	r0, r2
   8eee6:	4798      	blx	r3
   8eee8:	4602      	mov	r2, r0
   8eeea:	4b33      	ldr	r3, [pc, #204]	; (8efb8 <Cl_SysStat_mean_status_update+0x518>)
   8eeec:	601a      	str	r2, [r3, #0]
   8eeee:	e01b      	b.n	8ef28 <Cl_SysStat_mean_status_update+0x488>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   8eef0:	4b31      	ldr	r3, [pc, #196]	; (8efb8 <Cl_SysStat_mean_status_update+0x518>)
   8eef2:	681a      	ldr	r2, [r3, #0]
   8eef4:	4b31      	ldr	r3, [pc, #196]	; (8efbc <Cl_SysStat_mean_status_update+0x51c>)
   8eef6:	4932      	ldr	r1, [pc, #200]	; (8efc0 <Cl_SysStat_mean_status_update+0x520>)
   8eef8:	4610      	mov	r0, r2
   8eefa:	4798      	blx	r3
   8eefc:	4603      	mov	r3, r0
   8eefe:	461c      	mov	r4, r3
   8ef00:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8ef04:	4b2b      	ldr	r3, [pc, #172]	; (8efb4 <Cl_SysStat_mean_status_update+0x514>)
   8ef06:	4610      	mov	r0, r2
   8ef08:	4798      	blx	r3
   8ef0a:	4602      	mov	r2, r0
   8ef0c:	4b22      	ldr	r3, [pc, #136]	; (8ef98 <Cl_SysStat_mean_status_update+0x4f8>)
   8ef0e:	4611      	mov	r1, r2
   8ef10:	4620      	mov	r0, r4
   8ef12:	4798      	blx	r3
   8ef14:	4603      	mov	r3, r0
   8ef16:	461a      	mov	r2, r3
   8ef18:	4b1a      	ldr	r3, [pc, #104]	; (8ef84 <Cl_SysStat_mean_status_update+0x4e4>)
   8ef1a:	492a      	ldr	r1, [pc, #168]	; (8efc4 <Cl_SysStat_mean_status_update+0x524>)
   8ef1c:	4610      	mov	r0, r2
   8ef1e:	4798      	blx	r3
   8ef20:	4603      	mov	r3, r0
   8ef22:	461a      	mov	r2, r3
   8ef24:	4b24      	ldr	r3, [pc, #144]	; (8efb8 <Cl_SysStat_mean_status_update+0x518>)
   8ef26:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8ef28:	2300      	movs	r3, #0
   8ef2a:	607b      	str	r3, [r7, #4]
				cl_tdata.Twobyte = avgcond_acid;
   8ef2c:	4b22      	ldr	r3, [pc, #136]	; (8efb8 <Cl_SysStat_mean_status_update+0x518>)
   8ef2e:	681a      	ldr	r2, [r3, #0]
   8ef30:	4b1e      	ldr	r3, [pc, #120]	; (8efac <Cl_SysStat_mean_status_update+0x50c>)
   8ef32:	4610      	mov	r0, r2
   8ef34:	4798      	blx	r3
   8ef36:	4603      	mov	r3, r0
   8ef38:	b29b      	uxth	r3, r3
   8ef3a:	80bb      	strh	r3, [r7, #4]
				cl_tdata.bytearray[2] = 4;
   8ef3c:	2304      	movs	r3, #4
   8ef3e:	71bb      	strb	r3, [r7, #6]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8ef40:	1d3b      	adds	r3, r7, #4
   8ef42:	2204      	movs	r2, #4
   8ef44:	4619      	mov	r1, r3
   8ef46:	2037      	movs	r0, #55	; 0x37
   8ef48:	4b1f      	ldr	r3, [pc, #124]	; (8efc8 <Cl_SysStat_mean_status_update+0x528>)
   8ef4a:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&sensordata);
   8ef4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ef50:	4619      	mov	r1, r3
   8ef52:	2023      	movs	r0, #35	; 0x23
   8ef54:	4b0d      	ldr	r3, [pc, #52]	; (8ef8c <Cl_SysStat_mean_status_update+0x4ec>)
   8ef56:	4798      	blx	r3
				
			}
			#endif
		//	bulk_data[1] = sensordata;
		
					if(avgcond == 0)
   8ef58:	4b0e      	ldr	r3, [pc, #56]	; (8ef94 <Cl_SysStat_mean_status_update+0x4f4>)
   8ef5a:	681a      	ldr	r2, [r3, #0]
   8ef5c:	4b14      	ldr	r3, [pc, #80]	; (8efb0 <Cl_SysStat_mean_status_update+0x510>)
   8ef5e:	f04f 0100 	mov.w	r1, #0
   8ef62:	4610      	mov	r0, r2
   8ef64:	4798      	blx	r3
   8ef66:	4603      	mov	r3, r0
   8ef68:	2b00      	cmp	r3, #0
   8ef6a:	d031      	beq.n	8efd0 <Cl_SysStat_mean_status_update+0x530>
				{
					avgcond_bicarb = sensordata;
   8ef6c:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8ef70:	4b10      	ldr	r3, [pc, #64]	; (8efb4 <Cl_SysStat_mean_status_update+0x514>)
   8ef72:	4610      	mov	r0, r2
   8ef74:	4798      	blx	r3
   8ef76:	4602      	mov	r2, r0
   8ef78:	4b14      	ldr	r3, [pc, #80]	; (8efcc <Cl_SysStat_mean_status_update+0x52c>)
   8ef7a:	601a      	str	r2, [r3, #0]
   8ef7c:	e044      	b.n	8f008 <Cl_SysStat_mean_status_update+0x568>
   8ef7e:	bf00      	nop
   8ef80:	200719ec 	.word	0x200719ec
   8ef84:	000a66f9 	.word	0x000a66f9
   8ef88:	42c80000 	.word	0x42c80000
   8ef8c:	0008e6a1 	.word	0x0008e6a1
   8ef90:	00093091 	.word	0x00093091
   8ef94:	200719f8 	.word	0x200719f8
   8ef98:	000a6381 	.word	0x000a6381
   8ef9c:	20071a10 	.word	0x20071a10
   8efa0:	41200000 	.word	0x41200000
   8efa4:	20071a0c 	.word	0x20071a0c
   8efa8:	000a691d 	.word	0x000a691d
   8efac:	000a6969 	.word	0x000a6969
   8efb0:	000a68b9 	.word	0x000a68b9
   8efb4:	000a64e9 	.word	0x000a64e9
   8efb8:	200719fc 	.word	0x200719fc
   8efbc:	000a6591 	.word	0x000a6591
   8efc0:	40a00000 	.word	0x40a00000
   8efc4:	40c00000 	.word	0x40c00000
   8efc8:	0009b805 	.word	0x0009b805
   8efcc:	20071a00 	.word	0x20071a00
				}
				else
				{
					avgcond_bicarb =(avgcond_bicarb*5 + sensordata)/6;
   8efd0:	4b40      	ldr	r3, [pc, #256]	; (8f0d4 <Cl_SysStat_mean_status_update+0x634>)
   8efd2:	681a      	ldr	r2, [r3, #0]
   8efd4:	4b40      	ldr	r3, [pc, #256]	; (8f0d8 <Cl_SysStat_mean_status_update+0x638>)
   8efd6:	4941      	ldr	r1, [pc, #260]	; (8f0dc <Cl_SysStat_mean_status_update+0x63c>)
   8efd8:	4610      	mov	r0, r2
   8efda:	4798      	blx	r3
   8efdc:	4603      	mov	r3, r0
   8efde:	461c      	mov	r4, r3
   8efe0:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8efe4:	4b3e      	ldr	r3, [pc, #248]	; (8f0e0 <Cl_SysStat_mean_status_update+0x640>)
   8efe6:	4610      	mov	r0, r2
   8efe8:	4798      	blx	r3
   8efea:	4602      	mov	r2, r0
   8efec:	4b3d      	ldr	r3, [pc, #244]	; (8f0e4 <Cl_SysStat_mean_status_update+0x644>)
   8efee:	4611      	mov	r1, r2
   8eff0:	4620      	mov	r0, r4
   8eff2:	4798      	blx	r3
   8eff4:	4603      	mov	r3, r0
   8eff6:	461a      	mov	r2, r3
   8eff8:	4b3b      	ldr	r3, [pc, #236]	; (8f0e8 <Cl_SysStat_mean_status_update+0x648>)
   8effa:	493c      	ldr	r1, [pc, #240]	; (8f0ec <Cl_SysStat_mean_status_update+0x64c>)
   8effc:	4610      	mov	r0, r2
   8effe:	4798      	blx	r3
   8f000:	4603      	mov	r3, r0
   8f002:	461a      	mov	r2, r3
   8f004:	4b33      	ldr	r3, [pc, #204]	; (8f0d4 <Cl_SysStat_mean_status_update+0x634>)
   8f006:	601a      	str	r2, [r3, #0]
				}
				
				 // remove comment after  removing heter data updates
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8f008:	2300      	movs	r3, #0
   8f00a:	603b      	str	r3, [r7, #0]
				cl_tdata.Twobyte = avgcond_bicarb;
   8f00c:	4b31      	ldr	r3, [pc, #196]	; (8f0d4 <Cl_SysStat_mean_status_update+0x634>)
   8f00e:	681a      	ldr	r2, [r3, #0]
   8f010:	4b37      	ldr	r3, [pc, #220]	; (8f0f0 <Cl_SysStat_mean_status_update+0x650>)
   8f012:	4610      	mov	r0, r2
   8f014:	4798      	blx	r3
   8f016:	4603      	mov	r3, r0
   8f018:	b29b      	uxth	r3, r3
   8f01a:	803b      	strh	r3, [r7, #0]
				cl_tdata.bytearray[2] = 6;
   8f01c:	2306      	movs	r3, #6
   8f01e:	70bb      	strb	r3, [r7, #2]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8f020:	463b      	mov	r3, r7
   8f022:	2204      	movs	r2, #4
   8f024:	4619      	mov	r1, r3
   8f026:	2037      	movs	r0, #55	; 0x37
   8f028:	4b32      	ldr	r3, [pc, #200]	; (8f0f4 <Cl_SysStat_mean_status_update+0x654>)
   8f02a:	4798      	blx	r3
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8f02c:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f030:	4619      	mov	r1, r3
   8f032:	2019      	movs	r0, #25
   8f034:	4b30      	ldr	r3, [pc, #192]	; (8f0f8 <Cl_SysStat_mean_status_update+0x658>)
   8f036:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8f038:	2300      	movs	r3, #0
   8f03a:	653b      	str	r3, [r7, #80]	; 0x50
				cl_tdata.Twobyte = sensordata;
   8f03c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   8f040:	b29b      	uxth	r3, r3
   8f042:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				cl_tdata.bytearray[2] = 3;
   8f046:	2303      	movs	r3, #3
   8f048:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				bulk_data[4] = sensordata; // manav changed
   8f04c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   8f050:	87bb      	strh	r3, [r7, #60]	; 0x3c
				
				data.fourbytedata = sensordata;
   8f052:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   8f056:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8f058:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f05c:	1c5a      	adds	r2, r3, #1
   8f05e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f062:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f066:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f06a:	440b      	add	r3, r1
   8f06c:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8f070:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f074:	1c5a      	adds	r2, r3, #1
   8f076:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f07a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f07e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f082:	440b      	add	r3, r1
   8f084:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8f088:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f08c:	1c5a      	adds	r2, r3, #1
   8f08e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f092:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f096:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f09a:	440b      	add	r3, r1
   8f09c:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8f0a0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f0a4:	1c5a      	adds	r2, r3, #1
   8f0a6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f0aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f0ae:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f0b2:	440b      	add	r3, r1
   8f0b4:	f803 2c70 	strb.w	r2, [r3, #-112]
				
				
				
				if(prev_flow_status == sensordata)
   8f0b8:	4b10      	ldr	r3, [pc, #64]	; (8f0fc <Cl_SysStat_mean_status_update+0x65c>)
   8f0ba:	f9b3 2000 	ldrsh.w	r2, [r3]
   8f0be:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
   8f0c2:	429a      	cmp	r2, r3
   8f0c4:	d11e      	bne.n	8f104 <Cl_SysStat_mean_status_update+0x664>
				{
					if(flow_counter++ > 10)
   8f0c6:	4b0e      	ldr	r3, [pc, #56]	; (8f100 <Cl_SysStat_mean_status_update+0x660>)
   8f0c8:	781b      	ldrb	r3, [r3, #0]
   8f0ca:	3301      	adds	r3, #1
   8f0cc:	b2da      	uxtb	r2, r3
   8f0ce:	4b0c      	ldr	r3, [pc, #48]	; (8f100 <Cl_SysStat_mean_status_update+0x660>)
   8f0d0:	701a      	strb	r2, [r3, #0]
   8f0d2:	e01a      	b.n	8f10a <Cl_SysStat_mean_status_update+0x66a>
   8f0d4:	20071a00 	.word	0x20071a00
   8f0d8:	000a6591 	.word	0x000a6591
   8f0dc:	40a00000 	.word	0x40a00000
   8f0e0:	000a64e9 	.word	0x000a64e9
   8f0e4:	000a6381 	.word	0x000a6381
   8f0e8:	000a66f9 	.word	0x000a66f9
   8f0ec:	40c00000 	.word	0x40c00000
   8f0f0:	000a6969 	.word	0x000a6969
   8f0f4:	0009b805 	.word	0x0009b805
   8f0f8:	0008e6a1 	.word	0x0008e6a1
   8f0fc:	20071a20 	.word	0x20071a20
   8f100:	20071a22 	.word	0x20071a22
					}
					
				}
				else
				{
					flow_counter = 0;
   8f104:	4b81      	ldr	r3, [pc, #516]	; (8f30c <Cl_SysStat_mean_status_update+0x86c>)
   8f106:	2200      	movs	r2, #0
   8f108:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8f10a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
   8f10e:	4b80      	ldr	r3, [pc, #512]	; (8f310 <Cl_SysStat_mean_status_update+0x870>)
   8f110:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   8f112:	f107 0358 	add.w	r3, r7, #88	; 0x58
   8f116:	4619      	mov	r1, r3
   8f118:	200b      	movs	r0, #11
   8f11a:	4b7e      	ldr	r3, [pc, #504]	; (8f314 <Cl_SysStat_mean_status_update+0x874>)
   8f11c:	4798      	blx	r3
			

				calibration_apt(Atp);
   8f11e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   8f122:	b21b      	sxth	r3, r3
   8f124:	4618      	mov	r0, r3
   8f126:	4b7c      	ldr	r3, [pc, #496]	; (8f318 <Cl_SysStat_mean_status_update+0x878>)
   8f128:	4798      	blx	r3
				aptavg = ((aptavg* 2) + pressure_final_apt)/3;
   8f12a:	4b7c      	ldr	r3, [pc, #496]	; (8f31c <Cl_SysStat_mean_status_update+0x87c>)
   8f12c:	681a      	ldr	r2, [r3, #0]
   8f12e:	4b7c      	ldr	r3, [pc, #496]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f130:	4611      	mov	r1, r2
   8f132:	4610      	mov	r0, r2
   8f134:	4798      	blx	r3
   8f136:	4603      	mov	r3, r0
   8f138:	4618      	mov	r0, r3
   8f13a:	4b7a      	ldr	r3, [pc, #488]	; (8f324 <Cl_SysStat_mean_status_update+0x884>)
   8f13c:	681a      	ldr	r2, [r3, #0]
   8f13e:	4b78      	ldr	r3, [pc, #480]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f140:	4611      	mov	r1, r2
   8f142:	4798      	blx	r3
   8f144:	4603      	mov	r3, r0
   8f146:	461a      	mov	r2, r3
   8f148:	4b77      	ldr	r3, [pc, #476]	; (8f328 <Cl_SysStat_mean_status_update+0x888>)
   8f14a:	4978      	ldr	r1, [pc, #480]	; (8f32c <Cl_SysStat_mean_status_update+0x88c>)
   8f14c:	4610      	mov	r0, r2
   8f14e:	4798      	blx	r3
   8f150:	4603      	mov	r3, r0
   8f152:	461a      	mov	r2, r3
   8f154:	4b71      	ldr	r3, [pc, #452]	; (8f31c <Cl_SysStat_mean_status_update+0x87c>)
   8f156:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8f158:	2300      	movs	r3, #0
   8f15a:	653b      	str	r3, [r7, #80]	; 0x50
				cl_tdata.Twobyte = aptavg + 1000;
   8f15c:	4b6f      	ldr	r3, [pc, #444]	; (8f31c <Cl_SysStat_mean_status_update+0x87c>)
   8f15e:	681a      	ldr	r2, [r3, #0]
   8f160:	4b6f      	ldr	r3, [pc, #444]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f162:	4973      	ldr	r1, [pc, #460]	; (8f330 <Cl_SysStat_mean_status_update+0x890>)
   8f164:	4610      	mov	r0, r2
   8f166:	4798      	blx	r3
   8f168:	4603      	mov	r3, r0
   8f16a:	461a      	mov	r2, r3
   8f16c:	4b71      	ldr	r3, [pc, #452]	; (8f334 <Cl_SysStat_mean_status_update+0x894>)
   8f16e:	4610      	mov	r0, r2
   8f170:	4798      	blx	r3
   8f172:	4603      	mov	r3, r0
   8f174:	b29b      	uxth	r3, r3
   8f176:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				cl_tdata.bytearray[2] = 14;
   8f17a:	230e      	movs	r3, #14
   8f17c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				bulk_data[5] = cl_tdata.Twobyte; 
   8f180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8f184:	b21b      	sxth	r3, r3
   8f186:	87fb      	strh	r3, [r7, #62]	; 0x3e
				
				data.fourbytedata = aptavg;
   8f188:	4b64      	ldr	r3, [pc, #400]	; (8f31c <Cl_SysStat_mean_status_update+0x87c>)
   8f18a:	681a      	ldr	r2, [r3, #0]
   8f18c:	4b69      	ldr	r3, [pc, #420]	; (8f334 <Cl_SysStat_mean_status_update+0x894>)
   8f18e:	4610      	mov	r0, r2
   8f190:	4798      	blx	r3
   8f192:	4603      	mov	r3, r0
   8f194:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8f196:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f19a:	1c5a      	adds	r2, r3, #1
   8f19c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f1a0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f1a4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f1a8:	440b      	add	r3, r1
   8f1aa:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8f1ae:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f1b2:	1c5a      	adds	r2, r3, #1
   8f1b4:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f1b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f1bc:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f1c0:	440b      	add	r3, r1
   8f1c2:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8f1c6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f1ca:	1c5a      	adds	r2, r3, #1
   8f1cc:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f1d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f1d4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f1d8:	440b      	add	r3, r1
   8f1da:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8f1de:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f1e2:	1c5a      	adds	r2, r3, #1
   8f1e4:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f1e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f1ec:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f1f0:	440b      	add	r3, r1
   8f1f2:	f803 2c70 	strb.w	r2, [r3, #-112]
				
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   8f1f6:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8f1fa:	4619      	mov	r1, r3
   8f1fc:	200c      	movs	r0, #12
   8f1fe:	4b45      	ldr	r3, [pc, #276]	; (8f314 <Cl_SysStat_mean_status_update+0x874>)
   8f200:	4798      	blx	r3
			
			calibration_vpt(Vtp);
   8f202:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8f206:	b21b      	sxth	r3, r3
   8f208:	4618      	mov	r0, r3
   8f20a:	4b4b      	ldr	r3, [pc, #300]	; (8f338 <Cl_SysStat_mean_status_update+0x898>)
   8f20c:	4798      	blx	r3
			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
   8f20e:	4b4b      	ldr	r3, [pc, #300]	; (8f33c <Cl_SysStat_mean_status_update+0x89c>)
   8f210:	681a      	ldr	r2, [r3, #0]
   8f212:	4b43      	ldr	r3, [pc, #268]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f214:	4611      	mov	r1, r2
   8f216:	4610      	mov	r0, r2
   8f218:	4798      	blx	r3
   8f21a:	4603      	mov	r3, r0
   8f21c:	4618      	mov	r0, r3
   8f21e:	4b48      	ldr	r3, [pc, #288]	; (8f340 <Cl_SysStat_mean_status_update+0x8a0>)
   8f220:	681a      	ldr	r2, [r3, #0]
   8f222:	4b3f      	ldr	r3, [pc, #252]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f224:	4611      	mov	r1, r2
   8f226:	4798      	blx	r3
   8f228:	4603      	mov	r3, r0
   8f22a:	461a      	mov	r2, r3
   8f22c:	4b3e      	ldr	r3, [pc, #248]	; (8f328 <Cl_SysStat_mean_status_update+0x888>)
   8f22e:	493f      	ldr	r1, [pc, #252]	; (8f32c <Cl_SysStat_mean_status_update+0x88c>)
   8f230:	4610      	mov	r0, r2
   8f232:	4798      	blx	r3
   8f234:	4603      	mov	r3, r0
   8f236:	461a      	mov	r2, r3
   8f238:	4b40      	ldr	r3, [pc, #256]	; (8f33c <Cl_SysStat_mean_status_update+0x89c>)
   8f23a:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8f23c:	2300      	movs	r3, #0
   8f23e:	653b      	str	r3, [r7, #80]	; 0x50
			cl_tdata.Twobyte = vptavg + 1000;
   8f240:	4b3e      	ldr	r3, [pc, #248]	; (8f33c <Cl_SysStat_mean_status_update+0x89c>)
   8f242:	681a      	ldr	r2, [r3, #0]
   8f244:	4b36      	ldr	r3, [pc, #216]	; (8f320 <Cl_SysStat_mean_status_update+0x880>)
   8f246:	493a      	ldr	r1, [pc, #232]	; (8f330 <Cl_SysStat_mean_status_update+0x890>)
   8f248:	4610      	mov	r0, r2
   8f24a:	4798      	blx	r3
   8f24c:	4603      	mov	r3, r0
   8f24e:	461a      	mov	r2, r3
   8f250:	4b38      	ldr	r3, [pc, #224]	; (8f334 <Cl_SysStat_mean_status_update+0x894>)
   8f252:	4610      	mov	r0, r2
   8f254:	4798      	blx	r3
   8f256:	4603      	mov	r3, r0
   8f258:	b29b      	uxth	r3, r3
   8f25a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			cl_tdata.bytearray[2] = 15;
   8f25e:	230f      	movs	r3, #15
   8f260:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			bulk_data[6] = cl_tdata.Twobyte;
   8f264:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8f268:	b21b      	sxth	r3, r3
   8f26a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	
	data.fourbytedata = vptavg;
   8f26e:	4b33      	ldr	r3, [pc, #204]	; (8f33c <Cl_SysStat_mean_status_update+0x89c>)
   8f270:	681a      	ldr	r2, [r3, #0]
   8f272:	4b30      	ldr	r3, [pc, #192]	; (8f334 <Cl_SysStat_mean_status_update+0x894>)
   8f274:	4610      	mov	r0, r2
   8f276:	4798      	blx	r3
   8f278:	4603      	mov	r3, r0
   8f27a:	62fb      	str	r3, [r7, #44]	; 0x2c
	dataarray[count++] = data.bytedata[0];
   8f27c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f280:	1c5a      	adds	r2, r3, #1
   8f282:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f286:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f28a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f28e:	440b      	add	r3, r1
   8f290:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[1];
   8f294:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f298:	1c5a      	adds	r2, r3, #1
   8f29a:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f29e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f2a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f2a6:	440b      	add	r3, r1
   8f2a8:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[2];
   8f2ac:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f2b0:	1c5a      	adds	r2, r3, #1
   8f2b2:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f2b6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f2ba:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f2be:	440b      	add	r3, r1
   8f2c0:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[3];
   8f2c4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f2c8:	1c5a      	adds	r2, r3, #1
   8f2ca:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f2ce:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f2d2:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f2d6:	440b      	add	r3, r1
   8f2d8:	f803 2c70 	strb.w	r2, [r3, #-112]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8f2dc:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   8f2e0:	4619      	mov	r1, r3
   8f2e2:	2010      	movs	r0, #16
   8f2e4:	4b0b      	ldr	r3, [pc, #44]	; (8f314 <Cl_SysStat_mean_status_update+0x874>)
   8f2e6:	4798      	blx	r3
	
			if (Ps3 >32268)                                                                    
   8f2e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   8f2ec:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f2f0:	4293      	cmp	r3, r2
   8f2f2:	d92b      	bls.n	8f34c <Cl_SysStat_mean_status_update+0x8ac>
			{
				PS3_bar = (65536 - Ps3) *(-1);
   8f2f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   8f2f8:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f2fc:	4b11      	ldr	r3, [pc, #68]	; (8f344 <Cl_SysStat_mean_status_update+0x8a4>)
   8f2fe:	4610      	mov	r0, r2
   8f300:	4798      	blx	r3
   8f302:	4602      	mov	r2, r0
   8f304:	4b10      	ldr	r3, [pc, #64]	; (8f348 <Cl_SysStat_mean_status_update+0x8a8>)
   8f306:	601a      	str	r2, [r3, #0]
   8f308:	e028      	b.n	8f35c <Cl_SysStat_mean_status_update+0x8bc>
   8f30a:	bf00      	nop
   8f30c:	20071a22 	.word	0x20071a22
   8f310:	20071a20 	.word	0x20071a20
   8f314:	0008e6a1 	.word	0x0008e6a1
   8f318:	000840b5 	.word	0x000840b5
   8f31c:	200719e4 	.word	0x200719e4
   8f320:	000a6381 	.word	0x000a6381
   8f324:	20072160 	.word	0x20072160
   8f328:	000a66f9 	.word	0x000a66f9
   8f32c:	40400000 	.word	0x40400000
   8f330:	447a0000 	.word	0x447a0000
   8f334:	000a6969 	.word	0x000a6969
   8f338:	00084235 	.word	0x00084235
   8f33c:	200719e8 	.word	0x200719e8
   8f340:	20071774 	.word	0x20071774
   8f344:	000a64e9 	.word	0x000a64e9
   8f348:	20071a1c 	.word	0x20071a1c
			}
			else
				PS3_bar = (float)Ps3;
   8f34c:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
   8f350:	4b8b      	ldr	r3, [pc, #556]	; (8f580 <Cl_SysStat_mean_status_update+0xae0>)
   8f352:	4610      	mov	r0, r2
   8f354:	4798      	blx	r3
   8f356:	4602      	mov	r2, r0
   8f358:	4b8a      	ldr	r3, [pc, #552]	; (8f584 <Cl_SysStat_mean_status_update+0xae4>)
   8f35a:	601a      	str	r2, [r3, #0]
				
				PS3_bar = (0.091009 * PS3_bar) + 491.794;
   8f35c:	4b89      	ldr	r3, [pc, #548]	; (8f584 <Cl_SysStat_mean_status_update+0xae4>)
   8f35e:	681a      	ldr	r2, [r3, #0]
   8f360:	4b89      	ldr	r3, [pc, #548]	; (8f588 <Cl_SysStat_mean_status_update+0xae8>)
   8f362:	4610      	mov	r0, r2
   8f364:	4798      	blx	r3
   8f366:	4c89      	ldr	r4, [pc, #548]	; (8f58c <Cl_SysStat_mean_status_update+0xaec>)
   8f368:	a381      	add	r3, pc, #516	; (adr r3, 8f570 <Cl_SysStat_mean_status_update+0xad0>)
   8f36a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f36e:	47a0      	blx	r4
   8f370:	4603      	mov	r3, r0
   8f372:	460c      	mov	r4, r1
   8f374:	4618      	mov	r0, r3
   8f376:	4621      	mov	r1, r4
   8f378:	4c85      	ldr	r4, [pc, #532]	; (8f590 <Cl_SysStat_mean_status_update+0xaf0>)
   8f37a:	a37f      	add	r3, pc, #508	; (adr r3, 8f578 <Cl_SysStat_mean_status_update+0xad8>)
   8f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f380:	47a0      	blx	r4
   8f382:	4603      	mov	r3, r0
   8f384:	460c      	mov	r4, r1
   8f386:	4619      	mov	r1, r3
   8f388:	4622      	mov	r2, r4
   8f38a:	4b82      	ldr	r3, [pc, #520]	; (8f594 <Cl_SysStat_mean_status_update+0xaf4>)
   8f38c:	4608      	mov	r0, r1
   8f38e:	4611      	mov	r1, r2
   8f390:	4798      	blx	r3
   8f392:	4602      	mov	r2, r0
   8f394:	4b7b      	ldr	r3, [pc, #492]	; (8f584 <Cl_SysStat_mean_status_update+0xae4>)
   8f396:	601a      	str	r2, [r3, #0]
// 			}			
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps3avg;
// 			cl_tdata.bytearray[2] = 20;
// //			bulk_data[7] = cl_tdata.Twobyte;
			bulk_data[7] = PS3_bar+ 1000 ;
   8f398:	4b7a      	ldr	r3, [pc, #488]	; (8f584 <Cl_SysStat_mean_status_update+0xae4>)
   8f39a:	681a      	ldr	r2, [r3, #0]
   8f39c:	4b7e      	ldr	r3, [pc, #504]	; (8f598 <Cl_SysStat_mean_status_update+0xaf8>)
   8f39e:	497f      	ldr	r1, [pc, #508]	; (8f59c <Cl_SysStat_mean_status_update+0xafc>)
   8f3a0:	4610      	mov	r0, r2
   8f3a2:	4798      	blx	r3
   8f3a4:	4603      	mov	r3, r0
   8f3a6:	461a      	mov	r2, r3
   8f3a8:	4b7d      	ldr	r3, [pc, #500]	; (8f5a0 <Cl_SysStat_mean_status_update+0xb00>)
   8f3aa:	4610      	mov	r0, r2
   8f3ac:	4798      	blx	r3
   8f3ae:	4603      	mov	r3, r0
   8f3b0:	b21b      	sxth	r3, r3
   8f3b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data.fourbytedata = PS3_bar * 100;
   8f3b6:	4b73      	ldr	r3, [pc, #460]	; (8f584 <Cl_SysStat_mean_status_update+0xae4>)
   8f3b8:	681a      	ldr	r2, [r3, #0]
   8f3ba:	4b7a      	ldr	r3, [pc, #488]	; (8f5a4 <Cl_SysStat_mean_status_update+0xb04>)
   8f3bc:	497a      	ldr	r1, [pc, #488]	; (8f5a8 <Cl_SysStat_mean_status_update+0xb08>)
   8f3be:	4610      	mov	r0, r2
   8f3c0:	4798      	blx	r3
   8f3c2:	4603      	mov	r3, r0
   8f3c4:	461a      	mov	r2, r3
   8f3c6:	4b79      	ldr	r3, [pc, #484]	; (8f5ac <Cl_SysStat_mean_status_update+0xb0c>)
   8f3c8:	4610      	mov	r0, r2
   8f3ca:	4798      	blx	r3
   8f3cc:	4603      	mov	r3, r0
   8f3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		dataarray[count++] = data.bytedata[0];
   8f3d0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f3d4:	1c5a      	adds	r2, r3, #1
   8f3d6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f3da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f3de:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f3e2:	440b      	add	r3, r1
   8f3e4:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[1];
   8f3e8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f3ec:	1c5a      	adds	r2, r3, #1
   8f3ee:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f3f2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f3f6:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f3fa:	440b      	add	r3, r1
   8f3fc:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[2];
   8f400:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f404:	1c5a      	adds	r2, r3, #1
   8f406:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f40a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f40e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f412:	440b      	add	r3, r1
   8f414:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[3];
   8f418:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f41c:	1c5a      	adds	r2, r3, #1
   8f41e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f422:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f426:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f42a:	440b      	add	r3, r1
   8f42c:	f803 2c70 	strb.w	r2, [r3, #-112]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8f430:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   8f434:	4619      	mov	r1, r3
   8f436:	200f      	movs	r0, #15
   8f438:	4b5d      	ldr	r3, [pc, #372]	; (8f5b0 <Cl_SysStat_mean_status_update+0xb10>)
   8f43a:	4798      	blx	r3
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps2avg;
// 			cl_tdata.bytearray[2] = 19;
// 	
// //			bulk_data[8] = cl_tdata.Twobyte;
			if (Ps2 >32268)
   8f43c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   8f440:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f444:	4293      	cmp	r3, r2
   8f446:	d90a      	bls.n	8f45e <Cl_SysStat_mean_status_update+0x9be>
			{
				PS2_bar = (65536 - Ps2) *(-1);
   8f448:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   8f44c:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f450:	4b58      	ldr	r3, [pc, #352]	; (8f5b4 <Cl_SysStat_mean_status_update+0xb14>)
   8f452:	4610      	mov	r0, r2
   8f454:	4798      	blx	r3
   8f456:	4602      	mov	r2, r0
   8f458:	4b57      	ldr	r3, [pc, #348]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f45a:	601a      	str	r2, [r3, #0]
   8f45c:	e007      	b.n	8f46e <Cl_SysStat_mean_status_update+0x9ce>
			}
			else
				PS2_bar = (float)Ps2;
   8f45e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   8f462:	4b47      	ldr	r3, [pc, #284]	; (8f580 <Cl_SysStat_mean_status_update+0xae0>)
   8f464:	4610      	mov	r0, r2
   8f466:	4798      	blx	r3
   8f468:	4602      	mov	r2, r0
   8f46a:	4b53      	ldr	r3, [pc, #332]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f46c:	601a      	str	r2, [r3, #0]
				
				PS2_bar = (0.091009 * PS2_bar) + 491.794;
   8f46e:	4b52      	ldr	r3, [pc, #328]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f470:	681a      	ldr	r2, [r3, #0]
   8f472:	4b45      	ldr	r3, [pc, #276]	; (8f588 <Cl_SysStat_mean_status_update+0xae8>)
   8f474:	4610      	mov	r0, r2
   8f476:	4798      	blx	r3
   8f478:	4c44      	ldr	r4, [pc, #272]	; (8f58c <Cl_SysStat_mean_status_update+0xaec>)
   8f47a:	a33d      	add	r3, pc, #244	; (adr r3, 8f570 <Cl_SysStat_mean_status_update+0xad0>)
   8f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f480:	47a0      	blx	r4
   8f482:	4603      	mov	r3, r0
   8f484:	460c      	mov	r4, r1
   8f486:	4618      	mov	r0, r3
   8f488:	4621      	mov	r1, r4
   8f48a:	4c41      	ldr	r4, [pc, #260]	; (8f590 <Cl_SysStat_mean_status_update+0xaf0>)
   8f48c:	a33a      	add	r3, pc, #232	; (adr r3, 8f578 <Cl_SysStat_mean_status_update+0xad8>)
   8f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f492:	47a0      	blx	r4
   8f494:	4603      	mov	r3, r0
   8f496:	460c      	mov	r4, r1
   8f498:	4619      	mov	r1, r3
   8f49a:	4622      	mov	r2, r4
   8f49c:	4b3d      	ldr	r3, [pc, #244]	; (8f594 <Cl_SysStat_mean_status_update+0xaf4>)
   8f49e:	4608      	mov	r0, r1
   8f4a0:	4611      	mov	r1, r2
   8f4a2:	4798      	blx	r3
   8f4a4:	4602      	mov	r2, r0
   8f4a6:	4b44      	ldr	r3, [pc, #272]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f4a8:	601a      	str	r2, [r3, #0]
			bulk_data[8] = PS2_bar + 1000  ;
   8f4aa:	4b43      	ldr	r3, [pc, #268]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f4ac:	681a      	ldr	r2, [r3, #0]
   8f4ae:	4b3a      	ldr	r3, [pc, #232]	; (8f598 <Cl_SysStat_mean_status_update+0xaf8>)
   8f4b0:	493a      	ldr	r1, [pc, #232]	; (8f59c <Cl_SysStat_mean_status_update+0xafc>)
   8f4b2:	4610      	mov	r0, r2
   8f4b4:	4798      	blx	r3
   8f4b6:	4603      	mov	r3, r0
   8f4b8:	461a      	mov	r2, r3
   8f4ba:	4b39      	ldr	r3, [pc, #228]	; (8f5a0 <Cl_SysStat_mean_status_update+0xb00>)
   8f4bc:	4610      	mov	r0, r2
   8f4be:	4798      	blx	r3
   8f4c0:	4603      	mov	r3, r0
   8f4c2:	b21b      	sxth	r3, r3
   8f4c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			data.fourbytedata = PS2_bar * 100;
   8f4c8:	4b3b      	ldr	r3, [pc, #236]	; (8f5b8 <Cl_SysStat_mean_status_update+0xb18>)
   8f4ca:	681a      	ldr	r2, [r3, #0]
   8f4cc:	4b35      	ldr	r3, [pc, #212]	; (8f5a4 <Cl_SysStat_mean_status_update+0xb04>)
   8f4ce:	4936      	ldr	r1, [pc, #216]	; (8f5a8 <Cl_SysStat_mean_status_update+0xb08>)
   8f4d0:	4610      	mov	r0, r2
   8f4d2:	4798      	blx	r3
   8f4d4:	4603      	mov	r3, r0
   8f4d6:	461a      	mov	r2, r3
   8f4d8:	4b34      	ldr	r3, [pc, #208]	; (8f5ac <Cl_SysStat_mean_status_update+0xb0c>)
   8f4da:	4610      	mov	r0, r2
   8f4dc:	4798      	blx	r3
   8f4de:	4603      	mov	r3, r0
   8f4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataarray[count++] = data.bytedata[0];
   8f4e2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f4e6:	1c5a      	adds	r2, r3, #1
   8f4e8:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f4ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f4f0:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f4f4:	440b      	add	r3, r1
   8f4f6:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[1];
   8f4fa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f4fe:	1c5a      	adds	r2, r3, #1
   8f500:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f504:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f508:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f50c:	440b      	add	r3, r1
   8f50e:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[2];
   8f512:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f516:	1c5a      	adds	r2, r3, #1
   8f518:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f51c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f520:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f524:	440b      	add	r3, r1
   8f526:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[3];
   8f52a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f52e:	1c5a      	adds	r2, r3, #1
   8f530:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f534:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f538:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f53c:	440b      	add	r3, r1
   8f53e:	f803 2c70 	strb.w	r2, [r3, #-112]
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8f542:	f107 035e 	add.w	r3, r7, #94	; 0x5e
   8f546:	4619      	mov	r1, r3
   8f548:	200e      	movs	r0, #14
   8f54a:	4b19      	ldr	r3, [pc, #100]	; (8f5b0 <Cl_SysStat_mean_status_update+0xb10>)
   8f54c:	4798      	blx	r3
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps1avg;
// 			cl_tdata.bytearray[2] = 18;
// //			bulk_data[9] = cl_tdata.Twobyte;

			if (Ps1 >32268)
   8f54e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   8f552:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f556:	4293      	cmp	r3, r2
   8f558:	d932      	bls.n	8f5c0 <Cl_SysStat_mean_status_update+0xb20>
			{
				PS1_bar = (65536 - Ps1) *(-1);
   8f55a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   8f55e:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f562:	4b14      	ldr	r3, [pc, #80]	; (8f5b4 <Cl_SysStat_mean_status_update+0xb14>)
   8f564:	4610      	mov	r0, r2
   8f566:	4798      	blx	r3
   8f568:	4602      	mov	r2, r0
   8f56a:	4b14      	ldr	r3, [pc, #80]	; (8f5bc <Cl_SysStat_mean_status_update+0xb1c>)
   8f56c:	601a      	str	r2, [r3, #0]
   8f56e:	e02f      	b.n	8f5d0 <Cl_SysStat_mean_status_update+0xb30>
   8f570:	a6a44418 	.word	0xa6a44418
   8f574:	3fb74c5d 	.word	0x3fb74c5d
   8f578:	39581062 	.word	0x39581062
   8f57c:	407ebcb4 	.word	0x407ebcb4
   8f580:	000a64e1 	.word	0x000a64e1
   8f584:	20071a1c 	.word	0x20071a1c
   8f588:	000a5c69 	.word	0x000a5c69
   8f58c:	000a5d11 	.word	0x000a5d11
   8f590:	000a59ad 	.word	0x000a59ad
   8f594:	000a62d5 	.word	0x000a62d5
   8f598:	000a6381 	.word	0x000a6381
   8f59c:	447a0000 	.word	0x447a0000
   8f5a0:	000a691d 	.word	0x000a691d
   8f5a4:	000a6591 	.word	0x000a6591
   8f5a8:	42c80000 	.word	0x42c80000
   8f5ac:	000a6969 	.word	0x000a6969
   8f5b0:	0008e6a1 	.word	0x0008e6a1
   8f5b4:	000a64e9 	.word	0x000a64e9
   8f5b8:	20071a18 	.word	0x20071a18
   8f5bc:	20071a14 	.word	0x20071a14
			}
			else
				PS1_bar = (float)Ps1;
   8f5c0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   8f5c4:	4b52      	ldr	r3, [pc, #328]	; (8f710 <Cl_SysStat_mean_status_update+0xc70>)
   8f5c6:	4610      	mov	r0, r2
   8f5c8:	4798      	blx	r3
   8f5ca:	4602      	mov	r2, r0
   8f5cc:	4b51      	ldr	r3, [pc, #324]	; (8f714 <Cl_SysStat_mean_status_update+0xc74>)
   8f5ce:	601a      	str	r2, [r3, #0]
				
				PS1_bar = (0.091009 * PS1_bar) + 491.794;
   8f5d0:	4b50      	ldr	r3, [pc, #320]	; (8f714 <Cl_SysStat_mean_status_update+0xc74>)
   8f5d2:	681a      	ldr	r2, [r3, #0]
   8f5d4:	4b50      	ldr	r3, [pc, #320]	; (8f718 <Cl_SysStat_mean_status_update+0xc78>)
   8f5d6:	4610      	mov	r0, r2
   8f5d8:	4798      	blx	r3
   8f5da:	4c50      	ldr	r4, [pc, #320]	; (8f71c <Cl_SysStat_mean_status_update+0xc7c>)
   8f5dc:	a348      	add	r3, pc, #288	; (adr r3, 8f700 <Cl_SysStat_mean_status_update+0xc60>)
   8f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f5e2:	47a0      	blx	r4
   8f5e4:	4603      	mov	r3, r0
   8f5e6:	460c      	mov	r4, r1
   8f5e8:	4618      	mov	r0, r3
   8f5ea:	4621      	mov	r1, r4
   8f5ec:	4c4c      	ldr	r4, [pc, #304]	; (8f720 <Cl_SysStat_mean_status_update+0xc80>)
   8f5ee:	a346      	add	r3, pc, #280	; (adr r3, 8f708 <Cl_SysStat_mean_status_update+0xc68>)
   8f5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f5f4:	47a0      	blx	r4
   8f5f6:	4603      	mov	r3, r0
   8f5f8:	460c      	mov	r4, r1
   8f5fa:	4619      	mov	r1, r3
   8f5fc:	4622      	mov	r2, r4
   8f5fe:	4b49      	ldr	r3, [pc, #292]	; (8f724 <Cl_SysStat_mean_status_update+0xc84>)
   8f600:	4608      	mov	r0, r1
   8f602:	4611      	mov	r1, r2
   8f604:	4798      	blx	r3
   8f606:	4602      	mov	r2, r0
   8f608:	4b42      	ldr	r3, [pc, #264]	; (8f714 <Cl_SysStat_mean_status_update+0xc74>)
   8f60a:	601a      	str	r2, [r3, #0]
			
			//Cl_Uint16Type ps1temp =  (int)PS1_bar + 1000 ;//* 100;
			
			bulk_data[9] = PS1_bar + 1000;//PS1_bar * 100;
   8f60c:	4b41      	ldr	r3, [pc, #260]	; (8f714 <Cl_SysStat_mean_status_update+0xc74>)
   8f60e:	681a      	ldr	r2, [r3, #0]
   8f610:	4b45      	ldr	r3, [pc, #276]	; (8f728 <Cl_SysStat_mean_status_update+0xc88>)
   8f612:	4946      	ldr	r1, [pc, #280]	; (8f72c <Cl_SysStat_mean_status_update+0xc8c>)
   8f614:	4610      	mov	r0, r2
   8f616:	4798      	blx	r3
   8f618:	4603      	mov	r3, r0
   8f61a:	461a      	mov	r2, r3
   8f61c:	4b44      	ldr	r3, [pc, #272]	; (8f730 <Cl_SysStat_mean_status_update+0xc90>)
   8f61e:	4610      	mov	r0, r2
   8f620:	4798      	blx	r3
   8f622:	4603      	mov	r3, r0
   8f624:	b21b      	sxth	r3, r3
   8f626:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			
			data.fourbytedata = PS1_bar * 10;
   8f62a:	4b3a      	ldr	r3, [pc, #232]	; (8f714 <Cl_SysStat_mean_status_update+0xc74>)
   8f62c:	681a      	ldr	r2, [r3, #0]
   8f62e:	4b41      	ldr	r3, [pc, #260]	; (8f734 <Cl_SysStat_mean_status_update+0xc94>)
   8f630:	4941      	ldr	r1, [pc, #260]	; (8f738 <Cl_SysStat_mean_status_update+0xc98>)
   8f632:	4610      	mov	r0, r2
   8f634:	4798      	blx	r3
   8f636:	4603      	mov	r3, r0
   8f638:	461a      	mov	r2, r3
   8f63a:	4b40      	ldr	r3, [pc, #256]	; (8f73c <Cl_SysStat_mean_status_update+0xc9c>)
   8f63c:	4610      	mov	r0, r2
   8f63e:	4798      	blx	r3
   8f640:	4603      	mov	r3, r0
   8f642:	62fb      	str	r3, [r7, #44]	; 0x2c
		dataarray[count++] = data.bytedata[0];
   8f644:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f648:	1c5a      	adds	r2, r3, #1
   8f64a:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f64e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f652:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f656:	440b      	add	r3, r1
   8f658:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[1];
   8f65c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f660:	1c5a      	adds	r2, r3, #1
   8f662:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f666:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f66a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f66e:	440b      	add	r3, r1
   8f670:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[2];
   8f674:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f678:	1c5a      	adds	r2, r3, #1
   8f67a:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f67e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f682:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f686:	440b      	add	r3, r1
   8f688:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[3];
   8f68c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f690:	1c5a      	adds	r2, r3, #1
   8f692:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f696:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f69a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f69e:	440b      	add	r3, r1
   8f6a0:	f803 2c70 	strb.w	r2, [r3, #-112]
	
			if(ps1avg > 300)
   8f6a4:	4b26      	ldr	r3, [pc, #152]	; (8f740 <Cl_SysStat_mean_status_update+0xca0>)
   8f6a6:	681a      	ldr	r2, [r3, #0]
   8f6a8:	4b26      	ldr	r3, [pc, #152]	; (8f744 <Cl_SysStat_mean_status_update+0xca4>)
   8f6aa:	4927      	ldr	r1, [pc, #156]	; (8f748 <Cl_SysStat_mean_status_update+0xca8>)
   8f6ac:	4610      	mov	r0, r2
   8f6ae:	4798      	blx	r3
   8f6b0:	4603      	mov	r3, r0
   8f6b2:	2b00      	cmp	r3, #0
   8f6b4:	d006      	beq.n	8f6c4 <Cl_SysStat_mean_status_update+0xc24>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8f6b6:	4b25      	ldr	r3, [pc, #148]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6b8:	881b      	ldrh	r3, [r3, #0]
   8f6ba:	3301      	adds	r3, #1
   8f6bc:	b29a      	uxth	r2, r3
   8f6be:	4b23      	ldr	r3, [pc, #140]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6c0:	801a      	strh	r2, [r3, #0]
   8f6c2:	e00c      	b.n	8f6de <Cl_SysStat_mean_status_update+0xc3e>
			}
			else
			{
				 valve_4_count++;
   8f6c4:	4b21      	ldr	r3, [pc, #132]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6c6:	881b      	ldrh	r3, [r3, #0]
   8f6c8:	3301      	adds	r3, #1
   8f6ca:	b29a      	uxth	r2, r3
   8f6cc:	4b1f      	ldr	r3, [pc, #124]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6ce:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8f6d0:	4b1e      	ldr	r3, [pc, #120]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6d2:	881b      	ldrh	r3, [r3, #0]
   8f6d4:	2b00      	cmp	r3, #0
   8f6d6:	d002      	beq.n	8f6de <Cl_SysStat_mean_status_update+0xc3e>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8f6d8:	4b1c      	ldr	r3, [pc, #112]	; (8f74c <Cl_SysStat_mean_status_update+0xcac>)
   8f6da:	2200      	movs	r2, #0
   8f6dc:	801a      	strh	r2, [r3, #0]
				}
			}
	
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
   8f6de:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8f6e2:	221e      	movs	r2, #30
   8f6e4:	4619      	mov	r1, r3
   8f6e6:	203e      	movs	r0, #62	; 0x3e
   8f6e8:	4b19      	ldr	r3, [pc, #100]	; (8f750 <Cl_SysStat_mean_status_update+0xcb0>)
   8f6ea:	4798      	blx	r3
   8f6ec:	4603      	mov	r3, r0
   8f6ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&dataarray,36);
			}
		
	}
}
   8f6f2:	bf00      	nop
   8f6f4:	377c      	adds	r7, #124	; 0x7c
   8f6f6:	46bd      	mov	sp, r7
   8f6f8:	bd90      	pop	{r4, r7, pc}
   8f6fa:	bf00      	nop
   8f6fc:	f3af 8000 	nop.w
   8f700:	a6a44418 	.word	0xa6a44418
   8f704:	3fb74c5d 	.word	0x3fb74c5d
   8f708:	39581062 	.word	0x39581062
   8f70c:	407ebcb4 	.word	0x407ebcb4
   8f710:	000a64e1 	.word	0x000a64e1
   8f714:	20071a14 	.word	0x20071a14
   8f718:	000a5c69 	.word	0x000a5c69
   8f71c:	000a5d11 	.word	0x000a5d11
   8f720:	000a59ad 	.word	0x000a59ad
   8f724:	000a62d5 	.word	0x000a62d5
   8f728:	000a6381 	.word	0x000a6381
   8f72c:	447a0000 	.word	0x447a0000
   8f730:	000a691d 	.word	0x000a691d
   8f734:	000a6591 	.word	0x000a6591
   8f738:	41200000 	.word	0x41200000
   8f73c:	000a6969 	.word	0x000a6969
   8f740:	200719e0 	.word	0x200719e0
   8f744:	000a6909 	.word	0x000a6909
   8f748:	43960000 	.word	0x43960000
   8f74c:	20071a04 	.word	0x20071a04
   8f750:	0009b805 	.word	0x0009b805
   8f754:	00000000 	.word	0x00000000

0008f758 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8f758:	b590      	push	{r4, r7, lr}
   8f75a:	b085      	sub	sp, #20
   8f75c:	af00      	add	r7, sp, #0
   8f75e:	4603      	mov	r3, r0
   8f760:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   8f762:	2300      	movs	r3, #0
   8f764:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   8f766:	2300      	movs	r3, #0
   8f768:	817b      	strh	r3, [r7, #10]
   8f76a:	2300      	movs	r3, #0
   8f76c:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   8f76e:	4b72      	ldr	r3, [pc, #456]	; (8f938 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8f770:	781b      	ldrb	r3, [r3, #0]
   8f772:	2b00      	cmp	r3, #0
   8f774:	d002      	beq.n	8f77c <Cl_Conductivity_Sensor_Controller+0x24>
   8f776:	2b02      	cmp	r3, #2
   8f778:	d060      	beq.n	8f83c <Cl_Conductivity_Sensor_Controller+0xe4>
					break;
					default:break;
				}
				
			break;
			default:break;
   8f77a:	e0d1      	b.n	8f920 <Cl_Conductivity_Sensor_Controller+0x1c8>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8f77c:	79fb      	ldrb	r3, [r7, #7]
   8f77e:	2b00      	cmp	r3, #0
   8f780:	d003      	beq.n	8f78a <Cl_Conductivity_Sensor_Controller+0x32>
   8f782:	2b02      	cmp	r3, #2
   8f784:	d023      	beq.n	8f7ce <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   8f786:	bf00      	nop
					}
			break;
   8f788:	e0ca      	b.n	8f920 <Cl_Conductivity_Sensor_Controller+0x1c8>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8f78a:	4b6c      	ldr	r3, [pc, #432]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f78c:	881b      	ldrh	r3, [r3, #0]
   8f78e:	4618      	mov	r0, r3
   8f790:	4b6b      	ldr	r3, [pc, #428]	; (8f940 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f792:	4798      	blx	r3
						cl_wait(100);
   8f794:	2064      	movs	r0, #100	; 0x64
   8f796:	4b6b      	ldr	r3, [pc, #428]	; (8f944 <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8f798:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f79a:	f107 030a 	add.w	r3, r7, #10
   8f79e:	4619      	mov	r1, r3
   8f7a0:	2006      	movs	r0, #6
   8f7a2:	4b69      	ldr	r3, [pc, #420]	; (8f948 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f7a4:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8f7a6:	897b      	ldrh	r3, [r7, #10]
   8f7a8:	461a      	mov	r2, r3
   8f7aa:	0092      	lsls	r2, r2, #2
   8f7ac:	4413      	add	r3, r2
   8f7ae:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8f7b0:	4b66      	ldr	r3, [pc, #408]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f7b2:	881b      	ldrh	r3, [r3, #0]
   8f7b4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8f7b8:	d907      	bls.n	8f7ca <Cl_Conductivity_Sensor_Controller+0x72>
   8f7ba:	4b64      	ldr	r3, [pc, #400]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f7bc:	881b      	ldrh	r3, [r3, #0]
   8f7be:	f640 0297 	movw	r2, #2199	; 0x897
   8f7c2:	4293      	cmp	r3, r2
   8f7c4:	d801      	bhi.n	8f7ca <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   8f7c6:	2300      	movs	r3, #0
   8f7c8:	e0ab      	b.n	8f922 <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							return CL_ERROR;
   8f7ca:	2304      	movs	r3, #4
   8f7cc:	e0a9      	b.n	8f922 <Cl_Conductivity_Sensor_Controller+0x1ca>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f7ce:	f107 030a 	add.w	r3, r7, #10
   8f7d2:	4619      	mov	r1, r3
   8f7d4:	2006      	movs	r0, #6
   8f7d6:	4b5c      	ldr	r3, [pc, #368]	; (8f948 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f7d8:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   8f7da:	897b      	ldrh	r3, [r7, #10]
   8f7dc:	461a      	mov	r2, r3
   8f7de:	4b5c      	ldr	r3, [pc, #368]	; (8f950 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8f7e0:	4610      	mov	r0, r2
   8f7e2:	4798      	blx	r3
   8f7e4:	4c5b      	ldr	r4, [pc, #364]	; (8f954 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8f7e6:	a352      	add	r3, pc, #328	; (adr r3, 8f930 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f7ec:	47a0      	blx	r4
   8f7ee:	4603      	mov	r3, r0
   8f7f0:	460c      	mov	r4, r1
   8f7f2:	4619      	mov	r1, r3
   8f7f4:	4622      	mov	r2, r4
   8f7f6:	4b58      	ldr	r3, [pc, #352]	; (8f958 <Cl_Conductivity_Sensor_Controller+0x200>)
   8f7f8:	4608      	mov	r0, r1
   8f7fa:	4611      	mov	r1, r2
   8f7fc:	4798      	blx	r3
   8f7fe:	4603      	mov	r3, r0
   8f800:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8f802:	4a52      	ldr	r2, [pc, #328]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f804:	89bb      	ldrh	r3, [r7, #12]
   8f806:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   8f808:	4a54      	ldr	r2, [pc, #336]	; (8f95c <Cl_Conductivity_Sensor_Controller+0x204>)
   8f80a:	89bb      	ldrh	r3, [r7, #12]
   8f80c:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   8f80e:	4b4a      	ldr	r3, [pc, #296]	; (8f938 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8f810:	2202      	movs	r2, #2
   8f812:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8f814:	4b4d      	ldr	r3, [pc, #308]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f816:	881b      	ldrh	r3, [r3, #0]
   8f818:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8f81c:	d907      	bls.n	8f82e <Cl_Conductivity_Sensor_Controller+0xd6>
   8f81e:	4b4b      	ldr	r3, [pc, #300]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f820:	881b      	ldrh	r3, [r3, #0]
   8f822:	f640 0297 	movw	r2, #2199	; 0x897
   8f826:	4293      	cmp	r3, r2
   8f828:	d801      	bhi.n	8f82e <Cl_Conductivity_Sensor_Controller+0xd6>
						{
							return CL_OK;
   8f82a:	2300      	movs	r3, #0
   8f82c:	e079      	b.n	8f922 <Cl_Conductivity_Sensor_Controller+0x1ca>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8f82e:	4b43      	ldr	r3, [pc, #268]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f830:	881b      	ldrh	r3, [r3, #0]
   8f832:	4618      	mov	r0, r3
   8f834:	4b42      	ldr	r3, [pc, #264]	; (8f940 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f836:	4798      	blx	r3
							return CL_OK;
   8f838:	2300      	movs	r3, #0
   8f83a:	e072      	b.n	8f922 <Cl_Conductivity_Sensor_Controller+0x1ca>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8f83c:	79fb      	ldrb	r3, [r7, #7]
   8f83e:	2b02      	cmp	r3, #2
   8f840:	d000      	beq.n	8f844 <Cl_Conductivity_Sensor_Controller+0xec>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8f842:	e06c      	b.n	8f91e <Cl_Conductivity_Sensor_Controller+0x1c6>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f844:	f107 030a 	add.w	r3, r7, #10
   8f848:	4619      	mov	r1, r3
   8f84a:	2006      	movs	r0, #6
   8f84c:	4b3e      	ldr	r3, [pc, #248]	; (8f948 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f84e:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   8f850:	897b      	ldrh	r3, [r7, #10]
   8f852:	461a      	mov	r2, r3
   8f854:	4b3e      	ldr	r3, [pc, #248]	; (8f950 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8f856:	4610      	mov	r0, r2
   8f858:	4798      	blx	r3
   8f85a:	4c3e      	ldr	r4, [pc, #248]	; (8f954 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8f85c:	a334      	add	r3, pc, #208	; (adr r3, 8f930 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f862:	47a0      	blx	r4
   8f864:	4603      	mov	r3, r0
   8f866:	460c      	mov	r4, r1
   8f868:	4619      	mov	r1, r3
   8f86a:	4622      	mov	r2, r4
   8f86c:	4b3a      	ldr	r3, [pc, #232]	; (8f958 <Cl_Conductivity_Sensor_Controller+0x200>)
   8f86e:	4608      	mov	r0, r1
   8f870:	4611      	mov	r1, r2
   8f872:	4798      	blx	r3
   8f874:	4603      	mov	r3, r0
   8f876:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8f878:	4b34      	ldr	r3, [pc, #208]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f87a:	881b      	ldrh	r3, [r3, #0]
   8f87c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8f880:	d949      	bls.n	8f916 <Cl_Conductivity_Sensor_Controller+0x1be>
   8f882:	4b32      	ldr	r3, [pc, #200]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f884:	881b      	ldrh	r3, [r3, #0]
   8f886:	f640 0297 	movw	r2, #2199	; 0x897
   8f88a:	4293      	cmp	r3, r2
   8f88c:	d843      	bhi.n	8f916 <Cl_Conductivity_Sensor_Controller+0x1be>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8f88e:	4b2f      	ldr	r3, [pc, #188]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f890:	881b      	ldrh	r3, [r3, #0]
   8f892:	461a      	mov	r2, r3
   8f894:	4613      	mov	r3, r2
   8f896:	00db      	lsls	r3, r3, #3
   8f898:	4413      	add	r3, r2
   8f89a:	005b      	lsls	r3, r3, #1
   8f89c:	441a      	add	r2, r3
   8f89e:	89bb      	ldrh	r3, [r7, #12]
   8f8a0:	4413      	add	r3, r2
   8f8a2:	4a2f      	ldr	r2, [pc, #188]	; (8f960 <Cl_Conductivity_Sensor_Controller+0x208>)
   8f8a4:	fb82 1203 	smull	r1, r2, r2, r3
   8f8a8:	10d2      	asrs	r2, r2, #3
   8f8aa:	17db      	asrs	r3, r3, #31
   8f8ac:	1ad3      	subs	r3, r2, r3
   8f8ae:	b29a      	uxth	r2, r3
   8f8b0:	4b26      	ldr	r3, [pc, #152]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f8b2:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   8f8b4:	4b25      	ldr	r3, [pc, #148]	; (8f94c <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f8b6:	881b      	ldrh	r3, [r3, #0]
   8f8b8:	005a      	lsls	r2, r3, #1
   8f8ba:	89bb      	ldrh	r3, [r7, #12]
   8f8bc:	4413      	add	r3, r2
   8f8be:	4a29      	ldr	r2, [pc, #164]	; (8f964 <Cl_Conductivity_Sensor_Controller+0x20c>)
   8f8c0:	fb82 1203 	smull	r1, r2, r2, r3
   8f8c4:	17db      	asrs	r3, r3, #31
   8f8c6:	1ad3      	subs	r3, r2, r3
   8f8c8:	b29a      	uxth	r2, r3
   8f8ca:	4b24      	ldr	r3, [pc, #144]	; (8f95c <Cl_Conductivity_Sensor_Controller+0x204>)
   8f8cc:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8f8ce:	4b23      	ldr	r3, [pc, #140]	; (8f95c <Cl_Conductivity_Sensor_Controller+0x204>)
   8f8d0:	881b      	ldrh	r3, [r3, #0]
   8f8d2:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8f8d6:	4293      	cmp	r3, r2
   8f8d8:	d90b      	bls.n	8f8f2 <Cl_Conductivity_Sensor_Controller+0x19a>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8f8da:	4b18      	ldr	r3, [pc, #96]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f8dc:	881b      	ldrh	r3, [r3, #0]
   8f8de:	3b01      	subs	r3, #1
   8f8e0:	b29a      	uxth	r2, r3
   8f8e2:	4b16      	ldr	r3, [pc, #88]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f8e4:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8f8e6:	4b15      	ldr	r3, [pc, #84]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f8e8:	881b      	ldrh	r3, [r3, #0]
   8f8ea:	4618      	mov	r0, r3
   8f8ec:	4b14      	ldr	r3, [pc, #80]	; (8f940 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f8ee:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8f8f0:	e013      	b.n	8f91a <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
						}
						else if (cond_3sec_avg < 1995 )
   8f8f2:	4b1a      	ldr	r3, [pc, #104]	; (8f95c <Cl_Conductivity_Sensor_Controller+0x204>)
   8f8f4:	881b      	ldrh	r3, [r3, #0]
   8f8f6:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8f8fa:	4293      	cmp	r3, r2
   8f8fc:	d80d      	bhi.n	8f91a <Cl_Conductivity_Sensor_Controller+0x1c2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8f8fe:	4b0f      	ldr	r3, [pc, #60]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f900:	881b      	ldrh	r3, [r3, #0]
   8f902:	3301      	adds	r3, #1
   8f904:	b29a      	uxth	r2, r3
   8f906:	4b0d      	ldr	r3, [pc, #52]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f908:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8f90a:	4b0c      	ldr	r3, [pc, #48]	; (8f93c <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f90c:	881b      	ldrh	r3, [r3, #0]
   8f90e:	4618      	mov	r0, r3
   8f910:	4b0b      	ldr	r3, [pc, #44]	; (8f940 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f912:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8f914:	e001      	b.n	8f91a <Cl_Conductivity_Sensor_Controller+0x1c2>
			
						}
					}
					else
					{
						return CL_ERROR;
   8f916:	2304      	movs	r3, #4
   8f918:	e003      	b.n	8f922 <Cl_Conductivity_Sensor_Controller+0x1ca>
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8f91a:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8f91c:	bf00      	nop
					default:break;
				}
				
			break;
   8f91e:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   8f920:	2300      	movs	r3, #0
   8f922:	4618      	mov	r0, r3
   8f924:	3714      	adds	r7, #20
   8f926:	46bd      	mov	sp, r7
   8f928:	bd90      	pop	{r4, r7, pc}
   8f92a:	bf00      	nop
   8f92c:	f3af 8000 	nop.w
   8f930:	58e21965 	.word	0x58e21965
   8f934:	3fe9b717 	.word	0x3fe9b717
   8f938:	20071a23 	.word	0x20071a23
   8f93c:	20070576 	.word	0x20070576
   8f940:	00099f7d 	.word	0x00099f7d
   8f944:	00093009 	.word	0x00093009
   8f948:	0008e6a1 	.word	0x0008e6a1
   8f94c:	20071a24 	.word	0x20071a24
   8f950:	000a5c45 	.word	0x000a5c45
   8f954:	000a5d11 	.word	0x000a5d11
   8f958:	000a6295 	.word	0x000a6295
   8f95c:	20071a26 	.word	0x20071a26
   8f960:	66666667 	.word	0x66666667
   8f964:	55555556 	.word	0x55555556

0008f968 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8f968:	b580      	push	{r7, lr}
   8f96a:	b084      	sub	sp, #16
   8f96c:	af00      	add	r7, sp, #0
   8f96e:	4603      	mov	r3, r0
   8f970:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8f972:	2300      	movs	r3, #0
   8f974:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   8f976:	2300      	movs	r3, #0
   8f978:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8f97a:	4b91      	ldr	r3, [pc, #580]	; (8fbc0 <Cl_Pressure_Controller_Handler+0x258>)
   8f97c:	781b      	ldrb	r3, [r3, #0]
   8f97e:	2b01      	cmp	r3, #1
   8f980:	f040 8096 	bne.w	8fab0 <Cl_Pressure_Controller_Handler+0x148>
	{
		switch(Cl_Ps_Event)
   8f984:	79fb      	ldrb	r3, [r7, #7]
   8f986:	2b00      	cmp	r3, #0
   8f988:	f000 8110 	beq.w	8fbac <Cl_Pressure_Controller_Handler+0x244>
   8f98c:	2b01      	cmp	r3, #1
   8f98e:	d000      	beq.n	8f992 <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8f990:	e111      	b.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8f992:	4b8c      	ldr	r3, [pc, #560]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8f994:	881b      	ldrh	r3, [r3, #0]
   8f996:	2b00      	cmp	r3, #0
   8f998:	d114      	bne.n	8f9c4 <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8f99a:	498b      	ldr	r1, [pc, #556]	; (8fbc8 <Cl_Pressure_Controller_Handler+0x260>)
   8f99c:	200e      	movs	r0, #14
   8f99e:	4b8b      	ldr	r3, [pc, #556]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9a0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8f9a2:	498b      	ldr	r1, [pc, #556]	; (8fbd0 <Cl_Pressure_Controller_Handler+0x268>)
   8f9a4:	200f      	movs	r0, #15
   8f9a6:	4b89      	ldr	r3, [pc, #548]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9a8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8f9aa:	498a      	ldr	r1, [pc, #552]	; (8fbd4 <Cl_Pressure_Controller_Handler+0x26c>)
   8f9ac:	2010      	movs	r0, #16
   8f9ae:	4b87      	ldr	r3, [pc, #540]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9b0:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8f9b2:	4989      	ldr	r1, [pc, #548]	; (8fbd8 <Cl_Pressure_Controller_Handler+0x270>)
   8f9b4:	200b      	movs	r0, #11
   8f9b6:	4b85      	ldr	r3, [pc, #532]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9b8:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8f9ba:	4988      	ldr	r1, [pc, #544]	; (8fbdc <Cl_Pressure_Controller_Handler+0x274>)
   8f9bc:	200b      	movs	r0, #11
   8f9be:	4b83      	ldr	r3, [pc, #524]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9c0:	4798      	blx	r3
   8f9c2:	e063      	b.n	8fa8c <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8f9c4:	f107 030c 	add.w	r3, r7, #12
   8f9c8:	4619      	mov	r1, r3
   8f9ca:	200e      	movs	r0, #14
   8f9cc:	4b7f      	ldr	r3, [pc, #508]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9ce:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8f9d0:	4b7d      	ldr	r3, [pc, #500]	; (8fbc8 <Cl_Pressure_Controller_Handler+0x260>)
   8f9d2:	881b      	ldrh	r3, [r3, #0]
   8f9d4:	461a      	mov	r2, r3
   8f9d6:	89bb      	ldrh	r3, [r7, #12]
   8f9d8:	4413      	add	r3, r2
   8f9da:	4a7a      	ldr	r2, [pc, #488]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8f9dc:	8812      	ldrh	r2, [r2, #0]
   8f9de:	fb93 f3f2 	sdiv	r3, r3, r2
   8f9e2:	b29b      	uxth	r3, r3
   8f9e4:	3301      	adds	r3, #1
   8f9e6:	b29a      	uxth	r2, r3
   8f9e8:	4b77      	ldr	r3, [pc, #476]	; (8fbc8 <Cl_Pressure_Controller_Handler+0x260>)
   8f9ea:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8f9ec:	f107 030c 	add.w	r3, r7, #12
   8f9f0:	4619      	mov	r1, r3
   8f9f2:	200f      	movs	r0, #15
   8f9f4:	4b75      	ldr	r3, [pc, #468]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8f9f6:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8f9f8:	4b75      	ldr	r3, [pc, #468]	; (8fbd0 <Cl_Pressure_Controller_Handler+0x268>)
   8f9fa:	881b      	ldrh	r3, [r3, #0]
   8f9fc:	461a      	mov	r2, r3
   8f9fe:	89bb      	ldrh	r3, [r7, #12]
   8fa00:	4413      	add	r3, r2
   8fa02:	4a70      	ldr	r2, [pc, #448]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa04:	8812      	ldrh	r2, [r2, #0]
   8fa06:	fb93 f3f2 	sdiv	r3, r3, r2
   8fa0a:	b29b      	uxth	r3, r3
   8fa0c:	3301      	adds	r3, #1
   8fa0e:	b29a      	uxth	r2, r3
   8fa10:	4b6f      	ldr	r3, [pc, #444]	; (8fbd0 <Cl_Pressure_Controller_Handler+0x268>)
   8fa12:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8fa14:	f107 030c 	add.w	r3, r7, #12
   8fa18:	4619      	mov	r1, r3
   8fa1a:	2010      	movs	r0, #16
   8fa1c:	4b6b      	ldr	r3, [pc, #428]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fa1e:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8fa20:	4b6c      	ldr	r3, [pc, #432]	; (8fbd4 <Cl_Pressure_Controller_Handler+0x26c>)
   8fa22:	881b      	ldrh	r3, [r3, #0]
   8fa24:	461a      	mov	r2, r3
   8fa26:	89bb      	ldrh	r3, [r7, #12]
   8fa28:	4413      	add	r3, r2
   8fa2a:	4a66      	ldr	r2, [pc, #408]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa2c:	8812      	ldrh	r2, [r2, #0]
   8fa2e:	fb93 f3f2 	sdiv	r3, r3, r2
   8fa32:	b29b      	uxth	r3, r3
   8fa34:	3301      	adds	r3, #1
   8fa36:	b29a      	uxth	r2, r3
   8fa38:	4b66      	ldr	r3, [pc, #408]	; (8fbd4 <Cl_Pressure_Controller_Handler+0x26c>)
   8fa3a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fa3c:	f107 030c 	add.w	r3, r7, #12
   8fa40:	4619      	mov	r1, r3
   8fa42:	200b      	movs	r0, #11
   8fa44:	4b61      	ldr	r3, [pc, #388]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fa46:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8fa48:	4b63      	ldr	r3, [pc, #396]	; (8fbd8 <Cl_Pressure_Controller_Handler+0x270>)
   8fa4a:	881b      	ldrh	r3, [r3, #0]
   8fa4c:	461a      	mov	r2, r3
   8fa4e:	89bb      	ldrh	r3, [r7, #12]
   8fa50:	4413      	add	r3, r2
   8fa52:	4a5c      	ldr	r2, [pc, #368]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa54:	8812      	ldrh	r2, [r2, #0]
   8fa56:	fb93 f3f2 	sdiv	r3, r3, r2
   8fa5a:	b29b      	uxth	r3, r3
   8fa5c:	3301      	adds	r3, #1
   8fa5e:	b29a      	uxth	r2, r3
   8fa60:	4b5d      	ldr	r3, [pc, #372]	; (8fbd8 <Cl_Pressure_Controller_Handler+0x270>)
   8fa62:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fa64:	f107 030c 	add.w	r3, r7, #12
   8fa68:	4619      	mov	r1, r3
   8fa6a:	200b      	movs	r0, #11
   8fa6c:	4b57      	ldr	r3, [pc, #348]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fa6e:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8fa70:	4b5a      	ldr	r3, [pc, #360]	; (8fbdc <Cl_Pressure_Controller_Handler+0x274>)
   8fa72:	881b      	ldrh	r3, [r3, #0]
   8fa74:	461a      	mov	r2, r3
   8fa76:	89bb      	ldrh	r3, [r7, #12]
   8fa78:	4413      	add	r3, r2
   8fa7a:	4a52      	ldr	r2, [pc, #328]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa7c:	8812      	ldrh	r2, [r2, #0]
   8fa7e:	fb93 f3f2 	sdiv	r3, r3, r2
   8fa82:	b29b      	uxth	r3, r3
   8fa84:	3301      	adds	r3, #1
   8fa86:	b29a      	uxth	r2, r3
   8fa88:	4b54      	ldr	r3, [pc, #336]	; (8fbdc <Cl_Pressure_Controller_Handler+0x274>)
   8fa8a:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8fa8c:	4b4d      	ldr	r3, [pc, #308]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa8e:	881b      	ldrh	r3, [r3, #0]
   8fa90:	3301      	adds	r3, #1
   8fa92:	b29a      	uxth	r2, r3
   8fa94:	4b4b      	ldr	r3, [pc, #300]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa96:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8fa98:	4b4a      	ldr	r3, [pc, #296]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8fa9a:	881b      	ldrh	r3, [r3, #0]
   8fa9c:	2b0a      	cmp	r3, #10
   8fa9e:	f240 8087 	bls.w	8fbb0 <Cl_Pressure_Controller_Handler+0x248>
			{
				counter = 0;
   8faa2:	4b48      	ldr	r3, [pc, #288]	; (8fbc4 <Cl_Pressure_Controller_Handler+0x25c>)
   8faa4:	2200      	movs	r2, #0
   8faa6:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8faa8:	4b45      	ldr	r3, [pc, #276]	; (8fbc0 <Cl_Pressure_Controller_Handler+0x258>)
   8faaa:	2202      	movs	r2, #2
   8faac:	701a      	strb	r2, [r3, #0]
			}
			break;
   8faae:	e07f      	b.n	8fbb0 <Cl_Pressure_Controller_Handler+0x248>
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8fab0:	4b43      	ldr	r3, [pc, #268]	; (8fbc0 <Cl_Pressure_Controller_Handler+0x258>)
   8fab2:	781b      	ldrb	r3, [r3, #0]
   8fab4:	2b02      	cmp	r3, #2
   8fab6:	d17e      	bne.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
   8fab8:	79fb      	ldrb	r3, [r7, #7]
   8faba:	2b00      	cmp	r3, #0
   8fabc:	d07a      	beq.n	8fbb4 <Cl_Pressure_Controller_Handler+0x24c>
   8fabe:	2b01      	cmp	r3, #1
   8fac0:	d000      	beq.n	8fac4 <Cl_Pressure_Controller_Handler+0x15c>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8fac2:	e078      	b.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8fac4:	f107 030c 	add.w	r3, r7, #12
   8fac8:	4619      	mov	r1, r3
   8faca:	200e      	movs	r0, #14
   8facc:	4b3f      	ldr	r3, [pc, #252]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8face:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8fad0:	4b3d      	ldr	r3, [pc, #244]	; (8fbc8 <Cl_Pressure_Controller_Handler+0x260>)
   8fad2:	881b      	ldrh	r3, [r3, #0]
   8fad4:	461a      	mov	r2, r3
   8fad6:	4613      	mov	r3, r2
   8fad8:	00db      	lsls	r3, r3, #3
   8fada:	4413      	add	r3, r2
   8fadc:	89ba      	ldrh	r2, [r7, #12]
   8fade:	4413      	add	r3, r2
   8fae0:	4a3f      	ldr	r2, [pc, #252]	; (8fbe0 <Cl_Pressure_Controller_Handler+0x278>)
   8fae2:	fb82 1203 	smull	r1, r2, r2, r3
   8fae6:	1092      	asrs	r2, r2, #2
   8fae8:	17db      	asrs	r3, r3, #31
   8faea:	1ad3      	subs	r3, r2, r3
   8faec:	b29a      	uxth	r2, r3
   8faee:	4b36      	ldr	r3, [pc, #216]	; (8fbc8 <Cl_Pressure_Controller_Handler+0x260>)
   8faf0:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8faf2:	f107 030c 	add.w	r3, r7, #12
   8faf6:	4619      	mov	r1, r3
   8faf8:	200f      	movs	r0, #15
   8fafa:	4b34      	ldr	r3, [pc, #208]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fafc:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8fafe:	4b34      	ldr	r3, [pc, #208]	; (8fbd0 <Cl_Pressure_Controller_Handler+0x268>)
   8fb00:	881b      	ldrh	r3, [r3, #0]
   8fb02:	461a      	mov	r2, r3
   8fb04:	4613      	mov	r3, r2
   8fb06:	00db      	lsls	r3, r3, #3
   8fb08:	4413      	add	r3, r2
   8fb0a:	89ba      	ldrh	r2, [r7, #12]
   8fb0c:	4413      	add	r3, r2
   8fb0e:	4a34      	ldr	r2, [pc, #208]	; (8fbe0 <Cl_Pressure_Controller_Handler+0x278>)
   8fb10:	fb82 1203 	smull	r1, r2, r2, r3
   8fb14:	1092      	asrs	r2, r2, #2
   8fb16:	17db      	asrs	r3, r3, #31
   8fb18:	1ad3      	subs	r3, r2, r3
   8fb1a:	b29a      	uxth	r2, r3
   8fb1c:	4b2c      	ldr	r3, [pc, #176]	; (8fbd0 <Cl_Pressure_Controller_Handler+0x268>)
   8fb1e:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8fb20:	f107 030c 	add.w	r3, r7, #12
   8fb24:	4619      	mov	r1, r3
   8fb26:	2010      	movs	r0, #16
   8fb28:	4b28      	ldr	r3, [pc, #160]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fb2a:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8fb2c:	4b29      	ldr	r3, [pc, #164]	; (8fbd4 <Cl_Pressure_Controller_Handler+0x26c>)
   8fb2e:	881b      	ldrh	r3, [r3, #0]
   8fb30:	461a      	mov	r2, r3
   8fb32:	4613      	mov	r3, r2
   8fb34:	00db      	lsls	r3, r3, #3
   8fb36:	4413      	add	r3, r2
   8fb38:	89ba      	ldrh	r2, [r7, #12]
   8fb3a:	4413      	add	r3, r2
   8fb3c:	4a28      	ldr	r2, [pc, #160]	; (8fbe0 <Cl_Pressure_Controller_Handler+0x278>)
   8fb3e:	fb82 1203 	smull	r1, r2, r2, r3
   8fb42:	1092      	asrs	r2, r2, #2
   8fb44:	17db      	asrs	r3, r3, #31
   8fb46:	1ad3      	subs	r3, r2, r3
   8fb48:	b29a      	uxth	r2, r3
   8fb4a:	4b22      	ldr	r3, [pc, #136]	; (8fbd4 <Cl_Pressure_Controller_Handler+0x26c>)
   8fb4c:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fb4e:	f107 030c 	add.w	r3, r7, #12
   8fb52:	4619      	mov	r1, r3
   8fb54:	200b      	movs	r0, #11
   8fb56:	4b1d      	ldr	r3, [pc, #116]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fb58:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8fb5a:	4b1f      	ldr	r3, [pc, #124]	; (8fbd8 <Cl_Pressure_Controller_Handler+0x270>)
   8fb5c:	881b      	ldrh	r3, [r3, #0]
   8fb5e:	461a      	mov	r2, r3
   8fb60:	4613      	mov	r3, r2
   8fb62:	00db      	lsls	r3, r3, #3
   8fb64:	4413      	add	r3, r2
   8fb66:	89ba      	ldrh	r2, [r7, #12]
   8fb68:	4413      	add	r3, r2
   8fb6a:	4a1d      	ldr	r2, [pc, #116]	; (8fbe0 <Cl_Pressure_Controller_Handler+0x278>)
   8fb6c:	fb82 1203 	smull	r1, r2, r2, r3
   8fb70:	1092      	asrs	r2, r2, #2
   8fb72:	17db      	asrs	r3, r3, #31
   8fb74:	1ad3      	subs	r3, r2, r3
   8fb76:	b29a      	uxth	r2, r3
   8fb78:	4b17      	ldr	r3, [pc, #92]	; (8fbd8 <Cl_Pressure_Controller_Handler+0x270>)
   8fb7a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8fb7c:	f107 030c 	add.w	r3, r7, #12
   8fb80:	4619      	mov	r1, r3
   8fb82:	200c      	movs	r0, #12
   8fb84:	4b11      	ldr	r3, [pc, #68]	; (8fbcc <Cl_Pressure_Controller_Handler+0x264>)
   8fb86:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8fb88:	4b14      	ldr	r3, [pc, #80]	; (8fbdc <Cl_Pressure_Controller_Handler+0x274>)
   8fb8a:	881b      	ldrh	r3, [r3, #0]
   8fb8c:	461a      	mov	r2, r3
   8fb8e:	4613      	mov	r3, r2
   8fb90:	00db      	lsls	r3, r3, #3
   8fb92:	4413      	add	r3, r2
   8fb94:	89ba      	ldrh	r2, [r7, #12]
   8fb96:	4413      	add	r3, r2
   8fb98:	4a11      	ldr	r2, [pc, #68]	; (8fbe0 <Cl_Pressure_Controller_Handler+0x278>)
   8fb9a:	fb82 1203 	smull	r1, r2, r2, r3
   8fb9e:	1092      	asrs	r2, r2, #2
   8fba0:	17db      	asrs	r3, r3, #31
   8fba2:	1ad3      	subs	r3, r2, r3
   8fba4:	b29a      	uxth	r2, r3
   8fba6:	4b0d      	ldr	r3, [pc, #52]	; (8fbdc <Cl_Pressure_Controller_Handler+0x274>)
   8fba8:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8fbaa:	e004      	b.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8fbac:	bf00      	nop
   8fbae:	e002      	b.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
			if(counter > 10)
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
   8fbb0:	bf00      	nop
   8fbb2:	e000      	b.n	8fbb6 <Cl_Pressure_Controller_Handler+0x24e>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8fbb4:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8fbb6:	7bfb      	ldrb	r3, [r7, #15]
}
   8fbb8:	4618      	mov	r0, r3
   8fbba:	3710      	adds	r7, #16
   8fbbc:	46bd      	mov	sp, r7
   8fbbe:	bd80      	pop	{r7, pc}
   8fbc0:	20071a34 	.word	0x20071a34
   8fbc4:	20071a32 	.word	0x20071a32
   8fbc8:	20071a28 	.word	0x20071a28
   8fbcc:	0008e6a1 	.word	0x0008e6a1
   8fbd0:	20071a2a 	.word	0x20071a2a
   8fbd4:	20071a2c 	.word	0x20071a2c
   8fbd8:	20071a2e 	.word	0x20071a2e
   8fbdc:	20071a30 	.word	0x20071a30
   8fbe0:	66666667 	.word	0x66666667

0008fbe4 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   8fbe4:	b480      	push	{r7}
   8fbe6:	b083      	sub	sp, #12
   8fbe8:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8fbea:	2300      	movs	r3, #0
   8fbec:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8fbee:	4b0c      	ldr	r3, [pc, #48]	; (8fc20 <Cl_Pressure_Controller_Init+0x3c>)
   8fbf0:	2200      	movs	r2, #0
   8fbf2:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8fbf4:	4b0b      	ldr	r3, [pc, #44]	; (8fc24 <Cl_Pressure_Controller_Init+0x40>)
   8fbf6:	2200      	movs	r2, #0
   8fbf8:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8fbfa:	4b0b      	ldr	r3, [pc, #44]	; (8fc28 <Cl_Pressure_Controller_Init+0x44>)
   8fbfc:	2200      	movs	r2, #0
   8fbfe:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8fc00:	4b0a      	ldr	r3, [pc, #40]	; (8fc2c <Cl_Pressure_Controller_Init+0x48>)
   8fc02:	2200      	movs	r2, #0
   8fc04:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8fc06:	4b0a      	ldr	r3, [pc, #40]	; (8fc30 <Cl_Pressure_Controller_Init+0x4c>)
   8fc08:	2200      	movs	r2, #0
   8fc0a:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8fc0c:	4b09      	ldr	r3, [pc, #36]	; (8fc34 <Cl_Pressure_Controller_Init+0x50>)
   8fc0e:	2201      	movs	r2, #1
   8fc10:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8fc12:	79fb      	ldrb	r3, [r7, #7]
   8fc14:	4618      	mov	r0, r3
   8fc16:	370c      	adds	r7, #12
   8fc18:	46bd      	mov	sp, r7
   8fc1a:	bc80      	pop	{r7}
   8fc1c:	4770      	bx	lr
   8fc1e:	bf00      	nop
   8fc20:	20071a28 	.word	0x20071a28
   8fc24:	20071a2a 	.word	0x20071a2a
   8fc28:	20071a2c 	.word	0x20071a2c
   8fc2c:	20071a2e 	.word	0x20071a2e
   8fc30:	20071a30 	.word	0x20071a30
   8fc34:	20071a34 	.word	0x20071a34

0008fc38 <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   8fc38:	b590      	push	{r4, r7, lr}
   8fc3a:	b085      	sub	sp, #20
   8fc3c:	af00      	add	r7, sp, #0
   8fc3e:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   8fc40:	f04f 0300 	mov.w	r3, #0
   8fc44:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8fc46:	2300      	movs	r3, #0
   8fc48:	60fb      	str	r3, [r7, #12]
   8fc4a:	e075      	b.n	8fd38 <res_temp_lookuptable+0x100>
	{
		if (res == res_temp[i].resistance)
   8fc4c:	4b3e      	ldr	r3, [pc, #248]	; (8fd48 <res_temp_lookuptable+0x110>)
   8fc4e:	6878      	ldr	r0, [r7, #4]
   8fc50:	4798      	blx	r3
   8fc52:	4a3e      	ldr	r2, [pc, #248]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fc54:	68fb      	ldr	r3, [r7, #12]
   8fc56:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fc5a:	4b3d      	ldr	r3, [pc, #244]	; (8fd50 <res_temp_lookuptable+0x118>)
   8fc5c:	4611      	mov	r1, r2
   8fc5e:	4798      	blx	r3
   8fc60:	4603      	mov	r3, r0
   8fc62:	2b00      	cmp	r3, #0
   8fc64:	d007      	beq.n	8fc76 <res_temp_lookuptable+0x3e>
		{
			res_temp_value=res_temp[i].temperature;
   8fc66:	4a39      	ldr	r2, [pc, #228]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fc68:	68fb      	ldr	r3, [r7, #12]
   8fc6a:	00db      	lsls	r3, r3, #3
   8fc6c:	4413      	add	r3, r2
   8fc6e:	685b      	ldr	r3, [r3, #4]
   8fc70:	4a38      	ldr	r2, [pc, #224]	; (8fd54 <res_temp_lookuptable+0x11c>)
   8fc72:	6013      	str	r3, [r2, #0]
			break;
   8fc74:	e063      	b.n	8fd3e <res_temp_lookuptable+0x106>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   8fc76:	4b34      	ldr	r3, [pc, #208]	; (8fd48 <res_temp_lookuptable+0x110>)
   8fc78:	6878      	ldr	r0, [r7, #4]
   8fc7a:	4798      	blx	r3
   8fc7c:	4a33      	ldr	r2, [pc, #204]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fc7e:	68fb      	ldr	r3, [r7, #12]
   8fc80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fc84:	4b34      	ldr	r3, [pc, #208]	; (8fd58 <res_temp_lookuptable+0x120>)
   8fc86:	4611      	mov	r1, r2
   8fc88:	4798      	blx	r3
   8fc8a:	4603      	mov	r3, r0
   8fc8c:	2b00      	cmp	r3, #0
   8fc8e:	d050      	beq.n	8fd32 <res_temp_lookuptable+0xfa>
   8fc90:	4b2d      	ldr	r3, [pc, #180]	; (8fd48 <res_temp_lookuptable+0x110>)
   8fc92:	6878      	ldr	r0, [r7, #4]
   8fc94:	4798      	blx	r3
   8fc96:	68fb      	ldr	r3, [r7, #12]
   8fc98:	3301      	adds	r3, #1
   8fc9a:	4a2c      	ldr	r2, [pc, #176]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fc9c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fca0:	4b2e      	ldr	r3, [pc, #184]	; (8fd5c <res_temp_lookuptable+0x124>)
   8fca2:	4611      	mov	r1, r2
   8fca4:	4798      	blx	r3
   8fca6:	4603      	mov	r3, r0
   8fca8:	2b00      	cmp	r3, #0
   8fcaa:	d042      	beq.n	8fd32 <res_temp_lookuptable+0xfa>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   8fcac:	68fb      	ldr	r3, [r7, #12]
   8fcae:	3301      	adds	r3, #1
   8fcb0:	4a26      	ldr	r2, [pc, #152]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fcb2:	00db      	lsls	r3, r3, #3
   8fcb4:	4413      	add	r3, r2
   8fcb6:	6858      	ldr	r0, [r3, #4]
   8fcb8:	4a24      	ldr	r2, [pc, #144]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fcba:	68fb      	ldr	r3, [r7, #12]
   8fcbc:	00db      	lsls	r3, r3, #3
   8fcbe:	4413      	add	r3, r2
   8fcc0:	685a      	ldr	r2, [r3, #4]
   8fcc2:	4b27      	ldr	r3, [pc, #156]	; (8fd60 <res_temp_lookuptable+0x128>)
   8fcc4:	4611      	mov	r1, r2
   8fcc6:	4798      	blx	r3
   8fcc8:	4603      	mov	r3, r0
   8fcca:	461c      	mov	r4, r3
   8fccc:	68fb      	ldr	r3, [r7, #12]
   8fcce:	3301      	adds	r3, #1
   8fcd0:	4a1e      	ldr	r2, [pc, #120]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fcd2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   8fcd6:	4a1d      	ldr	r2, [pc, #116]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fcd8:	68fb      	ldr	r3, [r7, #12]
   8fcda:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fcde:	4b20      	ldr	r3, [pc, #128]	; (8fd60 <res_temp_lookuptable+0x128>)
   8fce0:	4611      	mov	r1, r2
   8fce2:	4798      	blx	r3
   8fce4:	4603      	mov	r3, r0
   8fce6:	461a      	mov	r2, r3
   8fce8:	4b1e      	ldr	r3, [pc, #120]	; (8fd64 <res_temp_lookuptable+0x12c>)
   8fcea:	4611      	mov	r1, r2
   8fcec:	4620      	mov	r0, r4
   8fcee:	4798      	blx	r3
   8fcf0:	4603      	mov	r3, r0
   8fcf2:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   8fcf4:	4b14      	ldr	r3, [pc, #80]	; (8fd48 <res_temp_lookuptable+0x110>)
   8fcf6:	6878      	ldr	r0, [r7, #4]
   8fcf8:	4798      	blx	r3
   8fcfa:	4a14      	ldr	r2, [pc, #80]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fcfc:	68fb      	ldr	r3, [r7, #12]
   8fcfe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fd02:	4b17      	ldr	r3, [pc, #92]	; (8fd60 <res_temp_lookuptable+0x128>)
   8fd04:	4611      	mov	r1, r2
   8fd06:	4798      	blx	r3
   8fd08:	4603      	mov	r3, r0
   8fd0a:	461a      	mov	r2, r3
   8fd0c:	4b16      	ldr	r3, [pc, #88]	; (8fd68 <res_temp_lookuptable+0x130>)
   8fd0e:	68b9      	ldr	r1, [r7, #8]
   8fd10:	4610      	mov	r0, r2
   8fd12:	4798      	blx	r3
   8fd14:	4603      	mov	r3, r0
   8fd16:	4618      	mov	r0, r3
   8fd18:	4a0c      	ldr	r2, [pc, #48]	; (8fd4c <res_temp_lookuptable+0x114>)
   8fd1a:	68fb      	ldr	r3, [r7, #12]
   8fd1c:	00db      	lsls	r3, r3, #3
   8fd1e:	4413      	add	r3, r2
   8fd20:	685a      	ldr	r2, [r3, #4]
   8fd22:	4b12      	ldr	r3, [pc, #72]	; (8fd6c <res_temp_lookuptable+0x134>)
   8fd24:	4611      	mov	r1, r2
   8fd26:	4798      	blx	r3
   8fd28:	4603      	mov	r3, r0
   8fd2a:	461a      	mov	r2, r3
   8fd2c:	4b09      	ldr	r3, [pc, #36]	; (8fd54 <res_temp_lookuptable+0x11c>)
   8fd2e:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   8fd30:	e005      	b.n	8fd3e <res_temp_lookuptable+0x106>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8fd32:	68fb      	ldr	r3, [r7, #12]
   8fd34:	3301      	adds	r3, #1
   8fd36:	60fb      	str	r3, [r7, #12]
   8fd38:	68fb      	ldr	r3, [r7, #12]
   8fd3a:	2b95      	cmp	r3, #149	; 0x95
   8fd3c:	dd86      	ble.n	8fc4c <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   8fd3e:	bf00      	nop
   8fd40:	3714      	adds	r7, #20
   8fd42:	46bd      	mov	sp, r7
   8fd44:	bd90      	pop	{r4, r7, pc}
   8fd46:	bf00      	nop
   8fd48:	000a64e1 	.word	0x000a64e1
   8fd4c:	20070578 	.word	0x20070578
   8fd50:	000a68b9 	.word	0x000a68b9
   8fd54:	20071a48 	.word	0x20071a48
   8fd58:	000a6909 	.word	0x000a6909
   8fd5c:	000a68cd 	.word	0x000a68cd
   8fd60:	000a637d 	.word	0x000a637d
   8fd64:	000a66f9 	.word	0x000a66f9
   8fd68:	000a6591 	.word	0x000a6591
   8fd6c:	000a6381 	.word	0x000a6381

0008fd70 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8fd70:	b590      	push	{r4, r7, lr}
   8fd72:	b08b      	sub	sp, #44	; 0x2c
   8fd74:	af00      	add	r7, sp, #0
   8fd76:	4603      	mov	r3, r0
   8fd78:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   8fd7a:	f04f 0300 	mov.w	r3, #0
   8fd7e:	627b      	str	r3, [r7, #36]	; 0x24
   8fd80:	f04f 0300 	mov.w	r3, #0
   8fd84:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8fd86:	2300      	movs	r3, #0
   8fd88:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   8fd8a:	2300      	movs	r3, #0
   8fd8c:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   8fd8e:	2300      	movs	r3, #0
   8fd90:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8fd92:	4b90      	ldr	r3, [pc, #576]	; (8ffd4 <Cl_Temperature_Controller_Handler+0x264>)
   8fd94:	781b      	ldrb	r3, [r3, #0]
   8fd96:	2b01      	cmp	r3, #1
   8fd98:	f040 8090 	bne.w	8febc <Cl_Temperature_Controller_Handler+0x14c>
	{
			switch(Cl_Tc_Event)
   8fd9c:	79fb      	ldrb	r3, [r7, #7]
   8fd9e:	2b01      	cmp	r3, #1
   8fda0:	d005      	beq.n	8fdae <Cl_Temperature_Controller_Handler+0x3e>
   8fda2:	2b03      	cmp	r3, #3
   8fda4:	d076      	beq.n	8fe94 <Cl_Temperature_Controller_Handler+0x124>
   8fda6:	2b00      	cmp	r3, #0
   8fda8:	f000 8166 	beq.w	90078 <Cl_Temperature_Controller_Handler+0x308>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   8fdac:	e169      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8fdae:	4b8a      	ldr	r3, [pc, #552]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fdb0:	881b      	ldrh	r3, [r3, #0]
   8fdb2:	2b00      	cmp	r3, #0
   8fdb4:	d10c      	bne.n	8fdd0 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8fdb6:	4989      	ldr	r1, [pc, #548]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8fdb8:	2012      	movs	r0, #18
   8fdba:	4b89      	ldr	r3, [pc, #548]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fdbc:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8fdbe:	4989      	ldr	r1, [pc, #548]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8fdc0:	2013      	movs	r0, #19
   8fdc2:	4b87      	ldr	r3, [pc, #540]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fdc4:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8fdc6:	4988      	ldr	r1, [pc, #544]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8fdc8:	2014      	movs	r0, #20
   8fdca:	4b85      	ldr	r3, [pc, #532]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fdcc:	4798      	blx	r3
   8fdce:	e04f      	b.n	8fe70 <Cl_Temperature_Controller_Handler+0x100>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8fdd0:	f107 0314 	add.w	r3, r7, #20
   8fdd4:	4619      	mov	r1, r3
   8fdd6:	2012      	movs	r0, #18
   8fdd8:	4b81      	ldr	r3, [pc, #516]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fdda:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8fddc:	4b7f      	ldr	r3, [pc, #508]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8fdde:	881b      	ldrh	r3, [r3, #0]
   8fde0:	461a      	mov	r2, r3
   8fde2:	8abb      	ldrh	r3, [r7, #20]
   8fde4:	4413      	add	r3, r2
   8fde6:	4a7c      	ldr	r2, [pc, #496]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fde8:	8812      	ldrh	r2, [r2, #0]
   8fdea:	fb93 f3f2 	sdiv	r3, r3, r2
   8fdee:	b29b      	uxth	r3, r3
   8fdf0:	3301      	adds	r3, #1
   8fdf2:	b29a      	uxth	r2, r3
   8fdf4:	4b79      	ldr	r3, [pc, #484]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8fdf6:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8fdf8:	f107 0314 	add.w	r3, r7, #20
   8fdfc:	4619      	mov	r1, r3
   8fdfe:	2013      	movs	r0, #19
   8fe00:	4b77      	ldr	r3, [pc, #476]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fe02:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8fe04:	4b77      	ldr	r3, [pc, #476]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8fe06:	881b      	ldrh	r3, [r3, #0]
   8fe08:	461a      	mov	r2, r3
   8fe0a:	8abb      	ldrh	r3, [r7, #20]
   8fe0c:	4413      	add	r3, r2
   8fe0e:	4a72      	ldr	r2, [pc, #456]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe10:	8812      	ldrh	r2, [r2, #0]
   8fe12:	fb93 f3f2 	sdiv	r3, r3, r2
   8fe16:	b29b      	uxth	r3, r3
   8fe18:	3301      	adds	r3, #1
   8fe1a:	b29a      	uxth	r2, r3
   8fe1c:	4b71      	ldr	r3, [pc, #452]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8fe1e:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8fe20:	f107 0314 	add.w	r3, r7, #20
   8fe24:	4619      	mov	r1, r3
   8fe26:	2014      	movs	r0, #20
   8fe28:	4b6d      	ldr	r3, [pc, #436]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fe2a:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8fe2c:	8abb      	ldrh	r3, [r7, #20]
   8fe2e:	461a      	mov	r2, r3
   8fe30:	4b6e      	ldr	r3, [pc, #440]	; (8ffec <Cl_Temperature_Controller_Handler+0x27c>)
   8fe32:	4610      	mov	r0, r2
   8fe34:	4798      	blx	r3
   8fe36:	4b6c      	ldr	r3, [pc, #432]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8fe38:	681a      	ldr	r2, [r3, #0]
   8fe3a:	4b6d      	ldr	r3, [pc, #436]	; (8fff0 <Cl_Temperature_Controller_Handler+0x280>)
   8fe3c:	4611      	mov	r1, r2
   8fe3e:	4798      	blx	r3
   8fe40:	4603      	mov	r3, r0
   8fe42:	461c      	mov	r4, r3
   8fe44:	4b64      	ldr	r3, [pc, #400]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe46:	881b      	ldrh	r3, [r3, #0]
   8fe48:	461a      	mov	r2, r3
   8fe4a:	4b68      	ldr	r3, [pc, #416]	; (8ffec <Cl_Temperature_Controller_Handler+0x27c>)
   8fe4c:	4610      	mov	r0, r2
   8fe4e:	4798      	blx	r3
   8fe50:	4602      	mov	r2, r0
   8fe52:	4b68      	ldr	r3, [pc, #416]	; (8fff4 <Cl_Temperature_Controller_Handler+0x284>)
   8fe54:	4611      	mov	r1, r2
   8fe56:	4620      	mov	r0, r4
   8fe58:	4798      	blx	r3
   8fe5a:	4603      	mov	r3, r0
   8fe5c:	461a      	mov	r2, r3
   8fe5e:	4b64      	ldr	r3, [pc, #400]	; (8fff0 <Cl_Temperature_Controller_Handler+0x280>)
   8fe60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8fe64:	4610      	mov	r0, r2
   8fe66:	4798      	blx	r3
   8fe68:	4603      	mov	r3, r0
   8fe6a:	461a      	mov	r2, r3
   8fe6c:	4b5e      	ldr	r3, [pc, #376]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8fe6e:	601a      	str	r2, [r3, #0]
				}

				counter++;
   8fe70:	4b59      	ldr	r3, [pc, #356]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe72:	881b      	ldrh	r3, [r3, #0]
   8fe74:	3301      	adds	r3, #1
   8fe76:	b29a      	uxth	r2, r3
   8fe78:	4b57      	ldr	r3, [pc, #348]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe7a:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   8fe7c:	4b56      	ldr	r3, [pc, #344]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe7e:	881b      	ldrh	r3, [r3, #0]
   8fe80:	2b0a      	cmp	r3, #10
   8fe82:	f240 80fb 	bls.w	9007c <Cl_Temperature_Controller_Handler+0x30c>
				{
					counter = 0;
   8fe86:	4b54      	ldr	r3, [pc, #336]	; (8ffd8 <Cl_Temperature_Controller_Handler+0x268>)
   8fe88:	2200      	movs	r2, #0
   8fe8a:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   8fe8c:	4b51      	ldr	r3, [pc, #324]	; (8ffd4 <Cl_Temperature_Controller_Handler+0x264>)
   8fe8e:	2202      	movs	r2, #2
   8fe90:	701a      	strb	r2, [r3, #0]
				}
				break;
   8fe92:	e0f3      	b.n	9007c <Cl_Temperature_Controller_Handler+0x30c>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   8fe94:	f107 0312 	add.w	r3, r7, #18
   8fe98:	4618      	mov	r0, r3
   8fe9a:	4b57      	ldr	r3, [pc, #348]	; (8fff8 <Cl_Temperature_Controller_Handler+0x288>)
   8fe9c:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   8fe9e:	8a7b      	ldrh	r3, [r7, #18]
   8fea0:	461a      	mov	r2, r3
   8fea2:	4b52      	ldr	r3, [pc, #328]	; (8ffec <Cl_Temperature_Controller_Handler+0x27c>)
   8fea4:	4610      	mov	r0, r2
   8fea6:	4798      	blx	r3
   8fea8:	4b4f      	ldr	r3, [pc, #316]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8feaa:	681a      	ldr	r2, [r3, #0]
   8feac:	4b53      	ldr	r3, [pc, #332]	; (8fffc <Cl_Temperature_Controller_Handler+0x28c>)
   8feae:	4611      	mov	r1, r2
   8feb0:	4798      	blx	r3
   8feb2:	4603      	mov	r3, r0
   8feb4:	461a      	mov	r2, r3
   8feb6:	4b52      	ldr	r3, [pc, #328]	; (90000 <Cl_Temperature_Controller_Handler+0x290>)
   8feb8:	601a      	str	r2, [r3, #0]
				break;
   8feba:	e0e2      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   8febc:	4b45      	ldr	r3, [pc, #276]	; (8ffd4 <Cl_Temperature_Controller_Handler+0x264>)
   8febe:	781b      	ldrb	r3, [r3, #0]
   8fec0:	2b02      	cmp	r3, #2
   8fec2:	f040 80de 	bne.w	90082 <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
   8fec6:	79fb      	ldrb	r3, [r7, #7]
   8fec8:	2b01      	cmp	r3, #1
   8feca:	d006      	beq.n	8feda <Cl_Temperature_Controller_Handler+0x16a>
   8fecc:	2b03      	cmp	r3, #3
   8fece:	f000 80a9 	beq.w	90024 <Cl_Temperature_Controller_Handler+0x2b4>
   8fed2:	2b00      	cmp	r3, #0
   8fed4:	f000 80d4 	beq.w	90080 <Cl_Temperature_Controller_Handler+0x310>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   8fed8:	e0d3      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8feda:	f107 0314 	add.w	r3, r7, #20
   8fede:	4619      	mov	r1, r3
   8fee0:	2012      	movs	r0, #18
   8fee2:	4b3f      	ldr	r3, [pc, #252]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8fee4:	4798      	blx	r3
				
////				(402 *100* temp_val)/(2*32768);								// resistance of PT100
//				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
//				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
//				Temp1 = Temp1 - 2.5 + 0.25;										// sensor offset 
				Temp1 = (float)temp_val /100;
   8fee6:	8aba      	ldrh	r2, [r7, #20]
   8fee8:	4b46      	ldr	r3, [pc, #280]	; (90004 <Cl_Temperature_Controller_Handler+0x294>)
   8feea:	4610      	mov	r0, r2
   8feec:	4798      	blx	r3
   8feee:	4602      	mov	r2, r0
   8fef0:	4b40      	ldr	r3, [pc, #256]	; (8fff4 <Cl_Temperature_Controller_Handler+0x284>)
   8fef2:	4945      	ldr	r1, [pc, #276]	; (90008 <Cl_Temperature_Controller_Handler+0x298>)
   8fef4:	4610      	mov	r0, r2
   8fef6:	4798      	blx	r3
   8fef8:	4603      	mov	r3, r0
   8fefa:	461a      	mov	r2, r3
   8fefc:	4b43      	ldr	r3, [pc, #268]	; (9000c <Cl_Temperature_Controller_Handler+0x29c>)
   8fefe:	4610      	mov	r0, r2
   8ff00:	4798      	blx	r3
   8ff02:	4603      	mov	r3, r0
   8ff04:	b29a      	uxth	r2, r3
   8ff06:	4b35      	ldr	r3, [pc, #212]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8ff08:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   8ff0a:	4b34      	ldr	r3, [pc, #208]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8ff0c:	881b      	ldrh	r3, [r3, #0]
   8ff0e:	461a      	mov	r2, r3
   8ff10:	4613      	mov	r3, r2
   8ff12:	00db      	lsls	r3, r3, #3
   8ff14:	4413      	add	r3, r2
   8ff16:	8aba      	ldrh	r2, [r7, #20]
   8ff18:	4413      	add	r3, r2
   8ff1a:	4a3d      	ldr	r2, [pc, #244]	; (90010 <Cl_Temperature_Controller_Handler+0x2a0>)
   8ff1c:	fb82 1203 	smull	r1, r2, r2, r3
   8ff20:	1092      	asrs	r2, r2, #2
   8ff22:	17db      	asrs	r3, r3, #31
   8ff24:	1ad3      	subs	r3, r2, r3
   8ff26:	b29a      	uxth	r2, r3
   8ff28:	4b2c      	ldr	r3, [pc, #176]	; (8ffdc <Cl_Temperature_Controller_Handler+0x26c>)
   8ff2a:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8ff2c:	f107 0314 	add.w	r3, r7, #20
   8ff30:	4619      	mov	r1, r3
   8ff32:	2013      	movs	r0, #19
   8ff34:	4b2a      	ldr	r3, [pc, #168]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8ff36:	4798      	blx	r3
// 				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
// 				Temp2 = Temp2 - 0.4;                                            // sensor offset
				Temp2 = (float)temp_val /100;
   8ff38:	8aba      	ldrh	r2, [r7, #20]
   8ff3a:	4b32      	ldr	r3, [pc, #200]	; (90004 <Cl_Temperature_Controller_Handler+0x294>)
   8ff3c:	4610      	mov	r0, r2
   8ff3e:	4798      	blx	r3
   8ff40:	4602      	mov	r2, r0
   8ff42:	4b2c      	ldr	r3, [pc, #176]	; (8fff4 <Cl_Temperature_Controller_Handler+0x284>)
   8ff44:	4930      	ldr	r1, [pc, #192]	; (90008 <Cl_Temperature_Controller_Handler+0x298>)
   8ff46:	4610      	mov	r0, r2
   8ff48:	4798      	blx	r3
   8ff4a:	4603      	mov	r3, r0
   8ff4c:	461a      	mov	r2, r3
   8ff4e:	4b2f      	ldr	r3, [pc, #188]	; (9000c <Cl_Temperature_Controller_Handler+0x29c>)
   8ff50:	4610      	mov	r0, r2
   8ff52:	4798      	blx	r3
   8ff54:	4603      	mov	r3, r0
   8ff56:	b29a      	uxth	r2, r3
   8ff58:	4b22      	ldr	r3, [pc, #136]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8ff5a:	801a      	strh	r2, [r3, #0]
				Temp2 = (Temp2 *9 + temp_val)/10;
   8ff5c:	4b21      	ldr	r3, [pc, #132]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8ff5e:	881b      	ldrh	r3, [r3, #0]
   8ff60:	461a      	mov	r2, r3
   8ff62:	4613      	mov	r3, r2
   8ff64:	00db      	lsls	r3, r3, #3
   8ff66:	4413      	add	r3, r2
   8ff68:	8aba      	ldrh	r2, [r7, #20]
   8ff6a:	4413      	add	r3, r2
   8ff6c:	4a28      	ldr	r2, [pc, #160]	; (90010 <Cl_Temperature_Controller_Handler+0x2a0>)
   8ff6e:	fb82 1203 	smull	r1, r2, r2, r3
   8ff72:	1092      	asrs	r2, r2, #2
   8ff74:	17db      	asrs	r3, r3, #31
   8ff76:	1ad3      	subs	r3, r2, r3
   8ff78:	b29a      	uxth	r2, r3
   8ff7a:	4b1a      	ldr	r3, [pc, #104]	; (8ffe4 <Cl_Temperature_Controller_Handler+0x274>)
   8ff7c:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8ff7e:	f107 0314 	add.w	r3, r7, #20
   8ff82:	4619      	mov	r1, r3
   8ff84:	2014      	movs	r0, #20
   8ff86:	4b16      	ldr	r3, [pc, #88]	; (8ffe0 <Cl_Temperature_Controller_Handler+0x270>)
   8ff88:	4798      	blx	r3
// 				Temp3 = Temp3 - 0.4 ;										// sensor offset 
// 				
// 				
// // 				temp = temp_val * 0.8036;
// // 				calibration_tmp(temp,TS3);
				Temp3 = (float)temp_val /100;
   8ff8a:	8aba      	ldrh	r2, [r7, #20]
   8ff8c:	4b1d      	ldr	r3, [pc, #116]	; (90004 <Cl_Temperature_Controller_Handler+0x294>)
   8ff8e:	4610      	mov	r0, r2
   8ff90:	4798      	blx	r3
   8ff92:	4602      	mov	r2, r0
   8ff94:	4b17      	ldr	r3, [pc, #92]	; (8fff4 <Cl_Temperature_Controller_Handler+0x284>)
   8ff96:	491c      	ldr	r1, [pc, #112]	; (90008 <Cl_Temperature_Controller_Handler+0x298>)
   8ff98:	4610      	mov	r0, r2
   8ff9a:	4798      	blx	r3
   8ff9c:	4603      	mov	r3, r0
   8ff9e:	461a      	mov	r2, r3
   8ffa0:	4b11      	ldr	r3, [pc, #68]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8ffa2:	601a      	str	r2, [r3, #0]
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   8ffa4:	4b10      	ldr	r3, [pc, #64]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8ffa6:	681a      	ldr	r2, [r3, #0]
   8ffa8:	4b1a      	ldr	r3, [pc, #104]	; (90014 <Cl_Temperature_Controller_Handler+0x2a4>)
   8ffaa:	491b      	ldr	r1, [pc, #108]	; (90018 <Cl_Temperature_Controller_Handler+0x2a8>)
   8ffac:	4610      	mov	r0, r2
   8ffae:	4798      	blx	r3
   8ffb0:	4603      	mov	r3, r0
   8ffb2:	4618      	mov	r0, r3
   8ffb4:	4b19      	ldr	r3, [pc, #100]	; (9001c <Cl_Temperature_Controller_Handler+0x2ac>)
   8ffb6:	681a      	ldr	r2, [r3, #0]
   8ffb8:	4b0d      	ldr	r3, [pc, #52]	; (8fff0 <Cl_Temperature_Controller_Handler+0x280>)
   8ffba:	4611      	mov	r1, r2
   8ffbc:	4798      	blx	r3
   8ffbe:	4603      	mov	r3, r0
   8ffc0:	461a      	mov	r2, r3
   8ffc2:	4b0c      	ldr	r3, [pc, #48]	; (8fff4 <Cl_Temperature_Controller_Handler+0x284>)
   8ffc4:	4916      	ldr	r1, [pc, #88]	; (90020 <Cl_Temperature_Controller_Handler+0x2b0>)
   8ffc6:	4610      	mov	r0, r2
   8ffc8:	4798      	blx	r3
   8ffca:	4603      	mov	r3, r0
   8ffcc:	461a      	mov	r2, r3
   8ffce:	4b06      	ldr	r3, [pc, #24]	; (8ffe8 <Cl_Temperature_Controller_Handler+0x278>)
   8ffd0:	601a      	str	r2, [r3, #0]
				break;
   8ffd2:	e056      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
   8ffd4:	20071a44 	.word	0x20071a44
   8ffd8:	20071a3a 	.word	0x20071a3a
   8ffdc:	20071a36 	.word	0x20071a36
   8ffe0:	0008e6a1 	.word	0x0008e6a1
   8ffe4:	20071a38 	.word	0x20071a38
   8ffe8:	20071a3c 	.word	0x20071a3c
   8ffec:	000a64e9 	.word	0x000a64e9
   8fff0:	000a6381 	.word	0x000a6381
   8fff4:	000a66f9 	.word	0x000a66f9
   8fff8:	00099b75 	.word	0x00099b75
   8fffc:	000a637d 	.word	0x000a637d
   90000:	20071a40 	.word	0x20071a40
   90004:	000a64e1 	.word	0x000a64e1
   90008:	42c80000 	.word	0x42c80000
   9000c:	000a6969 	.word	0x000a6969
   90010:	66666667 	.word	0x66666667
   90014:	000a6591 	.word	0x000a6591
   90018:	40a00000 	.word	0x40a00000
   9001c:	20071788 	.word	0x20071788
   90020:	40c00000 	.word	0x40c00000
				case TS_EVENT_5SEC:
				data = 0;
   90024:	2300      	movs	r3, #0
   90026:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   90028:	f04f 0300 	mov.w	r3, #0
   9002c:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   9002e:	2300      	movs	r3, #0
   90030:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   90032:	f107 0312 	add.w	r3, r7, #18
   90036:	4619      	mov	r1, r3
   90038:	2014      	movs	r0, #20
   9003a:	4b14      	ldr	r3, [pc, #80]	; (9008c <Cl_Temperature_Controller_Handler+0x31c>)
   9003c:	4798      	blx	r3
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				temp = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4;										// sensor offset
				temp = (float)data /100;
   9003e:	8a7a      	ldrh	r2, [r7, #18]
   90040:	4b13      	ldr	r3, [pc, #76]	; (90090 <Cl_Temperature_Controller_Handler+0x320>)
   90042:	4610      	mov	r0, r2
   90044:	4798      	blx	r3
   90046:	4602      	mov	r2, r0
   90048:	4b12      	ldr	r3, [pc, #72]	; (90094 <Cl_Temperature_Controller_Handler+0x324>)
   9004a:	4913      	ldr	r1, [pc, #76]	; (90098 <Cl_Temperature_Controller_Handler+0x328>)
   9004c:	4610      	mov	r0, r2
   9004e:	4798      	blx	r3
   90050:	4603      	mov	r3, r0
   90052:	61bb      	str	r3, [r7, #24]
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   90054:	2300      	movs	r3, #0
   90056:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   90058:	4b10      	ldr	r3, [pc, #64]	; (9009c <Cl_Temperature_Controller_Handler+0x32c>)
   9005a:	69b8      	ldr	r0, [r7, #24]
   9005c:	4798      	blx	r3
   9005e:	4603      	mov	r3, r0
   90060:	b29b      	uxth	r3, r3
   90062:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   90064:	231f      	movs	r3, #31
   90066:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   90068:	f107 030c 	add.w	r3, r7, #12
   9006c:	2204      	movs	r2, #4
   9006e:	4619      	mov	r1, r3
   90070:	2037      	movs	r0, #55	; 0x37
   90072:	4b0b      	ldr	r3, [pc, #44]	; (900a0 <Cl_Temperature_Controller_Handler+0x330>)
   90074:	4798      	blx	r3
				
				}
				
				break;
   90076:	e004      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90078:	bf00      	nop
   9007a:	e002      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
				if(counter > 10)
				{
					counter = 0;
					Cl_Temp_State = TS_STATE_ACTIVE;
				}
				break;
   9007c:	bf00      	nop
   9007e:	e000      	b.n	90082 <Cl_Temperature_Controller_Handler+0x312>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90080:	bf00      	nop
			
	}

	
	
	return cl_retval;
   90082:	7ffb      	ldrb	r3, [r7, #31]
}
   90084:	4618      	mov	r0, r3
   90086:	372c      	adds	r7, #44	; 0x2c
   90088:	46bd      	mov	sp, r7
   9008a:	bd90      	pop	{r4, r7, pc}
   9008c:	0008e6a1 	.word	0x0008e6a1
   90090:	000a64e1 	.word	0x000a64e1
   90094:	000a66f9 	.word	0x000a66f9
   90098:	42c80000 	.word	0x42c80000
   9009c:	000a6969 	.word	0x000a6969
   900a0:	0009b805 	.word	0x0009b805

000900a4 <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   900a4:	b480      	push	{r7}
   900a6:	b083      	sub	sp, #12
   900a8:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   900aa:	2300      	movs	r3, #0
   900ac:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   900ae:	4b09      	ldr	r3, [pc, #36]	; (900d4 <Cl_Temperature_Controller_Init+0x30>)
   900b0:	2200      	movs	r2, #0
   900b2:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   900b4:	4b08      	ldr	r3, [pc, #32]	; (900d8 <Cl_Temperature_Controller_Init+0x34>)
   900b6:	2200      	movs	r2, #0
   900b8:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   900ba:	4b08      	ldr	r3, [pc, #32]	; (900dc <Cl_Temperature_Controller_Init+0x38>)
   900bc:	f04f 0200 	mov.w	r2, #0
   900c0:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   900c2:	4b07      	ldr	r3, [pc, #28]	; (900e0 <Cl_Temperature_Controller_Init+0x3c>)
   900c4:	2201      	movs	r2, #1
   900c6:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   900c8:	79fb      	ldrb	r3, [r7, #7]
}
   900ca:	4618      	mov	r0, r3
   900cc:	370c      	adds	r7, #12
   900ce:	46bd      	mov	sp, r7
   900d0:	bc80      	pop	{r7}
   900d2:	4770      	bx	lr
   900d4:	20071a36 	.word	0x20071a36
   900d8:	20071a38 	.word	0x20071a38
   900dc:	20071a3c 	.word	0x20071a3c
   900e0:	20071a44 	.word	0x20071a44
   900e4:	00000000 	.word	0x00000000

000900e8 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   900e8:	b590      	push	{r4, r7, lr}
   900ea:	b0c9      	sub	sp, #292	; 0x124
   900ec:	af00      	add	r7, sp, #0
   900ee:	1d3b      	adds	r3, r7, #4
   900f0:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   900f2:	2304      	movs	r3, #4
   900f4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   900f8:	2300      	movs	r3, #0
   900fa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   900fe:	2300      	movs	r3, #0
   90100:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   90104:	2300      	movs	r3, #0
   90106:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   9010a:	2300      	movs	r3, #0
   9010c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   90110:	2300      	movs	r3, #0
   90112:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   90116:	2300      	movs	r3, #0
   90118:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   9011c:	2300      	movs	r3, #0
   9011e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   90122:	2300      	movs	r3, #0
   90124:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   90128:	2300      	movs	r3, #0
   9012a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   9012e:	2300      	movs	r3, #0
   90130:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   90134:	2300      	movs	r3, #0
   90136:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   9013a:	2300      	movs	r3, #0
   9013c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   90140:	2300      	movs	r3, #0
   90142:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90146:	e01c      	b.n	90182 <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   90148:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9014c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90150:	4413      	add	r3, r2
   90152:	2200      	movs	r2, #0
   90154:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   90158:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9015c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90160:	4413      	add	r3, r2
   90162:	2200      	movs	r2, #0
   90164:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   90168:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9016c:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90170:	4413      	add	r3, r2
   90172:	2200      	movs	r2, #0
   90174:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   90178:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9017c:	3301      	adds	r3, #1
   9017e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90182:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90186:	2b13      	cmp	r3, #19
   90188:	d9de      	bls.n	90148 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   9018a:	1d3b      	adds	r3, r7, #4
   9018c:	681b      	ldr	r3, [r3, #0]
   9018e:	78db      	ldrb	r3, [r3, #3]
   90190:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   90194:	2300      	movs	r3, #0
   90196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9019a:	e01e      	b.n	901da <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   9019c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   901a0:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   901a4:	1d39      	adds	r1, r7, #4
   901a6:	6809      	ldr	r1, [r1, #0]
   901a8:	440a      	add	r2, r1
   901aa:	7912      	ldrb	r2, [r2, #4]
   901ac:	f507 7190 	add.w	r1, r7, #288	; 0x120
   901b0:	440b      	add	r3, r1
   901b2:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   901b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   901ba:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   901be:	1d39      	adds	r1, r7, #4
   901c0:	6809      	ldr	r1, [r1, #0]
   901c2:	440a      	add	r2, r1
   901c4:	7912      	ldrb	r2, [r2, #4]
   901c6:	f507 7190 	add.w	r1, r7, #288	; 0x120
   901ca:	440b      	add	r3, r1
   901cc:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   901d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   901d4:	3301      	adds	r3, #1
   901d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   901da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   901de:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   901e2:	429a      	cmp	r2, r3
   901e4:	d3da      	bcc.n	9019c <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   901e6:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   901ea:	2b6e      	cmp	r3, #110	; 0x6e
   901ec:	f202 83f6 	bhi.w	929dc <cl_testharnesscommandhandler+0x28f4>
   901f0:	a201      	add	r2, pc, #4	; (adr r2, 901f8 <cl_testharnesscommandhandler+0x110>)
   901f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   901f6:	bf00      	nop
   901f8:	000904ff 	.word	0x000904ff
   901fc:	00090513 	.word	0x00090513
   90200:	00090529 	.word	0x00090529
   90204:	000929dd 	.word	0x000929dd
   90208:	000929dd 	.word	0x000929dd
   9020c:	000929dd 	.word	0x000929dd
   90210:	000929dd 	.word	0x000929dd
   90214:	0009053f 	.word	0x0009053f
   90218:	0009055f 	.word	0x0009055f
   9021c:	0009057f 	.word	0x0009057f
   90220:	0009059f 	.word	0x0009059f
   90224:	000905bf 	.word	0x000905bf
   90228:	000905cd 	.word	0x000905cd
   9022c:	000905db 	.word	0x000905db
   90230:	00090685 	.word	0x00090685
   90234:	00090693 	.word	0x00090693
   90238:	000906a7 	.word	0x000906a7
   9023c:	000906ed 	.word	0x000906ed
   90240:	000906fb 	.word	0x000906fb
   90244:	000905fd 	.word	0x000905fd
   90248:	00090631 	.word	0x00090631
   9024c:	0009074b 	.word	0x0009074b
   90250:	00090799 	.word	0x00090799
   90254:	000909c7 	.word	0x000909c7
   90258:	00090ac9 	.word	0x00090ac9
   9025c:	00090aeb 	.word	0x00090aeb
   90260:	00090b0d 	.word	0x00090b0d
   90264:	00090c0b 	.word	0x00090c0b
   90268:	00090c4f 	.word	0x00090c4f
   9026c:	00090c71 	.word	0x00090c71
   90270:	00090cc3 	.word	0x00090cc3
   90274:	00090d1b 	.word	0x00090d1b
   90278:	00090d9d 	.word	0x00090d9d
   9027c:	00090dbf 	.word	0x00090dbf
   90280:	00090e83 	.word	0x00090e83
   90284:	00090e97 	.word	0x00090e97
   90288:	00090eb1 	.word	0x00090eb1
   9028c:	00090ecb 	.word	0x00090ecb
   90290:	00090ee1 	.word	0x00090ee1
   90294:	00090fcb 	.word	0x00090fcb
   90298:	000929dd 	.word	0x000929dd
   9029c:	00090f87 	.word	0x00090f87
   902a0:	00090fab 	.word	0x00090fab
   902a4:	0009100b 	.word	0x0009100b
   902a8:	0009102d 	.word	0x0009102d
   902ac:	0009104f 	.word	0x0009104f
   902b0:	0009110d 	.word	0x0009110d
   902b4:	00090a7d 	.word	0x00090a7d
   902b8:	00090b5f 	.word	0x00090b5f
   902bc:	000929dd 	.word	0x000929dd
   902c0:	000929dd 	.word	0x000929dd
   902c4:	00091171 	.word	0x00091171
   902c8:	000911ab 	.word	0x000911ab
   902cc:	00091309 	.word	0x00091309
   902d0:	000911e5 	.word	0x000911e5
   902d4:	0009122b 	.word	0x0009122b
   902d8:	00091271 	.word	0x00091271
   902dc:	000912bd 	.word	0x000912bd
   902e0:	00091399 	.word	0x00091399
   902e4:	000913f1 	.word	0x000913f1
   902e8:	00091477 	.word	0x00091477
   902ec:	0009141f 	.word	0x0009141f
   902f0:	00092397 	.word	0x00092397
   902f4:	00090709 	.word	0x00090709
   902f8:	00090725 	.word	0x00090725
   902fc:	0009148d 	.word	0x0009148d
   90300:	00091499 	.word	0x00091499
   90304:	000914eb 	.word	0x000914eb
   90308:	0009150d 	.word	0x0009150d
   9030c:	0009151b 	.word	0x0009151b
   90310:	00091541 	.word	0x00091541
   90314:	0009154b 	.word	0x0009154b
   90318:	00090bab 	.word	0x00090bab
   9031c:	00091573 	.word	0x00091573
   90320:	000929dd 	.word	0x000929dd
   90324:	0009158f 	.word	0x0009158f
   90328:	000915a5 	.word	0x000915a5
   9032c:	000905e9 	.word	0x000905e9
   90330:	000905f3 	.word	0x000905f3
   90334:	000914a5 	.word	0x000914a5
   90338:	000915ad 	.word	0x000915ad
   9033c:	00090cd7 	.word	0x00090cd7
   90340:	00090cf9 	.word	0x00090cf9
   90344:	000910f5 	.word	0x000910f5
   90348:	0009076d 	.word	0x0009076d
   9034c:	000907bb 	.word	0x000907bb
   90350:	00090e13 	.word	0x00090e13
   90354:	00090e4b 	.word	0x00090e4b
   90358:	000929dd 	.word	0x000929dd
   9035c:	00090471 	.word	0x00090471
   90360:	000903c9 	.word	0x000903c9
   90364:	000903f7 	.word	0x000903f7
   90368:	00090425 	.word	0x00090425
   9036c:	000915ed 	.word	0x000915ed
   90370:	00091601 	.word	0x00091601
   90374:	000915d5 	.word	0x000915d5
   90378:	000915dd 	.word	0x000915dd
   9037c:	000903b5 	.word	0x000903b5
   90380:	000903bf 	.word	0x000903bf
   90384:	00090ef7 	.word	0x00090ef7
   90388:	00090f19 	.word	0x00090f19
   9038c:	0009160f 	.word	0x0009160f
   90390:	00091617 	.word	0x00091617
   90394:	0009161f 	.word	0x0009161f
   90398:	0009162b 	.word	0x0009162b
   9039c:	00091637 	.word	0x00091637
   903a0:	00090837 	.word	0x00090837
   903a4:	00090903 	.word	0x00090903
   903a8:	000908b3 	.word	0x000908b3
   903ac:	000929dd 	.word	0x000929dd
   903b0:	000929dd 	.word	0x000929dd
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   903b4:	4bbf      	ldr	r3, [pc, #764]	; (906b4 <cl_testharnesscommandhandler+0x5cc>)
   903b6:	2201      	movs	r2, #1
   903b8:	701a      	strb	r2, [r3, #0]
		break;
   903ba:	f002 bb16 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   903be:	4bbd      	ldr	r3, [pc, #756]	; (906b4 <cl_testharnesscommandhandler+0x5cc>)
   903c0:	2200      	movs	r2, #0
   903c2:	701a      	strb	r2, [r3, #0]
		break;
   903c4:	f002 bb11 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   903c8:	4bbb      	ldr	r3, [pc, #748]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   903ca:	781a      	ldrb	r2, [r3, #0]
   903cc:	4bbb      	ldr	r3, [pc, #748]	; (906bc <cl_testharnesscommandhandler+0x5d4>)
   903ce:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   903d0:	4bb9      	ldr	r3, [pc, #740]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   903d2:	2201      	movs	r2, #1
   903d4:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   903d6:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   903da:	4bb9      	ldr	r3, [pc, #740]	; (906c0 <cl_testharnesscommandhandler+0x5d8>)
   903dc:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   903de:	4bb8      	ldr	r3, [pc, #736]	; (906c0 <cl_testharnesscommandhandler+0x5d8>)
   903e0:	781b      	ldrb	r3, [r3, #0]
   903e2:	2101      	movs	r1, #1
   903e4:	4618      	mov	r0, r3
   903e6:	4bb7      	ldr	r3, [pc, #732]	; (906c4 <cl_testharnesscommandhandler+0x5dc>)
   903e8:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   903ea:	4bb4      	ldr	r3, [pc, #720]	; (906bc <cl_testharnesscommandhandler+0x5d4>)
   903ec:	781a      	ldrb	r2, [r3, #0]
   903ee:	4bb2      	ldr	r3, [pc, #712]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   903f0:	701a      	strb	r2, [r3, #0]
		break;
   903f2:	f002 bafa 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   903f6:	4bb0      	ldr	r3, [pc, #704]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   903f8:	781a      	ldrb	r2, [r3, #0]
   903fa:	4bb0      	ldr	r3, [pc, #704]	; (906bc <cl_testharnesscommandhandler+0x5d4>)
   903fc:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   903fe:	4bae      	ldr	r3, [pc, #696]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   90400:	2201      	movs	r2, #1
   90402:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   90404:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   90408:	4bad      	ldr	r3, [pc, #692]	; (906c0 <cl_testharnesscommandhandler+0x5d8>)
   9040a:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   9040c:	4bac      	ldr	r3, [pc, #688]	; (906c0 <cl_testharnesscommandhandler+0x5d8>)
   9040e:	781b      	ldrb	r3, [r3, #0]
   90410:	2100      	movs	r1, #0
   90412:	4618      	mov	r0, r3
   90414:	4bab      	ldr	r3, [pc, #684]	; (906c4 <cl_testharnesscommandhandler+0x5dc>)
   90416:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   90418:	4ba8      	ldr	r3, [pc, #672]	; (906bc <cl_testharnesscommandhandler+0x5d4>)
   9041a:	781a      	ldrb	r2, [r3, #0]
   9041c:	4ba6      	ldr	r3, [pc, #664]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   9041e:	701a      	strb	r2, [r3, #0]
		
		break;
   90420:	f002 bae3 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   90424:	4ba4      	ldr	r3, [pc, #656]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   90426:	781a      	ldrb	r2, [r3, #0]
   90428:	4ba4      	ldr	r3, [pc, #656]	; (906bc <cl_testharnesscommandhandler+0x5d4>)
   9042a:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   9042c:	4ba2      	ldr	r3, [pc, #648]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   9042e:	2201      	movs	r2, #1
   90430:	701a      	strb	r2, [r3, #0]
		temp = 0;
   90432:	2300      	movs	r3, #0
   90434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   90438:	e008      	b.n	9044c <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   9043a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9043e:	1c5a      	adds	r2, r3, #1
   90440:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   90444:	2100      	movs	r1, #0
   90446:	4618      	mov	r0, r3
   90448:	4b9e      	ldr	r3, [pc, #632]	; (906c4 <cl_testharnesscommandhandler+0x5dc>)
   9044a:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   9044c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90450:	2b3e      	cmp	r3, #62	; 0x3e
   90452:	d9f2      	bls.n	9043a <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   90454:	4b98      	ldr	r3, [pc, #608]	; (906b8 <cl_testharnesscommandhandler+0x5d0>)
   90456:	2200      	movs	r2, #0
   90458:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   9045a:	4b9b      	ldr	r3, [pc, #620]	; (906c8 <cl_testharnesscommandhandler+0x5e0>)
   9045c:	f9b3 3000 	ldrsh.w	r3, [r3]
   90460:	b29b      	uxth	r3, r3
   90462:	3301      	adds	r3, #1
   90464:	b29b      	uxth	r3, r3
   90466:	b21a      	sxth	r2, r3
   90468:	4b97      	ldr	r3, [pc, #604]	; (906c8 <cl_testharnesscommandhandler+0x5e0>)
   9046a:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   9046c:	f002 babd 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90470:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90474:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90478:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9047c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   90480:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   90484:	f003 0301 	and.w	r3, r3, #1
   90488:	2b00      	cmp	r3, #0
   9048a:	d004      	beq.n	90496 <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   9048c:	4b8f      	ldr	r3, [pc, #572]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   9048e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   90492:	631a      	str	r2, [r3, #48]	; 0x30
   90494:	e003      	b.n	9049e <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   90496:	4b8d      	ldr	r3, [pc, #564]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   90498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   9049c:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   9049e:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   904a2:	f003 0302 	and.w	r3, r3, #2
   904a6:	2b00      	cmp	r3, #0
   904a8:	d004      	beq.n	904b4 <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   904aa:	4b88      	ldr	r3, [pc, #544]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   904b0:	631a      	str	r2, [r3, #48]	; 0x30
   904b2:	e003      	b.n	904bc <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   904b4:	4b85      	ldr	r3, [pc, #532]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   904ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   904bc:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   904c0:	f003 0304 	and.w	r3, r3, #4
   904c4:	2b00      	cmp	r3, #0
   904c6:	d004      	beq.n	904d2 <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   904c8:	4b80      	ldr	r3, [pc, #512]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   904ce:	631a      	str	r2, [r3, #48]	; 0x30
   904d0:	e003      	b.n	904da <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   904d2:	4b7e      	ldr	r3, [pc, #504]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   904d8:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   904da:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   904de:	f003 0308 	and.w	r3, r3, #8
   904e2:	2b00      	cmp	r3, #0
   904e4:	d005      	beq.n	904f2 <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   904e6:	4b79      	ldr	r3, [pc, #484]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   904ec:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   904ee:	f002 ba7c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   904f2:	4b76      	ldr	r3, [pc, #472]	; (906cc <cl_testharnesscommandhandler+0x5e4>)
   904f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   904f8:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   904fa:	f002 ba76 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   904fe:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90502:	b29a      	uxth	r2, r3
   90504:	4b72      	ldr	r3, [pc, #456]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90506:	861a      	strh	r2, [r3, #48]	; 0x30
		
		cl_thretval = CL_OK;
   90508:	2300      	movs	r3, #0
   9050a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   9050e:	f002 ba6c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   90512:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90516:	b29a      	uxth	r2, r3
   90518:	4b6d      	ldr	r3, [pc, #436]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   9051a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				cl_thretval = CL_OK;
   9051e:	2300      	movs	r3, #0
   90520:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   90524:	f002 ba61 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   90528:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9052c:	b29a      	uxth	r2, r3
   9052e:	4b68      	ldr	r3, [pc, #416]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90530:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				cl_thretval = CL_OK;
   90534:	2300      	movs	r3, #0
   90536:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   9053a:	f002 ba56 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   9053e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90542:	2b00      	cmp	r3, #0
   90544:	d105      	bne.n	90552 <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   90546:	4b62      	ldr	r3, [pc, #392]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90548:	2200      	movs	r2, #0
   9054a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   9054e:	f002 ba4c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   90552:	4b5f      	ldr	r3, [pc, #380]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90554:	2201      	movs	r2, #1
   90556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   9055a:	f002 ba46 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   9055e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90562:	2b00      	cmp	r3, #0
   90564:	d105      	bne.n	90572 <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   90566:	4b5a      	ldr	r3, [pc, #360]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90568:	2200      	movs	r2, #0
   9056a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   9056e:	f002 ba3c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   90572:	4b57      	ldr	r3, [pc, #348]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90574:	2201      	movs	r2, #1
   90576:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   9057a:	f002 ba36 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   9057e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90582:	2b00      	cmp	r3, #0
   90584:	d105      	bne.n	90592 <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   90586:	4b52      	ldr	r3, [pc, #328]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90588:	2200      	movs	r2, #0
   9058a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   9058e:	f002 ba2c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   90592:	4b4f      	ldr	r3, [pc, #316]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   90594:	2201      	movs	r2, #1
   90596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   9059a:	f002 ba26 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   9059e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   905a2:	2b00      	cmp	r3, #0
   905a4:	d105      	bne.n	905b2 <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   905a6:	4b4a      	ldr	r3, [pc, #296]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   905a8:	2200      	movs	r2, #0
   905aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   905ae:	f002 ba1c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   905b2:	4b47      	ldr	r3, [pc, #284]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   905b4:	2201      	movs	r2, #1
   905b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   905ba:	f002 ba16 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   905be:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   905c2:	b29a      	uxth	r2, r3
   905c4:	4b42      	ldr	r3, [pc, #264]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   905c6:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   905c8:	f002 ba0f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   905cc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   905d0:	b29a      	uxth	r2, r3
   905d2:	4b3f      	ldr	r3, [pc, #252]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   905d4:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   905d6:	f002 ba08 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   905da:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   905de:	b29a      	uxth	r2, r3
   905e0:	4b3b      	ldr	r3, [pc, #236]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   905e2:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   905e4:	f002 ba01 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   905e8:	4b3a      	ldr	r3, [pc, #232]	; (906d4 <cl_testharnesscommandhandler+0x5ec>)
   905ea:	2201      	movs	r2, #1
   905ec:	701a      	strb	r2, [r3, #0]
		break;
   905ee:	f002 b9fc 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   905f2:	4b38      	ldr	r3, [pc, #224]	; (906d4 <cl_testharnesscommandhandler+0x5ec>)
   905f4:	2200      	movs	r2, #0
   905f6:	701a      	strb	r2, [r3, #0]
		break;
   905f8:	f002 b9f7 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   905fc:	f897 0099 	ldrb.w	r0, [r7, #153]	; 0x99
   90600:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   90604:	f107 0378 	add.w	r3, r7, #120	; 0x78
   90608:	3302      	adds	r3, #2
   9060a:	4619      	mov	r1, r3
   9060c:	4b32      	ldr	r3, [pc, #200]	; (906d8 <cl_testharnesscommandhandler+0x5f0>)
   9060e:	4798      	blx	r3
   90610:	4603      	mov	r3, r0
   90612:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   90616:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9061a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   9061e:	4611      	mov	r1, r2
   90620:	4618      	mov	r0, r3
   90622:	4b2e      	ldr	r3, [pc, #184]	; (906dc <cl_testharnesscommandhandler+0x5f4>)
   90624:	4798      	blx	r3
   90626:	4603      	mov	r3, r0
   90628:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   9062c:	f002 b9dd 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   90630:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   90634:	2b06      	cmp	r3, #6
   90636:	d00b      	beq.n	90650 <cl_testharnesscommandhandler+0x568>
   90638:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9063c:	2b07      	cmp	r3, #7
   9063e:	d007      	beq.n	90650 <cl_testharnesscommandhandler+0x568>
   90640:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   90644:	2b08      	cmp	r3, #8
   90646:	d003      	beq.n	90650 <cl_testharnesscommandhandler+0x568>
   90648:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9064c:	2b0a      	cmp	r3, #10
   9064e:	d10c      	bne.n	9066a <cl_testharnesscommandhandler+0x582>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   90650:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   90654:	f107 0264 	add.w	r2, r7, #100	; 0x64
   90658:	4611      	mov	r1, r2
   9065a:	4618      	mov	r0, r3
   9065c:	4b20      	ldr	r3, [pc, #128]	; (906e0 <cl_testharnesscommandhandler+0x5f8>)
   9065e:	4798      	blx	r3
   90660:	4603      	mov	r3, r0
   90662:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   90666:	f002 b9c0 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   9066a:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9066e:	f107 0264 	add.w	r2, r7, #100	; 0x64
   90672:	4611      	mov	r1, r2
   90674:	4618      	mov	r0, r3
   90676:	4b19      	ldr	r3, [pc, #100]	; (906dc <cl_testharnesscommandhandler+0x5f4>)
   90678:	4798      	blx	r3
   9067a:	4603      	mov	r3, r0
   9067c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   90680:	f002 b9b3 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   90684:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90688:	b29a      	uxth	r2, r3
   9068a:	4b11      	ldr	r3, [pc, #68]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   9068c:	831a      	strh	r2, [r3, #24]
		break;
   9068e:	f002 b9ac 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   90692:	4b14      	ldr	r3, [pc, #80]	; (906e4 <cl_testharnesscommandhandler+0x5fc>)
   90694:	2200      	movs	r2, #0
   90696:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   90698:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9069c:	b29a      	uxth	r2, r3
   9069e:	4b12      	ldr	r3, [pc, #72]	; (906e8 <cl_testharnesscommandhandler+0x600>)
   906a0:	835a      	strh	r2, [r3, #26]
		break;
   906a2:	f002 b9a2 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   906a6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906aa:	b29a      	uxth	r2, r3
   906ac:	4b08      	ldr	r3, [pc, #32]	; (906d0 <cl_testharnesscommandhandler+0x5e8>)
   906ae:	821a      	strh	r2, [r3, #16]
		break;
   906b0:	f002 b99b 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
   906b4:	20071a4e 	.word	0x20071a4e
   906b8:	20070a28 	.word	0x20070a28
   906bc:	20070a29 	.word	0x20070a29
   906c0:	200725b4 	.word	0x200725b4
   906c4:	00082de1 	.word	0x00082de1
   906c8:	20071a66 	.word	0x20071a66
   906cc:	400e1200 	.word	0x400e1200
   906d0:	2007221c 	.word	0x2007221c
   906d4:	20071a58 	.word	0x20071a58
   906d8:	0009a369 	.word	0x0009a369
   906dc:	0009a331 	.word	0x0009a331
   906e0:	00092a49 	.word	0x00092a49
   906e4:	20071a4d 	.word	0x20071a4d
   906e8:	20072560 	.word	0x20072560
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   906ec:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906f0:	b29a      	uxth	r2, r3
   906f2:	4bbc      	ldr	r3, [pc, #752]	; (909e4 <cl_testharnesscommandhandler+0x8fc>)
   906f4:	825a      	strh	r2, [r3, #18]
		break;
   906f6:	f002 b978 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   906fa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906fe:	b29a      	uxth	r2, r3
   90700:	4bb8      	ldr	r3, [pc, #736]	; (909e4 <cl_testharnesscommandhandler+0x8fc>)
   90702:	87da      	strh	r2, [r3, #62]	; 0x3e
		break;
   90704:	f002 b971 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   90708:	2064      	movs	r0, #100	; 0x64
   9070a:	4bb7      	ldr	r3, [pc, #732]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   9070c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   9070e:	4bb7      	ldr	r3, [pc, #732]	; (909ec <cl_testharnesscommandhandler+0x904>)
   90710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   90714:	2001      	movs	r0, #1
   90716:	4bb6      	ldr	r3, [pc, #728]	; (909f0 <cl_testharnesscommandhandler+0x908>)
   90718:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9071a:	2064      	movs	r0, #100	; 0x64
   9071c:	4bb2      	ldr	r3, [pc, #712]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   9071e:	4798      	blx	r3
		break;
   90720:	f002 b963 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   90724:	2064      	movs	r0, #100	; 0x64
   90726:	4bb0      	ldr	r3, [pc, #704]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   90728:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   9072a:	4bb2      	ldr	r3, [pc, #712]	; (909f4 <cl_testharnesscommandhandler+0x90c>)
   9072c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   90730:	4bb1      	ldr	r3, [pc, #708]	; (909f8 <cl_testharnesscommandhandler+0x910>)
   90732:	4798      	blx	r3
   90734:	4603      	mov	r3, r0
   90736:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   9073a:	2004      	movs	r0, #4
   9073c:	4bac      	ldr	r3, [pc, #688]	; (909f0 <cl_testharnesscommandhandler+0x908>)
   9073e:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90740:	2064      	movs	r0, #100	; 0x64
   90742:	4ba9      	ldr	r3, [pc, #676]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   90744:	4798      	blx	r3
		break;
   90746:	f002 b950 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   9074a:	2064      	movs	r0, #100	; 0x64
   9074c:	4ba6      	ldr	r3, [pc, #664]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   9074e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   90750:	4baa      	ldr	r3, [pc, #680]	; (909fc <cl_testharnesscommandhandler+0x914>)
   90752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   90756:	2001      	movs	r0, #1
   90758:	4ba9      	ldr	r3, [pc, #676]	; (90a00 <cl_testharnesscommandhandler+0x918>)
   9075a:	4798      	blx	r3
   9075c:	4603      	mov	r3, r0
   9075e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90762:	2064      	movs	r0, #100	; 0x64
   90764:	4ba0      	ldr	r3, [pc, #640]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   90766:	4798      	blx	r3
		break;
   90768:	f002 b93f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   9076c:	2064      	movs	r0, #100	; 0x64
   9076e:	4b9e      	ldr	r3, [pc, #632]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   90770:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   90772:	4ba2      	ldr	r3, [pc, #648]	; (909fc <cl_testharnesscommandhandler+0x914>)
   90774:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   90778:	f44f 7396 	mov.w	r3, #300	; 0x12c
   9077c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   90780:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   90784:	4b98      	ldr	r3, [pc, #608]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   90786:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   90788:	2001      	movs	r0, #1
   9078a:	4b9e      	ldr	r3, [pc, #632]	; (90a04 <cl_testharnesscommandhandler+0x91c>)
   9078c:	4798      	blx	r3
   9078e:	4603      	mov	r3, r0
   90790:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   90794:	f002 b929 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   90798:	2064      	movs	r0, #100	; 0x64
   9079a:	4b93      	ldr	r3, [pc, #588]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   9079c:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   9079e:	4b9a      	ldr	r3, [pc, #616]	; (90a08 <cl_testharnesscommandhandler+0x920>)
   907a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   907a4:	2001      	movs	r0, #1
   907a6:	4b97      	ldr	r3, [pc, #604]	; (90a04 <cl_testharnesscommandhandler+0x91c>)
   907a8:	4798      	blx	r3
   907aa:	4603      	mov	r3, r0
   907ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   907b0:	2064      	movs	r0, #100	; 0x64
   907b2:	4b8d      	ldr	r3, [pc, #564]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   907b4:	4798      	blx	r3
	break;	
   907b6:	f002 b918 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   907ba:	200a      	movs	r0, #10
   907bc:	4b8a      	ldr	r3, [pc, #552]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   907be:	4798      	blx	r3
			if(iic_nack)
   907c0:	4b92      	ldr	r3, [pc, #584]	; (90a0c <cl_testharnesscommandhandler+0x924>)
   907c2:	781b      	ldrb	r3, [r3, #0]
   907c4:	2b00      	cmp	r3, #0
   907c6:	d002      	beq.n	907ce <cl_testharnesscommandhandler+0x6e6>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   907c8:	4b90      	ldr	r3, [pc, #576]	; (90a0c <cl_testharnesscommandhandler+0x924>)
   907ca:	2200      	movs	r2, #0
   907cc:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   907ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   907d2:	2b03      	cmp	r3, #3
   907d4:	d104      	bne.n	907e0 <cl_testharnesscommandhandler+0x6f8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   907d6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   907da:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   907de:	e00b      	b.n	907f8 <cl_testharnesscommandhandler+0x710>
		
			
		}
		else if(TestMsg.datasize == 4)
   907e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   907e4:	2b04      	cmp	r3, #4
   907e6:	d107      	bne.n	907f8 <cl_testharnesscommandhandler+0x710>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   907e8:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   907ec:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   907f0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   907f4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   907f8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   907fc:	2b02      	cmp	r3, #2
   907fe:	d115      	bne.n	9082c <cl_testharnesscommandhandler+0x744>
		{
			Cl_Uint16Type potvalue = 0;
   90800:	2300      	movs	r3, #0
   90802:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   90806:	4b82      	ldr	r3, [pc, #520]	; (90a10 <cl_testharnesscommandhandler+0x928>)
   90808:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   9080c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90810:	029b      	lsls	r3, r3, #10
   90812:	4a80      	ldr	r2, [pc, #512]	; (90a14 <cl_testharnesscommandhandler+0x92c>)
   90814:	fb82 1203 	smull	r1, r2, r2, r3
   90818:	1312      	asrs	r2, r2, #12
   9081a:	17db      	asrs	r3, r3, #31
   9081c:	1ad3      	subs	r3, r2, r3
   9081e:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   90822:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   90826:	4618      	mov	r0, r3
   90828:	4b7b      	ldr	r3, [pc, #492]	; (90a18 <cl_testharnesscommandhandler+0x930>)
   9082a:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   9082c:	2300      	movs	r3, #0
   9082e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   90832:	f002 b8da 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   90836:	200a      	movs	r0, #10
   90838:	4b6b      	ldr	r3, [pc, #428]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   9083a:	4798      	blx	r3
		if(iic_nack)
   9083c:	4b73      	ldr	r3, [pc, #460]	; (90a0c <cl_testharnesscommandhandler+0x924>)
   9083e:	781b      	ldrb	r3, [r3, #0]
   90840:	2b00      	cmp	r3, #0
   90842:	d002      	beq.n	9084a <cl_testharnesscommandhandler+0x762>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   90844:	4b71      	ldr	r3, [pc, #452]	; (90a0c <cl_testharnesscommandhandler+0x924>)
   90846:	2200      	movs	r2, #0
   90848:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   9084a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9084e:	2b03      	cmp	r3, #3
   90850:	d104      	bne.n	9085c <cl_testharnesscommandhandler+0x774>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90852:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90856:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9085a:	e00b      	b.n	90874 <cl_testharnesscommandhandler+0x78c>
			
			
		}
		else if(TestMsg.datasize == 4)
   9085c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90860:	2b04      	cmp	r3, #4
   90862:	d107      	bne.n	90874 <cl_testharnesscommandhandler+0x78c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   90864:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90868:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   9086c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90870:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   90874:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90878:	2b02      	cmp	r3, #2
   9087a:	d115      	bne.n	908a8 <cl_testharnesscommandhandler+0x7c0>
		{
			Cl_Uint16Type potvalue = 0;
   9087c:	2300      	movs	r3, #0
   9087e:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   90882:	4b63      	ldr	r3, [pc, #396]	; (90a10 <cl_testharnesscommandhandler+0x928>)
   90884:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   90888:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9088c:	029b      	lsls	r3, r3, #10
   9088e:	4a61      	ldr	r2, [pc, #388]	; (90a14 <cl_testharnesscommandhandler+0x92c>)
   90890:	fb82 1203 	smull	r1, r2, r2, r3
   90894:	1312      	asrs	r2, r2, #12
   90896:	17db      	asrs	r3, r3, #31
   90898:	1ad3      	subs	r3, r2, r3
   9089a:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   9089e:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   908a2:	4618      	mov	r0, r3
   908a4:	4b5d      	ldr	r3, [pc, #372]	; (90a1c <cl_testharnesscommandhandler+0x934>)
   908a6:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   908a8:	2300      	movs	r3, #0
   908aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   908ae:	f002 b89c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   908b2:	4b5b      	ldr	r3, [pc, #364]	; (90a20 <cl_testharnesscommandhandler+0x938>)
   908b4:	781b      	ldrb	r3, [r3, #0]
   908b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   908ba:	4b5a      	ldr	r3, [pc, #360]	; (90a24 <cl_testharnesscommandhandler+0x93c>)
   908bc:	781b      	ldrb	r3, [r3, #0]
   908be:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   908c2:	4b59      	ldr	r3, [pc, #356]	; (90a28 <cl_testharnesscommandhandler+0x940>)
   908c4:	781b      	ldrb	r3, [r3, #0]
   908c6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   908ca:	4b58      	ldr	r3, [pc, #352]	; (90a2c <cl_testharnesscommandhandler+0x944>)
   908cc:	781b      	ldrb	r3, [r3, #0]
   908ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   908d2:	4b57      	ldr	r3, [pc, #348]	; (90a30 <cl_testharnesscommandhandler+0x948>)
   908d4:	781b      	ldrb	r3, [r3, #0]
   908d6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   908da:	4b56      	ldr	r3, [pc, #344]	; (90a34 <cl_testharnesscommandhandler+0x94c>)
   908dc:	781b      	ldrb	r3, [r3, #0]
   908de:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   908e2:	4b55      	ldr	r3, [pc, #340]	; (90a38 <cl_testharnesscommandhandler+0x950>)
   908e4:	781b      	ldrb	r3, [r3, #0]
   908e6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   908ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
   908ee:	2207      	movs	r2, #7
   908f0:	4619      	mov	r1, r3
   908f2:	2047      	movs	r0, #71	; 0x47
   908f4:	4b51      	ldr	r3, [pc, #324]	; (90a3c <cl_testharnesscommandhandler+0x954>)
   908f6:	4798      	blx	r3
   908f8:	4603      	mov	r3, r0
   908fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   908fe:	f002 b874 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   90902:	2300      	movs	r3, #0
   90904:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   90908:	2300      	movs	r3, #0
   9090a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   9090e:	2300      	movs	r3, #0
   90910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   90914:	e051      	b.n	909ba <cl_testharnesscommandhandler+0x8d2>
		{
				temparray[cntr_1++] = cntr;
   90916:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   9091a:	1c5a      	adds	r2, r3, #1
   9091c:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   90920:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90924:	4413      	add	r3, r2
   90926:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   9092a:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   9092e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90932:	1c5a      	adds	r2, r3, #1
   90934:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   90938:	4619      	mov	r1, r3
   9093a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   9093e:	4a40      	ldr	r2, [pc, #256]	; (90a40 <cl_testharnesscommandhandler+0x958>)
   90940:	011b      	lsls	r3, r3, #4
   90942:	4413      	add	r3, r2
   90944:	330e      	adds	r3, #14
   90946:	781b      	ldrb	r3, [r3, #0]
   90948:	461a      	mov	r2, r3
   9094a:	f507 7390 	add.w	r3, r7, #288	; 0x120
   9094e:	440b      	add	r3, r1
   90950:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   90954:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90958:	1c5a      	adds	r2, r3, #1
   9095a:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   9095e:	4619      	mov	r1, r3
   90960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   90964:	4a36      	ldr	r2, [pc, #216]	; (90a40 <cl_testharnesscommandhandler+0x958>)
   90966:	011b      	lsls	r3, r3, #4
   90968:	4413      	add	r3, r2
   9096a:	330f      	adds	r3, #15
   9096c:	781b      	ldrb	r3, [r3, #0]
   9096e:	461a      	mov	r2, r3
   90970:	f507 7390 	add.w	r3, r7, #288	; 0x120
   90974:	440b      	add	r3, r1
   90976:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   9097a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   9097e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   90982:	492f      	ldr	r1, [pc, #188]	; (90a40 <cl_testharnesscommandhandler+0x958>)
   90984:	0112      	lsls	r2, r2, #4
   90986:	440a      	add	r2, r1
   90988:	3202      	adds	r2, #2
   9098a:	7812      	ldrb	r2, [r2, #0]
   9098c:	f507 7190 	add.w	r1, r7, #288	; 0x120
   90990:	440b      	add	r3, r1
   90992:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   90996:	2300      	movs	r3, #0
   90998:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   9099c:	f107 0350 	add.w	r3, r7, #80	; 0x50
   909a0:	2204      	movs	r2, #4
   909a2:	4619      	mov	r1, r3
   909a4:	2048      	movs	r0, #72	; 0x48
   909a6:	4b25      	ldr	r3, [pc, #148]	; (90a3c <cl_testharnesscommandhandler+0x954>)
   909a8:	4798      	blx	r3
   909aa:	4603      	mov	r3, r0
   909ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   909b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   909b4:	3301      	adds	r3, #1
   909b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   909ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   909be:	2b3e      	cmp	r3, #62	; 0x3e
   909c0:	d9a9      	bls.n	90916 <cl_testharnesscommandhandler+0x82e>
		
		}
			
	}
	
	break;
   909c2:	f002 b812 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   909c6:	2064      	movs	r0, #100	; 0x64
   909c8:	4b07      	ldr	r3, [pc, #28]	; (909e8 <cl_testharnesscommandhandler+0x900>)
   909ca:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   909cc:	4b1d      	ldr	r3, [pc, #116]	; (90a44 <cl_testharnesscommandhandler+0x95c>)
   909ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   909d2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   909d6:	2b02      	cmp	r3, #2
   909d8:	d136      	bne.n	90a48 <cl_testharnesscommandhandler+0x960>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   909da:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   909de:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   909e2:	e03d      	b.n	90a60 <cl_testharnesscommandhandler+0x978>
   909e4:	2007221c 	.word	0x2007221c
   909e8:	00093009 	.word	0x00093009
   909ec:	000a85e8 	.word	0x000a85e8
   909f0:	00089385 	.word	0x00089385
   909f4:	000a85f0 	.word	0x000a85f0
   909f8:	00099a95 	.word	0x00099a95
   909fc:	000a85f8 	.word	0x000a85f8
   90a00:	00099a09 	.word	0x00099a09
   90a04:	00099a45 	.word	0x00099a45
   90a08:	000a8600 	.word	0x000a8600
   90a0c:	20071a63 	.word	0x20071a63
   90a10:	000a8608 	.word	0x000a8608
   90a14:	68db8bad 	.word	0x68db8bad
   90a18:	00099f5d 	.word	0x00099f5d
   90a1c:	00099f7d 	.word	0x00099f7d
   90a20:	200725b7 	.word	0x200725b7
   90a24:	200725b6 	.word	0x200725b6
   90a28:	2007264c 	.word	0x2007264c
   90a2c:	2007264f 	.word	0x2007264f
   90a30:	2007264e 	.word	0x2007264e
   90a34:	200725b5 	.word	0x200725b5
   90a38:	2007264d 	.word	0x2007264d
   90a3c:	0009b805 	.word	0x0009b805
   90a40:	20071cfc 	.word	0x20071cfc
   90a44:	000a8614 	.word	0x000a8614
		}
		else if(TestMsg.datasize == 3)
   90a48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90a4c:	2b03      	cmp	r3, #3
   90a4e:	d107      	bne.n	90a60 <cl_testharnesscommandhandler+0x978>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90a50:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90a54:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90a58:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90a5c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   90a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90a64:	4619      	mov	r1, r3
   90a66:	2001      	movs	r0, #1
   90a68:	4bb5      	ldr	r3, [pc, #724]	; (90d40 <cl_testharnesscommandhandler+0xc58>)
   90a6a:	4798      	blx	r3
   90a6c:	4603      	mov	r3, r0
   90a6e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   90a72:	2064      	movs	r0, #100	; 0x64
   90a74:	4bb3      	ldr	r3, [pc, #716]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90a76:	4798      	blx	r3
		break;
   90a78:	f001 bfb7 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   90a7c:	2064      	movs	r0, #100	; 0x64
   90a7e:	4bb1      	ldr	r3, [pc, #708]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90a80:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   90a82:	4bb1      	ldr	r3, [pc, #708]	; (90d48 <cl_testharnesscommandhandler+0xc60>)
   90a84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90a88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90a8c:	2b02      	cmp	r3, #2
   90a8e:	d104      	bne.n	90a9a <cl_testharnesscommandhandler+0x9b2>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90a90:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90a94:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90a98:	e00b      	b.n	90ab2 <cl_testharnesscommandhandler+0x9ca>
		}
		else if(TestMsg.datasize == 3)
   90a9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90a9e:	2b03      	cmp	r3, #3
   90aa0:	d107      	bne.n	90ab2 <cl_testharnesscommandhandler+0x9ca>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90aa2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90aa6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90aaa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90aae:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   90ab2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90ab6:	4619      	mov	r1, r3
   90ab8:	2001      	movs	r0, #1
   90aba:	4ba4      	ldr	r3, [pc, #656]	; (90d4c <cl_testharnesscommandhandler+0xc64>)
   90abc:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90abe:	2064      	movs	r0, #100	; 0x64
   90ac0:	4ba0      	ldr	r3, [pc, #640]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90ac2:	4798      	blx	r3
		break;
   90ac4:	f001 bf91 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   90ac8:	2064      	movs	r0, #100	; 0x64
   90aca:	4b9e      	ldr	r3, [pc, #632]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90acc:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   90ace:	2002      	movs	r0, #2
   90ad0:	4b9f      	ldr	r3, [pc, #636]	; (90d50 <cl_testharnesscommandhandler+0xc68>)
   90ad2:	4798      	blx	r3
   90ad4:	4603      	mov	r3, r0
   90ad6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   90ada:	4b9e      	ldr	r3, [pc, #632]	; (90d54 <cl_testharnesscommandhandler+0xc6c>)
   90adc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ae0:	2064      	movs	r0, #100	; 0x64
   90ae2:	4b98      	ldr	r3, [pc, #608]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90ae4:	4798      	blx	r3
		break;
   90ae6:	f001 bf80 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   90aea:	2064      	movs	r0, #100	; 0x64
   90aec:	4b95      	ldr	r3, [pc, #596]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90aee:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   90af0:	2002      	movs	r0, #2
   90af2:	4b99      	ldr	r3, [pc, #612]	; (90d58 <cl_testharnesscommandhandler+0xc70>)
   90af4:	4798      	blx	r3
   90af6:	4603      	mov	r3, r0
   90af8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   90afc:	4b97      	ldr	r3, [pc, #604]	; (90d5c <cl_testharnesscommandhandler+0xc74>)
   90afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90b02:	2064      	movs	r0, #100	; 0x64
   90b04:	4b8f      	ldr	r3, [pc, #572]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90b06:	4798      	blx	r3
		break;
   90b08:	f001 bf6f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   90b0c:	2064      	movs	r0, #100	; 0x64
   90b0e:	4b8d      	ldr	r3, [pc, #564]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90b10:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   90b12:	4b93      	ldr	r3, [pc, #588]	; (90d60 <cl_testharnesscommandhandler+0xc78>)
   90b14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90b18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90b1c:	2b02      	cmp	r3, #2
   90b1e:	d104      	bne.n	90b2a <cl_testharnesscommandhandler+0xa42>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90b20:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90b24:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90b28:	e00b      	b.n	90b42 <cl_testharnesscommandhandler+0xa5a>
		}
		else if(TestMsg.datasize == 3)
   90b2a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90b2e:	2b03      	cmp	r3, #3
   90b30:	d107      	bne.n	90b42 <cl_testharnesscommandhandler+0xa5a>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90b32:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90b36:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90b3a:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90b3e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   90b42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90b46:	4619      	mov	r1, r3
   90b48:	2002      	movs	r0, #2
   90b4a:	4b7d      	ldr	r3, [pc, #500]	; (90d40 <cl_testharnesscommandhandler+0xc58>)
   90b4c:	4798      	blx	r3
   90b4e:	4603      	mov	r3, r0
   90b50:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   90b54:	2064      	movs	r0, #100	; 0x64
   90b56:	4b7b      	ldr	r3, [pc, #492]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90b58:	4798      	blx	r3
		break;
   90b5a:	f001 bf46 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   90b5e:	2064      	movs	r0, #100	; 0x64
   90b60:	4b78      	ldr	r3, [pc, #480]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90b62:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   90b64:	4b7f      	ldr	r3, [pc, #508]	; (90d64 <cl_testharnesscommandhandler+0xc7c>)
   90b66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90b6a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90b6e:	2b02      	cmp	r3, #2
   90b70:	d104      	bne.n	90b7c <cl_testharnesscommandhandler+0xa94>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90b72:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90b76:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90b7a:	e00b      	b.n	90b94 <cl_testharnesscommandhandler+0xaac>
		}
		else if(TestMsg.datasize == 3)
   90b7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90b80:	2b03      	cmp	r3, #3
   90b82:	d107      	bne.n	90b94 <cl_testharnesscommandhandler+0xaac>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90b84:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90b88:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90b8c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90b90:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   90b94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90b98:	4619      	mov	r1, r3
   90b9a:	2002      	movs	r0, #2
   90b9c:	4b6b      	ldr	r3, [pc, #428]	; (90d4c <cl_testharnesscommandhandler+0xc64>)
   90b9e:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ba0:	2064      	movs	r0, #100	; 0x64
   90ba2:	4b68      	ldr	r3, [pc, #416]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90ba4:	4798      	blx	r3
		break;
   90ba6:	f001 bf20 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   90baa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90bae:	2b02      	cmp	r3, #2
   90bb0:	d104      	bne.n	90bbc <cl_testharnesscommandhandler+0xad4>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90bb2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90bb6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90bba:	e00b      	b.n	90bd4 <cl_testharnesscommandhandler+0xaec>
		}
		else if(TestMsg.datasize == 3)
   90bbc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90bc0:	2b03      	cmp	r3, #3
   90bc2:	d107      	bne.n	90bd4 <cl_testharnesscommandhandler+0xaec>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90bc4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90bc8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90bcc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90bd0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   90bd4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   90bd8:	4b63      	ldr	r3, [pc, #396]	; (90d68 <cl_testharnesscommandhandler+0xc80>)
   90bda:	4610      	mov	r0, r2
   90bdc:	4798      	blx	r3
   90bde:	4c63      	ldr	r4, [pc, #396]	; (90d6c <cl_testharnesscommandhandler+0xc84>)
   90be0:	a355      	add	r3, pc, #340	; (adr r3, 90d38 <cl_testharnesscommandhandler+0xc50>)
   90be2:	e9d3 2300 	ldrd	r2, r3, [r3]
   90be6:	47a0      	blx	r4
   90be8:	4603      	mov	r3, r0
   90bea:	460c      	mov	r4, r1
   90bec:	4619      	mov	r1, r3
   90bee:	4622      	mov	r2, r4
   90bf0:	4b5f      	ldr	r3, [pc, #380]	; (90d70 <cl_testharnesscommandhandler+0xc88>)
   90bf2:	4608      	mov	r0, r1
   90bf4:	4611      	mov	r1, r2
   90bf6:	4798      	blx	r3
   90bf8:	4603      	mov	r3, r0
   90bfa:	b21a      	sxth	r2, r3
   90bfc:	4b5d      	ldr	r3, [pc, #372]	; (90d74 <cl_testharnesscommandhandler+0xc8c>)
   90bfe:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   90c00:	4b5d      	ldr	r3, [pc, #372]	; (90d78 <cl_testharnesscommandhandler+0xc90>)
   90c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   90c06:	f001 bef0 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   90c0a:	2064      	movs	r0, #100	; 0x64
   90c0c:	4b4d      	ldr	r3, [pc, #308]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c0e:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   90c10:	2100      	movs	r1, #0
   90c12:	2002      	movs	r0, #2
   90c14:	4b59      	ldr	r3, [pc, #356]	; (90d7c <cl_testharnesscommandhandler+0xc94>)
   90c16:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   90c18:	4b59      	ldr	r3, [pc, #356]	; (90d80 <cl_testharnesscommandhandler+0xc98>)
   90c1a:	4798      	blx	r3
				cl_wait(100);
   90c1c:	2064      	movs	r0, #100	; 0x64
   90c1e:	4b49      	ldr	r3, [pc, #292]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c20:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   90c22:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   90c26:	2001      	movs	r0, #1
   90c28:	4b54      	ldr	r3, [pc, #336]	; (90d7c <cl_testharnesscommandhandler+0xc94>)
   90c2a:	4798      	blx	r3
				cl_wait(100);
   90c2c:	2064      	movs	r0, #100	; 0x64
   90c2e:	4b45      	ldr	r3, [pc, #276]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c30:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   90c32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   90c36:	2001      	movs	r0, #1
   90c38:	4b50      	ldr	r3, [pc, #320]	; (90d7c <cl_testharnesscommandhandler+0xc94>)
   90c3a:	4798      	blx	r3
				cl_wait(100);
   90c3c:	2064      	movs	r0, #100	; 0x64
   90c3e:	4b41      	ldr	r3, [pc, #260]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c40:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   90c42:	2196      	movs	r1, #150	; 0x96
   90c44:	2001      	movs	r0, #1
   90c46:	4b4d      	ldr	r3, [pc, #308]	; (90d7c <cl_testharnesscommandhandler+0xc94>)
   90c48:	4798      	blx	r3
				
		break;
   90c4a:	f001 bece 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   90c4e:	2064      	movs	r0, #100	; 0x64
   90c50:	4b3c      	ldr	r3, [pc, #240]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c52:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   90c54:	2004      	movs	r0, #4
   90c56:	4b40      	ldr	r3, [pc, #256]	; (90d58 <cl_testharnesscommandhandler+0xc70>)
   90c58:	4798      	blx	r3
   90c5a:	4603      	mov	r3, r0
   90c5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   90c60:	4b48      	ldr	r3, [pc, #288]	; (90d84 <cl_testharnesscommandhandler+0xc9c>)
   90c62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90c66:	2064      	movs	r0, #100	; 0x64
   90c68:	4b36      	ldr	r3, [pc, #216]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c6a:	4798      	blx	r3
		break;
   90c6c:	f001 bebd 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   90c70:	2064      	movs	r0, #100	; 0x64
   90c72:	4b34      	ldr	r3, [pc, #208]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90c74:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   90c76:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90c7a:	2b02      	cmp	r3, #2
   90c7c:	d104      	bne.n	90c88 <cl_testharnesscommandhandler+0xba0>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90c7e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c82:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90c86:	e00b      	b.n	90ca0 <cl_testharnesscommandhandler+0xbb8>
		}
		else if(TestMsg.datasize == 3)
   90c88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90c8c:	2b03      	cmp	r3, #3
   90c8e:	d107      	bne.n	90ca0 <cl_testharnesscommandhandler+0xbb8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90c90:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c94:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90c98:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90c9c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   90ca0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90ca4:	4619      	mov	r1, r3
   90ca6:	2004      	movs	r0, #4
   90ca8:	4b25      	ldr	r3, [pc, #148]	; (90d40 <cl_testharnesscommandhandler+0xc58>)
   90caa:	4798      	blx	r3
		uf_rotation_counter = 0;
   90cac:	4b36      	ldr	r3, [pc, #216]	; (90d88 <cl_testharnesscommandhandler+0xca0>)
   90cae:	2200      	movs	r2, #0
   90cb0:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   90cb2:	4b36      	ldr	r3, [pc, #216]	; (90d8c <cl_testharnesscommandhandler+0xca4>)
   90cb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90cb8:	2064      	movs	r0, #100	; 0x64
   90cba:	4b22      	ldr	r3, [pc, #136]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cbc:	4798      	blx	r3
		break;
   90cbe:	f001 be94 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   90cc2:	2064      	movs	r0, #100	; 0x64
   90cc4:	4b1f      	ldr	r3, [pc, #124]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cc6:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   90cc8:	4b31      	ldr	r3, [pc, #196]	; (90d90 <cl_testharnesscommandhandler+0xca8>)
   90cca:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   90ccc:	2064      	movs	r0, #100	; 0x64
   90cce:	4b1d      	ldr	r3, [pc, #116]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cd0:	4798      	blx	r3
		break;
   90cd2:	f001 be8a 	b.w	929ea <cl_testharnesscommandhandler+0x2902>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   90cd6:	2064      	movs	r0, #100	; 0x64
   90cd8:	4b1a      	ldr	r3, [pc, #104]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cda:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   90cdc:	2006      	movs	r0, #6
   90cde:	4b1c      	ldr	r3, [pc, #112]	; (90d50 <cl_testharnesscommandhandler+0xc68>)
   90ce0:	4798      	blx	r3
   90ce2:	4603      	mov	r3, r0
   90ce4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   90ce8:	4b2a      	ldr	r3, [pc, #168]	; (90d94 <cl_testharnesscommandhandler+0xcac>)
   90cea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90cee:	2064      	movs	r0, #100	; 0x64
   90cf0:	4b14      	ldr	r3, [pc, #80]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cf2:	4798      	blx	r3
		break;
   90cf4:	f001 be79 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   90cf8:	2064      	movs	r0, #100	; 0x64
   90cfa:	4b12      	ldr	r3, [pc, #72]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90cfc:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   90cfe:	2006      	movs	r0, #6
   90d00:	4b15      	ldr	r3, [pc, #84]	; (90d58 <cl_testharnesscommandhandler+0xc70>)
   90d02:	4798      	blx	r3
   90d04:	4603      	mov	r3, r0
   90d06:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   90d0a:	4b23      	ldr	r3, [pc, #140]	; (90d98 <cl_testharnesscommandhandler+0xcb0>)
   90d0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90d10:	2064      	movs	r0, #100	; 0x64
   90d12:	4b0c      	ldr	r3, [pc, #48]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90d14:	4798      	blx	r3
		break;
   90d16:	f001 be68 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   90d1a:	2064      	movs	r0, #100	; 0x64
   90d1c:	4b09      	ldr	r3, [pc, #36]	; (90d44 <cl_testharnesscommandhandler+0xc5c>)
   90d1e:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   90d20:	2300      	movs	r3, #0
   90d22:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   90d26:	2003      	movs	r0, #3
   90d28:	4b09      	ldr	r3, [pc, #36]	; (90d50 <cl_testharnesscommandhandler+0xc68>)
   90d2a:	4798      	blx	r3
   90d2c:	4603      	mov	r3, r0
   90d2e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   90d32:	f001 be5a 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
   90d36:	bf00      	nop
   90d38:	487fcb92 	.word	0x487fcb92
   90d3c:	3ffd7dbf 	.word	0x3ffd7dbf
   90d40:	00099b21 	.word	0x00099b21
   90d44:	00093009 	.word	0x00093009
   90d48:	000a861c 	.word	0x000a861c
   90d4c:	00099cdd 	.word	0x00099cdd
   90d50:	00099a09 	.word	0x00099a09
   90d54:	000a8624 	.word	0x000a8624
   90d58:	00099a45 	.word	0x00099a45
   90d5c:	000a862c 	.word	0x000a862c
   90d60:	000a8634 	.word	0x000a8634
   90d64:	000a8640 	.word	0x000a8640
   90d68:	000a5c25 	.word	0x000a5c25
   90d6c:	000a5d11 	.word	0x000a5d11
   90d70:	000a6245 	.word	0x000a6245
   90d74:	20070102 	.word	0x20070102
   90d78:	000a8648 	.word	0x000a8648
   90d7c:	00095bbd 	.word	0x00095bbd
   90d80:	00095b75 	.word	0x00095b75
   90d84:	000a8650 	.word	0x000a8650
   90d88:	20071a64 	.word	0x20071a64
   90d8c:	000a8658 	.word	0x000a8658
   90d90:	00099bf5 	.word	0x00099bf5
   90d94:	000a8664 	.word	0x000a8664
   90d98:	000a8670 	.word	0x000a8670

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   90d9c:	2064      	movs	r0, #100	; 0x64
   90d9e:	4bb2      	ldr	r3, [pc, #712]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90da0:	4798      	blx	r3
		Cl_Uint8Type data =0;
   90da2:	2300      	movs	r3, #0
   90da4:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   90da8:	2003      	movs	r0, #3
   90daa:	4bb0      	ldr	r3, [pc, #704]	; (9106c <cl_testharnesscommandhandler+0xf84>)
   90dac:	4798      	blx	r3
   90dae:	4603      	mov	r3, r0
   90db0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90db4:	2064      	movs	r0, #100	; 0x64
   90db6:	4bac      	ldr	r3, [pc, #688]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90db8:	4798      	blx	r3
		break;
   90dba:	f001 be16 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   90dbe:	2064      	movs	r0, #100	; 0x64
   90dc0:	4ba9      	ldr	r3, [pc, #676]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90dc2:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   90dc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90dc8:	2b02      	cmp	r3, #2
   90dca:	d104      	bne.n	90dd6 <cl_testharnesscommandhandler+0xcee>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90dcc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90dd0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90dd4:	e00b      	b.n	90dee <cl_testharnesscommandhandler+0xd06>
		}
		else if(TestMsg.datasize == 3)
   90dd6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90dda:	2b03      	cmp	r3, #3
   90ddc:	d107      	bne.n	90dee <cl_testharnesscommandhandler+0xd06>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90dde:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90de2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90de6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90dea:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   90dee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90df2:	4a9f      	ldr	r2, [pc, #636]	; (91070 <cl_testharnesscommandhandler+0xf88>)
   90df4:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   90df6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90dfa:	4619      	mov	r1, r3
   90dfc:	2003      	movs	r0, #3
   90dfe:	4b9d      	ldr	r3, [pc, #628]	; (91074 <cl_testharnesscommandhandler+0xf8c>)
   90e00:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   90e02:	4b9d      	ldr	r3, [pc, #628]	; (91078 <cl_testharnesscommandhandler+0xf90>)
   90e04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90e08:	2064      	movs	r0, #100	; 0x64
   90e0a:	4b97      	ldr	r3, [pc, #604]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90e0c:	4798      	blx	r3
		break;
   90e0e:	f001 bdec 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   90e12:	2064      	movs	r0, #100	; 0x64
   90e14:	4b94      	ldr	r3, [pc, #592]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90e16:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   90e18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e1c:	2b02      	cmp	r3, #2
   90e1e:	d105      	bne.n	90e2c <cl_testharnesscommandhandler+0xd44>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90e20:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e24:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   90e28:	f001 bdda 	b.w	929e0 <cl_testharnesscommandhandler+0x28f8>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   90e2c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e30:	2b03      	cmp	r3, #3
   90e32:	f041 85d5 	bne.w	929e0 <cl_testharnesscommandhandler+0x28f8>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90e36:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e3a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90e3e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90e42:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   90e46:	f001 bdcb 	b.w	929e0 <cl_testharnesscommandhandler+0x28f8>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   90e4a:	2064      	movs	r0, #100	; 0x64
   90e4c:	4b86      	ldr	r3, [pc, #536]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90e4e:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   90e50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e54:	2b02      	cmp	r3, #2
   90e56:	d105      	bne.n	90e64 <cl_testharnesscommandhandler+0xd7c>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90e58:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e5c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   90e60:	f001 bdc0 	b.w	929e4 <cl_testharnesscommandhandler+0x28fc>
		if(TestMsg.datasize == 2)
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
		}
		else if(TestMsg.datasize == 3)
   90e64:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e68:	2b03      	cmp	r3, #3
   90e6a:	f041 85bb 	bne.w	929e4 <cl_testharnesscommandhandler+0x28fc>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90e6e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e72:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90e76:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90e7a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   90e7e:	f001 bdb1 	b.w	929e4 <cl_testharnesscommandhandler+0x28fc>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   90e82:	2064      	movs	r0, #100	; 0x64
   90e84:	4b78      	ldr	r3, [pc, #480]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90e86:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   90e88:	4b7c      	ldr	r3, [pc, #496]	; (9107c <cl_testharnesscommandhandler+0xf94>)
   90e8a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   90e8c:	4b7c      	ldr	r3, [pc, #496]	; (91080 <cl_testharnesscommandhandler+0xf98>)
   90e8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   90e92:	f001 bdaa 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   90e96:	2064      	movs	r0, #100	; 0x64
   90e98:	4b73      	ldr	r3, [pc, #460]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90e9a:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   90e9c:	4b79      	ldr	r3, [pc, #484]	; (91084 <cl_testharnesscommandhandler+0xf9c>)
   90e9e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   90ea0:	4b79      	ldr	r3, [pc, #484]	; (91088 <cl_testharnesscommandhandler+0xfa0>)
   90ea2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ea6:	2064      	movs	r0, #100	; 0x64
   90ea8:	4b6f      	ldr	r3, [pc, #444]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90eaa:	4798      	blx	r3
		break;
   90eac:	f001 bd9d 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   90eb0:	2064      	movs	r0, #100	; 0x64
   90eb2:	4b6d      	ldr	r3, [pc, #436]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90eb4:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   90eb6:	4b75      	ldr	r3, [pc, #468]	; (9108c <cl_testharnesscommandhandler+0xfa4>)
   90eb8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   90eba:	4b75      	ldr	r3, [pc, #468]	; (91090 <cl_testharnesscommandhandler+0xfa8>)
   90ebc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ec0:	2064      	movs	r0, #100	; 0x64
   90ec2:	4b69      	ldr	r3, [pc, #420]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90ec4:	4798      	blx	r3
		break;
   90ec6:	f001 bd90 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   90eca:	2064      	movs	r0, #100	; 0x64
   90ecc:	4b66      	ldr	r3, [pc, #408]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90ece:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   90ed0:	4b70      	ldr	r3, [pc, #448]	; (91094 <cl_testharnesscommandhandler+0xfac>)
   90ed2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ed6:	2064      	movs	r0, #100	; 0x64
   90ed8:	4b63      	ldr	r3, [pc, #396]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90eda:	4798      	blx	r3
		break;
   90edc:	f001 bd85 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   90ee0:	2064      	movs	r0, #100	; 0x64
   90ee2:	4b61      	ldr	r3, [pc, #388]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90ee4:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   90ee6:	4b6c      	ldr	r3, [pc, #432]	; (91098 <cl_testharnesscommandhandler+0xfb0>)
   90ee8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90eec:	2064      	movs	r0, #100	; 0x64
   90eee:	4b5e      	ldr	r3, [pc, #376]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90ef0:	4798      	blx	r3
		break;
   90ef2:	f001 bd7a 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   90ef6:	4b69      	ldr	r3, [pc, #420]	; (9109c <cl_testharnesscommandhandler+0xfb4>)
   90ef8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   90efc:	2004      	movs	r0, #4
   90efe:	4b68      	ldr	r3, [pc, #416]	; (910a0 <cl_testharnesscommandhandler+0xfb8>)
   90f00:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90f02:	2064      	movs	r0, #100	; 0x64
   90f04:	4b58      	ldr	r3, [pc, #352]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90f06:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   90f08:	2004      	movs	r0, #4
   90f0a:	4b66      	ldr	r3, [pc, #408]	; (910a4 <cl_testharnesscommandhandler+0xfbc>)
   90f0c:	4798      	blx	r3
		cl_wait(100);
   90f0e:	2064      	movs	r0, #100	; 0x64
   90f10:	4b55      	ldr	r3, [pc, #340]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90f12:	4798      	blx	r3
		break;
   90f14:	f001 bd69 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   90f18:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f1c:	2b00      	cmp	r3, #0
   90f1e:	d10d      	bne.n	90f3c <cl_testharnesscommandhandler+0xe54>
		{
			sv_cs_setpotvalue(3800);
   90f20:	f640 60d8 	movw	r0, #3800	; 0xed8
   90f24:	4b60      	ldr	r3, [pc, #384]	; (910a8 <cl_testharnesscommandhandler+0xfc0>)
   90f26:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   90f28:	f240 411a 	movw	r1, #1050	; 0x41a
   90f2c:	2001      	movs	r0, #1
   90f2e:	4b51      	ldr	r3, [pc, #324]	; (91074 <cl_testharnesscommandhandler+0xf8c>)
   90f30:	4798      	blx	r3
   90f32:	4603      	mov	r3, r0
   90f34:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   90f38:	f001 bd56 	b.w	929e8 <cl_testharnesscommandhandler+0x2900>
		{
			sv_cs_setpotvalue(3800);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
			
		}
		else if(TestMsg.data.byte[1] == 1)
   90f3c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f40:	2b01      	cmp	r3, #1
   90f42:	d10d      	bne.n	90f60 <cl_testharnesscommandhandler+0xe78>
		{
						sv_cs_setpotvalue(2450);
   90f44:	f640 1092 	movw	r0, #2450	; 0x992
   90f48:	4b57      	ldr	r3, [pc, #348]	; (910a8 <cl_testharnesscommandhandler+0xfc0>)
   90f4a:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   90f4c:	f240 21e9 	movw	r1, #745	; 0x2e9
   90f50:	2001      	movs	r0, #1
   90f52:	4b48      	ldr	r3, [pc, #288]	; (91074 <cl_testharnesscommandhandler+0xf8c>)
   90f54:	4798      	blx	r3
   90f56:	4603      	mov	r3, r0
   90f58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   90f5c:	f001 bd44 	b.w	929e8 <cl_testharnesscommandhandler+0x2900>
		else if(TestMsg.data.byte[1] == 1)
		{
						sv_cs_setpotvalue(2450);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
		}
		else if(TestMsg.data.byte[1] == 2)
   90f60:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f64:	2b02      	cmp	r3, #2
   90f66:	f041 853f 	bne.w	929e8 <cl_testharnesscommandhandler+0x2900>
		{
						sv_cs_setpotvalue(1090);
   90f6a:	f240 4042 	movw	r0, #1090	; 0x442
   90f6e:	4b4e      	ldr	r3, [pc, #312]	; (910a8 <cl_testharnesscommandhandler+0xfc0>)
   90f70:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   90f72:	f44f 71b9 	mov.w	r1, #370	; 0x172
   90f76:	2001      	movs	r0, #1
   90f78:	4b3e      	ldr	r3, [pc, #248]	; (91074 <cl_testharnesscommandhandler+0xf8c>)
   90f7a:	4798      	blx	r3
   90f7c:	4603      	mov	r3, r0
   90f7e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   90f82:	f001 bd31 	b.w	929e8 <cl_testharnesscommandhandler+0x2900>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   90f86:	2300      	movs	r3, #0
   90f88:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   90f8a:	2064      	movs	r0, #100	; 0x64
   90f8c:	4b36      	ldr	r3, [pc, #216]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90f8e:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   90f90:	4b42      	ldr	r3, [pc, #264]	; (9109c <cl_testharnesscommandhandler+0xfb4>)
   90f92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   90f96:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f9a:	4618      	mov	r0, r3
   90f9c:	4b40      	ldr	r3, [pc, #256]	; (910a0 <cl_testharnesscommandhandler+0xfb8>)
   90f9e:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   90fa0:	2064      	movs	r0, #100	; 0x64
   90fa2:	4b31      	ldr	r3, [pc, #196]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90fa4:	4798      	blx	r3
					
		}
		}
		break;
   90fa6:	f001 bd20 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   90faa:	2064      	movs	r0, #100	; 0x64
   90fac:	4b2e      	ldr	r3, [pc, #184]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90fae:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   90fb0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90fb4:	4618      	mov	r0, r3
   90fb6:	4b3b      	ldr	r3, [pc, #236]	; (910a4 <cl_testharnesscommandhandler+0xfbc>)
   90fb8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   90fba:	4b3c      	ldr	r3, [pc, #240]	; (910ac <cl_testharnesscommandhandler+0xfc4>)
   90fbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90fc0:	2064      	movs	r0, #100	; 0x64
   90fc2:	4b29      	ldr	r3, [pc, #164]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90fc4:	4798      	blx	r3
		break;
   90fc6:	f001 bd10 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   90fca:	2064      	movs	r0, #100	; 0x64
   90fcc:	4b26      	ldr	r3, [pc, #152]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90fce:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   90fd0:	4b37      	ldr	r3, [pc, #220]	; (910b0 <cl_testharnesscommandhandler+0xfc8>)
   90fd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   90fd6:	2301      	movs	r3, #1
   90fd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90fdc:	e00c      	b.n	90ff8 <cl_testharnesscommandhandler+0xf10>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   90fde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90fe2:	4618      	mov	r0, r3
   90fe4:	4b2e      	ldr	r3, [pc, #184]	; (910a0 <cl_testharnesscommandhandler+0xfb8>)
   90fe6:	4798      	blx	r3
				cl_wait(10);
   90fe8:	200a      	movs	r0, #10
   90fea:	4b1f      	ldr	r3, [pc, #124]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   90fec:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   90fee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90ff2:	3301      	adds	r3, #1
   90ff4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90ff8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90ffc:	2b14      	cmp	r3, #20
   90ffe:	d9ee      	bls.n	90fde <cl_testharnesscommandhandler+0xef6>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   91000:	2064      	movs	r0, #100	; 0x64
   91002:	4b19      	ldr	r3, [pc, #100]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   91004:	4798      	blx	r3
		break;
   91006:	f001 bcf0 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   9100a:	2064      	movs	r0, #100	; 0x64
   9100c:	4b16      	ldr	r3, [pc, #88]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   9100e:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   91010:	2005      	movs	r0, #5
   91012:	4b28      	ldr	r3, [pc, #160]	; (910b4 <cl_testharnesscommandhandler+0xfcc>)
   91014:	4798      	blx	r3
   91016:	4603      	mov	r3, r0
   91018:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   9101c:	4b26      	ldr	r3, [pc, #152]	; (910b8 <cl_testharnesscommandhandler+0xfd0>)
   9101e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91022:	2064      	movs	r0, #100	; 0x64
   91024:	4b10      	ldr	r3, [pc, #64]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   91026:	4798      	blx	r3
		break;
   91028:	f001 bcdf 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   9102c:	2064      	movs	r0, #100	; 0x64
   9102e:	4b0e      	ldr	r3, [pc, #56]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   91030:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   91032:	2005      	movs	r0, #5
   91034:	4b0d      	ldr	r3, [pc, #52]	; (9106c <cl_testharnesscommandhandler+0xf84>)
   91036:	4798      	blx	r3
   91038:	4603      	mov	r3, r0
   9103a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   9103e:	4b1f      	ldr	r3, [pc, #124]	; (910bc <cl_testharnesscommandhandler+0xfd4>)
   91040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91044:	2064      	movs	r0, #100	; 0x64
   91046:	4b08      	ldr	r3, [pc, #32]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   91048:	4798      	blx	r3
		break;
   9104a:	f001 bcce 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   9104e:	2064      	movs	r0, #100	; 0x64
   91050:	4b05      	ldr	r3, [pc, #20]	; (91068 <cl_testharnesscommandhandler+0xf80>)
   91052:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   91054:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91058:	2b02      	cmp	r3, #2
   9105a:	d131      	bne.n	910c0 <cl_testharnesscommandhandler+0xfd8>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   9105c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91060:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91064:	e038      	b.n	910d8 <cl_testharnesscommandhandler+0xff0>
   91066:	bf00      	nop
   91068:	00093009 	.word	0x00093009
   9106c:	00099a45 	.word	0x00099a45
   91070:	20072654 	.word	0x20072654
   91074:	00099b21 	.word	0x00099b21
   91078:	000a8680 	.word	0x000a8680
   9107c:	00099c09 	.word	0x00099c09
   91080:	000a8688 	.word	0x000a8688
   91084:	00099af9 	.word	0x00099af9
   91088:	000a8690 	.word	0x000a8690
   9108c:	00099b0d 	.word	0x00099b0d
   91090:	000a8698 	.word	0x000a8698
   91094:	000a86a0 	.word	0x000a86a0
   91098:	000a86ac 	.word	0x000a86ac
   9109c:	000a86b8 	.word	0x000a86b8
   910a0:	00099aa9 	.word	0x00099aa9
   910a4:	00099ac9 	.word	0x00099ac9
   910a8:	00099f5d 	.word	0x00099f5d
   910ac:	000a86c0 	.word	0x000a86c0
   910b0:	000a86c8 	.word	0x000a86c8
   910b4:	00099a09 	.word	0x00099a09
   910b8:	000a86d4 	.word	0x000a86d4
   910bc:	000a86dc 	.word	0x000a86dc
						}
						else if(TestMsg.datasize == 3)
   910c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   910c4:	2b03      	cmp	r3, #3
   910c6:	d107      	bne.n	910d8 <cl_testharnesscommandhandler+0xff0>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   910c8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   910cc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   910d0:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   910d4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   910d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   910dc:	4619      	mov	r1, r3
   910de:	2005      	movs	r0, #5
   910e0:	4b9e      	ldr	r3, [pc, #632]	; (9135c <cl_testharnesscommandhandler+0x1274>)
   910e2:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   910e4:	4b9e      	ldr	r3, [pc, #632]	; (91360 <cl_testharnesscommandhandler+0x1278>)
   910e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   910ea:	2064      	movs	r0, #100	; 0x64
   910ec:	4b9d      	ldr	r3, [pc, #628]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   910ee:	4798      	blx	r3
		break;
   910f0:	f001 bc7b 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   910f4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   910f8:	2b00      	cmp	r3, #0
   910fa:	d003      	beq.n	91104 <cl_testharnesscommandhandler+0x101c>
		{
			sv_cntrl_setHepa_dir();
   910fc:	4b9a      	ldr	r3, [pc, #616]	; (91368 <cl_testharnesscommandhandler+0x1280>)
   910fe:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   91100:	f001 bc73 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   91104:	4b99      	ldr	r3, [pc, #612]	; (9136c <cl_testharnesscommandhandler+0x1284>)
   91106:	4798      	blx	r3
		}
		break;
   91108:	f001 bc6f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   9110c:	2032      	movs	r0, #50	; 0x32
   9110e:	4b95      	ldr	r3, [pc, #596]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   91110:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   91112:	2001      	movs	r0, #1
   91114:	4b96      	ldr	r3, [pc, #600]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   91116:	4798      	blx	r3
   91118:	4603      	mov	r3, r0
   9111a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   9111e:	200a      	movs	r0, #10
   91120:	4b90      	ldr	r3, [pc, #576]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   91122:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   91124:	2002      	movs	r0, #2
   91126:	4b92      	ldr	r3, [pc, #584]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   91128:	4798      	blx	r3
   9112a:	4603      	mov	r3, r0
   9112c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91130:	200a      	movs	r0, #10
   91132:	4b8c      	ldr	r3, [pc, #560]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   91134:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   91136:	2003      	movs	r0, #3
   91138:	4b8d      	ldr	r3, [pc, #564]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   9113a:	4798      	blx	r3
   9113c:	4603      	mov	r3, r0
   9113e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91142:	200a      	movs	r0, #10
   91144:	4b87      	ldr	r3, [pc, #540]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   91146:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   91148:	2004      	movs	r0, #4
   9114a:	4b89      	ldr	r3, [pc, #548]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   9114c:	4798      	blx	r3
   9114e:	4603      	mov	r3, r0
   91150:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91154:	200a      	movs	r0, #10
   91156:	4b83      	ldr	r3, [pc, #524]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   91158:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   9115a:	2005      	movs	r0, #5
   9115c:	4b84      	ldr	r3, [pc, #528]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   9115e:	4798      	blx	r3
   91160:	4603      	mov	r3, r0
   91162:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   91166:	2032      	movs	r0, #50	; 0x32
   91168:	4b7e      	ldr	r3, [pc, #504]	; (91364 <cl_testharnesscommandhandler+0x127c>)
   9116a:	4798      	blx	r3
		break;
   9116c:	f001 bc3d 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   91170:	2006      	movs	r0, #6
   91172:	4b80      	ldr	r3, [pc, #512]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91174:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   91176:	2007      	movs	r0, #7
   91178:	4b7e      	ldr	r3, [pc, #504]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9117a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   9117c:	200c      	movs	r0, #12
   9117e:	4b7d      	ldr	r3, [pc, #500]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91180:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   91182:	2009      	movs	r0, #9
   91184:	4b7b      	ldr	r3, [pc, #492]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91186:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   91188:	2005      	movs	r0, #5
   9118a:	4b7b      	ldr	r3, [pc, #492]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9118c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9118e:	2008      	movs	r0, #8
   91190:	4b79      	ldr	r3, [pc, #484]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91192:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91194:	200a      	movs	r0, #10
   91196:	4b78      	ldr	r3, [pc, #480]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91198:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9119a:	200b      	movs	r0, #11
   9119c:	4b76      	ldr	r3, [pc, #472]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9119e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   911a0:	4b76      	ldr	r3, [pc, #472]	; (9137c <cl_testharnesscommandhandler+0x1294>)
   911a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   911a6:	f001 bc20 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   911aa:	2005      	movs	r0, #5
   911ac:	4b71      	ldr	r3, [pc, #452]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911ae:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   911b0:	2008      	movs	r0, #8
   911b2:	4b70      	ldr	r3, [pc, #448]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911b4:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   911b6:	200a      	movs	r0, #10
   911b8:	4b6e      	ldr	r3, [pc, #440]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911ba:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   911bc:	200b      	movs	r0, #11
   911be:	4b6d      	ldr	r3, [pc, #436]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911c0:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   911c2:	200c      	movs	r0, #12
   911c4:	4b6c      	ldr	r3, [pc, #432]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   911c6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   911c8:	2009      	movs	r0, #9
   911ca:	4b6b      	ldr	r3, [pc, #428]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   911cc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   911ce:	2006      	movs	r0, #6
   911d0:	4b69      	ldr	r3, [pc, #420]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   911d2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   911d4:	2007      	movs	r0, #7
   911d6:	4b68      	ldr	r3, [pc, #416]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   911d8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   911da:	4b69      	ldr	r3, [pc, #420]	; (91380 <cl_testharnesscommandhandler+0x1298>)
   911dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   911e0:	f001 bc03 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   911e4:	2006      	movs	r0, #6
   911e6:	4b63      	ldr	r3, [pc, #396]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911e8:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   911ea:	2007      	movs	r0, #7
   911ec:	4b61      	ldr	r3, [pc, #388]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911ee:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   911f0:	200c      	movs	r0, #12
   911f2:	4b60      	ldr	r3, [pc, #384]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911f4:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   911f6:	2009      	movs	r0, #9
   911f8:	4b5e      	ldr	r3, [pc, #376]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   911fa:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   911fc:	2005      	movs	r0, #5
   911fe:	4b5e      	ldr	r3, [pc, #376]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91200:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   91202:	2008      	movs	r0, #8
   91204:	4b5c      	ldr	r3, [pc, #368]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91206:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91208:	200a      	movs	r0, #10
   9120a:	4b5b      	ldr	r3, [pc, #364]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9120c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9120e:	200b      	movs	r0, #11
   91210:	4b59      	ldr	r3, [pc, #356]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91212:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   91214:	200d      	movs	r0, #13
   91216:	4b57      	ldr	r3, [pc, #348]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91218:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   9121a:	200e      	movs	r0, #14
   9121c:	4b55      	ldr	r3, [pc, #340]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9121e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   91220:	4b58      	ldr	r3, [pc, #352]	; (91384 <cl_testharnesscommandhandler+0x129c>)
   91222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   91226:	f001 bbe0 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   9122a:	2005      	movs	r0, #5
   9122c:	4b51      	ldr	r3, [pc, #324]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9122e:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   91230:	2008      	movs	r0, #8
   91232:	4b50      	ldr	r3, [pc, #320]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91234:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   91236:	200a      	movs	r0, #10
   91238:	4b4e      	ldr	r3, [pc, #312]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9123a:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   9123c:	200b      	movs	r0, #11
   9123e:	4b4d      	ldr	r3, [pc, #308]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91240:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   91242:	200c      	movs	r0, #12
   91244:	4b4c      	ldr	r3, [pc, #304]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91246:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   91248:	2009      	movs	r0, #9
   9124a:	4b4b      	ldr	r3, [pc, #300]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9124c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9124e:	2006      	movs	r0, #6
   91250:	4b49      	ldr	r3, [pc, #292]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91252:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   91254:	2007      	movs	r0, #7
   91256:	4b48      	ldr	r3, [pc, #288]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91258:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   9125a:	200d      	movs	r0, #13
   9125c:	4b45      	ldr	r3, [pc, #276]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9125e:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   91260:	200e      	movs	r0, #14
   91262:	4b44      	ldr	r3, [pc, #272]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91264:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   91266:	4b48      	ldr	r3, [pc, #288]	; (91388 <cl_testharnesscommandhandler+0x12a0>)
   91268:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   9126c:	f001 bbbd 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   91270:	2006      	movs	r0, #6
   91272:	4b40      	ldr	r3, [pc, #256]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91274:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   91276:	2007      	movs	r0, #7
   91278:	4b3e      	ldr	r3, [pc, #248]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   9127a:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   9127c:	200c      	movs	r0, #12
   9127e:	4b3d      	ldr	r3, [pc, #244]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91280:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   91282:	2009      	movs	r0, #9
   91284:	4b3b      	ldr	r3, [pc, #236]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   91286:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   91288:	2005      	movs	r0, #5
   9128a:	4b3b      	ldr	r3, [pc, #236]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9128c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9128e:	2008      	movs	r0, #8
   91290:	4b39      	ldr	r3, [pc, #228]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91292:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91294:	200a      	movs	r0, #10
   91296:	4b38      	ldr	r3, [pc, #224]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91298:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9129a:	200b      	movs	r0, #11
   9129c:	4b36      	ldr	r3, [pc, #216]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9129e:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   912a0:	2004      	movs	r0, #4
   912a2:	4b34      	ldr	r3, [pc, #208]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912a4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   912a6:	200d      	movs	r0, #13
   912a8:	4b33      	ldr	r3, [pc, #204]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912aa:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   912ac:	200e      	movs	r0, #14
   912ae:	4b32      	ldr	r3, [pc, #200]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912b0:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   912b2:	4b36      	ldr	r3, [pc, #216]	; (9138c <cl_testharnesscommandhandler+0x12a4>)
   912b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   912b8:	f001 bb97 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   912bc:	2005      	movs	r0, #5
   912be:	4b2d      	ldr	r3, [pc, #180]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912c0:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   912c2:	2008      	movs	r0, #8
   912c4:	4b2b      	ldr	r3, [pc, #172]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912c6:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   912c8:	200a      	movs	r0, #10
   912ca:	4b2a      	ldr	r3, [pc, #168]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912cc:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   912ce:	200b      	movs	r0, #11
   912d0:	4b28      	ldr	r3, [pc, #160]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912d2:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   912d4:	200c      	movs	r0, #12
   912d6:	4b28      	ldr	r3, [pc, #160]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912d8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   912da:	2009      	movs	r0, #9
   912dc:	4b26      	ldr	r3, [pc, #152]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912de:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   912e0:	2006      	movs	r0, #6
   912e2:	4b25      	ldr	r3, [pc, #148]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912e4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   912e6:	2007      	movs	r0, #7
   912e8:	4b23      	ldr	r3, [pc, #140]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912ea:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   912ec:	2004      	movs	r0, #4
   912ee:	4b21      	ldr	r3, [pc, #132]	; (91374 <cl_testharnesscommandhandler+0x128c>)
   912f0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   912f2:	200d      	movs	r0, #13
   912f4:	4b20      	ldr	r3, [pc, #128]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912f6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   912f8:	200e      	movs	r0, #14
   912fa:	4b1f      	ldr	r3, [pc, #124]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   912fc:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   912fe:	4b24      	ldr	r3, [pc, #144]	; (91390 <cl_testharnesscommandhandler+0x12a8>)
   91300:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   91304:	f001 bb71 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   91308:	2005      	movs	r0, #5
   9130a:	4b1b      	ldr	r3, [pc, #108]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9130c:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9130e:	2008      	movs	r0, #8
   91310:	4b19      	ldr	r3, [pc, #100]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91312:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91314:	200a      	movs	r0, #10
   91316:	4b18      	ldr	r3, [pc, #96]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91318:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   9131a:	200b      	movs	r0, #11
   9131c:	4b16      	ldr	r3, [pc, #88]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9131e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   91320:	200c      	movs	r0, #12
   91322:	4b15      	ldr	r3, [pc, #84]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91324:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   91326:	2009      	movs	r0, #9
   91328:	4b13      	ldr	r3, [pc, #76]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   9132a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9132c:	2006      	movs	r0, #6
   9132e:	4b12      	ldr	r3, [pc, #72]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91330:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   91332:	2007      	movs	r0, #7
   91334:	4b10      	ldr	r3, [pc, #64]	; (91378 <cl_testharnesscommandhandler+0x1290>)
   91336:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   91338:	2001      	movs	r0, #1
   9133a:	4b0d      	ldr	r3, [pc, #52]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   9133c:	4798      	blx	r3
   9133e:	4603      	mov	r3, r0
   91340:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   91344:	2002      	movs	r0, #2
   91346:	4b0a      	ldr	r3, [pc, #40]	; (91370 <cl_testharnesscommandhandler+0x1288>)
   91348:	4798      	blx	r3
   9134a:	4603      	mov	r3, r0
   9134c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   91350:	4b10      	ldr	r3, [pc, #64]	; (91394 <cl_testharnesscommandhandler+0x12ac>)
   91352:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   91356:	f001 bb48 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
   9135a:	bf00      	nop
   9135c:	00099b21 	.word	0x00099b21
   91360:	000a86e4 	.word	0x000a86e4
   91364:	00093009 	.word	0x00093009
   91368:	00099af9 	.word	0x00099af9
   9136c:	00099b0d 	.word	0x00099b0d
   91370:	00099a45 	.word	0x00099a45
   91374:	00099aa9 	.word	0x00099aa9
   91378:	00099ac9 	.word	0x00099ac9
   9137c:	000a86ec 	.word	0x000a86ec
   91380:	000a86f8 	.word	0x000a86f8
   91384:	000a8704 	.word	0x000a8704
   91388:	000a8714 	.word	0x000a8714
   9138c:	000a8724 	.word	0x000a8724
   91390:	000a8730 	.word	0x000a8730
   91394:	000a873c 	.word	0x000a873c
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   91398:	4bb2      	ldr	r3, [pc, #712]	; (91664 <cl_testharnesscommandhandler+0x157c>)
   9139a:	2201      	movs	r2, #1
   9139c:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   9139e:	2005      	movs	r0, #5
   913a0:	4bb1      	ldr	r3, [pc, #708]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913a2:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   913a4:	2008      	movs	r0, #8
   913a6:	4bb0      	ldr	r3, [pc, #704]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913a8:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   913aa:	200a      	movs	r0, #10
   913ac:	4bae      	ldr	r3, [pc, #696]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913ae:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   913b0:	200b      	movs	r0, #11
   913b2:	4bad      	ldr	r3, [pc, #692]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913b4:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   913b6:	200c      	movs	r0, #12
   913b8:	4bab      	ldr	r3, [pc, #684]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913ba:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   913bc:	2009      	movs	r0, #9
   913be:	4baa      	ldr	r3, [pc, #680]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913c0:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   913c2:	2006      	movs	r0, #6
   913c4:	4ba8      	ldr	r3, [pc, #672]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913c6:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   913c8:	2007      	movs	r0, #7
   913ca:	4ba7      	ldr	r3, [pc, #668]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   913cc:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   913ce:	2001      	movs	r0, #1
   913d0:	4ba6      	ldr	r3, [pc, #664]	; (9166c <cl_testharnesscommandhandler+0x1584>)
   913d2:	4798      	blx	r3
   913d4:	4603      	mov	r3, r0
   913d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   913da:	2002      	movs	r0, #2
   913dc:	4ba3      	ldr	r3, [pc, #652]	; (9166c <cl_testharnesscommandhandler+0x1584>)
   913de:	4798      	blx	r3
   913e0:	4603      	mov	r3, r0
   913e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   913e6:	4ba2      	ldr	r3, [pc, #648]	; (91670 <cl_testharnesscommandhandler+0x1588>)
   913e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   913ec:	f001 bafd 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   913f0:	4b9c      	ldr	r3, [pc, #624]	; (91664 <cl_testharnesscommandhandler+0x157c>)
   913f2:	2200      	movs	r2, #0
   913f4:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   913f6:	4b9f      	ldr	r3, [pc, #636]	; (91674 <cl_testharnesscommandhandler+0x158c>)
   913f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   913fc:	2001      	movs	r0, #1
   913fe:	4b9e      	ldr	r3, [pc, #632]	; (91678 <cl_testharnesscommandhandler+0x1590>)
   91400:	4798      	blx	r3
   91402:	4603      	mov	r3, r0
   91404:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   91408:	2002      	movs	r0, #2
   9140a:	4b9b      	ldr	r3, [pc, #620]	; (91678 <cl_testharnesscommandhandler+0x1590>)
   9140c:	4798      	blx	r3
   9140e:	4603      	mov	r3, r0
   91410:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   91414:	4b93      	ldr	r3, [pc, #588]	; (91664 <cl_testharnesscommandhandler+0x157c>)
   91416:	2200      	movs	r2, #0
   91418:	701a      	strb	r2, [r3, #0]
		break;
   9141a:	f001 bae6 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   9141e:	4b97      	ldr	r3, [pc, #604]	; (9167c <cl_testharnesscommandhandler+0x1594>)
   91420:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   91424:	2005      	movs	r0, #5
   91426:	4b96      	ldr	r3, [pc, #600]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91428:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   9142a:	2008      	movs	r0, #8
   9142c:	4b94      	ldr	r3, [pc, #592]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   9142e:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   91430:	200a      	movs	r0, #10
   91432:	4b93      	ldr	r3, [pc, #588]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91434:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   91436:	200b      	movs	r0, #11
   91438:	4b91      	ldr	r3, [pc, #580]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   9143a:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   9143c:	200c      	movs	r0, #12
   9143e:	4b90      	ldr	r3, [pc, #576]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91440:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   91442:	2009      	movs	r0, #9
   91444:	4b8e      	ldr	r3, [pc, #568]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91446:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   91448:	2006      	movs	r0, #6
   9144a:	4b8d      	ldr	r3, [pc, #564]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   9144c:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   9144e:	2007      	movs	r0, #7
   91450:	4b8b      	ldr	r3, [pc, #556]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91452:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   91454:	2001      	movs	r0, #1
   91456:	4b88      	ldr	r3, [pc, #544]	; (91678 <cl_testharnesscommandhandler+0x1590>)
   91458:	4798      	blx	r3
   9145a:	4603      	mov	r3, r0
   9145c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   91460:	2002      	movs	r0, #2
   91462:	4b85      	ldr	r3, [pc, #532]	; (91678 <cl_testharnesscommandhandler+0x1590>)
   91464:	4798      	blx	r3
   91466:	4603      	mov	r3, r0
   91468:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   9146c:	4b7d      	ldr	r3, [pc, #500]	; (91664 <cl_testharnesscommandhandler+0x157c>)
   9146e:	2200      	movs	r2, #0
   91470:	701a      	strb	r2, [r3, #0]
					break;
   91472:	f001 baba 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   91476:	4b83      	ldr	r3, [pc, #524]	; (91684 <cl_testharnesscommandhandler+0x159c>)
   91478:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   9147c:	4b82      	ldr	r3, [pc, #520]	; (91688 <cl_testharnesscommandhandler+0x15a0>)
   9147e:	2205      	movs	r2, #5
   91480:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   91482:	4b78      	ldr	r3, [pc, #480]	; (91664 <cl_testharnesscommandhandler+0x157c>)
   91484:	2200      	movs	r2, #0
   91486:	701a      	strb	r2, [r3, #0]
			break;
   91488:	f001 baaf 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   9148c:	f44f 6010 	mov.w	r0, #2304	; 0x900
   91490:	4b7e      	ldr	r3, [pc, #504]	; (9168c <cl_testharnesscommandhandler+0x15a4>)
   91492:	4798      	blx	r3
			
			break;
   91494:	f001 baa9 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   91498:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   9149c:	4b7b      	ldr	r3, [pc, #492]	; (9168c <cl_testharnesscommandhandler+0x15a4>)
   9149e:	4798      	blx	r3
			break;
   914a0:	f001 baa3 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   914a4:	2064      	movs	r0, #100	; 0x64
   914a6:	4b7a      	ldr	r3, [pc, #488]	; (91690 <cl_testharnesscommandhandler+0x15a8>)
   914a8:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   914aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   914ae:	2b02      	cmp	r3, #2
   914b0:	d104      	bne.n	914bc <cl_testharnesscommandhandler+0x13d4>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   914b2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   914b6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   914ba:	e00b      	b.n	914d4 <cl_testharnesscommandhandler+0x13ec>
				}
				else if(TestMsg.datasize == 3)
   914bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   914c0:	2b03      	cmp	r3, #3
   914c2:	d107      	bne.n	914d4 <cl_testharnesscommandhandler+0x13ec>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   914c4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   914c8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   914cc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   914d0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   914d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   914d8:	4a6e      	ldr	r2, [pc, #440]	; (91694 <cl_testharnesscommandhandler+0x15ac>)
   914da:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   914dc:	4b6d      	ldr	r3, [pc, #436]	; (91694 <cl_testharnesscommandhandler+0x15ac>)
   914de:	681b      	ldr	r3, [r3, #0]
   914e0:	4618      	mov	r0, r3
   914e2:	4b6a      	ldr	r3, [pc, #424]	; (9168c <cl_testharnesscommandhandler+0x15a4>)
   914e4:	4798      	blx	r3
			break;
   914e6:	f001 ba80 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   914ea:	4b6b      	ldr	r3, [pc, #428]	; (91698 <cl_testharnesscommandhandler+0x15b0>)
   914ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   914f0:	2004      	movs	r0, #4
   914f2:	4b63      	ldr	r3, [pc, #396]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   914f4:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   914f6:	2032      	movs	r0, #50	; 0x32
   914f8:	4b65      	ldr	r3, [pc, #404]	; (91690 <cl_testharnesscommandhandler+0x15a8>)
   914fa:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   914fc:	2004      	movs	r0, #4
   914fe:	4b5a      	ldr	r3, [pc, #360]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   91500:	4798      	blx	r3
						cl_wait(50);
   91502:	2032      	movs	r0, #50	; 0x32
   91504:	4b62      	ldr	r3, [pc, #392]	; (91690 <cl_testharnesscommandhandler+0x15a8>)
   91506:	4798      	blx	r3
			break;
   91508:	f001 ba6f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   9150c:	4b63      	ldr	r3, [pc, #396]	; (9169c <cl_testharnesscommandhandler+0x15b4>)
   9150e:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   91510:	4b63      	ldr	r3, [pc, #396]	; (916a0 <cl_testharnesscommandhandler+0x15b8>)
   91512:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   91516:	f001 ba68 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   9151a:	2300      	movs	r3, #0
   9151c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   91520:	e008      	b.n	91534 <cl_testharnesscommandhandler+0x144c>
			{
							cl_indata.word = count1;
   91522:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   91526:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   9152a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   9152e:	3301      	adds	r3, #1
   91530:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   91534:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   91538:	2b0f      	cmp	r3, #15
   9153a:	d9f2      	bls.n	91522 <cl_testharnesscommandhandler+0x143a>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   9153c:	f001 ba55 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   91540:	4b58      	ldr	r3, [pc, #352]	; (916a4 <cl_testharnesscommandhandler+0x15bc>)
   91542:	2201      	movs	r2, #1
   91544:	701a      	strb	r2, [r3, #0]
			break;
   91546:	f001 ba50 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   9154a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9154e:	2b01      	cmp	r3, #1
   91550:	d107      	bne.n	91562 <cl_testharnesscommandhandler+0x147a>
				{
					Current_sense_trigger = true;
   91552:	4b55      	ldr	r3, [pc, #340]	; (916a8 <cl_testharnesscommandhandler+0x15c0>)
   91554:	2201      	movs	r2, #1
   91556:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   91558:	4b54      	ldr	r3, [pc, #336]	; (916ac <cl_testharnesscommandhandler+0x15c4>)
   9155a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9155e:	f001 ba44 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   91562:	4b51      	ldr	r3, [pc, #324]	; (916a8 <cl_testharnesscommandhandler+0x15c0>)
   91564:	2200      	movs	r2, #0
   91566:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   91568:	4b51      	ldr	r3, [pc, #324]	; (916b0 <cl_testharnesscommandhandler+0x15c8>)
   9156a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9156e:	f001 ba3c 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   91572:	4b50      	ldr	r3, [pc, #320]	; (916b4 <cl_testharnesscommandhandler+0x15cc>)
   91574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   91578:	2207      	movs	r2, #7
   9157a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9157e:	2018      	movs	r0, #24
   91580:	4b4d      	ldr	r3, [pc, #308]	; (916b8 <cl_testharnesscommandhandler+0x15d0>)
   91582:	4798      	blx	r3
   91584:	4603      	mov	r3, r0
   91586:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   9158a:	f001 ba2e 	b.w	929ea <cl_testharnesscommandhandler+0x2902>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   9158e:	2004      	movs	r0, #4
   91590:	4b3b      	ldr	r3, [pc, #236]	; (91680 <cl_testharnesscommandhandler+0x1598>)
   91592:	4798      	blx	r3
							cl_wait(50);
   91594:	2032      	movs	r0, #50	; 0x32
   91596:	4b3e      	ldr	r3, [pc, #248]	; (91690 <cl_testharnesscommandhandler+0x15a8>)
   91598:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   9159a:	2004      	movs	r0, #4
   9159c:	4b32      	ldr	r3, [pc, #200]	; (91668 <cl_testharnesscommandhandler+0x1580>)
   9159e:	4798      	blx	r3
						break;
   915a0:	f001 ba23 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   915a4:	4b45      	ldr	r3, [pc, #276]	; (916bc <cl_testharnesscommandhandler+0x15d4>)
   915a6:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   915a8:	f001 ba1f 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   915ac:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   915b0:	2b01      	cmp	r3, #1
   915b2:	d107      	bne.n	915c4 <cl_testharnesscommandhandler+0x14dc>
				{
						gflow_en = true;
   915b4:	4b42      	ldr	r3, [pc, #264]	; (916c0 <cl_testharnesscommandhandler+0x15d8>)
   915b6:	2201      	movs	r2, #1
   915b8:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   915ba:	4b42      	ldr	r3, [pc, #264]	; (916c4 <cl_testharnesscommandhandler+0x15dc>)
   915bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   915c0:	f001 ba13 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   915c4:	4b3e      	ldr	r3, [pc, #248]	; (916c0 <cl_testharnesscommandhandler+0x15d8>)
   915c6:	2200      	movs	r2, #0
   915c8:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   915ca:	4b3f      	ldr	r3, [pc, #252]	; (916c8 <cl_testharnesscommandhandler+0x15e0>)
   915cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   915d0:	f001 ba0b 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   915d4:	4b3d      	ldr	r3, [pc, #244]	; (916cc <cl_testharnesscommandhandler+0x15e4>)
   915d6:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   915d8:	f001 ba07 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propo_ACIDrc( TestMsg.data.byte[1]);
   915dc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   915e0:	b29b      	uxth	r3, r3
   915e2:	4618      	mov	r0, r3
   915e4:	4b3a      	ldr	r3, [pc, #232]	; (916d0 <cl_testharnesscommandhandler+0x15e8>)
   915e6:	4798      	blx	r3
		break;
   915e8:	f001 b9ff 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   915ec:	4b39      	ldr	r3, [pc, #228]	; (916d4 <cl_testharnesscommandhandler+0x15ec>)
   915ee:	2200      	movs	r2, #0
   915f0:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   915f2:	2300      	movs	r3, #0
   915f4:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   915f8:	4b37      	ldr	r3, [pc, #220]	; (916d8 <cl_testharnesscommandhandler+0x15f0>)
   915fa:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   915fc:	f001 b9f5 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_STOP_PROPO:
			cl_wait(100);
   91600:	2064      	movs	r0, #100	; 0x64
   91602:	4b23      	ldr	r3, [pc, #140]	; (91690 <cl_testharnesscommandhandler+0x15a8>)
   91604:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   91606:	4b35      	ldr	r3, [pc, #212]	; (916dc <cl_testharnesscommandhandler+0x15f4>)
   91608:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   9160a:	f001 b9ee 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   9160e:	4b34      	ldr	r3, [pc, #208]	; (916e0 <cl_testharnesscommandhandler+0x15f8>)
   91610:	4798      	blx	r3
		break;
   91612:	f001 b9ea 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   91616:	4b33      	ldr	r3, [pc, #204]	; (916e4 <cl_testharnesscommandhandler+0x15fc>)
   91618:	4798      	blx	r3
		break;
   9161a:	f001 b9e6 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   9161e:	4b32      	ldr	r3, [pc, #200]	; (916e8 <cl_testharnesscommandhandler+0x1600>)
   91620:	4798      	blx	r3
		 sv_prop_stopmixing();
   91622:	4b2e      	ldr	r3, [pc, #184]	; (916dc <cl_testharnesscommandhandler+0x15f4>)
   91624:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   91626:	f001 b9e0 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   9162a:	4b30      	ldr	r3, [pc, #192]	; (916ec <cl_testharnesscommandhandler+0x1604>)
   9162c:	4798      	blx	r3
		 sv_prop_stopmixing();
   9162e:	4b2b      	ldr	r3, [pc, #172]	; (916dc <cl_testharnesscommandhandler+0x15f4>)
   91630:	4798      	blx	r3
		break;
   91632:	f001 b9da 	b.w	929ea <cl_testharnesscommandhandler+0x2902>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   91636:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9163a:	2b02      	cmp	r3, #2
   9163c:	d104      	bne.n	91648 <cl_testharnesscommandhandler+0x1560>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   9163e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91642:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91646:	e078      	b.n	9173a <cl_testharnesscommandhandler+0x1652>
						}
						else if(TestMsg.datasize == 3)
   91648:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9164c:	2b03      	cmp	r3, #3
   9164e:	d14f      	bne.n	916f0 <cl_testharnesscommandhandler+0x1608>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91650:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91654:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91658:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9165c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91660:	e06b      	b.n	9173a <cl_testharnesscommandhandler+0x1652>
   91662:	bf00      	nop
   91664:	20071a57 	.word	0x20071a57
   91668:	00099ac9 	.word	0x00099ac9
   9166c:	00099a45 	.word	0x00099a45
   91670:	000a8748 	.word	0x000a8748
   91674:	000a8754 	.word	0x000a8754
   91678:	00099a09 	.word	0x00099a09
   9167c:	000a8760 	.word	0x000a8760
   91680:	00099aa9 	.word	0x00099aa9
   91684:	000a876c 	.word	0x000a876c
   91688:	20071c94 	.word	0x20071c94
   9168c:	00099b89 	.word	0x00099b89
   91690:	00093009 	.word	0x00093009
   91694:	20070538 	.word	0x20070538
   91698:	000a8770 	.word	0x000a8770
   9169c:	00099c09 	.word	0x00099c09
   916a0:	000a8688 	.word	0x000a8688
   916a4:	20071a56 	.word	0x20071a56
   916a8:	20070a2a 	.word	0x20070a2a
   916ac:	000a8778 	.word	0x000a8778
   916b0:	000a8784 	.word	0x000a8784
   916b4:	000a8790 	.word	0x000a8790
   916b8:	0009b805 	.word	0x0009b805
   916bc:	00099e71 	.word	0x00099e71
   916c0:	20071a59 	.word	0x20071a59
   916c4:	000a8798 	.word	0x000a8798
   916c8:	000a87a0 	.word	0x000a87a0
   916cc:	00099e51 	.word	0x00099e51
   916d0:	00099e85 	.word	0x00099e85
   916d4:	20071a54 	.word	0x20071a54
   916d8:	00099e25 	.word	0x00099e25
   916dc:	00099ea9 	.word	0x00099ea9
   916e0:	00099c55 	.word	0x00099c55
   916e4:	00099c7d 	.word	0x00099c7d
   916e8:	00099c1d 	.word	0x00099c1d
   916ec:	00099c39 	.word	0x00099c39
							
						}
							else if(TestMsg.datasize == 4)
   916f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   916f4:	2b04      	cmp	r3, #4
   916f6:	d10c      	bne.n	91712 <cl_testharnesscommandhandler+0x162a>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   916f8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   916fc:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   91700:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91704:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   91708:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9170c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91710:	e013      	b.n	9173a <cl_testharnesscommandhandler+0x1652>
							
						}
							else if(TestMsg.datasize == 5)
   91712:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91716:	2b05      	cmp	r3, #5
   91718:	d10f      	bne.n	9173a <cl_testharnesscommandhandler+0x1652>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   9171a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9171e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   91722:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91726:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   9172a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9172e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   91732:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   91736:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   9173a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   9173e:	2b0c      	cmp	r3, #12
   91740:	d028      	beq.n	91794 <cl_testharnesscommandhandler+0x16ac>
   91742:	2b0c      	cmp	r3, #12
   91744:	dc11      	bgt.n	9176a <cl_testharnesscommandhandler+0x1682>
   91746:	2b05      	cmp	r3, #5
   91748:	f000 83fe 	beq.w	91f48 <cl_testharnesscommandhandler+0x1e60>
   9174c:	2b05      	cmp	r3, #5
   9174e:	dc04      	bgt.n	9175a <cl_testharnesscommandhandler+0x1672>
   91750:	2b01      	cmp	r3, #1
   91752:	f000 8365 	beq.w	91e20 <cl_testharnesscommandhandler+0x1d38>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91756:	f000 be1d 	b.w	92394 <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   9175a:	2b06      	cmp	r3, #6
   9175c:	f000 8497 	beq.w	9208e <cl_testharnesscommandhandler+0x1fa6>
   91760:	2b07      	cmp	r3, #7
   91762:	f000 8553 	beq.w	9220c <cl_testharnesscommandhandler+0x2124>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91766:	f000 be15 	b.w	92394 <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   9176a:	2b11      	cmp	r3, #17
   9176c:	f000 820c 	beq.w	91b88 <cl_testharnesscommandhandler+0x1aa0>
   91770:	2b11      	cmp	r3, #17
   91772:	dc07      	bgt.n	91784 <cl_testharnesscommandhandler+0x169c>
   91774:	2b0d      	cmp	r3, #13
   91776:	f000 80b1 	beq.w	918dc <cl_testharnesscommandhandler+0x17f4>
   9177a:	2b0e      	cmp	r3, #14
   9177c:	f000 814e 	beq.w	91a1c <cl_testharnesscommandhandler+0x1934>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91780:	f000 be08 	b.w	92394 <cl_testharnesscommandhandler+0x22ac>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   91784:	2b12      	cmp	r3, #18
   91786:	f000 8298 	beq.w	91cba <cl_testharnesscommandhandler+0x1bd2>
   9178a:	2bff      	cmp	r3, #255	; 0xff
   9178c:	f000 85e1 	beq.w	92352 <cl_testharnesscommandhandler+0x226a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91790:	f000 be00 	b.w	92394 <cl_testharnesscommandhandler+0x22ac>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   91794:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91798:	2b01      	cmp	r3, #1
   9179a:	d11f      	bne.n	917dc <cl_testharnesscommandhandler+0x16f4>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   9179c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   917a0:	4bc4      	ldr	r3, [pc, #784]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   917a2:	4610      	mov	r0, r2
   917a4:	4798      	blx	r3
   917a6:	4602      	mov	r2, r0
   917a8:	4bc3      	ldr	r3, [pc, #780]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   917aa:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   917ac:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   917b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   917b4:	220a      	movs	r2, #10
   917b6:	49c1      	ldr	r1, [pc, #772]	; (91abc <cl_testharnesscommandhandler+0x19d4>)
   917b8:	2018      	movs	r0, #24
   917ba:	4bc1      	ldr	r3, [pc, #772]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   917bc:	4798      	blx	r3
   917be:	4603      	mov	r3, r0
   917c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   917c4:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   917c8:	2202      	movs	r2, #2
   917ca:	4619      	mov	r1, r3
   917cc:	2019      	movs	r0, #25
   917ce:	4bbc      	ldr	r3, [pc, #752]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   917d0:	4798      	blx	r3
   917d2:	4603      	mov	r3, r0
   917d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   917d8:	f000 bdcb 	b.w	92372 <cl_testharnesscommandhandler+0x228a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   917dc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   917e0:	2b00      	cmp	r3, #0
   917e2:	d126      	bne.n	91832 <cl_testharnesscommandhandler+0x174a>
							{
								int16_t temp=0,temp1=0;
   917e4:	2300      	movs	r3, #0
   917e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   917ea:	2300      	movs	r3, #0
   917ec:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   917f0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   917f4:	4baf      	ldr	r3, [pc, #700]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   917f6:	4610      	mov	r0, r2
   917f8:	4798      	blx	r3
   917fa:	4602      	mov	r2, r0
   917fc:	4bae      	ldr	r3, [pc, #696]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   917fe:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91800:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91804:	b21b      	sxth	r3, r3
   91806:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   9180a:	2209      	movs	r2, #9
   9180c:	49ad      	ldr	r1, [pc, #692]	; (91ac4 <cl_testharnesscommandhandler+0x19dc>)
   9180e:	2018      	movs	r0, #24
   91810:	4bab      	ldr	r3, [pc, #684]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91812:	4798      	blx	r3
   91814:	4603      	mov	r3, r0
   91816:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9181a:	f107 0348 	add.w	r3, r7, #72	; 0x48
   9181e:	2202      	movs	r2, #2
   91820:	4619      	mov	r1, r3
   91822:	2019      	movs	r0, #25
   91824:	4ba6      	ldr	r3, [pc, #664]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91826:	4798      	blx	r3
   91828:	4603      	mov	r3, r0
   9182a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9182e:	f000 bda0 	b.w	92372 <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   91832:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91836:	2b02      	cmp	r3, #2
   91838:	d128      	bne.n	9188c <cl_testharnesscommandhandler+0x17a4>
							{
								int16_t temp=0,temp1=0;
   9183a:	2300      	movs	r3, #0
   9183c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   91840:	2300      	movs	r3, #0
   91842:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   91846:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9184a:	b21a      	sxth	r2, r3
   9184c:	4b9e      	ldr	r3, [pc, #632]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   9184e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   91852:	4b9d      	ldr	r3, [pc, #628]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   91854:	2201      	movs	r2, #1
   91856:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9185a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9185e:	b21b      	sxth	r3, r3
   91860:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   91864:	2209      	movs	r2, #9
   91866:	4997      	ldr	r1, [pc, #604]	; (91ac4 <cl_testharnesscommandhandler+0x19dc>)
   91868:	2018      	movs	r0, #24
   9186a:	4b95      	ldr	r3, [pc, #596]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   9186c:	4798      	blx	r3
   9186e:	4603      	mov	r3, r0
   91870:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91874:	f107 0346 	add.w	r3, r7, #70	; 0x46
   91878:	2202      	movs	r2, #2
   9187a:	4619      	mov	r1, r3
   9187c:	2019      	movs	r0, #25
   9187e:	4b90      	ldr	r3, [pc, #576]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91880:	4798      	blx	r3
   91882:	4603      	mov	r3, r0
   91884:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91888:	f000 bd73 	b.w	92372 <cl_testharnesscommandhandler+0x228a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9188c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91890:	2b03      	cmp	r3, #3
   91892:	f040 856e 	bne.w	92372 <cl_testharnesscommandhandler+0x228a>
							{
								int16_t temp=0,temp1=0;
   91896:	2300      	movs	r3, #0
   91898:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   9189c:	2300      	movs	r3, #0
   9189e:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   918a2:	4b89      	ldr	r3, [pc, #548]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   918a4:	2200      	movs	r2, #0
   918a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   918aa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   918ae:	b21b      	sxth	r3, r3
   918b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   918b4:	2205      	movs	r2, #5
   918b6:	4985      	ldr	r1, [pc, #532]	; (91acc <cl_testharnesscommandhandler+0x19e4>)
   918b8:	2018      	movs	r0, #24
   918ba:	4b81      	ldr	r3, [pc, #516]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   918bc:	4798      	blx	r3
   918be:	4603      	mov	r3, r0
   918c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   918c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   918c8:	2202      	movs	r2, #2
   918ca:	4619      	mov	r1, r3
   918cc:	2019      	movs	r0, #25
   918ce:	4b7c      	ldr	r3, [pc, #496]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   918d0:	4798      	blx	r3
   918d2:	4603      	mov	r3, r0
   918d4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   918d8:	f000 bd4b 	b.w	92372 <cl_testharnesscommandhandler+0x228a>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   918dc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   918e0:	2b01      	cmp	r3, #1
   918e2:	d11f      	bne.n	91924 <cl_testharnesscommandhandler+0x183c>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   918e4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   918e8:	4b72      	ldr	r3, [pc, #456]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   918ea:	4610      	mov	r0, r2
   918ec:	4798      	blx	r3
   918ee:	4602      	mov	r2, r0
   918f0:	4b71      	ldr	r3, [pc, #452]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   918f2:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   918f4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   918f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   918fc:	220a      	movs	r2, #10
   918fe:	4974      	ldr	r1, [pc, #464]	; (91ad0 <cl_testharnesscommandhandler+0x19e8>)
   91900:	2018      	movs	r0, #24
   91902:	4b6f      	ldr	r3, [pc, #444]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91904:	4798      	blx	r3
   91906:	4603      	mov	r3, r0
   91908:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9190c:	f107 0342 	add.w	r3, r7, #66	; 0x42
   91910:	2202      	movs	r2, #2
   91912:	4619      	mov	r1, r3
   91914:	2019      	movs	r0, #25
   91916:	4b6a      	ldr	r3, [pc, #424]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91918:	4798      	blx	r3
   9191a:	4603      	mov	r3, r0
   9191c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91920:	f000 bd29 	b.w	92376 <cl_testharnesscommandhandler+0x228e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   91924:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91928:	2b00      	cmp	r3, #0
   9192a:	d126      	bne.n	9197a <cl_testharnesscommandhandler+0x1892>
							{
								int16_t temp=0,temp1=0;
   9192c:	2300      	movs	r3, #0
   9192e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   91932:	2300      	movs	r3, #0
   91934:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   91938:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9193c:	4b5d      	ldr	r3, [pc, #372]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   9193e:	4610      	mov	r0, r2
   91940:	4798      	blx	r3
   91942:	4602      	mov	r2, r0
   91944:	4b5c      	ldr	r3, [pc, #368]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   91946:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91948:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9194c:	b21b      	sxth	r3, r3
   9194e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   91952:	2209      	movs	r2, #9
   91954:	495f      	ldr	r1, [pc, #380]	; (91ad4 <cl_testharnesscommandhandler+0x19ec>)
   91956:	2018      	movs	r0, #24
   91958:	4b59      	ldr	r3, [pc, #356]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   9195a:	4798      	blx	r3
   9195c:	4603      	mov	r3, r0
   9195e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91962:	f107 0340 	add.w	r3, r7, #64	; 0x40
   91966:	2202      	movs	r2, #2
   91968:	4619      	mov	r1, r3
   9196a:	2019      	movs	r0, #25
   9196c:	4b54      	ldr	r3, [pc, #336]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   9196e:	4798      	blx	r3
   91970:	4603      	mov	r3, r0
   91972:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91976:	f000 bcfe 	b.w	92376 <cl_testharnesscommandhandler+0x228e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   9197a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9197e:	2b02      	cmp	r3, #2
   91980:	d126      	bne.n	919d0 <cl_testharnesscommandhandler+0x18e8>
							{
								int16_t temp=0,temp1=0;
   91982:	2300      	movs	r3, #0
   91984:	87fb      	strh	r3, [r7, #62]	; 0x3e
   91986:	2300      	movs	r3, #0
   91988:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   9198c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91990:	b21a      	sxth	r2, r3
   91992:	4b4d      	ldr	r3, [pc, #308]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   91994:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   91998:	4b4b      	ldr	r3, [pc, #300]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   9199a:	2201      	movs	r2, #1
   9199c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   919a0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   919a4:	b21b      	sxth	r3, r3
   919a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   919a8:	2209      	movs	r2, #9
   919aa:	494b      	ldr	r1, [pc, #300]	; (91ad8 <cl_testharnesscommandhandler+0x19f0>)
   919ac:	2018      	movs	r0, #24
   919ae:	4b44      	ldr	r3, [pc, #272]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   919b0:	4798      	blx	r3
   919b2:	4603      	mov	r3, r0
   919b4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   919b8:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   919bc:	2202      	movs	r2, #2
   919be:	4619      	mov	r1, r3
   919c0:	2019      	movs	r0, #25
   919c2:	4b3f      	ldr	r3, [pc, #252]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   919c4:	4798      	blx	r3
   919c6:	4603      	mov	r3, r0
   919c8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   919cc:	f000 bcd3 	b.w	92376 <cl_testharnesscommandhandler+0x228e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   919d0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   919d4:	2b03      	cmp	r3, #3
   919d6:	f040 84ce 	bne.w	92376 <cl_testharnesscommandhandler+0x228e>
							{
								int16_t temp=0,temp1=0;
   919da:	2300      	movs	r3, #0
   919dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
   919de:	2300      	movs	r3, #0
   919e0:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   919e4:	4b38      	ldr	r3, [pc, #224]	; (91ac8 <cl_testharnesscommandhandler+0x19e0>)
   919e6:	2200      	movs	r2, #0
   919e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   919ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   919f0:	b21b      	sxth	r3, r3
   919f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   919f4:	2205      	movs	r2, #5
   919f6:	4939      	ldr	r1, [pc, #228]	; (91adc <cl_testharnesscommandhandler+0x19f4>)
   919f8:	2018      	movs	r0, #24
   919fa:	4b31      	ldr	r3, [pc, #196]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   919fc:	4798      	blx	r3
   919fe:	4603      	mov	r3, r0
   91a00:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91a04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   91a08:	2202      	movs	r2, #2
   91a0a:	4619      	mov	r1, r3
   91a0c:	2019      	movs	r0, #25
   91a0e:	4b2c      	ldr	r3, [pc, #176]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91a10:	4798      	blx	r3
   91a12:	4603      	mov	r3, r0
   91a14:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91a18:	f000 bcad 	b.w	92376 <cl_testharnesscommandhandler+0x228e>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   91a1c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91a20:	2b01      	cmp	r3, #1
   91a22:	d11e      	bne.n	91a62 <cl_testharnesscommandhandler+0x197a>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   91a24:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91a28:	4b22      	ldr	r3, [pc, #136]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   91a2a:	4610      	mov	r0, r2
   91a2c:	4798      	blx	r3
   91a2e:	4602      	mov	r2, r0
   91a30:	4b21      	ldr	r3, [pc, #132]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   91a32:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91a34:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a38:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   91a3a:	2208      	movs	r2, #8
   91a3c:	4928      	ldr	r1, [pc, #160]	; (91ae0 <cl_testharnesscommandhandler+0x19f8>)
   91a3e:	2018      	movs	r0, #24
   91a40:	4b1f      	ldr	r3, [pc, #124]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91a42:	4798      	blx	r3
   91a44:	4603      	mov	r3, r0
   91a46:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   91a4a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   91a4e:	2202      	movs	r2, #2
   91a50:	4619      	mov	r1, r3
   91a52:	2019      	movs	r0, #25
   91a54:	4b1a      	ldr	r3, [pc, #104]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91a56:	4798      	blx	r3
   91a58:	4603      	mov	r3, r0
   91a5a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91a5e:	f000 bc8c 	b.w	9237a <cl_testharnesscommandhandler+0x2292>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
							}
							else if (cl_indata.bytearray[2]== 0)
   91a62:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91a66:	2b00      	cmp	r3, #0
   91a68:	d13e      	bne.n	91ae8 <cl_testharnesscommandhandler+0x1a00>
							{
								int16_t temp=0,temp1=0;
   91a6a:	2300      	movs	r3, #0
   91a6c:	873b      	strh	r3, [r7, #56]	; 0x38
   91a6e:	2300      	movs	r3, #0
   91a70:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   91a74:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91a78:	4b0e      	ldr	r3, [pc, #56]	; (91ab4 <cl_testharnesscommandhandler+0x19cc>)
   91a7a:	4610      	mov	r0, r2
   91a7c:	4798      	blx	r3
   91a7e:	4602      	mov	r2, r0
   91a80:	4b0d      	ldr	r3, [pc, #52]	; (91ab8 <cl_testharnesscommandhandler+0x19d0>)
   91a82:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91a84:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a88:	b21b      	sxth	r3, r3
   91a8a:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   91a8c:	2207      	movs	r2, #7
   91a8e:	4915      	ldr	r1, [pc, #84]	; (91ae4 <cl_testharnesscommandhandler+0x19fc>)
   91a90:	2018      	movs	r0, #24
   91a92:	4b0b      	ldr	r3, [pc, #44]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91a94:	4798      	blx	r3
   91a96:	4603      	mov	r3, r0
   91a98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   91aa0:	2202      	movs	r2, #2
   91aa2:	4619      	mov	r1, r3
   91aa4:	2019      	movs	r0, #25
   91aa6:	4b06      	ldr	r3, [pc, #24]	; (91ac0 <cl_testharnesscommandhandler+0x19d8>)
   91aa8:	4798      	blx	r3
   91aaa:	4603      	mov	r3, r0
   91aac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91ab0:	f000 bc63 	b.w	9237a <cl_testharnesscommandhandler+0x2292>
   91ab4:	000a64e1 	.word	0x000a64e1
   91ab8:	200720f4 	.word	0x200720f4
   91abc:	000a87ac 	.word	0x000a87ac
   91ac0:	0009b805 	.word	0x0009b805
   91ac4:	000a87b8 	.word	0x000a87b8
   91ac8:	200725b8 	.word	0x200725b8
   91acc:	000a87c4 	.word	0x000a87c4
   91ad0:	000a87cc 	.word	0x000a87cc
   91ad4:	000a87d8 	.word	0x000a87d8
   91ad8:	000a87e4 	.word	0x000a87e4
   91adc:	000a87ec 	.word	0x000a87ec
   91ae0:	000a87f4 	.word	0x000a87f4
   91ae4:	000a8800 	.word	0x000a8800
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   91ae8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91aec:	2b02      	cmp	r3, #2
   91aee:	d126      	bne.n	91b3e <cl_testharnesscommandhandler+0x1a56>
							{
								int16_t temp=0,temp1=0;
   91af0:	2300      	movs	r3, #0
   91af2:	86fb      	strh	r3, [r7, #54]	; 0x36
   91af4:	2300      	movs	r3, #0
   91af6:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   91afa:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91afe:	b21a      	sxth	r2, r3
   91b00:	4bba      	ldr	r3, [pc, #744]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91b02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   91b06:	4bb9      	ldr	r3, [pc, #740]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91b08:	2201      	movs	r2, #1
   91b0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91b0e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91b12:	b21b      	sxth	r3, r3
   91b14:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91b16:	2209      	movs	r2, #9
   91b18:	49b5      	ldr	r1, [pc, #724]	; (91df0 <cl_testharnesscommandhandler+0x1d08>)
   91b1a:	2018      	movs	r0, #24
   91b1c:	4bb5      	ldr	r3, [pc, #724]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91b1e:	4798      	blx	r3
   91b20:	4603      	mov	r3, r0
   91b22:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91b26:	f107 0336 	add.w	r3, r7, #54	; 0x36
   91b2a:	2202      	movs	r2, #2
   91b2c:	4619      	mov	r1, r3
   91b2e:	2019      	movs	r0, #25
   91b30:	4bb0      	ldr	r3, [pc, #704]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91b32:	4798      	blx	r3
   91b34:	4603      	mov	r3, r0
   91b36:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91b3a:	f000 bc1e 	b.w	9237a <cl_testharnesscommandhandler+0x2292>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91b3e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91b42:	2b03      	cmp	r3, #3
   91b44:	f040 8419 	bne.w	9237a <cl_testharnesscommandhandler+0x2292>
							{
								int16_t temp=0,temp1=0;
   91b48:	2300      	movs	r3, #0
   91b4a:	86bb      	strh	r3, [r7, #52]	; 0x34
   91b4c:	2300      	movs	r3, #0
   91b4e:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   91b52:	4ba6      	ldr	r3, [pc, #664]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91b54:	2200      	movs	r2, #0
   91b56:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91b5a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91b5e:	b21b      	sxth	r3, r3
   91b60:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   91b62:	2205      	movs	r2, #5
   91b64:	49a4      	ldr	r1, [pc, #656]	; (91df8 <cl_testharnesscommandhandler+0x1d10>)
   91b66:	2018      	movs	r0, #24
   91b68:	4ba2      	ldr	r3, [pc, #648]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91b6a:	4798      	blx	r3
   91b6c:	4603      	mov	r3, r0
   91b6e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91b72:	f107 0334 	add.w	r3, r7, #52	; 0x34
   91b76:	2202      	movs	r2, #2
   91b78:	4619      	mov	r1, r3
   91b7a:	2019      	movs	r0, #25
   91b7c:	4b9d      	ldr	r3, [pc, #628]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91b7e:	4798      	blx	r3
   91b80:	4603      	mov	r3, r0
   91b82:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91b86:	e3f8      	b.n	9237a <cl_testharnesscommandhandler+0x2292>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   91b88:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91b8c:	2b01      	cmp	r3, #1
   91b8e:	d11d      	bne.n	91bcc <cl_testharnesscommandhandler+0x1ae4>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   91b90:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91b94:	4b99      	ldr	r3, [pc, #612]	; (91dfc <cl_testharnesscommandhandler+0x1d14>)
   91b96:	4610      	mov	r0, r2
   91b98:	4798      	blx	r3
   91b9a:	4602      	mov	r2, r0
   91b9c:	4b98      	ldr	r3, [pc, #608]	; (91e00 <cl_testharnesscommandhandler+0x1d18>)
   91b9e:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91ba0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ba4:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   91ba6:	2208      	movs	r2, #8
   91ba8:	4996      	ldr	r1, [pc, #600]	; (91e04 <cl_testharnesscommandhandler+0x1d1c>)
   91baa:	2018      	movs	r0, #24
   91bac:	4b91      	ldr	r3, [pc, #580]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91bae:	4798      	blx	r3
   91bb0:	4603      	mov	r3, r0
   91bb2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91bb6:	f107 0332 	add.w	r3, r7, #50	; 0x32
   91bba:	2202      	movs	r2, #2
   91bbc:	4619      	mov	r1, r3
   91bbe:	2019      	movs	r0, #25
   91bc0:	4b8c      	ldr	r3, [pc, #560]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91bc2:	4798      	blx	r3
   91bc4:	4603      	mov	r3, r0
   91bc6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   91bca:	e3d8      	b.n	9237e <cl_testharnesscommandhandler+0x2296>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								}
								else if (cl_indata.bytearray[2]== 0)
   91bcc:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91bd0:	2b00      	cmp	r3, #0
   91bd2:	d124      	bne.n	91c1e <cl_testharnesscommandhandler+0x1b36>
								{
									int16_t temp=0,temp1=0;
   91bd4:	2300      	movs	r3, #0
   91bd6:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   91bda:	2300      	movs	r3, #0
   91bdc:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   91be0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91be4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91be8:	b29b      	uxth	r3, r3
   91bea:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   91bee:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   91bf2:	4b85      	ldr	r3, [pc, #532]	; (91e08 <cl_testharnesscommandhandler+0x1d20>)
   91bf4:	4610      	mov	r0, r2
   91bf6:	4798      	blx	r3
   91bf8:	4602      	mov	r2, r0
   91bfa:	4b81      	ldr	r3, [pc, #516]	; (91e00 <cl_testharnesscommandhandler+0x1d18>)
   91bfc:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   91bfe:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   91c02:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   91c06:	b29b      	uxth	r3, r3
   91c08:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   91c0c:	220c      	movs	r2, #12
   91c0e:	497f      	ldr	r1, [pc, #508]	; (91e0c <cl_testharnesscommandhandler+0x1d24>)
   91c10:	2018      	movs	r0, #24
   91c12:	4b78      	ldr	r3, [pc, #480]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91c14:	4798      	blx	r3
   91c16:	4603      	mov	r3, r0
   91c18:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   91c1c:	e3af      	b.n	9237e <cl_testharnesscommandhandler+0x2296>
									temp1=temp+1000;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   91c1e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91c22:	2b02      	cmp	r3, #2
   91c24:	d124      	bne.n	91c70 <cl_testharnesscommandhandler+0x1b88>
								{
									int16_t temp=0,temp1=0;
   91c26:	2300      	movs	r3, #0
   91c28:	863b      	strh	r3, [r7, #48]	; 0x30
   91c2a:	2300      	movs	r3, #0
   91c2c:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   91c30:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91c34:	b21a      	sxth	r2, r3
   91c36:	4b6d      	ldr	r3, [pc, #436]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91c38:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   91c3a:	4b6c      	ldr	r3, [pc, #432]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91c3c:	2201      	movs	r2, #1
   91c3e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   91c42:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91c46:	b21b      	sxth	r3, r3
   91c48:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91c4a:	2209      	movs	r2, #9
   91c4c:	4968      	ldr	r1, [pc, #416]	; (91df0 <cl_testharnesscommandhandler+0x1d08>)
   91c4e:	2018      	movs	r0, #24
   91c50:	4b68      	ldr	r3, [pc, #416]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91c52:	4798      	blx	r3
   91c54:	4603      	mov	r3, r0
   91c56:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
   91c5e:	2202      	movs	r2, #2
   91c60:	4619      	mov	r1, r3
   91c62:	2019      	movs	r0, #25
   91c64:	4b63      	ldr	r3, [pc, #396]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91c66:	4798      	blx	r3
   91c68:	4603      	mov	r3, r0
   91c6a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   91c6e:	e386      	b.n	9237e <cl_testharnesscommandhandler+0x2296>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   91c70:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91c74:	2b03      	cmp	r3, #3
   91c76:	f040 8382 	bne.w	9237e <cl_testharnesscommandhandler+0x2296>
								{
									int16_t temp=0,temp1=0;
   91c7a:	2300      	movs	r3, #0
   91c7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
   91c7e:	2300      	movs	r3, #0
   91c80:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   91c84:	4b59      	ldr	r3, [pc, #356]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91c86:	2200      	movs	r2, #0
   91c88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   91c8c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91c90:	b21b      	sxth	r3, r3
   91c92:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   91c94:	2209      	movs	r2, #9
   91c96:	495e      	ldr	r1, [pc, #376]	; (91e10 <cl_testharnesscommandhandler+0x1d28>)
   91c98:	2018      	movs	r0, #24
   91c9a:	4b56      	ldr	r3, [pc, #344]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91c9c:	4798      	blx	r3
   91c9e:	4603      	mov	r3, r0
   91ca0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91ca4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   91ca8:	2202      	movs	r2, #2
   91caa:	4619      	mov	r1, r3
   91cac:	2019      	movs	r0, #25
   91cae:	4b51      	ldr	r3, [pc, #324]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91cb0:	4798      	blx	r3
   91cb2:	4603      	mov	r3, r0
   91cb4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   91cb8:	e361      	b.n	9237e <cl_testharnesscommandhandler+0x2296>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   91cba:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91cbe:	2b01      	cmp	r3, #1
   91cc0:	d11d      	bne.n	91cfe <cl_testharnesscommandhandler+0x1c16>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   91cc2:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91cc6:	4b4d      	ldr	r3, [pc, #308]	; (91dfc <cl_testharnesscommandhandler+0x1d14>)
   91cc8:	4610      	mov	r0, r2
   91cca:	4798      	blx	r3
   91ccc:	4602      	mov	r2, r0
   91cce:	4b4c      	ldr	r3, [pc, #304]	; (91e00 <cl_testharnesscommandhandler+0x1d18>)
   91cd0:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91cd2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91cd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   91cd8:	2208      	movs	r2, #8
   91cda:	494e      	ldr	r1, [pc, #312]	; (91e14 <cl_testharnesscommandhandler+0x1d2c>)
   91cdc:	2018      	movs	r0, #24
   91cde:	4b45      	ldr	r3, [pc, #276]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91ce0:	4798      	blx	r3
   91ce2:	4603      	mov	r3, r0
   91ce4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   91cec:	2202      	movs	r2, #2
   91cee:	4619      	mov	r1, r3
   91cf0:	2019      	movs	r0, #25
   91cf2:	4b40      	ldr	r3, [pc, #256]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91cf4:	4798      	blx	r3
   91cf6:	4603      	mov	r3, r0
   91cf8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91cfc:	e341      	b.n	92382 <cl_testharnesscommandhandler+0x229a>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   91cfe:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91d02:	2b00      	cmp	r3, #0
   91d04:	d124      	bne.n	91d50 <cl_testharnesscommandhandler+0x1c68>
							{
								int16_t temp=0,temp1=0;
   91d06:	2300      	movs	r3, #0
   91d08:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   91d0c:	2300      	movs	r3, #0
   91d0e:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   91d12:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d16:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91d1a:	b29b      	uxth	r3, r3
   91d1c:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   91d20:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   91d24:	4b38      	ldr	r3, [pc, #224]	; (91e08 <cl_testharnesscommandhandler+0x1d20>)
   91d26:	4610      	mov	r0, r2
   91d28:	4798      	blx	r3
   91d2a:	4602      	mov	r2, r0
   91d2c:	4b34      	ldr	r3, [pc, #208]	; (91e00 <cl_testharnesscommandhandler+0x1d18>)
   91d2e:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   91d30:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   91d34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   91d38:	b29b      	uxth	r3, r3
   91d3a:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   91d3e:	220c      	movs	r2, #12
   91d40:	4935      	ldr	r1, [pc, #212]	; (91e18 <cl_testharnesscommandhandler+0x1d30>)
   91d42:	2018      	movs	r0, #24
   91d44:	4b2b      	ldr	r3, [pc, #172]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91d46:	4798      	blx	r3
   91d48:	4603      	mov	r3, r0
   91d4a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91d4e:	e318      	b.n	92382 <cl_testharnesscommandhandler+0x229a>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   91d50:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91d54:	2b02      	cmp	r3, #2
   91d56:	d124      	bne.n	91da2 <cl_testharnesscommandhandler+0x1cba>
							{
								int16_t temp=0,temp1=0;
   91d58:	2300      	movs	r3, #0
   91d5a:	857b      	strh	r3, [r7, #42]	; 0x2a
   91d5c:	2300      	movs	r3, #0
   91d5e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   91d62:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d66:	b21a      	sxth	r2, r3
   91d68:	4b20      	ldr	r3, [pc, #128]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91d6a:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   91d6c:	4b1f      	ldr	r3, [pc, #124]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91d6e:	2201      	movs	r2, #1
   91d70:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91d74:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d78:	b21b      	sxth	r3, r3
   91d7a:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91d7c:	2209      	movs	r2, #9
   91d7e:	491c      	ldr	r1, [pc, #112]	; (91df0 <cl_testharnesscommandhandler+0x1d08>)
   91d80:	2018      	movs	r0, #24
   91d82:	4b1c      	ldr	r3, [pc, #112]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91d84:	4798      	blx	r3
   91d86:	4603      	mov	r3, r0
   91d88:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91d8c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   91d90:	2202      	movs	r2, #2
   91d92:	4619      	mov	r1, r3
   91d94:	2019      	movs	r0, #25
   91d96:	4b17      	ldr	r3, [pc, #92]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91d98:	4798      	blx	r3
   91d9a:	4603      	mov	r3, r0
   91d9c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91da0:	e2ef      	b.n	92382 <cl_testharnesscommandhandler+0x229a>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91da2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91da6:	2b03      	cmp	r3, #3
   91da8:	f040 82eb 	bne.w	92382 <cl_testharnesscommandhandler+0x229a>
							{
								int16_t temp=0,temp1=0;
   91dac:	2300      	movs	r3, #0
   91dae:	853b      	strh	r3, [r7, #40]	; 0x28
   91db0:	2300      	movs	r3, #0
   91db2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   91db6:	4b0d      	ldr	r3, [pc, #52]	; (91dec <cl_testharnesscommandhandler+0x1d04>)
   91db8:	2200      	movs	r2, #0
   91dba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91dbe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91dc2:	b21b      	sxth	r3, r3
   91dc4:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   91dc6:	2209      	movs	r2, #9
   91dc8:	4914      	ldr	r1, [pc, #80]	; (91e1c <cl_testharnesscommandhandler+0x1d34>)
   91dca:	2018      	movs	r0, #24
   91dcc:	4b09      	ldr	r3, [pc, #36]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91dce:	4798      	blx	r3
   91dd0:	4603      	mov	r3, r0
   91dd2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   91dda:	2202      	movs	r2, #2
   91ddc:	4619      	mov	r1, r3
   91dde:	2019      	movs	r0, #25
   91de0:	4b04      	ldr	r3, [pc, #16]	; (91df4 <cl_testharnesscommandhandler+0x1d0c>)
   91de2:	4798      	blx	r3
   91de4:	4603      	mov	r3, r0
   91de6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91dea:	e2ca      	b.n	92382 <cl_testharnesscommandhandler+0x229a>
   91dec:	200725b8 	.word	0x200725b8
   91df0:	000a87e4 	.word	0x000a87e4
   91df4:	0009b805 	.word	0x0009b805
   91df8:	000a880c 	.word	0x000a880c
   91dfc:	000a64e1 	.word	0x000a64e1
   91e00:	200720f4 	.word	0x200720f4
   91e04:	000a8814 	.word	0x000a8814
   91e08:	000a64e9 	.word	0x000a64e9
   91e0c:	000a8820 	.word	0x000a8820
   91e10:	000a8830 	.word	0x000a8830
   91e14:	000a8838 	.word	0x000a8838
   91e18:	000a8844 	.word	0x000a8844
   91e1c:	000a8854 	.word	0x000a8854
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   91e20:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91e24:	2b01      	cmp	r3, #1
   91e26:	d11a      	bne.n	91e5e <cl_testharnesscommandhandler+0x1d76>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   91e28:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e2c:	b21a      	sxth	r2, r3
   91e2e:	4bbe      	ldr	r3, [pc, #760]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   91e30:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91e32:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e36:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   91e38:	2208      	movs	r2, #8
   91e3a:	49bc      	ldr	r1, [pc, #752]	; (9212c <cl_testharnesscommandhandler+0x2044>)
   91e3c:	2018      	movs	r0, #24
   91e3e:	4bbc      	ldr	r3, [pc, #752]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91e40:	4798      	blx	r3
   91e42:	4603      	mov	r3, r0
   91e44:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91e48:	f107 0326 	add.w	r3, r7, #38	; 0x26
   91e4c:	2202      	movs	r2, #2
   91e4e:	4619      	mov	r1, r3
   91e50:	2019      	movs	r0, #25
   91e52:	4bb7      	ldr	r3, [pc, #732]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91e54:	4798      	blx	r3
   91e56:	4603      	mov	r3, r0
   91e58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91e5c:	e293      	b.n	92386 <cl_testharnesscommandhandler+0x229e>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   91e5e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91e62:	2b00      	cmp	r3, #0
   91e64:	d120      	bne.n	91ea8 <cl_testharnesscommandhandler+0x1dc0>
							{
								
								int16_t temp=0,temp1=0;
   91e66:	2300      	movs	r3, #0
   91e68:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   91e6c:	2300      	movs	r3, #0
   91e6e:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   91e70:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e74:	b21a      	sxth	r2, r3
   91e76:	4bac      	ldr	r3, [pc, #688]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   91e78:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   91e7a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e7e:	b21b      	sxth	r3, r3
   91e80:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   91e82:	2208      	movs	r2, #8
   91e84:	49ab      	ldr	r1, [pc, #684]	; (92134 <cl_testharnesscommandhandler+0x204c>)
   91e86:	2018      	movs	r0, #24
   91e88:	4ba9      	ldr	r3, [pc, #676]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91e8a:	4798      	blx	r3
   91e8c:	4603      	mov	r3, r0
   91e8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   91e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
   91e96:	2202      	movs	r2, #2
   91e98:	4619      	mov	r1, r3
   91e9a:	2019      	movs	r0, #25
   91e9c:	4ba4      	ldr	r3, [pc, #656]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91e9e:	4798      	blx	r3
   91ea0:	4603      	mov	r3, r0
   91ea2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91ea6:	e26e      	b.n	92386 <cl_testharnesscommandhandler+0x229e>
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
								temp1=cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   91ea8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91eac:	2b02      	cmp	r3, #2
   91eae:	d123      	bne.n	91ef8 <cl_testharnesscommandhandler+0x1e10>
							{
								int16_t temp=0,temp1=0;
   91eb0:	2300      	movs	r3, #0
   91eb2:	847b      	strh	r3, [r7, #34]	; 0x22
   91eb4:	2300      	movs	r3, #0
   91eb6:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   91eba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ebe:	b21a      	sxth	r2, r3
   91ec0:	4b9d      	ldr	r3, [pc, #628]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   91ec2:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   91ec4:	4b9c      	ldr	r3, [pc, #624]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   91ec6:	2201      	movs	r2, #1
   91ec8:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91eca:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ece:	b21b      	sxth	r3, r3
   91ed0:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91ed2:	2209      	movs	r2, #9
   91ed4:	4999      	ldr	r1, [pc, #612]	; (9213c <cl_testharnesscommandhandler+0x2054>)
   91ed6:	2018      	movs	r0, #24
   91ed8:	4b95      	ldr	r3, [pc, #596]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91eda:	4798      	blx	r3
   91edc:	4603      	mov	r3, r0
   91ede:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91ee2:	f107 0322 	add.w	r3, r7, #34	; 0x22
   91ee6:	2202      	movs	r2, #2
   91ee8:	4619      	mov	r1, r3
   91eea:	2019      	movs	r0, #25
   91eec:	4b90      	ldr	r3, [pc, #576]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91eee:	4798      	blx	r3
   91ef0:	4603      	mov	r3, r0
   91ef2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91ef6:	e246      	b.n	92386 <cl_testharnesscommandhandler+0x229e>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91ef8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91efc:	2b03      	cmp	r3, #3
   91efe:	f040 8242 	bne.w	92386 <cl_testharnesscommandhandler+0x229e>
							{
								int16_t temp=0,temp1=0;
   91f02:	f107 0320 	add.w	r3, r7, #32
   91f06:	2200      	movs	r2, #0
   91f08:	801a      	strh	r2, [r3, #0]
   91f0a:	2300      	movs	r3, #0
   91f0c:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   91f10:	4b89      	ldr	r3, [pc, #548]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   91f12:	2200      	movs	r2, #0
   91f14:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91f16:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91f1a:	b21a      	sxth	r2, r3
   91f1c:	f107 0320 	add.w	r3, r7, #32
   91f20:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   91f22:	2207      	movs	r2, #7
   91f24:	4986      	ldr	r1, [pc, #536]	; (92140 <cl_testharnesscommandhandler+0x2058>)
   91f26:	2018      	movs	r0, #24
   91f28:	4b81      	ldr	r3, [pc, #516]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91f2a:	4798      	blx	r3
   91f2c:	4603      	mov	r3, r0
   91f2e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91f32:	f107 0320 	add.w	r3, r7, #32
   91f36:	2202      	movs	r2, #2
   91f38:	4619      	mov	r1, r3
   91f3a:	2019      	movs	r0, #25
   91f3c:	4b7c      	ldr	r3, [pc, #496]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91f3e:	4798      	blx	r3
   91f40:	4603      	mov	r3, r0
   91f42:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91f46:	e21e      	b.n	92386 <cl_testharnesscommandhandler+0x229e>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   91f48:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91f4c:	2b01      	cmp	r3, #1
   91f4e:	d11f      	bne.n	91f90 <cl_testharnesscommandhandler+0x1ea8>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   91f50:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91f54:	4b7b      	ldr	r3, [pc, #492]	; (92144 <cl_testharnesscommandhandler+0x205c>)
   91f56:	4610      	mov	r0, r2
   91f58:	4798      	blx	r3
   91f5a:	4602      	mov	r2, r0
   91f5c:	4b72      	ldr	r3, [pc, #456]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   91f5e:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91f60:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91f64:	f107 031e 	add.w	r3, r7, #30
   91f68:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   91f6a:	2208      	movs	r2, #8
   91f6c:	4976      	ldr	r1, [pc, #472]	; (92148 <cl_testharnesscommandhandler+0x2060>)
   91f6e:	2018      	movs	r0, #24
   91f70:	4b6f      	ldr	r3, [pc, #444]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91f72:	4798      	blx	r3
   91f74:	4603      	mov	r3, r0
   91f76:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91f7a:	f107 031e 	add.w	r3, r7, #30
   91f7e:	2202      	movs	r2, #2
   91f80:	4619      	mov	r1, r3
   91f82:	2019      	movs	r0, #25
   91f84:	4b6a      	ldr	r3, [pc, #424]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91f86:	4798      	blx	r3
   91f88:	4603      	mov	r3, r0
   91f8a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91f8e:	e1fc      	b.n	9238a <cl_testharnesscommandhandler+0x22a2>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   91f90:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91f94:	2b00      	cmp	r3, #0
   91f96:	d124      	bne.n	91fe2 <cl_testharnesscommandhandler+0x1efa>
							{
								int16_t temp=0,temp1=0;
   91f98:	2300      	movs	r3, #0
   91f9a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   91f9e:	2300      	movs	r3, #0
   91fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   91fa4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91fa8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91fac:	b29b      	uxth	r3, r3
   91fae:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   91fb2:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   91fb6:	4b65      	ldr	r3, [pc, #404]	; (9214c <cl_testharnesscommandhandler+0x2064>)
   91fb8:	4610      	mov	r0, r2
   91fba:	4798      	blx	r3
   91fbc:	4602      	mov	r2, r0
   91fbe:	4b5a      	ldr	r3, [pc, #360]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   91fc0:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   91fc2:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   91fc6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   91fca:	b29b      	uxth	r3, r3
   91fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   91fd0:	220c      	movs	r2, #12
   91fd2:	495f      	ldr	r1, [pc, #380]	; (92150 <cl_testharnesscommandhandler+0x2068>)
   91fd4:	2018      	movs	r0, #24
   91fd6:	4b56      	ldr	r3, [pc, #344]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   91fd8:	4798      	blx	r3
   91fda:	4603      	mov	r3, r0
   91fdc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91fe0:	e1d3      	b.n	9238a <cl_testharnesscommandhandler+0x22a2>
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   91fe2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91fe6:	2b02      	cmp	r3, #2
   91fe8:	d128      	bne.n	9203c <cl_testharnesscommandhandler+0x1f54>
							{
								int16_t temp=0,temp1=0;
   91fea:	f107 031c 	add.w	r3, r7, #28
   91fee:	2200      	movs	r2, #0
   91ff0:	801a      	strh	r2, [r3, #0]
   91ff2:	2300      	movs	r3, #0
   91ff4:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   91ff8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ffc:	b21a      	sxth	r2, r3
   91ffe:	4b4e      	ldr	r3, [pc, #312]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   92000:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   92002:	4b4d      	ldr	r3, [pc, #308]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   92004:	2201      	movs	r2, #1
   92006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9200a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9200e:	b21a      	sxth	r2, r3
   92010:	f107 031c 	add.w	r3, r7, #28
   92014:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92016:	2209      	movs	r2, #9
   92018:	4948      	ldr	r1, [pc, #288]	; (9213c <cl_testharnesscommandhandler+0x2054>)
   9201a:	2018      	movs	r0, #24
   9201c:	4b44      	ldr	r3, [pc, #272]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   9201e:	4798      	blx	r3
   92020:	4603      	mov	r3, r0
   92022:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92026:	f107 031c 	add.w	r3, r7, #28
   9202a:	2202      	movs	r2, #2
   9202c:	4619      	mov	r1, r3
   9202e:	2019      	movs	r0, #25
   92030:	4b3f      	ldr	r3, [pc, #252]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   92032:	4798      	blx	r3
   92034:	4603      	mov	r3, r0
   92036:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9203a:	e1a6      	b.n	9238a <cl_testharnesscommandhandler+0x22a2>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   9203c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92040:	2b03      	cmp	r3, #3
   92042:	f040 81a2 	bne.w	9238a <cl_testharnesscommandhandler+0x22a2>
							{
								int16_t temp=0,temp1=0;
   92046:	f107 031a 	add.w	r3, r7, #26
   9204a:	2200      	movs	r2, #0
   9204c:	801a      	strh	r2, [r3, #0]
   9204e:	2300      	movs	r3, #0
   92050:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   92054:	4b38      	ldr	r3, [pc, #224]	; (92138 <cl_testharnesscommandhandler+0x2050>)
   92056:	2200      	movs	r2, #0
   92058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9205c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92060:	b21a      	sxth	r2, r3
   92062:	f107 031a 	add.w	r3, r7, #26
   92066:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   92068:	2209      	movs	r2, #9
   9206a:	493a      	ldr	r1, [pc, #232]	; (92154 <cl_testharnesscommandhandler+0x206c>)
   9206c:	2018      	movs	r0, #24
   9206e:	4b30      	ldr	r3, [pc, #192]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   92070:	4798      	blx	r3
   92072:	4603      	mov	r3, r0
   92074:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92078:	f107 031a 	add.w	r3, r7, #26
   9207c:	2202      	movs	r2, #2
   9207e:	4619      	mov	r1, r3
   92080:	2019      	movs	r0, #25
   92082:	4b2b      	ldr	r3, [pc, #172]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   92084:	4798      	blx	r3
   92086:	4603      	mov	r3, r0
   92088:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9208c:	e17d      	b.n	9238a <cl_testharnesscommandhandler+0x22a2>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   9208e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92092:	2b01      	cmp	r3, #1
   92094:	d11f      	bne.n	920d6 <cl_testharnesscommandhandler+0x1fee>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   92096:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9209a:	4b2a      	ldr	r3, [pc, #168]	; (92144 <cl_testharnesscommandhandler+0x205c>)
   9209c:	4610      	mov	r0, r2
   9209e:	4798      	blx	r3
   920a0:	4602      	mov	r2, r0
   920a2:	4b21      	ldr	r3, [pc, #132]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   920a4:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   920a6:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   920aa:	f107 0318 	add.w	r3, r7, #24
   920ae:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   920b0:	2203      	movs	r2, #3
   920b2:	4929      	ldr	r1, [pc, #164]	; (92158 <cl_testharnesscommandhandler+0x2070>)
   920b4:	2018      	movs	r0, #24
   920b6:	4b1e      	ldr	r3, [pc, #120]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   920b8:	4798      	blx	r3
   920ba:	4603      	mov	r3, r0
   920bc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   920c0:	f107 0318 	add.w	r3, r7, #24
   920c4:	2202      	movs	r2, #2
   920c6:	4619      	mov	r1, r3
   920c8:	2019      	movs	r0, #25
   920ca:	4b19      	ldr	r3, [pc, #100]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   920cc:	4798      	blx	r3
   920ce:	4603      	mov	r3, r0
   920d0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   920d4:	e15b      	b.n	9238e <cl_testharnesscommandhandler+0x22a6>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if (cl_indata.bytearray[2]== 0)
   920d6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   920da:	2b00      	cmp	r3, #0
   920dc:	d140      	bne.n	92160 <cl_testharnesscommandhandler+0x2078>
							{
								int16_t temp=0,temp1=0;
   920de:	2300      	movs	r3, #0
   920e0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   920e4:	2300      	movs	r3, #0
   920e6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   920ea:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   920ee:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   920f2:	b29b      	uxth	r3, r3
   920f4:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   920f8:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   920fc:	4b13      	ldr	r3, [pc, #76]	; (9214c <cl_testharnesscommandhandler+0x2064>)
   920fe:	4610      	mov	r0, r2
   92100:	4798      	blx	r3
   92102:	4602      	mov	r2, r0
   92104:	4b08      	ldr	r3, [pc, #32]	; (92128 <cl_testharnesscommandhandler+0x2040>)
   92106:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   92108:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   9210c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92110:	b29b      	uxth	r3, r3
   92112:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   92116:	220c      	movs	r2, #12
   92118:	4910      	ldr	r1, [pc, #64]	; (9215c <cl_testharnesscommandhandler+0x2074>)
   9211a:	2018      	movs	r0, #24
   9211c:	4b04      	ldr	r3, [pc, #16]	; (92130 <cl_testharnesscommandhandler+0x2048>)
   9211e:	4798      	blx	r3
   92120:	4603      	mov	r3, r0
   92122:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92126:	e132      	b.n	9238e <cl_testharnesscommandhandler+0x22a6>
   92128:	200720f4 	.word	0x200720f4
   9212c:	000a885c 	.word	0x000a885c
   92130:	0009b805 	.word	0x0009b805
   92134:	000a8868 	.word	0x000a8868
   92138:	200725b8 	.word	0x200725b8
   9213c:	000a87e4 	.word	0x000a87e4
   92140:	000a8874 	.word	0x000a8874
   92144:	000a64e1 	.word	0x000a64e1
   92148:	000a887c 	.word	0x000a887c
   9214c:	000a64e9 	.word	0x000a64e9
   92150:	000a8888 	.word	0x000a8888
   92154:	000a8854 	.word	0x000a8854
   92158:	000a8898 	.word	0x000a8898
   9215c:	000a889c 	.word	0x000a889c
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
								temp1=temp+1000;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92160:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92164:	2b02      	cmp	r3, #2
   92166:	d128      	bne.n	921ba <cl_testharnesscommandhandler+0x20d2>
							{
								int16_t temp=0,temp1=0;
   92168:	f107 0316 	add.w	r3, r7, #22
   9216c:	2200      	movs	r2, #0
   9216e:	801a      	strh	r2, [r3, #0]
   92170:	2300      	movs	r3, #0
   92172:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   92176:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9217a:	b21a      	sxth	r2, r3
   9217c:	4ba6      	ldr	r3, [pc, #664]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   9217e:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   92180:	4ba5      	ldr	r3, [pc, #660]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   92182:	2201      	movs	r2, #1
   92184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92188:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9218c:	b21a      	sxth	r2, r3
   9218e:	f107 0316 	add.w	r3, r7, #22
   92192:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92194:	2209      	movs	r2, #9
   92196:	49a1      	ldr	r1, [pc, #644]	; (9241c <cl_testharnesscommandhandler+0x2334>)
   92198:	2018      	movs	r0, #24
   9219a:	4ba1      	ldr	r3, [pc, #644]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   9219c:	4798      	blx	r3
   9219e:	4603      	mov	r3, r0
   921a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   921a4:	f107 0316 	add.w	r3, r7, #22
   921a8:	2202      	movs	r2, #2
   921aa:	4619      	mov	r1, r3
   921ac:	2019      	movs	r0, #25
   921ae:	4b9c      	ldr	r3, [pc, #624]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   921b0:	4798      	blx	r3
   921b2:	4603      	mov	r3, r0
   921b4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   921b8:	e0e9      	b.n	9238e <cl_testharnesscommandhandler+0x22a6>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   921ba:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   921be:	2b03      	cmp	r3, #3
   921c0:	f040 80e5 	bne.w	9238e <cl_testharnesscommandhandler+0x22a6>
							{
								int16_t temp=0,temp1=0;
   921c4:	f107 0314 	add.w	r3, r7, #20
   921c8:	2200      	movs	r2, #0
   921ca:	801a      	strh	r2, [r3, #0]
   921cc:	2300      	movs	r3, #0
   921ce:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   921d2:	4b91      	ldr	r3, [pc, #580]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   921d4:	2200      	movs	r2, #0
   921d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   921da:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   921de:	b21a      	sxth	r2, r3
   921e0:	f107 0314 	add.w	r3, r7, #20
   921e4:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   921e6:	2209      	movs	r2, #9
   921e8:	498e      	ldr	r1, [pc, #568]	; (92424 <cl_testharnesscommandhandler+0x233c>)
   921ea:	2018      	movs	r0, #24
   921ec:	4b8c      	ldr	r3, [pc, #560]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   921ee:	4798      	blx	r3
   921f0:	4603      	mov	r3, r0
   921f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   921f6:	f107 0314 	add.w	r3, r7, #20
   921fa:	2202      	movs	r2, #2
   921fc:	4619      	mov	r1, r3
   921fe:	2019      	movs	r0, #25
   92200:	4b87      	ldr	r3, [pc, #540]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   92202:	4798      	blx	r3
   92204:	4603      	mov	r3, r0
   92206:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9220a:	e0c0      	b.n	9238e <cl_testharnesscommandhandler+0x22a6>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   9220c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92210:	2b01      	cmp	r3, #1
   92212:	d11f      	bne.n	92254 <cl_testharnesscommandhandler+0x216c>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   92214:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92218:	4b83      	ldr	r3, [pc, #524]	; (92428 <cl_testharnesscommandhandler+0x2340>)
   9221a:	4610      	mov	r0, r2
   9221c:	4798      	blx	r3
   9221e:	4602      	mov	r2, r0
   92220:	4b82      	ldr	r3, [pc, #520]	; (9242c <cl_testharnesscommandhandler+0x2344>)
   92222:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92224:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92228:	f107 0312 	add.w	r3, r7, #18
   9222c:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   9222e:	2203      	movs	r2, #3
   92230:	497f      	ldr	r1, [pc, #508]	; (92430 <cl_testharnesscommandhandler+0x2348>)
   92232:	2018      	movs	r0, #24
   92234:	4b7a      	ldr	r3, [pc, #488]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   92236:	4798      	blx	r3
   92238:	4603      	mov	r3, r0
   9223a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9223e:	f107 0312 	add.w	r3, r7, #18
   92242:	2202      	movs	r2, #2
   92244:	4619      	mov	r1, r3
   92246:	2019      	movs	r0, #25
   92248:	4b75      	ldr	r3, [pc, #468]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   9224a:	4798      	blx	r3
   9224c:	4603      	mov	r3, r0
   9224e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92252:	e09e      	b.n	92392 <cl_testharnesscommandhandler+0x22aa>
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 0)
   92254:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92258:	2b00      	cmp	r3, #0
   9225a:	d124      	bne.n	922a6 <cl_testharnesscommandhandler+0x21be>
							{
								int16_t temp=0,temp1=0;
   9225c:	2300      	movs	r3, #0
   9225e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   92262:	2300      	movs	r3, #0
   92264:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   92268:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9226c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92270:	b29b      	uxth	r3, r3
   92272:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   92276:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   9227a:	4b6e      	ldr	r3, [pc, #440]	; (92434 <cl_testharnesscommandhandler+0x234c>)
   9227c:	4610      	mov	r0, r2
   9227e:	4798      	blx	r3
   92280:	4602      	mov	r2, r0
   92282:	4b6a      	ldr	r3, [pc, #424]	; (9242c <cl_testharnesscommandhandler+0x2344>)
   92284:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   92286:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   9228a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   9228e:	b29b      	uxth	r3, r3
   92290:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   92294:	220c      	movs	r2, #12
   92296:	4968      	ldr	r1, [pc, #416]	; (92438 <cl_testharnesscommandhandler+0x2350>)
   92298:	2018      	movs	r0, #24
   9229a:	4b61      	ldr	r3, [pc, #388]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   9229c:	4798      	blx	r3
   9229e:	4603      	mov	r3, r0
   922a0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   922a4:	e075      	b.n	92392 <cl_testharnesscommandhandler+0x22aa>
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   922a6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   922aa:	2b02      	cmp	r3, #2
   922ac:	d129      	bne.n	92302 <cl_testharnesscommandhandler+0x221a>
							{
								int16_t temp=0,temp1=0;
   922ae:	f107 0310 	add.w	r3, r7, #16
   922b2:	2200      	movs	r2, #0
   922b4:	801a      	strh	r2, [r3, #0]
   922b6:	2300      	movs	r3, #0
   922b8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   922bc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   922c0:	b21a      	sxth	r2, r3
   922c2:	4b55      	ldr	r3, [pc, #340]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   922c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   922c8:	4b53      	ldr	r3, [pc, #332]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   922ca:	2201      	movs	r2, #1
   922cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   922d0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   922d4:	b21a      	sxth	r2, r3
   922d6:	f107 0310 	add.w	r3, r7, #16
   922da:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   922dc:	2209      	movs	r2, #9
   922de:	494f      	ldr	r1, [pc, #316]	; (9241c <cl_testharnesscommandhandler+0x2334>)
   922e0:	2018      	movs	r0, #24
   922e2:	4b4f      	ldr	r3, [pc, #316]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   922e4:	4798      	blx	r3
   922e6:	4603      	mov	r3, r0
   922e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   922ec:	f107 0310 	add.w	r3, r7, #16
   922f0:	2202      	movs	r2, #2
   922f2:	4619      	mov	r1, r3
   922f4:	2019      	movs	r0, #25
   922f6:	4b4a      	ldr	r3, [pc, #296]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   922f8:	4798      	blx	r3
   922fa:	4603      	mov	r3, r0
   922fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92300:	e047      	b.n	92392 <cl_testharnesscommandhandler+0x22aa>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92302:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92306:	2b03      	cmp	r3, #3
   92308:	d143      	bne.n	92392 <cl_testharnesscommandhandler+0x22aa>
							{
								int16_t temp=0,temp1=0;
   9230a:	f107 030e 	add.w	r3, r7, #14
   9230e:	2200      	movs	r2, #0
   92310:	801a      	strh	r2, [r3, #0]
   92312:	2300      	movs	r3, #0
   92314:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   92318:	4b3f      	ldr	r3, [pc, #252]	; (92418 <cl_testharnesscommandhandler+0x2330>)
   9231a:	2200      	movs	r2, #0
   9231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92320:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92324:	b21a      	sxth	r2, r3
   92326:	f107 030e 	add.w	r3, r7, #14
   9232a:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   9232c:	2209      	movs	r2, #9
   9232e:	4943      	ldr	r1, [pc, #268]	; (9243c <cl_testharnesscommandhandler+0x2354>)
   92330:	2018      	movs	r0, #24
   92332:	4b3b      	ldr	r3, [pc, #236]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   92334:	4798      	blx	r3
   92336:	4603      	mov	r3, r0
   92338:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9233c:	f107 030e 	add.w	r3, r7, #14
   92340:	2202      	movs	r2, #2
   92342:	4619      	mov	r1, r3
   92344:	2019      	movs	r0, #25
   92346:	4b36      	ldr	r3, [pc, #216]	; (92420 <cl_testharnesscommandhandler+0x2338>)
   92348:	4798      	blx	r3
   9234a:	4603      	mov	r3, r0
   9234c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92350:	e01f      	b.n	92392 <cl_testharnesscommandhandler+0x22aa>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   92352:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92356:	2b01      	cmp	r3, #1
   92358:	d105      	bne.n	92366 <cl_testharnesscommandhandler+0x227e>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   9235a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9235e:	b21a      	sxth	r2, r3
   92360:	4b32      	ldr	r3, [pc, #200]	; (9242c <cl_testharnesscommandhandler+0x2344>)
   92362:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   92364:	e016      	b.n	92394 <cl_testharnesscommandhandler+0x22ac>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   92366:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9236a:	b21a      	sxth	r2, r3
   9236c:	4b2f      	ldr	r3, [pc, #188]	; (9242c <cl_testharnesscommandhandler+0x2344>)
   9236e:	801a      	strh	r2, [r3, #0]
							}
							break;
   92370:	e010      	b.n	92394 <cl_testharnesscommandhandler+0x22ac>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92372:	bf00      	nop
   92374:	e339      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92376:	bf00      	nop
   92378:	e337      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9237a:	bf00      	nop
   9237c:	e335      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
									temp = cl_indata.Twobyte;
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   9237e:	bf00      	nop
   92380:	e333      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92382:	bf00      	nop
   92384:	e331      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92386:	bf00      	nop
   92388:	e32f      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9238a:	bf00      	nop
   9238c:	e32d      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   9238e:	bf00      	nop
   92390:	e32b      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
								temp = cl_indata.Twobyte;
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92392:	bf00      	nop
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
						}
		break;
   92394:	e329      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   92396:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9239a:	3b05      	subs	r3, #5
   9239c:	2b11      	cmp	r3, #17
   9239e:	f200 8317 	bhi.w	929d0 <cl_testharnesscommandhandler+0x28e8>
   923a2:	a201      	add	r2, pc, #4	; (adr r2, 923a8 <cl_testharnesscommandhandler+0x22c0>)
   923a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   923a8:	0009244d 	.word	0x0009244d
   923ac:	000924e7 	.word	0x000924e7
   923b0:	00092581 	.word	0x00092581
   923b4:	000929d1 	.word	0x000929d1
   923b8:	000929d1 	.word	0x000929d1
   923bc:	000929d1 	.word	0x000929d1
   923c0:	000929d1 	.word	0x000929d1
   923c4:	000927f7 	.word	0x000927f7
   923c8:	00092895 	.word	0x00092895
   923cc:	00092933 	.word	0x00092933
   923d0:	000929d1 	.word	0x000929d1
   923d4:	000929d1 	.word	0x000929d1
   923d8:	000925f9 	.word	0x000925f9
   923dc:	00092659 	.word	0x00092659
   923e0:	000929d1 	.word	0x000929d1
   923e4:	00092725 	.word	0x00092725
   923e8:	000923f1 	.word	0x000923f1
   923ec:	00092405 	.word	0x00092405
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   923f0:	4b13      	ldr	r3, [pc, #76]	; (92440 <cl_testharnesscommandhandler+0x2358>)
   923f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   923f6:	f107 0392 	add.w	r3, r7, #146	; 0x92
   923fa:	4619      	mov	r1, r3
   923fc:	2017      	movs	r0, #23
   923fe:	4b11      	ldr	r3, [pc, #68]	; (92444 <cl_testharnesscommandhandler+0x235c>)
   92400:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   92402:	e2ea      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   92404:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92408:	4619      	mov	r1, r3
   9240a:	2018      	movs	r0, #24
   9240c:	4b0d      	ldr	r3, [pc, #52]	; (92444 <cl_testharnesscommandhandler+0x235c>)
   9240e:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   92410:	4b0d      	ldr	r3, [pc, #52]	; (92448 <cl_testharnesscommandhandler+0x2360>)
   92412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   92416:	e2e0      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
   92418:	200725b8 	.word	0x200725b8
   9241c:	000a87e4 	.word	0x000a87e4
   92420:	0009b805 	.word	0x0009b805
   92424:	000a8854 	.word	0x000a8854
   92428:	000a64e1 	.word	0x000a64e1
   9242c:	200720f4 	.word	0x200720f4
   92430:	000a88ac 	.word	0x000a88ac
   92434:	000a64e9 	.word	0x000a64e9
   92438:	000a88b0 	.word	0x000a88b0
   9243c:	000a88c0 	.word	0x000a88c0
   92440:	000a88c8 	.word	0x000a88c8
   92444:	00092a49 	.word	0x00092a49
   92448:	000a88d4 	.word	0x000a88d4
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   9244c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92450:	4619      	mov	r1, r3
   92452:	200e      	movs	r0, #14
   92454:	4ba8      	ldr	r3, [pc, #672]	; (926f8 <cl_testharnesscommandhandler+0x2610>)
   92456:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   92458:	4ba8      	ldr	r3, [pc, #672]	; (926fc <cl_testharnesscommandhandler+0x2614>)
   9245a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9245e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   92462:	461a      	mov	r2, r3
   92464:	f640 43e4 	movw	r3, #3300	; 0xce4
   92468:	fb03 f302 	mul.w	r3, r3, r2
   9246c:	2b00      	cmp	r3, #0
   9246e:	da01      	bge.n	92474 <cl_testharnesscommandhandler+0x238c>
   92470:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   92474:	131b      	asrs	r3, r3, #12
   92476:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   9247a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9247e:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   92482:	4b9f      	ldr	r3, [pc, #636]	; (92700 <cl_testharnesscommandhandler+0x2618>)
   92484:	4610      	mov	r0, r2
   92486:	4798      	blx	r3
   92488:	4c9e      	ldr	r4, [pc, #632]	; (92704 <cl_testharnesscommandhandler+0x261c>)
   9248a:	a397      	add	r3, pc, #604	; (adr r3, 926e8 <cl_testharnesscommandhandler+0x2600>)
   9248c:	e9d3 2300 	ldrd	r2, r3, [r3]
   92490:	47a0      	blx	r4
   92492:	4603      	mov	r3, r0
   92494:	460c      	mov	r4, r1
   92496:	4619      	mov	r1, r3
   92498:	4622      	mov	r2, r4
   9249a:	4b9b      	ldr	r3, [pc, #620]	; (92708 <cl_testharnesscommandhandler+0x2620>)
   9249c:	4608      	mov	r0, r1
   9249e:	4611      	mov	r1, r2
   924a0:	4798      	blx	r3
   924a2:	4603      	mov	r3, r0
   924a4:	b21b      	sxth	r3, r3
   924a6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   924aa:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   924ae:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   924b2:	da08      	bge.n	924c6 <cl_testharnesscommandhandler+0x23de>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   924b4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   924b8:	b29b      	uxth	r3, r3
   924ba:	3b32      	subs	r3, #50	; 0x32
   924bc:	b29b      	uxth	r3, r3
   924be:	b21b      	sxth	r3, r3
   924c0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   924c4:	e286      	b.n	929d4 <cl_testharnesscommandhandler+0x28ec>
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
				if (  sensordatamillivolts < 1360 )
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
				}
				else if(  sensordatamillivolts < 1650 )
   924c6:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   924ca:	f240 6271 	movw	r2, #1649	; 0x671
   924ce:	4293      	cmp	r3, r2
   924d0:	f300 8280 	bgt.w	929d4 <cl_testharnesscommandhandler+0x28ec>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   924d4:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   924d8:	b29b      	uxth	r3, r3
   924da:	3b19      	subs	r3, #25
   924dc:	b29b      	uxth	r3, r3
   924de:	b21b      	sxth	r3, r3
   924e0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   924e4:	e276      	b.n	929d4 <cl_testharnesscommandhandler+0x28ec>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   924e6:	f107 0392 	add.w	r3, r7, #146	; 0x92
   924ea:	4619      	mov	r1, r3
   924ec:	200f      	movs	r0, #15
   924ee:	4b82      	ldr	r3, [pc, #520]	; (926f8 <cl_testharnesscommandhandler+0x2610>)
   924f0:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   924f2:	4b86      	ldr	r3, [pc, #536]	; (9270c <cl_testharnesscommandhandler+0x2624>)
   924f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   924f8:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   924fc:	461a      	mov	r2, r3
   924fe:	f640 43e4 	movw	r3, #3300	; 0xce4
   92502:	fb03 f302 	mul.w	r3, r3, r2
   92506:	2b00      	cmp	r3, #0
   92508:	da01      	bge.n	9250e <cl_testharnesscommandhandler+0x2426>
   9250a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9250e:	131b      	asrs	r3, r3, #12
   92510:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   92514:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92518:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   9251c:	4b78      	ldr	r3, [pc, #480]	; (92700 <cl_testharnesscommandhandler+0x2618>)
   9251e:	4610      	mov	r0, r2
   92520:	4798      	blx	r3
   92522:	4c78      	ldr	r4, [pc, #480]	; (92704 <cl_testharnesscommandhandler+0x261c>)
   92524:	a370      	add	r3, pc, #448	; (adr r3, 926e8 <cl_testharnesscommandhandler+0x2600>)
   92526:	e9d3 2300 	ldrd	r2, r3, [r3]
   9252a:	47a0      	blx	r4
   9252c:	4603      	mov	r3, r0
   9252e:	460c      	mov	r4, r1
   92530:	4619      	mov	r1, r3
   92532:	4622      	mov	r2, r4
   92534:	4b74      	ldr	r3, [pc, #464]	; (92708 <cl_testharnesscommandhandler+0x2620>)
   92536:	4608      	mov	r0, r1
   92538:	4611      	mov	r1, r2
   9253a:	4798      	blx	r3
   9253c:	4603      	mov	r3, r0
   9253e:	b21b      	sxth	r3, r3
   92540:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   92544:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92548:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   9254c:	da08      	bge.n	92560 <cl_testharnesscommandhandler+0x2478>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   9254e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   92552:	b29b      	uxth	r3, r3
   92554:	3b32      	subs	r3, #50	; 0x32
   92556:	b29b      	uxth	r3, r3
   92558:	b21b      	sxth	r3, r3
   9255a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9255e:	e23b      	b.n	929d8 <cl_testharnesscommandhandler+0x28f0>
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
			if (  sensordatamillivolts < 1360 )
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
			}
			else if(  sensordatamillivolts < 1650 )
   92560:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92564:	f240 6271 	movw	r2, #1649	; 0x671
   92568:	4293      	cmp	r3, r2
   9256a:	f300 8235 	bgt.w	929d8 <cl_testharnesscommandhandler+0x28f0>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   9256e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   92572:	b29b      	uxth	r3, r3
   92574:	3b19      	subs	r3, #25
   92576:	b29b      	uxth	r3, r3
   92578:	b21b      	sxth	r3, r3
   9257a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   9257e:	e22b      	b.n	929d8 <cl_testharnesscommandhandler+0x28f0>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   92580:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92584:	4619      	mov	r1, r3
   92586:	2027      	movs	r0, #39	; 0x27
   92588:	4b5b      	ldr	r3, [pc, #364]	; (926f8 <cl_testharnesscommandhandler+0x2610>)
   9258a:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   9258c:	4b60      	ldr	r3, [pc, #384]	; (92710 <cl_testharnesscommandhandler+0x2628>)
   9258e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92592:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   92596:	461a      	mov	r2, r3
   92598:	f640 43e4 	movw	r3, #3300	; 0xce4
   9259c:	fb03 f302 	mul.w	r3, r3, r2
   925a0:	2b00      	cmp	r3, #0
   925a2:	da01      	bge.n	925a8 <cl_testharnesscommandhandler+0x24c0>
   925a4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   925a8:	131b      	asrs	r3, r3, #12
   925aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   925ae:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   925b2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   925b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   925ba:	fb02 f303 	mul.w	r3, r2, r3
   925be:	4a55      	ldr	r2, [pc, #340]	; (92714 <cl_testharnesscommandhandler+0x262c>)
   925c0:	fb82 1203 	smull	r1, r2, r2, r3
   925c4:	1252      	asrs	r2, r2, #9
   925c6:	17db      	asrs	r3, r3, #31
   925c8:	1ad3      	subs	r3, r2, r3
   925ca:	b21b      	sxth	r3, r3
   925cc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   925d0:	2204      	movs	r2, #4
   925d2:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   925d6:	2018      	movs	r0, #24
   925d8:	4b4f      	ldr	r3, [pc, #316]	; (92718 <cl_testharnesscommandhandler+0x2630>)
   925da:	4798      	blx	r3
   925dc:	4603      	mov	r3, r0
   925de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   925e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
   925e6:	2202      	movs	r2, #2
   925e8:	4619      	mov	r1, r3
   925ea:	2019      	movs	r0, #25
   925ec:	4b4a      	ldr	r3, [pc, #296]	; (92718 <cl_testharnesscommandhandler+0x2630>)
   925ee:	4798      	blx	r3
   925f0:	4603      	mov	r3, r0
   925f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   925f6:	e1f0      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   925f8:	f107 0392 	add.w	r3, r7, #146	; 0x92
   925fc:	4619      	mov	r1, r3
   925fe:	2024      	movs	r0, #36	; 0x24
   92600:	4b3d      	ldr	r3, [pc, #244]	; (926f8 <cl_testharnesscommandhandler+0x2610>)
   92602:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92604:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   92608:	461a      	mov	r2, r3
   9260a:	f640 43e4 	movw	r3, #3300	; 0xce4
   9260e:	fb03 f302 	mul.w	r3, r3, r2
   92612:	2b00      	cmp	r3, #0
   92614:	da01      	bge.n	9261a <cl_testharnesscommandhandler+0x2532>
   92616:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9261a:	131b      	asrs	r3, r3, #12
   9261c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   92620:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92624:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   92628:	4b35      	ldr	r3, [pc, #212]	; (92700 <cl_testharnesscommandhandler+0x2618>)
   9262a:	4610      	mov	r0, r2
   9262c:	4798      	blx	r3
   9262e:	4c35      	ldr	r4, [pc, #212]	; (92704 <cl_testharnesscommandhandler+0x261c>)
   92630:	a32f      	add	r3, pc, #188	; (adr r3, 926f0 <cl_testharnesscommandhandler+0x2608>)
   92632:	e9d3 2300 	ldrd	r2, r3, [r3]
   92636:	47a0      	blx	r4
   92638:	4603      	mov	r3, r0
   9263a:	460c      	mov	r4, r1
   9263c:	4619      	mov	r1, r3
   9263e:	4622      	mov	r2, r4
   92640:	4b31      	ldr	r3, [pc, #196]	; (92708 <cl_testharnesscommandhandler+0x2620>)
   92642:	4608      	mov	r0, r1
   92644:	4611      	mov	r1, r2
   92646:	4798      	blx	r3
   92648:	4603      	mov	r3, r0
   9264a:	b21b      	sxth	r3, r3
   9264c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   92650:	4b32      	ldr	r3, [pc, #200]	; (9271c <cl_testharnesscommandhandler+0x2634>)
   92652:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   92656:	e1c0      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   92658:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9265c:	4619      	mov	r1, r3
   9265e:	2026      	movs	r0, #38	; 0x26
   92660:	4b25      	ldr	r3, [pc, #148]	; (926f8 <cl_testharnesscommandhandler+0x2610>)
   92662:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   92664:	4b2e      	ldr	r3, [pc, #184]	; (92720 <cl_testharnesscommandhandler+0x2638>)
   92666:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   9266a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	; 0x92
   9266e:	461a      	mov	r2, r3
   92670:	f640 43e4 	movw	r3, #3300	; 0xce4
   92674:	fb03 f302 	mul.w	r3, r3, r2
   92678:	2b00      	cmp	r3, #0
   9267a:	da01      	bge.n	92680 <cl_testharnesscommandhandler+0x2598>
   9267c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   92680:	131b      	asrs	r3, r3, #12
   92682:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   92686:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9268a:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   9268e:	4b1c      	ldr	r3, [pc, #112]	; (92700 <cl_testharnesscommandhandler+0x2618>)
   92690:	4610      	mov	r0, r2
   92692:	4798      	blx	r3
   92694:	4c1b      	ldr	r4, [pc, #108]	; (92704 <cl_testharnesscommandhandler+0x261c>)
   92696:	a316      	add	r3, pc, #88	; (adr r3, 926f0 <cl_testharnesscommandhandler+0x2608>)
   92698:	e9d3 2300 	ldrd	r2, r3, [r3]
   9269c:	47a0      	blx	r4
   9269e:	4603      	mov	r3, r0
   926a0:	460c      	mov	r4, r1
   926a2:	4619      	mov	r1, r3
   926a4:	4622      	mov	r2, r4
   926a6:	4b18      	ldr	r3, [pc, #96]	; (92708 <cl_testharnesscommandhandler+0x2620>)
   926a8:	4608      	mov	r0, r1
   926aa:	4611      	mov	r1, r2
   926ac:	4798      	blx	r3
   926ae:	4603      	mov	r3, r0
   926b0:	b21b      	sxth	r3, r3
   926b2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   926b6:	4b1a      	ldr	r3, [pc, #104]	; (92720 <cl_testharnesscommandhandler+0x2638>)
   926b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   926bc:	2204      	movs	r2, #4
   926be:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   926c2:	2018      	movs	r0, #24
   926c4:	4b14      	ldr	r3, [pc, #80]	; (92718 <cl_testharnesscommandhandler+0x2630>)
   926c6:	4798      	blx	r3
   926c8:	4603      	mov	r3, r0
   926ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   926ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
   926d2:	2202      	movs	r2, #2
   926d4:	4619      	mov	r1, r3
   926d6:	2019      	movs	r0, #25
   926d8:	4b0f      	ldr	r3, [pc, #60]	; (92718 <cl_testharnesscommandhandler+0x2630>)
   926da:	4798      	blx	r3
   926dc:	4603      	mov	r3, r0
   926de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   926e2:	e17a      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
   926e4:	f3af 8000 	nop.w
   926e8:	8f5c28f6 	.word	0x8f5c28f6
   926ec:	3fe8f5c2 	.word	0x3fe8f5c2
   926f0:	33333333 	.word	0x33333333
   926f4:	3fe33333 	.word	0x3fe33333
   926f8:	00092a49 	.word	0x00092a49
   926fc:	000a88dc 	.word	0x000a88dc
   92700:	000a5c45 	.word	0x000a5c45
   92704:	000a5f65 	.word	0x000a5f65
   92708:	000a6245 	.word	0x000a6245
   9270c:	000a88e4 	.word	0x000a88e4
   92710:	000a88ec 	.word	0x000a88ec
   92714:	77280773 	.word	0x77280773
   92718:	0009b805 	.word	0x0009b805
   9271c:	000a88f4 	.word	0x000a88f4
   92720:	000a88fc 	.word	0x000a88fc
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   92724:	4bb8      	ldr	r3, [pc, #736]	; (92a08 <cl_testharnesscommandhandler+0x2920>)
   92726:	f9b3 3000 	ldrsh.w	r3, [r3]
   9272a:	b29a      	uxth	r2, r3
   9272c:	4bb7      	ldr	r3, [pc, #732]	; (92a0c <cl_testharnesscommandhandler+0x2924>)
   9272e:	f9b3 3000 	ldrsh.w	r3, [r3]
   92732:	b29b      	uxth	r3, r3
   92734:	1ad3      	subs	r3, r2, r3
   92736:	b29b      	uxth	r3, r3
   92738:	b21b      	sxth	r3, r3
   9273a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   9273e:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   92742:	b29b      	uxth	r3, r3
   92744:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92748:	b29b      	uxth	r3, r3
   9274a:	b21b      	sxth	r3, r3
   9274c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   92750:	4baf      	ldr	r3, [pc, #700]	; (92a10 <cl_testharnesscommandhandler+0x2928>)
   92752:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   92756:	2204      	movs	r2, #4
   92758:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9275c:	2018      	movs	r0, #24
   9275e:	4bad      	ldr	r3, [pc, #692]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   92760:	4798      	blx	r3
   92762:	4603      	mov	r3, r0
   92764:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   92768:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   9276c:	2202      	movs	r2, #2
   9276e:	4619      	mov	r1, r3
   92770:	2019      	movs	r0, #25
   92772:	4ba8      	ldr	r3, [pc, #672]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   92774:	4798      	blx	r3
   92776:	4603      	mov	r3, r0
   92778:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   9277c:	4ba2      	ldr	r3, [pc, #648]	; (92a08 <cl_testharnesscommandhandler+0x2920>)
   9277e:	f9b3 3000 	ldrsh.w	r3, [r3]
   92782:	461a      	mov	r2, r3
   92784:	4ba4      	ldr	r3, [pc, #656]	; (92a18 <cl_testharnesscommandhandler+0x2930>)
   92786:	f9b3 3000 	ldrsh.w	r3, [r3]
   9278a:	4413      	add	r3, r2
   9278c:	0fda      	lsrs	r2, r3, #31
   9278e:	4413      	add	r3, r2
   92790:	105b      	asrs	r3, r3, #1
   92792:	b29a      	uxth	r2, r3
   92794:	4b9d      	ldr	r3, [pc, #628]	; (92a0c <cl_testharnesscommandhandler+0x2924>)
   92796:	f9b3 3000 	ldrsh.w	r3, [r3]
   9279a:	4619      	mov	r1, r3
   9279c:	4b9f      	ldr	r3, [pc, #636]	; (92a1c <cl_testharnesscommandhandler+0x2934>)
   9279e:	f9b3 3000 	ldrsh.w	r3, [r3]
   927a2:	440b      	add	r3, r1
   927a4:	0fd9      	lsrs	r1, r3, #31
   927a6:	440b      	add	r3, r1
   927a8:	105b      	asrs	r3, r3, #1
   927aa:	b29b      	uxth	r3, r3
   927ac:	1ad3      	subs	r3, r2, r3
   927ae:	b29b      	uxth	r3, r3
   927b0:	b21b      	sxth	r3, r3
   927b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   927b6:	4b9a      	ldr	r3, [pc, #616]	; (92a20 <cl_testharnesscommandhandler+0x2938>)
   927b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   927bc:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	; 0x90
   927c0:	b29b      	uxth	r3, r3
   927c2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   927c6:	b29b      	uxth	r3, r3
   927c8:	b21b      	sxth	r3, r3
   927ca:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   927ce:	2204      	movs	r2, #4
   927d0:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   927d4:	2018      	movs	r0, #24
   927d6:	4b8f      	ldr	r3, [pc, #572]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   927d8:	4798      	blx	r3
   927da:	4603      	mov	r3, r0
   927dc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   927e0:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   927e4:	2202      	movs	r2, #2
   927e6:	4619      	mov	r1, r3
   927e8:	2019      	movs	r0, #25
   927ea:	4b8a      	ldr	r3, [pc, #552]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   927ec:	4798      	blx	r3
   927ee:	4603      	mov	r3, r0
   927f0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   927f4:	e0f1      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   927f6:	f107 0392 	add.w	r3, r7, #146	; 0x92
   927fa:	4619      	mov	r1, r3
   927fc:	2012      	movs	r0, #18
   927fe:	4b89      	ldr	r3, [pc, #548]	; (92a24 <cl_testharnesscommandhandler+0x293c>)
   92800:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   92802:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   92806:	4b88      	ldr	r3, [pc, #544]	; (92a28 <cl_testharnesscommandhandler+0x2940>)
   92808:	4610      	mov	r0, r2
   9280a:	4798      	blx	r3
   9280c:	4c87      	ldr	r4, [pc, #540]	; (92a2c <cl_testharnesscommandhandler+0x2944>)
   9280e:	a37a      	add	r3, pc, #488	; (adr r3, 929f8 <cl_testharnesscommandhandler+0x2910>)
   92810:	e9d3 2300 	ldrd	r2, r3, [r3]
   92814:	47a0      	blx	r4
   92816:	4603      	mov	r3, r0
   92818:	460c      	mov	r4, r1
   9281a:	4618      	mov	r0, r3
   9281c:	4621      	mov	r1, r4
   9281e:	4c84      	ldr	r4, [pc, #528]	; (92a30 <cl_testharnesscommandhandler+0x2948>)
   92820:	a377      	add	r3, pc, #476	; (adr r3, 92a00 <cl_testharnesscommandhandler+0x2918>)
   92822:	e9d3 2300 	ldrd	r2, r3, [r3]
   92826:	47a0      	blx	r4
   92828:	4603      	mov	r3, r0
   9282a:	460c      	mov	r4, r1
   9282c:	4619      	mov	r1, r3
   9282e:	4622      	mov	r2, r4
   92830:	4b80      	ldr	r3, [pc, #512]	; (92a34 <cl_testharnesscommandhandler+0x294c>)
   92832:	4608      	mov	r0, r1
   92834:	4611      	mov	r1, r2
   92836:	4798      	blx	r3
   92838:	4603      	mov	r3, r0
   9283a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   9283e:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   92842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   92846:	fb02 f303 	mul.w	r3, r2, r3
   9284a:	4a7b      	ldr	r2, [pc, #492]	; (92a38 <cl_testharnesscommandhandler+0x2950>)
   9284c:	fb82 1203 	smull	r1, r2, r2, r3
   92850:	11d2      	asrs	r2, r2, #7
   92852:	17db      	asrs	r3, r3, #31
   92854:	1ad3      	subs	r3, r2, r3
   92856:	b29b      	uxth	r3, r3
   92858:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   9285c:	b29b      	uxth	r3, r3
   9285e:	b21a      	sxth	r2, r3
   92860:	f107 030c 	add.w	r3, r7, #12
   92864:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   92866:	4b75      	ldr	r3, [pc, #468]	; (92a3c <cl_testharnesscommandhandler+0x2954>)
   92868:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   9286c:	2206      	movs	r2, #6
   9286e:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92872:	2018      	movs	r0, #24
   92874:	4b67      	ldr	r3, [pc, #412]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   92876:	4798      	blx	r3
   92878:	4603      	mov	r3, r0
   9287a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9287e:	f107 030c 	add.w	r3, r7, #12
   92882:	2202      	movs	r2, #2
   92884:	4619      	mov	r1, r3
   92886:	2019      	movs	r0, #25
   92888:	4b62      	ldr	r3, [pc, #392]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   9288a:	4798      	blx	r3
   9288c:	4603      	mov	r3, r0
   9288e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   92892:	e0a2      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   92894:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92898:	4619      	mov	r1, r3
   9289a:	2013      	movs	r0, #19
   9289c:	4b61      	ldr	r3, [pc, #388]	; (92a24 <cl_testharnesscommandhandler+0x293c>)
   9289e:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   928a0:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   928a4:	4b60      	ldr	r3, [pc, #384]	; (92a28 <cl_testharnesscommandhandler+0x2940>)
   928a6:	4610      	mov	r0, r2
   928a8:	4798      	blx	r3
   928aa:	4c60      	ldr	r4, [pc, #384]	; (92a2c <cl_testharnesscommandhandler+0x2944>)
   928ac:	a352      	add	r3, pc, #328	; (adr r3, 929f8 <cl_testharnesscommandhandler+0x2910>)
   928ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   928b2:	47a0      	blx	r4
   928b4:	4603      	mov	r3, r0
   928b6:	460c      	mov	r4, r1
   928b8:	4618      	mov	r0, r3
   928ba:	4621      	mov	r1, r4
   928bc:	4c5c      	ldr	r4, [pc, #368]	; (92a30 <cl_testharnesscommandhandler+0x2948>)
   928be:	a350      	add	r3, pc, #320	; (adr r3, 92a00 <cl_testharnesscommandhandler+0x2918>)
   928c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   928c4:	47a0      	blx	r4
   928c6:	4603      	mov	r3, r0
   928c8:	460c      	mov	r4, r1
   928ca:	4619      	mov	r1, r3
   928cc:	4622      	mov	r2, r4
   928ce:	4b59      	ldr	r3, [pc, #356]	; (92a34 <cl_testharnesscommandhandler+0x294c>)
   928d0:	4608      	mov	r0, r1
   928d2:	4611      	mov	r1, r2
   928d4:	4798      	blx	r3
   928d6:	4603      	mov	r3, r0
   928d8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   928dc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   928e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   928e4:	fb02 f303 	mul.w	r3, r2, r3
   928e8:	4a53      	ldr	r2, [pc, #332]	; (92a38 <cl_testharnesscommandhandler+0x2950>)
   928ea:	fb82 1203 	smull	r1, r2, r2, r3
   928ee:	11d2      	asrs	r2, r2, #7
   928f0:	17db      	asrs	r3, r3, #31
   928f2:	1ad3      	subs	r3, r2, r3
   928f4:	b29b      	uxth	r3, r3
   928f6:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   928fa:	b29b      	uxth	r3, r3
   928fc:	b21a      	sxth	r2, r3
   928fe:	f107 030a 	add.w	r3, r7, #10
   92902:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   92904:	4b4e      	ldr	r3, [pc, #312]	; (92a40 <cl_testharnesscommandhandler+0x2958>)
   92906:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   9290a:	2206      	movs	r2, #6
   9290c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92910:	2018      	movs	r0, #24
   92912:	4b40      	ldr	r3, [pc, #256]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   92914:	4798      	blx	r3
   92916:	4603      	mov	r3, r0
   92918:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9291c:	f107 030a 	add.w	r3, r7, #10
   92920:	2202      	movs	r2, #2
   92922:	4619      	mov	r1, r3
   92924:	2019      	movs	r0, #25
   92926:	4b3b      	ldr	r3, [pc, #236]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   92928:	4798      	blx	r3
   9292a:	4603      	mov	r3, r0
   9292c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   92930:	e053      	b.n	929da <cl_testharnesscommandhandler+0x28f2>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   92932:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92936:	4619      	mov	r1, r3
   92938:	2014      	movs	r0, #20
   9293a:	4b3a      	ldr	r3, [pc, #232]	; (92a24 <cl_testharnesscommandhandler+0x293c>)
   9293c:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   9293e:	f9b7 2092 	ldrsh.w	r2, [r7, #146]	; 0x92
   92942:	4b39      	ldr	r3, [pc, #228]	; (92a28 <cl_testharnesscommandhandler+0x2940>)
   92944:	4610      	mov	r0, r2
   92946:	4798      	blx	r3
   92948:	4c38      	ldr	r4, [pc, #224]	; (92a2c <cl_testharnesscommandhandler+0x2944>)
   9294a:	a32b      	add	r3, pc, #172	; (adr r3, 929f8 <cl_testharnesscommandhandler+0x2910>)
   9294c:	e9d3 2300 	ldrd	r2, r3, [r3]
   92950:	47a0      	blx	r4
   92952:	4603      	mov	r3, r0
   92954:	460c      	mov	r4, r1
   92956:	4618      	mov	r0, r3
   92958:	4621      	mov	r1, r4
   9295a:	4c35      	ldr	r4, [pc, #212]	; (92a30 <cl_testharnesscommandhandler+0x2948>)
   9295c:	a328      	add	r3, pc, #160	; (adr r3, 92a00 <cl_testharnesscommandhandler+0x2918>)
   9295e:	e9d3 2300 	ldrd	r2, r3, [r3]
   92962:	47a0      	blx	r4
   92964:	4603      	mov	r3, r0
   92966:	460c      	mov	r4, r1
   92968:	4619      	mov	r1, r3
   9296a:	4622      	mov	r2, r4
   9296c:	4b31      	ldr	r3, [pc, #196]	; (92a34 <cl_testharnesscommandhandler+0x294c>)
   9296e:	4608      	mov	r0, r1
   92970:	4611      	mov	r1, r2
   92972:	4798      	blx	r3
   92974:	4603      	mov	r3, r0
   92976:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   9297a:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   9297e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   92982:	fb02 f303 	mul.w	r3, r2, r3
   92986:	4a2c      	ldr	r2, [pc, #176]	; (92a38 <cl_testharnesscommandhandler+0x2950>)
   92988:	fb82 1203 	smull	r1, r2, r2, r3
   9298c:	11d2      	asrs	r2, r2, #7
   9298e:	17db      	asrs	r3, r3, #31
   92990:	1ad3      	subs	r3, r2, r3
   92992:	b29b      	uxth	r3, r3
   92994:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   92998:	b29b      	uxth	r3, r3
   9299a:	b21a      	sxth	r2, r3
   9299c:	f107 0308 	add.w	r3, r7, #8
   929a0:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   929a2:	4b28      	ldr	r3, [pc, #160]	; (92a44 <cl_testharnesscommandhandler+0x295c>)
   929a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   929a8:	2206      	movs	r2, #6
   929aa:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   929ae:	2018      	movs	r0, #24
   929b0:	4b18      	ldr	r3, [pc, #96]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   929b2:	4798      	blx	r3
   929b4:	4603      	mov	r3, r0
   929b6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   929ba:	f107 0308 	add.w	r3, r7, #8
   929be:	2202      	movs	r2, #2
   929c0:	4619      	mov	r1, r3
   929c2:	2019      	movs	r0, #25
   929c4:	4b13      	ldr	r3, [pc, #76]	; (92a14 <cl_testharnesscommandhandler+0x292c>)
   929c6:	4798      	blx	r3
   929c8:	4603      	mov	r3, r0
   929ca:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   929ce:	e004      	b.n	929da <cl_testharnesscommandhandler+0x28f2>


			
			default: break;
   929d0:	bf00      	nop
   929d2:	e00a      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
				
			}
			#endif

			
			break;
   929d4:	bf00      	nop
   929d6:	e008      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   929d8:	bf00      	nop

			
			default: break;
		}

		break;
   929da:	e006      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
		default:
		
		break;
   929dc:	bf00      	nop
   929de:	e004      	b.n	929ea <cl_testharnesscommandhandler+0x2902>

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   929e0:	bf00      	nop
   929e2:	e002      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   929e4:	bf00      	nop
   929e6:	e000      	b.n	929ea <cl_testharnesscommandhandler+0x2902>
		else if(TestMsg.data.byte[1] == 2)
		{
						sv_cs_setpotvalue(1090);
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
		}
		break;
   929e8:	bf00      	nop
		break;
	}
	
	
	
	return CL_OK;
   929ea:	2300      	movs	r3, #0
	
}
   929ec:	4618      	mov	r0, r3
   929ee:	f507 7792 	add.w	r7, r7, #292	; 0x124
   929f2:	46bd      	mov	sp, r7
   929f4:	bd90      	pop	{r4, r7, pc}
   929f6:	bf00      	nop
   929f8:	a6b50b0f 	.word	0xa6b50b0f
   929fc:	3fe9c779 	.word	0x3fe9c779
   92a00:	00000000 	.word	0x00000000
   92a04:	4096a800 	.word	0x4096a800
   92a08:	20071a60 	.word	0x20071a60
   92a0c:	20071a5a 	.word	0x20071a5a
   92a10:	000a8904 	.word	0x000a8904
   92a14:	0009b805 	.word	0x0009b805
   92a18:	20071a5e 	.word	0x20071a5e
   92a1c:	20071a5c 	.word	0x20071a5c
   92a20:	000a890c 	.word	0x000a890c
   92a24:	00092a49 	.word	0x00092a49
   92a28:	000a5c45 	.word	0x000a5c45
   92a2c:	000a5d11 	.word	0x000a5d11
   92a30:	000a59a9 	.word	0x000a59a9
   92a34:	000a6245 	.word	0x000a6245
   92a38:	60606061 	.word	0x60606061
   92a3c:	000a8914 	.word	0x000a8914
   92a40:	000a891c 	.word	0x000a891c
   92a44:	000a8924 	.word	0x000a8924

00092a48 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   92a48:	b580      	push	{r7, lr}
   92a4a:	b086      	sub	sp, #24
   92a4c:	af00      	add	r7, sp, #0
   92a4e:	4603      	mov	r3, r0
   92a50:	6039      	str	r1, [r7, #0]
   92a52:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   92a54:	2304      	movs	r3, #4
   92a56:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   92a58:	2300      	movs	r3, #0
   92a5a:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   92a5c:	2300      	movs	r3, #0
   92a5e:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   92a60:	2300      	movs	r3, #0
   92a62:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   92a64:	f107 030f 	add.w	r3, r7, #15
   92a68:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   92a6a:	f107 030c 	add.w	r3, r7, #12
   92a6e:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   92a70:	f107 0308 	add.w	r3, r7, #8
   92a74:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   92a76:	79fb      	ldrb	r3, [r7, #7]
   92a78:	6839      	ldr	r1, [r7, #0]
   92a7a:	4618      	mov	r0, r3
   92a7c:	4b03      	ldr	r3, [pc, #12]	; (92a8c <cl_testgetsensordata+0x44>)
   92a7e:	4798      	blx	r3
	
return CL_OK;	
   92a80:	2300      	movs	r3, #0
}
   92a82:	4618      	mov	r0, r3
   92a84:	3718      	adds	r7, #24
   92a86:	46bd      	mov	sp, r7
   92a88:	bd80      	pop	{r7, pc}
   92a8a:	bf00      	nop
   92a8c:	0008e6a1 	.word	0x0008e6a1

00092a90 <pinclock>:
	#endif

}

void pinclock(void)
{
   92a90:	b480      	push	{r7}
   92a92:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   92a94:	bf00      	nop
   92a96:	46bd      	mov	sp, r7
   92a98:	bc80      	pop	{r7}
   92a9a:	4770      	bx	lr

00092a9c <testsectclock>:
	minute_count++;
}


void testsectclock(void)
{
   92a9c:	b580      	push	{r7, lr}
   92a9e:	b086      	sub	sp, #24
   92aa0:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   92aa2:	2300      	movs	r3, #0
   92aa4:	82fb      	strh	r3, [r7, #22]
   92aa6:	2300      	movs	r3, #0
   92aa8:	82bb      	strh	r3, [r7, #20]
   92aaa:	2300      	movs	r3, #0
   92aac:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   92aae:	2300      	movs	r3, #0
   92ab0:	823b      	strh	r3, [r7, #16]
   92ab2:	2300      	movs	r3, #0
   92ab4:	81fb      	strh	r3, [r7, #14]
   92ab6:	2300      	movs	r3, #0
   92ab8:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   92aba:	f04f 0300 	mov.w	r3, #0
   92abe:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   92ac0:	1dbb      	adds	r3, r7, #6
   92ac2:	4619      	mov	r1, r3
   92ac4:	2013      	movs	r0, #19
   92ac6:	4b0f      	ldr	r3, [pc, #60]	; (92b04 <testsectclock+0x68>)
   92ac8:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   92aca:	4b0f      	ldr	r3, [pc, #60]	; (92b08 <testsectclock+0x6c>)
   92acc:	681a      	ldr	r2, [r3, #0]
   92ace:	4b0f      	ldr	r3, [pc, #60]	; (92b0c <testsectclock+0x70>)
   92ad0:	490f      	ldr	r1, [pc, #60]	; (92b10 <testsectclock+0x74>)
   92ad2:	4610      	mov	r0, r2
   92ad4:	4798      	blx	r3
   92ad6:	4603      	mov	r3, r0
   92ad8:	2b00      	cmp	r3, #0
   92ada:	d100      	bne.n	92ade <testsectclock+0x42>
	}
		
	}
		
	
}
   92adc:	e00d      	b.n	92afa <testsectclock+0x5e>
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   92ade:	4b0d      	ldr	r3, [pc, #52]	; (92b14 <testsectclock+0x78>)
   92ae0:	781b      	ldrb	r3, [r3, #0]
   92ae2:	b2db      	uxtb	r3, r3
   92ae4:	2b01      	cmp	r3, #1
   92ae6:	d008      	beq.n	92afa <testsectclock+0x5e>
   92ae8:	4b0b      	ldr	r3, [pc, #44]	; (92b18 <testsectclock+0x7c>)
   92aea:	781b      	ldrb	r3, [r3, #0]
   92aec:	2b01      	cmp	r3, #1
   92aee:	d004      	beq.n	92afa <testsectclock+0x5e>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   92af0:	4b0a      	ldr	r3, [pc, #40]	; (92b1c <testsectclock+0x80>)
   92af2:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   92af4:	2004      	movs	r0, #4
   92af6:	4b0a      	ldr	r3, [pc, #40]	; (92b20 <testsectclock+0x84>)
   92af8:	4798      	blx	r3
	}
		
	}
		
	
}
   92afa:	bf00      	nop
   92afc:	3718      	adds	r7, #24
   92afe:	46bd      	mov	sp, r7
   92b00:	bd80      	pop	{r7, pc}
   92b02:	bf00      	nop
   92b04:	0008e6a1 	.word	0x0008e6a1
   92b08:	20071784 	.word	0x20071784
   92b0c:	000a6909 	.word	0x000a6909
   92b10:	471c4000 	.word	0x471c4000
   92b14:	20071a4f 	.word	0x20071a4f
   92b18:	20071cb1 	.word	0x20071cb1
   92b1c:	00099a95 	.word	0x00099a95
   92b20:	00089385 	.word	0x00089385

00092b24 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   92b24:	b580      	push	{r7, lr}
   92b26:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   92b28:	4b1c      	ldr	r3, [pc, #112]	; (92b9c <Cl_TimerTickCallback+0x78>)
   92b2a:	681b      	ldr	r3, [r3, #0]
   92b2c:	3301      	adds	r3, #1
   92b2e:	4a1b      	ldr	r2, [pc, #108]	; (92b9c <Cl_TimerTickCallback+0x78>)
   92b30:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   92b32:	4b1a      	ldr	r3, [pc, #104]	; (92b9c <Cl_TimerTickCallback+0x78>)
   92b34:	681b      	ldr	r3, [r3, #0]
   92b36:	2b00      	cmp	r3, #0
   92b38:	dd07      	ble.n	92b4a <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   92b3a:	4b18      	ldr	r3, [pc, #96]	; (92b9c <Cl_TimerTickCallback+0x78>)
   92b3c:	2200      	movs	r2, #0
   92b3e:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   92b40:	4b17      	ldr	r3, [pc, #92]	; (92ba0 <Cl_TimerTickCallback+0x7c>)
   92b42:	681b      	ldr	r3, [r3, #0]
   92b44:	3301      	adds	r3, #1
   92b46:	4a16      	ldr	r2, [pc, #88]	; (92ba0 <Cl_TimerTickCallback+0x7c>)
   92b48:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   92b4a:	4b15      	ldr	r3, [pc, #84]	; (92ba0 <Cl_TimerTickCallback+0x7c>)
   92b4c:	681b      	ldr	r3, [r3, #0]
   92b4e:	2b3b      	cmp	r3, #59	; 0x3b
   92b50:	dd07      	ble.n	92b62 <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   92b52:	4b13      	ldr	r3, [pc, #76]	; (92ba0 <Cl_TimerTickCallback+0x7c>)
   92b54:	2200      	movs	r2, #0
   92b56:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   92b58:	4b12      	ldr	r3, [pc, #72]	; (92ba4 <Cl_TimerTickCallback+0x80>)
   92b5a:	681b      	ldr	r3, [r3, #0]
   92b5c:	3301      	adds	r3, #1
   92b5e:	4a11      	ldr	r2, [pc, #68]	; (92ba4 <Cl_TimerTickCallback+0x80>)
   92b60:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   92b62:	4b10      	ldr	r3, [pc, #64]	; (92ba4 <Cl_TimerTickCallback+0x80>)
   92b64:	681b      	ldr	r3, [r3, #0]
   92b66:	2b3b      	cmp	r3, #59	; 0x3b
   92b68:	dd0d      	ble.n	92b86 <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   92b6a:	4b0e      	ldr	r3, [pc, #56]	; (92ba4 <Cl_TimerTickCallback+0x80>)
   92b6c:	2200      	movs	r2, #0
   92b6e:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   92b70:	4b0d      	ldr	r3, [pc, #52]	; (92ba8 <Cl_TimerTickCallback+0x84>)
   92b72:	681b      	ldr	r3, [r3, #0]
   92b74:	3301      	adds	r3, #1
   92b76:	4a0c      	ldr	r2, [pc, #48]	; (92ba8 <Cl_TimerTickCallback+0x84>)
   92b78:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   92b7a:	4b0c      	ldr	r3, [pc, #48]	; (92bac <Cl_TimerTickCallback+0x88>)
   92b7c:	4798      	blx	r3
   92b7e:	4603      	mov	r3, r0
   92b80:	461a      	mov	r2, r3
   92b82:	4b0b      	ldr	r3, [pc, #44]	; (92bb0 <Cl_TimerTickCallback+0x8c>)
   92b84:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   92b86:	4b08      	ldr	r3, [pc, #32]	; (92ba8 <Cl_TimerTickCallback+0x84>)
   92b88:	681b      	ldr	r3, [r3, #0]
   92b8a:	2b17      	cmp	r3, #23
   92b8c:	dd02      	ble.n	92b94 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   92b8e:	4b06      	ldr	r3, [pc, #24]	; (92ba8 <Cl_TimerTickCallback+0x84>)
   92b90:	2200      	movs	r2, #0
   92b92:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   92b94:	2300      	movs	r3, #0
}
   92b96:	4618      	mov	r0, r3
   92b98:	bd80      	pop	{r7, pc}
   92b9a:	bf00      	nop
   92b9c:	20071a70 	.word	0x20071a70
   92ba0:	20071a74 	.word	0x20071a74
   92ba4:	20071a78 	.word	0x20071a78
   92ba8:	20071a7c 	.word	0x20071a7c
   92bac:	00092fa1 	.word	0x00092fa1
   92bb0:	20072650 	.word	0x20072650

00092bb4 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   92bb4:	b580      	push	{r7, lr}
   92bb6:	b082      	sub	sp, #8
   92bb8:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   92bba:	4b63      	ldr	r3, [pc, #396]	; (92d48 <Cl_MilliTickcallBack+0x194>)
   92bbc:	681b      	ldr	r3, [r3, #0]
   92bbe:	2b01      	cmp	r3, #1
   92bc0:	d10d      	bne.n	92bde <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   92bc2:	4b62      	ldr	r3, [pc, #392]	; (92d4c <Cl_MilliTickcallBack+0x198>)
   92bc4:	681b      	ldr	r3, [r3, #0]
   92bc6:	3301      	adds	r3, #1
   92bc8:	4a60      	ldr	r2, [pc, #384]	; (92d4c <Cl_MilliTickcallBack+0x198>)
   92bca:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   92bcc:	4b5f      	ldr	r3, [pc, #380]	; (92d4c <Cl_MilliTickcallBack+0x198>)
   92bce:	681b      	ldr	r3, [r3, #0]
   92bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   92bd4:	dd06      	ble.n	92be4 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   92bd6:	4b5d      	ldr	r3, [pc, #372]	; (92d4c <Cl_MilliTickcallBack+0x198>)
   92bd8:	2200      	movs	r2, #0
   92bda:	601a      	str	r2, [r3, #0]
   92bdc:	e002      	b.n	92be4 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   92bde:	4b5b      	ldr	r3, [pc, #364]	; (92d4c <Cl_MilliTickcallBack+0x198>)
   92be0:	2200      	movs	r2, #0
   92be2:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   92be4:	4b5a      	ldr	r3, [pc, #360]	; (92d50 <Cl_MilliTickcallBack+0x19c>)
   92be6:	681b      	ldr	r3, [r3, #0]
   92be8:	3301      	adds	r3, #1
   92bea:	4a59      	ldr	r2, [pc, #356]	; (92d50 <Cl_MilliTickcallBack+0x19c>)
   92bec:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   92bee:	4b58      	ldr	r3, [pc, #352]	; (92d50 <Cl_MilliTickcallBack+0x19c>)
   92bf0:	681b      	ldr	r3, [r3, #0]
   92bf2:	2b32      	cmp	r3, #50	; 0x32
   92bf4:	dd02      	ble.n	92bfc <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   92bf6:	4b56      	ldr	r3, [pc, #344]	; (92d50 <Cl_MilliTickcallBack+0x19c>)
   92bf8:	2200      	movs	r2, #0
   92bfa:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   92bfc:	4b55      	ldr	r3, [pc, #340]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92bfe:	681b      	ldr	r3, [r3, #0]
   92c00:	3301      	adds	r3, #1
   92c02:	4a54      	ldr	r2, [pc, #336]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c04:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   92c06:	4b53      	ldr	r3, [pc, #332]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c08:	6819      	ldr	r1, [r3, #0]
   92c0a:	4b53      	ldr	r3, [pc, #332]	; (92d58 <Cl_MilliTickcallBack+0x1a4>)
   92c0c:	fb83 2301 	smull	r2, r3, r3, r1
   92c10:	10da      	asrs	r2, r3, #3
   92c12:	17cb      	asrs	r3, r1, #31
   92c14:	1ad2      	subs	r2, r2, r3
   92c16:	4613      	mov	r3, r2
   92c18:	009b      	lsls	r3, r3, #2
   92c1a:	4413      	add	r3, r2
   92c1c:	009b      	lsls	r3, r3, #2
   92c1e:	1aca      	subs	r2, r1, r3
   92c20:	2a00      	cmp	r2, #0
   92c22:	d103      	bne.n	92c2c <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   92c24:	4b4d      	ldr	r3, [pc, #308]	; (92d5c <Cl_MilliTickcallBack+0x1a8>)
   92c26:	4798      	blx	r3
   92c28:	4603      	mov	r3, r0
   92c2a:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   92c2c:	4b49      	ldr	r3, [pc, #292]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c2e:	681b      	ldr	r3, [r3, #0]
   92c30:	f003 0301 	and.w	r3, r3, #1
   92c34:	2b00      	cmp	r3, #0
   92c36:	d105      	bne.n	92c44 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   92c38:	4b49      	ldr	r3, [pc, #292]	; (92d60 <Cl_MilliTickcallBack+0x1ac>)
   92c3a:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   92c3c:	4b49      	ldr	r3, [pc, #292]	; (92d64 <Cl_MilliTickcallBack+0x1b0>)
   92c3e:	4798      	blx	r3
   92c40:	4603      	mov	r3, r0
   92c42:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   92c44:	4b43      	ldr	r3, [pc, #268]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c46:	6819      	ldr	r1, [r3, #0]
   92c48:	4b43      	ldr	r3, [pc, #268]	; (92d58 <Cl_MilliTickcallBack+0x1a4>)
   92c4a:	fb83 2301 	smull	r2, r3, r3, r1
   92c4e:	105a      	asrs	r2, r3, #1
   92c50:	17cb      	asrs	r3, r1, #31
   92c52:	1ad2      	subs	r2, r2, r3
   92c54:	4613      	mov	r3, r2
   92c56:	009b      	lsls	r3, r3, #2
   92c58:	4413      	add	r3, r2
   92c5a:	1aca      	subs	r2, r1, r3
   92c5c:	2a00      	cmp	r2, #0
   92c5e:	d103      	bne.n	92c68 <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   92c60:	4b41      	ldr	r3, [pc, #260]	; (92d68 <Cl_MilliTickcallBack+0x1b4>)
   92c62:	4798      	blx	r3
   92c64:	4603      	mov	r3, r0
   92c66:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   92c68:	4b3a      	ldr	r3, [pc, #232]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c6a:	6819      	ldr	r1, [r3, #0]
   92c6c:	4b3a      	ldr	r3, [pc, #232]	; (92d58 <Cl_MilliTickcallBack+0x1a4>)
   92c6e:	fb83 2301 	smull	r2, r3, r3, r1
   92c72:	109a      	asrs	r2, r3, #2
   92c74:	17cb      	asrs	r3, r1, #31
   92c76:	1ad2      	subs	r2, r2, r3
   92c78:	4613      	mov	r3, r2
   92c7a:	009b      	lsls	r3, r3, #2
   92c7c:	4413      	add	r3, r2
   92c7e:	005b      	lsls	r3, r3, #1
   92c80:	1aca      	subs	r2, r1, r3
   92c82:	2a00      	cmp	r2, #0
   92c84:	d103      	bne.n	92c8e <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   92c86:	4b39      	ldr	r3, [pc, #228]	; (92d6c <Cl_MilliTickcallBack+0x1b8>)
   92c88:	4798      	blx	r3
   92c8a:	4603      	mov	r3, r0
   92c8c:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   92c8e:	4b31      	ldr	r3, [pc, #196]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92c90:	681a      	ldr	r2, [r3, #0]
   92c92:	4b37      	ldr	r3, [pc, #220]	; (92d70 <Cl_MilliTickcallBack+0x1bc>)
   92c94:	fb83 1302 	smull	r1, r3, r3, r2
   92c98:	1119      	asrs	r1, r3, #4
   92c9a:	17d3      	asrs	r3, r2, #31
   92c9c:	1acb      	subs	r3, r1, r3
   92c9e:	2132      	movs	r1, #50	; 0x32
   92ca0:	fb01 f303 	mul.w	r3, r1, r3
   92ca4:	1ad3      	subs	r3, r2, r3
   92ca6:	2b00      	cmp	r3, #0
   92ca8:	d103      	bne.n	92cb2 <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   92caa:	4b32      	ldr	r3, [pc, #200]	; (92d74 <Cl_MilliTickcallBack+0x1c0>)
   92cac:	4798      	blx	r3
   92cae:	4603      	mov	r3, r0
   92cb0:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   92cb2:	4b28      	ldr	r3, [pc, #160]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92cb4:	681b      	ldr	r3, [r3, #0]
   92cb6:	2b64      	cmp	r3, #100	; 0x64
   92cb8:	d108      	bne.n	92ccc <Cl_MilliTickcallBack+0x118>
		{
			//Cl_msticks = 0;
			Cl_ms100ticks++;
   92cba:	4b2f      	ldr	r3, [pc, #188]	; (92d78 <Cl_MilliTickcallBack+0x1c4>)
   92cbc:	681b      	ldr	r3, [r3, #0]
   92cbe:	3301      	adds	r3, #1
   92cc0:	4a2d      	ldr	r2, [pc, #180]	; (92d78 <Cl_MilliTickcallBack+0x1c4>)
   92cc2:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   92cc4:	4b2d      	ldr	r3, [pc, #180]	; (92d7c <Cl_MilliTickcallBack+0x1c8>)
   92cc6:	4798      	blx	r3
   92cc8:	4603      	mov	r3, r0
   92cca:	71fb      	strb	r3, [r7, #7]
				//cl_hep_pump_enddetction_timer();


		}

if(Cl_msticks == 150)
   92ccc:	4b21      	ldr	r3, [pc, #132]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92cce:	681b      	ldr	r3, [r3, #0]
   92cd0:	2b96      	cmp	r3, #150	; 0x96
   92cd2:	d10b      	bne.n	92cec <Cl_MilliTickcallBack+0x138>
		{
			Cl_msticks = 0;
   92cd4:	4b1f      	ldr	r3, [pc, #124]	; (92d54 <Cl_MilliTickcallBack+0x1a0>)
   92cd6:	2200      	movs	r2, #0
   92cd8:	601a      	str	r2, [r3, #0]
			Cl_ms150ticks++;
   92cda:	4b29      	ldr	r3, [pc, #164]	; (92d80 <Cl_MilliTickcallBack+0x1cc>)
   92cdc:	681b      	ldr	r3, [r3, #0]
   92cde:	3301      	adds	r3, #1
   92ce0:	4a27      	ldr	r2, [pc, #156]	; (92d80 <Cl_MilliTickcallBack+0x1cc>)
   92ce2:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick150Ms_Event();
   92ce4:	4b27      	ldr	r3, [pc, #156]	; (92d84 <Cl_MilliTickcallBack+0x1d0>)
   92ce6:	4798      	blx	r3
   92ce8:	4603      	mov	r3, r0
   92cea:	71fb      	strb	r3, [r7, #7]


		}


		if(Cl_ms100ticks == 3 )
   92cec:	4b22      	ldr	r3, [pc, #136]	; (92d78 <Cl_MilliTickcallBack+0x1c4>)
   92cee:	681b      	ldr	r3, [r3, #0]
   92cf0:	2b03      	cmp	r3, #3
   92cf2:	d11d      	bne.n	92d30 <Cl_MilliTickcallBack+0x17c>
		{
			Cl_ms100ticks = 0;
   92cf4:	4b20      	ldr	r3, [pc, #128]	; (92d78 <Cl_MilliTickcallBack+0x1c4>)
   92cf6:	2200      	movs	r2, #0
   92cf8:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   92cfa:	4b23      	ldr	r3, [pc, #140]	; (92d88 <Cl_MilliTickcallBack+0x1d4>)
   92cfc:	681b      	ldr	r3, [r3, #0]
   92cfe:	3301      	adds	r3, #1
   92d00:	4a21      	ldr	r2, [pc, #132]	; (92d88 <Cl_MilliTickcallBack+0x1d4>)
   92d02:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   92d04:	4b20      	ldr	r3, [pc, #128]	; (92d88 <Cl_MilliTickcallBack+0x1d4>)
   92d06:	681b      	ldr	r3, [r3, #0]
   92d08:	2b02      	cmp	r3, #2
   92d0a:	d10d      	bne.n	92d28 <Cl_MilliTickcallBack+0x174>
			{
				Cl_ms500ticks = 0;
   92d0c:	4b1e      	ldr	r3, [pc, #120]	; (92d88 <Cl_MilliTickcallBack+0x1d4>)
   92d0e:	2200      	movs	r2, #0
   92d10:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   92d12:	4b1e      	ldr	r3, [pc, #120]	; (92d8c <Cl_MilliTickcallBack+0x1d8>)
   92d14:	4798      	blx	r3
   92d16:	4603      	mov	r3, r0
   92d18:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   92d1a:	4b1d      	ldr	r3, [pc, #116]	; (92d90 <Cl_MilliTickcallBack+0x1dc>)
   92d1c:	681b      	ldr	r3, [r3, #0]
   92d1e:	3301      	adds	r3, #1
   92d20:	4a1b      	ldr	r2, [pc, #108]	; (92d90 <Cl_MilliTickcallBack+0x1dc>)
   92d22:	6013      	str	r3, [r2, #0]
				testsectclock();
   92d24:	4b1b      	ldr	r3, [pc, #108]	; (92d94 <Cl_MilliTickcallBack+0x1e0>)
   92d26:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   92d28:	4b1b      	ldr	r3, [pc, #108]	; (92d98 <Cl_MilliTickcallBack+0x1e4>)
   92d2a:	4798      	blx	r3
   92d2c:	4603      	mov	r3, r0
   92d2e:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   92d30:	4b17      	ldr	r3, [pc, #92]	; (92d90 <Cl_MilliTickcallBack+0x1dc>)
   92d32:	681b      	ldr	r3, [r3, #0]
   92d34:	2b02      	cmp	r3, #2
   92d36:	d102      	bne.n	92d3e <Cl_MilliTickcallBack+0x18a>
		{
			Cl_ms1000ticks =0;
   92d38:	4b15      	ldr	r3, [pc, #84]	; (92d90 <Cl_MilliTickcallBack+0x1dc>)
   92d3a:	2200      	movs	r2, #0
   92d3c:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   92d3e:	2300      	movs	r3, #0
}
   92d40:	4618      	mov	r0, r3
   92d42:	3708      	adds	r7, #8
   92d44:	46bd      	mov	sp, r7
   92d46:	bd80      	pop	{r7, pc}
   92d48:	20071b28 	.word	0x20071b28
   92d4c:	20071a6c 	.word	0x20071a6c
   92d50:	20071a68 	.word	0x20071a68
   92d54:	20071a80 	.word	0x20071a80
   92d58:	66666667 	.word	0x66666667
   92d5c:	00092dcd 	.word	0x00092dcd
   92d60:	00092a91 	.word	0x00092a91
   92d64:	00092d9d 	.word	0x00092d9d
   92d68:	00092dad 	.word	0x00092dad
   92d6c:	00092dbd 	.word	0x00092dbd
   92d70:	51eb851f 	.word	0x51eb851f
   92d74:	00092e09 	.word	0x00092e09
   92d78:	20071a84 	.word	0x20071a84
   92d7c:	00092e49 	.word	0x00092e49
   92d80:	20071a88 	.word	0x20071a88
   92d84:	00092e85 	.word	0x00092e85
   92d88:	20071a8c 	.word	0x20071a8c
   92d8c:	00092efd 	.word	0x00092efd
   92d90:	20071a90 	.word	0x20071a90
   92d94:	00092a9d 	.word	0x00092a9d
   92d98:	00092ec1 	.word	0x00092ec1

00092d9c <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   92d9c:	b480      	push	{r7}
   92d9e:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92da0:	2300      	movs	r3, #0
	 
 }
   92da2:	4618      	mov	r0, r3
   92da4:	46bd      	mov	sp, r7
   92da6:	bc80      	pop	{r7}
   92da8:	4770      	bx	lr
   92daa:	bf00      	nop

00092dac <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   92dac:	b480      	push	{r7}
   92dae:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92db0:	2300      	movs	r3, #0
	 
 }
   92db2:	4618      	mov	r0, r3
   92db4:	46bd      	mov	sp, r7
   92db6:	bc80      	pop	{r7}
   92db8:	4770      	bx	lr
   92dba:	bf00      	nop

00092dbc <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   92dbc:	b480      	push	{r7}
   92dbe:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92dc0:	2300      	movs	r3, #0
	 
 }
   92dc2:	4618      	mov	r0, r3
   92dc4:	46bd      	mov	sp, r7
   92dc6:	bc80      	pop	{r7}
   92dc8:	4770      	bx	lr
   92dca:	bf00      	nop

00092dcc <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   92dcc:	b480      	push	{r7}
   92dce:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92dd0:	4b0c      	ldr	r3, [pc, #48]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92dd2:	781b      	ldrb	r3, [r3, #0]
   92dd4:	2b09      	cmp	r3, #9
   92dd6:	d80f      	bhi.n	92df8 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
// 				  
// 			  }
// 			  
// 			  testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 			  
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   92dd8:	4b0a      	ldr	r3, [pc, #40]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92dda:	781b      	ldrb	r3, [r3, #0]
   92ddc:	461a      	mov	r2, r3
   92dde:	4b09      	ldr	r3, [pc, #36]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92de0:	4413      	add	r3, r2
   92de2:	2237      	movs	r2, #55	; 0x37
   92de4:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92de6:	4b07      	ldr	r3, [pc, #28]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92de8:	2201      	movs	r2, #1
   92dea:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92dec:	4b05      	ldr	r3, [pc, #20]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92dee:	781b      	ldrb	r3, [r3, #0]
   92df0:	3301      	adds	r3, #1
   92df2:	b2da      	uxtb	r2, r3
   92df4:	4b03      	ldr	r3, [pc, #12]	; (92e04 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92df6:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   92df8:	2300      	movs	r3, #0
	 	 
 }
   92dfa:	4618      	mov	r0, r3
   92dfc:	46bd      	mov	sp, r7
   92dfe:	bc80      	pop	{r7}
   92e00:	4770      	bx	lr
   92e02:	bf00      	nop
   92e04:	20072190 	.word	0x20072190

00092e08 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   92e08:	b580      	push	{r7, lr}
   92e0a:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   92e0c:	4b0c      	ldr	r3, [pc, #48]	; (92e40 <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   92e0e:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92e10:	4b0c      	ldr	r3, [pc, #48]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e12:	781b      	ldrb	r3, [r3, #0]
   92e14:	2b09      	cmp	r3, #9
   92e16:	d80f      	bhi.n	92e38 <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   92e18:	4b0a      	ldr	r3, [pc, #40]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e1a:	781b      	ldrb	r3, [r3, #0]
   92e1c:	461a      	mov	r2, r3
   92e1e:	4b09      	ldr	r3, [pc, #36]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e20:	4413      	add	r3, r2
   92e22:	2238      	movs	r2, #56	; 0x38
   92e24:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92e26:	4b07      	ldr	r3, [pc, #28]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e28:	2201      	movs	r2, #1
   92e2a:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92e2c:	4b05      	ldr	r3, [pc, #20]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e2e:	781b      	ldrb	r3, [r3, #0]
   92e30:	3301      	adds	r3, #1
   92e32:	b2da      	uxtb	r2, r3
   92e34:	4b03      	ldr	r3, [pc, #12]	; (92e44 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92e36:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   92e38:	2300      	movs	r3, #0
	 
	 
 }
   92e3a:	4618      	mov	r0, r3
   92e3c:	bd80      	pop	{r7, pc}
   92e3e:	bf00      	nop
   92e40:	00083141 	.word	0x00083141
   92e44:	20072190 	.word	0x20072190

00092e48 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   92e48:	b480      	push	{r7}
   92e4a:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92e4c:	4b0c      	ldr	r3, [pc, #48]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e4e:	781b      	ldrb	r3, [r3, #0]
   92e50:	2b09      	cmp	r3, #9
   92e52:	d80f      	bhi.n	92e74 <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   92e54:	4b0a      	ldr	r3, [pc, #40]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e56:	781b      	ldrb	r3, [r3, #0]
   92e58:	461a      	mov	r2, r3
   92e5a:	4b09      	ldr	r3, [pc, #36]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e5c:	4413      	add	r3, r2
   92e5e:	2239      	movs	r2, #57	; 0x39
   92e60:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92e62:	4b07      	ldr	r3, [pc, #28]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e64:	2201      	movs	r2, #1
   92e66:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92e68:	4b05      	ldr	r3, [pc, #20]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e6a:	781b      	ldrb	r3, [r3, #0]
   92e6c:	3301      	adds	r3, #1
   92e6e:	b2da      	uxtb	r2, r3
   92e70:	4b03      	ldr	r3, [pc, #12]	; (92e80 <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92e72:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   92e74:	2300      	movs	r3, #0
		 
		 
	 }
   92e76:	4618      	mov	r0, r3
   92e78:	46bd      	mov	sp, r7
   92e7a:	bc80      	pop	{r7}
   92e7c:	4770      	bx	lr
   92e7e:	bf00      	nop
   92e80:	20072190 	.word	0x20072190

00092e84 <Cl_Timer_Create_Tick150Ms_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_Tick150Ms_Event(void)
	 {
   92e84:	b480      	push	{r7}
   92e86:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92e88:	4b0c      	ldr	r3, [pc, #48]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92e8a:	781b      	ldrb	r3, [r3, #0]
   92e8c:	2b09      	cmp	r3, #9
   92e8e:	d80f      	bhi.n	92eb0 <Cl_Timer_Create_Tick150Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_150M ;
   92e90:	4b0a      	ldr	r3, [pc, #40]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92e92:	781b      	ldrb	r3, [r3, #0]
   92e94:	461a      	mov	r2, r3
   92e96:	4b09      	ldr	r3, [pc, #36]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92e98:	4413      	add	r3, r2
   92e9a:	225d      	movs	r2, #93	; 0x5d
   92e9c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92e9e:	4b07      	ldr	r3, [pc, #28]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92ea0:	2201      	movs	r2, #1
   92ea2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92ea4:	4b05      	ldr	r3, [pc, #20]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92ea6:	781b      	ldrb	r3, [r3, #0]
   92ea8:	3301      	adds	r3, #1
   92eaa:	b2da      	uxtb	r2, r3
   92eac:	4b03      	ldr	r3, [pc, #12]	; (92ebc <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   92eae:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   92eb0:	2300      	movs	r3, #0
		 
		 
	 }
   92eb2:	4618      	mov	r0, r3
   92eb4:	46bd      	mov	sp, r7
   92eb6:	bc80      	pop	{r7}
   92eb8:	4770      	bx	lr
   92eba:	bf00      	nop
   92ebc:	20072190 	.word	0x20072190

00092ec0 <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   92ec0:	b480      	push	{r7}
   92ec2:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92ec4:	4b0c      	ldr	r3, [pc, #48]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92ec6:	781b      	ldrb	r3, [r3, #0]
   92ec8:	2b09      	cmp	r3, #9
   92eca:	d80f      	bhi.n	92eec <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   92ecc:	4b0a      	ldr	r3, [pc, #40]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92ece:	781b      	ldrb	r3, [r3, #0]
   92ed0:	461a      	mov	r2, r3
   92ed2:	4b09      	ldr	r3, [pc, #36]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92ed4:	4413      	add	r3, r2
   92ed6:	223a      	movs	r2, #58	; 0x3a
   92ed8:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92eda:	4b07      	ldr	r3, [pc, #28]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92edc:	2201      	movs	r2, #1
   92ede:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92ee0:	4b05      	ldr	r3, [pc, #20]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92ee2:	781b      	ldrb	r3, [r3, #0]
   92ee4:	3301      	adds	r3, #1
   92ee6:	b2da      	uxtb	r2, r3
   92ee8:	4b03      	ldr	r3, [pc, #12]	; (92ef8 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   92eea:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   92eec:	2300      	movs	r3, #0
		 
		 
	 }
   92eee:	4618      	mov	r0, r3
   92ef0:	46bd      	mov	sp, r7
   92ef2:	bc80      	pop	{r7}
   92ef4:	4770      	bx	lr
   92ef6:	bf00      	nop
   92ef8:	20072190 	.word	0x20072190

00092efc <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   92efc:	b580      	push	{r7, lr}
   92efe:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   92f00:	4b14      	ldr	r3, [pc, #80]	; (92f54 <Cl_Timer_Create_TickSec_Event+0x58>)
   92f02:	781b      	ldrb	r3, [r3, #0]
   92f04:	3301      	adds	r3, #1
   92f06:	b2da      	uxtb	r2, r3
   92f08:	4b12      	ldr	r3, [pc, #72]	; (92f54 <Cl_Timer_Create_TickSec_Event+0x58>)
   92f0a:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92f0c:	4b12      	ldr	r3, [pc, #72]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f0e:	781b      	ldrb	r3, [r3, #0]
   92f10:	2b09      	cmp	r3, #9
   92f12:	d80f      	bhi.n	92f34 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   92f14:	4b10      	ldr	r3, [pc, #64]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f16:	781b      	ldrb	r3, [r3, #0]
   92f18:	461a      	mov	r2, r3
   92f1a:	4b0f      	ldr	r3, [pc, #60]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f1c:	4413      	add	r3, r2
   92f1e:	223b      	movs	r2, #59	; 0x3b
   92f20:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92f22:	4b0d      	ldr	r3, [pc, #52]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f24:	2201      	movs	r2, #1
   92f26:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92f28:	4b0b      	ldr	r3, [pc, #44]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f2a:	781b      	ldrb	r3, [r3, #0]
   92f2c:	3301      	adds	r3, #1
   92f2e:	b2da      	uxtb	r2, r3
   92f30:	4b09      	ldr	r3, [pc, #36]	; (92f58 <Cl_Timer_Create_TickSec_Event+0x5c>)
   92f32:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= 60)
   92f34:	4b07      	ldr	r3, [pc, #28]	; (92f54 <Cl_Timer_Create_TickSec_Event+0x58>)
   92f36:	781b      	ldrb	r3, [r3, #0]
   92f38:	2b3b      	cmp	r3, #59	; 0x3b
   92f3a:	d908      	bls.n	92f4e <Cl_Timer_Create_TickSec_Event+0x52>
		 {
			 Cl_Secondscnt = 0;
   92f3c:	4b05      	ldr	r3, [pc, #20]	; (92f54 <Cl_Timer_Create_TickSec_Event+0x58>)
   92f3e:	2200      	movs	r2, #0
   92f40:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   92f42:	4b06      	ldr	r3, [pc, #24]	; (92f5c <Cl_Timer_Create_TickSec_Event+0x60>)
   92f44:	4798      	blx	r3
   92f46:	4603      	mov	r3, r0
   92f48:	461a      	mov	r2, r3
   92f4a:	4b05      	ldr	r3, [pc, #20]	; (92f60 <Cl_Timer_Create_TickSec_Event+0x64>)
   92f4c:	701a      	strb	r2, [r3, #0]
			// tg_timer_minute();
		 }
			 return CL_OK;
   92f4e:	2300      	movs	r3, #0
		 
		
		 }
   92f50:	4618      	mov	r0, r3
   92f52:	bd80      	pop	{r7, pc}
   92f54:	20071a94 	.word	0x20071a94
   92f58:	20072190 	.word	0x20072190
   92f5c:	00092f65 	.word	0x00092f65
   92f60:	20072650 	.word	0x20072650

00092f64 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   92f64:	b480      	push	{r7}
   92f66:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   92f68:	4b0c      	ldr	r3, [pc, #48]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f6a:	781b      	ldrb	r3, [r3, #0]
   92f6c:	2b09      	cmp	r3, #9
   92f6e:	d80f      	bhi.n	92f90 <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   92f70:	4b0a      	ldr	r3, [pc, #40]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f72:	781b      	ldrb	r3, [r3, #0]
   92f74:	461a      	mov	r2, r3
   92f76:	4b09      	ldr	r3, [pc, #36]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f78:	4413      	add	r3, r2
   92f7a:	223c      	movs	r2, #60	; 0x3c
   92f7c:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92f7e:	4b07      	ldr	r3, [pc, #28]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f80:	2201      	movs	r2, #1
   92f82:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92f84:	4b05      	ldr	r3, [pc, #20]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f86:	781b      	ldrb	r3, [r3, #0]
   92f88:	3301      	adds	r3, #1
   92f8a:	b2da      	uxtb	r2, r3
   92f8c:	4b03      	ldr	r3, [pc, #12]	; (92f9c <Cl_Timer_Create_TickMin_Event+0x38>)
   92f8e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   92f90:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   92f92:	4618      	mov	r0, r3
   92f94:	46bd      	mov	sp, r7
   92f96:	bc80      	pop	{r7}
   92f98:	4770      	bx	lr
   92f9a:	bf00      	nop
   92f9c:	20072190 	.word	0x20072190

00092fa0 <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   92fa0:	b480      	push	{r7}
   92fa2:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   92fa4:	4b0c      	ldr	r3, [pc, #48]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fa6:	781b      	ldrb	r3, [r3, #0]
   92fa8:	2b0a      	cmp	r3, #10
   92faa:	d80f      	bhi.n	92fcc <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   92fac:	4b0a      	ldr	r3, [pc, #40]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fae:	781b      	ldrb	r3, [r3, #0]
   92fb0:	461a      	mov	r2, r3
   92fb2:	4b09      	ldr	r3, [pc, #36]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fb4:	4413      	add	r3, r2
   92fb6:	223d      	movs	r2, #61	; 0x3d
   92fb8:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92fba:	4b07      	ldr	r3, [pc, #28]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fbc:	2201      	movs	r2, #1
   92fbe:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92fc0:	4b05      	ldr	r3, [pc, #20]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fc2:	781b      	ldrb	r3, [r3, #0]
   92fc4:	3301      	adds	r3, #1
   92fc6:	b2da      	uxtb	r2, r3
   92fc8:	4b03      	ldr	r3, [pc, #12]	; (92fd8 <Cl_Timer_Create_TickHour_Event+0x38>)
   92fca:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   92fcc:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   92fce:	4618      	mov	r0, r3
   92fd0:	46bd      	mov	sp, r7
   92fd2:	bc80      	pop	{r7}
   92fd4:	4770      	bx	lr
   92fd6:	bf00      	nop
   92fd8:	20072190 	.word	0x20072190

00092fdc <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   92fdc:	b480      	push	{r7}
   92fde:	b085      	sub	sp, #20
   92fe0:	af00      	add	r7, sp, #0
   92fe2:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   92fe4:	4b07      	ldr	r3, [pc, #28]	; (93004 <mdelay+0x28>)
   92fe6:	681b      	ldr	r3, [r3, #0]
   92fe8:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   92fea:	bf00      	nop
   92fec:	4b05      	ldr	r3, [pc, #20]	; (93004 <mdelay+0x28>)
   92fee:	681a      	ldr	r2, [r3, #0]
   92ff0:	68fb      	ldr	r3, [r7, #12]
   92ff2:	1ad2      	subs	r2, r2, r3
   92ff4:	687b      	ldr	r3, [r7, #4]
   92ff6:	429a      	cmp	r2, r3
   92ff8:	d3f8      	bcc.n	92fec <mdelay+0x10>
}
   92ffa:	bf00      	nop
   92ffc:	3714      	adds	r7, #20
   92ffe:	46bd      	mov	sp, r7
   93000:	bc80      	pop	{r7}
   93002:	4770      	bx	lr
   93004:	20071a98 	.word	0x20071a98

00093008 <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   93008:	b580      	push	{r7, lr}
   9300a:	b082      	sub	sp, #8
   9300c:	af00      	add	r7, sp, #0
   9300e:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   93010:	6878      	ldr	r0, [r7, #4]
   93012:	4b03      	ldr	r3, [pc, #12]	; (93020 <cl_wait+0x18>)
   93014:	4798      	blx	r3
	return CL_OK;
   93016:	2300      	movs	r3, #0
}
   93018:	4618      	mov	r0, r3
   9301a:	3708      	adds	r7, #8
   9301c:	46bd      	mov	sp, r7
   9301e:	bd80      	pop	{r7, pc}
   93020:	00092fdd 	.word	0x00092fdd

00093024 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   93024:	b580      	push	{r7, lr}
   93026:	b082      	sub	sp, #8
   93028:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   9302a:	4b07      	ldr	r3, [pc, #28]	; (93048 <cl_systemtickcallback+0x24>)
   9302c:	4798      	blx	r3
   9302e:	4603      	mov	r3, r0
   93030:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   93032:	4b06      	ldr	r3, [pc, #24]	; (9304c <cl_systemtickcallback+0x28>)
   93034:	681b      	ldr	r3, [r3, #0]
   93036:	3301      	adds	r3, #1
   93038:	4a04      	ldr	r2, [pc, #16]	; (9304c <cl_systemtickcallback+0x28>)
   9303a:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   9303c:	2300      	movs	r3, #0
}
   9303e:	4618      	mov	r0, r3
   93040:	3708      	adds	r7, #8
   93042:	46bd      	mov	sp, r7
   93044:	bd80      	pop	{r7, pc}
   93046:	bf00      	nop
   93048:	00092bb5 	.word	0x00092bb5
   9304c:	20071a98 	.word	0x20071a98

00093050 <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   93050:	b480      	push	{r7}
   93052:	b085      	sub	sp, #20
   93054:	af00      	add	r7, sp, #0
   93056:	6078      	str	r0, [r7, #4]
   93058:	460b      	mov	r3, r1
   9305a:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   9305c:	2300      	movs	r3, #0
   9305e:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   93060:	687b      	ldr	r3, [r7, #4]
   93062:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   93064:	2300      	movs	r3, #0
   93066:	73fb      	strb	r3, [r7, #15]
   93068:	e007      	b.n	9307a <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   9306a:	7bfb      	ldrb	r3, [r7, #15]
   9306c:	687a      	ldr	r2, [r7, #4]
   9306e:	4413      	add	r3, r2
   93070:	2200      	movs	r2, #0
   93072:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   93074:	7bfb      	ldrb	r3, [r7, #15]
   93076:	3301      	adds	r3, #1
   93078:	73fb      	strb	r3, [r7, #15]
   9307a:	7bfa      	ldrb	r2, [r7, #15]
   9307c:	78fb      	ldrb	r3, [r7, #3]
   9307e:	429a      	cmp	r2, r3
   93080:	d3f3      	bcc.n	9306a <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   93082:	2300      	movs	r3, #0
}
   93084:	4618      	mov	r0, r3
   93086:	3714      	adds	r7, #20
   93088:	46bd      	mov	sp, r7
   9308a:	bc80      	pop	{r7}
   9308c:	4770      	bx	lr
   9308e:	bf00      	nop

00093090 <cl_utilities_CalConductivity>:

float cl_utilities_CalConductivity(uint16_t raw_cond,float temperature)
{
   93090:	b5f0      	push	{r4, r5, r6, r7, lr}
   93092:	b085      	sub	sp, #20
   93094:	af00      	add	r7, sp, #0
   93096:	4603      	mov	r3, r0
   93098:	6039      	str	r1, [r7, #0]
   9309a:	80fb      	strh	r3, [r7, #6]
			float conductivity, conductance;
			conductance = raw_cond;// /1000; 
   9309c:	88fa      	ldrh	r2, [r7, #6]
   9309e:	4b2a      	ldr	r3, [pc, #168]	; (93148 <cl_utilities_CalConductivity+0xb8>)
   930a0:	4610      	mov	r0, r2
   930a2:	4798      	blx	r3
   930a4:	4603      	mov	r3, r0
   930a6:	60fb      	str	r3, [r7, #12]
//			conductivity = (raw_cond -66.67)/100;                                 // raw conductance contains conductance of fixed 150 ohm resistance
	//		cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
			conductivity = conductance * 1.272;                             // Conductance * cell constant = conductivity
   930a8:	4b28      	ldr	r3, [pc, #160]	; (9314c <cl_utilities_CalConductivity+0xbc>)
   930aa:	68f8      	ldr	r0, [r7, #12]
   930ac:	4798      	blx	r3
   930ae:	4c28      	ldr	r4, [pc, #160]	; (93150 <cl_utilities_CalConductivity+0xc0>)
   930b0:	a321      	add	r3, pc, #132	; (adr r3, 93138 <cl_utilities_CalConductivity+0xa8>)
   930b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   930b6:	47a0      	blx	r4
   930b8:	4603      	mov	r3, r0
   930ba:	460c      	mov	r4, r1
   930bc:	4619      	mov	r1, r3
   930be:	4622      	mov	r2, r4
   930c0:	4b24      	ldr	r3, [pc, #144]	; (93154 <cl_utilities_CalConductivity+0xc4>)
   930c2:	4608      	mov	r0, r1
   930c4:	4611      	mov	r1, r2
   930c6:	4798      	blx	r3
   930c8:	4603      	mov	r3, r0
   930ca:	60bb      	str	r3, [r7, #8]
	//		conductivity = (0.0001*conductivity*conductivity + 0.032*conductivity) * 100;                          // Gopal: Need to check for offset if required based on the observations in IBP 02082017
 			conductivity = (conductivity/(1+(temperature  -25.0)*0.021));                    // conductivity compensated at 25 degrees using win-situ formula
   930cc:	4b1f      	ldr	r3, [pc, #124]	; (9314c <cl_utilities_CalConductivity+0xbc>)
   930ce:	68b8      	ldr	r0, [r7, #8]
   930d0:	4798      	blx	r3
   930d2:	4605      	mov	r5, r0
   930d4:	460e      	mov	r6, r1
   930d6:	4b1d      	ldr	r3, [pc, #116]	; (9314c <cl_utilities_CalConductivity+0xbc>)
   930d8:	6838      	ldr	r0, [r7, #0]
   930da:	4798      	blx	r3
   930dc:	4c1e      	ldr	r4, [pc, #120]	; (93158 <cl_utilities_CalConductivity+0xc8>)
   930de:	f04f 0200 	mov.w	r2, #0
   930e2:	4b1e      	ldr	r3, [pc, #120]	; (9315c <cl_utilities_CalConductivity+0xcc>)
   930e4:	47a0      	blx	r4
   930e6:	4603      	mov	r3, r0
   930e8:	460c      	mov	r4, r1
   930ea:	4618      	mov	r0, r3
   930ec:	4621      	mov	r1, r4
   930ee:	4c18      	ldr	r4, [pc, #96]	; (93150 <cl_utilities_CalConductivity+0xc0>)
   930f0:	a313      	add	r3, pc, #76	; (adr r3, 93140 <cl_utilities_CalConductivity+0xb0>)
   930f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   930f6:	47a0      	blx	r4
   930f8:	4603      	mov	r3, r0
   930fa:	460c      	mov	r4, r1
   930fc:	4618      	mov	r0, r3
   930fe:	4621      	mov	r1, r4
   93100:	4c17      	ldr	r4, [pc, #92]	; (93160 <cl_utilities_CalConductivity+0xd0>)
   93102:	f04f 0200 	mov.w	r2, #0
   93106:	4b17      	ldr	r3, [pc, #92]	; (93164 <cl_utilities_CalConductivity+0xd4>)
   93108:	47a0      	blx	r4
   9310a:	4603      	mov	r3, r0
   9310c:	460c      	mov	r4, r1
   9310e:	461a      	mov	r2, r3
   93110:	4623      	mov	r3, r4
   93112:	4c15      	ldr	r4, [pc, #84]	; (93168 <cl_utilities_CalConductivity+0xd8>)
   93114:	4628      	mov	r0, r5
   93116:	4631      	mov	r1, r6
   93118:	47a0      	blx	r4
   9311a:	4603      	mov	r3, r0
   9311c:	460c      	mov	r4, r1
   9311e:	4619      	mov	r1, r3
   93120:	4622      	mov	r2, r4
   93122:	4b0c      	ldr	r3, [pc, #48]	; (93154 <cl_utilities_CalConductivity+0xc4>)
   93124:	4608      	mov	r0, r1
   93126:	4611      	mov	r1, r2
   93128:	4798      	blx	r3
   9312a:	4603      	mov	r3, r0
   9312c:	60bb      	str	r3, [r7, #8]
//			return conductivity;
			return conductivity; ///10;
   9312e:	68bb      	ldr	r3, [r7, #8]
   93130:	4618      	mov	r0, r3
   93132:	3714      	adds	r7, #20
   93134:	46bd      	mov	sp, r7
   93136:	bdf0      	pop	{r4, r5, r6, r7, pc}
   93138:	ac083127 	.word	0xac083127
   9313c:	3ff45a1c 	.word	0x3ff45a1c
   93140:	24dd2f1b 	.word	0x24dd2f1b
   93144:	3f958106 	.word	0x3f958106
   93148:	000a64e1 	.word	0x000a64e1
   9314c:	000a5c69 	.word	0x000a5c69
   93150:	000a5d11 	.word	0x000a5d11
   93154:	000a62d5 	.word	0x000a62d5
   93158:	000a59a9 	.word	0x000a59a9
   9315c:	40390000 	.word	0x40390000
   93160:	000a59ad 	.word	0x000a59ad
   93164:	3ff00000 	.word	0x3ff00000
   93168:	000a5f65 	.word	0x000a5f65

0009316c <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   9316c:	b580      	push	{r7, lr}
   9316e:	b084      	sub	sp, #16
   93170:	af00      	add	r7, sp, #0
   93172:	4603      	mov	r3, r0
   93174:	6039      	str	r1, [r7, #0]
   93176:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   93178:	2300      	movs	r3, #0
   9317a:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   9317c:	2300      	movs	r3, #0
   9317e:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   93180:	2300      	movs	r3, #0
   93182:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   93184:	4b7e      	ldr	r3, [pc, #504]	; (93380 <cl_bp_controller+0x214>)
   93186:	781b      	ldrb	r3, [r3, #0]
   93188:	2b04      	cmp	r3, #4
   9318a:	f200 80f2 	bhi.w	93372 <cl_bp_controller+0x206>
   9318e:	a201      	add	r2, pc, #4	; (adr r2, 93194 <cl_bp_controller+0x28>)
   93190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93194:	000931a9 	.word	0x000931a9
   93198:	00093205 	.word	0x00093205
   9319c:	000932af 	.word	0x000932af
   931a0:	00093301 	.word	0x00093301
   931a4:	00093373 	.word	0x00093373
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   931a8:	79fb      	ldrb	r3, [r7, #7]
   931aa:	2b01      	cmp	r3, #1
   931ac:	d002      	beq.n	931b4 <cl_bp_controller+0x48>
   931ae:	2b02      	cmp	r3, #2
   931b0:	d00e      	beq.n	931d0 <cl_bp_controller+0x64>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   931b2:	e026      	b.n	93202 <cl_bp_controller+0x96>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   931b4:	683b      	ldr	r3, [r7, #0]
   931b6:	4a73      	ldr	r2, [pc, #460]	; (93384 <cl_bp_controller+0x218>)
   931b8:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   931ba:	4b72      	ldr	r3, [pc, #456]	; (93384 <cl_bp_controller+0x218>)
   931bc:	681b      	ldr	r3, [r3, #0]
   931be:	4a72      	ldr	r2, [pc, #456]	; (93388 <cl_bp_controller+0x21c>)
   931c0:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   931c2:	4b71      	ldr	r3, [pc, #452]	; (93388 <cl_bp_controller+0x21c>)
   931c4:	681b      	ldr	r3, [r3, #0]
   931c6:	4619      	mov	r1, r3
   931c8:	2003      	movs	r0, #3
   931ca:	4b70      	ldr	r3, [pc, #448]	; (9338c <cl_bp_controller+0x220>)
   931cc:	4798      	blx	r3
			break;
   931ce:	e018      	b.n	93202 <cl_bp_controller+0x96>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   931d0:	2101      	movs	r1, #1
   931d2:	2001      	movs	r0, #1
   931d4:	4b6e      	ldr	r3, [pc, #440]	; (93390 <cl_bp_controller+0x224>)
   931d6:	4798      	blx	r3
   931d8:	4603      	mov	r3, r0
   931da:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   931dc:	2003      	movs	r0, #3
   931de:	4b6d      	ldr	r3, [pc, #436]	; (93394 <cl_bp_controller+0x228>)
   931e0:	4798      	blx	r3
   931e2:	4603      	mov	r3, r0
   931e4:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   931e6:	4b6c      	ldr	r3, [pc, #432]	; (93398 <cl_bp_controller+0x22c>)
   931e8:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   931ea:	463b      	mov	r3, r7
   931ec:	2200      	movs	r2, #0
   931ee:	4619      	mov	r1, r3
   931f0:	2035      	movs	r0, #53	; 0x35
   931f2:	4b6a      	ldr	r3, [pc, #424]	; (9339c <cl_bp_controller+0x230>)
   931f4:	4798      	blx	r3
   931f6:	4603      	mov	r3, r0
   931f8:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   931fa:	4b61      	ldr	r3, [pc, #388]	; (93380 <cl_bp_controller+0x214>)
   931fc:	2201      	movs	r2, #1
   931fe:	701a      	strb	r2, [r3, #0]
			break;
   93200:	bf00      	nop
			
			default:break;
			
		}
		break;
   93202:	e0b7      	b.n	93374 <cl_bp_controller+0x208>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   93204:	79fb      	ldrb	r3, [r7, #7]
   93206:	3b01      	subs	r3, #1
   93208:	2b06      	cmp	r3, #6
   9320a:	d84e      	bhi.n	932aa <cl_bp_controller+0x13e>
   9320c:	a201      	add	r2, pc, #4	; (adr r2, 93214 <cl_bp_controller+0xa8>)
   9320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93212:	bf00      	nop
   93214:	00093263 	.word	0x00093263
   93218:	00093231 	.word	0x00093231
   9321c:	000932ab 	.word	0x000932ab
   93220:	00093275 	.word	0x00093275
   93224:	000932a3 	.word	0x000932a3
   93228:	000932ab 	.word	0x000932ab
   9322c:	000932ab 	.word	0x000932ab
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   93230:	2003      	movs	r0, #3
   93232:	4b58      	ldr	r3, [pc, #352]	; (93394 <cl_bp_controller+0x228>)
   93234:	4798      	blx	r3
   93236:	4603      	mov	r3, r0
   93238:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9323a:	2101      	movs	r1, #1
   9323c:	2001      	movs	r0, #1
   9323e:	4b54      	ldr	r3, [pc, #336]	; (93390 <cl_bp_controller+0x224>)
   93240:	4798      	blx	r3
   93242:	4603      	mov	r3, r0
   93244:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   93246:	4b54      	ldr	r3, [pc, #336]	; (93398 <cl_bp_controller+0x22c>)
   93248:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   9324a:	463b      	mov	r3, r7
   9324c:	2200      	movs	r2, #0
   9324e:	4619      	mov	r1, r3
   93250:	2035      	movs	r0, #53	; 0x35
   93252:	4b52      	ldr	r3, [pc, #328]	; (9339c <cl_bp_controller+0x230>)
   93254:	4798      	blx	r3
   93256:	4603      	mov	r3, r0
   93258:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   9325a:	4b49      	ldr	r3, [pc, #292]	; (93380 <cl_bp_controller+0x214>)
   9325c:	2201      	movs	r2, #1
   9325e:	701a      	strb	r2, [r3, #0]
			
			break;
   93260:	e024      	b.n	932ac <cl_bp_controller+0x140>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   93262:	683b      	ldr	r3, [r7, #0]
   93264:	4619      	mov	r1, r3
   93266:	2003      	movs	r0, #3
   93268:	4b48      	ldr	r3, [pc, #288]	; (9338c <cl_bp_controller+0x220>)
   9326a:	4798      	blx	r3
			bp_state =  CL_BP_STATE_STARTED;
   9326c:	4b44      	ldr	r3, [pc, #272]	; (93380 <cl_bp_controller+0x214>)
   9326e:	2201      	movs	r2, #1
   93270:	701a      	strb	r2, [r3, #0]
			break;
   93272:	e01b      	b.n	932ac <cl_bp_controller+0x140>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   93274:	2003      	movs	r0, #3
   93276:	4b4a      	ldr	r3, [pc, #296]	; (933a0 <cl_bp_controller+0x234>)
   93278:	4798      	blx	r3
   9327a:	4603      	mov	r3, r0
   9327c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9327e:	4b46      	ldr	r3, [pc, #280]	; (93398 <cl_bp_controller+0x22c>)
   93280:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   93282:	463b      	mov	r3, r7
   93284:	2200      	movs	r2, #0
   93286:	4619      	mov	r1, r3
   93288:	2036      	movs	r0, #54	; 0x36
   9328a:	4b44      	ldr	r3, [pc, #272]	; (9339c <cl_bp_controller+0x230>)
   9328c:	4798      	blx	r3
   9328e:	4603      	mov	r3, r0
   93290:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   93292:	4b44      	ldr	r3, [pc, #272]	; (933a4 <cl_bp_controller+0x238>)
   93294:	4798      	blx	r3
   93296:	4603      	mov	r3, r0
   93298:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   9329a:	4b39      	ldr	r3, [pc, #228]	; (93380 <cl_bp_controller+0x214>)
   9329c:	2202      	movs	r2, #2
   9329e:	701a      	strb	r2, [r3, #0]
			break;
   932a0:	e004      	b.n	932ac <cl_bp_controller+0x140>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   932a2:	4b37      	ldr	r3, [pc, #220]	; (93380 <cl_bp_controller+0x214>)
   932a4:	2200      	movs	r2, #0
   932a6:	701a      	strb	r2, [r3, #0]
			break;
   932a8:	e000      	b.n	932ac <cl_bp_controller+0x140>
			default:break;
   932aa:	bf00      	nop
			
		}
		break;
   932ac:	e062      	b.n	93374 <cl_bp_controller+0x208>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   932ae:	79fb      	ldrb	r3, [r7, #7]
   932b0:	2b01      	cmp	r3, #1
   932b2:	d002      	beq.n	932ba <cl_bp_controller+0x14e>
   932b4:	2b02      	cmp	r3, #2
   932b6:	d009      	beq.n	932cc <cl_bp_controller+0x160>
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   932b8:	e021      	b.n	932fe <cl_bp_controller+0x192>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   932ba:	683b      	ldr	r3, [r7, #0]
   932bc:	4a31      	ldr	r2, [pc, #196]	; (93384 <cl_bp_controller+0x218>)
   932be:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   932c0:	683b      	ldr	r3, [r7, #0]
   932c2:	4619      	mov	r1, r3
   932c4:	2003      	movs	r0, #3
   932c6:	4b31      	ldr	r3, [pc, #196]	; (9338c <cl_bp_controller+0x220>)
   932c8:	4798      	blx	r3
			break;
   932ca:	e018      	b.n	932fe <cl_bp_controller+0x192>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   932cc:	2003      	movs	r0, #3
   932ce:	4b31      	ldr	r3, [pc, #196]	; (93394 <cl_bp_controller+0x228>)
   932d0:	4798      	blx	r3
   932d2:	4603      	mov	r3, r0
   932d4:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   932d6:	2101      	movs	r1, #1
   932d8:	2001      	movs	r0, #1
   932da:	4b2d      	ldr	r3, [pc, #180]	; (93390 <cl_bp_controller+0x224>)
   932dc:	4798      	blx	r3
   932de:	4603      	mov	r3, r0
   932e0:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   932e2:	4b2d      	ldr	r3, [pc, #180]	; (93398 <cl_bp_controller+0x22c>)
   932e4:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   932e6:	463b      	mov	r3, r7
   932e8:	2200      	movs	r2, #0
   932ea:	4619      	mov	r1, r3
   932ec:	2035      	movs	r0, #53	; 0x35
   932ee:	4b2b      	ldr	r3, [pc, #172]	; (9339c <cl_bp_controller+0x230>)
   932f0:	4798      	blx	r3
   932f2:	4603      	mov	r3, r0
   932f4:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   932f6:	4b22      	ldr	r3, [pc, #136]	; (93380 <cl_bp_controller+0x214>)
   932f8:	2201      	movs	r2, #1
   932fa:	701a      	strb	r2, [r3, #0]
			break;
   932fc:	bf00      	nop
			default:break;
			
		}
		break;
   932fe:	e039      	b.n	93374 <cl_bp_controller+0x208>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   93300:	79fb      	ldrb	r3, [r7, #7]
   93302:	2b02      	cmp	r3, #2
   93304:	d008      	beq.n	93318 <cl_bp_controller+0x1ac>
   93306:	2b04      	cmp	r3, #4
   93308:	d01f      	beq.n	9334a <cl_bp_controller+0x1de>
   9330a:	2b01      	cmp	r3, #1
   9330c:	d000      	beq.n	93310 <cl_bp_controller+0x1a4>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   9330e:	e02f      	b.n	93370 <cl_bp_controller+0x204>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   93310:	683b      	ldr	r3, [r7, #0]
   93312:	4a1c      	ldr	r2, [pc, #112]	; (93384 <cl_bp_controller+0x218>)
   93314:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   93316:	e02b      	b.n	93370 <cl_bp_controller+0x204>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   93318:	2003      	movs	r0, #3
   9331a:	4b1e      	ldr	r3, [pc, #120]	; (93394 <cl_bp_controller+0x228>)
   9331c:	4798      	blx	r3
   9331e:	4603      	mov	r3, r0
   93320:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   93322:	2101      	movs	r1, #1
   93324:	2001      	movs	r0, #1
   93326:	4b1a      	ldr	r3, [pc, #104]	; (93390 <cl_bp_controller+0x224>)
   93328:	4798      	blx	r3
   9332a:	4603      	mov	r3, r0
   9332c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9332e:	4b1a      	ldr	r3, [pc, #104]	; (93398 <cl_bp_controller+0x22c>)
   93330:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   93332:	463b      	mov	r3, r7
   93334:	2200      	movs	r2, #0
   93336:	4619      	mov	r1, r3
   93338:	2035      	movs	r0, #53	; 0x35
   9333a:	4b18      	ldr	r3, [pc, #96]	; (9339c <cl_bp_controller+0x230>)
   9333c:	4798      	blx	r3
   9333e:	4603      	mov	r3, r0
   93340:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   93342:	4b0f      	ldr	r3, [pc, #60]	; (93380 <cl_bp_controller+0x214>)
   93344:	2201      	movs	r2, #1
   93346:	701a      	strb	r2, [r3, #0]
			break;
   93348:	e012      	b.n	93370 <cl_bp_controller+0x204>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   9334a:	2003      	movs	r0, #3
   9334c:	4b14      	ldr	r3, [pc, #80]	; (933a0 <cl_bp_controller+0x234>)
   9334e:	4798      	blx	r3
   93350:	4603      	mov	r3, r0
   93352:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   93354:	4b10      	ldr	r3, [pc, #64]	; (93398 <cl_bp_controller+0x22c>)
   93356:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   93358:	4b09      	ldr	r3, [pc, #36]	; (93380 <cl_bp_controller+0x214>)
   9335a:	2202      	movs	r2, #2
   9335c:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   9335e:	463b      	mov	r3, r7
   93360:	2200      	movs	r2, #0
   93362:	4619      	mov	r1, r3
   93364:	2036      	movs	r0, #54	; 0x36
   93366:	4b0d      	ldr	r3, [pc, #52]	; (9339c <cl_bp_controller+0x230>)
   93368:	4798      	blx	r3
   9336a:	4603      	mov	r3, r0
   9336c:	73fb      	strb	r3, [r7, #15]
			break;
   9336e:	bf00      	nop
			default:break;
			
		}
		break;
   93370:	e000      	b.n	93374 <cl_bp_controller+0x208>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   93372:	bf00      	nop
		
		
	}
	return CL_OK;
   93374:	2300      	movs	r3, #0
   93376:	4618      	mov	r0, r3
   93378:	3710      	adds	r7, #16
   9337a:	46bd      	mov	sp, r7
   9337c:	bd80      	pop	{r7, pc}
   9337e:	bf00      	nop
   93380:	20071a9c 	.word	0x20071a9c
   93384:	20071aa0 	.word	0x20071aa0
   93388:	20070a2c 	.word	0x20070a2c
   9338c:	00099b21 	.word	0x00099b21
   93390:	00082de1 	.word	0x00082de1
   93394:	00099a09 	.word	0x00099a09
   93398:	000933a9 	.word	0x000933a9
   9339c:	0009b805 	.word	0x0009b805
   933a0:	00099a45 	.word	0x00099a45
   933a4:	000933c1 	.word	0x000933c1

000933a8 <cl_bp_pumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,bp_period = 0,bp_avg_period = 0, bp_freq_in_min = 0;
static Cl_Uint16Type bp_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   933a8:	b480      	push	{r7}
   933aa:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   933ac:	4b03      	ldr	r3, [pc, #12]	; (933bc <cl_bp_pumpFeedback_start+0x14>)
   933ae:	2201      	movs	r2, #1
   933b0:	701a      	strb	r2, [r3, #0]
	return 0;
   933b2:	2300      	movs	r3, #0
}
   933b4:	4618      	mov	r0, r3
   933b6:	46bd      	mov	sp, r7
   933b8:	bc80      	pop	{r7}
   933ba:	4770      	bx	lr
   933bc:	20071aa6 	.word	0x20071aa6

000933c0 <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   933c0:	b480      	push	{r7}
   933c2:	af00      	add	r7, sp, #0
	
	return 0;
   933c4:	2300      	movs	r3, #0
}
   933c6:	4618      	mov	r0, r3
   933c8:	46bd      	mov	sp, r7
   933ca:	bc80      	pop	{r7}
   933cc:	4770      	bx	lr
   933ce:	bf00      	nop

000933d0 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   933d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   933d2:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   933d4:	4b64      	ldr	r3, [pc, #400]	; (93568 <cl_bp_pumpFeedback_timer+0x198>)
   933d6:	781b      	ldrb	r3, [r3, #0]
   933d8:	2b00      	cmp	r3, #0
   933da:	f000 80b9 	beq.w	93550 <cl_bp_pumpFeedback_timer+0x180>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   933de:	4963      	ldr	r1, [pc, #396]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   933e0:	201c      	movs	r0, #28
   933e2:	4b63      	ldr	r3, [pc, #396]	; (93570 <cl_bp_pumpFeedback_timer+0x1a0>)
   933e4:	4798      	blx	r3

	fivemscounter++;
   933e6:	4b63      	ldr	r3, [pc, #396]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   933e8:	881b      	ldrh	r3, [r3, #0]
   933ea:	3301      	adds	r3, #1
   933ec:	b29a      	uxth	r2, r3
   933ee:	4b61      	ldr	r3, [pc, #388]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   933f0:	801a      	strh	r2, [r3, #0]
			if(fivemscounter > 1000)
   933f2:	4b60      	ldr	r3, [pc, #384]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   933f4:	881b      	ldrh	r3, [r3, #0]
   933f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   933fa:	d903      	bls.n	93404 <cl_bp_pumpFeedback_timer+0x34>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   933fc:	2101      	movs	r1, #1
   933fe:	2037      	movs	r0, #55	; 0x37
   93400:	4b5d      	ldr	r3, [pc, #372]	; (93578 <cl_bp_pumpFeedback_timer+0x1a8>)
   93402:	4798      	blx	r3
			}
			if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   93404:	4b58      	ldr	r3, [pc, #352]	; (93568 <cl_bp_pumpFeedback_timer+0x198>)
   93406:	781b      	ldrb	r3, [r3, #0]
   93408:	2b01      	cmp	r3, #1
   9340a:	d106      	bne.n	9341a <cl_bp_pumpFeedback_timer+0x4a>
   9340c:	4b5b      	ldr	r3, [pc, #364]	; (9357c <cl_bp_pumpFeedback_timer+0x1ac>)
   9340e:	881b      	ldrh	r3, [r3, #0]
   93410:	2b02      	cmp	r3, #2
   93412:	d902      	bls.n	9341a <cl_bp_pumpFeedback_timer+0x4a>
			{
				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   93414:	4b54      	ldr	r3, [pc, #336]	; (93568 <cl_bp_pumpFeedback_timer+0x198>)
   93416:	2202      	movs	r2, #2
   93418:	701a      	strb	r2, [r3, #0]
			}
	
			//#if 0
			if(count_state == false)
   9341a:	4b59      	ldr	r3, [pc, #356]	; (93580 <cl_bp_pumpFeedback_timer+0x1b0>)
   9341c:	781b      	ldrb	r3, [r3, #0]
   9341e:	f083 0301 	eor.w	r3, r3, #1
   93422:	b2db      	uxtb	r3, r3
   93424:	2b00      	cmp	r3, #0
   93426:	d012      	beq.n	9344e <cl_bp_pumpFeedback_timer+0x7e>
			{
				if(bp_rotataion_marker == 0 )
   93428:	4b50      	ldr	r3, [pc, #320]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   9342a:	881b      	ldrh	r3, [r3, #0]
   9342c:	2b00      	cmp	r3, #0
   9342e:	f040 808b 	bne.w	93548 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   93432:	4b54      	ldr	r3, [pc, #336]	; (93584 <cl_bp_pumpFeedback_timer+0x1b4>)
   93434:	881a      	ldrh	r2, [r3, #0]
   93436:	4b4d      	ldr	r3, [pc, #308]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   93438:	881b      	ldrh	r3, [r3, #0]
   9343a:	429a      	cmp	r2, r3
   9343c:	f000 8084 	beq.w	93548 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   93440:	4b4f      	ldr	r3, [pc, #316]	; (93580 <cl_bp_pumpFeedback_timer+0x1b0>)
   93442:	2201      	movs	r2, #1
   93444:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						fivemscounter = 0;
   93446:	4b4b      	ldr	r3, [pc, #300]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   93448:	2200      	movs	r2, #0
   9344a:	801a      	strh	r2, [r3, #0]
   9344c:	e07c      	b.n	93548 <cl_bp_pumpFeedback_timer+0x178>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   9344e:	4b47      	ldr	r3, [pc, #284]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   93450:	881b      	ldrh	r3, [r3, #0]
   93452:	2b00      	cmp	r3, #0
   93454:	d178      	bne.n	93548 <cl_bp_pumpFeedback_timer+0x178>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   93456:	4b4b      	ldr	r3, [pc, #300]	; (93584 <cl_bp_pumpFeedback_timer+0x1b4>)
   93458:	881a      	ldrh	r2, [r3, #0]
   9345a:	4b44      	ldr	r3, [pc, #272]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   9345c:	881b      	ldrh	r3, [r3, #0]
   9345e:	429a      	cmp	r2, r3
   93460:	d072      	beq.n	93548 <cl_bp_pumpFeedback_timer+0x178>
					{
						count_state = true;
   93462:	4b47      	ldr	r3, [pc, #284]	; (93580 <cl_bp_pumpFeedback_timer+0x1b0>)
   93464:	2201      	movs	r2, #1
   93466:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   93468:	4b44      	ldr	r3, [pc, #272]	; (9357c <cl_bp_pumpFeedback_timer+0x1ac>)
   9346a:	881b      	ldrh	r3, [r3, #0]
   9346c:	3301      	adds	r3, #1
   9346e:	b29a      	uxth	r2, r3
   93470:	4b42      	ldr	r3, [pc, #264]	; (9357c <cl_bp_pumpFeedback_timer+0x1ac>)
   93472:	801a      	strh	r2, [r3, #0]
						bp_period = fivemscounter*100;
   93474:	4b3f      	ldr	r3, [pc, #252]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   93476:	881b      	ldrh	r3, [r3, #0]
   93478:	461a      	mov	r2, r3
   9347a:	0092      	lsls	r2, r2, #2
   9347c:	4413      	add	r3, r2
   9347e:	461a      	mov	r2, r3
   93480:	0091      	lsls	r1, r2, #2
   93482:	461a      	mov	r2, r3
   93484:	460b      	mov	r3, r1
   93486:	4413      	add	r3, r2
   93488:	009b      	lsls	r3, r3, #2
   9348a:	b29a      	uxth	r2, r3
   9348c:	4b3e      	ldr	r3, [pc, #248]	; (93588 <cl_bp_pumpFeedback_timer+0x1b8>)
   9348e:	801a      	strh	r2, [r3, #0]
				
						if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   93490:	4b35      	ldr	r3, [pc, #212]	; (93568 <cl_bp_pumpFeedback_timer+0x198>)
   93492:	781b      	ldrb	r3, [r3, #0]
   93494:	2b01      	cmp	r3, #1
   93496:	d04a      	beq.n	9352e <cl_bp_pumpFeedback_timer+0x15e>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   93498:	4b3b      	ldr	r3, [pc, #236]	; (93588 <cl_bp_pumpFeedback_timer+0x1b8>)
   9349a:	881b      	ldrh	r3, [r3, #0]
   9349c:	461a      	mov	r2, r3
   9349e:	4b3b      	ldr	r3, [pc, #236]	; (9358c <cl_bp_pumpFeedback_timer+0x1bc>)
   934a0:	4610      	mov	r0, r2
   934a2:	4798      	blx	r3
   934a4:	4605      	mov	r5, r0
   934a6:	460e      	mov	r6, r1
   934a8:	4b39      	ldr	r3, [pc, #228]	; (93590 <cl_bp_pumpFeedback_timer+0x1c0>)
   934aa:	881b      	ldrh	r3, [r3, #0]
   934ac:	461a      	mov	r2, r3
   934ae:	4b37      	ldr	r3, [pc, #220]	; (9358c <cl_bp_pumpFeedback_timer+0x1bc>)
   934b0:	4610      	mov	r0, r2
   934b2:	4798      	blx	r3
   934b4:	4c37      	ldr	r4, [pc, #220]	; (93594 <cl_bp_pumpFeedback_timer+0x1c4>)
   934b6:	a328      	add	r3, pc, #160	; (adr r3, 93558 <cl_bp_pumpFeedback_timer+0x188>)
   934b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   934bc:	47a0      	blx	r4
   934be:	4603      	mov	r3, r0
   934c0:	460c      	mov	r4, r1
   934c2:	461a      	mov	r2, r3
   934c4:	4623      	mov	r3, r4
   934c6:	4c34      	ldr	r4, [pc, #208]	; (93598 <cl_bp_pumpFeedback_timer+0x1c8>)
   934c8:	4628      	mov	r0, r5
   934ca:	4631      	mov	r1, r6
   934cc:	47a0      	blx	r4
   934ce:	4603      	mov	r3, r0
   934d0:	2b00      	cmp	r3, #0
   934d2:	d105      	bne.n	934e0 <cl_bp_pumpFeedback_timer+0x110>
   934d4:	4b2c      	ldr	r3, [pc, #176]	; (93588 <cl_bp_pumpFeedback_timer+0x1b8>)
   934d6:	881b      	ldrh	r3, [r3, #0]
   934d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
   934dc:	4293      	cmp	r3, r2
   934de:	d904      	bls.n	934ea <cl_bp_pumpFeedback_timer+0x11a>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
							Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   934e0:	2101      	movs	r1, #1
   934e2:	2037      	movs	r0, #55	; 0x37
   934e4:	4b24      	ldr	r3, [pc, #144]	; (93578 <cl_bp_pumpFeedback_timer+0x1a8>)
   934e6:	4798      	blx	r3
   934e8:	e021      	b.n	9352e <cl_bp_pumpFeedback_timer+0x15e>
							}
							else if(bp_period < (0.99 *bp_expected_period))
   934ea:	4b27      	ldr	r3, [pc, #156]	; (93588 <cl_bp_pumpFeedback_timer+0x1b8>)
   934ec:	881b      	ldrh	r3, [r3, #0]
   934ee:	461a      	mov	r2, r3
   934f0:	4b26      	ldr	r3, [pc, #152]	; (9358c <cl_bp_pumpFeedback_timer+0x1bc>)
   934f2:	4610      	mov	r0, r2
   934f4:	4798      	blx	r3
   934f6:	4605      	mov	r5, r0
   934f8:	460e      	mov	r6, r1
   934fa:	4b25      	ldr	r3, [pc, #148]	; (93590 <cl_bp_pumpFeedback_timer+0x1c0>)
   934fc:	881b      	ldrh	r3, [r3, #0]
   934fe:	461a      	mov	r2, r3
   93500:	4b22      	ldr	r3, [pc, #136]	; (9358c <cl_bp_pumpFeedback_timer+0x1bc>)
   93502:	4610      	mov	r0, r2
   93504:	4798      	blx	r3
   93506:	4c23      	ldr	r4, [pc, #140]	; (93594 <cl_bp_pumpFeedback_timer+0x1c4>)
   93508:	a315      	add	r3, pc, #84	; (adr r3, 93560 <cl_bp_pumpFeedback_timer+0x190>)
   9350a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9350e:	47a0      	blx	r4
   93510:	4603      	mov	r3, r0
   93512:	460c      	mov	r4, r1
   93514:	461a      	mov	r2, r3
   93516:	4623      	mov	r3, r4
   93518:	4c20      	ldr	r4, [pc, #128]	; (9359c <cl_bp_pumpFeedback_timer+0x1cc>)
   9351a:	4628      	mov	r0, r5
   9351c:	4631      	mov	r1, r6
   9351e:	47a0      	blx	r4
   93520:	4603      	mov	r3, r0
   93522:	2b00      	cmp	r3, #0
   93524:	d003      	beq.n	9352e <cl_bp_pumpFeedback_timer+0x15e>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_FAST;
							Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   93526:	2101      	movs	r1, #1
   93528:	2036      	movs	r0, #54	; 0x36
   9352a:	4b13      	ldr	r3, [pc, #76]	; (93578 <cl_bp_pumpFeedback_timer+0x1a8>)
   9352c:	4798      	blx	r3
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   9352e:	4b16      	ldr	r3, [pc, #88]	; (93588 <cl_bp_pumpFeedback_timer+0x1b8>)
   93530:	881b      	ldrh	r3, [r3, #0]
   93532:	461a      	mov	r2, r3
   93534:	f64e 2360 	movw	r3, #60000	; 0xea60
   93538:	fb93 f3f2 	sdiv	r3, r3, r2
   9353c:	b29a      	uxth	r2, r3
   9353e:	4b18      	ldr	r3, [pc, #96]	; (935a0 <cl_bp_pumpFeedback_timer+0x1d0>)
   93540:	801a      	strh	r2, [r3, #0]
						fivemscounter = 0;
   93542:	4b0c      	ldr	r3, [pc, #48]	; (93574 <cl_bp_pumpFeedback_timer+0x1a4>)
   93544:	2200      	movs	r2, #0
   93546:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   93548:	4b08      	ldr	r3, [pc, #32]	; (9356c <cl_bp_pumpFeedback_timer+0x19c>)
   9354a:	881a      	ldrh	r2, [r3, #0]
   9354c:	4b0d      	ldr	r3, [pc, #52]	; (93584 <cl_bp_pumpFeedback_timer+0x1b4>)
   9354e:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   93550:	2300      	movs	r3, #0
}
   93552:	4618      	mov	r0, r3
   93554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   93556:	bf00      	nop
   93558:	c28f5c29 	.word	0xc28f5c29
   9355c:	3ff028f5 	.word	0x3ff028f5
   93560:	7ae147ae 	.word	0x7ae147ae
   93564:	3fefae14 	.word	0x3fefae14
   93568:	20071aa6 	.word	0x20071aa6
   9356c:	20070a30 	.word	0x20070a30
   93570:	0008e6a1 	.word	0x0008e6a1
   93574:	20071aa8 	.word	0x20071aa8
   93578:	0008302d 	.word	0x0008302d
   9357c:	20071aae 	.word	0x20071aae
   93580:	20071ab0 	.word	0x20071ab0
   93584:	20070a32 	.word	0x20070a32
   93588:	20071aaa 	.word	0x20071aaa
   9358c:	000a5c45 	.word	0x000a5c45
   93590:	20071aa4 	.word	0x20071aa4
   93594:	000a5d11 	.word	0x000a5d11
   93598:	000a6231 	.word	0x000a6231
   9359c:	000a61f5 	.word	0x000a61f5
   935a0:	20071aac 	.word	0x20071aac

000935a4 <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   935a4:	b580      	push	{r7, lr}
   935a6:	b084      	sub	sp, #16
   935a8:	af00      	add	r7, sp, #0
   935aa:	4603      	mov	r3, r0
   935ac:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   935ae:	2300      	movs	r3, #0
   935b0:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   935b2:	4b28      	ldr	r3, [pc, #160]	; (93654 <cl_deaeration_controller+0xb0>)
   935b4:	781b      	ldrb	r3, [r3, #0]
   935b6:	2b01      	cmp	r3, #1
   935b8:	d00d      	beq.n	935d6 <cl_deaeration_controller+0x32>
   935ba:	2b02      	cmp	r3, #2
   935bc:	d02a      	beq.n	93614 <cl_deaeration_controller+0x70>
   935be:	2b00      	cmp	r3, #0
   935c0:	d000      	beq.n	935c4 <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   935c2:	e042      	b.n	9364a <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   935c4:	79fb      	ldrb	r3, [r7, #7]
   935c6:	2b00      	cmp	r3, #0
   935c8:	d000      	beq.n	935cc <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   935ca:	e003      	b.n	935d4 <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   935cc:	4b21      	ldr	r3, [pc, #132]	; (93654 <cl_deaeration_controller+0xb0>)
   935ce:	2201      	movs	r2, #1
   935d0:	701a      	strb	r2, [r3, #0]
					break;
   935d2:	bf00      	nop
					default:break;
				}
		break;
   935d4:	e039      	b.n	9364a <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   935d6:	79fb      	ldrb	r3, [r7, #7]
   935d8:	2b01      	cmp	r3, #1
   935da:	d002      	beq.n	935e2 <cl_deaeration_controller+0x3e>
   935dc:	2b02      	cmp	r3, #2
   935de:	d004      	beq.n	935ea <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   935e0:	e017      	b.n	93612 <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   935e2:	4b1c      	ldr	r3, [pc, #112]	; (93654 <cl_deaeration_controller+0xb0>)
   935e4:	2200      	movs	r2, #0
   935e6:	701a      	strb	r2, [r3, #0]
				break;
   935e8:	e013      	b.n	93612 <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   935ea:	f107 030c 	add.w	r3, r7, #12
   935ee:	4619      	mov	r1, r3
   935f0:	200a      	movs	r0, #10
   935f2:	4b19      	ldr	r3, [pc, #100]	; (93658 <cl_deaeration_controller+0xb4>)
   935f4:	4798      	blx	r3
				if (dac2_status < 10)
   935f6:	89bb      	ldrh	r3, [r7, #12]
   935f8:	2b09      	cmp	r3, #9
   935fa:	d806      	bhi.n	9360a <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   935fc:	2013      	movs	r0, #19
   935fe:	4b17      	ldr	r3, [pc, #92]	; (9365c <cl_deaeration_controller+0xb8>)
   93600:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   93602:	4b14      	ldr	r3, [pc, #80]	; (93654 <cl_deaeration_controller+0xb0>)
   93604:	2202      	movs	r2, #2
   93606:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   93608:	e002      	b.n	93610 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   9360a:	2013      	movs	r0, #19
   9360c:	4b14      	ldr	r3, [pc, #80]	; (93660 <cl_deaeration_controller+0xbc>)
   9360e:	4798      	blx	r3
				}
				break;
   93610:	bf00      	nop
				default:
				break;
			}
		break;
   93612:	e01a      	b.n	9364a <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   93614:	79fb      	ldrb	r3, [r7, #7]
   93616:	2b01      	cmp	r3, #1
   93618:	d002      	beq.n	93620 <cl_deaeration_controller+0x7c>
   9361a:	2b03      	cmp	r3, #3
   9361c:	d005      	beq.n	9362a <cl_deaeration_controller+0x86>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   9361e:	e013      	b.n	93648 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   93620:	4b0c      	ldr	r3, [pc, #48]	; (93654 <cl_deaeration_controller+0xb0>)
   93622:	2200      	movs	r2, #0
   93624:	701a      	strb	r2, [r3, #0]
						break;
   93626:	bf00      	nop
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   93628:	e00e      	b.n	93648 <cl_deaeration_controller+0xa4>
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
						break;
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   9362a:	f107 030c 	add.w	r3, r7, #12
   9362e:	4619      	mov	r1, r3
   93630:	200a      	movs	r0, #10
   93632:	4b09      	ldr	r3, [pc, #36]	; (93658 <cl_deaeration_controller+0xb4>)
   93634:	4798      	blx	r3
						if (dac2_status > 5)
   93636:	89bb      	ldrh	r3, [r7, #12]
   93638:	2b05      	cmp	r3, #5
   9363a:	d905      	bls.n	93648 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   9363c:	2013      	movs	r0, #19
   9363e:	4b08      	ldr	r3, [pc, #32]	; (93660 <cl_deaeration_controller+0xbc>)
   93640:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   93642:	4b04      	ldr	r3, [pc, #16]	; (93654 <cl_deaeration_controller+0xb0>)
   93644:	2201      	movs	r2, #1
   93646:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   93648:	bf00      	nop
		default:break;
	}

	return CL_OK;
   9364a:	2300      	movs	r3, #0
   9364c:	4618      	mov	r0, r3
   9364e:	3710      	adds	r7, #16
   93650:	46bd      	mov	sp, r7
   93652:	bd80      	pop	{r7, pc}
   93654:	20071ab1 	.word	0x20071ab1
   93658:	0008e6a1 	.word	0x0008e6a1
   9365c:	00099aa9 	.word	0x00099aa9
   93660:	00099ac9 	.word	0x00099ac9

00093664 <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static Cl_Uint16Type toggle_count_flow = 0;
	
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   93664:	b580      	push	{r7, lr}
   93666:	b084      	sub	sp, #16
   93668:	af00      	add	r7, sp, #0
   9366a:	4603      	mov	r3, r0
   9366c:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   9366e:	4b74      	ldr	r3, [pc, #464]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   93670:	781b      	ldrb	r3, [r3, #0]
   93672:	2b03      	cmp	r3, #3
   93674:	f200 80de 	bhi.w	93834 <cl_flow_switchcontroller+0x1d0>
   93678:	a201      	add	r2, pc, #4	; (adr r2, 93680 <cl_flow_switchcontroller+0x1c>)
   9367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9367e:	bf00      	nop
   93680:	000937a3 	.word	0x000937a3
   93684:	000937b7 	.word	0x000937b7
   93688:	00093691 	.word	0x00093691
   9368c:	00093821 	.word	0x00093821
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   93690:	79fb      	ldrb	r3, [r7, #7]
   93692:	3b01      	subs	r3, #1
   93694:	2b05      	cmp	r3, #5
   93696:	d87e      	bhi.n	93796 <cl_flow_switchcontroller+0x132>
   93698:	a201      	add	r2, pc, #4	; (adr r2, 936a0 <cl_flow_switchcontroller+0x3c>)
   9369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9369e:	bf00      	nop
   936a0:	000936b9 	.word	0x000936b9
   936a4:	000936c1 	.word	0x000936c1
   936a8:	000936d9 	.word	0x000936d9
   936ac:	00093797 	.word	0x00093797
   936b0:	00093743 	.word	0x00093743
   936b4:	00093743 	.word	0x00093743
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   936b8:	4b61      	ldr	r3, [pc, #388]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   936ba:	2201      	movs	r2, #1
   936bc:	701a      	strb	r2, [r3, #0]
			
						break;
   936be:	e06f      	b.n	937a0 <cl_flow_switchcontroller+0x13c>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   936c0:	2100      	movs	r1, #0
   936c2:	200d      	movs	r0, #13
   936c4:	4b5f      	ldr	r3, [pc, #380]	; (93844 <cl_flow_switchcontroller+0x1e0>)
   936c6:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   936c8:	2100      	movs	r1, #0
   936ca:	200e      	movs	r0, #14
   936cc:	4b5d      	ldr	r3, [pc, #372]	; (93844 <cl_flow_switchcontroller+0x1e0>)
   936ce:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   936d0:	4b5b      	ldr	r3, [pc, #364]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   936d2:	2200      	movs	r2, #0
   936d4:	701a      	strb	r2, [r3, #0]
						break;
   936d6:	e063      	b.n	937a0 <cl_flow_switchcontroller+0x13c>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   936d8:	4b5b      	ldr	r3, [pc, #364]	; (93848 <cl_flow_switchcontroller+0x1e4>)
   936da:	781b      	ldrb	r3, [r3, #0]
   936dc:	3301      	adds	r3, #1
   936de:	b2da      	uxtb	r2, r3
   936e0:	4b59      	ldr	r3, [pc, #356]	; (93848 <cl_flow_switchcontroller+0x1e4>)
   936e2:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   936e4:	4b58      	ldr	r3, [pc, #352]	; (93848 <cl_flow_switchcontroller+0x1e4>)
   936e6:	781b      	ldrb	r3, [r3, #0]
   936e8:	2b03      	cmp	r3, #3
   936ea:	d956      	bls.n	9379a <cl_flow_switchcontroller+0x136>
						{
							three_sec_count = 0;
   936ec:	4b56      	ldr	r3, [pc, #344]	; (93848 <cl_flow_switchcontroller+0x1e4>)
   936ee:	2200      	movs	r2, #0
   936f0:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   936f2:	200c      	movs	r0, #12
   936f4:	4b55      	ldr	r3, [pc, #340]	; (9384c <cl_flow_switchcontroller+0x1e8>)
   936f6:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   936f8:	200d      	movs	r0, #13
   936fa:	4b54      	ldr	r3, [pc, #336]	; (9384c <cl_flow_switchcontroller+0x1e8>)
   936fc:	4798      	blx	r3
						
										cl_tdata.word = 0;
   936fe:	2300      	movs	r3, #0
   93700:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   93702:	4b53      	ldr	r3, [pc, #332]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   93704:	881b      	ldrh	r3, [r3, #0]
   93706:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   93708:	2315      	movs	r3, #21
   9370a:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count_flow < 2 )
   9370c:	4b50      	ldr	r3, [pc, #320]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9370e:	881b      	ldrh	r3, [r3, #0]
   93710:	2b01      	cmp	r3, #1
   93712:	d803      	bhi.n	9371c <cl_flow_switchcontroller+0xb8>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   93714:	2101      	movs	r1, #1
   93716:	200d      	movs	r0, #13
   93718:	4b4a      	ldr	r3, [pc, #296]	; (93844 <cl_flow_switchcontroller+0x1e0>)
   9371a:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						if(toggle_count_flow > 5000 )
   9371c:	4b4c      	ldr	r3, [pc, #304]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9371e:	881b      	ldrh	r3, [r3, #0]
   93720:	f241 3288 	movw	r2, #5000	; 0x1388
   93724:	4293      	cmp	r3, r2
   93726:	d903      	bls.n	93730 <cl_flow_switchcontroller+0xcc>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   93728:	2101      	movs	r1, #1
   9372a:	200e      	movs	r0, #14
   9372c:	4b45      	ldr	r3, [pc, #276]	; (93844 <cl_flow_switchcontroller+0x1e0>)
   9372e:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   93730:	2202      	movs	r2, #2
   93732:	4947      	ldr	r1, [pc, #284]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   93734:	2019      	movs	r0, #25
   93736:	4b47      	ldr	r3, [pc, #284]	; (93854 <cl_flow_switchcontroller+0x1f0>)
   93738:	4798      	blx	r3
						toggle_count_flow = 0;
   9373a:	4b45      	ldr	r3, [pc, #276]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9373c:	2200      	movs	r2, #0
   9373e:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   93740:	e02b      	b.n	9379a <cl_flow_switchcontroller+0x136>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   93742:	4b45      	ldr	r3, [pc, #276]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   93744:	781b      	ldrb	r3, [r3, #0]
   93746:	2b01      	cmp	r3, #1
   93748:	d110      	bne.n	9376c <cl_flow_switchcontroller+0x108>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9374a:	4b43      	ldr	r3, [pc, #268]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   9374c:	2200      	movs	r2, #0
   9374e:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   93750:	4b42      	ldr	r3, [pc, #264]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   93752:	781b      	ldrb	r3, [r3, #0]
   93754:	2b01      	cmp	r3, #1
   93756:	d022      	beq.n	9379e <cl_flow_switchcontroller+0x13a>
								{
									
									toggle_count_flow++;
   93758:	4b3d      	ldr	r3, [pc, #244]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9375a:	881b      	ldrh	r3, [r3, #0]
   9375c:	3301      	adds	r3, #1
   9375e:	b29a      	uxth	r2, r3
   93760:	4b3b      	ldr	r3, [pc, #236]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   93762:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   93764:	4b3d      	ldr	r3, [pc, #244]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   93766:	2201      	movs	r2, #1
   93768:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   9376a:	e018      	b.n	9379e <cl_flow_switchcontroller+0x13a>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   9376c:	4b3a      	ldr	r3, [pc, #232]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   9376e:	781b      	ldrb	r3, [r3, #0]
   93770:	2b02      	cmp	r3, #2
   93772:	d114      	bne.n	9379e <cl_flow_switchcontroller+0x13a>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   93774:	4b38      	ldr	r3, [pc, #224]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   93776:	2200      	movs	r2, #0
   93778:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   9377a:	4b38      	ldr	r3, [pc, #224]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   9377c:	781b      	ldrb	r3, [r3, #0]
   9377e:	2b02      	cmp	r3, #2
   93780:	d00d      	beq.n	9379e <cl_flow_switchcontroller+0x13a>
								{
									toggle_count_flow++;
   93782:	4b33      	ldr	r3, [pc, #204]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   93784:	881b      	ldrh	r3, [r3, #0]
   93786:	3301      	adds	r3, #1
   93788:	b29a      	uxth	r2, r3
   9378a:	4b31      	ldr	r3, [pc, #196]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9378c:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   9378e:	4b33      	ldr	r3, [pc, #204]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   93790:	2202      	movs	r2, #2
   93792:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   93794:	e003      	b.n	9379e <cl_flow_switchcontroller+0x13a>
						
						default:break;
   93796:	bf00      	nop
   93798:	e04c      	b.n	93834 <cl_flow_switchcontroller+0x1d0>
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
						toggle_count_flow = 0;
						}
						
						break;
   9379a:	bf00      	nop
   9379c:	e04a      	b.n	93834 <cl_flow_switchcontroller+0x1d0>
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   9379e:	bf00      	nop
						
						default:break;
					}
			break;
   937a0:	e048      	b.n	93834 <cl_flow_switchcontroller+0x1d0>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   937a2:	79fb      	ldrb	r3, [r7, #7]
   937a4:	2b01      	cmp	r3, #1
   937a6:	d001      	beq.n	937ac <cl_flow_switchcontroller+0x148>
   937a8:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   937aa:	e003      	b.n	937b4 <cl_flow_switchcontroller+0x150>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   937ac:	4b24      	ldr	r3, [pc, #144]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   937ae:	2201      	movs	r2, #1
   937b0:	701a      	strb	r2, [r3, #0]
									break;
   937b2:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   937b4:	e03e      	b.n	93834 <cl_flow_switchcontroller+0x1d0>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   937b6:	79fb      	ldrb	r3, [r7, #7]
   937b8:	2b03      	cmp	r3, #3
   937ba:	d002      	beq.n	937c2 <cl_flow_switchcontroller+0x15e>
   937bc:	2b06      	cmp	r3, #6
   937be:	d004      	beq.n	937ca <cl_flow_switchcontroller+0x166>
										}

					
									}
								break;
									default:break;
   937c0:	e02d      	b.n	9381e <cl_flow_switchcontroller+0x1ba>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   937c2:	4b1f      	ldr	r3, [pc, #124]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   937c4:	2202      	movs	r2, #2
   937c6:	701a      	strb	r2, [r3, #0]
									break;
   937c8:	e029      	b.n	9381e <cl_flow_switchcontroller+0x1ba>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   937ca:	4b23      	ldr	r3, [pc, #140]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   937cc:	781b      	ldrb	r3, [r3, #0]
   937ce:	2b01      	cmp	r3, #1
   937d0:	d110      	bne.n	937f4 <cl_flow_switchcontroller+0x190>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   937d2:	4b21      	ldr	r3, [pc, #132]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   937d4:	2200      	movs	r2, #0
   937d6:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   937d8:	4b20      	ldr	r3, [pc, #128]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   937da:	781b      	ldrb	r3, [r3, #0]
   937dc:	2b01      	cmp	r3, #1
   937de:	d01d      	beq.n	9381c <cl_flow_switchcontroller+0x1b8>
										{
									
											toggle_count_flow++;
   937e0:	4b1b      	ldr	r3, [pc, #108]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   937e2:	881b      	ldrh	r3, [r3, #0]
   937e4:	3301      	adds	r3, #1
   937e6:	b29a      	uxth	r2, r3
   937e8:	4b19      	ldr	r3, [pc, #100]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   937ea:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   937ec:	4b1b      	ldr	r3, [pc, #108]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   937ee:	2201      	movs	r2, #1
   937f0:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   937f2:	e013      	b.n	9381c <cl_flow_switchcontroller+0x1b8>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   937f4:	4b18      	ldr	r3, [pc, #96]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   937f6:	781b      	ldrb	r3, [r3, #0]
   937f8:	2b02      	cmp	r3, #2
   937fa:	d10f      	bne.n	9381c <cl_flow_switchcontroller+0x1b8>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   937fc:	4b16      	ldr	r3, [pc, #88]	; (93858 <cl_flow_switchcontroller+0x1f4>)
   937fe:	2200      	movs	r2, #0
   93800:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   93802:	4b16      	ldr	r3, [pc, #88]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   93804:	781b      	ldrb	r3, [r3, #0]
   93806:	2b02      	cmp	r3, #2
   93808:	d008      	beq.n	9381c <cl_flow_switchcontroller+0x1b8>
										{
											toggle_count_flow++;
   9380a:	4b11      	ldr	r3, [pc, #68]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   9380c:	881b      	ldrh	r3, [r3, #0]
   9380e:	3301      	adds	r3, #1
   93810:	b29a      	uxth	r2, r3
   93812:	4b0f      	ldr	r3, [pc, #60]	; (93850 <cl_flow_switchcontroller+0x1ec>)
   93814:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   93816:	4b11      	ldr	r3, [pc, #68]	; (9385c <cl_flow_switchcontroller+0x1f8>)
   93818:	2202      	movs	r2, #2
   9381a:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   9381c:	bf00      	nop
									default:break;
								}
			break;
   9381e:	e009      	b.n	93834 <cl_flow_switchcontroller+0x1d0>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   93820:	79fb      	ldrb	r3, [r7, #7]
   93822:	2b01      	cmp	r3, #1
   93824:	d001      	beq.n	9382a <cl_flow_switchcontroller+0x1c6>
   93826:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   93828:	e003      	b.n	93832 <cl_flow_switchcontroller+0x1ce>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   9382a:	4b05      	ldr	r3, [pc, #20]	; (93840 <cl_flow_switchcontroller+0x1dc>)
   9382c:	2202      	movs	r2, #2
   9382e:	701a      	strb	r2, [r3, #0]
									
									break;
   93830:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   93832:	bf00      	nop
		}
		return CL_OK;
   93834:	2300      	movs	r3, #0
   93836:	4618      	mov	r0, r3
   93838:	3710      	adds	r7, #16
   9383a:	46bd      	mov	sp, r7
   9383c:	bd80      	pop	{r7, pc}
   9383e:	bf00      	nop
   93840:	20071ab7 	.word	0x20071ab7
   93844:	0008302d 	.word	0x0008302d
   93848:	20071aba 	.word	0x20071aba
   9384c:	00082ed5 	.word	0x00082ed5
   93850:	20071ab8 	.word	0x20071ab8
   93854:	0009b805 	.word	0x0009b805
   93858:	20071ab4 	.word	0x20071ab4
   9385c:	20071ab6 	.word	0x20071ab6

00093860 <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   93860:	b580      	push	{r7, lr}
   93862:	b084      	sub	sp, #16
   93864:	af00      	add	r7, sp, #0
   93866:	4603      	mov	r3, r0
   93868:	6039      	str	r1, [r7, #0]
   9386a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   9386c:	2300      	movs	r3, #0
   9386e:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   93870:	2300      	movs	r3, #0
   93872:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   93874:	2300      	movs	r3, #0
   93876:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	    static Cl_Uint32Type pwm_count = 0;
	switch(hp_State)
   93878:	4bb2      	ldr	r3, [pc, #712]	; (93b44 <cl_hep_controller+0x2e4>)
   9387a:	781b      	ldrb	r3, [r3, #0]
   9387c:	2b10      	cmp	r3, #16
   9387e:	f200 82dc 	bhi.w	93e3a <cl_hep_controller+0x5da>
   93882:	a201      	add	r2, pc, #4	; (adr r2, 93888 <cl_hep_controller+0x28>)
   93884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93888:	000938cd 	.word	0x000938cd
   9388c:	00093a19 	.word	0x00093a19
   93890:	00093abf 	.word	0x00093abf
   93894:	00093c01 	.word	0x00093c01
   93898:	00093b93 	.word	0x00093b93
   9389c:	00093c71 	.word	0x00093c71
   938a0:	00093cd9 	.word	0x00093cd9
   938a4:	00093e3b 	.word	0x00093e3b
   938a8:	00093d71 	.word	0x00093d71
   938ac:	00093e3b 	.word	0x00093e3b
   938b0:	00093e3b 	.word	0x00093e3b
   938b4:	00093e3b 	.word	0x00093e3b
   938b8:	00093e3b 	.word	0x00093e3b
   938bc:	00093e3b 	.word	0x00093e3b
   938c0:	00093e3b 	.word	0x00093e3b
   938c4:	00093e3b 	.word	0x00093e3b
   938c8:	00093e3b 	.word	0x00093e3b
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   938cc:	79fb      	ldrb	r3, [r7, #7]
   938ce:	3b01      	subs	r3, #1
   938d0:	2b10      	cmp	r3, #16
   938d2:	f200 82b4 	bhi.w	93e3e <cl_hep_controller+0x5de>
   938d6:	a201      	add	r2, pc, #4	; (adr r2, 938dc <cl_hep_controller+0x7c>)
   938d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   938dc:	000939a5 	.word	0x000939a5
   938e0:	000939f9 	.word	0x000939f9
   938e4:	00093a07 	.word	0x00093a07
   938e8:	000939cf 	.word	0x000939cf
   938ec:	00093e3f 	.word	0x00093e3f
   938f0:	00093e3f 	.word	0x00093e3f
   938f4:	00093921 	.word	0x00093921
   938f8:	00093e3f 	.word	0x00093e3f
   938fc:	00093953 	.word	0x00093953
   93900:	00093965 	.word	0x00093965
   93904:	00093e3f 	.word	0x00093e3f
   93908:	00093997 	.word	0x00093997
   9390c:	00093e3f 	.word	0x00093e3f
   93910:	00093e3f 	.word	0x00093e3f
   93914:	00093e3f 	.word	0x00093e3f
   93918:	00093a15 	.word	0x00093a15
   9391c:	00093a15 	.word	0x00093a15
			{
				
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   93920:	4b89      	ldr	r3, [pc, #548]	; (93b48 <cl_hep_controller+0x2e8>)
   93922:	681b      	ldr	r3, [r3, #0]
   93924:	4a89      	ldr	r2, [pc, #548]	; (93b4c <cl_hep_controller+0x2ec>)
   93926:	6013      	str	r3, [r2, #0]
					pwm_period = 2;
   93928:	4b88      	ldr	r3, [pc, #544]	; (93b4c <cl_hep_controller+0x2ec>)
   9392a:	2202      	movs	r2, #2
   9392c:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   9392e:	2005      	movs	r0, #5
   93930:	4b87      	ldr	r3, [pc, #540]	; (93b50 <cl_hep_controller+0x2f0>)
   93932:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   93934:	4b87      	ldr	r3, [pc, #540]	; (93b54 <cl_hep_controller+0x2f4>)
   93936:	4798      	blx	r3
					cl_wait(100);
   93938:	2064      	movs	r0, #100	; 0x64
   9393a:	4b87      	ldr	r3, [pc, #540]	; (93b58 <cl_hep_controller+0x2f8>)
   9393c:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   9393e:	4b83      	ldr	r3, [pc, #524]	; (93b4c <cl_hep_controller+0x2ec>)
   93940:	681b      	ldr	r3, [r3, #0]
   93942:	4619      	mov	r1, r3
   93944:	2005      	movs	r0, #5
   93946:	4b85      	ldr	r3, [pc, #532]	; (93b5c <cl_hep_controller+0x2fc>)
   93948:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
				hp_State = CL_HEP_STATE_BOLUS_ON;
   9394a:	4b7e      	ldr	r3, [pc, #504]	; (93b44 <cl_hep_controller+0x2e4>)
   9394c:	2206      	movs	r2, #6
   9394e:	701a      	strb	r2, [r3, #0]
				break;
   93950:	e061      	b.n	93a16 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93952:	2005      	movs	r0, #5
   93954:	4b82      	ldr	r3, [pc, #520]	; (93b60 <cl_hep_controller+0x300>)
   93956:	4798      	blx	r3
   93958:	4603      	mov	r3, r0
   9395a:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   9395c:	4b79      	ldr	r3, [pc, #484]	; (93b44 <cl_hep_controller+0x2e4>)
   9395e:	2200      	movs	r2, #0
   93960:	701a      	strb	r2, [r3, #0]
				break;
   93962:	e058      	b.n	93a16 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
							pwm_period = hep_calibration(data);
   93964:	683b      	ldr	r3, [r7, #0]
   93966:	4618      	mov	r0, r3
   93968:	4b7e      	ldr	r3, [pc, #504]	; (93b64 <cl_hep_controller+0x304>)
   9396a:	4798      	blx	r3
   9396c:	4602      	mov	r2, r0
   9396e:	4b77      	ldr	r3, [pc, #476]	; (93b4c <cl_hep_controller+0x2ec>)
   93970:	601a      	str	r2, [r3, #0]
							
						//	cl_wait(100);
						//	pwm_count = rin_calibration(data);
						
						
						sv_cntrl_setHepa_dir();
   93972:	4b78      	ldr	r3, [pc, #480]	; (93b54 <cl_hep_controller+0x2f4>)
   93974:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   93976:	2005      	movs	r0, #5
   93978:	4b75      	ldr	r3, [pc, #468]	; (93b50 <cl_hep_controller+0x2f0>)
   9397a:	4798      	blx	r3
					//	pwm_period = 10 ;
						cl_wait(100);
   9397c:	2064      	movs	r0, #100	; 0x64
   9397e:	4b76      	ldr	r3, [pc, #472]	; (93b58 <cl_hep_controller+0x2f8>)
   93980:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93982:	4b72      	ldr	r3, [pc, #456]	; (93b4c <cl_hep_controller+0x2ec>)
   93984:	681b      	ldr	r3, [r3, #0]
   93986:	4619      	mov	r1, r3
   93988:	2005      	movs	r0, #5
   9398a:	4b74      	ldr	r3, [pc, #464]	; (93b5c <cl_hep_controller+0x2fc>)
   9398c:	4798      	blx	r3
					//	cl_wait(100);
						
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   9398e:	4b6d      	ldr	r3, [pc, #436]	; (93b44 <cl_hep_controller+0x2e4>)
   93990:	2208      	movs	r2, #8
   93992:	701a      	strb	r2, [r3, #0]

				break;
   93994:	e03f      	b.n	93a16 <cl_hep_controller+0x1b6>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93996:	2005      	movs	r0, #5
   93998:	4b71      	ldr	r3, [pc, #452]	; (93b60 <cl_hep_controller+0x300>)
   9399a:	4798      	blx	r3
				hp_State =  CL_HEP_STATE_IDLE;
   9399c:	4b69      	ldr	r3, [pc, #420]	; (93b44 <cl_hep_controller+0x2e4>)
   9399e:	2200      	movs	r2, #0
   939a0:	701a      	strb	r2, [r3, #0]
				break;
   939a2:	e038      	b.n	93a16 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 2 ;
   939a4:	4b69      	ldr	r3, [pc, #420]	; (93b4c <cl_hep_controller+0x2ec>)
   939a6:	2202      	movs	r2, #2
   939a8:	601a      	str	r2, [r3, #0]
				
				sv_cntrl_setHepa_dir();
   939aa:	4b6a      	ldr	r3, [pc, #424]	; (93b54 <cl_hep_controller+0x2f4>)
   939ac:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   939ae:	2005      	movs	r0, #5
   939b0:	4b67      	ldr	r3, [pc, #412]	; (93b50 <cl_hep_controller+0x2f0>)
   939b2:	4798      	blx	r3
				//cl_hep_pumpFeedback_start();
				cl_wait(100);
   939b4:	2064      	movs	r0, #100	; 0x64
   939b6:	4b68      	ldr	r3, [pc, #416]	; (93b58 <cl_hep_controller+0x2f8>)
   939b8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   939ba:	4b64      	ldr	r3, [pc, #400]	; (93b4c <cl_hep_controller+0x2ec>)
   939bc:	681b      	ldr	r3, [r3, #0]
   939be:	4619      	mov	r1, r3
   939c0:	2005      	movs	r0, #5
   939c2:	4b66      	ldr	r3, [pc, #408]	; (93b5c <cl_hep_controller+0x2fc>)
   939c4:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   939c6:	4b5f      	ldr	r3, [pc, #380]	; (93b44 <cl_hep_controller+0x2e4>)
   939c8:	2203      	movs	r2, #3
   939ca:	701a      	strb	r2, [r3, #0]
				break;
   939cc:	e023      	b.n	93a16 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 2 ;
   939ce:	4b5f      	ldr	r3, [pc, #380]	; (93b4c <cl_hep_controller+0x2ec>)
   939d0:	2202      	movs	r2, #2
   939d2:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   939d4:	4b64      	ldr	r3, [pc, #400]	; (93b68 <cl_hep_controller+0x308>)
   939d6:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   939d8:	2005      	movs	r0, #5
   939da:	4b5d      	ldr	r3, [pc, #372]	; (93b50 <cl_hep_controller+0x2f0>)
   939dc:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
					cl_wait(100);
   939de:	2064      	movs	r0, #100	; 0x64
   939e0:	4b5d      	ldr	r3, [pc, #372]	; (93b58 <cl_hep_controller+0x2f8>)
   939e2:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   939e4:	4b59      	ldr	r3, [pc, #356]	; (93b4c <cl_hep_controller+0x2ec>)
   939e6:	681b      	ldr	r3, [r3, #0]
   939e8:	4619      	mov	r1, r3
   939ea:	2005      	movs	r0, #5
   939ec:	4b5b      	ldr	r3, [pc, #364]	; (93b5c <cl_hep_controller+0x2fc>)
   939ee:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   939f0:	4b54      	ldr	r3, [pc, #336]	; (93b44 <cl_hep_controller+0x2e4>)
   939f2:	2204      	movs	r2, #4
   939f4:	701a      	strb	r2, [r3, #0]
				break;
   939f6:	e00e      	b.n	93a16 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   939f8:	2005      	movs	r0, #5
   939fa:	4b59      	ldr	r3, [pc, #356]	; (93b60 <cl_hep_controller+0x300>)
   939fc:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   939fe:	4b51      	ldr	r3, [pc, #324]	; (93b44 <cl_hep_controller+0x2e4>)
   93a00:	2200      	movs	r2, #0
   93a02:	701a      	strb	r2, [r3, #0]
				break;
   93a04:	e007      	b.n	93a16 <cl_hep_controller+0x1b6>
				
			
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93a06:	2005      	movs	r0, #5
   93a08:	4b55      	ldr	r3, [pc, #340]	; (93b60 <cl_hep_controller+0x300>)
   93a0a:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   93a0c:	4b4d      	ldr	r3, [pc, #308]	; (93b44 <cl_hep_controller+0x2e4>)
   93a0e:	2200      	movs	r2, #0
   93a10:	701a      	strb	r2, [r3, #0]
				break;
   93a12:	e000      	b.n	93a16 <cl_hep_controller+0x1b6>
					//sv_cntrl_setHepa_dir();
					//sv_cntrl_activatepump(HEPARINPUMP);
					
					
					
					break;
   93a14:	bf00      	nop
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   93a16:	e212      	b.n	93e3e <cl_hep_controller+0x5de>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   93a18:	79fb      	ldrb	r3, [r7, #7]
   93a1a:	3b02      	subs	r3, #2
   93a1c:	2b0e      	cmp	r3, #14
   93a1e:	f200 8210 	bhi.w	93e42 <cl_hep_controller+0x5e2>
   93a22:	a201      	add	r2, pc, #4	; (adr r2, 93a28 <cl_hep_controller+0x1c8>)
   93a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93a28:	00093a8f 	.word	0x00093a8f
   93a2c:	00093a9d 	.word	0x00093a9d
   93a30:	00093a65 	.word	0x00093a65
   93a34:	00093aab 	.word	0x00093aab
   93a38:	00093ab5 	.word	0x00093ab5
   93a3c:	00093e43 	.word	0x00093e43
   93a40:	00093e43 	.word	0x00093e43
   93a44:	00093e43 	.word	0x00093e43
   93a48:	00093e43 	.word	0x00093e43
   93a4c:	00093e43 	.word	0x00093e43
   93a50:	00093e43 	.word	0x00093e43
   93a54:	00093e43 	.word	0x00093e43
   93a58:	00093e43 	.word	0x00093e43
   93a5c:	00093e43 	.word	0x00093e43
   93a60:	00093a8f 	.word	0x00093a8f
		{
			
			
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_resetHepa_dir();   ///change direction 24 july
   93a64:	4b40      	ldr	r3, [pc, #256]	; (93b68 <cl_hep_controller+0x308>)
   93a66:	4798      	blx	r3
		//	sv_cntrl_setHepa_dir();
			pwm_period = 5;
   93a68:	4b38      	ldr	r3, [pc, #224]	; (93b4c <cl_hep_controller+0x2ec>)
   93a6a:	2205      	movs	r2, #5
   93a6c:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   93a6e:	2005      	movs	r0, #5
   93a70:	4b37      	ldr	r3, [pc, #220]	; (93b50 <cl_hep_controller+0x2f0>)
   93a72:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   93a74:	2064      	movs	r0, #100	; 0x64
   93a76:	4b38      	ldr	r3, [pc, #224]	; (93b58 <cl_hep_controller+0x2f8>)
   93a78:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93a7a:	4b34      	ldr	r3, [pc, #208]	; (93b4c <cl_hep_controller+0x2ec>)
   93a7c:	681b      	ldr	r3, [r3, #0]
   93a7e:	4619      	mov	r1, r3
   93a80:	2005      	movs	r0, #5
   93a82:	4b36      	ldr	r3, [pc, #216]	; (93b5c <cl_hep_controller+0x2fc>)
   93a84:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   93a86:	4b2f      	ldr	r3, [pc, #188]	; (93b44 <cl_hep_controller+0x2e4>)
   93a88:	2204      	movs	r2, #4
   93a8a:	701a      	strb	r2, [r3, #0]
			break;
   93a8c:	e016      	b.n	93abc <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_AT_LEFT_END:
			case CL_HEP_EVENT_LEFT_END_REACHED:
		    sv_cntrl_deactivatepump(HEPARINPUMP);
   93a8e:	2005      	movs	r0, #5
   93a90:	4b33      	ldr	r3, [pc, #204]	; (93b60 <cl_hep_controller+0x300>)
   93a92:	4798      	blx	r3
		   hp_State = CL_HEP_STATE_IDLE;
   93a94:	4b2b      	ldr	r3, [pc, #172]	; (93b44 <cl_hep_controller+0x2e4>)
   93a96:	2200      	movs	r2, #0
   93a98:	701a      	strb	r2, [r3, #0]
		    break;
   93a9a:	e00f      	b.n	93abc <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93a9c:	2005      	movs	r0, #5
   93a9e:	4b30      	ldr	r3, [pc, #192]	; (93b60 <cl_hep_controller+0x300>)
   93aa0:	4798      	blx	r3
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93aa2:	4b28      	ldr	r3, [pc, #160]	; (93b44 <cl_hep_controller+0x2e4>)
   93aa4:	2202      	movs	r2, #2
   93aa6:	701a      	strb	r2, [r3, #0]
			break;
   93aa8:	e008      	b.n	93abc <cl_hep_controller+0x25c>
			
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   93aaa:	683b      	ldr	r3, [r7, #0]
   93aac:	b29a      	uxth	r2, r3
   93aae:	4b2f      	ldr	r3, [pc, #188]	; (93b6c <cl_hep_controller+0x30c>)
   93ab0:	801a      	strh	r2, [r3, #0]
			break;
   93ab2:	e003      	b.n	93abc <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   93ab4:	683b      	ldr	r3, [r7, #0]
   93ab6:	4a24      	ldr	r2, [pc, #144]	; (93b48 <cl_hep_controller+0x2e8>)
   93ab8:	6013      	str	r3, [r2, #0]
			break;
   93aba:	bf00      	nop
		}
		break;
   93abc:	e1c1      	b.n	93e42 <cl_hep_controller+0x5e2>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   93abe:	79fb      	ldrb	r3, [r7, #7]
   93ac0:	3b01      	subs	r3, #1
   93ac2:	2b10      	cmp	r3, #16
   93ac4:	f200 81bf 	bhi.w	93e46 <cl_hep_controller+0x5e6>
   93ac8:	a201      	add	r2, pc, #4	; (adr r2, 93ad0 <cl_hep_controller+0x270>)
   93aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93ace:	bf00      	nop
   93ad0:	00093b1d 	.word	0x00093b1d
   93ad4:	00093b75 	.word	0x00093b75
   93ad8:	00093b83 	.word	0x00093b83
   93adc:	00093e47 	.word	0x00093e47
   93ae0:	00093e47 	.word	0x00093e47
   93ae4:	00093e47 	.word	0x00093e47
   93ae8:	00093e47 	.word	0x00093e47
   93aec:	00093e47 	.word	0x00093e47
   93af0:	00093e47 	.word	0x00093e47
   93af4:	00093b15 	.word	0x00093b15
   93af8:	00093e47 	.word	0x00093e47
   93afc:	00093e47 	.word	0x00093e47
   93b00:	00093e47 	.word	0x00093e47
   93b04:	00093e47 	.word	0x00093e47
   93b08:	00093e47 	.word	0x00093e47
   93b0c:	00093e47 	.word	0x00093e47
   93b10:	00093b83 	.word	0x00093b83
// 			case CL_HEP_EVENT_STARTBOLUS:
// 			hp_State = CL_HEP_STATE_BOLUS_ON;
// 			break;

			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State =  CL_HEP_STATE_IDLE;
   93b14:	4b0b      	ldr	r3, [pc, #44]	; (93b44 <cl_hep_controller+0x2e4>)
   93b16:	2200      	movs	r2, #0
   93b18:	701a      	strb	r2, [r3, #0]
			//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;/24july
			break;
   93b1a:	e039      	b.n	93b90 <cl_hep_controller+0x330>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_setHepa_dir();     //change direction 24 july
   93b1c:	4b0d      	ldr	r3, [pc, #52]	; (93b54 <cl_hep_controller+0x2f4>)
   93b1e:	4798      	blx	r3
		//	sv_cntrl_resetHepa_dir();
			sv_cntrl_activatepump(HEPARINPUMP);
   93b20:	2005      	movs	r0, #5
   93b22:	4b0b      	ldr	r3, [pc, #44]	; (93b50 <cl_hep_controller+0x2f0>)
   93b24:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   93b26:	4b12      	ldr	r3, [pc, #72]	; (93b70 <cl_hep_controller+0x310>)
   93b28:	4798      	blx	r3
			cl_wait(100);
   93b2a:	2064      	movs	r0, #100	; 0x64
   93b2c:	4b0a      	ldr	r3, [pc, #40]	; (93b58 <cl_hep_controller+0x2f8>)
   93b2e:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93b30:	4b06      	ldr	r3, [pc, #24]	; (93b4c <cl_hep_controller+0x2ec>)
   93b32:	681b      	ldr	r3, [r3, #0]
   93b34:	4619      	mov	r1, r3
   93b36:	2005      	movs	r0, #5
   93b38:	4b08      	ldr	r3, [pc, #32]	; (93b5c <cl_hep_controller+0x2fc>)
   93b3a:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   93b3c:	4b01      	ldr	r3, [pc, #4]	; (93b44 <cl_hep_controller+0x2e4>)
   93b3e:	2203      	movs	r2, #3
   93b40:	701a      	strb	r2, [r3, #0]
			break;
   93b42:	e025      	b.n	93b90 <cl_hep_controller+0x330>
   93b44:	20071abb 	.word	0x20071abb
   93b48:	20070a34 	.word	0x20070a34
   93b4c:	20071ac0 	.word	0x20071ac0
   93b50:	00099a09 	.word	0x00099a09
   93b54:	00099af9 	.word	0x00099af9
   93b58:	00093009 	.word	0x00093009
   93b5c:	00099b21 	.word	0x00099b21
   93b60:	00099a45 	.word	0x00099a45
   93b64:	00083fc9 	.word	0x00083fc9
   93b68:	00099b0d 	.word	0x00099b0d
   93b6c:	20071abc 	.word	0x20071abc
   93b70:	00093e95 	.word	0x00093e95
			case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93b74:	2005      	movs	r0, #5
   93b76:	4bba      	ldr	r3, [pc, #744]	; (93e60 <cl_hep_controller+0x600>)
   93b78:	4798      	blx	r3
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93b7a:	4bba      	ldr	r3, [pc, #744]	; (93e64 <cl_hep_controller+0x604>)
   93b7c:	2201      	movs	r2, #1
   93b7e:	701a      	strb	r2, [r3, #0]
				break;
   93b80:	e006      	b.n	93b90 <cl_hep_controller+0x330>
				case CL_HEP_EVENT_AT_RIGHT_END:
			    case CL_HEP_EVENT_RIGHT_END_REACHED:
			    sv_cntrl_deactivatepump(HEPARINPUMP);
   93b82:	2005      	movs	r0, #5
   93b84:	4bb6      	ldr	r3, [pc, #728]	; (93e60 <cl_hep_controller+0x600>)
   93b86:	4798      	blx	r3
			    hp_State = CL_HEP_STATE_IDLE;
   93b88:	4bb6      	ldr	r3, [pc, #728]	; (93e64 <cl_hep_controller+0x604>)
   93b8a:	2200      	movs	r2, #0
   93b8c:	701a      	strb	r2, [r3, #0]
			    break;
   93b8e:	bf00      	nop
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   93b90:	e159      	b.n	93e46 <cl_hep_controller+0x5e6>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   93b92:	79fb      	ldrb	r3, [r7, #7]
   93b94:	3b03      	subs	r3, #3
   93b96:	2b0e      	cmp	r3, #14
   93b98:	d830      	bhi.n	93bfc <cl_hep_controller+0x39c>
   93b9a:	a201      	add	r2, pc, #4	; (adr r2, 93ba0 <cl_hep_controller+0x340>)
   93b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93ba0:	00093bdd 	.word	0x00093bdd
   93ba4:	00093bfd 	.word	0x00093bfd
   93ba8:	00093bfd 	.word	0x00093bfd
   93bac:	00093bfd 	.word	0x00093bfd
   93bb0:	00093bfd 	.word	0x00093bfd
   93bb4:	00093bfd 	.word	0x00093bfd
   93bb8:	00093beb 	.word	0x00093beb
   93bbc:	00093bfd 	.word	0x00093bfd
   93bc0:	00093bfd 	.word	0x00093bfd
   93bc4:	00093beb 	.word	0x00093beb
   93bc8:	00093bfd 	.word	0x00093bfd
   93bcc:	00093bfd 	.word	0x00093bfd
   93bd0:	00093bfd 	.word	0x00093bfd
   93bd4:	00093bfd 	.word	0x00093bfd
   93bd8:	00093bdd 	.word	0x00093bdd
		{
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			case CL_HEP_EVENT_AT_RIGHT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93bdc:	2005      	movs	r0, #5
   93bde:	4ba0      	ldr	r3, [pc, #640]	; (93e60 <cl_hep_controller+0x600>)
   93be0:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   93be2:	4ba0      	ldr	r3, [pc, #640]	; (93e64 <cl_hep_controller+0x604>)
   93be4:	2200      	movs	r2, #0
   93be6:	701a      	strb	r2, [r3, #0]
			break;
   93be8:	e009      	b.n	93bfe <cl_hep_controller+0x39e>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93bea:	2005      	movs	r0, #5
   93bec:	4b9c      	ldr	r3, [pc, #624]	; (93e60 <cl_hep_controller+0x600>)
   93bee:	4798      	blx	r3
   93bf0:	4603      	mov	r3, r0
   93bf2:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93bf4:	4b9b      	ldr	r3, [pc, #620]	; (93e64 <cl_hep_controller+0x604>)
   93bf6:	2200      	movs	r2, #0
   93bf8:	701a      	strb	r2, [r3, #0]
			break;
   93bfa:	e000      	b.n	93bfe <cl_hep_controller+0x39e>
			default:break;
   93bfc:	bf00      	nop

		}
		break;
   93bfe:	e129      	b.n	93e54 <cl_hep_controller+0x5f4>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   93c00:	79fb      	ldrb	r3, [r7, #7]
   93c02:	3b02      	subs	r3, #2
   93c04:	2b0e      	cmp	r3, #14
   93c06:	d831      	bhi.n	93c6c <cl_hep_controller+0x40c>
   93c08:	a201      	add	r2, pc, #4	; (adr r2, 93c10 <cl_hep_controller+0x3b0>)
   93c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93c0e:	bf00      	nop
   93c10:	00093c4d 	.word	0x00093c4d
   93c14:	00093c6d 	.word	0x00093c6d
   93c18:	00093c6d 	.word	0x00093c6d
   93c1c:	00093c6d 	.word	0x00093c6d
   93c20:	00093c6d 	.word	0x00093c6d
   93c24:	00093c6d 	.word	0x00093c6d
   93c28:	00093c6d 	.word	0x00093c6d
   93c2c:	00093c5b 	.word	0x00093c5b
   93c30:	00093c6d 	.word	0x00093c6d
   93c34:	00093c6d 	.word	0x00093c6d
   93c38:	00093c5b 	.word	0x00093c5b
   93c3c:	00093c6d 	.word	0x00093c6d
   93c40:	00093c6d 	.word	0x00093c6d
   93c44:	00093c6d 	.word	0x00093c6d
   93c48:	00093c4d 	.word	0x00093c4d
// 				break;
// 			}
// 			break;
 			case CL_HEP_EVENT_LEFT_END_REACHED:
			case CL_HEP_EVENT_AT_LEFT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93c4c:	2005      	movs	r0, #5
   93c4e:	4b84      	ldr	r3, [pc, #528]	; (93e60 <cl_hep_controller+0x600>)
   93c50:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   93c52:	4b84      	ldr	r3, [pc, #528]	; (93e64 <cl_hep_controller+0x604>)
   93c54:	2200      	movs	r2, #0
   93c56:	701a      	strb	r2, [r3, #0]
			break;
   93c58:	e009      	b.n	93c6e <cl_hep_controller+0x40e>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93c5a:	2005      	movs	r0, #5
   93c5c:	4b80      	ldr	r3, [pc, #512]	; (93e60 <cl_hep_controller+0x600>)
   93c5e:	4798      	blx	r3
   93c60:	4603      	mov	r3, r0
   93c62:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93c64:	4b7f      	ldr	r3, [pc, #508]	; (93e64 <cl_hep_controller+0x604>)
   93c66:	2200      	movs	r2, #0
   93c68:	701a      	strb	r2, [r3, #0]
			break;
   93c6a:	e000      	b.n	93c6e <cl_hep_controller+0x40e>
			default:break;
   93c6c:	bf00      	nop

		}
		break;
   93c6e:	e0f1      	b.n	93e54 <cl_hep_controller+0x5f4>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   93c70:	79fb      	ldrb	r3, [r7, #7]
   93c72:	3b01      	subs	r3, #1
   93c74:	2b06      	cmp	r3, #6
   93c76:	f200 80e8 	bhi.w	93e4a <cl_hep_controller+0x5ea>
   93c7a:	a201      	add	r2, pc, #4	; (adr r2, 93c80 <cl_hep_controller+0x420>)
   93c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93c80:	00093ca5 	.word	0x00093ca5
   93c84:	00093cb5 	.word	0x00093cb5
   93c88:	00093cbd 	.word	0x00093cbd
   93c8c:	00093cad 	.word	0x00093cad
   93c90:	00093cc5 	.word	0x00093cc5
   93c94:	00093ccf 	.word	0x00093ccf
   93c98:	00093c9d 	.word	0x00093c9d
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   93c9c:	4b71      	ldr	r3, [pc, #452]	; (93e64 <cl_hep_controller+0x604>)
   93c9e:	2206      	movs	r2, #6
   93ca0:	701a      	strb	r2, [r3, #0]
			break;
   93ca2:	e018      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   93ca4:	4b6f      	ldr	r3, [pc, #444]	; (93e64 <cl_hep_controller+0x604>)
   93ca6:	2203      	movs	r2, #3
   93ca8:	701a      	strb	r2, [r3, #0]
			break;
   93caa:	e014      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   93cac:	4b6d      	ldr	r3, [pc, #436]	; (93e64 <cl_hep_controller+0x604>)
   93cae:	2204      	movs	r2, #4
   93cb0:	701a      	strb	r2, [r3, #0]
			break;
   93cb2:	e010      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93cb4:	4b6b      	ldr	r3, [pc, #428]	; (93e64 <cl_hep_controller+0x604>)
   93cb6:	2201      	movs	r2, #1
   93cb8:	701a      	strb	r2, [r3, #0]
			break;
   93cba:	e00c      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93cbc:	4b69      	ldr	r3, [pc, #420]	; (93e64 <cl_hep_controller+0x604>)
   93cbe:	2202      	movs	r2, #2
   93cc0:	701a      	strb	r2, [r3, #0]
			break;
   93cc2:	e008      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   93cc4:	683b      	ldr	r3, [r7, #0]
   93cc6:	b29a      	uxth	r2, r3
   93cc8:	4b67      	ldr	r3, [pc, #412]	; (93e68 <cl_hep_controller+0x608>)
   93cca:	801a      	strh	r2, [r3, #0]
			break;
   93ccc:	e003      	b.n	93cd6 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   93cce:	683b      	ldr	r3, [r7, #0]
   93cd0:	4a66      	ldr	r2, [pc, #408]	; (93e6c <cl_hep_controller+0x60c>)
   93cd2:	6013      	str	r3, [r2, #0]
			break;
   93cd4:	bf00      	nop
		}
		break;
   93cd6:	e0b8      	b.n	93e4a <cl_hep_controller+0x5ea>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   93cd8:	79fb      	ldrb	r3, [r7, #7]
   93cda:	3b02      	subs	r3, #2
   93cdc:	2b0b      	cmp	r3, #11
   93cde:	f200 80b6 	bhi.w	93e4e <cl_hep_controller+0x5ee>
   93ce2:	a201      	add	r2, pc, #4	; (adr r2, 93ce8 <cl_hep_controller+0x488>)
   93ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93ce8:	00093d45 	.word	0x00093d45
   93cec:	00093d4d 	.word	0x00093d4d
   93cf0:	00093e4f 	.word	0x00093e4f
   93cf4:	00093e4f 	.word	0x00093e4f
   93cf8:	00093e4f 	.word	0x00093e4f
   93cfc:	00093e4f 	.word	0x00093e4f
   93d00:	00093e4f 	.word	0x00093e4f
   93d04:	00093d55 	.word	0x00093d55
   93d08:	00093e4f 	.word	0x00093e4f
   93d0c:	00093e4f 	.word	0x00093e4f
   93d10:	00093d55 	.word	0x00093d55
   93d14:	00093d19 	.word	0x00093d19
		{
			case CL_HEP_EVENT_SEC_TICK:
			
			if(++cl_hep_seconds > 20)
   93d18:	4b55      	ldr	r3, [pc, #340]	; (93e70 <cl_hep_controller+0x610>)
   93d1a:	881b      	ldrh	r3, [r3, #0]
   93d1c:	3301      	adds	r3, #1
   93d1e:	b29a      	uxth	r2, r3
   93d20:	4b53      	ldr	r3, [pc, #332]	; (93e70 <cl_hep_controller+0x610>)
   93d22:	801a      	strh	r2, [r3, #0]
   93d24:	4b52      	ldr	r3, [pc, #328]	; (93e70 <cl_hep_controller+0x610>)
   93d26:	881b      	ldrh	r3, [r3, #0]
   93d28:	2b14      	cmp	r3, #20
   93d2a:	d91f      	bls.n	93d6c <cl_hep_controller+0x50c>
			{
				//cl_hep_seconds = 0;
				//if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
			//	if(++cl_hep_seconds > HEPARIN_BOLUS_TIMEOUT)
//				{
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93d2c:	2005      	movs	r0, #5
   93d2e:	4b4c      	ldr	r3, [pc, #304]	; (93e60 <cl_hep_controller+0x600>)
   93d30:	4798      	blx	r3
   93d32:	4603      	mov	r3, r0
   93d34:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   93d36:	4b4b      	ldr	r3, [pc, #300]	; (93e64 <cl_hep_controller+0x604>)
   93d38:	2200      	movs	r2, #0
   93d3a:	701a      	strb	r2, [r3, #0]
					cl_hep_seconds = 0;
   93d3c:	4b4c      	ldr	r3, [pc, #304]	; (93e70 <cl_hep_controller+0x610>)
   93d3e:	2200      	movs	r2, #0
   93d40:	801a      	strh	r2, [r3, #0]
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   93d42:	e013      	b.n	93d6c <cl_hep_controller+0x50c>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93d44:	4b47      	ldr	r3, [pc, #284]	; (93e64 <cl_hep_controller+0x604>)
   93d46:	2201      	movs	r2, #1
   93d48:	701a      	strb	r2, [r3, #0]
			break;
   93d4a:	e010      	b.n	93d6e <cl_hep_controller+0x50e>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93d4c:	4b45      	ldr	r3, [pc, #276]	; (93e64 <cl_hep_controller+0x604>)
   93d4e:	2202      	movs	r2, #2
   93d50:	701a      	strb	r2, [r3, #0]
			break;
   93d52:	e00c      	b.n	93d6e <cl_hep_controller+0x50e>
// 			hp_State = CL_HEP_STATE_IDLE;
// 			break;
// 			
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_seconds = 0;
   93d54:	4b46      	ldr	r3, [pc, #280]	; (93e70 <cl_hep_controller+0x610>)
   93d56:	2200      	movs	r2, #0
   93d58:	801a      	strh	r2, [r3, #0]
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93d5a:	2005      	movs	r0, #5
   93d5c:	4b40      	ldr	r3, [pc, #256]	; (93e60 <cl_hep_controller+0x600>)
   93d5e:	4798      	blx	r3
   93d60:	4603      	mov	r3, r0
   93d62:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93d64:	4b3f      	ldr	r3, [pc, #252]	; (93e64 <cl_hep_controller+0x604>)
   93d66:	2200      	movs	r2, #0
   93d68:	701a      	strb	r2, [r3, #0]
			break;
   93d6a:	e000      	b.n	93d6e <cl_hep_controller+0x50e>
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   93d6c:	bf00      	nop
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   93d6e:	e06e      	b.n	93e4e <cl_hep_controller+0x5ee>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   93d70:	79fb      	ldrb	r3, [r7, #7]
   93d72:	3b02      	subs	r3, #2
   93d74:	2b0b      	cmp	r3, #11
   93d76:	d86c      	bhi.n	93e52 <cl_hep_controller+0x5f2>
   93d78:	a201      	add	r2, pc, #4	; (adr r2, 93d80 <cl_hep_controller+0x520>)
   93d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93d7e:	bf00      	nop
   93d80:	00093de1 	.word	0x00093de1
   93d84:	00093df3 	.word	0x00093df3
   93d88:	00093e53 	.word	0x00093e53
   93d8c:	00093e53 	.word	0x00093e53
   93d90:	00093e05 	.word	0x00093e05
   93d94:	00093e53 	.word	0x00093e53
   93d98:	00093e53 	.word	0x00093e53
   93d9c:	00093e31 	.word	0x00093e31
   93da0:	00093e53 	.word	0x00093e53
   93da4:	00093e53 	.word	0x00093e53
   93da8:	00093e53 	.word	0x00093e53
   93dac:	00093db1 	.word	0x00093db1
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   93db0:	f107 030e 	add.w	r3, r7, #14
   93db4:	4618      	mov	r0, r3
   93db6:	4b2f      	ldr	r3, [pc, #188]	; (93e74 <cl_hep_controller+0x614>)
   93db8:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   93dba:	f107 030c 	add.w	r3, r7, #12
   93dbe:	4618      	mov	r0, r3
   93dc0:	4b2d      	ldr	r3, [pc, #180]	; (93e78 <cl_hep_controller+0x618>)
   93dc2:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   93dc4:	7bbb      	ldrb	r3, [r7, #14]
   93dc6:	2b06      	cmp	r3, #6
   93dc8:	d004      	beq.n	93dd4 <cl_hep_controller+0x574>
   93dca:	2b07      	cmp	r3, #7
   93dcc:	d004      	beq.n	93dd8 <cl_hep_controller+0x578>
   93dce:	2b02      	cmp	r3, #2
   93dd0:	d004      	beq.n	93ddc <cl_hep_controller+0x57c>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   93dd2:	e004      	b.n	93dde <cl_hep_controller+0x57e>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   93dd4:	bf00      	nop
   93dd6:	e02f      	b.n	93e38 <cl_hep_controller+0x5d8>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   93dd8:	bf00      	nop
   93dda:	e02d      	b.n	93e38 <cl_hep_controller+0x5d8>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   93ddc:	bf00      	nop
						default:break;
					}


				break;
   93dde:	e02b      	b.n	93e38 <cl_hep_controller+0x5d8>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93de0:	2005      	movs	r0, #5
   93de2:	4b1f      	ldr	r3, [pc, #124]	; (93e60 <cl_hep_controller+0x600>)
   93de4:	4798      	blx	r3
   93de6:	4603      	mov	r3, r0
   93de8:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93dea:	4b1e      	ldr	r3, [pc, #120]	; (93e64 <cl_hep_controller+0x604>)
   93dec:	2201      	movs	r2, #1
   93dee:	701a      	strb	r2, [r3, #0]
				break;
   93df0:	e022      	b.n	93e38 <cl_hep_controller+0x5d8>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93df2:	2005      	movs	r0, #5
   93df4:	4b1a      	ldr	r3, [pc, #104]	; (93e60 <cl_hep_controller+0x600>)
   93df6:	4798      	blx	r3
   93df8:	4603      	mov	r3, r0
   93dfa:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93dfc:	4b19      	ldr	r3, [pc, #100]	; (93e64 <cl_hep_controller+0x604>)
   93dfe:	2202      	movs	r2, #2
   93e00:	701a      	strb	r2, [r3, #0]
				break;
   93e02:	e019      	b.n	93e38 <cl_hep_controller+0x5d8>
// 				case CL_HEP_EVENT_SET_BOLUS_RATE:
// 				cl_hep_bolusrate = data ;
// 				break;
 				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
 				
				 pwm_period = hep_calibration(data);
   93e04:	683b      	ldr	r3, [r7, #0]
   93e06:	4618      	mov	r0, r3
   93e08:	4b1c      	ldr	r3, [pc, #112]	; (93e7c <cl_hep_controller+0x61c>)
   93e0a:	4798      	blx	r3
   93e0c:	4602      	mov	r2, r0
   93e0e:	4b1c      	ldr	r3, [pc, #112]	; (93e80 <cl_hep_controller+0x620>)
   93e10:	601a      	str	r2, [r3, #0]
				 sv_cntrl_setHepa_dir();
   93e12:	4b1c      	ldr	r3, [pc, #112]	; (93e84 <cl_hep_controller+0x624>)
   93e14:	4798      	blx	r3
				 sv_cntrl_activatepump(HEPARINPUMP);
   93e16:	2005      	movs	r0, #5
   93e18:	4b1b      	ldr	r3, [pc, #108]	; (93e88 <cl_hep_controller+0x628>)
   93e1a:	4798      	blx	r3
				 cl_wait(100);
   93e1c:	2064      	movs	r0, #100	; 0x64
   93e1e:	4b1b      	ldr	r3, [pc, #108]	; (93e8c <cl_hep_controller+0x62c>)
   93e20:	4798      	blx	r3
				 sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93e22:	4b17      	ldr	r3, [pc, #92]	; (93e80 <cl_hep_controller+0x620>)
   93e24:	681b      	ldr	r3, [r3, #0]
   93e26:	4619      	mov	r1, r3
   93e28:	2005      	movs	r0, #5
   93e2a:	4b19      	ldr	r3, [pc, #100]	; (93e90 <cl_hep_controller+0x630>)
   93e2c:	4798      	blx	r3
				 
 				break;
   93e2e:	e003      	b.n	93e38 <cl_hep_controller+0x5d8>
// 				case 	CL_HEP_EVENT_PAUSEBOLUS:
// 				hp_State = CL_HEP_STATE_PAUSED;
// 				break;
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
   93e30:	4b0c      	ldr	r3, [pc, #48]	; (93e64 <cl_hep_controller+0x604>)
   93e32:	2200      	movs	r2, #0
   93e34:	701a      	strb	r2, [r3, #0]
 				break;
   93e36:	bf00      	nop
			}
		
		break;
   93e38:	e00b      	b.n	93e52 <cl_hep_controller+0x5f2>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   93e3a:	bf00      	nop
   93e3c:	e00a      	b.n	93e54 <cl_hep_controller+0x5f4>
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   93e3e:	bf00      	nop
   93e40:	e008      	b.n	93e54 <cl_hep_controller+0x5f4>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   93e42:	bf00      	nop
   93e44:	e006      	b.n	93e54 <cl_hep_controller+0x5f4>
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   93e46:	bf00      	nop
   93e48:	e004      	b.n	93e54 <cl_hep_controller+0x5f4>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   93e4a:	bf00      	nop
   93e4c:	e002      	b.n	93e54 <cl_hep_controller+0x5f4>
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   93e4e:	bf00      	nop
   93e50:	e000      	b.n	93e54 <cl_hep_controller+0x5f4>
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
 				break;
			}
		
		break;
   93e52:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   93e54:	2300      	movs	r3, #0
   93e56:	4618      	mov	r0, r3
   93e58:	3710      	adds	r7, #16
   93e5a:	46bd      	mov	sp, r7
   93e5c:	bd80      	pop	{r7, pc}
   93e5e:	bf00      	nop
   93e60:	00099a45 	.word	0x00099a45
   93e64:	20071abb 	.word	0x20071abb
   93e68:	20071abc 	.word	0x20071abc
   93e6c:	20070a34 	.word	0x20070a34
   93e70:	20071abe 	.word	0x20071abe
   93e74:	00093ead 	.word	0x00093ead
   93e78:	00093ecd 	.word	0x00093ecd
   93e7c:	00083fc9 	.word	0x00083fc9
   93e80:	20071ac0 	.word	0x20071ac0
   93e84:	00099af9 	.word	0x00099af9
   93e88:	00099a09 	.word	0x00099a09
   93e8c:	00093009 	.word	0x00093009
   93e90:	00099b21 	.word	0x00099b21

00093e94 <cl_hep_pumpFeedback_start>:

static Cl_Uint16Type pin_status = 1,hp_start_status = 0,prev_hp_start_status = 0,hp_end_status = 0,prev_hp_end_status = 0;
//static Cl_Uint16Type counter = 0;

Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   93e94:	b480      	push	{r7}
   93e96:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   93e98:	4b03      	ldr	r3, [pc, #12]	; (93ea8 <cl_hep_pumpFeedback_start+0x14>)
   93e9a:	2203      	movs	r2, #3
   93e9c:	701a      	strb	r2, [r3, #0]
	return 0;
   93e9e:	2300      	movs	r3, #0
}
   93ea0:	4618      	mov	r0, r3
   93ea2:	46bd      	mov	sp, r7
   93ea4:	bc80      	pop	{r7}
   93ea6:	4770      	bx	lr
   93ea8:	20071ac6 	.word	0x20071ac6

00093eac <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   93eac:	b480      	push	{r7}
   93eae:	b083      	sub	sp, #12
   93eb0:	af00      	add	r7, sp, #0
   93eb2:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   93eb4:	4b04      	ldr	r3, [pc, #16]	; (93ec8 <cl_hep_pumpFeedback_get_state+0x1c>)
   93eb6:	781a      	ldrb	r2, [r3, #0]
   93eb8:	687b      	ldr	r3, [r7, #4]
   93eba:	701a      	strb	r2, [r3, #0]
	return 0;
   93ebc:	2300      	movs	r3, #0
}
   93ebe:	4618      	mov	r0, r3
   93ec0:	370c      	adds	r7, #12
   93ec2:	46bd      	mov	sp, r7
   93ec4:	bc80      	pop	{r7}
   93ec6:	4770      	bx	lr
   93ec8:	20071ac6 	.word	0x20071ac6

00093ecc <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   93ecc:	b480      	push	{r7}
   93ece:	b083      	sub	sp, #12
   93ed0:	af00      	add	r7, sp, #0
   93ed2:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   93ed4:	4b07      	ldr	r3, [pc, #28]	; (93ef4 <cl_hep_pumpFeedback_get_delta+0x28>)
   93ed6:	881a      	ldrh	r2, [r3, #0]
   93ed8:	4b07      	ldr	r3, [pc, #28]	; (93ef8 <cl_hep_pumpFeedback_get_delta+0x2c>)
   93eda:	881b      	ldrh	r3, [r3, #0]
   93edc:	1ad3      	subs	r3, r2, r3
   93ede:	b29b      	uxth	r3, r3
   93ee0:	b21a      	sxth	r2, r3
   93ee2:	687b      	ldr	r3, [r7, #4]
   93ee4:	801a      	strh	r2, [r3, #0]
	return 0;
   93ee6:	2300      	movs	r3, #0
}
   93ee8:	4618      	mov	r0, r3
   93eea:	370c      	adds	r7, #12
   93eec:	46bd      	mov	sp, r7
   93eee:	bc80      	pop	{r7}
   93ef0:	4770      	bx	lr
   93ef2:	bf00      	nop
   93ef4:	20071aca 	.word	0x20071aca
   93ef8:	20071ac4 	.word	0x20071ac4
   93efc:	00000000 	.word	0x00000000

00093f00 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 20 ms clock
{
   93f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   93f02:	af00      	add	r7, sp, #0
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   93f04:	4b64      	ldr	r3, [pc, #400]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   93f06:	781b      	ldrb	r3, [r3, #0]
   93f08:	2b00      	cmp	r3, #0
   93f0a:	f000 80b9 	beq.w	94080 <cl_hep_pumpFeedback_timer+0x180>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   93f0e:	4963      	ldr	r1, [pc, #396]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   93f10:	201b      	movs	r0, #27
   93f12:	4b63      	ldr	r3, [pc, #396]	; (940a0 <cl_hep_pumpFeedback_timer+0x1a0>)
   93f14:	4798      	blx	r3

		twentymscounter++;
   93f16:	4b63      	ldr	r3, [pc, #396]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   93f18:	881b      	ldrh	r3, [r3, #0]
   93f1a:	3301      	adds	r3, #1
   93f1c:	b29a      	uxth	r2, r3
   93f1e:	4b61      	ldr	r3, [pc, #388]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   93f20:	801a      	strh	r2, [r3, #0]
		if(twentymscounter > 10000)
   93f22:	4b60      	ldr	r3, [pc, #384]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   93f24:	881b      	ldrh	r3, [r3, #0]
   93f26:	f242 7210 	movw	r2, #10000	; 0x2710
   93f2a:	4293      	cmp	r3, r2
   93f2c:	d903      	bls.n	93f36 <cl_hep_pumpFeedback_timer+0x36>
		{
			Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   93f2e:	2101      	movs	r1, #1
   93f30:	2035      	movs	r0, #53	; 0x35
   93f32:	4b5d      	ldr	r3, [pc, #372]	; (940a8 <cl_hep_pumpFeedback_timer+0x1a8>)
   93f34:	4798      	blx	r3
		}
		if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   93f36:	4b58      	ldr	r3, [pc, #352]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   93f38:	781b      	ldrb	r3, [r3, #0]
   93f3a:	2b03      	cmp	r3, #3
   93f3c:	d106      	bne.n	93f4c <cl_hep_pumpFeedback_timer+0x4c>
   93f3e:	4b5b      	ldr	r3, [pc, #364]	; (940ac <cl_hep_pumpFeedback_timer+0x1ac>)
   93f40:	881b      	ldrh	r3, [r3, #0]
   93f42:	2b02      	cmp	r3, #2
   93f44:	d902      	bls.n	93f4c <cl_hep_pumpFeedback_timer+0x4c>
		{
			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   93f46:	4b54      	ldr	r3, [pc, #336]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   93f48:	2204      	movs	r2, #4
   93f4a:	701a      	strb	r2, [r3, #0]
		}

		if(count_state == false)
   93f4c:	4b58      	ldr	r3, [pc, #352]	; (940b0 <cl_hep_pumpFeedback_timer+0x1b0>)
   93f4e:	781b      	ldrb	r3, [r3, #0]
   93f50:	f083 0301 	eor.w	r3, r3, #1
   93f54:	b2db      	uxtb	r3, r3
   93f56:	2b00      	cmp	r3, #0
   93f58:	d012      	beq.n	93f80 <cl_hep_pumpFeedback_timer+0x80>
		{
			if(hep_rotataion_marker == 0 )
   93f5a:	4b50      	ldr	r3, [pc, #320]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   93f5c:	881b      	ldrh	r3, [r3, #0]
   93f5e:	2b00      	cmp	r3, #0
   93f60:	f040 808a 	bne.w	94078 <cl_hep_pumpFeedback_timer+0x178>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   93f64:	4b53      	ldr	r3, [pc, #332]	; (940b4 <cl_hep_pumpFeedback_timer+0x1b4>)
   93f66:	881a      	ldrh	r2, [r3, #0]
   93f68:	4b4c      	ldr	r3, [pc, #304]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   93f6a:	881b      	ldrh	r3, [r3, #0]
   93f6c:	429a      	cmp	r2, r3
   93f6e:	f000 8083 	beq.w	94078 <cl_hep_pumpFeedback_timer+0x178>
				{
					count_state = true;
   93f72:	4b4f      	ldr	r3, [pc, #316]	; (940b0 <cl_hep_pumpFeedback_timer+0x1b0>)
   93f74:	2201      	movs	r2, #1
   93f76:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					twentymscounter = 0;
   93f78:	4b4a      	ldr	r3, [pc, #296]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   93f7a:	2200      	movs	r2, #0
   93f7c:	801a      	strh	r2, [r3, #0]
   93f7e:	e07b      	b.n	94078 <cl_hep_pumpFeedback_timer+0x178>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   93f80:	4b46      	ldr	r3, [pc, #280]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   93f82:	881b      	ldrh	r3, [r3, #0]
   93f84:	2b00      	cmp	r3, #0
   93f86:	d177      	bne.n	94078 <cl_hep_pumpFeedback_timer+0x178>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   93f88:	4b4a      	ldr	r3, [pc, #296]	; (940b4 <cl_hep_pumpFeedback_timer+0x1b4>)
   93f8a:	881a      	ldrh	r2, [r3, #0]
   93f8c:	4b43      	ldr	r3, [pc, #268]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   93f8e:	881b      	ldrh	r3, [r3, #0]
   93f90:	429a      	cmp	r2, r3
   93f92:	d071      	beq.n	94078 <cl_hep_pumpFeedback_timer+0x178>
				{
					count_state = true;
   93f94:	4b46      	ldr	r3, [pc, #280]	; (940b0 <cl_hep_pumpFeedback_timer+0x1b0>)
   93f96:	2201      	movs	r2, #1
   93f98:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   93f9a:	4b44      	ldr	r3, [pc, #272]	; (940ac <cl_hep_pumpFeedback_timer+0x1ac>)
   93f9c:	881b      	ldrh	r3, [r3, #0]
   93f9e:	3301      	adds	r3, #1
   93fa0:	b29a      	uxth	r2, r3
   93fa2:	4b42      	ldr	r3, [pc, #264]	; (940ac <cl_hep_pumpFeedback_timer+0x1ac>)
   93fa4:	801a      	strh	r2, [r3, #0]
					hep_period = twentymscounter*20;
   93fa6:	4b3f      	ldr	r3, [pc, #252]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   93fa8:	881b      	ldrh	r3, [r3, #0]
   93faa:	461a      	mov	r2, r3
   93fac:	0092      	lsls	r2, r2, #2
   93fae:	4413      	add	r3, r2
   93fb0:	009b      	lsls	r3, r3, #2
   93fb2:	b29a      	uxth	r2, r3
   93fb4:	4b40      	ldr	r3, [pc, #256]	; (940b8 <cl_hep_pumpFeedback_timer+0x1b8>)
   93fb6:	801a      	strh	r2, [r3, #0]
				
					
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
					if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   93fb8:	4b37      	ldr	r3, [pc, #220]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   93fba:	781b      	ldrb	r3, [r3, #0]
   93fbc:	2b03      	cmp	r3, #3
   93fbe:	d04e      	beq.n	9405e <cl_hep_pumpFeedback_timer+0x15e>
					{
						if(hep_period > (1.01 *hep_expected_period))
   93fc0:	4b3d      	ldr	r3, [pc, #244]	; (940b8 <cl_hep_pumpFeedback_timer+0x1b8>)
   93fc2:	881b      	ldrh	r3, [r3, #0]
   93fc4:	461a      	mov	r2, r3
   93fc6:	4b3d      	ldr	r3, [pc, #244]	; (940bc <cl_hep_pumpFeedback_timer+0x1bc>)
   93fc8:	4610      	mov	r0, r2
   93fca:	4798      	blx	r3
   93fcc:	4605      	mov	r5, r0
   93fce:	460e      	mov	r6, r1
   93fd0:	4b3b      	ldr	r3, [pc, #236]	; (940c0 <cl_hep_pumpFeedback_timer+0x1c0>)
   93fd2:	881b      	ldrh	r3, [r3, #0]
   93fd4:	461a      	mov	r2, r3
   93fd6:	4b39      	ldr	r3, [pc, #228]	; (940bc <cl_hep_pumpFeedback_timer+0x1bc>)
   93fd8:	4610      	mov	r0, r2
   93fda:	4798      	blx	r3
   93fdc:	4c39      	ldr	r4, [pc, #228]	; (940c4 <cl_hep_pumpFeedback_timer+0x1c4>)
   93fde:	a32a      	add	r3, pc, #168	; (adr r3, 94088 <cl_hep_pumpFeedback_timer+0x188>)
   93fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   93fe4:	47a0      	blx	r4
   93fe6:	4603      	mov	r3, r0
   93fe8:	460c      	mov	r4, r1
   93fea:	461a      	mov	r2, r3
   93fec:	4623      	mov	r3, r4
   93fee:	4c36      	ldr	r4, [pc, #216]	; (940c8 <cl_hep_pumpFeedback_timer+0x1c8>)
   93ff0:	4628      	mov	r0, r5
   93ff2:	4631      	mov	r1, r6
   93ff4:	47a0      	blx	r4
   93ff6:	4603      	mov	r3, r0
   93ff8:	2b00      	cmp	r3, #0
   93ffa:	d007      	beq.n	9400c <cl_hep_pumpFeedback_timer+0x10c>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   93ffc:	4b26      	ldr	r3, [pc, #152]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   93ffe:	2206      	movs	r2, #6
   94000:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   94002:	2101      	movs	r1, #1
   94004:	2035      	movs	r0, #53	; 0x35
   94006:	4b28      	ldr	r3, [pc, #160]	; (940a8 <cl_hep_pumpFeedback_timer+0x1a8>)
   94008:	4798      	blx	r3
   9400a:	e028      	b.n	9405e <cl_hep_pumpFeedback_timer+0x15e>
						}
						else if(hep_period < (0.99 *hep_expected_period))
   9400c:	4b2a      	ldr	r3, [pc, #168]	; (940b8 <cl_hep_pumpFeedback_timer+0x1b8>)
   9400e:	881b      	ldrh	r3, [r3, #0]
   94010:	461a      	mov	r2, r3
   94012:	4b2a      	ldr	r3, [pc, #168]	; (940bc <cl_hep_pumpFeedback_timer+0x1bc>)
   94014:	4610      	mov	r0, r2
   94016:	4798      	blx	r3
   94018:	4605      	mov	r5, r0
   9401a:	460e      	mov	r6, r1
   9401c:	4b28      	ldr	r3, [pc, #160]	; (940c0 <cl_hep_pumpFeedback_timer+0x1c0>)
   9401e:	881b      	ldrh	r3, [r3, #0]
   94020:	461a      	mov	r2, r3
   94022:	4b26      	ldr	r3, [pc, #152]	; (940bc <cl_hep_pumpFeedback_timer+0x1bc>)
   94024:	4610      	mov	r0, r2
   94026:	4798      	blx	r3
   94028:	4c26      	ldr	r4, [pc, #152]	; (940c4 <cl_hep_pumpFeedback_timer+0x1c4>)
   9402a:	a319      	add	r3, pc, #100	; (adr r3, 94090 <cl_hep_pumpFeedback_timer+0x190>)
   9402c:	e9d3 2300 	ldrd	r2, r3, [r3]
   94030:	47a0      	blx	r4
   94032:	4603      	mov	r3, r0
   94034:	460c      	mov	r4, r1
   94036:	461a      	mov	r2, r3
   94038:	4623      	mov	r3, r4
   9403a:	4c24      	ldr	r4, [pc, #144]	; (940cc <cl_hep_pumpFeedback_timer+0x1cc>)
   9403c:	4628      	mov	r0, r5
   9403e:	4631      	mov	r1, r6
   94040:	47a0      	blx	r4
   94042:	4603      	mov	r3, r0
   94044:	2b00      	cmp	r3, #0
   94046:	d007      	beq.n	94058 <cl_hep_pumpFeedback_timer+0x158>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   94048:	4b13      	ldr	r3, [pc, #76]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   9404a:	2207      	movs	r2, #7
   9404c:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   9404e:	2101      	movs	r1, #1
   94050:	2034      	movs	r0, #52	; 0x34
   94052:	4b15      	ldr	r3, [pc, #84]	; (940a8 <cl_hep_pumpFeedback_timer+0x1a8>)
   94054:	4798      	blx	r3
   94056:	e002      	b.n	9405e <cl_hep_pumpFeedback_timer+0x15e>
						}
						else
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   94058:	4b0f      	ldr	r3, [pc, #60]	; (94098 <cl_hep_pumpFeedback_timer+0x198>)
   9405a:	2205      	movs	r2, #5
   9405c:	701a      	strb	r2, [r3, #0]
						}
					}

				
					hep_freq_in_min  = ( 60000) / hep_period;
   9405e:	4b16      	ldr	r3, [pc, #88]	; (940b8 <cl_hep_pumpFeedback_timer+0x1b8>)
   94060:	881b      	ldrh	r3, [r3, #0]
   94062:	461a      	mov	r2, r3
   94064:	f64e 2360 	movw	r3, #60000	; 0xea60
   94068:	fb93 f3f2 	sdiv	r3, r3, r2
   9406c:	b29a      	uxth	r2, r3
   9406e:	4b18      	ldr	r3, [pc, #96]	; (940d0 <cl_hep_pumpFeedback_timer+0x1d0>)
   94070:	801a      	strh	r2, [r3, #0]
					twentymscounter = 0;
   94072:	4b0c      	ldr	r3, [pc, #48]	; (940a4 <cl_hep_pumpFeedback_timer+0x1a4>)
   94074:	2200      	movs	r2, #0
   94076:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   94078:	4b08      	ldr	r3, [pc, #32]	; (9409c <cl_hep_pumpFeedback_timer+0x19c>)
   9407a:	881a      	ldrh	r2, [r3, #0]
   9407c:	4b0d      	ldr	r3, [pc, #52]	; (940b4 <cl_hep_pumpFeedback_timer+0x1b4>)
   9407e:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   94080:	2300      	movs	r3, #0
}
   94082:	4618      	mov	r0, r3
   94084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   94086:	bf00      	nop
   94088:	c28f5c29 	.word	0xc28f5c29
   9408c:	3ff028f5 	.word	0x3ff028f5
   94090:	7ae147ae 	.word	0x7ae147ae
   94094:	3fefae14 	.word	0x3fefae14
   94098:	20071ac6 	.word	0x20071ac6
   9409c:	20070a38 	.word	0x20070a38
   940a0:	0008e6a1 	.word	0x0008e6a1
   940a4:	20071ac8 	.word	0x20071ac8
   940a8:	0008302d 	.word	0x0008302d
   940ac:	20071ace 	.word	0x20071ace
   940b0:	20071ad0 	.word	0x20071ad0
   940b4:	20070a3a 	.word	0x20070a3a
   940b8:	20071aca 	.word	0x20071aca
   940bc:	000a5c45 	.word	0x000a5c45
   940c0:	20071ac4 	.word	0x20071ac4
   940c4:	000a5d11 	.word	0x000a5d11
   940c8:	000a6231 	.word	0x000a6231
   940cc:	000a61f5 	.word	0x000a61f5
   940d0:	20071acc 	.word	0x20071acc

000940d4 <cl_hep_pump_enddetction_timer>:

//Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 100 ms clock
{
   940d4:	b580      	push	{r7, lr}
   940d6:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   940d8:	4920      	ldr	r1, [pc, #128]	; (9415c <cl_hep_pump_enddetction_timer+0x88>)
   940da:	2017      	movs	r0, #23
   940dc:	4b20      	ldr	r3, [pc, #128]	; (94160 <cl_hep_pump_enddetction_timer+0x8c>)
   940de:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   940e0:	4b20      	ldr	r3, [pc, #128]	; (94164 <cl_hep_pump_enddetction_timer+0x90>)
   940e2:	881a      	ldrh	r2, [r3, #0]
   940e4:	4b1d      	ldr	r3, [pc, #116]	; (9415c <cl_hep_pump_enddetction_timer+0x88>)
   940e6:	881b      	ldrh	r3, [r3, #0]
   940e8:	429a      	cmp	r2, r3
   940ea:	d00c      	beq.n	94106 <cl_hep_pump_enddetction_timer+0x32>
			{
				prev_hp_start_status = hp_start_status;
   940ec:	4b1b      	ldr	r3, [pc, #108]	; (9415c <cl_hep_pump_enddetction_timer+0x88>)
   940ee:	881a      	ldrh	r2, [r3, #0]
   940f0:	4b1c      	ldr	r3, [pc, #112]	; (94164 <cl_hep_pump_enddetction_timer+0x90>)
   940f2:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   940f4:	4b19      	ldr	r3, [pc, #100]	; (9415c <cl_hep_pump_enddetction_timer+0x88>)
   940f6:	881b      	ldrh	r3, [r3, #0]
   940f8:	2b00      	cmp	r3, #0
   940fa:	d10c      	bne.n	94116 <cl_hep_pump_enddetction_timer+0x42>
				{
						cl_hep_controller(CL_HEP_EVENT_RIGHT_END_REACHED , 0);
   940fc:	2100      	movs	r1, #0
   940fe:	2003      	movs	r0, #3
   94100:	4b19      	ldr	r3, [pc, #100]	; (94168 <cl_hep_pump_enddetction_timer+0x94>)
   94102:	4798      	blx	r3
   94104:	e007      	b.n	94116 <cl_hep_pump_enddetction_timer+0x42>
						//sv_cntrl_resetHepa_dir();
						//	sv_cntrl_setHepa_dir();
					
				}
			}
				else if(hp_start_status == 0)
   94106:	4b15      	ldr	r3, [pc, #84]	; (9415c <cl_hep_pump_enddetction_timer+0x88>)
   94108:	881b      	ldrh	r3, [r3, #0]
   9410a:	2b00      	cmp	r3, #0
   9410c:	d103      	bne.n	94116 <cl_hep_pump_enddetction_timer+0x42>
				{
					cl_hep_controller(CL_HEP_EVENT_AT_RIGHT_END , 0); // here the information that we are at right end is sent to the controller.
   9410e:	2100      	movs	r1, #0
   94110:	2011      	movs	r0, #17
   94112:	4b15      	ldr	r3, [pc, #84]	; (94168 <cl_hep_pump_enddetction_timer+0x94>)
   94114:	4798      	blx	r3
				}
				



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   94116:	4915      	ldr	r1, [pc, #84]	; (9416c <cl_hep_pump_enddetction_timer+0x98>)
   94118:	2018      	movs	r0, #24
   9411a:	4b11      	ldr	r3, [pc, #68]	; (94160 <cl_hep_pump_enddetction_timer+0x8c>)
   9411c:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   9411e:	4b14      	ldr	r3, [pc, #80]	; (94170 <cl_hep_pump_enddetction_timer+0x9c>)
   94120:	881a      	ldrh	r2, [r3, #0]
   94122:	4b12      	ldr	r3, [pc, #72]	; (9416c <cl_hep_pump_enddetction_timer+0x98>)
   94124:	881b      	ldrh	r3, [r3, #0]
   94126:	429a      	cmp	r2, r3
   94128:	d00c      	beq.n	94144 <cl_hep_pump_enddetction_timer+0x70>
			{
				prev_hp_end_status = hp_end_status;
   9412a:	4b10      	ldr	r3, [pc, #64]	; (9416c <cl_hep_pump_enddetction_timer+0x98>)
   9412c:	881a      	ldrh	r2, [r3, #0]
   9412e:	4b10      	ldr	r3, [pc, #64]	; (94170 <cl_hep_pump_enddetction_timer+0x9c>)
   94130:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 0)
   94132:	4b0e      	ldr	r3, [pc, #56]	; (9416c <cl_hep_pump_enddetction_timer+0x98>)
   94134:	881b      	ldrh	r3, [r3, #0]
   94136:	2b00      	cmp	r3, #0
   94138:	d10c      	bne.n	94154 <cl_hep_pump_enddetction_timer+0x80>
				{
					cl_hep_controller(CL_HEP_EVENT_LEFT_END_REACHED , 0);
   9413a:	2100      	movs	r1, #0
   9413c:	2002      	movs	r0, #2
   9413e:	4b0a      	ldr	r3, [pc, #40]	; (94168 <cl_hep_pump_enddetction_timer+0x94>)
   94140:	4798      	blx	r3
   94142:	e007      	b.n	94154 <cl_hep_pump_enddetction_timer+0x80>
					
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",8);
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
				}
			}
			else if(hp_end_status == 0)
   94144:	4b09      	ldr	r3, [pc, #36]	; (9416c <cl_hep_pump_enddetction_timer+0x98>)
   94146:	881b      	ldrh	r3, [r3, #0]
   94148:	2b00      	cmp	r3, #0
   9414a:	d103      	bne.n	94154 <cl_hep_pump_enddetction_timer+0x80>
			{
				cl_hep_controller(CL_HEP_EVENT_AT_LEFT_END , 0);
   9414c:	2100      	movs	r1, #0
   9414e:	2010      	movs	r0, #16
   94150:	4b05      	ldr	r3, [pc, #20]	; (94168 <cl_hep_pump_enddetction_timer+0x94>)
   94152:	4798      	blx	r3
			
		}
			
		
		
		return 0;
   94154:	2300      	movs	r3, #0
   94156:	4618      	mov	r0, r3
   94158:	bd80      	pop	{r7, pc}
   9415a:	bf00      	nop
   9415c:	20071ad2 	.word	0x20071ad2
   94160:	0008e6a1 	.word	0x0008e6a1
   94164:	20071ad4 	.word	0x20071ad4
   94168:	00093861 	.word	0x00093861
   9416c:	20071ad6 	.word	0x20071ad6
   94170:	20071ad8 	.word	0x20071ad8

00094174 <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );
extern Cl_BoolType IntakeReadyFlag;
Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   94174:	b580      	push	{r7, lr}
   94176:	b084      	sub	sp, #16
   94178:	af00      	add	r7, sp, #0
   9417a:	4603      	mov	r3, r0
   9417c:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   9417e:	79fb      	ldrb	r3, [r7, #7]
   94180:	3b01      	subs	r3, #1
   94182:	2b03      	cmp	r3, #3
   94184:	d861      	bhi.n	9424a <cl_level_switchcontroller+0xd6>
   94186:	a201      	add	r2, pc, #4	; (adr r2, 9418c <cl_level_switchcontroller+0x18>)
   94188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9418c:	0009419d 	.word	0x0009419d
   94190:	0009424b 	.word	0x0009424b
   94194:	0009424b 	.word	0x0009424b
   94198:	000941cb 	.word	0x000941cb
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   9419c:	203e      	movs	r0, #62	; 0x3e
   9419e:	4b2f      	ldr	r3, [pc, #188]	; (9425c <cl_level_switchcontroller+0xe8>)
   941a0:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   941a2:	203d      	movs	r0, #61	; 0x3d
   941a4:	4b2d      	ldr	r3, [pc, #180]	; (9425c <cl_level_switchcontroller+0xe8>)
   941a6:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   941a8:	202d      	movs	r0, #45	; 0x2d
   941aa:	4b2c      	ldr	r3, [pc, #176]	; (9425c <cl_level_switchcontroller+0xe8>)
   941ac:	4798      	blx	r3
		
		toggle_count++;
   941ae:	4b2c      	ldr	r3, [pc, #176]	; (94260 <cl_level_switchcontroller+0xec>)
   941b0:	881b      	ldrh	r3, [r3, #0]
   941b2:	3301      	adds	r3, #1
   941b4:	b29a      	uxth	r2, r3
   941b6:	4b2a      	ldr	r3, [pc, #168]	; (94260 <cl_level_switchcontroller+0xec>)
   941b8:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   941ba:	2300      	movs	r3, #0
   941bc:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   941be:	4b28      	ldr	r3, [pc, #160]	; (94260 <cl_level_switchcontroller+0xec>)
   941c0:	881b      	ldrh	r3, [r3, #0]
   941c2:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   941c4:	2315      	movs	r3, #21
   941c6:	73bb      	strb	r3, [r7, #14]
			// low inlet flow alarm or level switch  malfunction
	//		Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);    commented
		}

	
		break;
   941c8:	e042      	b.n	94250 <cl_level_switchcontroller+0xdc>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   941ca:	4b26      	ldr	r3, [pc, #152]	; (94264 <cl_level_switchcontroller+0xf0>)
   941cc:	781b      	ldrb	r3, [r3, #0]
   941ce:	2b01      	cmp	r3, #1
   941d0:	d11b      	bne.n	9420a <cl_level_switchcontroller+0x96>
		{
			//stop flow
			if(IntakeReadyFlag){
   941d2:	4b25      	ldr	r3, [pc, #148]	; (94268 <cl_level_switchcontroller+0xf4>)
   941d4:	781b      	ldrb	r3, [r3, #0]
   941d6:	2b00      	cmp	r3, #0
   941d8:	d003      	beq.n	941e2 <cl_level_switchcontroller+0x6e>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   941da:	2001      	movs	r0, #1
   941dc:	4b23      	ldr	r3, [pc, #140]	; (9426c <cl_level_switchcontroller+0xf8>)
   941de:	4798      	blx	r3
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   941e0:	e035      	b.n	9424e <cl_level_switchcontroller+0xda>
			}
			else{
				
			
			
			sv_cntrl_deactivate_valve(VALVE_ID1);
   941e2:	2001      	movs	r0, #1
   941e4:	4b21      	ldr	r3, [pc, #132]	; (9426c <cl_level_switchcontroller+0xf8>)
   941e6:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   941e8:	4b1e      	ldr	r3, [pc, #120]	; (94264 <cl_level_switchcontroller+0xf0>)
   941ea:	2200      	movs	r2, #0
   941ec:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   941ee:	4b20      	ldr	r3, [pc, #128]	; (94270 <cl_level_switchcontroller+0xfc>)
   941f0:	2200      	movs	r2, #0
   941f2:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   941f4:	4b1f      	ldr	r3, [pc, #124]	; (94274 <cl_level_switchcontroller+0x100>)
   941f6:	781b      	ldrb	r3, [r3, #0]
   941f8:	2b02      	cmp	r3, #2
   941fa:	d028      	beq.n	9424e <cl_level_switchcontroller+0xda>
			{
				toggle_count = 0;
   941fc:	4b18      	ldr	r3, [pc, #96]	; (94260 <cl_level_switchcontroller+0xec>)
   941fe:	2200      	movs	r2, #0
   94200:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   94202:	4b1c      	ldr	r3, [pc, #112]	; (94274 <cl_level_switchcontroller+0x100>)
   94204:	2202      	movs	r2, #2
   94206:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   94208:	e021      	b.n	9424e <cl_level_switchcontroller+0xda>
				toggle_count = 0;
				v1_status = V1_OFF;
			}
			}
		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   9420a:	4b16      	ldr	r3, [pc, #88]	; (94264 <cl_level_switchcontroller+0xf0>)
   9420c:	781b      	ldrb	r3, [r3, #0]
   9420e:	2b02      	cmp	r3, #2
   94210:	d11d      	bne.n	9424e <cl_level_switchcontroller+0xda>
		{
			//start flow
			if(IntakeReadyFlag){
   94212:	4b15      	ldr	r3, [pc, #84]	; (94268 <cl_level_switchcontroller+0xf4>)
   94214:	781b      	ldrb	r3, [r3, #0]
   94216:	2b00      	cmp	r3, #0
   94218:	d003      	beq.n	94222 <cl_level_switchcontroller+0xae>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   9421a:	2001      	movs	r0, #1
   9421c:	4b13      	ldr	r3, [pc, #76]	; (9426c <cl_level_switchcontroller+0xf8>)
   9421e:	4798      	blx	r3
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   94220:	e015      	b.n	9424e <cl_level_switchcontroller+0xda>
			if(IntakeReadyFlag){
				sv_cntrl_deactivate_valve(VALVE_ID1);
			}
			else{
			
			sv_cntrl_activate_valve(VALVE_ID1);
   94222:	2001      	movs	r0, #1
   94224:	4b14      	ldr	r3, [pc, #80]	; (94278 <cl_level_switchcontroller+0x104>)
   94226:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   94228:	4b0e      	ldr	r3, [pc, #56]	; (94264 <cl_level_switchcontroller+0xf0>)
   9422a:	2200      	movs	r2, #0
   9422c:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   9422e:	4b13      	ldr	r3, [pc, #76]	; (9427c <cl_level_switchcontroller+0x108>)
   94230:	2200      	movs	r2, #0
   94232:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   94234:	4b0f      	ldr	r3, [pc, #60]	; (94274 <cl_level_switchcontroller+0x100>)
   94236:	781b      	ldrb	r3, [r3, #0]
   94238:	2b01      	cmp	r3, #1
   9423a:	d008      	beq.n	9424e <cl_level_switchcontroller+0xda>
			{
				toggle_count = 0;
   9423c:	4b08      	ldr	r3, [pc, #32]	; (94260 <cl_level_switchcontroller+0xec>)
   9423e:	2200      	movs	r2, #0
   94240:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   94242:	4b0c      	ldr	r3, [pc, #48]	; (94274 <cl_level_switchcontroller+0x100>)
   94244:	2201      	movs	r2, #1
   94246:	701a      	strb	r2, [r3, #0]
			}
			}
		}
		break;
   94248:	e001      	b.n	9424e <cl_level_switchcontroller+0xda>
		default:break;
   9424a:	bf00      	nop
   9424c:	e000      	b.n	94250 <cl_level_switchcontroller+0xdc>
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   9424e:	bf00      	nop
		default:break;
		
	}
	return CL_OK;
   94250:	2300      	movs	r3, #0
   94252:	4618      	mov	r0, r3
   94254:	3710      	adds	r7, #16
   94256:	46bd      	mov	sp, r7
   94258:	bd80      	pop	{r7, pc}
   9425a:	bf00      	nop
   9425c:	00082ed5 	.word	0x00082ed5
   94260:	20071ae2 	.word	0x20071ae2
   94264:	20071adc 	.word	0x20071adc
   94268:	20071c08 	.word	0x20071c08
   9426c:	00099ac9 	.word	0x00099ac9
   94270:	20071ae0 	.word	0x20071ae0
   94274:	20071ae4 	.word	0x20071ae4
   94278:	00099aa9 	.word	0x00099aa9
   9427c:	20071ade 	.word	0x20071ade

00094280 <cl_isouf_controller>:
	{FPCURRENTSTATUS,false,false,false},
	*/
};

Cl_ReturnCodeType cl_isouf_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   94280:	b580      	push	{r7, lr}
   94282:	b090      	sub	sp, #64	; 0x40
   94284:	af00      	add	r7, sp, #0
   94286:	4603      	mov	r3, r0
   94288:	71fb      	strb	r3, [r7, #7]
	
//	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
	Cl_Uint16Type uf_delta_value = 0 ;
   9428a:	2300      	movs	r3, #0
   9428c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   9428e:	2300      	movs	r3, #0
   94290:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint32Type temptime = 0;
   94292:	2300      	movs	r3, #0
   94294:	637b      	str	r3, [r7, #52]	; 0x34
	
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   94296:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9429a:	2200      	movs	r2, #0
   9429c:	601a      	str	r2, [r3, #0]
   9429e:	711a      	strb	r2, [r3, #4]
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   942a0:	2351      	movs	r3, #81	; 0x51
   942a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Cl_Uint8Type data = 0;
   942a6:	2300      	movs	r3, #0
   942a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Cl_Uint8Type datasize = 0;
   942ac:	2300      	movs	r3, #0
   942ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   942b2:	2300      	movs	r3, #0
   942b4:	61fb      	str	r3, [r7, #28]
	
	cl_isouf_events cl_isouf_event = EVENT_ISOUF_NULL_EVENT;
   942b6:	2300      	movs	r3, #0
   942b8:	76fb      	strb	r3, [r7, #27]
	
	cl_isouf_retcode =  cl_isouf_translatemacevent( Cl_MacDlsisEvent, &cl_isouf_event);
   942ba:	f107 021b 	add.w	r2, r7, #27
   942be:	79fb      	ldrb	r3, [r7, #7]
   942c0:	4611      	mov	r1, r2
   942c2:	4618      	mov	r0, r3
   942c4:	4baf      	ldr	r3, [pc, #700]	; (94584 <cl_isouf_controller+0x304>)
   942c6:	4798      	blx	r3
   942c8:	4603      	mov	r3, r0
   942ca:	461a      	mov	r2, r3
   942cc:	4bae      	ldr	r3, [pc, #696]	; (94588 <cl_isouf_controller+0x308>)
   942ce:	701a      	strb	r2, [r3, #0]
	
	
	switch(cl_isouf_event){
   942d0:	7efb      	ldrb	r3, [r7, #27]
   942d2:	3b10      	subs	r3, #16
   942d4:	2b4c      	cmp	r3, #76	; 0x4c
   942d6:	f200 8192 	bhi.w	945fe <cl_isouf_controller+0x37e>
   942da:	a201      	add	r2, pc, #4	; (adr r2, 942e0 <cl_isouf_controller+0x60>)
   942dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   942e0:	000944f3 	.word	0x000944f3
   942e4:	000944bf 	.word	0x000944bf
   942e8:	000944d9 	.word	0x000944d9
   942ec:	0009441f 	.word	0x0009441f
   942f0:	00094457 	.word	0x00094457
   942f4:	000944b5 	.word	0x000944b5
   942f8:	000945ff 	.word	0x000945ff
   942fc:	000945ff 	.word	0x000945ff
   94300:	000945ff 	.word	0x000945ff
   94304:	000945ff 	.word	0x000945ff
   94308:	000945ff 	.word	0x000945ff
   9430c:	00094415 	.word	0x00094415
   94310:	000945ff 	.word	0x000945ff
   94314:	000945ff 	.word	0x000945ff
   94318:	000945ff 	.word	0x000945ff
   9431c:	000945ff 	.word	0x000945ff
   94320:	000945ff 	.word	0x000945ff
   94324:	000945ff 	.word	0x000945ff
   94328:	000945ff 	.word	0x000945ff
   9432c:	000945ff 	.word	0x000945ff
   94330:	000945ff 	.word	0x000945ff
   94334:	000945ff 	.word	0x000945ff
   94338:	000945ff 	.word	0x000945ff
   9433c:	000945ff 	.word	0x000945ff
   94340:	000945ff 	.word	0x000945ff
   94344:	000945ff 	.word	0x000945ff
   94348:	000945ff 	.word	0x000945ff
   9434c:	000945ff 	.word	0x000945ff
   94350:	000945ff 	.word	0x000945ff
   94354:	000945ff 	.word	0x000945ff
   94358:	000945ff 	.word	0x000945ff
   9435c:	000945ff 	.word	0x000945ff
   94360:	000945ff 	.word	0x000945ff
   94364:	000945ff 	.word	0x000945ff
   94368:	000945ff 	.word	0x000945ff
   9436c:	000945ff 	.word	0x000945ff
   94370:	000945ff 	.word	0x000945ff
   94374:	000945ff 	.word	0x000945ff
   94378:	000945ff 	.word	0x000945ff
   9437c:	000945ff 	.word	0x000945ff
   94380:	000945ff 	.word	0x000945ff
   94384:	000945ff 	.word	0x000945ff
   94388:	000945ff 	.word	0x000945ff
   9438c:	000945ff 	.word	0x000945ff
   94390:	000945ff 	.word	0x000945ff
   94394:	000945ff 	.word	0x000945ff
   94398:	000945ff 	.word	0x000945ff
   9439c:	000945ff 	.word	0x000945ff
   943a0:	000945ff 	.word	0x000945ff
   943a4:	000945ff 	.word	0x000945ff
   943a8:	000945ff 	.word	0x000945ff
   943ac:	000945ff 	.word	0x000945ff
   943b0:	000945ff 	.word	0x000945ff
   943b4:	000945ff 	.word	0x000945ff
   943b8:	000945ff 	.word	0x000945ff
   943bc:	000945ff 	.word	0x000945ff
   943c0:	000945ff 	.word	0x000945ff
   943c4:	000945ff 	.word	0x000945ff
   943c8:	000945ff 	.word	0x000945ff
   943cc:	000945ff 	.word	0x000945ff
   943d0:	000945ff 	.word	0x000945ff
   943d4:	000945ff 	.word	0x000945ff
   943d8:	000945ff 	.word	0x000945ff
   943dc:	000945ff 	.word	0x000945ff
   943e0:	000945ff 	.word	0x000945ff
   943e4:	000945ff 	.word	0x000945ff
   943e8:	000945ff 	.word	0x000945ff
   943ec:	000945ff 	.word	0x000945ff
   943f0:	000945ff 	.word	0x000945ff
   943f4:	000945ff 	.word	0x000945ff
   943f8:	000945ff 	.word	0x000945ff
   943fc:	000945ff 	.word	0x000945ff
   94400:	000945ff 	.word	0x000945ff
   94404:	000945ff 	.word	0x000945ff
   94408:	000945ff 	.word	0x000945ff
   9440c:	00094529 	.word	0x00094529
   94410:	000945a5 	.word	0x000945a5
		
		case EVENT_ISOUF_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   94414:	2100      	movs	r1, #0
   94416:	2007      	movs	r0, #7
   94418:	4b5c      	ldr	r3, [pc, #368]	; (9458c <cl_isouf_controller+0x30c>)
   9441a:	4798      	blx	r3
		break;
   9441c:	e0fa      	b.n	94614 <cl_isouf_controller+0x394>
		
		
		case EVENT_ISOUF_HEP_RATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   9441e:	4b5c      	ldr	r3, [pc, #368]	; (94590 <cl_isouf_controller+0x310>)
   94420:	7e1b      	ldrb	r3, [r3, #24]
   94422:	2b00      	cmp	r3, #0
   94424:	f000 80ed 	beq.w	94602 <cl_isouf_controller+0x382>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   94428:	4b59      	ldr	r3, [pc, #356]	; (94590 <cl_isouf_controller+0x310>)
   9442a:	791b      	ldrb	r3, [r3, #4]
   9442c:	753b      	strb	r3, [r7, #20]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9442e:	4b58      	ldr	r3, [pc, #352]	; (94590 <cl_isouf_controller+0x310>)
   94430:	795b      	ldrb	r3, [r3, #5]
   94432:	757b      	strb	r3, [r7, #21]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   94434:	4b56      	ldr	r3, [pc, #344]	; (94590 <cl_isouf_controller+0x310>)
   94436:	799b      	ldrb	r3, [r3, #6]
   94438:	75bb      	strb	r3, [r7, #22]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9443a:	4b55      	ldr	r3, [pc, #340]	; (94590 <cl_isouf_controller+0x310>)
   9443c:	79db      	ldrb	r3, [r3, #7]
   9443e:	75fb      	strb	r3, [r7, #23]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   94440:	8abb      	ldrh	r3, [r7, #20]
   94442:	461a      	mov	r2, r3
   94444:	4b53      	ldr	r3, [pc, #332]	; (94594 <cl_isouf_controller+0x314>)
   94446:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   94448:	4b52      	ldr	r3, [pc, #328]	; (94594 <cl_isouf_controller+0x314>)
   9444a:	69db      	ldr	r3, [r3, #28]
   9444c:	4619      	mov	r1, r3
   9444e:	2006      	movs	r0, #6
   94450:	4b4e      	ldr	r3, [pc, #312]	; (9458c <cl_isouf_controller+0x30c>)
   94452:	4798      	blx	r3
		}
		break;
   94454:	e0d5      	b.n	94602 <cl_isouf_controller+0x382>
		case EVENT_ISOUF_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   94456:	4b4e      	ldr	r3, [pc, #312]	; (94590 <cl_isouf_controller+0x310>)
   94458:	7e1b      	ldrb	r3, [r3, #24]
   9445a:	2b00      	cmp	r3, #0
   9445c:	f000 80d3 	beq.w	94606 <cl_isouf_controller+0x386>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   94460:	4b4b      	ldr	r3, [pc, #300]	; (94590 <cl_isouf_controller+0x310>)
   94462:	795b      	ldrb	r3, [r3, #5]
   94464:	743b      	strb	r3, [r7, #16]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   94466:	4b4a      	ldr	r3, [pc, #296]	; (94590 <cl_isouf_controller+0x310>)
   94468:	799b      	ldrb	r3, [r3, #6]
   9446a:	747b      	strb	r3, [r7, #17]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9446c:	4b48      	ldr	r3, [pc, #288]	; (94590 <cl_isouf_controller+0x310>)
   9446e:	79db      	ldrb	r3, [r3, #7]
   94470:	74bb      	strb	r3, [r7, #18]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   94472:	4b47      	ldr	r3, [pc, #284]	; (94590 <cl_isouf_controller+0x310>)
   94474:	7a1b      	ldrb	r3, [r3, #8]
   94476:	74fb      	strb	r3, [r7, #19]
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   94478:	4b45      	ldr	r3, [pc, #276]	; (94590 <cl_isouf_controller+0x310>)
   9447a:	791b      	ldrb	r3, [r3, #4]
   9447c:	2b01      	cmp	r3, #1
   9447e:	d104      	bne.n	9448a <cl_isouf_controller+0x20a>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   94480:	2100      	movs	r1, #0
   94482:	2001      	movs	r0, #1
   94484:	4b41      	ldr	r3, [pc, #260]	; (9458c <cl_isouf_controller+0x30c>)
   94486:	4798      	blx	r3
			}
			
		}
		
		
		break;
   94488:	e0bd      	b.n	94606 <cl_isouf_controller+0x386>
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9448a:	4b41      	ldr	r3, [pc, #260]	; (94590 <cl_isouf_controller+0x310>)
   9448c:	791b      	ldrb	r3, [r3, #4]
   9448e:	2b02      	cmp	r3, #2
   94490:	d104      	bne.n	9449c <cl_isouf_controller+0x21c>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   94492:	2100      	movs	r1, #0
   94494:	2004      	movs	r0, #4
   94496:	4b3d      	ldr	r3, [pc, #244]	; (9458c <cl_isouf_controller+0x30c>)
   94498:	4798      	blx	r3
			}
			
		}
		
		
		break;
   9449a:	e0b4      	b.n	94606 <cl_isouf_controller+0x386>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9449c:	4b3c      	ldr	r3, [pc, #240]	; (94590 <cl_isouf_controller+0x310>)
   9449e:	791b      	ldrb	r3, [r3, #4]
   944a0:	2b00      	cmp	r3, #0
   944a2:	f040 80b0 	bne.w	94606 <cl_isouf_controller+0x386>
			{
				cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   944a6:	4b3b      	ldr	r3, [pc, #236]	; (94594 <cl_isouf_controller+0x314>)
   944a8:	69db      	ldr	r3, [r3, #28]
   944aa:	4619      	mov	r1, r3
   944ac:	200a      	movs	r0, #10
   944ae:	4b37      	ldr	r3, [pc, #220]	; (9458c <cl_isouf_controller+0x30c>)
   944b0:	4798      	blx	r3
			}
			
		}
		
		
		break;
   944b2:	e0a8      	b.n	94606 <cl_isouf_controller+0x386>
		case EVENT_ISOUF_HEP_OFF:
		cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   944b4:	2100      	movs	r1, #0
   944b6:	2009      	movs	r0, #9
   944b8:	4b34      	ldr	r3, [pc, #208]	; (9458c <cl_isouf_controller+0x30c>)
   944ba:	4798      	blx	r3
		break;
   944bc:	e0aa      	b.n	94614 <cl_isouf_controller+0x394>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   944be:	2100      	movs	r1, #0
   944c0:	2002      	movs	r0, #2
   944c2:	4b35      	ldr	r3, [pc, #212]	; (94598 <cl_isouf_controller+0x318>)
   944c4:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   944c6:	2101      	movs	r1, #1
   944c8:	2001      	movs	r0, #1
   944ca:	4b34      	ldr	r3, [pc, #208]	; (9459c <cl_isouf_controller+0x31c>)
   944cc:	4798      	blx	r3
   944ce:	4603      	mov	r3, r0
   944d0:	461a      	mov	r2, r3
   944d2:	4b2d      	ldr	r3, [pc, #180]	; (94588 <cl_isouf_controller+0x308>)
   944d4:	701a      	strb	r2, [r3, #0]
		break;
   944d6:	e09d      	b.n	94614 <cl_isouf_controller+0x394>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   944d8:	2100      	movs	r1, #0
   944da:	2004      	movs	r0, #4
   944dc:	4b2e      	ldr	r3, [pc, #184]	; (94598 <cl_isouf_controller+0x318>)
   944de:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   944e0:	2100      	movs	r1, #0
   944e2:	2001      	movs	r0, #1
   944e4:	4b2d      	ldr	r3, [pc, #180]	; (9459c <cl_isouf_controller+0x31c>)
   944e6:	4798      	blx	r3
   944e8:	4603      	mov	r3, r0
   944ea:	461a      	mov	r2, r3
   944ec:	4b26      	ldr	r3, [pc, #152]	; (94588 <cl_isouf_controller+0x308>)
   944ee:	701a      	strb	r2, [r3, #0]
		break;
   944f0:	e090      	b.n	94614 <cl_isouf_controller+0x394>
		case EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   944f2:	4b27      	ldr	r3, [pc, #156]	; (94590 <cl_isouf_controller+0x310>)
   944f4:	7e1b      	ldrb	r3, [r3, #24]
   944f6:	2b00      	cmp	r3, #0
   944f8:	f000 8087 	beq.w	9460a <cl_isouf_controller+0x38a>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   944fc:	4b24      	ldr	r3, [pc, #144]	; (94590 <cl_isouf_controller+0x310>)
   944fe:	791b      	ldrb	r3, [r3, #4]
   94500:	733b      	strb	r3, [r7, #12]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   94502:	4b23      	ldr	r3, [pc, #140]	; (94590 <cl_isouf_controller+0x310>)
   94504:	795b      	ldrb	r3, [r3, #5]
   94506:	737b      	strb	r3, [r7, #13]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   94508:	4b21      	ldr	r3, [pc, #132]	; (94590 <cl_isouf_controller+0x310>)
   9450a:	799b      	ldrb	r3, [r3, #6]
   9450c:	73bb      	strb	r3, [r7, #14]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9450e:	4b20      	ldr	r3, [pc, #128]	; (94590 <cl_isouf_controller+0x310>)
   94510:	79db      	ldrb	r3, [r3, #7]
   94512:	73fb      	strb	r3, [r7, #15]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   94514:	89bb      	ldrh	r3, [r7, #12]
   94516:	4619      	mov	r1, r3
   94518:	2001      	movs	r0, #1
   9451a:	4b1f      	ldr	r3, [pc, #124]	; (94598 <cl_isouf_controller+0x318>)
   9451c:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9451e:	89bb      	ldrh	r3, [r7, #12]
   94520:	461a      	mov	r2, r3
   94522:	4b1c      	ldr	r3, [pc, #112]	; (94594 <cl_isouf_controller+0x314>)
   94524:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   94526:	e070      	b.n	9460a <cl_isouf_controller+0x38a>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   94528:	4b1a      	ldr	r3, [pc, #104]	; (94594 <cl_isouf_controller+0x314>)
   9452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9452c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   94530:	d86d      	bhi.n	9460e <cl_isouf_controller+0x38e>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   94532:	4b18      	ldr	r3, [pc, #96]	; (94594 <cl_isouf_controller+0x314>)
   94534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94536:	330a      	adds	r3, #10
   94538:	4a16      	ldr	r2, [pc, #88]	; (94594 <cl_isouf_controller+0x314>)
   9453a:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9453c:	4b15      	ldr	r3, [pc, #84]	; (94594 <cl_isouf_controller+0x314>)
   9453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94540:	4619      	mov	r1, r3
   94542:	2001      	movs	r0, #1
   94544:	4b14      	ldr	r3, [pc, #80]	; (94598 <cl_isouf_controller+0x318>)
   94546:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   94548:	230f      	movs	r3, #15
   9454a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9454e:	4b11      	ldr	r3, [pc, #68]	; (94594 <cl_isouf_controller+0x314>)
   94550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94552:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   94554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   94558:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9455c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   94560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   94564:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   94568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9456c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   94570:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   94574:	f107 0324 	add.w	r3, r7, #36	; 0x24
   94578:	2205      	movs	r2, #5
   9457a:	4619      	mov	r1, r3
   9457c:	202a      	movs	r0, #42	; 0x2a
   9457e:	4b08      	ldr	r3, [pc, #32]	; (945a0 <cl_isouf_controller+0x320>)
   94580:	4798      	blx	r3
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   94582:	e044      	b.n	9460e <cl_isouf_controller+0x38e>
   94584:	000958a5 	.word	0x000958a5
   94588:	20071ae6 	.word	0x20071ae6
   9458c:	00093861 	.word	0x00093861
   94590:	200723e8 	.word	0x200723e8
   94594:	20072654 	.word	0x20072654
   94598:	0009316d 	.word	0x0009316d
   9459c:	00082de1 	.word	0x00082de1
   945a0:	0009b805 	.word	0x0009b805
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   945a4:	4b8f      	ldr	r3, [pc, #572]	; (947e4 <cl_isouf_controller+0x564>)
   945a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   945a8:	2b63      	cmp	r3, #99	; 0x63
   945aa:	d932      	bls.n	94612 <cl_isouf_controller+0x392>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   945ac:	4b8d      	ldr	r3, [pc, #564]	; (947e4 <cl_isouf_controller+0x564>)
   945ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   945b0:	3b0a      	subs	r3, #10
   945b2:	4a8c      	ldr	r2, [pc, #560]	; (947e4 <cl_isouf_controller+0x564>)
   945b4:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   945b6:	4b8b      	ldr	r3, [pc, #556]	; (947e4 <cl_isouf_controller+0x564>)
   945b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   945ba:	4619      	mov	r1, r3
   945bc:	2001      	movs	r0, #1
   945be:	4b8a      	ldr	r3, [pc, #552]	; (947e8 <cl_isouf_controller+0x568>)
   945c0:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   945c2:	230f      	movs	r3, #15
   945c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   945c8:	4b86      	ldr	r3, [pc, #536]	; (947e4 <cl_isouf_controller+0x564>)
   945ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   945cc:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   945ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   945d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   945d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   945da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   945de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   945e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   945e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   945ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   945ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
   945f2:	2205      	movs	r2, #5
   945f4:	4619      	mov	r1, r3
   945f6:	202a      	movs	r0, #42	; 0x2a
   945f8:	4b7c      	ldr	r3, [pc, #496]	; (947ec <cl_isouf_controller+0x56c>)
   945fa:	4798      	blx	r3
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   945fc:	e009      	b.n	94612 <cl_isouf_controller+0x392>
		
		
		default : break;
   945fe:	bf00      	nop
   94600:	e008      	b.n	94614 <cl_isouf_controller+0x394>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
		}
		break;
   94602:	bf00      	nop
   94604:	e006      	b.n	94614 <cl_isouf_controller+0x394>
			}
			
		}
		
		
		break;
   94606:	bf00      	nop
   94608:	e004      	b.n	94614 <cl_isouf_controller+0x394>
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		break;
   9460a:	bf00      	nop
   9460c:	e002      	b.n	94614 <cl_isouf_controller+0x394>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   9460e:	bf00      	nop
   94610:	e000      	b.n	94614 <cl_isouf_controller+0x394>
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   94612:	bf00      	nop
		
		default : break;
	}
	
	
	switch(cl_isouf_state)
   94614:	4b76      	ldr	r3, [pc, #472]	; (947f0 <cl_isouf_controller+0x570>)
   94616:	781b      	ldrb	r3, [r3, #0]
   94618:	2b08      	cmp	r3, #8
   9461a:	f200 80dc 	bhi.w	947d6 <cl_isouf_controller+0x556>
   9461e:	a201      	add	r2, pc, #4	; (adr r2, 94624 <cl_isouf_controller+0x3a4>)
   94620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94624:	00094649 	.word	0x00094649
   94628:	00094667 	.word	0x00094667
   9462c:	00094781 	.word	0x00094781
   94630:	000947d7 	.word	0x000947d7
   94634:	0009479f 	.word	0x0009479f
   94638:	000947d7 	.word	0x000947d7
   9463c:	000947d7 	.word	0x000947d7
   94640:	000947c3 	.word	0x000947c3
   94644:	00094753 	.word	0x00094753
	{
			case CL_ISOUF_STATE_IDLE:
			switch (cl_isouf_event)
   94648:	7efb      	ldrb	r3, [r7, #27]
   9464a:	2b16      	cmp	r3, #22
   9464c:	d000      	beq.n	94650 <cl_isouf_controller+0x3d0>
					ufRemoved = 0;
					Cl_Isouf_start();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
					break;
					default: break;
   9464e:	e009      	b.n	94664 <cl_isouf_controller+0x3e4>
				
				{
					case EVENT_ISOUF_START:
					
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   94650:	4b68      	ldr	r3, [pc, #416]	; (947f4 <cl_isouf_controller+0x574>)
   94652:	f04f 0200 	mov.w	r2, #0
   94656:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   94658:	4b67      	ldr	r3, [pc, #412]	; (947f8 <cl_isouf_controller+0x578>)
   9465a:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   9465c:	4b64      	ldr	r3, [pc, #400]	; (947f0 <cl_isouf_controller+0x570>)
   9465e:	2201      	movs	r2, #1
   94660:	701a      	strb	r2, [r3, #0]
					break;
   94662:	bf00      	nop
					default: break;
				}
				break;
   94664:	e0b8      	b.n	947d8 <cl_isouf_controller+0x558>
				
					
			case CL_ISOUF_STATE_STARTED:
			
			switch(cl_isouf_event){
   94666:	7efb      	ldrb	r3, [r7, #27]
   94668:	3b08      	subs	r3, #8
   9466a:	2b10      	cmp	r3, #16
   9466c:	d86d      	bhi.n	9474a <cl_isouf_controller+0x4ca>
   9466e:	a201      	add	r2, pc, #4	; (adr r2, 94674 <cl_isouf_controller+0x3f4>)
   94670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94674:	000946b9 	.word	0x000946b9
   94678:	000946d7 	.word	0x000946d7
   9467c:	000946bf 	.word	0x000946bf
   94680:	0009474b 	.word	0x0009474b
   94684:	000946c9 	.word	0x000946c9
   94688:	0009474b 	.word	0x0009474b
   9468c:	0009474b 	.word	0x0009474b
   94690:	0009474b 	.word	0x0009474b
   94694:	0009474b 	.word	0x0009474b
   94698:	0009474b 	.word	0x0009474b
   9469c:	0009474b 	.word	0x0009474b
   946a0:	0009474b 	.word	0x0009474b
   946a4:	0009474b 	.word	0x0009474b
   946a8:	0009474b 	.word	0x0009474b
   946ac:	0009474b 	.word	0x0009474b
   946b0:	0009474b 	.word	0x0009474b
   946b4:	00094745 	.word	0x00094745
// 				cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
// 				break;
				
				case EVENT_ISOUF_TICK_500MS :
				
					cl_isouf_retcode == cl_checkforblooddetection();
   946b8:	4b50      	ldr	r3, [pc, #320]	; (947fc <cl_isouf_controller+0x57c>)
   946ba:	4798      	blx	r3
				
				break;
   946bc:	e048      	b.n	94750 <cl_isouf_controller+0x4d0>
				
				case EVENT_ISOUF_TICK_MINUTE:
				
				//isoufRemoved =  isoufRemoved + (Treatdata[ID_ufrate]/10);
				
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   946be:	2100      	movs	r1, #0
   946c0:	200a      	movs	r0, #10
   946c2:	4b4f      	ldr	r3, [pc, #316]	; (94800 <cl_isouf_controller+0x580>)
   946c4:	4798      	blx	r3
			break;
   946c6:	e043      	b.n	94750 <cl_isouf_controller+0x4d0>
			
			case EVENT_ISOUF_ALARM:
			cl_isouf_retcode = Cl_Isouf_ProcessAlarms();
   946c8:	4b4e      	ldr	r3, [pc, #312]	; (94804 <cl_isouf_controller+0x584>)
   946ca:	4798      	blx	r3
   946cc:	4603      	mov	r3, r0
   946ce:	461a      	mov	r2, r3
   946d0:	4b4d      	ldr	r3, [pc, #308]	; (94808 <cl_isouf_controller+0x588>)
   946d2:	701a      	strb	r2, [r3, #0]
				break;
   946d4:	e03c      	b.n	94750 <cl_isouf_controller+0x4d0>
				case EVENT_ISOUF_TICK_SECOND :
				
					Cl_ISOufTotalSecondscounter ++ ;
   946d6:	4b4d      	ldr	r3, [pc, #308]	; (9480c <cl_isouf_controller+0x58c>)
   946d8:	681b      	ldr	r3, [r3, #0]
   946da:	3301      	adds	r3, #1
   946dc:	4a4b      	ldr	r2, [pc, #300]	; (9480c <cl_isouf_controller+0x58c>)
   946de:	6013      	str	r3, [r2, #0]
				
					if(cl_isouf_retcode == CL_OK){
   946e0:	4b49      	ldr	r3, [pc, #292]	; (94808 <cl_isouf_controller+0x588>)
   946e2:	781b      	ldrb	r3, [r3, #0]
   946e4:	2b00      	cmp	r3, #0
   946e6:	d132      	bne.n	9474e <cl_isouf_controller+0x4ce>
					
					// check for completion
					//cl_sendisoufdata();
					
						Cl_Iso_Senddata();
   946e8:	4b49      	ldr	r3, [pc, #292]	; (94810 <cl_isouf_controller+0x590>)
   946ea:	4798      	blx	r3
						if(Cl_ISOufTotalSecondscounter >= Treatdata[ID_treattime]){
   946ec:	4b3d      	ldr	r3, [pc, #244]	; (947e4 <cl_isouf_controller+0x564>)
   946ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   946f0:	4a46      	ldr	r2, [pc, #280]	; (9480c <cl_isouf_controller+0x58c>)
   946f2:	6812      	ldr	r2, [r2, #0]
   946f4:	4293      	cmp	r3, r2
   946f6:	d82a      	bhi.n	9474e <cl_isouf_controller+0x4ce>
						
						// complete
						cl_isouf_retcode == cl_isoufcompleted();
   946f8:	4b46      	ldr	r3, [pc, #280]	; (94814 <cl_isouf_controller+0x594>)
   946fa:	4798      	blx	r3
						if(cl_isouf_retcode == CL_OK){
   946fc:	4b42      	ldr	r3, [pc, #264]	; (94808 <cl_isouf_controller+0x588>)
   946fe:	781b      	ldrb	r3, [r3, #0]
   94700:	2b00      	cmp	r3, #0
   94702:	d124      	bne.n	9474e <cl_isouf_controller+0x4ce>
							
												
							cl_isouf_state = CL_ISOUF_STATE_COMPLETED;
   94704:	4b3a      	ldr	r3, [pc, #232]	; (947f0 <cl_isouf_controller+0x570>)
   94706:	2204      	movs	r2, #4
   94708:	701a      	strb	r2, [r3, #0]
							isouf = false;
   9470a:	4b43      	ldr	r3, [pc, #268]	; (94818 <cl_isouf_controller+0x598>)
   9470c:	2200      	movs	r2, #0
   9470e:	701a      	strb	r2, [r3, #0]
							command = CON_TX_COMMAND_COMMAND_ISOUF_COMPLETED;
   94710:	234a      	movs	r3, #74	; 0x4a
   94712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   94716:	2301      	movs	r3, #1
   94718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							cl_isouf_retcode = Cl_SendDatatoconsole(command,&data,1);
   9471c:	f107 0123 	add.w	r1, r7, #35	; 0x23
   94720:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   94724:	2201      	movs	r2, #1
   94726:	4618      	mov	r0, r3
   94728:	4b30      	ldr	r3, [pc, #192]	; (947ec <cl_isouf_controller+0x56c>)
   9472a:	4798      	blx	r3
   9472c:	4603      	mov	r3, r0
   9472e:	461a      	mov	r2, r3
   94730:	4b35      	ldr	r3, [pc, #212]	; (94808 <cl_isouf_controller+0x588>)
   94732:	701a      	strb	r2, [r3, #0]
							cl_isouf_retcode = Cl_mac_apprequesthandler(MACREQ_ISOUF_COMPLETED);
   94734:	205a      	movs	r0, #90	; 0x5a
   94736:	4b39      	ldr	r3, [pc, #228]	; (9481c <cl_isouf_controller+0x59c>)
   94738:	4798      	blx	r3
   9473a:	4603      	mov	r3, r0
   9473c:	461a      	mov	r2, r3
   9473e:	4b32      	ldr	r3, [pc, #200]	; (94808 <cl_isouf_controller+0x588>)
   94740:	701a      	strb	r2, [r3, #0]
				}	
				else{
					// raise alarm
				}
				
				break;
   94742:	e004      	b.n	9474e <cl_isouf_controller+0x4ce>
				
				
				case EVENT_ISOUF_STOP :
				
					Cl_Isouf_stop();
   94744:	4b36      	ldr	r3, [pc, #216]	; (94820 <cl_isouf_controller+0x5a0>)
   94746:	4798      	blx	r3
				// stop uf pump
					
				
				break;
   94748:	e002      	b.n	94750 <cl_isouf_controller+0x4d0>
				// implement iso uf stop state
				// implement bp on event
				// implement bp off event  , iso uf should stop
				
				
				default: break;
   9474a:	bf00      	nop
   9474c:	e044      	b.n	947d8 <cl_isouf_controller+0x558>
				}	
				else{
					// raise alarm
				}
				
				break;
   9474e:	bf00      	nop
				
				default: break;
				
			}
			
			break;
   94750:	e042      	b.n	947d8 <cl_isouf_controller+0x558>
			
			case CL_ISOUF_STATE_CRITICAL_ALARM:
			
			switch(cl_isouf_event){
   94752:	7efb      	ldrb	r3, [r7, #27]
   94754:	2b01      	cmp	r3, #1
   94756:	d008      	beq.n	9476a <cl_isouf_controller+0x4ea>
   94758:	2b16      	cmp	r3, #22
   9475a:	d000      	beq.n	9475e <cl_isouf_controller+0x4de>
				Cl_Isouf_start();
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
				
				
				default: break;
   9475c:	e00f      	b.n	9477e <cl_isouf_controller+0x4fe>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_start();
   9475e:	4b26      	ldr	r3, [pc, #152]	; (947f8 <cl_isouf_controller+0x578>)
   94760:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94762:	4b23      	ldr	r3, [pc, #140]	; (947f0 <cl_isouf_controller+0x570>)
   94764:	2201      	movs	r2, #1
   94766:	701a      	strb	r2, [r3, #0]
				break;
   94768:	e009      	b.n	9477e <cl_isouf_controller+0x4fe>
				
				case EVENT_ISOUF_CLR_ALARM:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_ResetAlertsforReassertion();
   9476a:	4b2e      	ldr	r3, [pc, #184]	; (94824 <cl_isouf_controller+0x5a4>)
   9476c:	4798      	blx	r3
				sv_cntrl_activatevenousclamp();
   9476e:	4b2e      	ldr	r3, [pc, #184]	; (94828 <cl_isouf_controller+0x5a8>)
   94770:	4798      	blx	r3
				Cl_Isouf_start();
   94772:	4b21      	ldr	r3, [pc, #132]	; (947f8 <cl_isouf_controller+0x578>)
   94774:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94776:	4b1e      	ldr	r3, [pc, #120]	; (947f0 <cl_isouf_controller+0x570>)
   94778:	2201      	movs	r2, #1
   9477a:	701a      	strb	r2, [r3, #0]
				break;
   9477c:	bf00      	nop
				
				
				default: break;
			}
			
			break;
   9477e:	e02b      	b.n	947d8 <cl_isouf_controller+0x558>
			
			case CL_ISOUF_STATE_STOPPED:
			
				switch(cl_isouf_event){
   94780:	7efb      	ldrb	r3, [r7, #27]
   94782:	2b16      	cmp	r3, #22
   94784:	d000      	beq.n	94788 <cl_isouf_controller+0x508>
				ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
					
				default: break;	
   94786:	e009      	b.n	9479c <cl_isouf_controller+0x51c>
					
					case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				ufRemoved = 0;
   94788:	4b1a      	ldr	r3, [pc, #104]	; (947f4 <cl_isouf_controller+0x574>)
   9478a:	f04f 0200 	mov.w	r2, #0
   9478e:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   94790:	4b19      	ldr	r3, [pc, #100]	; (947f8 <cl_isouf_controller+0x578>)
   94792:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94794:	4b16      	ldr	r3, [pc, #88]	; (947f0 <cl_isouf_controller+0x570>)
   94796:	2201      	movs	r2, #1
   94798:	701a      	strb	r2, [r3, #0]
				break;
   9479a:	bf00      	nop
				default: break;	
					
					
				}
			
			break;
   9479c:	e01c      	b.n	947d8 <cl_isouf_controller+0x558>
			
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
   9479e:	7efb      	ldrb	r3, [r7, #27]
   947a0:	2b09      	cmp	r3, #9
   947a2:	d00c      	beq.n	947be <cl_isouf_controller+0x53e>
   947a4:	2b16      	cmp	r3, #22
   947a6:	d000      	beq.n	947aa <cl_isouf_controller+0x52a>
					ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
			
			default : break;	
   947a8:	e00a      	b.n	947c0 <cl_isouf_controller+0x540>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   947aa:	4b12      	ldr	r3, [pc, #72]	; (947f4 <cl_isouf_controller+0x574>)
   947ac:	f04f 0200 	mov.w	r2, #0
   947b0:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   947b2:	4b11      	ldr	r3, [pc, #68]	; (947f8 <cl_isouf_controller+0x578>)
   947b4:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   947b6:	4b0e      	ldr	r3, [pc, #56]	; (947f0 <cl_isouf_controller+0x570>)
   947b8:	2201      	movs	r2, #1
   947ba:	701a      	strb	r2, [r3, #0]
				break;
   947bc:	e000      	b.n	947c0 <cl_isouf_controller+0x540>
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   947be:	bf00      	nop
				break;
			
			default : break;	
			
			}
			break;
   947c0:	e00a      	b.n	947d8 <cl_isouf_controller+0x558>
			
			case CL_ISOUF_STATE_POST_COMPLETION:
			
			switch(cl_isouf_event){
   947c2:	7efb      	ldrb	r3, [r7, #27]
   947c4:	2b09      	cmp	r3, #9
   947c6:	d002      	beq.n	947ce <cl_isouf_controller+0x54e>
   947c8:	2b0e      	cmp	r3, #14
   947ca:	d002      	beq.n	947d2 <cl_isouf_controller+0x552>
				
				break;
				
				
				
				default:break;
   947cc:	e002      	b.n	947d4 <cl_isouf_controller+0x554>
			
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   947ce:	bf00      	nop
   947d0:	e002      	b.n	947d8 <cl_isouf_controller+0x558>
				
				case EVENT_ISOUF_START_RETURN:
				
				break;
   947d2:	bf00      	nop
				
				
				default:break;
			}
			
			break;
   947d4:	e000      	b.n	947d8 <cl_isouf_controller+0x558>
			
			default:break;
   947d6:	bf00      	nop
			
			
	}
	return CL_OK;
   947d8:	2300      	movs	r3, #0
	
	
}
   947da:	4618      	mov	r0, r3
   947dc:	3740      	adds	r7, #64	; 0x40
   947de:	46bd      	mov	sp, r7
   947e0:	bd80      	pop	{r7, pc}
   947e2:	bf00      	nop
   947e4:	20072654 	.word	0x20072654
   947e8:	0009316d 	.word	0x0009316d
   947ec:	0009b805 	.word	0x0009b805
   947f0:	20071ae5 	.word	0x20071ae5
   947f4:	20071b14 	.word	0x20071b14
   947f8:	00094db5 	.word	0x00094db5
   947fc:	00095879 	.word	0x00095879
   94800:	00095bbd 	.word	0x00095bbd
   94804:	0009482d 	.word	0x0009482d
   94808:	20071ae6 	.word	0x20071ae6
   9480c:	20071ae8 	.word	0x20071ae8
   94810:	00095081 	.word	0x00095081
   94814:	00095b19 	.word	0x00095b19
   94818:	20071aec 	.word	0x20071aec
   9481c:	0008ba55 	.word	0x0008ba55
   94820:	00094d31 	.word	0x00094d31
   94824:	00094b9d 	.word	0x00094b9d
   94828:	00099bf5 	.word	0x00099bf5

0009482c <Cl_Isouf_ProcessAlarms>:




Cl_ReturnCodeType Cl_Isouf_ProcessAlarms()
{
   9482c:	b580      	push	{r7, lr}
   9482e:	b082      	sub	sp, #8
   94830:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   94832:	2300      	movs	r3, #0
   94834:	71fb      	strb	r3, [r7, #7]
	ClIsoufAlarmIdType  ClIsoufAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94836:	2351      	movs	r3, #81	; 0x51
   94838:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_alarmid;
	
	cl_isouf_retcode = Cl_Isouf_UpdateAlarmTable(&ClIsoufAlarmId);
   9483a:	1d7b      	adds	r3, r7, #5
   9483c:	4618      	mov	r0, r3
   9483e:	4b06      	ldr	r3, [pc, #24]	; (94858 <Cl_Isouf_ProcessAlarms+0x2c>)
   94840:	4798      	blx	r3
   94842:	4603      	mov	r3, r0
   94844:	461a      	mov	r2, r3
   94846:	4b05      	ldr	r3, [pc, #20]	; (9485c <Cl_Isouf_ProcessAlarms+0x30>)
   94848:	701a      	strb	r2, [r3, #0]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
	
	return (cl_isouf_retcode );
   9484a:	4b04      	ldr	r3, [pc, #16]	; (9485c <Cl_Isouf_ProcessAlarms+0x30>)
   9484c:	781b      	ldrb	r3, [r3, #0]
	
}
   9484e:	4618      	mov	r0, r3
   94850:	3708      	adds	r7, #8
   94852:	46bd      	mov	sp, r7
   94854:	bd80      	pop	{r7, pc}
   94856:	bf00      	nop
   94858:	00094861 	.word	0x00094861
   9485c:	20071ae6 	.word	0x20071ae6

00094860 <Cl_Isouf_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Isouf_UpdateAlarmTable(ClIsoufAlarmIdType *ClIsoufAlarmId)
{
   94860:	b580      	push	{r7, lr}
   94862:	b084      	sub	sp, #16
   94864:	af00      	add	r7, sp, #0
   94866:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   94868:	2300      	movs	r3, #0
   9486a:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   9486c:	2300      	movs	r3, #0
   9486e:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94870:	2351      	movs	r3, #81	; 0x51
   94872:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   94874:	2300      	movs	r3, #0
   94876:	73bb      	strb	r3, [r7, #14]
   94878:	e068      	b.n	9494c <Cl_Isouf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId,&Cl_IsoufAlarmTable[tempcount].IsActive);
   9487a:	7bba      	ldrb	r2, [r7, #14]
   9487c:	4937      	ldr	r1, [pc, #220]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   9487e:	4613      	mov	r3, r2
   94880:	00db      	lsls	r3, r3, #3
   94882:	1a9b      	subs	r3, r3, r2
   94884:	440b      	add	r3, r1
   94886:	7818      	ldrb	r0, [r3, #0]
   94888:	7bba      	ldrb	r2, [r7, #14]
   9488a:	4613      	mov	r3, r2
   9488c:	00db      	lsls	r3, r3, #3
   9488e:	1a9b      	subs	r3, r3, r2
   94890:	4a32      	ldr	r2, [pc, #200]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   94892:	4413      	add	r3, r2
   94894:	3302      	adds	r3, #2
   94896:	4619      	mov	r1, r3
   94898:	4b31      	ldr	r3, [pc, #196]	; (94960 <Cl_Isouf_UpdateAlarmTable+0x100>)
   9489a:	4798      	blx	r3
		if (Cl_IsoufAlarmTable[tempcount].IsActive)
   9489c:	7bba      	ldrb	r2, [r7, #14]
   9489e:	492f      	ldr	r1, [pc, #188]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   948a0:	4613      	mov	r3, r2
   948a2:	00db      	lsls	r3, r3, #3
   948a4:	1a9b      	subs	r3, r3, r2
   948a6:	440b      	add	r3, r1
   948a8:	3302      	adds	r3, #2
   948aa:	781b      	ldrb	r3, [r3, #0]
   948ac:	2b00      	cmp	r3, #0
   948ae:	d022      	beq.n	948f6 <Cl_Isouf_UpdateAlarmTable+0x96>
		{
			if(!Cl_IsoufAlarmTable[tempcount].IsRaised)
   948b0:	7bba      	ldrb	r2, [r7, #14]
   948b2:	492a      	ldr	r1, [pc, #168]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   948b4:	4613      	mov	r3, r2
   948b6:	00db      	lsls	r3, r3, #3
   948b8:	1a9b      	subs	r3, r3, r2
   948ba:	440b      	add	r3, r1
   948bc:	3303      	adds	r3, #3
   948be:	781b      	ldrb	r3, [r3, #0]
   948c0:	f083 0301 	eor.w	r3, r3, #1
   948c4:	b2db      	uxtb	r3, r3
   948c6:	2b00      	cmp	r3, #0
   948c8:	d03d      	beq.n	94946 <Cl_Isouf_UpdateAlarmTable+0xe6>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
				Cl_IsoufAlarmTable[tempcount].IsRaised = true;
   948ca:	7bba      	ldrb	r2, [r7, #14]
   948cc:	4923      	ldr	r1, [pc, #140]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   948ce:	4613      	mov	r3, r2
   948d0:	00db      	lsls	r3, r3, #3
   948d2:	1a9b      	subs	r3, r3, r2
   948d4:	440b      	add	r3, r1
   948d6:	3303      	adds	r3, #3
   948d8:	2201      	movs	r2, #1
   948da:	701a      	strb	r2, [r3, #0]
				Cl_isoufretcode = CL_IsoufAlarmActon(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   948dc:	7bba      	ldrb	r2, [r7, #14]
   948de:	491f      	ldr	r1, [pc, #124]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   948e0:	4613      	mov	r3, r2
   948e2:	00db      	lsls	r3, r3, #3
   948e4:	1a9b      	subs	r3, r3, r2
   948e6:	440b      	add	r3, r1
   948e8:	781b      	ldrb	r3, [r3, #0]
   948ea:	4618      	mov	r0, r3
   948ec:	4b1d      	ldr	r3, [pc, #116]	; (94964 <Cl_Isouf_UpdateAlarmTable+0x104>)
   948ee:	4798      	blx	r3
   948f0:	4603      	mov	r3, r0
   948f2:	73fb      	strb	r3, [r7, #15]
   948f4:	e027      	b.n	94946 <Cl_Isouf_UpdateAlarmTable+0xe6>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_IsoufAlarmTable[tempcount].IsRaised == true)
   948f6:	7bba      	ldrb	r2, [r7, #14]
   948f8:	4918      	ldr	r1, [pc, #96]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   948fa:	4613      	mov	r3, r2
   948fc:	00db      	lsls	r3, r3, #3
   948fe:	1a9b      	subs	r3, r3, r2
   94900:	440b      	add	r3, r1
   94902:	3303      	adds	r3, #3
   94904:	781b      	ldrb	r3, [r3, #0]
   94906:	2b00      	cmp	r3, #0
   94908:	d01d      	beq.n	94946 <Cl_Isouf_UpdateAlarmTable+0xe6>
			{
				Cl_IsoufAlarmTable[tempcount].IsRaised = false;
   9490a:	7bba      	ldrb	r2, [r7, #14]
   9490c:	4913      	ldr	r1, [pc, #76]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   9490e:	4613      	mov	r3, r2
   94910:	00db      	lsls	r3, r3, #3
   94912:	1a9b      	subs	r3, r3, r2
   94914:	440b      	add	r3, r1
   94916:	3303      	adds	r3, #3
   94918:	2200      	movs	r2, #0
   9491a:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   9491c:	2307      	movs	r3, #7
   9491e:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   94920:	7bba      	ldrb	r2, [r7, #14]
   94922:	490e      	ldr	r1, [pc, #56]	; (9495c <Cl_Isouf_UpdateAlarmTable+0xfc>)
   94924:	4613      	mov	r3, r2
   94926:	00db      	lsls	r3, r3, #3
   94928:	1a9b      	subs	r3, r3, r2
   9492a:	440b      	add	r3, r1
   9492c:	781b      	ldrb	r3, [r3, #0]
   9492e:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   94930:	2300      	movs	r3, #0
   94932:	727b      	strb	r3, [r7, #9]
				Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,2);
   94934:	f107 0108 	add.w	r1, r7, #8
   94938:	7b7b      	ldrb	r3, [r7, #13]
   9493a:	2202      	movs	r2, #2
   9493c:	4618      	mov	r0, r3
   9493e:	4b0a      	ldr	r3, [pc, #40]	; (94968 <Cl_Isouf_UpdateAlarmTable+0x108>)
   94940:	4798      	blx	r3
   94942:	4603      	mov	r3, r0
   94944:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   94946:	7bbb      	ldrb	r3, [r7, #14]
   94948:	3301      	adds	r3, #1
   9494a:	73bb      	strb	r3, [r7, #14]
   9494c:	7bbb      	ldrb	r3, [r7, #14]
   9494e:	2b1d      	cmp	r3, #29
   94950:	d993      	bls.n	9487a <Cl_Isouf_UpdateAlarmTable+0x1a>
	}
	

	

	return (Cl_isoufretcode );
   94952:	7bfb      	ldrb	r3, [r7, #15]
}
   94954:	4618      	mov	r0, r3
   94956:	3710      	adds	r7, #16
   94958:	46bd      	mov	sp, r7
   9495a:	bd80      	pop	{r7, pc}
   9495c:	20070a3c 	.word	0x20070a3c
   94960:	00082fbd 	.word	0x00082fbd
   94964:	0009496d 	.word	0x0009496d
   94968:	0009b805 	.word	0x0009b805

0009496c <CL_IsoufAlarmActon>:


Cl_ReturnCodeType  CL_IsoufAlarmActon(Cl_NewAlarmIdType cl_isoufalarmid)
{
   9496c:	b580      	push	{r7, lr}
   9496e:	b086      	sub	sp, #24
   94970:	af00      	add	r7, sp, #0
   94972:	4603      	mov	r3, r0
   94974:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   94976:	2300      	movs	r3, #0
   94978:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9497a:	f107 0308 	add.w	r3, r7, #8
   9497e:	2100      	movs	r1, #0
   94980:	460a      	mov	r2, r1
   94982:	801a      	strh	r2, [r3, #0]
   94984:	460a      	mov	r2, r1
   94986:	709a      	strb	r2, [r3, #2]
   94988:	2300      	movs	r3, #0
   9498a:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9498c:	2351      	movs	r3, #81	; 0x51
   9498e:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   94990:	2300      	movs	r3, #0
   94992:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   94994:	2300      	movs	r3, #0
   94996:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_isoufalarmid)
   94998:	79fb      	ldrb	r3, [r7, #7]
   9499a:	3b01      	subs	r3, #1
   9499c:	2b3a      	cmp	r3, #58	; 0x3a
   9499e:	f200 80d9 	bhi.w	94b54 <CL_IsoufAlarmActon+0x1e8>
   949a2:	a201      	add	r2, pc, #4	; (adr r2, 949a8 <CL_IsoufAlarmActon+0x3c>)
   949a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   949a8:	00094a95 	.word	0x00094a95
   949ac:	00094b55 	.word	0x00094b55
   949b0:	00094b55 	.word	0x00094b55
   949b4:	00094b55 	.word	0x00094b55
   949b8:	00094adf 	.word	0x00094adf
   949bc:	00094adf 	.word	0x00094adf
   949c0:	00094adf 	.word	0x00094adf
   949c4:	00094adf 	.word	0x00094adf
   949c8:	00094adf 	.word	0x00094adf
   949cc:	00094b55 	.word	0x00094b55
   949d0:	00094adf 	.word	0x00094adf
   949d4:	00094adf 	.word	0x00094adf
   949d8:	00094adf 	.word	0x00094adf
   949dc:	00094adf 	.word	0x00094adf
   949e0:	00094adf 	.word	0x00094adf
   949e4:	00094adf 	.word	0x00094adf
   949e8:	00094adf 	.word	0x00094adf
   949ec:	00094adf 	.word	0x00094adf
   949f0:	00094adf 	.word	0x00094adf
   949f4:	00094adf 	.word	0x00094adf
   949f8:	00094adf 	.word	0x00094adf
   949fc:	00094adf 	.word	0x00094adf
   94a00:	00094adf 	.word	0x00094adf
   94a04:	00094adf 	.word	0x00094adf
   94a08:	00094b55 	.word	0x00094b55
   94a0c:	00094adf 	.word	0x00094adf
   94a10:	00094b55 	.word	0x00094b55
   94a14:	00094b55 	.word	0x00094b55
   94a18:	00094b55 	.word	0x00094b55
   94a1c:	00094b55 	.word	0x00094b55
   94a20:	00094b55 	.word	0x00094b55
   94a24:	00094a95 	.word	0x00094a95
   94a28:	00094adf 	.word	0x00094adf
   94a2c:	00094a95 	.word	0x00094a95
   94a30:	00094a95 	.word	0x00094a95
   94a34:	00094a95 	.word	0x00094a95
   94a38:	00094a95 	.word	0x00094a95
   94a3c:	00094a95 	.word	0x00094a95
   94a40:	00094adf 	.word	0x00094adf
   94a44:	00094adf 	.word	0x00094adf
   94a48:	00094b55 	.word	0x00094b55
   94a4c:	00094adf 	.word	0x00094adf
   94a50:	00094b55 	.word	0x00094b55
   94a54:	00094adf 	.word	0x00094adf
   94a58:	00094b55 	.word	0x00094b55
   94a5c:	00094b55 	.word	0x00094b55
   94a60:	00094b55 	.word	0x00094b55
   94a64:	00094b55 	.word	0x00094b55
   94a68:	00094b55 	.word	0x00094b55
   94a6c:	00094adf 	.word	0x00094adf
   94a70:	00094adf 	.word	0x00094adf
   94a74:	00094b55 	.word	0x00094b55
   94a78:	00094b55 	.word	0x00094b55
   94a7c:	00094b55 	.word	0x00094b55
   94a80:	00094b55 	.word	0x00094b55
   94a84:	00094b55 	.word	0x00094b55
   94a88:	00094adf 	.word	0x00094adf
   94a8c:	00094adf 	.word	0x00094adf
   94a90:	00094adf 	.word	0x00094adf
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   94a94:	4b33      	ldr	r3, [pc, #204]	; (94b64 <CL_IsoufAlarmActon+0x1f8>)
   94a96:	4798      	blx	r3
				sv_cntrl_buzzer();
   94a98:	4b33      	ldr	r3, [pc, #204]	; (94b68 <CL_IsoufAlarmActon+0x1fc>)
   94a9a:	4798      	blx	r3
				Cl_Isouf_safesate();	
   94a9c:	4b33      	ldr	r3, [pc, #204]	; (94b6c <CL_IsoufAlarmActon+0x200>)
   94a9e:	4798      	blx	r3
				 if(cl_isoufalarmid != _NO_ALARM)
   94aa0:	79fb      	ldrb	r3, [r7, #7]
   94aa2:	2b00      	cmp	r3, #0
   94aa4:	d058      	beq.n	94b58 <CL_IsoufAlarmActon+0x1ec>
				 {
					 isoufalarm = cl_isoufalarmid;
   94aa6:	4a32      	ldr	r2, [pc, #200]	; (94b70 <CL_IsoufAlarmActon+0x204>)
   94aa8:	79fb      	ldrb	r3, [r7, #7]
   94aaa:	7013      	strb	r3, [r2, #0]
					 isoufalarm1 = isoufalarm;
   94aac:	4b30      	ldr	r3, [pc, #192]	; (94b70 <CL_IsoufAlarmActon+0x204>)
   94aae:	781a      	ldrb	r2, [r3, #0]
   94ab0:	4b30      	ldr	r3, [pc, #192]	; (94b74 <CL_IsoufAlarmActon+0x208>)
   94ab2:	701a      	strb	r2, [r3, #0]
					 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   94ab4:	79fb      	ldrb	r3, [r7, #7]
   94ab6:	723b      	strb	r3, [r7, #8]
					 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   94ab8:	2301      	movs	r3, #1
   94aba:	727b      	strb	r3, [r7, #9]
					 data[2] = (Cl_Uint8Type)CRITICAL;
   94abc:	2302      	movs	r3, #2
   94abe:	72bb      	strb	r3, [r7, #10]
					 command = CON_TX_COMMAND_ALARM;
   94ac0:	2307      	movs	r3, #7
   94ac2:	73fb      	strb	r3, [r7, #15]
					 cl_wait(10);
   94ac4:	200a      	movs	r0, #10
   94ac6:	4b2c      	ldr	r3, [pc, #176]	; (94b78 <CL_IsoufAlarmActon+0x20c>)
   94ac8:	4798      	blx	r3
					 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   94aca:	f107 0108 	add.w	r1, r7, #8
   94ace:	7bfb      	ldrb	r3, [r7, #15]
   94ad0:	2203      	movs	r2, #3
   94ad2:	4618      	mov	r0, r3
   94ad4:	4b29      	ldr	r3, [pc, #164]	; (94b7c <CL_IsoufAlarmActon+0x210>)
   94ad6:	4798      	blx	r3
   94ad8:	4603      	mov	r3, r0
   94ada:	75fb      	strb	r3, [r7, #23]
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   94adc:	e03c      	b.n	94b58 <CL_IsoufAlarmActon+0x1ec>
			case TEMP1_LOW_THRESHOLD:
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:	
				// do nothing as the alarm limits were increased
			
			sv_cntrl_setyellowalarm();
   94ade:	4b28      	ldr	r3, [pc, #160]	; (94b80 <CL_IsoufAlarmActon+0x214>)
   94ae0:	4798      	blx	r3
			sv_cntrl_buzzer();
   94ae2:	4b21      	ldr	r3, [pc, #132]	; (94b68 <CL_IsoufAlarmActon+0x1fc>)
   94ae4:	4798      	blx	r3
			
				Cl_bc_controller(BC_EVENT_STOP);
   94ae6:	2005      	movs	r0, #5
   94ae8:	4b26      	ldr	r3, [pc, #152]	; (94b84 <CL_IsoufAlarmActon+0x218>)
   94aea:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID15);
   94aec:	200f      	movs	r0, #15
   94aee:	4b26      	ldr	r3, [pc, #152]	; (94b88 <CL_IsoufAlarmActon+0x21c>)
   94af0:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID13);
   94af2:	200d      	movs	r0, #13
   94af4:	4b24      	ldr	r3, [pc, #144]	; (94b88 <CL_IsoufAlarmActon+0x21c>)
   94af6:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID14);
   94af8:	200e      	movs	r0, #14
   94afa:	4b24      	ldr	r3, [pc, #144]	; (94b8c <CL_IsoufAlarmActon+0x220>)
   94afc:	4798      	blx	r3
				//DD_SET_VALVE(VALVE_ID1);
				sv_cntrl_deactivatepump(DCMOTOR1);
   94afe:	2001      	movs	r0, #1
   94b00:	4b23      	ldr	r3, [pc, #140]	; (94b90 <CL_IsoufAlarmActon+0x224>)
   94b02:	4798      	blx	r3
				sv_cntrl_deactivatepump(DCMOTOR2);
   94b04:	2002      	movs	r0, #2
   94b06:	4b22      	ldr	r3, [pc, #136]	; (94b90 <CL_IsoufAlarmActon+0x224>)
   94b08:	4798      	blx	r3
				// send alert message
				Cl_isoufretcode = sv_cntrl_poweroffheater();
   94b0a:	4b22      	ldr	r3, [pc, #136]	; (94b94 <CL_IsoufAlarmActon+0x228>)
   94b0c:	4798      	blx	r3
   94b0e:	4603      	mov	r3, r0
   94b10:	75fb      	strb	r3, [r7, #23]
				Cl_isoufretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   94b12:	2004      	movs	r0, #4
   94b14:	4b20      	ldr	r3, [pc, #128]	; (94b98 <CL_IsoufAlarmActon+0x22c>)
   94b16:	4798      	blx	r3
   94b18:	4603      	mov	r3, r0
   94b1a:	75fb      	strb	r3, [r7, #23]
				 isoufalarm = cl_isoufalarmid;
   94b1c:	4a14      	ldr	r2, [pc, #80]	; (94b70 <CL_IsoufAlarmActon+0x204>)
   94b1e:	79fb      	ldrb	r3, [r7, #7]
   94b20:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   94b22:	4b13      	ldr	r3, [pc, #76]	; (94b70 <CL_IsoufAlarmActon+0x204>)
   94b24:	781a      	ldrb	r2, [r3, #0]
   94b26:	4b13      	ldr	r3, [pc, #76]	; (94b74 <CL_IsoufAlarmActon+0x208>)
   94b28:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   94b2a:	79fb      	ldrb	r3, [r7, #7]
   94b2c:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   94b2e:	2301      	movs	r3, #1
   94b30:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   94b32:	2302      	movs	r3, #2
   94b34:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALERT;
   94b36:	234f      	movs	r3, #79	; 0x4f
   94b38:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   94b3a:	200a      	movs	r0, #10
   94b3c:	4b0e      	ldr	r3, [pc, #56]	; (94b78 <CL_IsoufAlarmActon+0x20c>)
   94b3e:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   94b40:	f107 0108 	add.w	r1, r7, #8
   94b44:	7bfb      	ldrb	r3, [r7, #15]
   94b46:	2203      	movs	r2, #3
   94b48:	4618      	mov	r0, r3
   94b4a:	4b0c      	ldr	r3, [pc, #48]	; (94b7c <CL_IsoufAlarmActon+0x210>)
   94b4c:	4798      	blx	r3
   94b4e:	4603      	mov	r3, r0
   94b50:	75fb      	strb	r3, [r7, #23]
				
			break;
   94b52:	e002      	b.n	94b5a <CL_IsoufAlarmActon+0x1ee>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   94b54:	bf00      	nop
   94b56:	e000      	b.n	94b5a <CL_IsoufAlarmActon+0x1ee>
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   94b58:	bf00      	nop
			default:
			break;

		}
		
return CL_OK;			
   94b5a:	2300      	movs	r3, #0
}
   94b5c:	4618      	mov	r0, r3
   94b5e:	3718      	adds	r7, #24
   94b60:	46bd      	mov	sp, r7
   94b62:	bd80      	pop	{r7, pc}
   94b64:	00099d01 	.word	0x00099d01
   94b68:	00099d3d 	.word	0x00099d3d
   94b6c:	00094d09 	.word	0x00094d09
   94b70:	2007279c 	.word	0x2007279c
   94b74:	2007279d 	.word	0x2007279d
   94b78:	00093009 	.word	0x00093009
   94b7c:	0009b805 	.word	0x0009b805
   94b80:	00099d15 	.word	0x00099d15
   94b84:	000832a1 	.word	0x000832a1
   94b88:	00099ac9 	.word	0x00099ac9
   94b8c:	00099aa9 	.word	0x00099aa9
   94b90:	00099a45 	.word	0x00099a45
   94b94:	00099a95 	.word	0x00099a95
   94b98:	00089385 	.word	0x00089385

00094b9c <Cl_Isouf_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Isouf_ResetAlertsforReassertion(void )
{
   94b9c:	b580      	push	{r7, lr}
   94b9e:	b082      	sub	sp, #8
   94ba0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   94ba2:	2300      	movs	r3, #0
   94ba4:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94ba6:	2351      	movs	r3, #81	; 0x51
   94ba8:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   94baa:	4b55      	ldr	r3, [pc, #340]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bac:	2200      	movs	r2, #0
   94bae:	70da      	strb	r2, [r3, #3]
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   94bb0:	4b53      	ldr	r3, [pc, #332]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bb2:	2200      	movs	r2, #0
   94bb4:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   94bb6:	2005      	movs	r0, #5
   94bb8:	4b52      	ldr	r3, [pc, #328]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94bba:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   94bbc:	2006      	movs	r0, #6
   94bbe:	4b51      	ldr	r3, [pc, #324]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94bc0:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   94bc2:	4b4f      	ldr	r3, [pc, #316]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bc4:	2200      	movs	r2, #0
   94bc6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   94bca:	2001      	movs	r0, #1
   94bcc:	4b4d      	ldr	r3, [pc, #308]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94bce:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   94bd0:	4b4b      	ldr	r3, [pc, #300]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bd2:	2200      	movs	r2, #0
   94bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   94bd8:	4b49      	ldr	r3, [pc, #292]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bda:	2200      	movs	r2, #0
   94bdc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   94be0:	2015      	movs	r0, #21
   94be2:	4b48      	ldr	r3, [pc, #288]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94be4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   94be6:	2016      	movs	r0, #22
   94be8:	4b46      	ldr	r3, [pc, #280]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94bea:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   94bec:	4b44      	ldr	r3, [pc, #272]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bee:	2200      	movs	r2, #0
   94bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   94bf4:	4b42      	ldr	r3, [pc, #264]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94bf6:	2200      	movs	r2, #0
   94bf8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   94bfc:	2017      	movs	r0, #23
   94bfe:	4b41      	ldr	r3, [pc, #260]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c00:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   94c02:	2018      	movs	r0, #24
   94c04:	4b3f      	ldr	r3, [pc, #252]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c06:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   94c08:	4b3d      	ldr	r3, [pc, #244]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c0a:	2200      	movs	r2, #0
   94c0c:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   94c10:	4b3b      	ldr	r3, [pc, #236]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c12:	2200      	movs	r2, #0
   94c14:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   94c18:	2027      	movs	r0, #39	; 0x27
   94c1a:	4b3a      	ldr	r3, [pc, #232]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c1c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   94c1e:	2028      	movs	r0, #40	; 0x28
   94c20:	4b38      	ldr	r3, [pc, #224]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c22:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   94c24:	4b36      	ldr	r3, [pc, #216]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c26:	2200      	movs	r2, #0
   94c28:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   94c2c:	2021      	movs	r0, #33	; 0x21
   94c2e:	4b35      	ldr	r3, [pc, #212]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c30:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   94c32:	4b33      	ldr	r3, [pc, #204]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c34:	2200      	movs	r2, #0
   94c36:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   94c3a:	2020      	movs	r0, #32
   94c3c:	4b31      	ldr	r3, [pc, #196]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c3e:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   94c40:	4b2f      	ldr	r3, [pc, #188]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c42:	2200      	movs	r2, #0
   94c44:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   94c48:	2022      	movs	r0, #34	; 0x22
   94c4a:	4b2e      	ldr	r3, [pc, #184]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c4c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   94c4e:	4b2c      	ldr	r3, [pc, #176]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c50:	2200      	movs	r2, #0
   94c52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   94c56:	4b2a      	ldr	r3, [pc, #168]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c58:	2200      	movs	r2, #0
   94c5a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   94c5e:	2024      	movs	r0, #36	; 0x24
   94c60:	4b28      	ldr	r3, [pc, #160]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c62:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   94c64:	2023      	movs	r0, #35	; 0x23
   94c66:	4b27      	ldr	r3, [pc, #156]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c68:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   94c6a:	4b25      	ldr	r3, [pc, #148]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c6c:	2200      	movs	r2, #0
   94c6e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   94c72:	4b23      	ldr	r3, [pc, #140]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c74:	2200      	movs	r2, #0
   94c76:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   94c7a:	2026      	movs	r0, #38	; 0x26
   94c7c:	4b21      	ldr	r3, [pc, #132]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c7e:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   94c80:	2025      	movs	r0, #37	; 0x25
   94c82:	4b20      	ldr	r3, [pc, #128]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c84:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   94c86:	4b1e      	ldr	r3, [pc, #120]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c88:	2200      	movs	r2, #0
   94c8a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   94c8e:	4b1c      	ldr	r3, [pc, #112]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94c90:	2200      	movs	r2, #0
   94c92:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   94c96:	2007      	movs	r0, #7
   94c98:	4b1a      	ldr	r3, [pc, #104]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94c9a:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   94c9c:	2008      	movs	r0, #8
   94c9e:	4b19      	ldr	r3, [pc, #100]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94ca0:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   94ca2:	4b17      	ldr	r3, [pc, #92]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94ca4:	2200      	movs	r2, #0
   94ca6:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   94caa:	4b15      	ldr	r3, [pc, #84]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94cac:	2200      	movs	r2, #0
   94cae:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   94cb2:	2013      	movs	r0, #19
   94cb4:	4b13      	ldr	r3, [pc, #76]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cb6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   94cb8:	2014      	movs	r0, #20
   94cba:	4b12      	ldr	r3, [pc, #72]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cbc:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   94cbe:	4b10      	ldr	r3, [pc, #64]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94cc0:	2200      	movs	r2, #0
   94cc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   94cc6:	4b0e      	ldr	r3, [pc, #56]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94cc8:	2200      	movs	r2, #0
   94cca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   94cce:	2011      	movs	r0, #17
   94cd0:	4b0c      	ldr	r3, [pc, #48]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cd2:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   94cd4:	2012      	movs	r0, #18
   94cd6:	4b0b      	ldr	r3, [pc, #44]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cd8:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   94cda:	4b09      	ldr	r3, [pc, #36]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94cdc:	2200      	movs	r2, #0
   94cde:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   94ce2:	4b07      	ldr	r3, [pc, #28]	; (94d00 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94ce4:	2200      	movs	r2, #0
   94ce6:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   94cea:	200f      	movs	r0, #15
   94cec:	4b05      	ldr	r3, [pc, #20]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cee:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   94cf0:	2010      	movs	r0, #16
   94cf2:	4b04      	ldr	r3, [pc, #16]	; (94d04 <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94cf4:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   94cf6:	79fb      	ldrb	r3, [r7, #7]
}
   94cf8:	4618      	mov	r0, r3
   94cfa:	3708      	adds	r7, #8
   94cfc:	46bd      	mov	sp, r7
   94cfe:	bd80      	pop	{r7, pc}
   94d00:	20070a3c 	.word	0x20070a3c
   94d04:	00082ed5 	.word	0x00082ed5

00094d08 <Cl_Isouf_safesate>:


Cl_ReturnCodeType Cl_Isouf_safesate(){
   94d08:	b580      	push	{r7, lr}
   94d0a:	af00      	add	r7, sp, #0
	
	Cl_Isouf_stop();
   94d0c:	4b05      	ldr	r3, [pc, #20]	; (94d24 <Cl_Isouf_safesate+0x1c>)
   94d0e:	4798      	blx	r3
	cl_wait(10);
   94d10:	200a      	movs	r0, #10
   94d12:	4b05      	ldr	r3, [pc, #20]	; (94d28 <Cl_Isouf_safesate+0x20>)
   94d14:	4798      	blx	r3
	cl_isouf_state = CL_ISOUF_STATE_CRITICAL_ALARM;
   94d16:	4b05      	ldr	r3, [pc, #20]	; (94d2c <Cl_Isouf_safesate+0x24>)
   94d18:	2208      	movs	r2, #8
   94d1a:	701a      	strb	r2, [r3, #0]
}
   94d1c:	bf00      	nop
   94d1e:	4618      	mov	r0, r3
   94d20:	bd80      	pop	{r7, pc}
   94d22:	bf00      	nop
   94d24:	00094d31 	.word	0x00094d31
   94d28:	00093009 	.word	0x00093009
   94d2c:	20071ae5 	.word	0x20071ae5

00094d30 <Cl_Isouf_stop>:
	
}



Cl_ReturnCodeType Cl_Isouf_stop(){
   94d30:	b580      	push	{r7, lr}
   94d32:	b082      	sub	sp, #8
   94d34:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   94d36:	2100      	movs	r1, #0
   94d38:	2001      	movs	r0, #1
   94d3a:	4b15      	ldr	r3, [pc, #84]	; (94d90 <Cl_Isouf_stop+0x60>)
   94d3c:	4798      	blx	r3
   94d3e:	4603      	mov	r3, r0
   94d40:	461a      	mov	r2, r3
   94d42:	4b14      	ldr	r3, [pc, #80]	; (94d94 <Cl_Isouf_stop+0x64>)
   94d44:	701a      	strb	r2, [r3, #0]
// 	sv_cntrl_deactivate_valve(VALVE_ID13);
// 	sv_cntrl_deactivate_valve(VALVE_ID14);
// 	sv_cntrl_activate_valve(VALVE_ID15);
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   94d46:	2100      	movs	r1, #0
   94d48:	2004      	movs	r0, #4
   94d4a:	4b13      	ldr	r3, [pc, #76]	; (94d98 <Cl_Isouf_stop+0x68>)
   94d4c:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   94d4e:	4b13      	ldr	r3, [pc, #76]	; (94d9c <Cl_Isouf_stop+0x6c>)
   94d50:	4798      	blx	r3
	
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   94d52:	2100      	movs	r1, #0
   94d54:	2004      	movs	r0, #4
   94d56:	4b12      	ldr	r3, [pc, #72]	; (94da0 <Cl_Isouf_stop+0x70>)
   94d58:	4798      	blx	r3
	isouf = false;
   94d5a:	4b12      	ldr	r3, [pc, #72]	; (94da4 <Cl_Isouf_stop+0x74>)
   94d5c:	2200      	movs	r2, #0
   94d5e:	701a      	strb	r2, [r3, #0]
	sv_cntrl_enable_bypass();
   94d60:	4b11      	ldr	r3, [pc, #68]	; (94da8 <Cl_Isouf_stop+0x78>)
   94d62:	4798      	blx	r3
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STOPPED,&data,0);
   94d64:	1dfb      	adds	r3, r7, #7
   94d66:	2200      	movs	r2, #0
   94d68:	4619      	mov	r1, r3
   94d6a:	204c      	movs	r0, #76	; 0x4c
   94d6c:	4b0f      	ldr	r3, [pc, #60]	; (94dac <Cl_Isouf_stop+0x7c>)
   94d6e:	4798      	blx	r3
   94d70:	4603      	mov	r3, r0
   94d72:	461a      	mov	r2, r3
   94d74:	4b07      	ldr	r3, [pc, #28]	; (94d94 <Cl_Isouf_stop+0x64>)
   94d76:	701a      	strb	r2, [r3, #0]
	
	isouf = false;
   94d78:	4b0a      	ldr	r3, [pc, #40]	; (94da4 <Cl_Isouf_stop+0x74>)
   94d7a:	2200      	movs	r2, #0
   94d7c:	701a      	strb	r2, [r3, #0]
	cl_isouf_state = CL_ISOUF_STATE_STOPPED;
   94d7e:	4b0c      	ldr	r3, [pc, #48]	; (94db0 <Cl_Isouf_stop+0x80>)
   94d80:	2202      	movs	r2, #2
   94d82:	701a      	strb	r2, [r3, #0]
	
}
   94d84:	bf00      	nop
   94d86:	4618      	mov	r0, r3
   94d88:	3708      	adds	r7, #8
   94d8a:	46bd      	mov	sp, r7
   94d8c:	bd80      	pop	{r7, pc}
   94d8e:	bf00      	nop
   94d90:	00082de1 	.word	0x00082de1
   94d94:	20071ae6 	.word	0x20071ae6
   94d98:	0009316d 	.word	0x0009316d
   94d9c:	00099c09 	.word	0x00099c09
   94da0:	00095bbd 	.word	0x00095bbd
   94da4:	20071aec 	.word	0x20071aec
   94da8:	00099c55 	.word	0x00099c55
   94dac:	0009b805 	.word	0x0009b805
   94db0:	20071ae5 	.word	0x20071ae5

00094db4 <Cl_Isouf_start>:

Cl_ReturnCodeType Cl_Isouf_start(){
   94db4:	b590      	push	{r4, r7, lr}
   94db6:	b085      	sub	sp, #20
   94db8:	af02      	add	r7, sp, #8
	
	Cl_Uint8Type data;
	
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   94dba:	2101      	movs	r1, #1
   94dbc:	2001      	movs	r0, #1
   94dbe:	4ba3      	ldr	r3, [pc, #652]	; (9504c <Cl_Isouf_start+0x298>)
   94dc0:	4798      	blx	r3
   94dc2:	4603      	mov	r3, r0
   94dc4:	461a      	mov	r2, r3
   94dc6:	4ba2      	ldr	r3, [pc, #648]	; (95050 <Cl_Isouf_start+0x29c>)
   94dc8:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   94dca:	2300      	movs	r3, #0
   94dcc:	9300      	str	r3, [sp, #0]
   94dce:	f04f 0300 	mov.w	r3, #0
   94dd2:	f04f 0200 	mov.w	r2, #0
   94dd6:	2101      	movs	r1, #1
   94dd8:	2001      	movs	r0, #1
   94dda:	4c9e      	ldr	r4, [pc, #632]	; (95054 <Cl_Isouf_start+0x2a0>)
   94ddc:	47a0      	blx	r4
   94dde:	4603      	mov	r3, r0
   94de0:	461a      	mov	r2, r3
   94de2:	4b9b      	ldr	r3, [pc, #620]	; (95050 <Cl_Isouf_start+0x29c>)
   94de4:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   94de6:	2300      	movs	r3, #0
   94de8:	9300      	str	r3, [sp, #0]
   94dea:	f04f 0300 	mov.w	r3, #0
   94dee:	f04f 0200 	mov.w	r2, #0
   94df2:	2100      	movs	r1, #0
   94df4:	2029      	movs	r0, #41	; 0x29
   94df6:	4c97      	ldr	r4, [pc, #604]	; (95054 <Cl_Isouf_start+0x2a0>)
   94df8:	47a0      	blx	r4
   94dfa:	4603      	mov	r3, r0
   94dfc:	461a      	mov	r2, r3
   94dfe:	4b94      	ldr	r3, [pc, #592]	; (95050 <Cl_Isouf_start+0x29c>)
   94e00:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   94e02:	2300      	movs	r3, #0
   94e04:	9300      	str	r3, [sp, #0]
   94e06:	f04f 0300 	mov.w	r3, #0
   94e0a:	f04f 0200 	mov.w	r2, #0
   94e0e:	2100      	movs	r1, #0
   94e10:	202b      	movs	r0, #43	; 0x2b
   94e12:	4c90      	ldr	r4, [pc, #576]	; (95054 <Cl_Isouf_start+0x2a0>)
   94e14:	47a0      	blx	r4
   94e16:	4603      	mov	r3, r0
   94e18:	461a      	mov	r2, r3
   94e1a:	4b8d      	ldr	r3, [pc, #564]	; (95050 <Cl_Isouf_start+0x29c>)
   94e1c:	701a      	strb	r2, [r3, #0]
	
	
	//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   94e1e:	2101      	movs	r1, #1
   94e20:	203d      	movs	r0, #61	; 0x3d
   94e22:	4b8a      	ldr	r3, [pc, #552]	; (9504c <Cl_Isouf_start+0x298>)
   94e24:	4798      	blx	r3
   94e26:	4603      	mov	r3, r0
   94e28:	461a      	mov	r2, r3
   94e2a:	4b89      	ldr	r3, [pc, #548]	; (95050 <Cl_Isouf_start+0x29c>)
   94e2c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   94e2e:	2101      	movs	r1, #1
   94e30:	203e      	movs	r0, #62	; 0x3e
   94e32:	4b86      	ldr	r3, [pc, #536]	; (9504c <Cl_Isouf_start+0x298>)
   94e34:	4798      	blx	r3
   94e36:	4603      	mov	r3, r0
   94e38:	461a      	mov	r2, r3
   94e3a:	4b85      	ldr	r3, [pc, #532]	; (95050 <Cl_Isouf_start+0x29c>)
   94e3c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   94e3e:	2101      	movs	r1, #1
   94e40:	2005      	movs	r0, #5
   94e42:	4b82      	ldr	r3, [pc, #520]	; (9504c <Cl_Isouf_start+0x298>)
   94e44:	4798      	blx	r3
   94e46:	4603      	mov	r3, r0
   94e48:	461a      	mov	r2, r3
   94e4a:	4b81      	ldr	r3, [pc, #516]	; (95050 <Cl_Isouf_start+0x29c>)
   94e4c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   94e4e:	2101      	movs	r1, #1
   94e50:	2006      	movs	r0, #6
   94e52:	4b7e      	ldr	r3, [pc, #504]	; (9504c <Cl_Isouf_start+0x298>)
   94e54:	4798      	blx	r3
   94e56:	4603      	mov	r3, r0
   94e58:	461a      	mov	r2, r3
   94e5a:	4b7d      	ldr	r3, [pc, #500]	; (95050 <Cl_Isouf_start+0x29c>)
   94e5c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   94e5e:	2100      	movs	r1, #0
   94e60:	2003      	movs	r0, #3
   94e62:	4b7a      	ldr	r3, [pc, #488]	; (9504c <Cl_Isouf_start+0x298>)
   94e64:	4798      	blx	r3
   94e66:	4603      	mov	r3, r0
   94e68:	461a      	mov	r2, r3
   94e6a:	4b79      	ldr	r3, [pc, #484]	; (95050 <Cl_Isouf_start+0x29c>)
   94e6c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   94e6e:	2100      	movs	r1, #0
   94e70:	2004      	movs	r0, #4
   94e72:	4b76      	ldr	r3, [pc, #472]	; (9504c <Cl_Isouf_start+0x298>)
   94e74:	4798      	blx	r3
   94e76:	4603      	mov	r3, r0
   94e78:	461a      	mov	r2, r3
   94e7a:	4b75      	ldr	r3, [pc, #468]	; (95050 <Cl_Isouf_start+0x29c>)
   94e7c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   94e7e:	2100      	movs	r1, #0
   94e80:	2007      	movs	r0, #7
   94e82:	4b72      	ldr	r3, [pc, #456]	; (9504c <Cl_Isouf_start+0x298>)
   94e84:	4798      	blx	r3
   94e86:	4603      	mov	r3, r0
   94e88:	461a      	mov	r2, r3
   94e8a:	4b71      	ldr	r3, [pc, #452]	; (95050 <Cl_Isouf_start+0x29c>)
   94e8c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   94e8e:	2100      	movs	r1, #0
   94e90:	2008      	movs	r0, #8
   94e92:	4b6e      	ldr	r3, [pc, #440]	; (9504c <Cl_Isouf_start+0x298>)
   94e94:	4798      	blx	r3
   94e96:	4603      	mov	r3, r0
   94e98:	461a      	mov	r2, r3
   94e9a:	4b6d      	ldr	r3, [pc, #436]	; (95050 <Cl_Isouf_start+0x29c>)
   94e9c:	701a      	strb	r2, [r3, #0]
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   94e9e:	2101      	movs	r1, #1
   94ea0:	2020      	movs	r0, #32
   94ea2:	4b6a      	ldr	r3, [pc, #424]	; (9504c <Cl_Isouf_start+0x298>)
   94ea4:	4798      	blx	r3
   94ea6:	4603      	mov	r3, r0
   94ea8:	461a      	mov	r2, r3
   94eaa:	4b69      	ldr	r3, [pc, #420]	; (95050 <Cl_Isouf_start+0x29c>)
   94eac:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   94eae:	2100      	movs	r1, #0
   94eb0:	2021      	movs	r0, #33	; 0x21
   94eb2:	4b66      	ldr	r3, [pc, #408]	; (9504c <Cl_Isouf_start+0x298>)
   94eb4:	4798      	blx	r3
   94eb6:	4603      	mov	r3, r0
   94eb8:	461a      	mov	r2, r3
   94eba:	4b65      	ldr	r3, [pc, #404]	; (95050 <Cl_Isouf_start+0x29c>)
   94ebc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   94ebe:	2100      	movs	r1, #0
   94ec0:	2024      	movs	r0, #36	; 0x24
   94ec2:	4b62      	ldr	r3, [pc, #392]	; (9504c <Cl_Isouf_start+0x298>)
   94ec4:	4798      	blx	r3
   94ec6:	4603      	mov	r3, r0
   94ec8:	461a      	mov	r2, r3
   94eca:	4b61      	ldr	r3, [pc, #388]	; (95050 <Cl_Isouf_start+0x29c>)
   94ecc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   94ece:	2100      	movs	r1, #0
   94ed0:	2026      	movs	r0, #38	; 0x26
   94ed2:	4b5e      	ldr	r3, [pc, #376]	; (9504c <Cl_Isouf_start+0x298>)
   94ed4:	4798      	blx	r3
   94ed6:	4603      	mov	r3, r0
   94ed8:	461a      	mov	r2, r3
   94eda:	4b5d      	ldr	r3, [pc, #372]	; (95050 <Cl_Isouf_start+0x29c>)
   94edc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   94ede:	2100      	movs	r1, #0
   94ee0:	2023      	movs	r0, #35	; 0x23
   94ee2:	4b5a      	ldr	r3, [pc, #360]	; (9504c <Cl_Isouf_start+0x298>)
   94ee4:	4798      	blx	r3
   94ee6:	4603      	mov	r3, r0
   94ee8:	461a      	mov	r2, r3
   94eea:	4b59      	ldr	r3, [pc, #356]	; (95050 <Cl_Isouf_start+0x29c>)
   94eec:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   94eee:	2100      	movs	r1, #0
   94ef0:	2025      	movs	r0, #37	; 0x25
   94ef2:	4b56      	ldr	r3, [pc, #344]	; (9504c <Cl_Isouf_start+0x298>)
   94ef4:	4798      	blx	r3
   94ef6:	4603      	mov	r3, r0
   94ef8:	461a      	mov	r2, r3
   94efa:	4b55      	ldr	r3, [pc, #340]	; (95050 <Cl_Isouf_start+0x29c>)
   94efc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   94efe:	2101      	movs	r1, #1
   94f00:	2022      	movs	r0, #34	; 0x22
   94f02:	4b52      	ldr	r3, [pc, #328]	; (9504c <Cl_Isouf_start+0x298>)
   94f04:	4798      	blx	r3
   94f06:	4603      	mov	r3, r0
   94f08:	461a      	mov	r2, r3
   94f0a:	4b51      	ldr	r3, [pc, #324]	; (95050 <Cl_Isouf_start+0x29c>)
   94f0c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   94f0e:	2100      	movs	r1, #0
   94f10:	2017      	movs	r0, #23
   94f12:	4b4e      	ldr	r3, [pc, #312]	; (9504c <Cl_Isouf_start+0x298>)
   94f14:	4798      	blx	r3
   94f16:	4603      	mov	r3, r0
   94f18:	461a      	mov	r2, r3
   94f1a:	4b4d      	ldr	r3, [pc, #308]	; (95050 <Cl_Isouf_start+0x29c>)
   94f1c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   94f1e:	2100      	movs	r1, #0
   94f20:	2018      	movs	r0, #24
   94f22:	4b4a      	ldr	r3, [pc, #296]	; (9504c <Cl_Isouf_start+0x298>)
   94f24:	4798      	blx	r3
   94f26:	4603      	mov	r3, r0
   94f28:	461a      	mov	r2, r3
   94f2a:	4b49      	ldr	r3, [pc, #292]	; (95050 <Cl_Isouf_start+0x29c>)
   94f2c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   94f2e:	2100      	movs	r1, #0
   94f30:	2015      	movs	r0, #21
   94f32:	4b46      	ldr	r3, [pc, #280]	; (9504c <Cl_Isouf_start+0x298>)
   94f34:	4798      	blx	r3
   94f36:	4603      	mov	r3, r0
   94f38:	461a      	mov	r2, r3
   94f3a:	4b45      	ldr	r3, [pc, #276]	; (95050 <Cl_Isouf_start+0x29c>)
   94f3c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   94f3e:	2100      	movs	r1, #0
   94f40:	2016      	movs	r0, #22
   94f42:	4b42      	ldr	r3, [pc, #264]	; (9504c <Cl_Isouf_start+0x298>)
   94f44:	4798      	blx	r3
   94f46:	4603      	mov	r3, r0
   94f48:	461a      	mov	r2, r3
   94f4a:	4b41      	ldr	r3, [pc, #260]	; (95050 <Cl_Isouf_start+0x29c>)
   94f4c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   94f4e:	2100      	movs	r1, #0
   94f50:	2027      	movs	r0, #39	; 0x27
   94f52:	4b3e      	ldr	r3, [pc, #248]	; (9504c <Cl_Isouf_start+0x298>)
   94f54:	4798      	blx	r3
   94f56:	4603      	mov	r3, r0
   94f58:	461a      	mov	r2, r3
   94f5a:	4b3d      	ldr	r3, [pc, #244]	; (95050 <Cl_Isouf_start+0x29c>)
   94f5c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   94f5e:	2100      	movs	r1, #0
   94f60:	2028      	movs	r0, #40	; 0x28
   94f62:	4b3a      	ldr	r3, [pc, #232]	; (9504c <Cl_Isouf_start+0x298>)
   94f64:	4798      	blx	r3
   94f66:	4603      	mov	r3, r0
   94f68:	461a      	mov	r2, r3
   94f6a:	4b39      	ldr	r3, [pc, #228]	; (95050 <Cl_Isouf_start+0x29c>)
   94f6c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   94f6e:	2100      	movs	r1, #0
   94f70:	2014      	movs	r0, #20
   94f72:	4b36      	ldr	r3, [pc, #216]	; (9504c <Cl_Isouf_start+0x298>)
   94f74:	4798      	blx	r3
   94f76:	4603      	mov	r3, r0
   94f78:	461a      	mov	r2, r3
   94f7a:	4b35      	ldr	r3, [pc, #212]	; (95050 <Cl_Isouf_start+0x29c>)
   94f7c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   94f7e:	2100      	movs	r1, #0
   94f80:	2013      	movs	r0, #19
   94f82:	4b32      	ldr	r3, [pc, #200]	; (9504c <Cl_Isouf_start+0x298>)
   94f84:	4798      	blx	r3
   94f86:	4603      	mov	r3, r0
   94f88:	461a      	mov	r2, r3
   94f8a:	4b31      	ldr	r3, [pc, #196]	; (95050 <Cl_Isouf_start+0x29c>)
   94f8c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   94f8e:	2100      	movs	r1, #0
   94f90:	200f      	movs	r0, #15
   94f92:	4b2e      	ldr	r3, [pc, #184]	; (9504c <Cl_Isouf_start+0x298>)
   94f94:	4798      	blx	r3
   94f96:	4603      	mov	r3, r0
   94f98:	461a      	mov	r2, r3
   94f9a:	4b2d      	ldr	r3, [pc, #180]	; (95050 <Cl_Isouf_start+0x29c>)
   94f9c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   94f9e:	2100      	movs	r1, #0
   94fa0:	2010      	movs	r0, #16
   94fa2:	4b2a      	ldr	r3, [pc, #168]	; (9504c <Cl_Isouf_start+0x298>)
   94fa4:	4798      	blx	r3
   94fa6:	4603      	mov	r3, r0
   94fa8:	461a      	mov	r2, r3
   94faa:	4b29      	ldr	r3, [pc, #164]	; (95050 <Cl_Isouf_start+0x29c>)
   94fac:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   94fae:	2100      	movs	r1, #0
   94fb0:	2011      	movs	r0, #17
   94fb2:	4b26      	ldr	r3, [pc, #152]	; (9504c <Cl_Isouf_start+0x298>)
   94fb4:	4798      	blx	r3
   94fb6:	4603      	mov	r3, r0
   94fb8:	461a      	mov	r2, r3
   94fba:	4b25      	ldr	r3, [pc, #148]	; (95050 <Cl_Isouf_start+0x29c>)
   94fbc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   94fbe:	2100      	movs	r1, #0
   94fc0:	2012      	movs	r0, #18
   94fc2:	4b22      	ldr	r3, [pc, #136]	; (9504c <Cl_Isouf_start+0x298>)
   94fc4:	4798      	blx	r3
   94fc6:	4603      	mov	r3, r0
   94fc8:	461a      	mov	r2, r3
   94fca:	4b21      	ldr	r3, [pc, #132]	; (95050 <Cl_Isouf_start+0x29c>)
   94fcc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   94fce:	2100      	movs	r1, #0
   94fd0:	2013      	movs	r0, #19
   94fd2:	4b1e      	ldr	r3, [pc, #120]	; (9504c <Cl_Isouf_start+0x298>)
   94fd4:	4798      	blx	r3
   94fd6:	4603      	mov	r3, r0
   94fd8:	461a      	mov	r2, r3
   94fda:	4b1d      	ldr	r3, [pc, #116]	; (95050 <Cl_Isouf_start+0x29c>)
   94fdc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   94fde:	2100      	movs	r1, #0
   94fe0:	2014      	movs	r0, #20
   94fe2:	4b1a      	ldr	r3, [pc, #104]	; (9504c <Cl_Isouf_start+0x298>)
   94fe4:	4798      	blx	r3
   94fe6:	4603      	mov	r3, r0
   94fe8:	461a      	mov	r2, r3
   94fea:	4b19      	ldr	r3, [pc, #100]	; (95050 <Cl_Isouf_start+0x29c>)
   94fec:	701a      	strb	r2, [r3, #0]
	
	Cl_ISOufTotalSecondscounter = 0;
   94fee:	4b1a      	ldr	r3, [pc, #104]	; (95058 <Cl_Isouf_start+0x2a4>)
   94ff0:	2200      	movs	r2, #0
   94ff2:	601a      	str	r2, [r3, #0]
	//	cl_dialysate_ready_isouf();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   94ff4:	200d      	movs	r0, #13
   94ff6:	4b19      	ldr	r3, [pc, #100]	; (9505c <Cl_Isouf_start+0x2a8>)
   94ff8:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID14);
   94ffa:	200e      	movs	r0, #14
   94ffc:	4b18      	ldr	r3, [pc, #96]	; (95060 <Cl_Isouf_start+0x2ac>)
   94ffe:	4798      	blx	r3
	sv_cntrl_deactivate_valve(VALVE_ID15);
   95000:	200f      	movs	r0, #15
   95002:	4b16      	ldr	r3, [pc, #88]	; (9505c <Cl_Isouf_start+0x2a8>)
   95004:	4798      	blx	r3
	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   95006:	2100      	movs	r1, #0
   95008:	200a      	movs	r0, #10
   9500a:	4b16      	ldr	r3, [pc, #88]	; (95064 <Cl_Isouf_start+0x2b0>)
   9500c:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_START,0);
   9500e:	2100      	movs	r1, #0
   95010:	2002      	movs	r0, #2
   95012:	4b15      	ldr	r3, [pc, #84]	; (95068 <Cl_Isouf_start+0x2b4>)
   95014:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   95016:	2100      	movs	r1, #0
   95018:	2002      	movs	r0, #2
   9501a:	4b14      	ldr	r3, [pc, #80]	; (9506c <Cl_Isouf_start+0x2b8>)
   9501c:	4798      	blx	r3
	
	
	isouf = true;
   9501e:	4b14      	ldr	r3, [pc, #80]	; (95070 <Cl_Isouf_start+0x2bc>)
   95020:	2201      	movs	r2, #1
   95022:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STARTED,&data,0);
   95024:	1dfb      	adds	r3, r7, #7
   95026:	2200      	movs	r2, #0
   95028:	4619      	mov	r1, r3
   9502a:	204b      	movs	r0, #75	; 0x4b
   9502c:	4b11      	ldr	r3, [pc, #68]	; (95074 <Cl_Isouf_start+0x2c0>)
   9502e:	4798      	blx	r3
   95030:	4603      	mov	r3, r0
   95032:	461a      	mov	r2, r3
   95034:	4b06      	ldr	r3, [pc, #24]	; (95050 <Cl_Isouf_start+0x29c>)
   95036:	701a      	strb	r2, [r3, #0]
	cl_wait(10);
   95038:	200a      	movs	r0, #10
   9503a:	4b0f      	ldr	r3, [pc, #60]	; (95078 <Cl_Isouf_start+0x2c4>)
   9503c:	4798      	blx	r3
		Cl_Iso_UpdateTimeInfo();
   9503e:	4b0f      	ldr	r3, [pc, #60]	; (9507c <Cl_Isouf_start+0x2c8>)
   95040:	4798      	blx	r3
}
   95042:	bf00      	nop
   95044:	4618      	mov	r0, r3
   95046:	370c      	adds	r7, #12
   95048:	46bd      	mov	sp, r7
   9504a:	bd90      	pop	{r4, r7, pc}
   9504c:	00082de1 	.word	0x00082de1
   95050:	20071ae6 	.word	0x20071ae6
   95054:	00082d85 	.word	0x00082d85
   95058:	20071ae8 	.word	0x20071ae8
   9505c:	00099ac9 	.word	0x00099ac9
   95060:	00099aa9 	.word	0x00099aa9
   95064:	00093861 	.word	0x00093861
   95068:	0009316d 	.word	0x0009316d
   9506c:	00095bbd 	.word	0x00095bbd
   95070:	20071aec 	.word	0x20071aec
   95074:	0009b805 	.word	0x0009b805
   95078:	00093009 	.word	0x00093009
   9507c:	00095835 	.word	0x00095835

00095080 <Cl_Iso_Senddata>:

Cl_ReturnCodeType Cl_Iso_Senddata(){
   95080:	b5f0      	push	{r4, r5, r6, r7, lr}
   95082:	b093      	sub	sp, #76	; 0x4c
   95084:	af00      	add	r7, sp, #0
	
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   95086:	f107 030c 	add.w	r3, r7, #12
   9508a:	222c      	movs	r2, #44	; 0x2c
   9508c:	2100      	movs	r1, #0
   9508e:	4618      	mov	r0, r3
   95090:	4b7b      	ldr	r3, [pc, #492]	; (95280 <Cl_Iso_Senddata+0x200>)
   95092:	4798      	blx	r3
	cl_IsoUfDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   95094:	2300      	movs	r3, #0
   95096:	807b      	strh	r3, [r7, #2]
   95098:	2300      	movs	r3, #0
   9509a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   9509e:	2300      	movs	r3, #0
   950a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	Cl_Uint8Type count = 0;
   950a4:	2300      	movs	r3, #0
   950a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   950aa:	2351      	movs	r3, #81	; 0x51
   950ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   950b0:	232a      	movs	r3, #42	; 0x2a
   950b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	systemdataarray[0] = ISOUF_DATA;
   950b6:	230c      	movs	r3, #12
   950b8:	733b      	strb	r3, [r7, #12]
	count++;
   950ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   950be:	3301      	adds	r3, #1
   950c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   950c4:	1cbb      	adds	r3, r7, #2
   950c6:	4619      	mov	r1, r3
   950c8:	2014      	movs	r0, #20
   950ca:	4b6e      	ldr	r3, [pc, #440]	; (95284 <Cl_Iso_Senddata+0x204>)
   950cc:	4798      	blx	r3
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// //							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 31 -20;
// //							avgtmp3 =(avgtmp3*5 + temp1)/6;
// 							avgtmp3 = (res_temp_value  - 0.4)/10;
							avgtmp3 = (float)temp/10;
   950ce:	887a      	ldrh	r2, [r7, #2]
   950d0:	4b6d      	ldr	r3, [pc, #436]	; (95288 <Cl_Iso_Senddata+0x208>)
   950d2:	4610      	mov	r0, r2
   950d4:	4798      	blx	r3
   950d6:	4602      	mov	r2, r0
   950d8:	4b6c      	ldr	r3, [pc, #432]	; (9528c <Cl_Iso_Senddata+0x20c>)
   950da:	496d      	ldr	r1, [pc, #436]	; (95290 <Cl_Iso_Senddata+0x210>)
   950dc:	4610      	mov	r0, r2
   950de:	4798      	blx	r3
   950e0:	4603      	mov	r3, r0
   950e2:	461a      	mov	r2, r3
   950e4:	4b6b      	ldr	r3, [pc, #428]	; (95294 <Cl_Iso_Senddata+0x214>)
   950e6:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   950e8:	1cbb      	adds	r3, r7, #2
   950ea:	4619      	mov	r1, r3
   950ec:	2007      	movs	r0, #7
   950ee:	4b65      	ldr	r3, [pc, #404]	; (95284 <Cl_Iso_Senddata+0x204>)
   950f0:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				
				if (temp > 50)
   950f2:	887b      	ldrh	r3, [r7, #2]
   950f4:	2b32      	cmp	r3, #50	; 0x32
   950f6:	f240 80e5 	bls.w	952c4 <Cl_Iso_Senddata+0x244>
			{
				//	calibration_cond(temp);
					cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   950fa:	887b      	ldrh	r3, [r7, #2]
   950fc:	461a      	mov	r2, r3
   950fe:	4b66      	ldr	r3, [pc, #408]	; (95298 <Cl_Iso_Senddata+0x218>)
   95100:	4610      	mov	r0, r2
   95102:	4798      	blx	r3
   95104:	4c65      	ldr	r4, [pc, #404]	; (9529c <Cl_Iso_Senddata+0x21c>)
   95106:	a356      	add	r3, pc, #344	; (adr r3, 95260 <Cl_Iso_Senddata+0x1e0>)
   95108:	e9d3 2300 	ldrd	r2, r3, [r3]
   9510c:	47a0      	blx	r4
   9510e:	4603      	mov	r3, r0
   95110:	460c      	mov	r4, r1
   95112:	461d      	mov	r5, r3
   95114:	4626      	mov	r6, r4
   95116:	887b      	ldrh	r3, [r7, #2]
   95118:	461a      	mov	r2, r3
   9511a:	4b5f      	ldr	r3, [pc, #380]	; (95298 <Cl_Iso_Senddata+0x218>)
   9511c:	4610      	mov	r0, r2
   9511e:	4798      	blx	r3
   95120:	4602      	mov	r2, r0
   95122:	460b      	mov	r3, r1
   95124:	4c5d      	ldr	r4, [pc, #372]	; (9529c <Cl_Iso_Senddata+0x21c>)
   95126:	4628      	mov	r0, r5
   95128:	4631      	mov	r1, r6
   9512a:	47a0      	blx	r4
   9512c:	4603      	mov	r3, r0
   9512e:	460c      	mov	r4, r1
   95130:	461d      	mov	r5, r3
   95132:	4626      	mov	r6, r4
   95134:	887b      	ldrh	r3, [r7, #2]
   95136:	461a      	mov	r2, r3
   95138:	4b57      	ldr	r3, [pc, #348]	; (95298 <Cl_Iso_Senddata+0x218>)
   9513a:	4610      	mov	r0, r2
   9513c:	4798      	blx	r3
   9513e:	4c57      	ldr	r4, [pc, #348]	; (9529c <Cl_Iso_Senddata+0x21c>)
   95140:	a349      	add	r3, pc, #292	; (adr r3, 95268 <Cl_Iso_Senddata+0x1e8>)
   95142:	e9d3 2300 	ldrd	r2, r3, [r3]
   95146:	47a0      	blx	r4
   95148:	4603      	mov	r3, r0
   9514a:	460c      	mov	r4, r1
   9514c:	461a      	mov	r2, r3
   9514e:	4623      	mov	r3, r4
   95150:	4c53      	ldr	r4, [pc, #332]	; (952a0 <Cl_Iso_Senddata+0x220>)
   95152:	4628      	mov	r0, r5
   95154:	4631      	mov	r1, r6
   95156:	47a0      	blx	r4
   95158:	4603      	mov	r3, r0
   9515a:	460c      	mov	r4, r1
   9515c:	4618      	mov	r0, r3
   9515e:	4621      	mov	r1, r4
   95160:	4c50      	ldr	r4, [pc, #320]	; (952a4 <Cl_Iso_Senddata+0x224>)
   95162:	a343      	add	r3, pc, #268	; (adr r3, 95270 <Cl_Iso_Senddata+0x1f0>)
   95164:	e9d3 2300 	ldrd	r2, r3, [r3]
   95168:	47a0      	blx	r4
   9516a:	4603      	mov	r3, r0
   9516c:	460c      	mov	r4, r1
   9516e:	4619      	mov	r1, r3
   95170:	4622      	mov	r2, r4
   95172:	4b4d      	ldr	r3, [pc, #308]	; (952a8 <Cl_Iso_Senddata+0x228>)
   95174:	4608      	mov	r0, r1
   95176:	4611      	mov	r1, r2
   95178:	4798      	blx	r3
   9517a:	4602      	mov	r2, r0
   9517c:	4b4b      	ldr	r3, [pc, #300]	; (952ac <Cl_Iso_Senddata+0x22c>)
   9517e:	601a      	str	r2, [r3, #0]
				//	cond =(cond*5 + cond_final_cs3)/6;
					cond_comp= cond/(1+(avgtmp3/10-25.0)*0.020);
   95180:	4b4a      	ldr	r3, [pc, #296]	; (952ac <Cl_Iso_Senddata+0x22c>)
   95182:	681a      	ldr	r2, [r3, #0]
   95184:	4b4a      	ldr	r3, [pc, #296]	; (952b0 <Cl_Iso_Senddata+0x230>)
   95186:	4610      	mov	r0, r2
   95188:	4798      	blx	r3
   9518a:	4605      	mov	r5, r0
   9518c:	460e      	mov	r6, r1
   9518e:	4b41      	ldr	r3, [pc, #260]	; (95294 <Cl_Iso_Senddata+0x214>)
   95190:	681a      	ldr	r2, [r3, #0]
   95192:	4b3e      	ldr	r3, [pc, #248]	; (9528c <Cl_Iso_Senddata+0x20c>)
   95194:	493e      	ldr	r1, [pc, #248]	; (95290 <Cl_Iso_Senddata+0x210>)
   95196:	4610      	mov	r0, r2
   95198:	4798      	blx	r3
   9519a:	4603      	mov	r3, r0
   9519c:	461a      	mov	r2, r3
   9519e:	4b44      	ldr	r3, [pc, #272]	; (952b0 <Cl_Iso_Senddata+0x230>)
   951a0:	4610      	mov	r0, r2
   951a2:	4798      	blx	r3
   951a4:	4c3f      	ldr	r4, [pc, #252]	; (952a4 <Cl_Iso_Senddata+0x224>)
   951a6:	f04f 0200 	mov.w	r2, #0
   951aa:	4b42      	ldr	r3, [pc, #264]	; (952b4 <Cl_Iso_Senddata+0x234>)
   951ac:	47a0      	blx	r4
   951ae:	4603      	mov	r3, r0
   951b0:	460c      	mov	r4, r1
   951b2:	4618      	mov	r0, r3
   951b4:	4621      	mov	r1, r4
   951b6:	4c39      	ldr	r4, [pc, #228]	; (9529c <Cl_Iso_Senddata+0x21c>)
   951b8:	a32f      	add	r3, pc, #188	; (adr r3, 95278 <Cl_Iso_Senddata+0x1f8>)
   951ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   951be:	47a0      	blx	r4
   951c0:	4603      	mov	r3, r0
   951c2:	460c      	mov	r4, r1
   951c4:	4618      	mov	r0, r3
   951c6:	4621      	mov	r1, r4
   951c8:	4c35      	ldr	r4, [pc, #212]	; (952a0 <Cl_Iso_Senddata+0x220>)
   951ca:	f04f 0200 	mov.w	r2, #0
   951ce:	4b3a      	ldr	r3, [pc, #232]	; (952b8 <Cl_Iso_Senddata+0x238>)
   951d0:	47a0      	blx	r4
   951d2:	4603      	mov	r3, r0
   951d4:	460c      	mov	r4, r1
   951d6:	461a      	mov	r2, r3
   951d8:	4623      	mov	r3, r4
   951da:	4c38      	ldr	r4, [pc, #224]	; (952bc <Cl_Iso_Senddata+0x23c>)
   951dc:	4628      	mov	r0, r5
   951de:	4631      	mov	r1, r6
   951e0:	47a0      	blx	r4
   951e2:	4603      	mov	r3, r0
   951e4:	460c      	mov	r4, r1
   951e6:	4619      	mov	r1, r3
   951e8:	4622      	mov	r2, r4
   951ea:	4b2f      	ldr	r3, [pc, #188]	; (952a8 <Cl_Iso_Senddata+0x228>)
   951ec:	4608      	mov	r0, r1
   951ee:	4611      	mov	r1, r2
   951f0:	4798      	blx	r3
   951f2:	4603      	mov	r3, r0
   951f4:	63fb      	str	r3, [r7, #60]	; 0x3c
				
					
					tempdata.word = (cond_comp);
   951f6:	4b32      	ldr	r3, [pc, #200]	; (952c0 <Cl_Iso_Senddata+0x240>)
   951f8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   951fa:	4798      	blx	r3
   951fc:	4603      	mov	r3, r0
   951fe:	607b      	str	r3, [r7, #4]
					systemdataarray[count++] = tempdata.bytearray[0];
   95200:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95204:	1c5a      	adds	r2, r3, #1
   95206:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9520a:	793a      	ldrb	r2, [r7, #4]
   9520c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95210:	440b      	add	r3, r1
   95212:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[1];
   95216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9521a:	1c5a      	adds	r2, r3, #1
   9521c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95220:	797a      	ldrb	r2, [r7, #5]
   95222:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95226:	440b      	add	r3, r1
   95228:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[2];
   9522c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95230:	1c5a      	adds	r2, r3, #1
   95232:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95236:	79ba      	ldrb	r2, [r7, #6]
   95238:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9523c:	440b      	add	r3, r1
   9523e:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[3];
   95242:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95246:	1c5a      	adds	r2, r3, #1
   95248:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9524c:	79fa      	ldrb	r2, [r7, #7]
   9524e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95252:	440b      	add	r3, r1
   95254:	f803 2c3c 	strb.w	r2, [r3, #-60]
   95258:	e062      	b.n	95320 <Cl_Iso_Senddata+0x2a0>
   9525a:	bf00      	nop
   9525c:	f3af 8000 	nop.w
   95260:	eb1c432d 	.word	0xeb1c432d
   95264:	bf1a36e2 	.word	0xbf1a36e2
   95268:	70a3d70a 	.word	0x70a3d70a
   9526c:	3fd70a3d 	.word	0x3fd70a3d
   95270:	851eb852 	.word	0x851eb852
   95274:	404331eb 	.word	0x404331eb
   95278:	47ae147b 	.word	0x47ae147b
   9527c:	3f947ae1 	.word	0x3f947ae1
   95280:	000a6ae5 	.word	0x000a6ae5
   95284:	0008e6a1 	.word	0x0008e6a1
   95288:	000a64e1 	.word	0x000a64e1
   9528c:	000a66f9 	.word	0x000a66f9
   95290:	41200000 	.word	0x41200000
   95294:	20071af0 	.word	0x20071af0
   95298:	000a5c45 	.word	0x000a5c45
   9529c:	000a5d11 	.word	0x000a5d11
   952a0:	000a59ad 	.word	0x000a59ad
   952a4:	000a59a9 	.word	0x000a59a9
   952a8:	000a62d5 	.word	0x000a62d5
   952ac:	20071af4 	.word	0x20071af4
   952b0:	000a5c69 	.word	0x000a5c69
   952b4:	40390000 	.word	0x40390000
   952b8:	3ff00000 	.word	0x3ff00000
   952bc:	000a5f65 	.word	0x000a5f65
   952c0:	000a6969 	.word	0x000a6969
			}
				else
				{
					tempdata.word = 0;
   952c4:	2300      	movs	r3, #0
   952c6:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   952c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   952cc:	1c5a      	adds	r2, r3, #1
   952ce:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   952d2:	793a      	ldrb	r2, [r7, #4]
   952d4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   952d8:	440b      	add	r3, r1
   952da:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   952de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   952e2:	1c5a      	adds	r2, r3, #1
   952e4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   952e8:	797a      	ldrb	r2, [r7, #5]
   952ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
   952ee:	440b      	add	r3, r1
   952f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   952f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   952f8:	1c5a      	adds	r2, r3, #1
   952fa:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   952fe:	79ba      	ldrb	r2, [r7, #6]
   95300:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95304:	440b      	add	r3, r1
   95306:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   9530a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9530e:	1c5a      	adds	r2, r3, #1
   95310:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95314:	79fa      	ldrb	r2, [r7, #7]
   95316:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9531a:	440b      	add	r3, r1
   9531c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   95320:	4baf      	ldr	r3, [pc, #700]	; (955e0 <Cl_Iso_Senddata+0x560>)
   95322:	681a      	ldr	r2, [r3, #0]
   95324:	4baf      	ldr	r3, [pc, #700]	; (955e4 <Cl_Iso_Senddata+0x564>)
   95326:	4610      	mov	r0, r2
   95328:	4798      	blx	r3
   9532a:	4603      	mov	r3, r0
   9532c:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   9532e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95332:	1c5a      	adds	r2, r3, #1
   95334:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95338:	793a      	ldrb	r2, [r7, #4]
   9533a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9533e:	440b      	add	r3, r1
   95340:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   95344:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95348:	1c5a      	adds	r2, r3, #1
   9534a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9534e:	797a      	ldrb	r2, [r7, #5]
   95350:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95354:	440b      	add	r3, r1
   95356:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   9535a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9535e:	1c5a      	adds	r2, r3, #1
   95360:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95364:	79ba      	ldrb	r2, [r7, #6]
   95366:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9536a:	440b      	add	r3, r1
   9536c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   95370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95374:	1c5a      	adds	r2, r3, #1
   95376:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9537a:	79fa      	ldrb	r2, [r7, #7]
   9537c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95380:	440b      	add	r3, r1
   95382:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   95386:	1d3b      	adds	r3, r7, #4
   95388:	4619      	mov	r1, r3
   9538a:	200b      	movs	r0, #11
   9538c:	4b96      	ldr	r3, [pc, #600]	; (955e8 <Cl_Iso_Senddata+0x568>)
   9538e:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   95390:	88bb      	ldrh	r3, [r7, #4]
   95392:	461a      	mov	r2, r3
   95394:	4b95      	ldr	r3, [pc, #596]	; (955ec <Cl_Iso_Senddata+0x56c>)
   95396:	4610      	mov	r0, r2
   95398:	4798      	blx	r3
   9539a:	4c95      	ldr	r4, [pc, #596]	; (955f0 <Cl_Iso_Senddata+0x570>)
   9539c:	a38e      	add	r3, pc, #568	; (adr r3, 955d8 <Cl_Iso_Senddata+0x558>)
   9539e:	e9d3 2300 	ldrd	r2, r3, [r3]
   953a2:	47a0      	blx	r4
   953a4:	4603      	mov	r3, r0
   953a6:	460c      	mov	r4, r1
   953a8:	4619      	mov	r1, r3
   953aa:	4622      	mov	r2, r4
   953ac:	4b91      	ldr	r3, [pc, #580]	; (955f4 <Cl_Iso_Senddata+0x574>)
   953ae:	4608      	mov	r0, r1
   953b0:	4611      	mov	r1, r2
   953b2:	4798      	blx	r3
   953b4:	4603      	mov	r3, r0
   953b6:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   953b8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   953bc:	4618      	mov	r0, r3
   953be:	4b8e      	ldr	r3, [pc, #568]	; (955f8 <Cl_Iso_Senddata+0x578>)
   953c0:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   953c2:	4b8e      	ldr	r3, [pc, #568]	; (955fc <Cl_Iso_Senddata+0x57c>)
   953c4:	681a      	ldr	r2, [r3, #0]
   953c6:	4b8e      	ldr	r3, [pc, #568]	; (95600 <Cl_Iso_Senddata+0x580>)
   953c8:	498e      	ldr	r1, [pc, #568]	; (95604 <Cl_Iso_Senddata+0x584>)
   953ca:	4610      	mov	r0, r2
   953cc:	4798      	blx	r3
   953ce:	4603      	mov	r3, r0
   953d0:	4618      	mov	r0, r3
   953d2:	4b8d      	ldr	r3, [pc, #564]	; (95608 <Cl_Iso_Senddata+0x588>)
   953d4:	681a      	ldr	r2, [r3, #0]
   953d6:	4b8d      	ldr	r3, [pc, #564]	; (9560c <Cl_Iso_Senddata+0x58c>)
   953d8:	4611      	mov	r1, r2
   953da:	4798      	blx	r3
   953dc:	4603      	mov	r3, r0
   953de:	461a      	mov	r2, r3
   953e0:	4b8b      	ldr	r3, [pc, #556]	; (95610 <Cl_Iso_Senddata+0x590>)
   953e2:	498c      	ldr	r1, [pc, #560]	; (95614 <Cl_Iso_Senddata+0x594>)
   953e4:	4610      	mov	r0, r2
   953e6:	4798      	blx	r3
   953e8:	4603      	mov	r3, r0
   953ea:	461a      	mov	r2, r3
   953ec:	4b83      	ldr	r3, [pc, #524]	; (955fc <Cl_Iso_Senddata+0x57c>)
   953ee:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   953f0:	4b82      	ldr	r3, [pc, #520]	; (955fc <Cl_Iso_Senddata+0x57c>)
   953f2:	681a      	ldr	r2, [r3, #0]
   953f4:	4b7b      	ldr	r3, [pc, #492]	; (955e4 <Cl_Iso_Senddata+0x564>)
   953f6:	4610      	mov	r0, r2
   953f8:	4798      	blx	r3
   953fa:	4603      	mov	r3, r0
   953fc:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   953fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95402:	1c5a      	adds	r2, r3, #1
   95404:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95408:	793a      	ldrb	r2, [r7, #4]
   9540a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9540e:	440b      	add	r3, r1
   95410:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   95414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95418:	1c5a      	adds	r2, r3, #1
   9541a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9541e:	797a      	ldrb	r2, [r7, #5]
   95420:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95424:	440b      	add	r3, r1
   95426:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   9542a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9542e:	1c5a      	adds	r2, r3, #1
   95430:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95434:	79ba      	ldrb	r2, [r7, #6]
   95436:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9543a:	440b      	add	r3, r1
   9543c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   95440:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95444:	1c5a      	adds	r2, r3, #1
   95446:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9544a:	79fa      	ldrb	r2, [r7, #7]
   9544c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95450:	440b      	add	r3, r1
   95452:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   95456:	1d3b      	adds	r3, r7, #4
   95458:	4619      	mov	r1, r3
   9545a:	200c      	movs	r0, #12
   9545c:	4b62      	ldr	r3, [pc, #392]	; (955e8 <Cl_Iso_Senddata+0x568>)
   9545e:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   95460:	88bb      	ldrh	r3, [r7, #4]
   95462:	461a      	mov	r2, r3
   95464:	4b61      	ldr	r3, [pc, #388]	; (955ec <Cl_Iso_Senddata+0x56c>)
   95466:	4610      	mov	r0, r2
   95468:	4798      	blx	r3
   9546a:	4c61      	ldr	r4, [pc, #388]	; (955f0 <Cl_Iso_Senddata+0x570>)
   9546c:	a35a      	add	r3, pc, #360	; (adr r3, 955d8 <Cl_Iso_Senddata+0x558>)
   9546e:	e9d3 2300 	ldrd	r2, r3, [r3]
   95472:	47a0      	blx	r4
   95474:	4603      	mov	r3, r0
   95476:	460c      	mov	r4, r1
   95478:	4619      	mov	r1, r3
   9547a:	4622      	mov	r2, r4
   9547c:	4b5d      	ldr	r3, [pc, #372]	; (955f4 <Cl_Iso_Senddata+0x574>)
   9547e:	4608      	mov	r0, r1
   95480:	4611      	mov	r1, r2
   95482:	4798      	blx	r3
   95484:	4603      	mov	r3, r0
   95486:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   95488:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   9548c:	4618      	mov	r0, r3
   9548e:	4b62      	ldr	r3, [pc, #392]	; (95618 <Cl_Iso_Senddata+0x598>)
   95490:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   95492:	4b62      	ldr	r3, [pc, #392]	; (9561c <Cl_Iso_Senddata+0x59c>)
   95494:	681a      	ldr	r2, [r3, #0]
   95496:	4b5a      	ldr	r3, [pc, #360]	; (95600 <Cl_Iso_Senddata+0x580>)
   95498:	495a      	ldr	r1, [pc, #360]	; (95604 <Cl_Iso_Senddata+0x584>)
   9549a:	4610      	mov	r0, r2
   9549c:	4798      	blx	r3
   9549e:	4603      	mov	r3, r0
   954a0:	4618      	mov	r0, r3
   954a2:	4b5f      	ldr	r3, [pc, #380]	; (95620 <Cl_Iso_Senddata+0x5a0>)
   954a4:	681a      	ldr	r2, [r3, #0]
   954a6:	4b59      	ldr	r3, [pc, #356]	; (9560c <Cl_Iso_Senddata+0x58c>)
   954a8:	4611      	mov	r1, r2
   954aa:	4798      	blx	r3
   954ac:	4603      	mov	r3, r0
   954ae:	461a      	mov	r2, r3
   954b0:	4b57      	ldr	r3, [pc, #348]	; (95610 <Cl_Iso_Senddata+0x590>)
   954b2:	4958      	ldr	r1, [pc, #352]	; (95614 <Cl_Iso_Senddata+0x594>)
   954b4:	4610      	mov	r0, r2
   954b6:	4798      	blx	r3
   954b8:	4603      	mov	r3, r0
   954ba:	461a      	mov	r2, r3
   954bc:	4b57      	ldr	r3, [pc, #348]	; (9561c <Cl_Iso_Senddata+0x59c>)
   954be:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   954c0:	4b56      	ldr	r3, [pc, #344]	; (9561c <Cl_Iso_Senddata+0x59c>)
   954c2:	681a      	ldr	r2, [r3, #0]
   954c4:	4b47      	ldr	r3, [pc, #284]	; (955e4 <Cl_Iso_Senddata+0x564>)
   954c6:	4610      	mov	r0, r2
   954c8:	4798      	blx	r3
   954ca:	4603      	mov	r3, r0
   954cc:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   954ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954d2:	1c5a      	adds	r2, r3, #1
   954d4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   954d8:	793a      	ldrb	r2, [r7, #4]
   954da:	f107 0148 	add.w	r1, r7, #72	; 0x48
   954de:	440b      	add	r3, r1
   954e0:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   954e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954e8:	1c5a      	adds	r2, r3, #1
   954ea:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   954ee:	797a      	ldrb	r2, [r7, #5]
   954f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   954f4:	440b      	add	r3, r1
   954f6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   954fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954fe:	1c5a      	adds	r2, r3, #1
   95500:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95504:	79ba      	ldrb	r2, [r7, #6]
   95506:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9550a:	440b      	add	r3, r1
   9550c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   95510:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95514:	1c5a      	adds	r2, r3, #1
   95516:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9551a:	79fa      	ldrb	r2, [r7, #7]
   9551c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95520:	440b      	add	r3, r1
   95522:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   95526:	1d3b      	adds	r3, r7, #4
   95528:	4619      	mov	r1, r3
   9552a:	200e      	movs	r0, #14
   9552c:	4b2e      	ldr	r3, [pc, #184]	; (955e8 <Cl_Iso_Senddata+0x568>)
   9552e:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   95530:	88bb      	ldrh	r3, [r7, #4]
   95532:	461a      	mov	r2, r3
   95534:	4b2d      	ldr	r3, [pc, #180]	; (955ec <Cl_Iso_Senddata+0x56c>)
   95536:	4610      	mov	r0, r2
   95538:	4798      	blx	r3
   9553a:	4c2d      	ldr	r4, [pc, #180]	; (955f0 <Cl_Iso_Senddata+0x570>)
   9553c:	a326      	add	r3, pc, #152	; (adr r3, 955d8 <Cl_Iso_Senddata+0x558>)
   9553e:	e9d3 2300 	ldrd	r2, r3, [r3]
   95542:	47a0      	blx	r4
   95544:	4603      	mov	r3, r0
   95546:	460c      	mov	r4, r1
   95548:	4619      	mov	r1, r3
   9554a:	4622      	mov	r2, r4
   9554c:	4b29      	ldr	r3, [pc, #164]	; (955f4 <Cl_Iso_Senddata+0x574>)
   9554e:	4608      	mov	r0, r1
   95550:	4611      	mov	r1, r2
   95552:	4798      	blx	r3
   95554:	4603      	mov	r3, r0
   95556:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   95558:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   9555c:	4618      	mov	r0, r3
   9555e:	4b31      	ldr	r3, [pc, #196]	; (95624 <Cl_Iso_Senddata+0x5a4>)
   95560:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   95562:	4b31      	ldr	r3, [pc, #196]	; (95628 <Cl_Iso_Senddata+0x5a8>)
   95564:	681a      	ldr	r2, [r3, #0]
   95566:	4b26      	ldr	r3, [pc, #152]	; (95600 <Cl_Iso_Senddata+0x580>)
   95568:	4926      	ldr	r1, [pc, #152]	; (95604 <Cl_Iso_Senddata+0x584>)
   9556a:	4610      	mov	r0, r2
   9556c:	4798      	blx	r3
   9556e:	4603      	mov	r3, r0
   95570:	4618      	mov	r0, r3
   95572:	4b2e      	ldr	r3, [pc, #184]	; (9562c <Cl_Iso_Senddata+0x5ac>)
   95574:	681a      	ldr	r2, [r3, #0]
   95576:	4b25      	ldr	r3, [pc, #148]	; (9560c <Cl_Iso_Senddata+0x58c>)
   95578:	4611      	mov	r1, r2
   9557a:	4798      	blx	r3
   9557c:	4603      	mov	r3, r0
   9557e:	461a      	mov	r2, r3
   95580:	4b23      	ldr	r3, [pc, #140]	; (95610 <Cl_Iso_Senddata+0x590>)
   95582:	4924      	ldr	r1, [pc, #144]	; (95614 <Cl_Iso_Senddata+0x594>)
   95584:	4610      	mov	r0, r2
   95586:	4798      	blx	r3
   95588:	4603      	mov	r3, r0
   9558a:	461a      	mov	r2, r3
   9558c:	4b26      	ldr	r3, [pc, #152]	; (95628 <Cl_Iso_Senddata+0x5a8>)
   9558e:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   95590:	1d3b      	adds	r3, r7, #4
   95592:	4619      	mov	r1, r3
   95594:	200f      	movs	r0, #15
   95596:	4b14      	ldr	r3, [pc, #80]	; (955e8 <Cl_Iso_Senddata+0x568>)
   95598:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9559a:	88bb      	ldrh	r3, [r7, #4]
   9559c:	461a      	mov	r2, r3
   9559e:	4b13      	ldr	r3, [pc, #76]	; (955ec <Cl_Iso_Senddata+0x56c>)
   955a0:	4610      	mov	r0, r2
   955a2:	4798      	blx	r3
   955a4:	4c12      	ldr	r4, [pc, #72]	; (955f0 <Cl_Iso_Senddata+0x570>)
   955a6:	a30c      	add	r3, pc, #48	; (adr r3, 955d8 <Cl_Iso_Senddata+0x558>)
   955a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   955ac:	47a0      	blx	r4
   955ae:	4603      	mov	r3, r0
   955b0:	460c      	mov	r4, r1
   955b2:	4619      	mov	r1, r3
   955b4:	4622      	mov	r2, r4
   955b6:	4b0f      	ldr	r3, [pc, #60]	; (955f4 <Cl_Iso_Senddata+0x574>)
   955b8:	4608      	mov	r0, r1
   955ba:	4611      	mov	r1, r2
   955bc:	4798      	blx	r3
   955be:	4603      	mov	r3, r0
   955c0:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   955c2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
   955c6:	4618      	mov	r0, r3
   955c8:	4b19      	ldr	r3, [pc, #100]	; (95630 <Cl_Iso_Senddata+0x5b0>)
   955ca:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   955cc:	4b19      	ldr	r3, [pc, #100]	; (95634 <Cl_Iso_Senddata+0x5b4>)
   955ce:	681a      	ldr	r2, [r3, #0]
   955d0:	4b0b      	ldr	r3, [pc, #44]	; (95600 <Cl_Iso_Senddata+0x580>)
   955d2:	e031      	b.n	95638 <Cl_Iso_Senddata+0x5b8>
   955d4:	f3af 8000 	nop.w
   955d8:	58e21965 	.word	0x58e21965
   955dc:	3fe9b717 	.word	0x3fe9b717
   955e0:	20071af0 	.word	0x20071af0
   955e4:	000a6969 	.word	0x000a6969
   955e8:	0008e6a1 	.word	0x0008e6a1
   955ec:	000a5c45 	.word	0x000a5c45
   955f0:	000a5d11 	.word	0x000a5d11
   955f4:	000a6295 	.word	0x000a6295
   955f8:	000840b5 	.word	0x000840b5
   955fc:	20071af8 	.word	0x20071af8
   95600:	000a6591 	.word	0x000a6591
   95604:	40a00000 	.word	0x40a00000
   95608:	20072160 	.word	0x20072160
   9560c:	000a6381 	.word	0x000a6381
   95610:	000a66f9 	.word	0x000a66f9
   95614:	40c00000 	.word	0x40c00000
   95618:	00084235 	.word	0x00084235
   9561c:	20071afc 	.word	0x20071afc
   95620:	20071774 	.word	0x20071774
   95624:	000843b9 	.word	0x000843b9
   95628:	20071b00 	.word	0x20071b00
   9562c:	20071778 	.word	0x20071778
   95630:	000844c9 	.word	0x000844c9
   95634:	20071b04 	.word	0x20071b04
   95638:	496e      	ldr	r1, [pc, #440]	; (957f4 <Cl_Iso_Senddata+0x774>)
   9563a:	4610      	mov	r0, r2
   9563c:	4798      	blx	r3
   9563e:	4603      	mov	r3, r0
   95640:	4618      	mov	r0, r3
   95642:	4b6d      	ldr	r3, [pc, #436]	; (957f8 <Cl_Iso_Senddata+0x778>)
   95644:	681a      	ldr	r2, [r3, #0]
   95646:	4b6d      	ldr	r3, [pc, #436]	; (957fc <Cl_Iso_Senddata+0x77c>)
   95648:	4611      	mov	r1, r2
   9564a:	4798      	blx	r3
   9564c:	4603      	mov	r3, r0
   9564e:	461a      	mov	r2, r3
   95650:	4b6b      	ldr	r3, [pc, #428]	; (95800 <Cl_Iso_Senddata+0x780>)
   95652:	496c      	ldr	r1, [pc, #432]	; (95804 <Cl_Iso_Senddata+0x784>)
   95654:	4610      	mov	r0, r2
   95656:	4798      	blx	r3
   95658:	4603      	mov	r3, r0
   9565a:	461a      	mov	r2, r3
   9565c:	4b6a      	ldr	r3, [pc, #424]	; (95808 <Cl_Iso_Senddata+0x788>)
   9565e:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   95660:	4b6a      	ldr	r3, [pc, #424]	; (9580c <Cl_Iso_Senddata+0x78c>)
   95662:	681a      	ldr	r2, [r3, #0]
   95664:	4b6a      	ldr	r3, [pc, #424]	; (95810 <Cl_Iso_Senddata+0x790>)
   95666:	6819      	ldr	r1, [r3, #0]
   95668:	4b64      	ldr	r3, [pc, #400]	; (957fc <Cl_Iso_Senddata+0x77c>)
   9566a:	4610      	mov	r0, r2
   9566c:	4798      	blx	r3
   9566e:	4603      	mov	r3, r0
   95670:	461c      	mov	r4, r3
   95672:	4b68      	ldr	r3, [pc, #416]	; (95814 <Cl_Iso_Senddata+0x794>)
   95674:	681a      	ldr	r2, [r3, #0]
   95676:	4b64      	ldr	r3, [pc, #400]	; (95808 <Cl_Iso_Senddata+0x788>)
   95678:	6819      	ldr	r1, [r3, #0]
   9567a:	4b60      	ldr	r3, [pc, #384]	; (957fc <Cl_Iso_Senddata+0x77c>)
   9567c:	4610      	mov	r0, r2
   9567e:	4798      	blx	r3
   95680:	4603      	mov	r3, r0
   95682:	461a      	mov	r2, r3
   95684:	4b64      	ldr	r3, [pc, #400]	; (95818 <Cl_Iso_Senddata+0x798>)
   95686:	4611      	mov	r1, r2
   95688:	4620      	mov	r0, r4
   9568a:	4798      	blx	r3
   9568c:	4603      	mov	r3, r0
   9568e:	461a      	mov	r2, r3
   95690:	4b5b      	ldr	r3, [pc, #364]	; (95800 <Cl_Iso_Senddata+0x780>)
   95692:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   95696:	4610      	mov	r0, r2
   95698:	4798      	blx	r3
   9569a:	4603      	mov	r3, r0
   9569c:	461a      	mov	r2, r3
   9569e:	4b5e      	ldr	r3, [pc, #376]	; (95818 <Cl_Iso_Senddata+0x798>)
   956a0:	495e      	ldr	r1, [pc, #376]	; (9581c <Cl_Iso_Senddata+0x79c>)
   956a2:	4610      	mov	r0, r2
   956a4:	4798      	blx	r3
   956a6:	4603      	mov	r3, r0
   956a8:	461a      	mov	r2, r3
   956aa:	4b5d      	ldr	r3, [pc, #372]	; (95820 <Cl_Iso_Senddata+0x7a0>)
   956ac:	4610      	mov	r0, r2
   956ae:	4798      	blx	r3
   956b0:	4603      	mov	r3, r0
   956b2:	607b      	str	r3, [r7, #4]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   956b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956b8:	1c5a      	adds	r2, r3, #1
   956ba:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   956be:	793a      	ldrb	r2, [r7, #4]
   956c0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   956c4:	440b      	add	r3, r1
   956c6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   956ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956ce:	1c5a      	adds	r2, r3, #1
   956d0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   956d4:	797a      	ldrb	r2, [r7, #5]
   956d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   956da:	440b      	add	r3, r1
   956dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   956e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956e4:	1c5a      	adds	r2, r3, #1
   956e6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   956ea:	79ba      	ldrb	r2, [r7, #6]
   956ec:	f107 0148 	add.w	r1, r7, #72	; 0x48
   956f0:	440b      	add	r3, r1
   956f2:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   956f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956fa:	1c5a      	adds	r2, r3, #1
   956fc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95700:	79fa      	ldrb	r2, [r7, #7]
   95702:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95706:	440b      	add	r3, r1
   95708:	f803 2c3c 	strb.w	r2, [r3, #-60]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
			tempdata.word = ufRemoved ;
   9570c:	4b45      	ldr	r3, [pc, #276]	; (95824 <Cl_Iso_Senddata+0x7a4>)
   9570e:	681a      	ldr	r2, [r3, #0]
   95710:	4b43      	ldr	r3, [pc, #268]	; (95820 <Cl_Iso_Senddata+0x7a0>)
   95712:	4610      	mov	r0, r2
   95714:	4798      	blx	r3
   95716:	4603      	mov	r3, r0
   95718:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   9571a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9571e:	1c5a      	adds	r2, r3, #1
   95720:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95724:	793a      	ldrb	r2, [r7, #4]
   95726:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9572a:	440b      	add	r3, r1
   9572c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   95730:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95734:	1c5a      	adds	r2, r3, #1
   95736:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9573a:	797a      	ldrb	r2, [r7, #5]
   9573c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95740:	440b      	add	r3, r1
   95742:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   95746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9574a:	1c5a      	adds	r2, r3, #1
   9574c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95750:	79ba      	ldrb	r2, [r7, #6]
   95752:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95756:	440b      	add	r3, r1
   95758:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   9575c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95760:	1c5a      	adds	r2, r3, #1
   95762:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95766:	79fa      	ldrb	r2, [r7, #7]
   95768:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9576c:	440b      	add	r3, r1
   9576e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			tempdata.word = Treatdata[ID_ufrate] ;
   95772:	4b2d      	ldr	r3, [pc, #180]	; (95828 <Cl_Iso_Senddata+0x7a8>)
   95774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   95776:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   95778:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9577c:	1c5a      	adds	r2, r3, #1
   9577e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95782:	793a      	ldrb	r2, [r7, #4]
   95784:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95788:	440b      	add	r3, r1
   9578a:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9578e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95792:	1c5a      	adds	r2, r3, #1
   95794:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95798:	797a      	ldrb	r2, [r7, #5]
   9579a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9579e:	440b      	add	r3, r1
   957a0:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   957a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   957a8:	1c5a      	adds	r2, r3, #1
   957aa:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   957ae:	79ba      	ldrb	r2, [r7, #6]
   957b0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   957b4:	440b      	add	r3, r1
   957b6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   957ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   957be:	1c5a      	adds	r2, r3, #1
   957c0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   957c4:	79fa      	ldrb	r2, [r7, #7]
   957c6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   957ca:	440b      	add	r3, r1
   957cc:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   957d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   957d4:	f107 030c 	add.w	r3, r7, #12
   957d8:	4619      	mov	r1, r3
   957da:	202a      	movs	r0, #42	; 0x2a
   957dc:	4b13      	ldr	r3, [pc, #76]	; (9582c <Cl_Iso_Senddata+0x7ac>)
   957de:	4798      	blx	r3
   957e0:	4603      	mov	r3, r0
   957e2:	461a      	mov	r2, r3
   957e4:	4b12      	ldr	r3, [pc, #72]	; (95830 <Cl_Iso_Senddata+0x7b0>)
   957e6:	701a      	strb	r2, [r3, #0]
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   957e8:	2300      	movs	r3, #0
	
	
}
   957ea:	4618      	mov	r0, r3
   957ec:	374c      	adds	r7, #76	; 0x4c
   957ee:	46bd      	mov	sp, r7
   957f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   957f2:	bf00      	nop
   957f4:	40a00000 	.word	0x40a00000
   957f8:	2007177c 	.word	0x2007177c
   957fc:	000a6381 	.word	0x000a6381
   95800:	000a66f9 	.word	0x000a66f9
   95804:	40c00000 	.word	0x40c00000
   95808:	20071b04 	.word	0x20071b04
   9580c:	20071af8 	.word	0x20071af8
   95810:	20071afc 	.word	0x20071afc
   95814:	20071b00 	.word	0x20071b00
   95818:	000a637d 	.word	0x000a637d
   9581c:	41c80000 	.word	0x41c80000
   95820:	000a6969 	.word	0x000a6969
   95824:	20071b14 	.word	0x20071b14
   95828:	20072654 	.word	0x20072654
   9582c:	0009b805 	.word	0x0009b805
   95830:	20071ae6 	.word	0x20071ae6

00095834 <Cl_Iso_UpdateTimeInfo>:

Cl_ReturnCodeType Cl_Iso_UpdateTimeInfo(void)
{
   95834:	b580      	push	{r7, lr}
   95836:	b084      	sub	sp, #16
   95838:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   9583a:	2304      	movs	r3, #4
   9583c:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9583e:	2351      	movs	r3, #81	; 0x51
   95840:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   95842:	1d3b      	adds	r3, r7, #4
   95844:	2200      	movs	r2, #0
   95846:	601a      	str	r2, [r3, #0]
   95848:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9584c:	230a      	movs	r3, #10
   9584e:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)ISOUF_DATA;
   95850:	230c      	movs	r3, #12
   95852:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)1;
   95854:	2301      	movs	r3, #1
   95856:	717b      	strb	r3, [r7, #5]

	
	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   95858:	1d39      	adds	r1, r7, #4
   9585a:	7bbb      	ldrb	r3, [r7, #14]
   9585c:	2202      	movs	r2, #2
   9585e:	4618      	mov	r0, r3
   95860:	4b04      	ldr	r3, [pc, #16]	; (95874 <Cl_Iso_UpdateTimeInfo+0x40>)
   95862:	4798      	blx	r3
   95864:	4603      	mov	r3, r0
   95866:	73fb      	strb	r3, [r7, #15]
	return CL_OK;
   95868:	2300      	movs	r3, #0
	
}
   9586a:	4618      	mov	r0, r3
   9586c:	3710      	adds	r7, #16
   9586e:	46bd      	mov	sp, r7
   95870:	bd80      	pop	{r7, pc}
   95872:	bf00      	nop
   95874:	0009b805 	.word	0x0009b805

00095878 <cl_checkforblooddetection>:

Cl_ReturnCodeType cl_checkforblooddetection(){
   95878:	b580      	push	{r7, lr}
   9587a:	b082      	sub	sp, #8
   9587c:	af00      	add	r7, sp, #0
	
	Cl_Uint16Type bldtemp = 0;
   9587e:	2300      	movs	r3, #0
   95880:	80fb      	strh	r3, [r7, #6]
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &bldtemp);
   95882:	1dbb      	adds	r3, r7, #6
   95884:	4619      	mov	r1, r3
   95886:	200a      	movs	r0, #10
   95888:	4b05      	ldr	r3, [pc, #20]	; (958a0 <cl_checkforblooddetection+0x28>)
   9588a:	4798      	blx	r3
	
	if(bldtemp == 1){
   9588c:	88fb      	ldrh	r3, [r7, #6]
   9588e:	2b01      	cmp	r3, #1
   95890:	d101      	bne.n	95896 <cl_checkforblooddetection+0x1e>
		return CL_OK;
   95892:	2300      	movs	r3, #0
   95894:	e000      	b.n	95898 <cl_checkforblooddetection+0x20>
	}
	else{
		return CL_OK; // should be CL_REJECTED
   95896:	2300      	movs	r3, #0
	}
	
	
}
   95898:	4618      	mov	r0, r3
   9589a:	3708      	adds	r7, #8
   9589c:	46bd      	mov	sp, r7
   9589e:	bd80      	pop	{r7, pc}
   958a0:	0008e6a1 	.word	0x0008e6a1

000958a4 <cl_isouf_translatemacevent>:

Cl_ReturnCodeType  cl_isouf_translatemacevent(Cl_Mac_EventsType Cl_MacISOufEvt,cl_isouf_events* cl_isouf_event)
{
   958a4:	b480      	push	{r7}
   958a6:	b083      	sub	sp, #12
   958a8:	af00      	add	r7, sp, #0
   958aa:	4603      	mov	r3, r0
   958ac:	6039      	str	r1, [r7, #0]
   958ae:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacISOufEvt)
   958b0:	79fb      	ldrb	r3, [r7, #7]
   958b2:	3b07      	subs	r3, #7
   958b4:	2b57      	cmp	r3, #87	; 0x57
   958b6:	f200 8127 	bhi.w	95b08 <cl_isouf_translatemacevent+0x264>
   958ba:	a201      	add	r2, pc, #4	; (adr r2, 958c0 <cl_isouf_translatemacevent+0x1c>)
   958bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   958c0:	00095a61 	.word	0x00095a61
   958c4:	00095b09 	.word	0x00095b09
   958c8:	00095b09 	.word	0x00095b09
   958cc:	00095a41 	.word	0x00095a41
   958d0:	00095a49 	.word	0x00095a49
   958d4:	00095a39 	.word	0x00095a39
   958d8:	00095a59 	.word	0x00095a59
   958dc:	00095a51 	.word	0x00095a51
   958e0:	00095b09 	.word	0x00095b09
   958e4:	00095b09 	.word	0x00095b09
   958e8:	00095b09 	.word	0x00095b09
   958ec:	00095b09 	.word	0x00095b09
   958f0:	00095b09 	.word	0x00095b09
   958f4:	00095b09 	.word	0x00095b09
   958f8:	00095ab9 	.word	0x00095ab9
   958fc:	00095b09 	.word	0x00095b09
   95900:	00095a69 	.word	0x00095a69
   95904:	00095b09 	.word	0x00095b09
   95908:	00095b09 	.word	0x00095b09
   9590c:	00095af9 	.word	0x00095af9
   95910:	00095b01 	.word	0x00095b01
   95914:	00095b09 	.word	0x00095b09
   95918:	00095b09 	.word	0x00095b09
   9591c:	00095b09 	.word	0x00095b09
   95920:	00095b09 	.word	0x00095b09
   95924:	00095b09 	.word	0x00095b09
   95928:	00095b09 	.word	0x00095b09
   9592c:	00095aa9 	.word	0x00095aa9
   95930:	00095ab1 	.word	0x00095ab1
   95934:	00095b09 	.word	0x00095b09
   95938:	00095b09 	.word	0x00095b09
   9593c:	00095ae1 	.word	0x00095ae1
   95940:	00095ac1 	.word	0x00095ac1
   95944:	00095ac9 	.word	0x00095ac9
   95948:	00095a31 	.word	0x00095a31
   9594c:	00095b09 	.word	0x00095b09
   95950:	00095b09 	.word	0x00095b09
   95954:	00095b09 	.word	0x00095b09
   95958:	00095aa1 	.word	0x00095aa1
   9595c:	00095a99 	.word	0x00095a99
   95960:	00095b09 	.word	0x00095b09
   95964:	00095b09 	.word	0x00095b09
   95968:	00095b09 	.word	0x00095b09
   9596c:	00095b09 	.word	0x00095b09
   95970:	00095b09 	.word	0x00095b09
   95974:	00095b09 	.word	0x00095b09
   95978:	00095b09 	.word	0x00095b09
   9597c:	00095b09 	.word	0x00095b09
   95980:	00095b09 	.word	0x00095b09
   95984:	00095a71 	.word	0x00095a71
   95988:	00095b09 	.word	0x00095b09
   9598c:	00095a79 	.word	0x00095a79
   95990:	00095a81 	.word	0x00095a81
   95994:	00095a89 	.word	0x00095a89
   95998:	00095a91 	.word	0x00095a91
   9599c:	00095b09 	.word	0x00095b09
   959a0:	00095b09 	.word	0x00095b09
   959a4:	00095b09 	.word	0x00095b09
   959a8:	00095b09 	.word	0x00095b09
   959ac:	00095b09 	.word	0x00095b09
   959b0:	00095b09 	.word	0x00095b09
   959b4:	00095b09 	.word	0x00095b09
   959b8:	00095b09 	.word	0x00095b09
   959bc:	00095b09 	.word	0x00095b09
   959c0:	00095b09 	.word	0x00095b09
   959c4:	00095b09 	.word	0x00095b09
   959c8:	00095b09 	.word	0x00095b09
   959cc:	00095b09 	.word	0x00095b09
   959d0:	00095b09 	.word	0x00095b09
   959d4:	00095b09 	.word	0x00095b09
   959d8:	00095b09 	.word	0x00095b09
   959dc:	00095b09 	.word	0x00095b09
   959e0:	00095b09 	.word	0x00095b09
   959e4:	00095b09 	.word	0x00095b09
   959e8:	00095b09 	.word	0x00095b09
   959ec:	00095b09 	.word	0x00095b09
   959f0:	00095b09 	.word	0x00095b09
   959f4:	00095b09 	.word	0x00095b09
   959f8:	00095b09 	.word	0x00095b09
   959fc:	00095b09 	.word	0x00095b09
   95a00:	00095b09 	.word	0x00095b09
   95a04:	00095a21 	.word	0x00095a21
   95a08:	00095a29 	.word	0x00095a29
   95a0c:	00095ad1 	.word	0x00095ad1
   95a10:	00095ae9 	.word	0x00095ae9
   95a14:	00095af1 	.word	0x00095af1
   95a18:	00095b09 	.word	0x00095b09
   95a1c:	00095ad9 	.word	0x00095ad9
	{
		
		case EVT_CONSOLE_COMMAND_ISOUF_START :
		*cl_isouf_event = EVENT_ISOUF_START;
   95a20:	683b      	ldr	r3, [r7, #0]
   95a22:	2216      	movs	r2, #22
   95a24:	701a      	strb	r2, [r3, #0]
		break;
   95a26:	e070      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_ISOUF_STOP :
		*cl_isouf_event = EVENT_ISOUF_STOP;
   95a28:	683b      	ldr	r3, [r7, #0]
   95a2a:	2218      	movs	r2, #24
   95a2c:	701a      	strb	r2, [r3, #0]
		break;
   95a2e:	e06c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_isouf_event = EVENT_ISOUF_CLR_ALARM;
   95a30:	683b      	ldr	r3, [r7, #0]
   95a32:	2201      	movs	r2, #1
   95a34:	701a      	strb	r2, [r3, #0]
		break;
   95a36:	e068      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE;
   95a38:	683b      	ldr	r3, [r7, #0]
   95a3a:	2210      	movs	r2, #16
   95a3c:	701a      	strb	r2, [r3, #0]
		break;
   95a3e:	e064      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_ON;
   95a40:	683b      	ldr	r3, [r7, #0]
   95a42:	2211      	movs	r2, #17
   95a44:	701a      	strb	r2, [r3, #0]
		break;
   95a46:	e060      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF;
   95a48:	683b      	ldr	r3, [r7, #0]
   95a4a:	2212      	movs	r2, #18
   95a4c:	701a      	strb	r2, [r3, #0]
		break;
   95a4e:	e05c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_isouf_event = EVENT_ISOUF_GET_DATA;
   95a50:	683b      	ldr	r3, [r7, #0]
   95a52:	2202      	movs	r2, #2
   95a54:	701a      	strb	r2, [r3, #0]
		break;
   95a56:	e058      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_isouf_event = EVENT_ISOUF_SET_DATA;
   95a58:	683b      	ldr	r3, [r7, #0]
   95a5a:	2203      	movs	r2, #3
   95a5c:	701a      	strb	r2, [r3, #0]
		break;
   95a5e:	e054      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_isouf_event= EVENT_ISOUF_START_RINSE;
   95a60:	683b      	ldr	r3, [r7, #0]
   95a62:	2204      	movs	r2, #4
   95a64:	701a      	strb	r2, [r3, #0]
		break;
   95a66:	e050      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_isouf_event= EVENT_ISOUF_START_DIALYSIS;
   95a68:	683b      	ldr	r3, [r7, #0]
   95a6a:	2205      	movs	r2, #5
   95a6c:	701a      	strb	r2, [r3, #0]
		break;
   95a6e:	e04c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_isouf_event =   EVENT_ISOUF_TICK_50MS;
   95a70:	683b      	ldr	r3, [r7, #0]
   95a72:	2207      	movs	r2, #7
   95a74:	701a      	strb	r2, [r3, #0]
		break;
   95a76:	e048      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_500M:
		*cl_isouf_event = EVENT_ISOUF_TICK_500MS;
   95a78:	683b      	ldr	r3, [r7, #0]
   95a7a:	2208      	movs	r2, #8
   95a7c:	701a      	strb	r2, [r3, #0]
		break;
   95a7e:	e044      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_isouf_event =   EVENT_ISOUF_TICK_SECOND;
   95a80:	683b      	ldr	r3, [r7, #0]
   95a82:	2209      	movs	r2, #9
   95a84:	701a      	strb	r2, [r3, #0]
		break;
   95a86:	e040      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_isouf_event =   EVENT_ISOUF_TICK_MINUTE;
   95a88:	683b      	ldr	r3, [r7, #0]
   95a8a:	220a      	movs	r2, #10
   95a8c:	701a      	strb	r2, [r3, #0]
		break;
   95a8e:	e03c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_isouf_event =   EVENT_ISOUF_TICK_HOUR;
   95a90:	683b      	ldr	r3, [r7, #0]
   95a92:	220b      	movs	r2, #11
   95a94:	701a      	strb	r2, [r3, #0]
		break;
   95a96:	e038      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALARM;
   95a98:	683b      	ldr	r3, [r7, #0]
   95a9a:	220c      	movs	r2, #12
   95a9c:	701a      	strb	r2, [r3, #0]
		break;
   95a9e:	e034      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_ALERT_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALERT;
   95aa0:	683b      	ldr	r3, [r7, #0]
   95aa2:	220d      	movs	r2, #13
   95aa4:	701a      	strb	r2, [r3, #0]
		break;
   95aa6:	e030      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_START_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   95aa8:	683b      	ldr	r3, [r7, #0]
   95aaa:	220f      	movs	r2, #15
   95aac:	701a      	strb	r2, [r3, #0]
		break;
   95aae:	e02c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   95ab0:	683b      	ldr	r3, [r7, #0]
   95ab2:	220f      	movs	r2, #15
   95ab4:	701a      	strb	r2, [r3, #0]
		break;
   95ab6:	e028      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_isouf_event =   EVENT_ISOUF_HEP_RATE;
   95ab8:	683b      	ldr	r3, [r7, #0]
   95aba:	2213      	movs	r2, #19
   95abc:	701a      	strb	r2, [r3, #0]
		break;
   95abe:	e024      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_isouf_event =   EVENT_ISOUF_HEP_ON;
   95ac0:	683b      	ldr	r3, [r7, #0]
   95ac2:	2214      	movs	r2, #20
   95ac4:	701a      	strb	r2, [r3, #0]
		break;
   95ac6:	e020      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_isouf_event =   EVENT_ISOUF_HEP_OFF;
   95ac8:	683b      	ldr	r3, [r7, #0]
   95aca:	2215      	movs	r2, #21
   95acc:	701a      	strb	r2, [r3, #0]
		
		break;
   95ace:	e01c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case MACREQ_ISOUF_COMPLETED:
		*cl_isouf_event =   CL_ISOUF_STATE_POST_COMPLETION;
   95ad0:	683b      	ldr	r3, [r7, #0]
   95ad2:	2207      	movs	r2, #7
   95ad4:	701a      	strb	r2, [r3, #0]
		break;
   95ad6:	e018      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case MACREQ_POST_DIALYSIS_ISOUF_REQ:
		*cl_isouf_event =   EVENT_ISOUF_START;
   95ad8:	683b      	ldr	r3, [r7, #0]
   95ada:	2216      	movs	r2, #22
   95adc:	701a      	strb	r2, [r3, #0]
		break;
   95ade:	e014      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_isouf_event = EVENT_ISOUF_HEAPARIN_BOLUS;
   95ae0:	683b      	ldr	r3, [r7, #0]
   95ae2:	221b      	movs	r2, #27
   95ae4:	701a      	strb	r2, [r3, #0]
		break;
   95ae6:	e010      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   95ae8:	683b      	ldr	r3, [r7, #0]
   95aea:	225b      	movs	r2, #91	; 0x5b
   95aec:	701a      	strb	r2, [r3, #0]
		break;
   95aee:	e00c      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   95af0:	683b      	ldr	r3, [r7, #0]
   95af2:	225c      	movs	r2, #92	; 0x5c
   95af4:	701a      	strb	r2, [r3, #0]
		break;
   95af6:	e008      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_ON;
   95af8:	683b      	ldr	r3, [r7, #0]
   95afa:	221c      	movs	r2, #28
   95afc:	701a      	strb	r2, [r3, #0]
		break;
   95afe:	e004      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_OFF;
   95b00:	683b      	ldr	r3, [r7, #0]
   95b02:	221d      	movs	r2, #29
   95b04:	701a      	strb	r2, [r3, #0]
		break;
   95b06:	e000      	b.n	95b0a <cl_isouf_translatemacevent+0x266>
		default:
		break;
   95b08:	bf00      	nop
	}
	return CL_OK;
   95b0a:	2300      	movs	r3, #0
}
   95b0c:	4618      	mov	r0, r3
   95b0e:	370c      	adds	r7, #12
   95b10:	46bd      	mov	sp, r7
   95b12:	bc80      	pop	{r7}
   95b14:	4770      	bx	lr
   95b16:	bf00      	nop

00095b18 <cl_isoufcompleted>:


Cl_ReturnCodeType cl_isoufcompleted(){
   95b18:	b580      	push	{r7, lr}
   95b1a:	af00      	add	r7, sp, #0
	
	// stop uf pump
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   95b1c:	2100      	movs	r1, #0
   95b1e:	2004      	movs	r0, #4
   95b20:	4b07      	ldr	r3, [pc, #28]	; (95b40 <cl_isoufcompleted+0x28>)
   95b22:	4798      	blx	r3
	
	cl_isouf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   95b24:	2004      	movs	r0, #4
   95b26:	4b07      	ldr	r3, [pc, #28]	; (95b44 <cl_isoufcompleted+0x2c>)
   95b28:	4798      	blx	r3
   95b2a:	4603      	mov	r3, r0
   95b2c:	461a      	mov	r2, r3
   95b2e:	4b06      	ldr	r3, [pc, #24]	; (95b48 <cl_isoufcompleted+0x30>)
   95b30:	701a      	strb	r2, [r3, #0]
	isouf = false;
   95b32:	4b06      	ldr	r3, [pc, #24]	; (95b4c <cl_isoufcompleted+0x34>)
   95b34:	2200      	movs	r2, #0
   95b36:	701a      	strb	r2, [r3, #0]
	return CL_OK;
   95b38:	2300      	movs	r3, #0
}
   95b3a:	4618      	mov	r0, r3
   95b3c:	bd80      	pop	{r7, pc}
   95b3e:	bf00      	nop
   95b40:	00095bbd 	.word	0x00095bbd
   95b44:	00099a45 	.word	0x00099a45
   95b48:	20071ae6 	.word	0x20071ae6
   95b4c:	20071aec 	.word	0x20071aec

00095b50 <Cl_isouf_init>:
return CL_OK;

}

 Cl_ReturnCodeType Cl_isouf_init(void)
 {
   95b50:	b480      	push	{r7}
   95b52:	af00      	add	r7, sp, #0
	 
	 cl_isouf_state = CL_ISOUF_STATE_IDLE;
   95b54:	4b05      	ldr	r3, [pc, #20]	; (95b6c <Cl_isouf_init+0x1c>)
   95b56:	2200      	movs	r2, #0
   95b58:	701a      	strb	r2, [r3, #0]

	 //cl_isouf_event = EVENT_NULL_EVENT;
	 
	 Cl_ISOufTotalSecondscounter=0 ;
   95b5a:	4b05      	ldr	r3, [pc, #20]	; (95b70 <Cl_isouf_init+0x20>)
   95b5c:	2200      	movs	r2, #0
   95b5e:	601a      	str	r2, [r3, #0]
	 return CL_OK;
   95b60:	2300      	movs	r3, #0
 }
   95b62:	4618      	mov	r0, r3
   95b64:	46bd      	mov	sp, r7
   95b66:	bc80      	pop	{r7}
   95b68:	4770      	bx	lr
   95b6a:	bf00      	nop
   95b6c:	20071ae5 	.word	0x20071ae5
   95b70:	20071ae8 	.word	0x20071ae8

00095b74 <cl_ufpumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   95b74:	b480      	push	{r7}
   95b76:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   95b78:	4b03      	ldr	r3, [pc, #12]	; (95b88 <cl_ufpumpFeedback_start+0x14>)
   95b7a:	2201      	movs	r2, #1
   95b7c:	701a      	strb	r2, [r3, #0]
	return 0;
   95b7e:	2300      	movs	r3, #0
}
   95b80:	4618      	mov	r0, r3
   95b82:	46bd      	mov	sp, r7
   95b84:	bc80      	pop	{r7}
   95b86:	4770      	bx	lr
   95b88:	20071b0a 	.word	0x20071b0a

00095b8c <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   95b8c:	b480      	push	{r7}
   95b8e:	af00      	add	r7, sp, #0
	
	return 0;
   95b90:	2300      	movs	r3, #0
}
   95b92:	4618      	mov	r0, r3
   95b94:	46bd      	mov	sp, r7
   95b96:	bc80      	pop	{r7}
   95b98:	4770      	bx	lr
   95b9a:	bf00      	nop

00095b9c <cl_ufpumpFeedback_set_expected_period>:
{
	*pdelta = uf_period - uf_expected_period;
	return 0;
}
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   95b9c:	b480      	push	{r7}
   95b9e:	b083      	sub	sp, #12
   95ba0:	af00      	add	r7, sp, #0
   95ba2:	4603      	mov	r3, r0
   95ba4:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   95ba6:	88fa      	ldrh	r2, [r7, #6]
   95ba8:	4b03      	ldr	r3, [pc, #12]	; (95bb8 <cl_ufpumpFeedback_set_expected_period+0x1c>)
   95baa:	801a      	strh	r2, [r3, #0]
	return 0;
   95bac:	2300      	movs	r3, #0
}
   95bae:	4618      	mov	r0, r3
   95bb0:	370c      	adds	r7, #12
   95bb2:	46bd      	mov	sp, r7
   95bb4:	bc80      	pop	{r7}
   95bb6:	4770      	bx	lr
   95bb8:	20071b08 	.word	0x20071b08

00095bbc <cl_uf_controller>:
float ufRemoved =0;
int ufTimeElapsed = 0;
int minCounter = 0 ;
extern bool isouf;
Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data )
{
   95bbc:	b580      	push	{r7, lr}
   95bbe:	b08e      	sub	sp, #56	; 0x38
   95bc0:	af00      	add	r7, sp, #0
   95bc2:	4603      	mov	r3, r0
   95bc4:	6039      	str	r1, [r7, #0]
   95bc6:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   95bc8:	2300      	movs	r3, #0
   95bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   95bce:	2300      	movs	r3, #0
   95bd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	Cl_Uint16Type uf_delta_value = 0 ;
   95bd4:	2300      	movs	r3, #0
   95bd6:	86bb      	strh	r3, [r7, #52]	; 0x34
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   95bd8:	2300      	movs	r3, #0
   95bda:	633b      	str	r3, [r7, #48]	; 0x30
	Cl_Uint32Type temptime = 0;
   95bdc:	2300      	movs	r3, #0
   95bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	switch(uf_state)
   95be0:	4b9c      	ldr	r3, [pc, #624]	; (95e54 <cl_uf_controller+0x298>)
   95be2:	781b      	ldrb	r3, [r3, #0]
   95be4:	2b04      	cmp	r3, #4
   95be6:	f200 8274 	bhi.w	960d2 <cl_uf_controller+0x516>
   95bea:	a201      	add	r2, pc, #4	; (adr r2, 95bf0 <cl_uf_controller+0x34>)
   95bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95bf0:	00095c05 	.word	0x00095c05
   95bf4:	00095dcf 	.word	0x00095dcf
   95bf8:	00095f9b 	.word	0x00095f9b
   95bfc:	00096087 	.word	0x00096087
   95c00:	000960d3 	.word	0x000960d3
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   95c04:	79fb      	ldrb	r3, [r7, #7]
   95c06:	2b02      	cmp	r3, #2
   95c08:	d014      	beq.n	95c34 <cl_uf_controller+0x78>
   95c0a:	2b08      	cmp	r3, #8
   95c0c:	f000 808d 	beq.w	95d2a <cl_uf_controller+0x16e>
   95c10:	2b01      	cmp	r3, #1
   95c12:	d000      	beq.n	95c16 <cl_uf_controller+0x5a>
					}
					
				
					break;
					
					default:break;
   95c14:	e0da      	b.n	95dcc <cl_uf_controller+0x210>
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					
					cl_uf_rate = data;
   95c16:	683b      	ldr	r3, [r7, #0]
   95c18:	4a8f      	ldr	r2, [pc, #572]	; (95e58 <cl_uf_controller+0x29c>)
   95c1a:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   95c1c:	4b8e      	ldr	r3, [pc, #568]	; (95e58 <cl_uf_controller+0x29c>)
   95c1e:	681b      	ldr	r3, [r3, #0]
   95c20:	b29a      	uxth	r2, r3
   95c22:	4b8e      	ldr	r3, [pc, #568]	; (95e5c <cl_uf_controller+0x2a0>)
   95c24:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   95c26:	4b8d      	ldr	r3, [pc, #564]	; (95e5c <cl_uf_controller+0x2a0>)
   95c28:	881b      	ldrh	r3, [r3, #0]
   95c2a:	4619      	mov	r1, r3
   95c2c:	2004      	movs	r0, #4
   95c2e:	4b8c      	ldr	r3, [pc, #560]	; (95e60 <cl_uf_controller+0x2a4>)
   95c30:	4798      	blx	r3
					break;
   95c32:	e0cb      	b.n	95dcc <cl_uf_controller+0x210>
					case CL_UF_EVENT_START:
				
				if(Cl_MacState == MAC_DIALYSIS)
   95c34:	4b8b      	ldr	r3, [pc, #556]	; (95e64 <cl_uf_controller+0x2a8>)
   95c36:	781b      	ldrb	r3, [r3, #0]
   95c38:	2b0f      	cmp	r3, #15
   95c3a:	d164      	bne.n	95d06 <cl_uf_controller+0x14a>
				{
					
					sv_cntrl_setpumpspeed(UFPUMP,12000);
   95c3c:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   95c40:	2004      	movs	r0, #4
   95c42:	4b87      	ldr	r3, [pc, #540]	; (95e60 <cl_uf_controller+0x2a4>)
   95c44:	4798      	blx	r3
					cl_wait(100);
   95c46:	2064      	movs	r0, #100	; 0x64
   95c48:	4b87      	ldr	r3, [pc, #540]	; (95e68 <cl_uf_controller+0x2ac>)
   95c4a:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,8000);
   95c4c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   95c50:	2004      	movs	r0, #4
   95c52:	4b83      	ldr	r3, [pc, #524]	; (95e60 <cl_uf_controller+0x2a4>)
   95c54:	4798      	blx	r3
					cl_wait(100);
   95c56:	2064      	movs	r0, #100	; 0x64
   95c58:	4b83      	ldr	r3, [pc, #524]	; (95e68 <cl_uf_controller+0x2ac>)
   95c5a:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,6000);
   95c5c:	f241 7170 	movw	r1, #6000	; 0x1770
   95c60:	2004      	movs	r0, #4
   95c62:	4b7f      	ldr	r3, [pc, #508]	; (95e60 <cl_uf_controller+0x2a4>)
   95c64:	4798      	blx	r3
					cl_wait(100);
   95c66:	2064      	movs	r0, #100	; 0x64
   95c68:	4b7f      	ldr	r3, [pc, #508]	; (95e68 <cl_uf_controller+0x2ac>)
   95c6a:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,200);
   95c6c:	21c8      	movs	r1, #200	; 0xc8
   95c6e:	2004      	movs	r0, #4
   95c70:	4b7b      	ldr	r3, [pc, #492]	; (95e60 <cl_uf_controller+0x2a4>)
   95c72:	4798      	blx	r3
					cl_wait(100);
   95c74:	2064      	movs	r0, #100	; 0x64
   95c76:	4b7c      	ldr	r3, [pc, #496]	; (95e68 <cl_uf_controller+0x2ac>)
   95c78:	4798      	blx	r3
					
					
					 temp = Treatdata[ID_ufgoal];
   95c7a:	4b7c      	ldr	r3, [pc, #496]	; (95e6c <cl_uf_controller+0x2b0>)
   95c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   95c7e:	633b      	str	r3, [r7, #48]	; 0x30
					
					 temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
   95c80:	4b7a      	ldr	r3, [pc, #488]	; (95e6c <cl_uf_controller+0x2b0>)
   95c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   95c84:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/((temptime)/60);
   95c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   95c88:	4a79      	ldr	r2, [pc, #484]	; (95e70 <cl_uf_controller+0x2b4>)
   95c8a:	fba2 2303 	umull	r2, r3, r2, r3
   95c8e:	095b      	lsrs	r3, r3, #5
   95c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   95c92:	fbb2 f2f3 	udiv	r2, r2, r3
   95c96:	4b77      	ldr	r3, [pc, #476]	; (95e74 <cl_uf_controller+0x2b8>)
   95c98:	4610      	mov	r0, r2
   95c9a:	4798      	blx	r3
   95c9c:	4603      	mov	r3, r0
   95c9e:	62bb      	str	r3, [r7, #40]	; 0x28
					int16_t intufrate =tempUfRate * 10;
   95ca0:	4b75      	ldr	r3, [pc, #468]	; (95e78 <cl_uf_controller+0x2bc>)
   95ca2:	4976      	ldr	r1, [pc, #472]	; (95e7c <cl_uf_controller+0x2c0>)
   95ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   95ca6:	4798      	blx	r3
   95ca8:	4603      	mov	r3, r0
   95caa:	461a      	mov	r2, r3
   95cac:	4b74      	ldr	r3, [pc, #464]	; (95e80 <cl_uf_controller+0x2c4>)
   95cae:	4610      	mov	r0, r2
   95cb0:	4798      	blx	r3
   95cb2:	4603      	mov	r3, r0
   95cb4:	84fb      	strh	r3, [r7, #38]	; 0x26
					
					Cl_Uint32Type calcufrate = tempUfRate * 10;
   95cb6:	4b70      	ldr	r3, [pc, #448]	; (95e78 <cl_uf_controller+0x2bc>)
   95cb8:	4970      	ldr	r1, [pc, #448]	; (95e7c <cl_uf_controller+0x2c0>)
   95cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   95cbc:	4798      	blx	r3
   95cbe:	4603      	mov	r3, r0
   95cc0:	461a      	mov	r2, r3
   95cc2:	4b70      	ldr	r3, [pc, #448]	; (95e84 <cl_uf_controller+0x2c8>)
   95cc4:	4610      	mov	r0, r2
   95cc6:	4798      	blx	r3
   95cc8:	4603      	mov	r3, r0
   95cca:	623b      	str	r3, [r7, #32]
					Treatdata[ID_ufrate] = calcufrate;
   95ccc:	4a67      	ldr	r2, [pc, #412]	; (95e6c <cl_uf_controller+0x2b0>)
   95cce:	6a3b      	ldr	r3, [r7, #32]
   95cd0:	6313      	str	r3, [r2, #48]	; 0x30
					calibrate_uf(intufrate);
   95cd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   95cd6:	4618      	mov	r0, r3
   95cd8:	4b6b      	ldr	r3, [pc, #428]	; (95e88 <cl_uf_controller+0x2cc>)
   95cda:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   95cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   95cde:	2b00      	cmp	r3, #0
   95ce0:	d071      	beq.n	95dc6 <cl_uf_controller+0x20a>
	
					
					sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   95ce2:	4b6a      	ldr	r3, [pc, #424]	; (95e8c <cl_uf_controller+0x2d0>)
   95ce4:	681b      	ldr	r3, [r3, #0]
   95ce6:	4619      	mov	r1, r3
   95ce8:	2004      	movs	r0, #4
   95cea:	4b5d      	ldr	r3, [pc, #372]	; (95e60 <cl_uf_controller+0x2a4>)
   95cec:	4798      	blx	r3
				//	cl_ufpumpFeedback_set_expected_period(uf_final); // not required for now
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95cee:	2004      	movs	r0, #4
   95cf0:	4b67      	ldr	r3, [pc, #412]	; (95e90 <cl_uf_controller+0x2d4>)
   95cf2:	4798      	blx	r3
   95cf4:	4603      	mov	r3, r0
   95cf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   95cfa:	4b66      	ldr	r3, [pc, #408]	; (95e94 <cl_uf_controller+0x2d8>)
   95cfc:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   95cfe:	4b55      	ldr	r3, [pc, #340]	; (95e54 <cl_uf_controller+0x298>)
   95d00:	2201      	movs	r2, #1
   95d02:	701a      	strb	r2, [r3, #0]
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   95d04:	e05f      	b.n	95dc6 <cl_uf_controller+0x20a>
					}
					
				}
					else{
				
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period); // enter pwm data from the lookuop table
   95d06:	4b55      	ldr	r3, [pc, #340]	; (95e5c <cl_uf_controller+0x2a0>)
   95d08:	881b      	ldrh	r3, [r3, #0]
   95d0a:	4619      	mov	r1, r3
   95d0c:	2004      	movs	r0, #4
   95d0e:	4b54      	ldr	r3, [pc, #336]	; (95e60 <cl_uf_controller+0x2a4>)
   95d10:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95d12:	2004      	movs	r0, #4
   95d14:	4b5e      	ldr	r3, [pc, #376]	; (95e90 <cl_uf_controller+0x2d4>)
   95d16:	4798      	blx	r3
   95d18:	4603      	mov	r3, r0
   95d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   95d1e:	4b5d      	ldr	r3, [pc, #372]	; (95e94 <cl_uf_controller+0x2d8>)
   95d20:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   95d22:	4b4c      	ldr	r3, [pc, #304]	; (95e54 <cl_uf_controller+0x298>)
   95d24:	2201      	movs	r2, #1
   95d26:	701a      	strb	r2, [r3, #0]
				
						
					}
					
					break;
   95d28:	e04d      	b.n	95dc6 <cl_uf_controller+0x20a>
					
					case CL_UF_EVENT_RESET:
					
					
					 temp = Treatdata[ID_ufgoal];
   95d2a:	4b50      	ldr	r3, [pc, #320]	; (95e6c <cl_uf_controller+0x2b0>)
   95d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   95d2e:	633b      	str	r3, [r7, #48]	; 0x30
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   95d30:	23f0      	movs	r3, #240	; 0xf0
   95d32:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate2 = temp/((temptime)/60);
   95d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   95d36:	4a4e      	ldr	r2, [pc, #312]	; (95e70 <cl_uf_controller+0x2b4>)
   95d38:	fba2 2303 	umull	r2, r3, r2, r3
   95d3c:	095b      	lsrs	r3, r3, #5
   95d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   95d40:	fbb2 f2f3 	udiv	r2, r2, r3
   95d44:	4b4b      	ldr	r3, [pc, #300]	; (95e74 <cl_uf_controller+0x2b8>)
   95d46:	4610      	mov	r0, r2
   95d48:	4798      	blx	r3
   95d4a:	4603      	mov	r3, r0
   95d4c:	61fb      	str	r3, [r7, #28]
					intufrate2 =tempUfRate2 * 10;
   95d4e:	4b4a      	ldr	r3, [pc, #296]	; (95e78 <cl_uf_controller+0x2bc>)
   95d50:	494a      	ldr	r1, [pc, #296]	; (95e7c <cl_uf_controller+0x2c0>)
   95d52:	69f8      	ldr	r0, [r7, #28]
   95d54:	4798      	blx	r3
   95d56:	4603      	mov	r3, r0
   95d58:	461a      	mov	r2, r3
   95d5a:	4b49      	ldr	r3, [pc, #292]	; (95e80 <cl_uf_controller+0x2c4>)
   95d5c:	4610      	mov	r0, r2
   95d5e:	4798      	blx	r3
   95d60:	4603      	mov	r3, r0
   95d62:	b21a      	sxth	r2, r3
   95d64:	4b4c      	ldr	r3, [pc, #304]	; (95e98 <cl_uf_controller+0x2dc>)
   95d66:	801a      	strh	r2, [r3, #0]
					
					Cl_Uint32Type calcufrate = tempUfRate2 * 10;
   95d68:	4b43      	ldr	r3, [pc, #268]	; (95e78 <cl_uf_controller+0x2bc>)
   95d6a:	4944      	ldr	r1, [pc, #272]	; (95e7c <cl_uf_controller+0x2c0>)
   95d6c:	69f8      	ldr	r0, [r7, #28]
   95d6e:	4798      	blx	r3
   95d70:	4603      	mov	r3, r0
   95d72:	461a      	mov	r2, r3
   95d74:	4b43      	ldr	r3, [pc, #268]	; (95e84 <cl_uf_controller+0x2c8>)
   95d76:	4610      	mov	r0, r2
   95d78:	4798      	blx	r3
   95d7a:	4603      	mov	r3, r0
   95d7c:	61bb      	str	r3, [r7, #24]
					Treatdata[ID_ufrate] = calcufrate;
   95d7e:	4a3b      	ldr	r2, [pc, #236]	; (95e6c <cl_uf_controller+0x2b0>)
   95d80:	69bb      	ldr	r3, [r7, #24]
   95d82:	6313      	str	r3, [r2, #48]	; 0x30
					
					calibrate_uf(intufrate2);
   95d84:	4b44      	ldr	r3, [pc, #272]	; (95e98 <cl_uf_controller+0x2dc>)
   95d86:	f9b3 3000 	ldrsh.w	r3, [r3]
   95d8a:	4618      	mov	r0, r3
   95d8c:	4b3e      	ldr	r3, [pc, #248]	; (95e88 <cl_uf_controller+0x2cc>)
   95d8e:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   95d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   95d92:	2b00      	cmp	r3, #0
   95d94:	d019      	beq.n	95dca <cl_uf_controller+0x20e>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   95d96:	4b3d      	ldr	r3, [pc, #244]	; (95e8c <cl_uf_controller+0x2d0>)
   95d98:	681b      	ldr	r3, [r3, #0]
   95d9a:	4619      	mov	r1, r3
   95d9c:	2004      	movs	r0, #4
   95d9e:	4b30      	ldr	r3, [pc, #192]	; (95e60 <cl_uf_controller+0x2a4>)
   95da0:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   95da2:	4b3a      	ldr	r3, [pc, #232]	; (95e8c <cl_uf_controller+0x2d0>)
   95da4:	681b      	ldr	r3, [r3, #0]
   95da6:	b21b      	sxth	r3, r3
   95da8:	4618      	mov	r0, r3
   95daa:	4b3c      	ldr	r3, [pc, #240]	; (95e9c <cl_uf_controller+0x2e0>)
   95dac:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95dae:	2004      	movs	r0, #4
   95db0:	4b37      	ldr	r3, [pc, #220]	; (95e90 <cl_uf_controller+0x2d4>)
   95db2:	4798      	blx	r3
   95db4:	4603      	mov	r3, r0
   95db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   95dba:	4b36      	ldr	r3, [pc, #216]	; (95e94 <cl_uf_controller+0x2d8>)
   95dbc:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   95dbe:	4b25      	ldr	r3, [pc, #148]	; (95e54 <cl_uf_controller+0x298>)
   95dc0:	2201      	movs	r2, #1
   95dc2:	701a      	strb	r2, [r3, #0]
					}
					
				
					break;
   95dc4:	e001      	b.n	95dca <cl_uf_controller+0x20e>
					uf_state = CL_UF_STATE_STARTED;
				
						
					}
					
					break;
   95dc6:	bf00      	nop
   95dc8:	e184      	b.n	960d4 <cl_uf_controller+0x518>
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				
					break;
   95dca:	bf00      	nop
					
					default:break;
					
				}
			break;
   95dcc:	e182      	b.n	960d4 <cl_uf_controller+0x518>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   95dce:	79fb      	ldrb	r3, [r7, #7]
   95dd0:	3b01      	subs	r3, #1
   95dd2:	2b09      	cmp	r3, #9
   95dd4:	f200 80dd 	bhi.w	95f92 <cl_uf_controller+0x3d6>
   95dd8:	a201      	add	r2, pc, #4	; (adr r2, 95de0 <cl_uf_controller+0x224>)
   95dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95dde:	bf00      	nop
   95de0:	00095e1b 	.word	0x00095e1b
   95de4:	00095f93 	.word	0x00095f93
   95de8:	00095f93 	.word	0x00095f93
   95dec:	00095e2d 	.word	0x00095e2d
   95df0:	00095e4b 	.word	0x00095e4b
   95df4:	00095e0f 	.word	0x00095e0f
   95df8:	00095f93 	.word	0x00095f93
   95dfc:	00095eb1 	.word	0x00095eb1
   95e00:	00095f93 	.word	0x00095f93
   95e04:	00095e09 	.word	0x00095e09
			{
				
				case CL_UF_EVENT_MINUTE:
				
				Cl_SendUfdata();
   95e08:	4b25      	ldr	r3, [pc, #148]	; (95ea0 <cl_uf_controller+0x2e4>)
   95e0a:	4798      	blx	r3
				break;
   95e0c:	e0c4      	b.n	95f98 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_SECOND:
				//cl_ufpumpFeedback_get_state(&uf_pumpstate);
				//cl_ufpumpFeedback_get_delta(&uf_delta_value);
			
				
					ufTimeElapsed++;
   95e0e:	4b25      	ldr	r3, [pc, #148]	; (95ea4 <cl_uf_controller+0x2e8>)
   95e10:	681b      	ldr	r3, [r3, #0]
   95e12:	3301      	adds	r3, #1
   95e14:	4a23      	ldr	r2, [pc, #140]	; (95ea4 <cl_uf_controller+0x2e8>)
   95e16:	6013      	str	r3, [r2, #0]
// 				}
// 				else
// 				{
// 					
// 				}
				break;
   95e18:	e0be      	b.n	95f98 <cl_uf_controller+0x3dc>
				
				
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   95e1a:	683b      	ldr	r3, [r7, #0]
   95e1c:	4a0e      	ldr	r2, [pc, #56]	; (95e58 <cl_uf_controller+0x29c>)
   95e1e:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   95e20:	683b      	ldr	r3, [r7, #0]
   95e22:	4619      	mov	r1, r3
   95e24:	2004      	movs	r0, #4
   95e26:	4b0e      	ldr	r3, [pc, #56]	; (95e60 <cl_uf_controller+0x2a4>)
   95e28:	4798      	blx	r3
				break;
   95e2a:	e0b5      	b.n	95f98 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   95e2c:	2004      	movs	r0, #4
   95e2e:	4b1e      	ldr	r3, [pc, #120]	; (95ea8 <cl_uf_controller+0x2ec>)
   95e30:	4798      	blx	r3
   95e32:	4603      	mov	r3, r0
   95e34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   95e38:	4b1c      	ldr	r3, [pc, #112]	; (95eac <cl_uf_controller+0x2f0>)
   95e3a:	4798      	blx	r3
   95e3c:	4603      	mov	r3, r0
   95e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   95e42:	4b04      	ldr	r3, [pc, #16]	; (95e54 <cl_uf_controller+0x298>)
   95e44:	2202      	movs	r2, #2
   95e46:	701a      	strb	r2, [r3, #0]
				break;
   95e48:	e0a6      	b.n	95f98 <cl_uf_controller+0x3dc>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   95e4a:	4b02      	ldr	r3, [pc, #8]	; (95e54 <cl_uf_controller+0x298>)
   95e4c:	2200      	movs	r2, #0
   95e4e:	701a      	strb	r2, [r3, #0]
				break;
   95e50:	e0a2      	b.n	95f98 <cl_uf_controller+0x3dc>
   95e52:	bf00      	nop
   95e54:	20071b0b 	.word	0x20071b0b
   95e58:	20071b0c 	.word	0x20071b0c
   95e5c:	20071b1c 	.word	0x20071b1c
   95e60:	00099b21 	.word	0x00099b21
   95e64:	20070574 	.word	0x20070574
   95e68:	00093009 	.word	0x00093009
   95e6c:	20072654 	.word	0x20072654
   95e70:	88888889 	.word	0x88888889
   95e74:	000a64e1 	.word	0x000a64e1
   95e78:	000a6591 	.word	0x000a6591
   95e7c:	41200000 	.word	0x41200000
   95e80:	000a691d 	.word	0x000a691d
   95e84:	000a6969 	.word	0x000a6969
   95e88:	00084865 	.word	0x00084865
   95e8c:	20071790 	.word	0x20071790
   95e90:	00099a09 	.word	0x00099a09
   95e94:	00095b75 	.word	0x00095b75
   95e98:	20071b10 	.word	0x20071b10
   95e9c:	00095b9d 	.word	0x00095b9d
   95ea0:	00096135 	.word	0x00096135
   95ea4:	20071b18 	.word	0x20071b18
   95ea8:	00099a45 	.word	0x00099a45
   95eac:	00095b8d 	.word	0x00095b8d
				case CL_UF_EVENT_RESET:				
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   95eb0:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   95eb4:	2004      	movs	r0, #4
   95eb6:	4b8a      	ldr	r3, [pc, #552]	; (960e0 <cl_uf_controller+0x524>)
   95eb8:	4798      	blx	r3
				cl_wait(100);
   95eba:	2064      	movs	r0, #100	; 0x64
   95ebc:	4b89      	ldr	r3, [pc, #548]	; (960e4 <cl_uf_controller+0x528>)
   95ebe:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   95ec0:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   95ec4:	2004      	movs	r0, #4
   95ec6:	4b86      	ldr	r3, [pc, #536]	; (960e0 <cl_uf_controller+0x524>)
   95ec8:	4798      	blx	r3
				cl_wait(100);
   95eca:	2064      	movs	r0, #100	; 0x64
   95ecc:	4b85      	ldr	r3, [pc, #532]	; (960e4 <cl_uf_controller+0x528>)
   95ece:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   95ed0:	f241 7170 	movw	r1, #6000	; 0x1770
   95ed4:	2004      	movs	r0, #4
   95ed6:	4b82      	ldr	r3, [pc, #520]	; (960e0 <cl_uf_controller+0x524>)
   95ed8:	4798      	blx	r3
				cl_wait(100);
   95eda:	2064      	movs	r0, #100	; 0x64
   95edc:	4b81      	ldr	r3, [pc, #516]	; (960e4 <cl_uf_controller+0x528>)
   95ede:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   95ee0:	21c8      	movs	r1, #200	; 0xc8
   95ee2:	2004      	movs	r0, #4
   95ee4:	4b7e      	ldr	r3, [pc, #504]	; (960e0 <cl_uf_controller+0x524>)
   95ee6:	4798      	blx	r3
				cl_wait(100);
   95ee8:	2064      	movs	r0, #100	; 0x64
   95eea:	4b7e      	ldr	r3, [pc, #504]	; (960e4 <cl_uf_controller+0x528>)
   95eec:	4798      	blx	r3
				
										// added this event
				
					
					
					temptime = Treatdata[ID_treattime] - ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration	
   95eee:	4b7e      	ldr	r3, [pc, #504]	; (960e8 <cl_uf_controller+0x52c>)
   95ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   95ef2:	4a7e      	ldr	r2, [pc, #504]	; (960ec <cl_uf_controller+0x530>)
   95ef4:	6812      	ldr	r2, [r2, #0]
   95ef6:	1a9b      	subs	r3, r3, r2
   95ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
						temp = Treatdata[ID_ufgoal] - ufRemoved;
   95efa:	4b7b      	ldr	r3, [pc, #492]	; (960e8 <cl_uf_controller+0x52c>)
   95efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   95efe:	4b7c      	ldr	r3, [pc, #496]	; (960f0 <cl_uf_controller+0x534>)
   95f00:	4610      	mov	r0, r2
   95f02:	4798      	blx	r3
   95f04:	4b7b      	ldr	r3, [pc, #492]	; (960f4 <cl_uf_controller+0x538>)
   95f06:	681a      	ldr	r2, [r3, #0]
   95f08:	4b7b      	ldr	r3, [pc, #492]	; (960f8 <cl_uf_controller+0x53c>)
   95f0a:	4611      	mov	r1, r2
   95f0c:	4798      	blx	r3
   95f0e:	4603      	mov	r3, r0
   95f10:	461a      	mov	r2, r3
   95f12:	4b7a      	ldr	r3, [pc, #488]	; (960fc <cl_uf_controller+0x540>)
   95f14:	4610      	mov	r0, r2
   95f16:	4798      	blx	r3
   95f18:	4603      	mov	r3, r0
   95f1a:	633b      	str	r3, [r7, #48]	; 0x30
					
					
					
					float tempUfRate = temp/((temptime)/60);
   95f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   95f1e:	4a78      	ldr	r2, [pc, #480]	; (96100 <cl_uf_controller+0x544>)
   95f20:	fba2 2303 	umull	r2, r3, r2, r3
   95f24:	095b      	lsrs	r3, r3, #5
   95f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   95f28:	fbb2 f2f3 	udiv	r2, r2, r3
   95f2c:	4b70      	ldr	r3, [pc, #448]	; (960f0 <cl_uf_controller+0x534>)
   95f2e:	4610      	mov	r0, r2
   95f30:	4798      	blx	r3
   95f32:	4603      	mov	r3, r0
   95f34:	617b      	str	r3, [r7, #20]
					intufrate2 =tempUfRate * 10;
   95f36:	4b73      	ldr	r3, [pc, #460]	; (96104 <cl_uf_controller+0x548>)
   95f38:	4973      	ldr	r1, [pc, #460]	; (96108 <cl_uf_controller+0x54c>)
   95f3a:	6978      	ldr	r0, [r7, #20]
   95f3c:	4798      	blx	r3
   95f3e:	4603      	mov	r3, r0
   95f40:	461a      	mov	r2, r3
   95f42:	4b72      	ldr	r3, [pc, #456]	; (9610c <cl_uf_controller+0x550>)
   95f44:	4610      	mov	r0, r2
   95f46:	4798      	blx	r3
   95f48:	4603      	mov	r3, r0
   95f4a:	b21a      	sxth	r2, r3
   95f4c:	4b70      	ldr	r3, [pc, #448]	; (96110 <cl_uf_controller+0x554>)
   95f4e:	801a      	strh	r2, [r3, #0]
					
					calibrate_uf(intufrate2);
   95f50:	4b6f      	ldr	r3, [pc, #444]	; (96110 <cl_uf_controller+0x554>)
   95f52:	f9b3 3000 	ldrsh.w	r3, [r3]
   95f56:	4618      	mov	r0, r3
   95f58:	4b6e      	ldr	r3, [pc, #440]	; (96114 <cl_uf_controller+0x558>)
   95f5a:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   95f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   95f5e:	2b00      	cmp	r3, #0
   95f60:	d019      	beq.n	95f96 <cl_uf_controller+0x3da>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   95f62:	4b6d      	ldr	r3, [pc, #436]	; (96118 <cl_uf_controller+0x55c>)
   95f64:	681b      	ldr	r3, [r3, #0]
   95f66:	4619      	mov	r1, r3
   95f68:	2004      	movs	r0, #4
   95f6a:	4b5d      	ldr	r3, [pc, #372]	; (960e0 <cl_uf_controller+0x524>)
   95f6c:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   95f6e:	4b6a      	ldr	r3, [pc, #424]	; (96118 <cl_uf_controller+0x55c>)
   95f70:	681b      	ldr	r3, [r3, #0]
   95f72:	b21b      	sxth	r3, r3
   95f74:	4618      	mov	r0, r3
   95f76:	4b69      	ldr	r3, [pc, #420]	; (9611c <cl_uf_controller+0x560>)
   95f78:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95f7a:	2004      	movs	r0, #4
   95f7c:	4b68      	ldr	r3, [pc, #416]	; (96120 <cl_uf_controller+0x564>)
   95f7e:	4798      	blx	r3
   95f80:	4603      	mov	r3, r0
   95f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   95f86:	4b67      	ldr	r3, [pc, #412]	; (96124 <cl_uf_controller+0x568>)
   95f88:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   95f8a:	4b67      	ldr	r3, [pc, #412]	; (96128 <cl_uf_controller+0x56c>)
   95f8c:	2201      	movs	r2, #1
   95f8e:	701a      	strb	r2, [r3, #0]
					}
					
				break;
   95f90:	e001      	b.n	95f96 <cl_uf_controller+0x3da>
				default:break;
   95f92:	bf00      	nop
   95f94:	e09e      	b.n	960d4 <cl_uf_controller+0x518>
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
						cl_ufpumpFeedback_start();
						uf_state = CL_UF_STATE_STARTED;
					}
					
				break;
   95f96:	bf00      	nop
				default:break;
				
			}
			break;
   95f98:	e09c      	b.n	960d4 <cl_uf_controller+0x518>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   95f9a:	79fb      	ldrb	r3, [r7, #7]
   95f9c:	2b01      	cmp	r3, #1
   95f9e:	d002      	beq.n	95fa6 <cl_uf_controller+0x3ea>
   95fa0:	2b02      	cmp	r3, #2
   95fa2:	d009      	beq.n	95fb8 <cl_uf_controller+0x3fc>
					uf_state = CL_UF_STATE_STARTED;
				}
				
				
				break;
				default:break;
   95fa4:	e06e      	b.n	96084 <cl_uf_controller+0x4c8>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   95fa6:	683b      	ldr	r3, [r7, #0]
   95fa8:	4a60      	ldr	r2, [pc, #384]	; (9612c <cl_uf_controller+0x570>)
   95faa:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   95fac:	683b      	ldr	r3, [r7, #0]
   95fae:	4619      	mov	r1, r3
   95fb0:	2004      	movs	r0, #4
   95fb2:	4b4b      	ldr	r3, [pc, #300]	; (960e0 <cl_uf_controller+0x524>)
   95fb4:	4798      	blx	r3
				break;
   95fb6:	e065      	b.n	96084 <cl_uf_controller+0x4c8>
				case CL_UF_EVENT_START:													// added this event
				//cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				//uf_state = CL_UF_STATE_STARTED;
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   95fb8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   95fbc:	2004      	movs	r0, #4
   95fbe:	4b48      	ldr	r3, [pc, #288]	; (960e0 <cl_uf_controller+0x524>)
   95fc0:	4798      	blx	r3
				cl_wait(100);
   95fc2:	2064      	movs	r0, #100	; 0x64
   95fc4:	4b47      	ldr	r3, [pc, #284]	; (960e4 <cl_uf_controller+0x528>)
   95fc6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   95fc8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   95fcc:	2004      	movs	r0, #4
   95fce:	4b44      	ldr	r3, [pc, #272]	; (960e0 <cl_uf_controller+0x524>)
   95fd0:	4798      	blx	r3
				cl_wait(100);
   95fd2:	2064      	movs	r0, #100	; 0x64
   95fd4:	4b43      	ldr	r3, [pc, #268]	; (960e4 <cl_uf_controller+0x528>)
   95fd6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   95fd8:	f241 7170 	movw	r1, #6000	; 0x1770
   95fdc:	2004      	movs	r0, #4
   95fde:	4b40      	ldr	r3, [pc, #256]	; (960e0 <cl_uf_controller+0x524>)
   95fe0:	4798      	blx	r3
				cl_wait(100);
   95fe2:	2064      	movs	r0, #100	; 0x64
   95fe4:	4b3f      	ldr	r3, [pc, #252]	; (960e4 <cl_uf_controller+0x528>)
   95fe6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   95fe8:	21c8      	movs	r1, #200	; 0xc8
   95fea:	2004      	movs	r0, #4
   95fec:	4b3c      	ldr	r3, [pc, #240]	; (960e0 <cl_uf_controller+0x524>)
   95fee:	4798      	blx	r3
				cl_wait(100);
   95ff0:	2064      	movs	r0, #100	; 0x64
   95ff2:	4b3c      	ldr	r3, [pc, #240]	; (960e4 <cl_uf_controller+0x528>)
   95ff4:	4798      	blx	r3
				
			
			temp = Treatdata[ID_ufgoal] ;//- ufRemoved;
   95ff6:	4b3c      	ldr	r3, [pc, #240]	; (960e8 <cl_uf_controller+0x52c>)
   95ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   95ffa:	633b      	str	r3, [r7, #48]	; 0x30
			temptime = Treatdata[ID_treattime]; //- ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration
   95ffc:	4b3a      	ldr	r3, [pc, #232]	; (960e8 <cl_uf_controller+0x52c>)
   95ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   96000:	62fb      	str	r3, [r7, #44]	; 0x2c
						
				float tempUfRate = temp/((temptime)/60);
   96002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   96004:	4a3e      	ldr	r2, [pc, #248]	; (96100 <cl_uf_controller+0x544>)
   96006:	fba2 2303 	umull	r2, r3, r2, r3
   9600a:	095b      	lsrs	r3, r3, #5
   9600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   9600e:	fbb2 f2f3 	udiv	r2, r2, r3
   96012:	4b37      	ldr	r3, [pc, #220]	; (960f0 <cl_uf_controller+0x534>)
   96014:	4610      	mov	r0, r2
   96016:	4798      	blx	r3
   96018:	4603      	mov	r3, r0
   9601a:	613b      	str	r3, [r7, #16]
				intufrate2 =tempUfRate * 10;
   9601c:	4b39      	ldr	r3, [pc, #228]	; (96104 <cl_uf_controller+0x548>)
   9601e:	493a      	ldr	r1, [pc, #232]	; (96108 <cl_uf_controller+0x54c>)
   96020:	6938      	ldr	r0, [r7, #16]
   96022:	4798      	blx	r3
   96024:	4603      	mov	r3, r0
   96026:	461a      	mov	r2, r3
   96028:	4b38      	ldr	r3, [pc, #224]	; (9610c <cl_uf_controller+0x550>)
   9602a:	4610      	mov	r0, r2
   9602c:	4798      	blx	r3
   9602e:	4603      	mov	r3, r0
   96030:	b21a      	sxth	r2, r3
   96032:	4b37      	ldr	r3, [pc, #220]	; (96110 <cl_uf_controller+0x554>)
   96034:	801a      	strh	r2, [r3, #0]
				Cl_Uint32Type calcufrate = tempUfRate * 10;
   96036:	4b33      	ldr	r3, [pc, #204]	; (96104 <cl_uf_controller+0x548>)
   96038:	4933      	ldr	r1, [pc, #204]	; (96108 <cl_uf_controller+0x54c>)
   9603a:	6938      	ldr	r0, [r7, #16]
   9603c:	4798      	blx	r3
   9603e:	4603      	mov	r3, r0
   96040:	461a      	mov	r2, r3
   96042:	4b2e      	ldr	r3, [pc, #184]	; (960fc <cl_uf_controller+0x540>)
   96044:	4610      	mov	r0, r2
   96046:	4798      	blx	r3
   96048:	4603      	mov	r3, r0
   9604a:	60fb      	str	r3, [r7, #12]
					Treatdata[ID_ufrate] = calcufrate;
   9604c:	4a26      	ldr	r2, [pc, #152]	; (960e8 <cl_uf_controller+0x52c>)
   9604e:	68fb      	ldr	r3, [r7, #12]
   96050:	6313      	str	r3, [r2, #48]	; 0x30
				calibrate_uf(intufrate2);
   96052:	4b2f      	ldr	r3, [pc, #188]	; (96110 <cl_uf_controller+0x554>)
   96054:	f9b3 3000 	ldrsh.w	r3, [r3]
   96058:	4618      	mov	r0, r3
   9605a:	4b2e      	ldr	r3, [pc, #184]	; (96114 <cl_uf_controller+0x558>)
   9605c:	4798      	blx	r3
				// based on this uf rate calculate the PWM
				// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

				if(temp > 0){
   9605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96060:	2b00      	cmp	r3, #0
   96062:	d00e      	beq.n	96082 <cl_uf_controller+0x4c6>
					
					
		//			sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
//					cl_ufpumpFeedback_set_expected_period(uf_final); // not required
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   96064:	2004      	movs	r0, #4
   96066:	4b2e      	ldr	r3, [pc, #184]	; (96120 <cl_uf_controller+0x564>)
   96068:	4798      	blx	r3
   9606a:	4603      	mov	r3, r0
   9606c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					sv_cntrl_setpumpspeed(UFPUMP,uf_final);
   96070:	4b29      	ldr	r3, [pc, #164]	; (96118 <cl_uf_controller+0x55c>)
   96072:	681b      	ldr	r3, [r3, #0]
   96074:	4619      	mov	r1, r3
   96076:	2004      	movs	r0, #4
   96078:	4b19      	ldr	r3, [pc, #100]	; (960e0 <cl_uf_controller+0x524>)
   9607a:	4798      	blx	r3
//					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   9607c:	4b2a      	ldr	r3, [pc, #168]	; (96128 <cl_uf_controller+0x56c>)
   9607e:	2201      	movs	r2, #1
   96080:	701a      	strb	r2, [r3, #0]
				}
				
				
				break;
   96082:	bf00      	nop
				default:break;
				
			}
			break;
   96084:	e026      	b.n	960d4 <cl_uf_controller+0x518>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   96086:	79fb      	ldrb	r3, [r7, #7]
   96088:	2b02      	cmp	r3, #2
   9608a:	d00d      	beq.n	960a8 <cl_uf_controller+0x4ec>
   9608c:	2b04      	cmp	r3, #4
   9608e:	d015      	beq.n	960bc <cl_uf_controller+0x500>
   96090:	2b01      	cmp	r3, #1
   96092:	d000      	beq.n	96096 <cl_uf_controller+0x4da>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   96094:	e01c      	b.n	960d0 <cl_uf_controller+0x514>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   96096:	683b      	ldr	r3, [r7, #0]
   96098:	4a24      	ldr	r2, [pc, #144]	; (9612c <cl_uf_controller+0x570>)
   9609a:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   9609c:	683b      	ldr	r3, [r7, #0]
   9609e:	4619      	mov	r1, r3
   960a0:	2004      	movs	r0, #4
   960a2:	4b0f      	ldr	r3, [pc, #60]	; (960e0 <cl_uf_controller+0x524>)
   960a4:	4798      	blx	r3
				break;
   960a6:	e013      	b.n	960d0 <cl_uf_controller+0x514>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   960a8:	2004      	movs	r0, #4
   960aa:	4b1d      	ldr	r3, [pc, #116]	; (96120 <cl_uf_controller+0x564>)
   960ac:	4798      	blx	r3
   960ae:	4603      	mov	r3, r0
   960b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STARTED;
   960b4:	4b1c      	ldr	r3, [pc, #112]	; (96128 <cl_uf_controller+0x56c>)
   960b6:	2201      	movs	r2, #1
   960b8:	701a      	strb	r2, [r3, #0]
				break;
   960ba:	e009      	b.n	960d0 <cl_uf_controller+0x514>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   960bc:	2004      	movs	r0, #4
   960be:	4b1c      	ldr	r3, [pc, #112]	; (96130 <cl_uf_controller+0x574>)
   960c0:	4798      	blx	r3
   960c2:	4603      	mov	r3, r0
   960c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   960c8:	4b17      	ldr	r3, [pc, #92]	; (96128 <cl_uf_controller+0x56c>)
   960ca:	2202      	movs	r2, #2
   960cc:	701a      	strb	r2, [r3, #0]
				break;
   960ce:	bf00      	nop
				default:break;
				
			}
			break;
   960d0:	e000      	b.n	960d4 <cl_uf_controller+0x518>
			case CL_UF_STATE_COMPLETED:
			break;
			
			default:break;
   960d2:	bf00      	nop
			
			
	}
	return CL_OK;
   960d4:	2300      	movs	r3, #0
	
	
}
   960d6:	4618      	mov	r0, r3
   960d8:	3738      	adds	r7, #56	; 0x38
   960da:	46bd      	mov	sp, r7
   960dc:	bd80      	pop	{r7, pc}
   960de:	bf00      	nop
   960e0:	00099b21 	.word	0x00099b21
   960e4:	00093009 	.word	0x00093009
   960e8:	20072654 	.word	0x20072654
   960ec:	20071b18 	.word	0x20071b18
   960f0:	000a64e1 	.word	0x000a64e1
   960f4:	20071b14 	.word	0x20071b14
   960f8:	000a637d 	.word	0x000a637d
   960fc:	000a6969 	.word	0x000a6969
   96100:	88888889 	.word	0x88888889
   96104:	000a6591 	.word	0x000a6591
   96108:	41200000 	.word	0x41200000
   9610c:	000a691d 	.word	0x000a691d
   96110:	20071b10 	.word	0x20071b10
   96114:	00084865 	.word	0x00084865
   96118:	20071790 	.word	0x20071790
   9611c:	00095b9d 	.word	0x00095b9d
   96120:	00099a09 	.word	0x00099a09
   96124:	00095b75 	.word	0x00095b75
   96128:	20071b0b 	.word	0x20071b0b
   9612c:	20071b0c 	.word	0x20071b0c
   96130:	00099a45 	.word	0x00099a45

00096134 <Cl_SendUfdata>:


Cl_ReturnCodeType Cl_SendUfdata(){
   96134:	b580      	push	{r7, lr}
   96136:	af00      	add	r7, sp, #0
	
	ufRemoved =  ufRemoved + (intufrate2/10);
   96138:	4b0c      	ldr	r3, [pc, #48]	; (9616c <Cl_SendUfdata+0x38>)
   9613a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9613e:	4a0c      	ldr	r2, [pc, #48]	; (96170 <Cl_SendUfdata+0x3c>)
   96140:	fb82 1203 	smull	r1, r2, r2, r3
   96144:	1092      	asrs	r2, r2, #2
   96146:	17db      	asrs	r3, r3, #31
   96148:	1ad3      	subs	r3, r2, r3
   9614a:	b21a      	sxth	r2, r3
   9614c:	4b09      	ldr	r3, [pc, #36]	; (96174 <Cl_SendUfdata+0x40>)
   9614e:	4610      	mov	r0, r2
   96150:	4798      	blx	r3
   96152:	4b09      	ldr	r3, [pc, #36]	; (96178 <Cl_SendUfdata+0x44>)
   96154:	681a      	ldr	r2, [r3, #0]
   96156:	4b09      	ldr	r3, [pc, #36]	; (9617c <Cl_SendUfdata+0x48>)
   96158:	4611      	mov	r1, r2
   9615a:	4798      	blx	r3
   9615c:	4603      	mov	r3, r0
   9615e:	461a      	mov	r2, r3
   96160:	4b05      	ldr	r3, [pc, #20]	; (96178 <Cl_SendUfdata+0x44>)
   96162:	601a      	str	r2, [r3, #0]
	
	return CL_OK;
   96164:	2300      	movs	r3, #0
	
}
   96166:	4618      	mov	r0, r3
   96168:	bd80      	pop	{r7, pc}
   9616a:	bf00      	nop
   9616c:	20071b10 	.word	0x20071b10
   96170:	66666667 	.word	0x66666667
   96174:	000a64e9 	.word	0x000a64e9
   96178:	20071b14 	.word	0x20071b14
   9617c:	000a6381 	.word	0x000a6381

00096180 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   96180:	b480      	push	{r7}
   96182:	b083      	sub	sp, #12
   96184:	af00      	add	r7, sp, #0
   96186:	4603      	mov	r3, r0
   96188:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   9618a:	4908      	ldr	r1, [pc, #32]	; (961ac <NVIC_EnableIRQ+0x2c>)
   9618c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96190:	095b      	lsrs	r3, r3, #5
   96192:	79fa      	ldrb	r2, [r7, #7]
   96194:	f002 021f 	and.w	r2, r2, #31
   96198:	2001      	movs	r0, #1
   9619a:	fa00 f202 	lsl.w	r2, r0, r2
   9619e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   961a2:	bf00      	nop
   961a4:	370c      	adds	r7, #12
   961a6:	46bd      	mov	sp, r7
   961a8:	bc80      	pop	{r7}
   961aa:	4770      	bx	lr
   961ac:	e000e100 	.word	0xe000e100

000961b0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   961b0:	b480      	push	{r7}
   961b2:	b08b      	sub	sp, #44	; 0x2c
   961b4:	af00      	add	r7, sp, #0
   961b6:	6078      	str	r0, [r7, #4]
   961b8:	460b      	mov	r3, r1
   961ba:	70fb      	strb	r3, [r7, #3]
   961bc:	687b      	ldr	r3, [r7, #4]
   961be:	627b      	str	r3, [r7, #36]	; 0x24
   961c0:	78fb      	ldrb	r3, [r7, #3]
   961c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   961c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   961c8:	61fb      	str	r3, [r7, #28]
   961ca:	69fb      	ldr	r3, [r7, #28]
   961cc:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   961ce:	69bb      	ldr	r3, [r7, #24]
   961d0:	095b      	lsrs	r3, r3, #5
   961d2:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   961d4:	697b      	ldr	r3, [r7, #20]
   961d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   961da:	f203 7307 	addw	r3, r3, #1799	; 0x707
   961de:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   961e0:	613b      	str	r3, [r7, #16]

	if (level) {
   961e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   961e6:	2b00      	cmp	r3, #0
   961e8:	d009      	beq.n	961fe <ioport_set_pin_level+0x4e>
   961ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   961ec:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   961ee:	68fb      	ldr	r3, [r7, #12]
   961f0:	f003 031f 	and.w	r3, r3, #31
   961f4:	2201      	movs	r2, #1
   961f6:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   961f8:	693b      	ldr	r3, [r7, #16]
   961fa:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   961fc:	e008      	b.n	96210 <ioport_set_pin_level+0x60>
   961fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   96200:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   96202:	68bb      	ldr	r3, [r7, #8]
   96204:	f003 031f 	and.w	r3, r3, #31
   96208:	2201      	movs	r2, #1
   9620a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   9620c:	693b      	ldr	r3, [r7, #16]
   9620e:	635a      	str	r2, [r3, #52]	; 0x34
   96210:	bf00      	nop
   96212:	372c      	adds	r7, #44	; 0x2c
   96214:	46bd      	mov	sp, r7
   96216:	bc80      	pop	{r7}
   96218:	4770      	bx	lr
   9621a:	bf00      	nop

0009621c <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   9621c:	b480      	push	{r7}
   9621e:	b083      	sub	sp, #12
   96220:	af00      	add	r7, sp, #0
   96222:	6078      	str	r0, [r7, #4]
   96224:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   96226:	687b      	ldr	r3, [r7, #4]
   96228:	683a      	ldr	r2, [r7, #0]
   9622a:	601a      	str	r2, [r3, #0]
}
   9622c:	bf00      	nop
   9622e:	370c      	adds	r7, #12
   96230:	46bd      	mov	sp, r7
   96232:	bc80      	pop	{r7}
   96234:	4770      	bx	lr
   96236:	bf00      	nop

00096238 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   96238:	b580      	push	{r7, lr}
   9623a:	b082      	sub	sp, #8
   9623c:	af00      	add	r7, sp, #0
   9623e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   96240:	687b      	ldr	r3, [r7, #4]
   96242:	681b      	ldr	r3, [r3, #0]
   96244:	2100      	movs	r1, #0
   96246:	4618      	mov	r0, r3
   96248:	4b02      	ldr	r3, [pc, #8]	; (96254 <sn65hvda540_normal_mode+0x1c>)
   9624a:	4798      	blx	r3
}
   9624c:	bf00      	nop
   9624e:	3708      	adds	r7, #8
   96250:	46bd      	mov	sp, r7
   96252:	bd80      	pop	{r7, pc}
   96254:	000961b1 	.word	0x000961b1

00096258 <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   96258:	b580      	push	{r7, lr}
   9625a:	b082      	sub	sp, #8
   9625c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   9625e:	4b13      	ldr	r3, [pc, #76]	; (962ac <CAN0_Handler+0x54>)
   96260:	691b      	ldr	r3, [r3, #16]
   96262:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   96264:	687b      	ldr	r3, [r7, #4]
   96266:	b2db      	uxtb	r3, r3
   96268:	2b00      	cmp	r3, #0
   9626a:	d01b      	beq.n	962a4 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   9626c:	4b0f      	ldr	r3, [pc, #60]	; (962ac <CAN0_Handler+0x54>)
   9626e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   96272:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   96274:	687b      	ldr	r3, [r7, #4]
   96276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9627a:	2b00      	cmp	r3, #0
   9627c:	d012      	beq.n	962a4 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   9627e:	4b0c      	ldr	r3, [pc, #48]	; (962b0 <CAN0_Handler+0x58>)
   96280:	2201      	movs	r2, #1
   96282:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   96284:	4a0a      	ldr	r2, [pc, #40]	; (962b0 <CAN0_Handler+0x58>)
   96286:	687b      	ldr	r3, [r7, #4]
   96288:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   9628a:	4809      	ldr	r0, [pc, #36]	; (962b0 <CAN0_Handler+0x58>)
   9628c:	4b09      	ldr	r3, [pc, #36]	; (962b4 <CAN0_Handler+0x5c>)
   9628e:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   96290:	4807      	ldr	r0, [pc, #28]	; (962b0 <CAN0_Handler+0x58>)
   96292:	4b09      	ldr	r3, [pc, #36]	; (962b8 <CAN0_Handler+0x60>)
   96294:	4798      	blx	r3
			g_ul_recv_status = 1;
   96296:	4b09      	ldr	r3, [pc, #36]	; (962bc <CAN0_Handler+0x64>)
   96298:	2201      	movs	r2, #1
   9629a:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   9629c:	4b07      	ldr	r3, [pc, #28]	; (962bc <CAN0_Handler+0x64>)
   9629e:	681b      	ldr	r3, [r3, #0]
   962a0:	4a07      	ldr	r2, [pc, #28]	; (962c0 <CAN0_Handler+0x68>)
   962a2:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   962a4:	bf00      	nop
   962a6:	3708      	adds	r7, #8
   962a8:	46bd      	mov	sp, r7
   962aa:	bd80      	pop	{r7, pc}
   962ac:	400b4000 	.word	0x400b4000
   962b0:	200727d0 	.word	0x200727d0
   962b4:	00096551 	.word	0x00096551
   962b8:	00096369 	.word	0x00096369
   962bc:	20071b20 	.word	0x20071b20
   962c0:	20071b24 	.word	0x20071b24

000962c4 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   962c4:	b580      	push	{r7, lr}
   962c6:	b084      	sub	sp, #16
   962c8:	af00      	add	r7, sp, #0
   962ca:	4603      	mov	r3, r0
   962cc:	71fb      	strb	r3, [r7, #7]
   962ce:	460b      	mov	r3, r1
   962d0:	71bb      	strb	r3, [r7, #6]
   962d2:	4613      	mov	r3, r2
   962d4:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   962d6:	230a      	movs	r3, #10
   962d8:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   962da:	79bb      	ldrb	r3, [r7, #6]
   962dc:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   962de:	79fb      	ldrb	r3, [r7, #7]
   962e0:	049b      	lsls	r3, r3, #18
   962e2:	461a      	mov	r2, r3
   962e4:	4b1b      	ldr	r3, [pc, #108]	; (96354 <dd_master_command+0x90>)
   962e6:	4013      	ands	r3, r2
   962e8:	4a1b      	ldr	r2, [pc, #108]	; (96358 <dd_master_command+0x94>)
   962ea:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   962ec:	88bb      	ldrh	r3, [r7, #4]
   962ee:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   962f0:	68fb      	ldr	r3, [r7, #12]
   962f2:	4a19      	ldr	r2, [pc, #100]	; (96358 <dd_master_command+0x94>)
   962f4:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   962f6:	4b18      	ldr	r3, [pc, #96]	; (96358 <dd_master_command+0x94>)
   962f8:	2200      	movs	r2, #0
   962fa:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   962fc:	4b17      	ldr	r3, [pc, #92]	; (9635c <dd_master_command+0x98>)
   962fe:	f04f 32ff 	mov.w	r2, #4294967295
   96302:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   96304:	202b      	movs	r0, #43	; 0x2b
   96306:	4b16      	ldr	r3, [pc, #88]	; (96360 <dd_master_command+0x9c>)
   96308:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   9630a:	4b13      	ldr	r3, [pc, #76]	; (96358 <dd_master_command+0x94>)
   9630c:	2200      	movs	r2, #0
   9630e:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   96310:	4b11      	ldr	r3, [pc, #68]	; (96358 <dd_master_command+0x94>)
   96312:	2203      	movs	r2, #3
   96314:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   96316:	4b10      	ldr	r3, [pc, #64]	; (96358 <dd_master_command+0x94>)
   96318:	2200      	movs	r2, #0
   9631a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   9631c:	4b0e      	ldr	r3, [pc, #56]	; (96358 <dd_master_command+0x94>)
   9631e:	2204      	movs	r2, #4
   96320:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   96322:	4b0d      	ldr	r3, [pc, #52]	; (96358 <dd_master_command+0x94>)
   96324:	2200      	movs	r2, #0
   96326:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   96328:	4b0b      	ldr	r3, [pc, #44]	; (96358 <dd_master_command+0x94>)
   9632a:	f240 72fc 	movw	r2, #2044	; 0x7fc
   9632e:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   96330:	bf00      	nop
   96332:	4809      	ldr	r0, [pc, #36]	; (96358 <dd_master_command+0x94>)
   96334:	4b0b      	ldr	r3, [pc, #44]	; (96364 <dd_master_command+0xa0>)
   96336:	4798      	blx	r3
   96338:	4603      	mov	r3, r0
   9633a:	2b01      	cmp	r3, #1
   9633c:	d0f9      	beq.n	96332 <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   9633e:	202b      	movs	r0, #43	; 0x2b
   96340:	4b07      	ldr	r3, [pc, #28]	; (96360 <dd_master_command+0x9c>)
   96342:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   96344:	4b05      	ldr	r3, [pc, #20]	; (9635c <dd_master_command+0x98>)
   96346:	2202      	movs	r2, #2
   96348:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   9634a:	2300      	movs	r3, #0
}
   9634c:	4618      	mov	r0, r3
   9634e:	3710      	adds	r7, #16
   96350:	46bd      	mov	sp, r7
   96352:	bd80      	pop	{r7, pc}
   96354:	1ffc0000 	.word	0x1ffc0000
   96358:	200727d0 	.word	0x200727d0
   9635c:	400b4000 	.word	0x400b4000
   96360:	00096181 	.word	0x00096181
   96364:	00096621 	.word	0x00096621

00096368 <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   96368:	b480      	push	{r7}
   9636a:	b083      	sub	sp, #12
   9636c:	af00      	add	r7, sp, #0
   9636e:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   96370:	687b      	ldr	r3, [r7, #4]
   96372:	699b      	ldr	r3, [r3, #24]
   96374:	4a70      	ldr	r2, [pc, #448]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96376:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   96378:	4b6f      	ldr	r3, [pc, #444]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9637a:	781b      	ldrb	r3, [r3, #0]
   9637c:	b2da      	uxtb	r2, r3
   9637e:	4b6f      	ldr	r3, [pc, #444]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96380:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   96382:	4b6d      	ldr	r3, [pc, #436]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96384:	785b      	ldrb	r3, [r3, #1]
   96386:	b2da      	uxtb	r2, r3
   96388:	4b6c      	ldr	r3, [pc, #432]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9638a:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   9638c:	4b6b      	ldr	r3, [pc, #428]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9638e:	781b      	ldrb	r3, [r3, #0]
   96390:	b2db      	uxtb	r3, r3
   96392:	2b02      	cmp	r3, #2
   96394:	f000 80c9 	beq.w	9652a <dd_can_dump_mailbox_data+0x1c2>
   96398:	2b03      	cmp	r3, #3
   9639a:	d01d      	beq.n	963d8 <dd_can_dump_mailbox_data+0x70>
   9639c:	2b01      	cmp	r3, #1
   9639e:	d000      	beq.n	963a2 <dd_can_dump_mailbox_data+0x3a>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   963a0:	e0c4      	b.n	9652c <dd_can_dump_mailbox_data+0x1c4>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   963a2:	4b66      	ldr	r3, [pc, #408]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   963a4:	785b      	ldrb	r3, [r3, #1]
   963a6:	b2db      	uxtb	r3, r3
   963a8:	2b07      	cmp	r3, #7
   963aa:	d000      	beq.n	963ae <dd_can_dump_mailbox_data+0x46>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   963ac:	e013      	b.n	963d6 <dd_can_dump_mailbox_data+0x6e>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   963ae:	4b62      	ldr	r3, [pc, #392]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   963b0:	885b      	ldrh	r3, [r3, #2]
   963b2:	b29a      	uxth	r2, r3
   963b4:	4b61      	ldr	r3, [pc, #388]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   963b6:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   963b8:	687b      	ldr	r3, [r7, #4]
   963ba:	69db      	ldr	r3, [r3, #28]
   963bc:	4a5e      	ldr	r2, [pc, #376]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   963be:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   963c0:	4b5d      	ldr	r3, [pc, #372]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   963c2:	881b      	ldrh	r3, [r3, #0]
   963c4:	b29a      	uxth	r2, r3
   963c6:	4b5d      	ldr	r3, [pc, #372]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   963c8:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   963ca:	4b5b      	ldr	r3, [pc, #364]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   963cc:	885b      	ldrh	r3, [r3, #2]
   963ce:	b29a      	uxth	r2, r3
   963d0:	4b5a      	ldr	r3, [pc, #360]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   963d2:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   963d4:	bf00      	nop
			
			default :
			break;
		}
		break;
   963d6:	e0a9      	b.n	9652c <dd_can_dump_mailbox_data+0x1c4>
		case PROPORTIONING_CPU_id :
		break;
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   963d8:	4b58      	ldr	r3, [pc, #352]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   963da:	785b      	ldrb	r3, [r3, #1]
   963dc:	b2db      	uxtb	r3, r3
   963de:	3b01      	subs	r3, #1
   963e0:	2b05      	cmp	r3, #5
   963e2:	f200 80a0 	bhi.w	96526 <dd_can_dump_mailbox_data+0x1be>
   963e6:	a201      	add	r2, pc, #4	; (adr r2, 963ec <dd_can_dump_mailbox_data+0x84>)
   963e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   963ec:	00096405 	.word	0x00096405
   963f0:	00096441 	.word	0x00096441
   963f4:	0009646f 	.word	0x0009646f
   963f8:	0009649d 	.word	0x0009649d
   963fc:	000964cb 	.word	0x000964cb
   96400:	000964f9 	.word	0x000964f9
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   96404:	4b4c      	ldr	r3, [pc, #304]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96406:	885b      	ldrh	r3, [r3, #2]
   96408:	b29a      	uxth	r2, r3
   9640a:	4b4c      	ldr	r3, [pc, #304]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9640c:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9640e:	687b      	ldr	r3, [r7, #4]
   96410:	69db      	ldr	r3, [r3, #28]
   96412:	4a49      	ldr	r2, [pc, #292]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96414:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   96416:	4b48      	ldr	r3, [pc, #288]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96418:	881b      	ldrh	r3, [r3, #0]
   9641a:	b29a      	uxth	r2, r3
   9641c:	4b47      	ldr	r3, [pc, #284]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9641e:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   96420:	4b45      	ldr	r3, [pc, #276]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96422:	885b      	ldrh	r3, [r3, #2]
   96424:	b29a      	uxth	r2, r3
   96426:	4b45      	ldr	r3, [pc, #276]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96428:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   9642a:	4b45      	ldr	r3, [pc, #276]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   9642c:	2201      	movs	r2, #1
   9642e:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   96430:	4b44      	ldr	r3, [pc, #272]	; (96544 <dd_can_dump_mailbox_data+0x1dc>)
   96432:	681a      	ldr	r2, [r3, #0]
   96434:	4b44      	ldr	r3, [pc, #272]	; (96548 <dd_can_dump_mailbox_data+0x1e0>)
   96436:	681b      	ldr	r3, [r3, #0]
   96438:	1ad3      	subs	r3, r2, r3
   9643a:	4a44      	ldr	r2, [pc, #272]	; (9654c <dd_can_dump_mailbox_data+0x1e4>)
   9643c:	6013      	str	r3, [r2, #0]
			break;
   9643e:	e073      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   96440:	4b3d      	ldr	r3, [pc, #244]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96442:	885b      	ldrh	r3, [r3, #2]
   96444:	b29a      	uxth	r2, r3
   96446:	4b3d      	ldr	r3, [pc, #244]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96448:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9644a:	687b      	ldr	r3, [r7, #4]
   9644c:	69db      	ldr	r3, [r3, #28]
   9644e:	4a3a      	ldr	r2, [pc, #232]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96450:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   96452:	4b39      	ldr	r3, [pc, #228]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96454:	881b      	ldrh	r3, [r3, #0]
   96456:	b29a      	uxth	r2, r3
   96458:	4b38      	ldr	r3, [pc, #224]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9645a:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   9645c:	4b36      	ldr	r3, [pc, #216]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9645e:	885b      	ldrh	r3, [r3, #2]
   96460:	b29a      	uxth	r2, r3
   96462:	4b36      	ldr	r3, [pc, #216]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96464:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   96466:	4b36      	ldr	r3, [pc, #216]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   96468:	2201      	movs	r2, #1
   9646a:	709a      	strb	r2, [r3, #2]
			break;
   9646c:	e05c      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.Temp3status = temp_struct.temp_reg_16[1];			
   9646e:	4b32      	ldr	r3, [pc, #200]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96470:	885b      	ldrh	r3, [r3, #2]
   96472:	b29a      	uxth	r2, r3
   96474:	4b31      	ldr	r3, [pc, #196]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96476:	81da      	strh	r2, [r3, #14]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   96478:	687b      	ldr	r3, [r7, #4]
   9647a:	69db      	ldr	r3, [r3, #28]
   9647c:	4a2e      	ldr	r2, [pc, #184]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9647e:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1_Tempstatus =  temp_struct.temp_reg_16[0] ;
   96480:	4b2d      	ldr	r3, [pc, #180]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96482:	881b      	ldrh	r3, [r3, #0]
   96484:	b29a      	uxth	r2, r3
   96486:	4b2d      	ldr	r3, [pc, #180]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96488:	821a      	strh	r2, [r3, #16]
			DD_Sensor_status.CS2_Tempstatus=   temp_struct.temp_reg_16[1] ;			
   9648a:	4b2b      	ldr	r3, [pc, #172]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9648c:	885b      	ldrh	r3, [r3, #2]
   9648e:	b29a      	uxth	r2, r3
   96490:	4b2a      	ldr	r3, [pc, #168]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96492:	825a      	strh	r2, [r3, #18]
			array1[3]	= 1;
   96494:	4b2a      	ldr	r3, [pc, #168]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   96496:	2201      	movs	r2, #1
   96498:	70da      	strb	r2, [r3, #3]
			break;
   9649a:	e045      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   9649c:	4b26      	ldr	r3, [pc, #152]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9649e:	885b      	ldrh	r3, [r3, #2]
   964a0:	b29a      	uxth	r2, r3
   964a2:	4b26      	ldr	r3, [pc, #152]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964a4:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   964a6:	687b      	ldr	r3, [r7, #4]
   964a8:	69db      	ldr	r3, [r3, #28]
   964aa:	4a23      	ldr	r2, [pc, #140]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964ac:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   964ae:	4b22      	ldr	r3, [pc, #136]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964b0:	881b      	ldrh	r3, [r3, #0]
   964b2:	b29a      	uxth	r2, r3
   964b4:	4b21      	ldr	r3, [pc, #132]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964b6:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   964b8:	4b1f      	ldr	r3, [pc, #124]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964ba:	885b      	ldrh	r3, [r3, #2]
   964bc:	b29a      	uxth	r2, r3
   964be:	4b1f      	ldr	r3, [pc, #124]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964c0:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   964c2:	4b1f      	ldr	r3, [pc, #124]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   964c4:	2201      	movs	r2, #1
   964c6:	711a      	strb	r2, [r3, #4]
			break;
   964c8:	e02e      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   964ca:	4b1b      	ldr	r3, [pc, #108]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964cc:	885b      	ldrh	r3, [r3, #2]
   964ce:	b29a      	uxth	r2, r3
   964d0:	4b1a      	ldr	r3, [pc, #104]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964d2:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   964d4:	687b      	ldr	r3, [r7, #4]
   964d6:	69db      	ldr	r3, [r3, #28]
   964d8:	4a17      	ldr	r2, [pc, #92]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964da:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   964dc:	4b16      	ldr	r3, [pc, #88]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964de:	881b      	ldrh	r3, [r3, #0]
   964e0:	b29a      	uxth	r2, r3
   964e2:	4b16      	ldr	r3, [pc, #88]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964e4:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   964e6:	4b14      	ldr	r3, [pc, #80]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964e8:	885b      	ldrh	r3, [r3, #2]
   964ea:	b29a      	uxth	r2, r3
   964ec:	4b13      	ldr	r3, [pc, #76]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   964ee:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   964f0:	4b13      	ldr	r3, [pc, #76]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   964f2:	2201      	movs	r2, #1
   964f4:	715a      	strb	r2, [r3, #5]
			break;
   964f6:	e017      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   964f8:	4b0f      	ldr	r3, [pc, #60]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   964fa:	885b      	ldrh	r3, [r3, #2]
   964fc:	b29a      	uxth	r2, r3
   964fe:	4b0f      	ldr	r3, [pc, #60]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96500:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   96502:	687b      	ldr	r3, [r7, #4]
   96504:	69db      	ldr	r3, [r3, #28]
   96506:	4a0c      	ldr	r2, [pc, #48]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96508:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   9650a:	4b0b      	ldr	r3, [pc, #44]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   9650c:	881b      	ldrh	r3, [r3, #0]
   9650e:	b29a      	uxth	r2, r3
   96510:	4b0a      	ldr	r3, [pc, #40]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   96512:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   96514:	4b08      	ldr	r3, [pc, #32]	; (96538 <dd_can_dump_mailbox_data+0x1d0>)
   96516:	885b      	ldrh	r3, [r3, #2]
   96518:	b29a      	uxth	r2, r3
   9651a:	4b08      	ldr	r3, [pc, #32]	; (9653c <dd_can_dump_mailbox_data+0x1d4>)
   9651c:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   9651e:	4b08      	ldr	r3, [pc, #32]	; (96540 <dd_can_dump_mailbox_data+0x1d8>)
   96520:	2201      	movs	r2, #1
   96522:	719a      	strb	r2, [r3, #6]
			
			break;
   96524:	e000      	b.n	96528 <dd_can_dump_mailbox_data+0x1c0>
			
			default :
			break;
   96526:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   96528:	e000      	b.n	9652c <dd_can_dump_mailbox_data+0x1c4>
			break;
		}
		break;
		
		case PROPORTIONING_CPU_id :
		break;
   9652a:	bf00      	nop
		break;
		
		default:
		break;
	}
}
   9652c:	bf00      	nop
   9652e:	370c      	adds	r7, #12
   96530:	46bd      	mov	sp, r7
   96532:	bc80      	pop	{r7}
   96534:	4770      	bx	lr
   96536:	bf00      	nop
   96538:	200727a0 	.word	0x200727a0
   9653c:	200727a4 	.word	0x200727a4
   96540:	20071b3c 	.word	0x20071b3c
   96544:	20071a98 	.word	0x20071a98
   96548:	20071b48 	.word	0x20071b48
   9654c:	20071b4c 	.word	0x20071b4c

00096550 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   96550:	b480      	push	{r7}
   96552:	b087      	sub	sp, #28
   96554:	af00      	add	r7, sp, #0
   96556:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   96558:	2300      	movs	r3, #0
   9655a:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   9655c:	687b      	ldr	r3, [r7, #4]
   9655e:	681b      	ldr	r3, [r3, #0]
   96560:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   96562:	687b      	ldr	r3, [r7, #4]
   96564:	689b      	ldr	r3, [r3, #8]
   96566:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   96568:	68fb      	ldr	r3, [r7, #12]
   9656a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9656e:	2b00      	cmp	r3, #0
   96570:	d006      	beq.n	96580 <dd_can_mailbox_read+0x30>
   96572:	68fb      	ldr	r3, [r7, #12]
   96574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   96578:	2b00      	cmp	r3, #0
   9657a:	d001      	beq.n	96580 <dd_can_mailbox_read+0x30>
   9657c:	2302      	movs	r3, #2
   9657e:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   96580:	4a26      	ldr	r2, [pc, #152]	; (9661c <dd_can_mailbox_read+0xcc>)
   96582:	7cfb      	ldrb	r3, [r7, #19]
   96584:	015b      	lsls	r3, r3, #5
   96586:	4413      	add	r3, r2
   96588:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   9658c:	681b      	ldr	r3, [r3, #0]
   9658e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   96592:	687b      	ldr	r3, [r7, #4]
   96594:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   96596:	68fb      	ldr	r3, [r7, #12]
   96598:	0c1b      	lsrs	r3, r3, #16
   9659a:	b2db      	uxtb	r3, r3
   9659c:	f003 030f 	and.w	r3, r3, #15
   965a0:	b2da      	uxtb	r2, r3
   965a2:	687b      	ldr	r3, [r7, #4]
   965a4:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   965a6:	4a1d      	ldr	r2, [pc, #116]	; (9661c <dd_can_mailbox_read+0xcc>)
   965a8:	7cfb      	ldrb	r3, [r7, #19]
   965aa:	015b      	lsls	r3, r3, #5
   965ac:	4413      	add	r3, r2
   965ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
   965b2:	681a      	ldr	r2, [r3, #0]
   965b4:	687b      	ldr	r3, [r7, #4]
   965b6:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   965b8:	4a18      	ldr	r2, [pc, #96]	; (9661c <dd_can_mailbox_read+0xcc>)
   965ba:	7cfb      	ldrb	r3, [r7, #19]
   965bc:	015b      	lsls	r3, r3, #5
   965be:	4413      	add	r3, r2
   965c0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   965c4:	681a      	ldr	r2, [r3, #0]
   965c6:	687b      	ldr	r3, [r7, #4]
   965c8:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   965ca:	4a14      	ldr	r2, [pc, #80]	; (9661c <dd_can_mailbox_read+0xcc>)
   965cc:	7cfb      	ldrb	r3, [r7, #19]
   965ce:	015b      	lsls	r3, r3, #5
   965d0:	4413      	add	r3, r2
   965d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   965d6:	681a      	ldr	r2, [r3, #0]
   965d8:	687b      	ldr	r3, [r7, #4]
   965da:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   965dc:	687b      	ldr	r3, [r7, #4]
   965de:	689b      	ldr	r3, [r3, #8]
   965e0:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   965e2:	68fb      	ldr	r3, [r7, #12]
   965e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   965e8:	2b00      	cmp	r3, #0
   965ea:	d003      	beq.n	965f4 <dd_can_mailbox_read+0xa4>
   965ec:	697b      	ldr	r3, [r7, #20]
   965ee:	f043 0304 	orr.w	r3, r3, #4
   965f2:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   965f4:	4909      	ldr	r1, [pc, #36]	; (9661c <dd_can_mailbox_read+0xcc>)
   965f6:	7cfb      	ldrb	r3, [r7, #19]
   965f8:	687a      	ldr	r2, [r7, #4]
   965fa:	7992      	ldrb	r2, [r2, #6]
   965fc:	0412      	lsls	r2, r2, #16
   965fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   96602:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   96606:	015b      	lsls	r3, r3, #5
   96608:	440b      	add	r3, r1
   9660a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   9660e:	601a      	str	r2, [r3, #0]
	return ul_retval;
   96610:	697b      	ldr	r3, [r7, #20]
}
   96612:	4618      	mov	r0, r3
   96614:	371c      	adds	r7, #28
   96616:	46bd      	mov	sp, r7
   96618:	bc80      	pop	{r7}
   9661a:	4770      	bx	lr
   9661c:	400b4000 	.word	0x400b4000

00096620 <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   96620:	b480      	push	{r7}
   96622:	b085      	sub	sp, #20
   96624:	af00      	add	r7, sp, #0
   96626:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   96628:	687b      	ldr	r3, [r7, #4]
   9662a:	681b      	ldr	r3, [r3, #0]
   9662c:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9662e:	4a2a      	ldr	r2, [pc, #168]	; (966d8 <dd_can_mailbox_write+0xb8>)
   96630:	7bfb      	ldrb	r3, [r7, #15]
   96632:	015b      	lsls	r3, r3, #5
   96634:	4413      	add	r3, r2
   96636:	f503 7304 	add.w	r3, r3, #528	; 0x210
   9663a:	681a      	ldr	r2, [r3, #0]
   9663c:	687b      	ldr	r3, [r7, #4]
   9663e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   96640:	687b      	ldr	r3, [r7, #4]
   96642:	689b      	ldr	r3, [r3, #8]
   96644:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   96646:	68bb      	ldr	r3, [r7, #8]
   96648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9664c:	2b00      	cmp	r3, #0
   9664e:	d101      	bne.n	96654 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   96650:	2301      	movs	r3, #1
   96652:	e03b      	b.n	966cc <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   96654:	687b      	ldr	r3, [r7, #4]
   96656:	795b      	ldrb	r3, [r3, #5]
   96658:	2b00      	cmp	r3, #0
   9665a:	d00b      	beq.n	96674 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   9665c:	491e      	ldr	r1, [pc, #120]	; (966d8 <dd_can_mailbox_write+0xb8>)
   9665e:	7bfb      	ldrb	r3, [r7, #15]
   96660:	687a      	ldr	r2, [r7, #4]
   96662:	6912      	ldr	r2, [r2, #16]
   96664:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   96668:	015b      	lsls	r3, r3, #5
   9666a:	440b      	add	r3, r1
   9666c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   96670:	601a      	str	r2, [r3, #0]
   96672:	e008      	b.n	96686 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   96674:	4918      	ldr	r1, [pc, #96]	; (966d8 <dd_can_mailbox_write+0xb8>)
   96676:	7bfb      	ldrb	r3, [r7, #15]
   96678:	687a      	ldr	r2, [r7, #4]
   9667a:	6912      	ldr	r2, [r2, #16]
   9667c:	015b      	lsls	r3, r3, #5
   9667e:	440b      	add	r3, r1
   96680:	f503 7302 	add.w	r3, r3, #520	; 0x208
   96684:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   96686:	4914      	ldr	r1, [pc, #80]	; (966d8 <dd_can_mailbox_write+0xb8>)
   96688:	7bfb      	ldrb	r3, [r7, #15]
   9668a:	687a      	ldr	r2, [r7, #4]
   9668c:	6992      	ldr	r2, [r2, #24]
   9668e:	015b      	lsls	r3, r3, #5
   96690:	440b      	add	r3, r1
   96692:	f503 7305 	add.w	r3, r3, #532	; 0x214
   96696:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   96698:	687b      	ldr	r3, [r7, #4]
   9669a:	799b      	ldrb	r3, [r3, #6]
   9669c:	2b04      	cmp	r3, #4
   9669e:	d908      	bls.n	966b2 <dd_can_mailbox_write+0x92>
   966a0:	490d      	ldr	r1, [pc, #52]	; (966d8 <dd_can_mailbox_write+0xb8>)
   966a2:	7bfb      	ldrb	r3, [r7, #15]
   966a4:	687a      	ldr	r2, [r7, #4]
   966a6:	69d2      	ldr	r2, [r2, #28]
   966a8:	015b      	lsls	r3, r3, #5
   966aa:	440b      	add	r3, r1
   966ac:	f503 7306 	add.w	r3, r3, #536	; 0x218
   966b0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   966b2:	4909      	ldr	r1, [pc, #36]	; (966d8 <dd_can_mailbox_write+0xb8>)
   966b4:	7bfb      	ldrb	r3, [r7, #15]
   966b6:	687a      	ldr	r2, [r7, #4]
   966b8:	7992      	ldrb	r2, [r2, #6]
   966ba:	0412      	lsls	r2, r2, #16
   966bc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   966c0:	015b      	lsls	r3, r3, #5
   966c2:	440b      	add	r3, r1
   966c4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   966c8:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   966ca:	2300      	movs	r3, #0
}
   966cc:	4618      	mov	r0, r3
   966ce:	3714      	adds	r7, #20
   966d0:	46bd      	mov	sp, r7
   966d2:	bc80      	pop	{r7}
   966d4:	4770      	bx	lr
   966d6:	bf00      	nop
   966d8:	400b4000 	.word	0x400b4000

000966dc <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   966dc:	b480      	push	{r7}
   966de:	b085      	sub	sp, #20
   966e0:	af00      	add	r7, sp, #0
   966e2:	4603      	mov	r3, r0
   966e4:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   966e6:	4b07      	ldr	r3, [pc, #28]	; (96704 <dd_can_global_send_transfer_cmd+0x28>)
   966e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   966ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   966ee:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   966f0:	4904      	ldr	r1, [pc, #16]	; (96704 <dd_can_global_send_transfer_cmd+0x28>)
   966f2:	79fa      	ldrb	r2, [r7, #7]
   966f4:	68fb      	ldr	r3, [r7, #12]
   966f6:	4313      	orrs	r3, r2
   966f8:	624b      	str	r3, [r1, #36]	; 0x24
}
   966fa:	bf00      	nop
   966fc:	3714      	adds	r7, #20
   966fe:	46bd      	mov	sp, r7
   96700:	bc80      	pop	{r7}
   96702:	4770      	bx	lr
   96704:	400b4000 	.word	0x400b4000

00096708 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   96708:	b480      	push	{r7}
   9670a:	b085      	sub	sp, #20
   9670c:	af00      	add	r7, sp, #0
   9670e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   96710:	687b      	ldr	r3, [r7, #4]
   96712:	681b      	ldr	r3, [r3, #0]
   96714:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   96716:	687b      	ldr	r3, [r7, #4]
   96718:	791b      	ldrb	r3, [r3, #4]
   9671a:	2b00      	cmp	r3, #0
   9671c:	d12f      	bne.n	9677e <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   9671e:	4a35      	ldr	r2, [pc, #212]	; (967f4 <dd_can_mailbox_conf+0xec>)
   96720:	7bfb      	ldrb	r3, [r7, #15]
   96722:	3310      	adds	r3, #16
   96724:	015b      	lsls	r3, r3, #5
   96726:	4413      	add	r3, r2
   96728:	2200      	movs	r2, #0
   9672a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   9672c:	4a31      	ldr	r2, [pc, #196]	; (967f4 <dd_can_mailbox_conf+0xec>)
   9672e:	7bfb      	ldrb	r3, [r7, #15]
   96730:	3310      	adds	r3, #16
   96732:	015b      	lsls	r3, r3, #5
   96734:	4413      	add	r3, r2
   96736:	3304      	adds	r3, #4
   96738:	2200      	movs	r2, #0
   9673a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   9673c:	4a2d      	ldr	r2, [pc, #180]	; (967f4 <dd_can_mailbox_conf+0xec>)
   9673e:	7bfb      	ldrb	r3, [r7, #15]
   96740:	015b      	lsls	r3, r3, #5
   96742:	4413      	add	r3, r2
   96744:	f503 7302 	add.w	r3, r3, #520	; 0x208
   96748:	2200      	movs	r2, #0
   9674a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   9674c:	4a29      	ldr	r2, [pc, #164]	; (967f4 <dd_can_mailbox_conf+0xec>)
   9674e:	7bfb      	ldrb	r3, [r7, #15]
   96750:	015b      	lsls	r3, r3, #5
   96752:	4413      	add	r3, r2
   96754:	f503 7305 	add.w	r3, r3, #532	; 0x214
   96758:	2200      	movs	r2, #0
   9675a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   9675c:	4a25      	ldr	r2, [pc, #148]	; (967f4 <dd_can_mailbox_conf+0xec>)
   9675e:	7bfb      	ldrb	r3, [r7, #15]
   96760:	015b      	lsls	r3, r3, #5
   96762:	4413      	add	r3, r2
   96764:	f503 7306 	add.w	r3, r3, #536	; 0x218
   96768:	2200      	movs	r2, #0
   9676a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   9676c:	4a21      	ldr	r2, [pc, #132]	; (967f4 <dd_can_mailbox_conf+0xec>)
   9676e:	7bfb      	ldrb	r3, [r7, #15]
   96770:	015b      	lsls	r3, r3, #5
   96772:	4413      	add	r3, r2
   96774:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   96778:	2200      	movs	r2, #0
   9677a:	601a      	str	r2, [r3, #0]
		return;
   9677c:	e035      	b.n	967ea <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   9677e:	481d      	ldr	r0, [pc, #116]	; (967f4 <dd_can_mailbox_conf+0xec>)
   96780:	7bfb      	ldrb	r3, [r7, #15]
   96782:	491c      	ldr	r1, [pc, #112]	; (967f4 <dd_can_mailbox_conf+0xec>)
   96784:	7bfa      	ldrb	r2, [r7, #15]
   96786:	3210      	adds	r2, #16
   96788:	0152      	lsls	r2, r2, #5
   9678a:	440a      	add	r2, r1
   9678c:	6812      	ldr	r2, [r2, #0]
   9678e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   96792:	6879      	ldr	r1, [r7, #4]
   96794:	79c9      	ldrb	r1, [r1, #7]
   96796:	0409      	lsls	r1, r1, #16
   96798:	430a      	orrs	r2, r1
   9679a:	3310      	adds	r3, #16
   9679c:	015b      	lsls	r3, r3, #5
   9679e:	4403      	add	r3, r0
   967a0:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   967a2:	4914      	ldr	r1, [pc, #80]	; (967f4 <dd_can_mailbox_conf+0xec>)
   967a4:	7bfb      	ldrb	r3, [r7, #15]
   967a6:	687a      	ldr	r2, [r7, #4]
   967a8:	68d2      	ldr	r2, [r2, #12]
   967aa:	3310      	adds	r3, #16
   967ac:	015b      	lsls	r3, r3, #5
   967ae:	440b      	add	r3, r1
   967b0:	3304      	adds	r3, #4
   967b2:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   967b4:	490f      	ldr	r1, [pc, #60]	; (967f4 <dd_can_mailbox_conf+0xec>)
   967b6:	7bfb      	ldrb	r3, [r7, #15]
   967b8:	687a      	ldr	r2, [r7, #4]
   967ba:	6912      	ldr	r2, [r2, #16]
   967bc:	015b      	lsls	r3, r3, #5
   967be:	440b      	add	r3, r1
   967c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   967c4:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   967c6:	480b      	ldr	r0, [pc, #44]	; (967f4 <dd_can_mailbox_conf+0xec>)
   967c8:	7bfb      	ldrb	r3, [r7, #15]
   967ca:	490a      	ldr	r1, [pc, #40]	; (967f4 <dd_can_mailbox_conf+0xec>)
   967cc:	7bfa      	ldrb	r2, [r7, #15]
   967ce:	3210      	adds	r2, #16
   967d0:	0152      	lsls	r2, r2, #5
   967d2:	440a      	add	r2, r1
   967d4:	6812      	ldr	r2, [r2, #0]
   967d6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   967da:	6879      	ldr	r1, [r7, #4]
   967dc:	7909      	ldrb	r1, [r1, #4]
   967de:	0609      	lsls	r1, r1, #24
   967e0:	430a      	orrs	r2, r1
   967e2:	3310      	adds	r3, #16
   967e4:	015b      	lsls	r3, r3, #5
   967e6:	4403      	add	r3, r0
   967e8:	601a      	str	r2, [r3, #0]
}
   967ea:	3714      	adds	r7, #20
   967ec:	46bd      	mov	sp, r7
   967ee:	bc80      	pop	{r7}
   967f0:	4770      	bx	lr
   967f2:	bf00      	nop
   967f4:	400b4000 	.word	0x400b4000

000967f8 <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint16_t rc_count)
{
   967f8:	b580      	push	{r7, lr}
   967fa:	b084      	sub	sp, #16
   967fc:	af00      	add	r7, sp, #0
   967fe:	4603      	mov	r3, r0
   96800:	460a      	mov	r2, r1
   96802:	80fb      	strh	r3, [r7, #6]
   96804:	4613      	mov	r3, r2
   96806:	80bb      	strh	r3, [r7, #4]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   96808:	88fb      	ldrh	r3, [r7, #6]
   9680a:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   9680c:	88ba      	ldrh	r2, [r7, #4]
   9680e:	7bfb      	ldrb	r3, [r7, #15]
   96810:	4619      	mov	r1, r3
   96812:	2002      	movs	r0, #2
   96814:	4b04      	ldr	r3, [pc, #16]	; (96828 <DD_CAN_WRITE_PROPO+0x30>)
   96816:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   96818:	2001      	movs	r0, #1
   9681a:	4b04      	ldr	r3, [pc, #16]	; (9682c <DD_CAN_WRITE_PROPO+0x34>)
   9681c:	4798      	blx	r3

}
   9681e:	bf00      	nop
   96820:	3710      	adds	r7, #16
   96822:	46bd      	mov	sp, r7
   96824:	bd80      	pop	{r7, pc}
   96826:	bf00      	nop
   96828:	000962c5 	.word	0x000962c5
   9682c:	000966dd 	.word	0x000966dd

00096830 <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   96830:	b580      	push	{r7, lr}
   96832:	b084      	sub	sp, #16
   96834:	af00      	add	r7, sp, #0
   96836:	4603      	mov	r3, r0
   96838:	460a      	mov	r2, r1
   9683a:	80fb      	strh	r3, [r7, #6]
   9683c:	4613      	mov	r3, r2
   9683e:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   96840:	88fb      	ldrh	r3, [r7, #6]
   96842:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   96844:	4b09      	ldr	r3, [pc, #36]	; (9686c <DD_CAN_WRITE_HEMO+0x3c>)
   96846:	f04f 32ff 	mov.w	r2, #4294967295
   9684a:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   9684c:	88ba      	ldrh	r2, [r7, #4]
   9684e:	7bfb      	ldrb	r3, [r7, #15]
   96850:	4619      	mov	r1, r3
   96852:	2001      	movs	r0, #1
   96854:	4b06      	ldr	r3, [pc, #24]	; (96870 <DD_CAN_WRITE_HEMO+0x40>)
   96856:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   96858:	2001      	movs	r0, #1
   9685a:	4b06      	ldr	r3, [pc, #24]	; (96874 <DD_CAN_WRITE_HEMO+0x44>)
   9685c:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   9685e:	4b03      	ldr	r3, [pc, #12]	; (9686c <DD_CAN_WRITE_HEMO+0x3c>)
   96860:	2202      	movs	r2, #2
   96862:	605a      	str	r2, [r3, #4]
}
   96864:	bf00      	nop
   96866:	3710      	adds	r7, #16
   96868:	46bd      	mov	sp, r7
   9686a:	bd80      	pop	{r7, pc}
   9686c:	400b4000 	.word	0x400b4000
   96870:	000962c5 	.word	0x000962c5
   96874:	000966dd 	.word	0x000966dd

00096878 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   96878:	b580      	push	{r7, lr}
   9687a:	b084      	sub	sp, #16
   9687c:	af00      	add	r7, sp, #0
   9687e:	4603      	mov	r3, r0
   96880:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   96882:	88fb      	ldrh	r3, [r7, #6]
   96884:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   96886:	4b0a      	ldr	r3, [pc, #40]	; (968b0 <DD_CAN_WRITE_SENSOR+0x38>)
   96888:	f04f 32ff 	mov.w	r2, #4294967295
   9688c:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   9688e:	7bfb      	ldrb	r3, [r7, #15]
   96890:	2200      	movs	r2, #0
   96892:	4619      	mov	r1, r3
   96894:	2003      	movs	r0, #3
   96896:	4b07      	ldr	r3, [pc, #28]	; (968b4 <DD_CAN_WRITE_SENSOR+0x3c>)
   96898:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   9689a:	2001      	movs	r0, #1
   9689c:	4b06      	ldr	r3, [pc, #24]	; (968b8 <DD_CAN_WRITE_SENSOR+0x40>)
   9689e:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   968a0:	4b03      	ldr	r3, [pc, #12]	; (968b0 <DD_CAN_WRITE_SENSOR+0x38>)
   968a2:	2202      	movs	r2, #2
   968a4:	605a      	str	r2, [r3, #4]
}
   968a6:	bf00      	nop
   968a8:	3710      	adds	r7, #16
   968aa:	46bd      	mov	sp, r7
   968ac:	bd80      	pop	{r7, pc}
   968ae:	bf00      	nop
   968b0:	400b4000 	.word	0x400b4000
   968b4:	000962c5 	.word	0x000962c5
   968b8:	000966dd 	.word	0x000966dd

000968bc <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   968bc:	b580      	push	{r7, lr}
   968be:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   968c0:	2100      	movs	r1, #0
   968c2:	2027      	movs	r0, #39	; 0x27
   968c4:	4b01      	ldr	r3, [pc, #4]	; (968cc <DD_CAN_READ_APTVPT+0x10>)
   968c6:	4798      	blx	r3
	
}
   968c8:	bf00      	nop
   968ca:	bd80      	pop	{r7, pc}
   968cc:	00096831 	.word	0x00096831

000968d0 <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   968d0:	b580      	push	{r7, lr}
   968d2:	b08e      	sub	sp, #56	; 0x38
   968d4:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   968d6:	4b4f      	ldr	r3, [pc, #316]	; (96a14 <DD_INIT_CAN+0x144>)
   968d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   968da:	2378      	movs	r3, #120	; 0x78
   968dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   968e0:	4b4d      	ldr	r3, [pc, #308]	; (96a18 <DD_INIT_CAN+0x148>)
   968e2:	4a4e      	ldr	r2, [pc, #312]	; (96a1c <DD_INIT_CAN+0x14c>)
   968e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   968e8:	4a4b      	ldr	r2, [pc, #300]	; (96a18 <DD_INIT_CAN+0x148>)
   968ea:	4b4b      	ldr	r3, [pc, #300]	; (96a18 <DD_INIT_CAN+0x148>)
   968ec:	681b      	ldr	r3, [r3, #0]
   968ee:	f023 0301 	bic.w	r3, r3, #1
   968f2:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   968f4:	4948      	ldr	r1, [pc, #288]	; (96a18 <DD_INIT_CAN+0x148>)
   968f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   968f8:	78db      	ldrb	r3, [r3, #3]
   968fa:	3b01      	subs	r3, #1
   968fc:	f003 0207 	and.w	r2, r3, #7
   96900:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96902:	789b      	ldrb	r3, [r3, #2]
   96904:	3b01      	subs	r3, #1
   96906:	011b      	lsls	r3, r3, #4
   96908:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9690c:	431a      	orrs	r2, r3
   9690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96910:	785b      	ldrb	r3, [r3, #1]
   96912:	3b01      	subs	r3, #1
   96914:	021b      	lsls	r3, r3, #8
   96916:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   9691a:	431a      	orrs	r2, r3
   9691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   9691e:	791b      	ldrb	r3, [r3, #4]
   96920:	3b01      	subs	r3, #1
   96922:	031b      	lsls	r3, r3, #12
   96924:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   96928:	431a      	orrs	r2, r3
   9692a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9692e:	3b01      	subs	r3, #1
   96930:	041b      	lsls	r3, r3, #16
   96932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   96936:	4313      	orrs	r3, r2
   96938:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   9693a:	2300      	movs	r3, #0
   9693c:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   9693e:	2300      	movs	r3, #0
   96940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   96944:	e00b      	b.n	9695e <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   96946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9694a:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   9694c:	1d3b      	adds	r3, r7, #4
   9694e:	4618      	mov	r0, r3
   96950:	4b33      	ldr	r3, [pc, #204]	; (96a20 <DD_INIT_CAN+0x150>)
   96952:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   96954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   96958:	3301      	adds	r3, #1
   9695a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   9695e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   96962:	2b07      	cmp	r3, #7
   96964:	d9ef      	bls.n	96946 <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   96966:	4a2c      	ldr	r2, [pc, #176]	; (96a18 <DD_INIT_CAN+0x148>)
   96968:	4b2b      	ldr	r3, [pc, #172]	; (96a18 <DD_INIT_CAN+0x148>)
   9696a:	681b      	ldr	r3, [r3, #0]
   9696c:	f043 0301 	orr.w	r3, r3, #1
   96970:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   96972:	2300      	movs	r3, #0
   96974:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   96976:	2300      	movs	r3, #0
   96978:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   9697a:	e005      	b.n	96988 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   9697c:	4b26      	ldr	r3, [pc, #152]	; (96a18 <DD_INIT_CAN+0x148>)
   9697e:	691b      	ldr	r3, [r3, #16]
   96980:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   96982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96984:	3301      	adds	r3, #1
   96986:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   96988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   9698a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   9698e:	2b00      	cmp	r3, #0
   96990:	d103      	bne.n	9699a <DD_INIT_CAN+0xca>
   96992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96994:	4a23      	ldr	r2, [pc, #140]	; (96a24 <DD_INIT_CAN+0x154>)
   96996:	4293      	cmp	r3, r2
   96998:	d9f0      	bls.n	9697c <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   9699a:	4b23      	ldr	r3, [pc, #140]	; (96a28 <DD_INIT_CAN+0x158>)
   9699c:	2201      	movs	r2, #1
   9699e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   969a0:	4b21      	ldr	r3, [pc, #132]	; (96a28 <DD_INIT_CAN+0x158>)
   969a2:	2201      	movs	r2, #1
   969a4:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   969a6:	4b20      	ldr	r3, [pc, #128]	; (96a28 <DD_INIT_CAN+0x158>)
   969a8:	2200      	movs	r2, #0
   969aa:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   969ac:	4b1e      	ldr	r3, [pc, #120]	; (96a28 <DD_INIT_CAN+0x158>)
   969ae:	2200      	movs	r2, #0
   969b0:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   969b2:	4b1d      	ldr	r3, [pc, #116]	; (96a28 <DD_INIT_CAN+0x158>)
   969b4:	4a1d      	ldr	r2, [pc, #116]	; (96a2c <DD_INIT_CAN+0x15c>)
   969b6:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   969b8:	4b1b      	ldr	r3, [pc, #108]	; (96a28 <DD_INIT_CAN+0x158>)
   969ba:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   969be:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   969c0:	4819      	ldr	r0, [pc, #100]	; (96a28 <DD_INIT_CAN+0x158>)
   969c2:	4b17      	ldr	r3, [pc, #92]	; (96a20 <DD_INIT_CAN+0x150>)
   969c4:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   969c6:	4b18      	ldr	r3, [pc, #96]	; (96a28 <DD_INIT_CAN+0x158>)
   969c8:	2200      	movs	r2, #0
   969ca:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   969cc:	4b16      	ldr	r3, [pc, #88]	; (96a28 <DD_INIT_CAN+0x158>)
   969ce:	2203      	movs	r2, #3
   969d0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   969d2:	4b15      	ldr	r3, [pc, #84]	; (96a28 <DD_INIT_CAN+0x158>)
   969d4:	2201      	movs	r2, #1
   969d6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   969d8:	4b13      	ldr	r3, [pc, #76]	; (96a28 <DD_INIT_CAN+0x158>)
   969da:	2200      	movs	r2, #0
   969dc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   969de:	4b12      	ldr	r3, [pc, #72]	; (96a28 <DD_INIT_CAN+0x158>)
   969e0:	4a12      	ldr	r2, [pc, #72]	; (96a2c <DD_INIT_CAN+0x15c>)
   969e2:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   969e4:	4b10      	ldr	r3, [pc, #64]	; (96a28 <DD_INIT_CAN+0x158>)
   969e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   969ea:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   969ec:	480e      	ldr	r0, [pc, #56]	; (96a28 <DD_INIT_CAN+0x158>)
   969ee:	4b0c      	ldr	r3, [pc, #48]	; (96a20 <DD_INIT_CAN+0x150>)
   969f0:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   969f2:	202b      	movs	r0, #43	; 0x2b
   969f4:	4b0e      	ldr	r3, [pc, #56]	; (96a30 <DD_INIT_CAN+0x160>)
   969f6:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   969f8:	4b07      	ldr	r3, [pc, #28]	; (96a18 <DD_INIT_CAN+0x148>)
   969fa:	2202      	movs	r2, #2
   969fc:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   969fe:	2103      	movs	r1, #3
   96a00:	480c      	ldr	r0, [pc, #48]	; (96a34 <DD_INIT_CAN+0x164>)
   96a02:	4b0d      	ldr	r3, [pc, #52]	; (96a38 <DD_INIT_CAN+0x168>)
   96a04:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   96a06:	480b      	ldr	r0, [pc, #44]	; (96a34 <DD_INIT_CAN+0x164>)
   96a08:	4b0c      	ldr	r3, [pc, #48]	; (96a3c <DD_INIT_CAN+0x16c>)
   96a0a:	4798      	blx	r3
		
		
	}
   96a0c:	bf00      	nop
   96a0e:	3738      	adds	r7, #56	; 0x38
   96a10:	46bd      	mov	sp, r7
   96a12:	bd80      	pop	{r7, pc}
   96a14:	000a8958 	.word	0x000a8958
   96a18:	400b4000 	.word	0x400b4000
   96a1c:	43414e00 	.word	0x43414e00
   96a20:	00096709 	.word	0x00096709
   96a24:	0001869f 	.word	0x0001869f
   96a28:	200727d0 	.word	0x200727d0
   96a2c:	1ffc0000 	.word	0x1ffc0000
   96a30:	00096181 	.word	0x00096181
   96a34:	200727f0 	.word	0x200727f0
   96a38:	0009621d 	.word	0x0009621d
   96a3c:	00096239 	.word	0x00096239

00096a40 <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   96a40:	b480      	push	{r7}
   96a42:	b085      	sub	sp, #20
   96a44:	af00      	add	r7, sp, #0
   96a46:	4603      	mov	r3, r0
   96a48:	71fb      	strb	r3, [r7, #7]
	uint16_t SENSOR_VAL;
	uint8_t channel = 0;
   96a4a:	2300      	movs	r3, #0
   96a4c:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   96a4e:	79fb      	ldrb	r3, [r7, #7]
   96a50:	3b01      	subs	r3, #1
   96a52:	2b13      	cmp	r3, #19
   96a54:	d87a      	bhi.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
   96a56:	a201      	add	r2, pc, #4	; (adr r2, 96a5c <DD_CAN_READ_SENSORS+0x1c>)
   96a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96a5c:	00096aad 	.word	0x00096aad
   96a60:	00096ab5 	.word	0x00096ab5
   96a64:	00096abd 	.word	0x00096abd
   96a68:	00096ac5 	.word	0x00096ac5
   96a6c:	00096acd 	.word	0x00096acd
   96a70:	00096ad5 	.word	0x00096ad5
   96a74:	00096add 	.word	0x00096add
   96a78:	00096ae5 	.word	0x00096ae5
   96a7c:	00096aed 	.word	0x00096aed
   96a80:	00096af5 	.word	0x00096af5
   96a84:	00096afd 	.word	0x00096afd
   96a88:	00096b05 	.word	0x00096b05
   96a8c:	00096b0d 	.word	0x00096b0d
   96a90:	00096b15 	.word	0x00096b15
   96a94:	00096b1d 	.word	0x00096b1d
   96a98:	00096b25 	.word	0x00096b25
   96a9c:	00096b2d 	.word	0x00096b2d
   96aa0:	00096b35 	.word	0x00096b35
   96aa4:	00096b3d 	.word	0x00096b3d
   96aa8:	00096b45 	.word	0x00096b45
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   96aac:	4b2a      	ldr	r3, [pc, #168]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96aae:	885b      	ldrh	r3, [r3, #2]
   96ab0:	81fb      	strh	r3, [r7, #14]
		break;
   96ab2:	e04b      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   96ab4:	4b28      	ldr	r3, [pc, #160]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ab6:	889b      	ldrh	r3, [r3, #4]
   96ab8:	81fb      	strh	r3, [r7, #14]
		break;
   96aba:	e047      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   96abc:	4b26      	ldr	r3, [pc, #152]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96abe:	88db      	ldrh	r3, [r3, #6]
   96ac0:	81fb      	strh	r3, [r7, #14]
		break;
   96ac2:	e043      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   96ac4:	4b24      	ldr	r3, [pc, #144]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ac6:	891b      	ldrh	r3, [r3, #8]
   96ac8:	81fb      	strh	r3, [r7, #14]
		break;
   96aca:	e03f      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   96acc:	4b22      	ldr	r3, [pc, #136]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ace:	895b      	ldrh	r3, [r3, #10]
   96ad0:	81fb      	strh	r3, [r7, #14]
		
		break;
   96ad2:	e03b      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   96ad4:	4b20      	ldr	r3, [pc, #128]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ad6:	899b      	ldrh	r3, [r3, #12]
   96ad8:	81fb      	strh	r3, [r7, #14]
		break;
   96ada:	e037      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   96adc:	4b1e      	ldr	r3, [pc, #120]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ade:	8a9b      	ldrh	r3, [r3, #20]
   96ae0:	81fb      	strh	r3, [r7, #14]
		break;
   96ae2:	e033      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   96ae4:	4b1c      	ldr	r3, [pc, #112]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96ae6:	8a1b      	ldrh	r3, [r3, #16]
   96ae8:	81fb      	strh	r3, [r7, #14]
		break;
   96aea:	e02f      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   96aec:	4b1a      	ldr	r3, [pc, #104]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96aee:	8a5b      	ldrh	r3, [r3, #18]
   96af0:	81fb      	strh	r3, [r7, #14]
		break;
   96af2:	e02b      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   96af4:	4b18      	ldr	r3, [pc, #96]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96af6:	8a9b      	ldrh	r3, [r3, #20]
   96af8:	81fb      	strh	r3, [r7, #14]
		break;
   96afa:	e027      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   96afc:	4b16      	ldr	r3, [pc, #88]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96afe:	8adb      	ldrh	r3, [r3, #22]
   96b00:	81fb      	strh	r3, [r7, #14]
		break;
   96b02:	e023      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   96b04:	4b14      	ldr	r3, [pc, #80]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b06:	8b1b      	ldrh	r3, [r3, #24]
   96b08:	81fb      	strh	r3, [r7, #14]
		break;
   96b0a:	e01f      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   96b0c:	4b12      	ldr	r3, [pc, #72]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b0e:	8b5b      	ldrh	r3, [r3, #26]
   96b10:	81fb      	strh	r3, [r7, #14]
		break;
   96b12:	e01b      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   96b14:	4b10      	ldr	r3, [pc, #64]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b16:	8b9b      	ldrh	r3, [r3, #28]
   96b18:	81fb      	strh	r3, [r7, #14]
		break;
   96b1a:	e017      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   96b1c:	4b0e      	ldr	r3, [pc, #56]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b1e:	8bdb      	ldrh	r3, [r3, #30]
   96b20:	81fb      	strh	r3, [r7, #14]
		break;
   96b22:	e013      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   96b24:	4b0c      	ldr	r3, [pc, #48]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b26:	8c1b      	ldrh	r3, [r3, #32]
   96b28:	81fb      	strh	r3, [r7, #14]
		break;
   96b2a:	e00f      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   96b2c:	4b0a      	ldr	r3, [pc, #40]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b2e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   96b30:	81fb      	strh	r3, [r7, #14]
		break;
   96b32:	e00b      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   96b34:	4b08      	ldr	r3, [pc, #32]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   96b38:	81fb      	strh	r3, [r7, #14]
		break;
   96b3a:	e007      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   96b3c:	4b06      	ldr	r3, [pc, #24]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   96b40:	81fb      	strh	r3, [r7, #14]
		break;
   96b42:	e003      	b.n	96b4c <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   96b44:	4b04      	ldr	r3, [pc, #16]	; (96b58 <DD_CAN_READ_SENSORS+0x118>)
   96b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   96b48:	81fb      	strh	r3, [r7, #14]
		break;
   96b4a:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   96b4c:	89fb      	ldrh	r3, [r7, #14]
	
}
   96b4e:	4618      	mov	r0, r3
   96b50:	3714      	adds	r7, #20
   96b52:	46bd      	mov	sp, r7
   96b54:	bc80      	pop	{r7}
   96b56:	4770      	bx	lr
   96b58:	200727a4 	.word	0x200727a4

00096b5c <DD_INIT_CLOCK>:
// void check_interrupt(void);
// extern uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id);
// extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id);
// static chk_flag_toggle =0;
void DD_INIT_CLOCK()
{
   96b5c:	b580      	push	{r7, lr}
   96b5e:	af00      	add	r7, sp, #0
	
	sysclk_init();
   96b60:	4b07      	ldr	r3, [pc, #28]	; (96b80 <DD_INIT_CLOCK+0x24>)
   96b62:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   96b64:	4b07      	ldr	r3, [pc, #28]	; (96b84 <DD_INIT_CLOCK+0x28>)
   96b66:	4a08      	ldr	r2, [pc, #32]	; (96b88 <DD_INIT_CLOCK+0x2c>)
   96b68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   96b6c:	4b05      	ldr	r3, [pc, #20]	; (96b84 <DD_INIT_CLOCK+0x28>)
   96b6e:	4a07      	ldr	r2, [pc, #28]	; (96b8c <DD_INIT_CLOCK+0x30>)
   96b70:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   96b72:	4b04      	ldr	r3, [pc, #16]	; (96b84 <DD_INIT_CLOCK+0x28>)
   96b74:	f640 023f 	movw	r2, #2111	; 0x83f
   96b78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
}
   96b7c:	bf00      	nop
   96b7e:	bd80      	pop	{r7, pc}
   96b80:	0008044d 	.word	0x0008044d
   96b84:	400e0600 	.word	0x400e0600
   96b88:	504d4300 	.word	0x504d4300
   96b8c:	f8007900 	.word	0xf8007900

00096b90 <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   96b90:	b580      	push	{r7, lr}
   96b92:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   96b94:	4b3f      	ldr	r3, [pc, #252]	; (96c94 <DD_INIT_PIO+0x104>)
   96b96:	4a40      	ldr	r2, [pc, #256]	; (96c98 <DD_INIT_PIO+0x108>)
   96b98:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//PIOA->PIO_PER =  0x21C9ECFC;			//PIOA->PIO_PER  = 0x01C9ECF0;
PIOA->PIO_PER =  0x21C9ECFC;
   96b9c:	4b3d      	ldr	r3, [pc, #244]	; (96c94 <DD_INIT_PIO+0x104>)
   96b9e:	4a3f      	ldr	r2, [pc, #252]	; (96c9c <DD_INIT_PIO+0x10c>)
   96ba0:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B86C;			//PIOA->PIO_OER  = 0x00C0AC70;
   96ba2:	4b3c      	ldr	r3, [pc, #240]	; (96c94 <DD_INIT_PIO+0x104>)
   96ba4:	4a3e      	ldr	r2, [pc, #248]	; (96ca0 <DD_INIT_PIO+0x110>)
   96ba6:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   96ba8:	4b3a      	ldr	r3, [pc, #232]	; (96c94 <DD_INIT_PIO+0x104>)
   96baa:	4a3e      	ldr	r2, [pc, #248]	; (96ca4 <DD_INIT_PIO+0x114>)
   96bac:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   96bae:	4b39      	ldr	r3, [pc, #228]	; (96c94 <DD_INIT_PIO+0x104>)
   96bb0:	4a3d      	ldr	r2, [pc, #244]	; (96ca8 <DD_INIT_PIO+0x118>)
   96bb2:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   96bb4:	4b37      	ldr	r3, [pc, #220]	; (96c94 <DD_INIT_PIO+0x104>)
   96bb6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   96bba:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   96bbc:	4b35      	ldr	r3, [pc, #212]	; (96c94 <DD_INIT_PIO+0x104>)
   96bbe:	4a3b      	ldr	r2, [pc, #236]	; (96cac <DD_INIT_PIO+0x11c>)
   96bc0:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   96bc2:	4b34      	ldr	r3, [pc, #208]	; (96c94 <DD_INIT_PIO+0x104>)
   96bc4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   96bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 PIOA->PIO_SODR = 1<<2;
   96bcc:	4b31      	ldr	r3, [pc, #196]	; (96c94 <DD_INIT_PIO+0x104>)
   96bce:	2204      	movs	r2, #4
   96bd0:	631a      	str	r2, [r3, #48]	; 0x30
 PIOA->PIO_PER = 1<<2;
   96bd2:	4b30      	ldr	r3, [pc, #192]	; (96c94 <DD_INIT_PIO+0x104>)
   96bd4:	2204      	movs	r2, #4
   96bd6:	601a      	str	r2, [r3, #0]
 PIOA->PIO_OER = 1<<2;
   96bd8:	4b2e      	ldr	r3, [pc, #184]	; (96c94 <DD_INIT_PIO+0x104>)
   96bda:	2204      	movs	r2, #4
   96bdc:	611a      	str	r2, [r3, #16]

//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   96bde:	4b34      	ldr	r3, [pc, #208]	; (96cb0 <DD_INIT_PIO+0x120>)
   96be0:	4a2d      	ldr	r2, [pc, #180]	; (96c98 <DD_INIT_PIO+0x108>)
   96be2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE7F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   96be6:	4b32      	ldr	r3, [pc, #200]	; (96cb0 <DD_INIT_PIO+0x120>)
   96be8:	4a32      	ldr	r2, [pc, #200]	; (96cb4 <DD_INIT_PIO+0x124>)
   96bea:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00026400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   96bec:	4b30      	ldr	r3, [pc, #192]	; (96cb0 <DD_INIT_PIO+0x120>)
   96bee:	f44f 3219 	mov.w	r2, #156672	; 0x26400
   96bf2:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300; // 0x0FE59300			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   96bf4:	4b2e      	ldr	r3, [pc, #184]	; (96cb0 <DD_INIT_PIO+0x120>)
   96bf6:	4a30      	ldr	r2, [pc, #192]	; (96cb8 <DD_INIT_PIO+0x128>)
   96bf8:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   96bfa:	4b2d      	ldr	r3, [pc, #180]	; (96cb0 <DD_INIT_PIO+0x120>)
   96bfc:	4a2f      	ldr	r2, [pc, #188]	; (96cbc <DD_INIT_PIO+0x12c>)
   96bfe:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   96c00:	4b2f      	ldr	r3, [pc, #188]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c02:	4a25      	ldr	r2, [pc, #148]	; (96c98 <DD_INIT_PIO+0x108>)
   96c04:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   96c08:	4b2d      	ldr	r3, [pc, #180]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c0a:	4a2e      	ldr	r2, [pc, #184]	; (96cc4 <DD_INIT_PIO+0x134>)
   96c0c:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   96c0e:	4b2c      	ldr	r3, [pc, #176]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c10:	4a2d      	ldr	r2, [pc, #180]	; (96cc8 <DD_INIT_PIO+0x138>)
   96c12:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   96c14:	4b2a      	ldr	r3, [pc, #168]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c16:	4a2d      	ldr	r2, [pc, #180]	; (96ccc <DD_INIT_PIO+0x13c>)
   96c18:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   96c1a:	4b29      	ldr	r3, [pc, #164]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c1c:	4a2c      	ldr	r2, [pc, #176]	; (96cd0 <DD_INIT_PIO+0x140>)
   96c1e:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   96c20:	4b27      	ldr	r3, [pc, #156]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c22:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   96c26:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   96c28:	4b2a      	ldr	r3, [pc, #168]	; (96cd4 <DD_INIT_PIO+0x144>)
   96c2a:	4a1b      	ldr	r2, [pc, #108]	; (96c98 <DD_INIT_PIO+0x108>)
   96c2c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   96c30:	4b28      	ldr	r3, [pc, #160]	; (96cd4 <DD_INIT_PIO+0x144>)
   96c32:	f240 72ff 	movw	r2, #2047	; 0x7ff
   96c36:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   96c38:	4b26      	ldr	r3, [pc, #152]	; (96cd4 <DD_INIT_PIO+0x144>)
   96c3a:	f44f 72c3 	mov.w	r2, #390	; 0x186
   96c3e:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   96c40:	4b24      	ldr	r3, [pc, #144]	; (96cd4 <DD_INIT_PIO+0x144>)
   96c42:	f240 6279 	movw	r2, #1657	; 0x679
   96c46:	615a      	str	r2, [r3, #20]

//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
//PIOA->PIO_WPMR = 0<2;
 PIOC->PIO_CODR = 1<<21;               
   96c48:	4b1d      	ldr	r3, [pc, #116]	; (96cc0 <DD_INIT_PIO+0x130>)
   96c4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   96c4e:	635a      	str	r2, [r3, #52]	; 0x34
 PIOB->PIO_SODR = 1<<17;
   96c50:	4b17      	ldr	r3, [pc, #92]	; (96cb0 <DD_INIT_PIO+0x120>)
   96c52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   96c56:	631a      	str	r2, [r3, #48]	; 0x30
 PIOD->PIO_SODR = 1<<2;
   96c58:	4b1e      	ldr	r3, [pc, #120]	; (96cd4 <DD_INIT_PIO+0x144>)
   96c5a:	2204      	movs	r2, #4
   96c5c:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   96c5e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   96c62:	2055      	movs	r0, #85	; 0x55
   96c64:	4b1c      	ldr	r3, [pc, #112]	; (96cd8 <DD_INIT_PIO+0x148>)
   96c66:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   96c68:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   96c6c:	2055      	movs	r0, #85	; 0x55
   96c6e:	4b1a      	ldr	r3, [pc, #104]	; (96cd8 <DD_INIT_PIO+0x148>)
   96c70:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   96c72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96c76:	2001      	movs	r0, #1
   96c78:	4b17      	ldr	r3, [pc, #92]	; (96cd8 <DD_INIT_PIO+0x148>)
   96c7a:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   96c7c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96c80:	2000      	movs	r0, #0
   96c82:	4b15      	ldr	r3, [pc, #84]	; (96cd8 <DD_INIT_PIO+0x148>)
   96c84:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   96c86:	4915      	ldr	r1, [pc, #84]	; (96cdc <DD_INIT_PIO+0x14c>)
   96c88:	2003      	movs	r0, #3
   96c8a:	4b13      	ldr	r3, [pc, #76]	; (96cd8 <DD_INIT_PIO+0x148>)
   96c8c:	4798      	blx	r3


}
   96c8e:	bf00      	nop
   96c90:	bd80      	pop	{r7, pc}
   96c92:	bf00      	nop
   96c94:	400e0e00 	.word	0x400e0e00
   96c98:	50494f00 	.word	0x50494f00
   96c9c:	21c9ecfc 	.word	0x21c9ecfc
   96ca0:	20f0b86c 	.word	0x20f0b86c
   96ca4:	01094494 	.word	0x01094494
   96ca8:	1e361303 	.word	0x1e361303
   96cac:	00391000 	.word	0x00391000
   96cb0:	400e1000 	.word	0x400e1000
   96cb4:	0fe7f700 	.word	0x0fe7f700
   96cb8:	0fe59300 	.word	0x0fe59300
   96cbc:	f01800ff 	.word	0xf01800ff
   96cc0:	400e1200 	.word	0x400e1200
   96cc4:	7f9ffffe 	.word	0x7f9ffffe
   96cc8:	18e1fffe 	.word	0x18e1fffe
   96ccc:	671e0000 	.word	0x671e0000
   96cd0:	80600001 	.word	0x80600001
   96cd4:	400e1400 	.word	0x400e1400
   96cd8:	0009a64d 	.word	0x0009a64d
   96cdc:	30000001 	.word	0x30000001

00096ce0 <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   96ce0:	b480      	push	{r7}
   96ce2:	b083      	sub	sp, #12
   96ce4:	af00      	add	r7, sp, #0
   96ce6:	6078      	str	r0, [r7, #4]
   96ce8:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   96cea:	687b      	ldr	r3, [r7, #4]
   96cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96cf0:	d01a      	beq.n	96d28 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   96cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96cf6:	d803      	bhi.n	96d00 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   96cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96cfc:	d007      	beq.n	96d0e <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   96cfe:	e03a      	b.n	96d76 <DD_DIS_PERI_AND_RESET_PIO+0x96>
   96d00:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96d04:	d01d      	beq.n	96d42 <DD_DIS_PERI_AND_RESET_PIO+0x62>
   96d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96d0a:	d027      	beq.n	96d5c <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   96d0c:	e033      	b.n	96d76 <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   96d0e:	4a1d      	ldr	r2, [pc, #116]	; (96d84 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   96d10:	2101      	movs	r1, #1
   96d12:	683b      	ldr	r3, [r7, #0]
   96d14:	fa01 f303 	lsl.w	r3, r1, r3
   96d18:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   96d1a:	4a1a      	ldr	r2, [pc, #104]	; (96d84 <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   96d1c:	2101      	movs	r1, #1
   96d1e:	683b      	ldr	r3, [r7, #0]
   96d20:	fa01 f303 	lsl.w	r3, r1, r3
   96d24:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96d26:	e026      	b.n	96d76 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   96d28:	4a17      	ldr	r2, [pc, #92]	; (96d88 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   96d2a:	2101      	movs	r1, #1
   96d2c:	683b      	ldr	r3, [r7, #0]
   96d2e:	fa01 f303 	lsl.w	r3, r1, r3
   96d32:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   96d34:	4a14      	ldr	r2, [pc, #80]	; (96d88 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   96d36:	2101      	movs	r1, #1
   96d38:	683b      	ldr	r3, [r7, #0]
   96d3a:	fa01 f303 	lsl.w	r3, r1, r3
   96d3e:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96d40:	e019      	b.n	96d76 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   96d42:	4a12      	ldr	r2, [pc, #72]	; (96d8c <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   96d44:	2101      	movs	r1, #1
   96d46:	683b      	ldr	r3, [r7, #0]
   96d48:	fa01 f303 	lsl.w	r3, r1, r3
   96d4c:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   96d4e:	4a0f      	ldr	r2, [pc, #60]	; (96d8c <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   96d50:	2101      	movs	r1, #1
   96d52:	683b      	ldr	r3, [r7, #0]
   96d54:	fa01 f303 	lsl.w	r3, r1, r3
   96d58:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96d5a:	e00c      	b.n	96d76 <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   96d5c:	4a0c      	ldr	r2, [pc, #48]	; (96d90 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   96d5e:	2101      	movs	r1, #1
   96d60:	683b      	ldr	r3, [r7, #0]
   96d62:	fa01 f303 	lsl.w	r3, r1, r3
   96d66:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   96d68:	4a09      	ldr	r2, [pc, #36]	; (96d90 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   96d6a:	2101      	movs	r1, #1
   96d6c:	683b      	ldr	r3, [r7, #0]
   96d6e:	fa01 f303 	lsl.w	r3, r1, r3
   96d72:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96d74:	bf00      	nop
			
	}
}
   96d76:	bf00      	nop
   96d78:	4618      	mov	r0, r3
   96d7a:	370c      	adds	r7, #12
   96d7c:	46bd      	mov	sp, r7
   96d7e:	bc80      	pop	{r7}
   96d80:	4770      	bx	lr
   96d82:	bf00      	nop
   96d84:	400e0e00 	.word	0x400e0e00
   96d88:	400e1000 	.word	0x400e1000
   96d8c:	400e1200 	.word	0x400e1200
   96d90:	400e1400 	.word	0x400e1400

00096d94 <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   96d94:	b480      	push	{r7}
   96d96:	b083      	sub	sp, #12
   96d98:	af00      	add	r7, sp, #0
   96d9a:	6078      	str	r0, [r7, #4]
   96d9c:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   96d9e:	687b      	ldr	r3, [r7, #4]
   96da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96da4:	d014      	beq.n	96dd0 <DD_EN_PERI_AND_SET_PIO+0x3c>
   96da6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96daa:	d803      	bhi.n	96db4 <DD_EN_PERI_AND_SET_PIO+0x20>
   96dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96db0:	d007      	beq.n	96dc2 <DD_EN_PERI_AND_SET_PIO+0x2e>
   96db2:	e022      	b.n	96dfa <DD_EN_PERI_AND_SET_PIO+0x66>
   96db4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96db8:	d011      	beq.n	96dde <DD_EN_PERI_AND_SET_PIO+0x4a>
   96dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96dbe:	d015      	beq.n	96dec <DD_EN_PERI_AND_SET_PIO+0x58>
   96dc0:	e01b      	b.n	96dfa <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   96dc2:	4a11      	ldr	r2, [pc, #68]	; (96e08 <DD_EN_PERI_AND_SET_PIO+0x74>)
   96dc4:	2101      	movs	r1, #1
   96dc6:	683b      	ldr	r3, [r7, #0]
   96dc8:	fa01 f303 	lsl.w	r3, r1, r3
   96dcc:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   96dce:	e014      	b.n	96dfa <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   96dd0:	4a0e      	ldr	r2, [pc, #56]	; (96e0c <DD_EN_PERI_AND_SET_PIO+0x78>)
   96dd2:	2101      	movs	r1, #1
   96dd4:	683b      	ldr	r3, [r7, #0]
   96dd6:	fa01 f303 	lsl.w	r3, r1, r3
   96dda:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   96ddc:	e00d      	b.n	96dfa <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   96dde:	4a0c      	ldr	r2, [pc, #48]	; (96e10 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   96de0:	2101      	movs	r1, #1
   96de2:	683b      	ldr	r3, [r7, #0]
   96de4:	fa01 f303 	lsl.w	r3, r1, r3
   96de8:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   96dea:	e006      	b.n	96dfa <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   96dec:	4a09      	ldr	r2, [pc, #36]	; (96e14 <DD_EN_PERI_AND_SET_PIO+0x80>)
   96dee:	2101      	movs	r1, #1
   96df0:	683b      	ldr	r3, [r7, #0]
   96df2:	fa01 f303 	lsl.w	r3, r1, r3
   96df6:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   96df8:	bf00      	nop
		

		
	}
}
   96dfa:	bf00      	nop
   96dfc:	4618      	mov	r0, r3
   96dfe:	370c      	adds	r7, #12
   96e00:	46bd      	mov	sp, r7
   96e02:	bc80      	pop	{r7}
   96e04:	4770      	bx	lr
   96e06:	bf00      	nop
   96e08:	400e0e00 	.word	0x400e0e00
   96e0c:	400e1000 	.word	0x400e1000
   96e10:	400e1200 	.word	0x400e1200
   96e14:	400e1400 	.word	0x400e1400

00096e18 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   96e18:	b480      	push	{r7}
   96e1a:	b083      	sub	sp, #12
   96e1c:	af00      	add	r7, sp, #0
   96e1e:	6078      	str	r0, [r7, #4]
   96e20:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   96e22:	687b      	ldr	r3, [r7, #4]
   96e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96e28:	d014      	beq.n	96e54 <DD_SET_PIO+0x3c>
   96e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96e2e:	d803      	bhi.n	96e38 <DD_SET_PIO+0x20>
   96e30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96e34:	d007      	beq.n	96e46 <DD_SET_PIO+0x2e>
   96e36:	e022      	b.n	96e7e <DD_SET_PIO+0x66>
   96e38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96e3c:	d011      	beq.n	96e62 <DD_SET_PIO+0x4a>
   96e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96e42:	d015      	beq.n	96e70 <DD_SET_PIO+0x58>
   96e44:	e01b      	b.n	96e7e <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   96e46:	4a11      	ldr	r2, [pc, #68]	; (96e8c <DD_SET_PIO+0x74>)
   96e48:	2101      	movs	r1, #1
   96e4a:	683b      	ldr	r3, [r7, #0]
   96e4c:	fa01 f303 	lsl.w	r3, r1, r3
   96e50:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   96e52:	e014      	b.n	96e7e <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   96e54:	4a0e      	ldr	r2, [pc, #56]	; (96e90 <DD_SET_PIO+0x78>)
   96e56:	2101      	movs	r1, #1
   96e58:	683b      	ldr	r3, [r7, #0]
   96e5a:	fa01 f303 	lsl.w	r3, r1, r3
   96e5e:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   96e60:	e00d      	b.n	96e7e <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   96e62:	4a0c      	ldr	r2, [pc, #48]	; (96e94 <DD_SET_PIO+0x7c>)
   96e64:	2101      	movs	r1, #1
   96e66:	683b      	ldr	r3, [r7, #0]
   96e68:	fa01 f303 	lsl.w	r3, r1, r3
   96e6c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   96e6e:	e006      	b.n	96e7e <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   96e70:	4a09      	ldr	r2, [pc, #36]	; (96e98 <DD_SET_PIO+0x80>)
   96e72:	2101      	movs	r1, #1
   96e74:	683b      	ldr	r3, [r7, #0]
   96e76:	fa01 f303 	lsl.w	r3, r1, r3
   96e7a:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   96e7c:	bf00      	nop
				

	}
	
	return 0;
   96e7e:	2300      	movs	r3, #0
}
   96e80:	4618      	mov	r0, r3
   96e82:	370c      	adds	r7, #12
   96e84:	46bd      	mov	sp, r7
   96e86:	bc80      	pop	{r7}
   96e88:	4770      	bx	lr
   96e8a:	bf00      	nop
   96e8c:	400e0e00 	.word	0x400e0e00
   96e90:	400e1000 	.word	0x400e1000
   96e94:	400e1200 	.word	0x400e1200
   96e98:	400e1400 	.word	0x400e1400

00096e9c <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   96e9c:	b480      	push	{r7}
   96e9e:	b083      	sub	sp, #12
   96ea0:	af00      	add	r7, sp, #0
   96ea2:	6078      	str	r0, [r7, #4]
   96ea4:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   96ea6:	687b      	ldr	r3, [r7, #4]
   96ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96eac:	d014      	beq.n	96ed8 <DD_RESET_PIO+0x3c>
   96eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96eb2:	d803      	bhi.n	96ebc <DD_RESET_PIO+0x20>
   96eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96eb8:	d007      	beq.n	96eca <DD_RESET_PIO+0x2e>
   96eba:	e022      	b.n	96f02 <DD_RESET_PIO+0x66>
   96ebc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96ec0:	d011      	beq.n	96ee6 <DD_RESET_PIO+0x4a>
   96ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96ec6:	d015      	beq.n	96ef4 <DD_RESET_PIO+0x58>
   96ec8:	e01b      	b.n	96f02 <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   96eca:	4a11      	ldr	r2, [pc, #68]	; (96f10 <DD_RESET_PIO+0x74>)
   96ecc:	2101      	movs	r1, #1
   96ece:	683b      	ldr	r3, [r7, #0]
   96ed0:	fa01 f303 	lsl.w	r3, r1, r3
   96ed4:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   96ed6:	e014      	b.n	96f02 <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   96ed8:	4a0e      	ldr	r2, [pc, #56]	; (96f14 <DD_RESET_PIO+0x78>)
   96eda:	2101      	movs	r1, #1
   96edc:	683b      	ldr	r3, [r7, #0]
   96ede:	fa01 f303 	lsl.w	r3, r1, r3
   96ee2:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   96ee4:	e00d      	b.n	96f02 <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   96ee6:	4a0c      	ldr	r2, [pc, #48]	; (96f18 <DD_RESET_PIO+0x7c>)
   96ee8:	2101      	movs	r1, #1
   96eea:	683b      	ldr	r3, [r7, #0]
   96eec:	fa01 f303 	lsl.w	r3, r1, r3
   96ef0:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   96ef2:	e006      	b.n	96f02 <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   96ef4:	4a09      	ldr	r2, [pc, #36]	; (96f1c <DD_RESET_PIO+0x80>)
   96ef6:	2101      	movs	r1, #1
   96ef8:	683b      	ldr	r3, [r7, #0]
   96efa:	fa01 f303 	lsl.w	r3, r1, r3
   96efe:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   96f00:	bf00      	nop
		  		

	  }
	  
	  return 0;
   96f02:	2300      	movs	r3, #0
  }
   96f04:	4618      	mov	r0, r3
   96f06:	370c      	adds	r7, #12
   96f08:	46bd      	mov	sp, r7
   96f0a:	bc80      	pop	{r7}
   96f0c:	4770      	bx	lr
   96f0e:	bf00      	nop
   96f10:	400e0e00 	.word	0x400e0e00
   96f14:	400e1000 	.word	0x400e1000
   96f18:	400e1200 	.word	0x400e1200
   96f1c:	400e1400 	.word	0x400e1400

00096f20 <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   96f20:	b480      	push	{r7}
   96f22:	b085      	sub	sp, #20
   96f24:	af00      	add	r7, sp, #0
   96f26:	6078      	str	r0, [r7, #4]
   96f28:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   96f2a:	2300      	movs	r3, #0
   96f2c:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   96f2e:	2300      	movs	r3, #0
   96f30:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   96f32:	687b      	ldr	r3, [r7, #4]
   96f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96f38:	d01a      	beq.n	96f70 <DD_READ_PIO+0x50>
   96f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96f3e:	d803      	bhi.n	96f48 <DD_READ_PIO+0x28>
   96f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96f44:	d007      	beq.n	96f56 <DD_READ_PIO+0x36>
   96f46:	e03c      	b.n	96fc2 <DD_READ_PIO+0xa2>
   96f48:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96f4c:	d01d      	beq.n	96f8a <DD_READ_PIO+0x6a>
   96f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96f52:	d029      	beq.n	96fa8 <DD_READ_PIO+0x88>
   96f54:	e035      	b.n	96fc2 <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   96f56:	4b1d      	ldr	r3, [pc, #116]	; (96fcc <DD_READ_PIO+0xac>)
   96f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   96f5a:	2101      	movs	r1, #1
   96f5c:	683a      	ldr	r2, [r7, #0]
   96f5e:	fa01 f202 	lsl.w	r2, r1, r2
   96f62:	4013      	ands	r3, r2
   96f64:	2b00      	cmp	r3, #0
   96f66:	d101      	bne.n	96f6c <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   96f68:	2300      	movs	r3, #0
   96f6a:	e02a      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   96f6c:	2301      	movs	r3, #1
   96f6e:	e028      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   96f70:	4b17      	ldr	r3, [pc, #92]	; (96fd0 <DD_READ_PIO+0xb0>)
   96f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   96f74:	2101      	movs	r1, #1
   96f76:	683a      	ldr	r2, [r7, #0]
   96f78:	fa01 f202 	lsl.w	r2, r1, r2
   96f7c:	4013      	ands	r3, r2
   96f7e:	2b00      	cmp	r3, #0
   96f80:	d101      	bne.n	96f86 <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   96f82:	2300      	movs	r3, #0
   96f84:	e01d      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   96f86:	2301      	movs	r3, #1
   96f88:	e01b      	b.n	96fc2 <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   96f8a:	4b12      	ldr	r3, [pc, #72]	; (96fd4 <DD_READ_PIO+0xb4>)
   96f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   96f8e:	2101      	movs	r1, #1
   96f90:	683a      	ldr	r2, [r7, #0]
   96f92:	fa01 f202 	lsl.w	r2, r1, r2
   96f96:	4013      	ands	r3, r2
   96f98:	2b00      	cmp	r3, #0
   96f9a:	d101      	bne.n	96fa0 <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   96f9c:	2300      	movs	r3, #0
   96f9e:	e010      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   96fa0:	2301      	movs	r3, #1
   96fa2:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   96fa4:	897b      	ldrh	r3, [r7, #10]
   96fa6:	e00c      	b.n	96fc2 <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   96fa8:	4b0b      	ldr	r3, [pc, #44]	; (96fd8 <DD_READ_PIO+0xb8>)
   96faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   96fac:	2101      	movs	r1, #1
   96fae:	683a      	ldr	r2, [r7, #0]
   96fb0:	fa01 f202 	lsl.w	r2, r1, r2
   96fb4:	4013      	ands	r3, r2
   96fb6:	2b00      	cmp	r3, #0
   96fb8:	d101      	bne.n	96fbe <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   96fba:	2300      	movs	r3, #0
   96fbc:	e001      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   96fbe:	2301      	movs	r3, #1
   96fc0:	e7ff      	b.n	96fc2 <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   96fc2:	4618      	mov	r0, r3
   96fc4:	3714      	adds	r7, #20
   96fc6:	46bd      	mov	sp, r7
   96fc8:	bc80      	pop	{r7}
   96fca:	4770      	bx	lr
   96fcc:	400e0e00 	.word	0x400e0e00
   96fd0:	400e1000 	.word	0x400e1000
   96fd4:	400e1200 	.word	0x400e1200
   96fd8:	400e1400 	.word	0x400e1400

00096fdc <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   96fdc:	b480      	push	{r7}
   96fde:	b083      	sub	sp, #12
   96fe0:	af00      	add	r7, sp, #0
   96fe2:	4603      	mov	r3, r0
   96fe4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   96fe6:	4909      	ldr	r1, [pc, #36]	; (9700c <NVIC_ClearPendingIRQ+0x30>)
   96fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   96fec:	095b      	lsrs	r3, r3, #5
   96fee:	79fa      	ldrb	r2, [r7, #7]
   96ff0:	f002 021f 	and.w	r2, r2, #31
   96ff4:	2001      	movs	r0, #1
   96ff6:	fa00 f202 	lsl.w	r2, r0, r2
   96ffa:	3360      	adds	r3, #96	; 0x60
   96ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97000:	bf00      	nop
   97002:	370c      	adds	r7, #12
   97004:	46bd      	mov	sp, r7
   97006:	bc80      	pop	{r7}
   97008:	4770      	bx	lr
   9700a:	bf00      	nop
   9700c:	e000e100 	.word	0xe000e100

00097010 <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   97010:	b580      	push	{r7, lr}
   97012:	b084      	sub	sp, #16
   97014:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   97016:	4b0b      	ldr	r3, [pc, #44]	; (97044 <UART_Handler+0x34>)
   97018:	695b      	ldr	r3, [r3, #20]
   9701a:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   9701c:	4b09      	ldr	r3, [pc, #36]	; (97044 <UART_Handler+0x34>)
   9701e:	699b      	ldr	r3, [r3, #24]
   97020:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   97022:	79fb      	ldrb	r3, [r7, #7]
   97024:	4618      	mov	r0, r3
   97026:	4b08      	ldr	r3, [pc, #32]	; (97048 <UART_Handler+0x38>)
   97028:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   9702a:	2300      	movs	r3, #0
   9702c:	60fb      	str	r3, [r7, #12]
   9702e:	e002      	b.n	97036 <UART_Handler+0x26>
   97030:	68fb      	ldr	r3, [r7, #12]
   97032:	3301      	adds	r3, #1
   97034:	60fb      	str	r3, [r7, #12]
   97036:	68fb      	ldr	r3, [r7, #12]
   97038:	2bfe      	cmp	r3, #254	; 0xfe
   9703a:	d9f9      	bls.n	97030 <UART_Handler+0x20>
		{
			;
		}
	}

}
   9703c:	bf00      	nop
   9703e:	3710      	adds	r7, #16
   97040:	46bd      	mov	sp, r7
   97042:	bd80      	pop	{r7, pc}
   97044:	400e0800 	.word	0x400e0800
   97048:	00098a51 	.word	0x00098a51

0009704c <TC0_Handler>:


void TC0_Handler()
{
   9704c:	b580      	push	{r7, lr}
   9704e:	b082      	sub	sp, #8
   97050:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   97052:	2100      	movs	r1, #0
   97054:	4807      	ldr	r0, [pc, #28]	; (97074 <TC0_Handler+0x28>)
   97056:	4b08      	ldr	r3, [pc, #32]	; (97078 <TC0_Handler+0x2c>)
   97058:	4798      	blx	r3
   9705a:	4603      	mov	r3, r0
   9705c:	f003 0310 	and.w	r3, r3, #16
   97060:	2b00      	cmp	r3, #0
   97062:	d003      	beq.n	9706c <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   97064:	4b05      	ldr	r3, [pc, #20]	; (9707c <TC0_Handler+0x30>)
   97066:	4798      	blx	r3
   97068:	4603      	mov	r3, r0
   9706a:	71fb      	strb	r3, [r7, #7]
	}
}
   9706c:	bf00      	nop
   9706e:	3708      	adds	r7, #8
   97070:	46bd      	mov	sp, r7
   97072:	bd80      	pop	{r7, pc}
   97074:	40080000 	.word	0x40080000
   97078:	0009acf1 	.word	0x0009acf1
   9707c:	00092b25 	.word	0x00092b25

00097080 <TC6_Handler>:

void TC6_Handler()
{
   97080:	b580      	push	{r7, lr}
   97082:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   97084:	2021      	movs	r0, #33	; 0x21
   97086:	4b04      	ldr	r3, [pc, #16]	; (97098 <TC6_Handler+0x18>)
   97088:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   9708a:	2100      	movs	r1, #0
   9708c:	4803      	ldr	r0, [pc, #12]	; (9709c <TC6_Handler+0x1c>)
   9708e:	4b04      	ldr	r3, [pc, #16]	; (970a0 <TC6_Handler+0x20>)
   97090:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   97092:	bf00      	nop
   97094:	bd80      	pop	{r7, pc}
   97096:	bf00      	nop
   97098:	00096fdd 	.word	0x00096fdd
   9709c:	40088000 	.word	0x40088000
   970a0:	0009acf1 	.word	0x0009acf1

000970a4 <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   970a4:	b580      	push	{r7, lr}
   970a6:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   970a8:	201e      	movs	r0, #30
   970aa:	4b04      	ldr	r3, [pc, #16]	; (970bc <TC3_Handler+0x18>)
   970ac:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   970ae:	2100      	movs	r1, #0
   970b0:	4803      	ldr	r0, [pc, #12]	; (970c0 <TC3_Handler+0x1c>)
   970b2:	4b04      	ldr	r3, [pc, #16]	; (970c4 <TC3_Handler+0x20>)
   970b4:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   970b6:	bf00      	nop
   970b8:	bd80      	pop	{r7, pc}
   970ba:	bf00      	nop
   970bc:	00096fdd 	.word	0x00096fdd
   970c0:	40084000 	.word	0x40084000
   970c4:	0009acf1 	.word	0x0009acf1

000970c8 <SysTick_Handler>:

void SysTick_Handler(void)
{
   970c8:	b580      	push	{r7, lr}
   970ca:	b082      	sub	sp, #8
   970cc:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   970ce:	4b04      	ldr	r3, [pc, #16]	; (970e0 <SysTick_Handler+0x18>)
   970d0:	4798      	blx	r3
   970d2:	4603      	mov	r3, r0
   970d4:	71fb      	strb	r3, [r7, #7]
   970d6:	bf00      	nop
   970d8:	3708      	adds	r7, #8
   970da:	46bd      	mov	sp, r7
   970dc:	bd80      	pop	{r7, pc}
   970de:	bf00      	nop
   970e0:	00093025 	.word	0x00093025

000970e4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   970e4:	b480      	push	{r7}
   970e6:	b083      	sub	sp, #12
   970e8:	af00      	add	r7, sp, #0
   970ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   970ec:	687b      	ldr	r3, [r7, #4]
   970ee:	2b07      	cmp	r3, #7
   970f0:	d825      	bhi.n	9713e <osc_get_rate+0x5a>
   970f2:	a201      	add	r2, pc, #4	; (adr r2, 970f8 <osc_get_rate+0x14>)
   970f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   970f8:	00097119 	.word	0x00097119
   970fc:	0009711f 	.word	0x0009711f
   97100:	00097125 	.word	0x00097125
   97104:	0009712b 	.word	0x0009712b
   97108:	0009712f 	.word	0x0009712f
   9710c:	00097133 	.word	0x00097133
   97110:	00097137 	.word	0x00097137
   97114:	0009713b 	.word	0x0009713b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   97118:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9711c:	e010      	b.n	97140 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9711e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   97122:	e00d      	b.n	97140 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   97124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   97128:	e00a      	b.n	97140 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9712a:	4b08      	ldr	r3, [pc, #32]	; (9714c <osc_get_rate+0x68>)
   9712c:	e008      	b.n	97140 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9712e:	4b08      	ldr	r3, [pc, #32]	; (97150 <osc_get_rate+0x6c>)
   97130:	e006      	b.n	97140 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   97132:	4b08      	ldr	r3, [pc, #32]	; (97154 <osc_get_rate+0x70>)
   97134:	e004      	b.n	97140 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   97136:	4b07      	ldr	r3, [pc, #28]	; (97154 <osc_get_rate+0x70>)
   97138:	e002      	b.n	97140 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9713a:	4b06      	ldr	r3, [pc, #24]	; (97154 <osc_get_rate+0x70>)
   9713c:	e000      	b.n	97140 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9713e:	2300      	movs	r3, #0
}
   97140:	4618      	mov	r0, r3
   97142:	370c      	adds	r7, #12
   97144:	46bd      	mov	sp, r7
   97146:	bc80      	pop	{r7}
   97148:	4770      	bx	lr
   9714a:	bf00      	nop
   9714c:	003d0900 	.word	0x003d0900
   97150:	007a1200 	.word	0x007a1200
   97154:	00b71b00 	.word	0x00b71b00

00097158 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   97158:	b580      	push	{r7, lr}
   9715a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9715c:	2006      	movs	r0, #6
   9715e:	4b04      	ldr	r3, [pc, #16]	; (97170 <sysclk_get_main_hz+0x18>)
   97160:	4798      	blx	r3
   97162:	4602      	mov	r2, r0
   97164:	4613      	mov	r3, r2
   97166:	00db      	lsls	r3, r3, #3
   97168:	1a9b      	subs	r3, r3, r2
   9716a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9716c:	4618      	mov	r0, r3
   9716e:	bd80      	pop	{r7, pc}
   97170:	000970e5 	.word	0x000970e5

00097174 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   97174:	b580      	push	{r7, lr}
   97176:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   97178:	4b02      	ldr	r3, [pc, #8]	; (97184 <sysclk_get_cpu_hz+0x10>)
   9717a:	4798      	blx	r3
   9717c:	4603      	mov	r3, r0
   9717e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   97180:	4618      	mov	r0, r3
   97182:	bd80      	pop	{r7, pc}
   97184:	00097159 	.word	0x00097159

00097188 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   97188:	b580      	push	{r7, lr}
   9718a:	b082      	sub	sp, #8
   9718c:	af00      	add	r7, sp, #0
   9718e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   97190:	6878      	ldr	r0, [r7, #4]
   97192:	4b03      	ldr	r3, [pc, #12]	; (971a0 <sysclk_enable_peripheral_clock+0x18>)
   97194:	4798      	blx	r3
}
   97196:	bf00      	nop
   97198:	3708      	adds	r7, #8
   9719a:	46bd      	mov	sp, r7
   9719c:	bd80      	pop	{r7, pc}
   9719e:	bf00      	nop
   971a0:	0009abcd 	.word	0x0009abcd

000971a4 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   971a4:	b580      	push	{r7, lr}
   971a6:	b082      	sub	sp, #8
   971a8:	af00      	add	r7, sp, #0
   971aa:	6078      	str	r0, [r7, #4]
   971ac:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   971ae:	4b10      	ldr	r3, [pc, #64]	; (971f0 <twi_master_setup+0x4c>)
   971b0:	4798      	blx	r3
   971b2:	4602      	mov	r2, r0
   971b4:	683b      	ldr	r3, [r7, #0]
   971b6:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   971b8:	683b      	ldr	r3, [r7, #0]
   971ba:	2200      	movs	r2, #0
   971bc:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   971be:	687b      	ldr	r3, [r7, #4]
   971c0:	4a0c      	ldr	r2, [pc, #48]	; (971f4 <twi_master_setup+0x50>)
   971c2:	4293      	cmp	r3, r2
   971c4:	d103      	bne.n	971ce <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   971c6:	2016      	movs	r0, #22
   971c8:	4b0b      	ldr	r3, [pc, #44]	; (971f8 <twi_master_setup+0x54>)
   971ca:	4798      	blx	r3
   971cc:	e006      	b.n	971dc <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   971ce:	687b      	ldr	r3, [r7, #4]
   971d0:	4a0a      	ldr	r2, [pc, #40]	; (971fc <twi_master_setup+0x58>)
   971d2:	4293      	cmp	r3, r2
   971d4:	d102      	bne.n	971dc <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   971d6:	2017      	movs	r0, #23
   971d8:	4b07      	ldr	r3, [pc, #28]	; (971f8 <twi_master_setup+0x54>)
   971da:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   971dc:	6839      	ldr	r1, [r7, #0]
   971de:	6878      	ldr	r0, [r7, #4]
   971e0:	4b07      	ldr	r3, [pc, #28]	; (97200 <twi_master_setup+0x5c>)
   971e2:	4798      	blx	r3
   971e4:	4603      	mov	r3, r0
}
   971e6:	4618      	mov	r0, r3
   971e8:	3708      	adds	r7, #8
   971ea:	46bd      	mov	sp, r7
   971ec:	bd80      	pop	{r7, pc}
   971ee:	bf00      	nop
   971f0:	00097175 	.word	0x00097175
   971f4:	4008c000 	.word	0x4008c000
   971f8:	00097189 	.word	0x00097189
   971fc:	40090000 	.word	0x40090000
   97200:	00080629 	.word	0x00080629

00097204 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   97204:	b580      	push	{r7, lr}
   97206:	b086      	sub	sp, #24
   97208:	af00      	add	r7, sp, #0
   9720a:	6078      	str	r0, [r7, #4]
   9720c:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   9720e:	4b63      	ldr	r3, [pc, #396]	; (9739c <twi_master_write1+0x198>)
   97210:	2200      	movs	r2, #0
   97212:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   97214:	4b62      	ldr	r3, [pc, #392]	; (973a0 <twi_master_write1+0x19c>)
   97216:	681b      	ldr	r3, [r3, #0]
   97218:	3301      	adds	r3, #1
   9721a:	4a61      	ldr	r2, [pc, #388]	; (973a0 <twi_master_write1+0x19c>)
   9721c:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   9721e:	4b60      	ldr	r3, [pc, #384]	; (973a0 <twi_master_write1+0x19c>)
   97220:	681b      	ldr	r3, [r3, #0]
   97222:	2b01      	cmp	r3, #1
   97224:	dd04      	ble.n	97230 <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   97226:	2200      	movs	r2, #0
   97228:	2100      	movs	r1, #0
   9722a:	203d      	movs	r0, #61	; 0x3d
   9722c:	4b5d      	ldr	r3, [pc, #372]	; (973a4 <twi_master_write1+0x1a0>)
   9722e:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   97230:	495d      	ldr	r1, [pc, #372]	; (973a8 <twi_master_write1+0x1a4>)
   97232:	485e      	ldr	r0, [pc, #376]	; (973ac <twi_master_write1+0x1a8>)
   97234:	4b5e      	ldr	r3, [pc, #376]	; (973b0 <twi_master_write1+0x1ac>)
   97236:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   97238:	683b      	ldr	r3, [r7, #0]
   9723a:	68db      	ldr	r3, [r3, #12]
   9723c:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   9723e:	683b      	ldr	r3, [r7, #0]
   97240:	689b      	ldr	r3, [r3, #8]
   97242:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   97244:	4b5b      	ldr	r3, [pc, #364]	; (973b4 <twi_master_write1+0x1b0>)
   97246:	2200      	movs	r2, #0
   97248:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   9724a:	697b      	ldr	r3, [r7, #20]
   9724c:	2b00      	cmp	r3, #0
   9724e:	d104      	bne.n	9725a <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   97250:	4b53      	ldr	r3, [pc, #332]	; (973a0 <twi_master_write1+0x19c>)
   97252:	2200      	movs	r2, #0
   97254:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   97256:	2301      	movs	r3, #1
   97258:	e09c      	b.n	97394 <twi_master_write1+0x190>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   9725a:	687b      	ldr	r3, [r7, #4]
   9725c:	2200      	movs	r2, #0
   9725e:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   97260:	683b      	ldr	r3, [r7, #0]
   97262:	7c1b      	ldrb	r3, [r3, #16]
   97264:	041b      	lsls	r3, r3, #16
   97266:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   9726a:	683b      	ldr	r3, [r7, #0]
   9726c:	685b      	ldr	r3, [r3, #4]
   9726e:	021b      	lsls	r3, r3, #8
   97270:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   97274:	431a      	orrs	r2, r3
   97276:	687b      	ldr	r3, [r7, #4]
   97278:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   9727a:	687b      	ldr	r3, [r7, #4]
   9727c:	2200      	movs	r2, #0
   9727e:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   97280:	683a      	ldr	r2, [r7, #0]
   97282:	683b      	ldr	r3, [r7, #0]
   97284:	685b      	ldr	r3, [r3, #4]
   97286:	4619      	mov	r1, r3
   97288:	4610      	mov	r0, r2
   9728a:	4b4b      	ldr	r3, [pc, #300]	; (973b8 <twi_master_write1+0x1b4>)
   9728c:	4798      	blx	r3
   9728e:	4602      	mov	r2, r0
   97290:	687b      	ldr	r3, [r7, #4]
   97292:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   97294:	e033      	b.n	972fe <twi_master_write1+0xfa>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   97296:	687b      	ldr	r3, [r7, #4]
   97298:	6a1b      	ldr	r3, [r3, #32]
   9729a:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   9729c:	68fb      	ldr	r3, [r7, #12]
   9729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   972a2:	2b00      	cmp	r3, #0
   972a4:	d007      	beq.n	972b6 <twi_master_write1+0xb2>
			iic_nack = true;
   972a6:	4b43      	ldr	r3, [pc, #268]	; (973b4 <twi_master_write1+0x1b0>)
   972a8:	2201      	movs	r2, #1
   972aa:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   972ac:	4b3c      	ldr	r3, [pc, #240]	; (973a0 <twi_master_write1+0x19c>)
   972ae:	2200      	movs	r2, #0
   972b0:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   972b2:	2305      	movs	r3, #5
   972b4:	e06e      	b.n	97394 <twi_master_write1+0x190>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   972b6:	68fb      	ldr	r3, [r7, #12]
   972b8:	f003 0304 	and.w	r3, r3, #4
   972bc:	2b00      	cmp	r3, #0
   972be:	d114      	bne.n	972ea <twi_master_write1+0xe6>
			if(func_timer > 3)
   972c0:	4b36      	ldr	r3, [pc, #216]	; (9739c <twi_master_write1+0x198>)
   972c2:	681b      	ldr	r3, [r3, #0]
   972c4:	2b03      	cmp	r3, #3
   972c6:	dd1a      	ble.n	972fe <twi_master_write1+0xfa>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   972c8:	4b34      	ldr	r3, [pc, #208]	; (9739c <twi_master_write1+0x198>)
   972ca:	2200      	movs	r2, #0
   972cc:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   972ce:	687b      	ldr	r3, [r7, #4]
   972d0:	2280      	movs	r2, #128	; 0x80
   972d2:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   972d4:	4b39      	ldr	r3, [pc, #228]	; (973bc <twi_master_write1+0x1b8>)
   972d6:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   972d8:	4933      	ldr	r1, [pc, #204]	; (973a8 <twi_master_write1+0x1a4>)
   972da:	4834      	ldr	r0, [pc, #208]	; (973ac <twi_master_write1+0x1a8>)
   972dc:	4b34      	ldr	r3, [pc, #208]	; (973b0 <twi_master_write1+0x1ac>)
   972de:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   972e0:	4b2f      	ldr	r3, [pc, #188]	; (973a0 <twi_master_write1+0x19c>)
   972e2:	2200      	movs	r2, #0
   972e4:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   972e6:	2308      	movs	r3, #8
   972e8:	e054      	b.n	97394 <twi_master_write1+0x190>
			{
				continue;
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   972ea:	693b      	ldr	r3, [r7, #16]
   972ec:	1c5a      	adds	r2, r3, #1
   972ee:	613a      	str	r2, [r7, #16]
   972f0:	781b      	ldrb	r3, [r3, #0]
   972f2:	461a      	mov	r2, r3
   972f4:	687b      	ldr	r3, [r7, #4]
   972f6:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   972f8:	697b      	ldr	r3, [r7, #20]
   972fa:	3b01      	subs	r3, #1
   972fc:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   972fe:	697b      	ldr	r3, [r7, #20]
   97300:	2b00      	cmp	r3, #0
   97302:	d1c8      	bne.n	97296 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   97304:	687b      	ldr	r3, [r7, #4]
   97306:	6a1b      	ldr	r3, [r3, #32]
   97308:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   9730a:	68fb      	ldr	r3, [r7, #12]
   9730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   97310:	2b00      	cmp	r3, #0
   97312:	d004      	beq.n	9731e <twi_master_write1+0x11a>
			FUNC_ENTRY = 0;
   97314:	4b22      	ldr	r3, [pc, #136]	; (973a0 <twi_master_write1+0x19c>)
   97316:	2200      	movs	r2, #0
   97318:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   9731a:	2305      	movs	r3, #5
   9731c:	e03a      	b.n	97394 <twi_master_write1+0x190>
		}

		if (status & TWI_SR_TXRDY) {
   9731e:	68fb      	ldr	r3, [r7, #12]
   97320:	f003 0304 	and.w	r3, r3, #4
   97324:	2b00      	cmp	r3, #0
   97326:	d111      	bne.n	9734c <twi_master_write1+0x148>
			break;
		}
		
		if(func_timer > 3)
   97328:	4b1c      	ldr	r3, [pc, #112]	; (9739c <twi_master_write1+0x198>)
   9732a:	681b      	ldr	r3, [r3, #0]
   9732c:	2b03      	cmp	r3, #3
   9732e:	dde9      	ble.n	97304 <twi_master_write1+0x100>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   97330:	687b      	ldr	r3, [r7, #4]
   97332:	2280      	movs	r2, #128	; 0x80
   97334:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   97336:	4b21      	ldr	r3, [pc, #132]	; (973bc <twi_master_write1+0x1b8>)
   97338:	4798      	blx	r3
			FUNC_ENTRY = 0;
   9733a:	4b19      	ldr	r3, [pc, #100]	; (973a0 <twi_master_write1+0x19c>)
   9733c:	2200      	movs	r2, #0
   9733e:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   97340:	4919      	ldr	r1, [pc, #100]	; (973a8 <twi_master_write1+0x1a4>)
   97342:	481a      	ldr	r0, [pc, #104]	; (973ac <twi_master_write1+0x1a8>)
   97344:	4b1a      	ldr	r3, [pc, #104]	; (973b0 <twi_master_write1+0x1ac>)
   97346:	4798      	blx	r3
			return(TWI_BUSY);
   97348:	2308      	movs	r3, #8
   9734a:	e023      	b.n	97394 <twi_master_write1+0x190>
			FUNC_ENTRY = 0;
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
   9734c:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   9734e:	687b      	ldr	r3, [r7, #4]
   97350:	2202      	movs	r2, #2
   97352:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   97354:	e014      	b.n	97380 <twi_master_write1+0x17c>
					if(func_timer > 3)
   97356:	4b11      	ldr	r3, [pc, #68]	; (9739c <twi_master_write1+0x198>)
   97358:	681b      	ldr	r3, [r3, #0]
   9735a:	2b03      	cmp	r3, #3
   9735c:	dd10      	ble.n	97380 <twi_master_write1+0x17c>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   9735e:	4b0f      	ldr	r3, [pc, #60]	; (9739c <twi_master_write1+0x198>)
   97360:	2200      	movs	r2, #0
   97362:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   97364:	4b15      	ldr	r3, [pc, #84]	; (973bc <twi_master_write1+0x1b8>)
   97366:	4798      	blx	r3
			FUNC_ENTRY = 0;
   97368:	4b0d      	ldr	r3, [pc, #52]	; (973a0 <twi_master_write1+0x19c>)
   9736a:	2200      	movs	r2, #0
   9736c:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   9736e:	490e      	ldr	r1, [pc, #56]	; (973a8 <twi_master_write1+0x1a4>)
   97370:	480e      	ldr	r0, [pc, #56]	; (973ac <twi_master_write1+0x1a8>)
   97372:	4b0f      	ldr	r3, [pc, #60]	; (973b0 <twi_master_write1+0x1ac>)
   97374:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   97376:	687b      	ldr	r3, [r7, #4]
   97378:	2280      	movs	r2, #128	; 0x80
   9737a:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   9737c:	2308      	movs	r3, #8
   9737e:	e009      	b.n	97394 <twi_master_write1+0x190>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   97380:	687b      	ldr	r3, [r7, #4]
   97382:	6a1b      	ldr	r3, [r3, #32]
   97384:	f003 0301 	and.w	r3, r3, #1
   97388:	2b00      	cmp	r3, #0
   9738a:	d0e4      	beq.n	97356 <twi_master_write1+0x152>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   9738c:	4b04      	ldr	r3, [pc, #16]	; (973a0 <twi_master_write1+0x19c>)
   9738e:	2200      	movs	r2, #0
   97390:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   97392:	2300      	movs	r3, #0
}
   97394:	4618      	mov	r0, r3
   97396:	3718      	adds	r7, #24
   97398:	46bd      	mov	sp, r7
   9739a:	bd80      	pop	{r7, pc}
   9739c:	20071a6c 	.word	0x20071a6c
   973a0:	20071b28 	.word	0x20071b28
   973a4:	0009b805 	.word	0x0009b805
   973a8:	20070b10 	.word	0x20070b10
   973ac:	4008c000 	.word	0x4008c000
   973b0:	000971a5 	.word	0x000971a5
   973b4:	20071a63 	.word	0x20071a63
   973b8:	000973c1 	.word	0x000973c1
   973bc:	000974d9 	.word	0x000974d9

000973c0 <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   973c0:	b480      	push	{r7}
   973c2:	b085      	sub	sp, #20
   973c4:	af00      	add	r7, sp, #0
   973c6:	6078      	str	r0, [r7, #4]
   973c8:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   973ca:	683b      	ldr	r3, [r7, #0]
   973cc:	2b00      	cmp	r3, #0
   973ce:	d101      	bne.n	973d4 <twi_mk_addr+0x14>
	return 0;
   973d0:	2300      	movs	r3, #0
   973d2:	e01d      	b.n	97410 <twi_mk_addr+0x50>

	val = addr[0];
   973d4:	687b      	ldr	r3, [r7, #4]
   973d6:	781b      	ldrb	r3, [r3, #0]
   973d8:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   973da:	683b      	ldr	r3, [r7, #0]
   973dc:	2b01      	cmp	r3, #1
   973de:	dd09      	ble.n	973f4 <twi_mk_addr+0x34>
		val <<= 8;
   973e0:	68fb      	ldr	r3, [r7, #12]
   973e2:	021b      	lsls	r3, r3, #8
   973e4:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   973e6:	687b      	ldr	r3, [r7, #4]
   973e8:	3301      	adds	r3, #1
   973ea:	781b      	ldrb	r3, [r3, #0]
   973ec:	461a      	mov	r2, r3
   973ee:	68fb      	ldr	r3, [r7, #12]
   973f0:	4313      	orrs	r3, r2
   973f2:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   973f4:	683b      	ldr	r3, [r7, #0]
   973f6:	2b02      	cmp	r3, #2
   973f8:	dd09      	ble.n	9740e <twi_mk_addr+0x4e>
		val <<= 8;
   973fa:	68fb      	ldr	r3, [r7, #12]
   973fc:	021b      	lsls	r3, r3, #8
   973fe:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   97400:	687b      	ldr	r3, [r7, #4]
   97402:	3302      	adds	r3, #2
   97404:	781b      	ldrb	r3, [r3, #0]
   97406:	461a      	mov	r2, r3
   97408:	68fb      	ldr	r3, [r7, #12]
   9740a:	4313      	orrs	r3, r2
   9740c:	60fb      	str	r3, [r7, #12]
	}
	return val;
   9740e:	68fb      	ldr	r3, [r7, #12]
}
   97410:	4618      	mov	r0, r3
   97412:	3714      	adds	r7, #20
   97414:	46bd      	mov	sp, r7
   97416:	bc80      	pop	{r7}
   97418:	4770      	bx	lr
   9741a:	bf00      	nop

0009741c <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   9741c:	b580      	push	{r7, lr}
   9741e:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   97420:	4b06      	ldr	r3, [pc, #24]	; (9743c <DD_INIT_IIC+0x20>)
   97422:	4a07      	ldr	r2, [pc, #28]	; (97440 <DD_INIT_IIC+0x24>)
   97424:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   97428:	4b04      	ldr	r3, [pc, #16]	; (9743c <DD_INIT_IIC+0x20>)
   9742a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   9742e:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   97430:	4904      	ldr	r1, [pc, #16]	; (97444 <DD_INIT_IIC+0x28>)
   97432:	4805      	ldr	r0, [pc, #20]	; (97448 <DD_INIT_IIC+0x2c>)
   97434:	4b05      	ldr	r3, [pc, #20]	; (9744c <DD_INIT_IIC+0x30>)
   97436:	4798      	blx	r3
		
			
	
}
   97438:	bf00      	nop
   9743a:	bd80      	pop	{r7, pc}
   9743c:	400e0e00 	.word	0x400e0e00
   97440:	50494f00 	.word	0x50494f00
   97444:	20070b10 	.word	0x20070b10
   97448:	4008c000 	.word	0x4008c000
   9744c:	000971a5 	.word	0x000971a5

00097450 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   97450:	b580      	push	{r7, lr}
   97452:	b088      	sub	sp, #32
   97454:	af00      	add	r7, sp, #0
   97456:	4603      	mov	r3, r0
   97458:	460a      	mov	r2, r1
   9745a:	71fb      	strb	r3, [r7, #7]
   9745c:	4613      	mov	r3, r2
   9745e:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   97460:	4a1a      	ldr	r2, [pc, #104]	; (974cc <DD_IIC_SET_POT+0x7c>)
   97462:	f107 031c 	add.w	r3, r7, #28
   97466:	6810      	ldr	r0, [r2, #0]
   97468:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   9746a:	f107 0308 	add.w	r3, r7, #8
   9746e:	2200      	movs	r2, #0
   97470:	601a      	str	r2, [r3, #0]
   97472:	605a      	str	r2, [r3, #4]
   97474:	609a      	str	r2, [r3, #8]
   97476:	60da      	str	r2, [r3, #12]
   97478:	611a      	str	r2, [r3, #16]
   9747a:	f107 031c 	add.w	r3, r7, #28
   9747e:	613b      	str	r3, [r7, #16]
   97480:	2304      	movs	r3, #4
   97482:	617b      	str	r3, [r7, #20]
   97484:	79fb      	ldrb	r3, [r7, #7]
   97486:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   97488:	88bb      	ldrh	r3, [r7, #4]
   9748a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   9748e:	d818      	bhi.n	974c2 <DD_IIC_SET_POT+0x72>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   97490:	88bb      	ldrh	r3, [r7, #4]
   97492:	b2db      	uxtb	r3, r3
   97494:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   97496:	88bb      	ldrh	r3, [r7, #4]
   97498:	0a1b      	lsrs	r3, r3, #8
   9749a:	b29b      	uxth	r3, r3
   9749c:	b25b      	sxtb	r3, r3
   9749e:	f003 0303 	and.w	r3, r3, #3
   974a2:	b25b      	sxtb	r3, r3
   974a4:	f043 0304 	orr.w	r3, r3, #4
   974a8:	b25b      	sxtb	r3, r3
   974aa:	b2db      	uxtb	r3, r3
   974ac:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   974ae:	f107 031c 	add.w	r3, r7, #28
   974b2:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   974b4:	f107 0308 	add.w	r3, r7, #8
   974b8:	4619      	mov	r1, r3
   974ba:	4805      	ldr	r0, [pc, #20]	; (974d0 <DD_IIC_SET_POT+0x80>)
   974bc:	4b05      	ldr	r3, [pc, #20]	; (974d4 <DD_IIC_SET_POT+0x84>)
   974be:	4798      	blx	r3
   974c0:	e000      	b.n	974c4 <DD_IIC_SET_POT+0x74>
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
		 {
			 return;
   974c2:	bf00      	nop

			 iic_packet.buffer =  (void *)test_pattern_inc;
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
		 }

}
   974c4:	3720      	adds	r7, #32
   974c6:	46bd      	mov	sp, r7
   974c8:	bd80      	pop	{r7, pc}
   974ca:	bf00      	nop
   974cc:	000a89a4 	.word	0x000a89a4
   974d0:	4008c000 	.word	0x4008c000
   974d4:	00097205 	.word	0x00097205

000974d8 <clock_it>:
			
}


void clock_it(void)
{
   974d8:	b480      	push	{r7}
   974da:	af00      	add	r7, sp, #0
	return;
   974dc:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   974de:	46bd      	mov	sp, r7
   974e0:	bc80      	pop	{r7}
   974e2:	4770      	bx	lr

000974e4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   974e4:	b480      	push	{r7}
   974e6:	b083      	sub	sp, #12
   974e8:	af00      	add	r7, sp, #0
   974ea:	4603      	mov	r3, r0
   974ec:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   974ee:	4908      	ldr	r1, [pc, #32]	; (97510 <NVIC_EnableIRQ+0x2c>)
   974f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   974f4:	095b      	lsrs	r3, r3, #5
   974f6:	79fa      	ldrb	r2, [r7, #7]
   974f8:	f002 021f 	and.w	r2, r2, #31
   974fc:	2001      	movs	r0, #1
   974fe:	fa00 f202 	lsl.w	r2, r0, r2
   97502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97506:	bf00      	nop
   97508:	370c      	adds	r7, #12
   9750a:	46bd      	mov	sp, r7
   9750c:	bc80      	pop	{r7}
   9750e:	4770      	bx	lr
   97510:	e000e100 	.word	0xe000e100

00097514 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   97514:	b480      	push	{r7}
   97516:	b083      	sub	sp, #12
   97518:	af00      	add	r7, sp, #0
   9751a:	4603      	mov	r3, r0
   9751c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   9751e:	4909      	ldr	r1, [pc, #36]	; (97544 <NVIC_DisableIRQ+0x30>)
   97520:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97524:	095b      	lsrs	r3, r3, #5
   97526:	79fa      	ldrb	r2, [r7, #7]
   97528:	f002 021f 	and.w	r2, r2, #31
   9752c:	2001      	movs	r0, #1
   9752e:	fa00 f202 	lsl.w	r2, r0, r2
   97532:	3320      	adds	r3, #32
   97534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97538:	bf00      	nop
   9753a:	370c      	adds	r7, #12
   9753c:	46bd      	mov	sp, r7
   9753e:	bc80      	pop	{r7}
   97540:	4770      	bx	lr
   97542:	bf00      	nop
   97544:	e000e100 	.word	0xe000e100

00097548 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   97548:	b480      	push	{r7}
   9754a:	b083      	sub	sp, #12
   9754c:	af00      	add	r7, sp, #0
   9754e:	4603      	mov	r3, r0
   97550:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   97552:	4909      	ldr	r1, [pc, #36]	; (97578 <NVIC_ClearPendingIRQ+0x30>)
   97554:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97558:	095b      	lsrs	r3, r3, #5
   9755a:	79fa      	ldrb	r2, [r7, #7]
   9755c:	f002 021f 	and.w	r2, r2, #31
   97560:	2001      	movs	r0, #1
   97562:	fa00 f202 	lsl.w	r2, r0, r2
   97566:	3360      	adds	r3, #96	; 0x60
   97568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9756c:	bf00      	nop
   9756e:	370c      	adds	r7, #12
   97570:	46bd      	mov	sp, r7
   97572:	bc80      	pop	{r7}
   97574:	4770      	bx	lr
   97576:	bf00      	nop
   97578:	e000e100 	.word	0xe000e100

0009757c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   9757c:	b480      	push	{r7}
   9757e:	b083      	sub	sp, #12
   97580:	af00      	add	r7, sp, #0
   97582:	4603      	mov	r3, r0
   97584:	6039      	str	r1, [r7, #0]
   97586:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   97588:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9758c:	2b00      	cmp	r3, #0
   9758e:	da0b      	bge.n	975a8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   97590:	490d      	ldr	r1, [pc, #52]	; (975c8 <NVIC_SetPriority+0x4c>)
   97592:	79fb      	ldrb	r3, [r7, #7]
   97594:	f003 030f 	and.w	r3, r3, #15
   97598:	3b04      	subs	r3, #4
   9759a:	683a      	ldr	r2, [r7, #0]
   9759c:	b2d2      	uxtb	r2, r2
   9759e:	0112      	lsls	r2, r2, #4
   975a0:	b2d2      	uxtb	r2, r2
   975a2:	440b      	add	r3, r1
   975a4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   975a6:	e009      	b.n	975bc <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   975a8:	4908      	ldr	r1, [pc, #32]	; (975cc <NVIC_SetPriority+0x50>)
   975aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   975ae:	683a      	ldr	r2, [r7, #0]
   975b0:	b2d2      	uxtb	r2, r2
   975b2:	0112      	lsls	r2, r2, #4
   975b4:	b2d2      	uxtb	r2, r2
   975b6:	440b      	add	r3, r1
   975b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   975bc:	bf00      	nop
   975be:	370c      	adds	r7, #12
   975c0:	46bd      	mov	sp, r7
   975c2:	bc80      	pop	{r7}
   975c4:	4770      	bx	lr
   975c6:	bf00      	nop
   975c8:	e000ed00 	.word	0xe000ed00
   975cc:	e000e100 	.word	0xe000e100

000975d0 <DD_INIT_INT>:

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;


void DD_INIT_INT()
{
   975d0:	b580      	push	{r7, lr}
   975d2:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   975d4:	2008      	movs	r0, #8
   975d6:	4b2e      	ldr	r3, [pc, #184]	; (97690 <DD_INIT_INT+0xc0>)
   975d8:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   975da:	2008      	movs	r0, #8
   975dc:	4b2d      	ldr	r3, [pc, #180]	; (97694 <DD_INIT_INT+0xc4>)
   975de:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   975e0:	2100      	movs	r1, #0
   975e2:	2008      	movs	r0, #8
   975e4:	4b2c      	ldr	r3, [pc, #176]	; (97698 <DD_INIT_INT+0xc8>)
   975e6:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   975e8:	2008      	movs	r0, #8
   975ea:	4b2c      	ldr	r3, [pc, #176]	; (9769c <DD_INIT_INT+0xcc>)
   975ec:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   975ee:	2101      	movs	r1, #1
   975f0:	482b      	ldr	r0, [pc, #172]	; (976a0 <DD_INIT_INT+0xd0>)
   975f2:	4b2c      	ldr	r3, [pc, #176]	; (976a4 <DD_INIT_INT+0xd4>)
   975f4:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   975f6:	201b      	movs	r0, #27
   975f8:	4b25      	ldr	r3, [pc, #148]	; (97690 <DD_INIT_INT+0xc0>)
   975fa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   975fc:	201b      	movs	r0, #27
   975fe:	4b25      	ldr	r3, [pc, #148]	; (97694 <DD_INIT_INT+0xc4>)
   97600:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   97602:	2100      	movs	r1, #0
   97604:	201b      	movs	r0, #27
   97606:	4b24      	ldr	r3, [pc, #144]	; (97698 <DD_INIT_INT+0xc8>)
   97608:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   9760a:	201b      	movs	r0, #27
   9760c:	4b23      	ldr	r3, [pc, #140]	; (9769c <DD_INIT_INT+0xcc>)
   9760e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   97610:	201e      	movs	r0, #30
   97612:	4b1f      	ldr	r3, [pc, #124]	; (97690 <DD_INIT_INT+0xc0>)
   97614:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   97616:	201e      	movs	r0, #30
   97618:	4b1e      	ldr	r3, [pc, #120]	; (97694 <DD_INIT_INT+0xc4>)
   9761a:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   9761c:	2100      	movs	r1, #0
   9761e:	201e      	movs	r0, #30
   97620:	4b1d      	ldr	r3, [pc, #116]	; (97698 <DD_INIT_INT+0xc8>)
   97622:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   97624:	201e      	movs	r0, #30
   97626:	4b1d      	ldr	r3, [pc, #116]	; (9769c <DD_INIT_INT+0xcc>)
   97628:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   9762a:	2021      	movs	r0, #33	; 0x21
   9762c:	4b18      	ldr	r3, [pc, #96]	; (97690 <DD_INIT_INT+0xc0>)
   9762e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   97630:	2021      	movs	r0, #33	; 0x21
   97632:	4b18      	ldr	r3, [pc, #96]	; (97694 <DD_INIT_INT+0xc4>)
   97634:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   97636:	2100      	movs	r1, #0
   97638:	2021      	movs	r0, #33	; 0x21
   9763a:	4b17      	ldr	r3, [pc, #92]	; (97698 <DD_INIT_INT+0xc8>)
   9763c:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   9763e:	2021      	movs	r0, #33	; 0x21
   97640:	4b16      	ldr	r3, [pc, #88]	; (9769c <DD_INIT_INT+0xcc>)
   97642:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   97644:	4b18      	ldr	r3, [pc, #96]	; (976a8 <DD_INIT_INT+0xd8>)
   97646:	f04f 32ff 	mov.w	r2, #4294967295
   9764a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   9764e:	4b16      	ldr	r3, [pc, #88]	; (976a8 <DD_INIT_INT+0xd8>)
   97650:	f04f 32ff 	mov.w	r2, #4294967295
   97654:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   97658:	2100      	movs	r1, #0
   9765a:	2021      	movs	r0, #33	; 0x21
   9765c:	4b0e      	ldr	r3, [pc, #56]	; (97698 <DD_INIT_INT+0xc8>)
   9765e:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   97660:	4b11      	ldr	r3, [pc, #68]	; (976a8 <DD_INIT_INT+0xd8>)
   97662:	f04f 32ff 	mov.w	r2, #4294967295
   97666:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   97668:	4b0f      	ldr	r3, [pc, #60]	; (976a8 <DD_INIT_INT+0xd8>)
   9766a:	f04f 32ff 	mov.w	r2, #4294967295
   9766e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   97672:	4b0d      	ldr	r3, [pc, #52]	; (976a8 <DD_INIT_INT+0xd8>)
   97674:	f04f 32ff 	mov.w	r2, #4294967295
   97678:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   9767c:	2100      	movs	r1, #0
   9767e:	201e      	movs	r0, #30
   97680:	4b05      	ldr	r3, [pc, #20]	; (97698 <DD_INIT_INT+0xc8>)
   97682:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   97684:	4b08      	ldr	r3, [pc, #32]	; (976a8 <DD_INIT_INT+0xd8>)
   97686:	f04f 32ff 	mov.w	r2, #4294967295
   9768a:	60da      	str	r2, [r3, #12]
// 		NVIC_SetPriority(PIOB_IRQn, 15);
//  		NVIC_EnableIRQ(PIOB_IRQn);
		
		

}
   9768c:	bf00      	nop
   9768e:	bd80      	pop	{r7, pc}
   97690:	00097515 	.word	0x00097515
   97694:	00097549 	.word	0x00097549
   97698:	0009757d 	.word	0x0009757d
   9769c:	000974e5 	.word	0x000974e5
   976a0:	400e0800 	.word	0x400e0800
   976a4:	0009adbd 	.word	0x0009adbd
   976a8:	e000e100 	.word	0xe000e100

000976ac <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   976ac:	b590      	push	{r4, r7, lr}
   976ae:	b0c7      	sub	sp, #284	; 0x11c
   976b0:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   976b2:	4b4b      	ldr	r3, [pc, #300]	; (977e0 <DD_INIT_NVM+0x134>)
   976b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   976b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   976bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   976c0:	2300      	movs	r3, #0
   976c2:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   976c6:	2106      	movs	r1, #6
   976c8:	2000      	movs	r0, #0
   976ca:	4b46      	ldr	r3, [pc, #280]	; (977e4 <DD_INIT_NVM+0x138>)
   976cc:	4798      	blx	r3
   976ce:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   976d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   976d6:	2b00      	cmp	r3, #0
   976d8:	d176      	bne.n	977c8 <DD_INIT_NVM+0x11c>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   976da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   976de:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   976e2:	2300      	movs	r3, #0
   976e4:	2200      	movs	r2, #0
   976e6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   976ea:	4c3f      	ldr	r4, [pc, #252]	; (977e8 <DD_INIT_NVM+0x13c>)
   976ec:	47a0      	blx	r4
   976ee:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   976f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   976f6:	2b00      	cmp	r3, #0
   976f8:	d168      	bne.n	977cc <DD_INIT_NVM+0x120>
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   976fa:	2300      	movs	r3, #0
   976fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97700:	e010      	b.n	97724 <DD_INIT_NVM+0x78>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   97702:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   97706:	463b      	mov	r3, r7
   97708:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   9770c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   97710:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   97714:	3301      	adds	r3, #1
   97716:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   9771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9771e:	3301      	adds	r3, #1
   97720:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   97728:	2b3f      	cmp	r3, #63	; 0x3f
   9772a:	d9ea      	bls.n	97702 <DD_INIT_NVM+0x56>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   9772c:	2300      	movs	r3, #0
   9772e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97732:	e012      	b.n	9775a <DD_INIT_NVM+0xae>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   97734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   97738:	009b      	lsls	r3, r3, #2
   9773a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   9773e:	4413      	add	r3, r2
   97740:	681a      	ldr	r2, [r3, #0]
   97742:	463b      	mov	r3, r7
   97744:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   97748:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   9774c:	429a      	cmp	r2, r3
   9774e:	d13f      	bne.n	977d0 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   97750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   97754:	3301      	adds	r3, #1
   97756:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   9775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9775e:	2b3f      	cmp	r3, #63	; 0x3f
   97760:	d9e8      	bls.n	97734 <DD_INIT_NVM+0x88>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   97762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   97766:	f103 01ff 	add.w	r1, r3, #255	; 0xff
   9776a:	2300      	movs	r3, #0
   9776c:	2200      	movs	r2, #0
   9776e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   97772:	4c1e      	ldr	r4, [pc, #120]	; (977ec <DD_INIT_NVM+0x140>)
   97774:	47a0      	blx	r4
   97776:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   9777a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   9777e:	2b00      	cmp	r3, #0
   97780:	d128      	bne.n	977d4 <DD_INIT_NVM+0x128>
			return 0;
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   97782:	4639      	mov	r1, r7
   97784:	2301      	movs	r3, #1
   97786:	f44f 7280 	mov.w	r2, #256	; 0x100
   9778a:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   9778e:	4c18      	ldr	r4, [pc, #96]	; (977f0 <DD_INIT_NVM+0x144>)
   97790:	47a0      	blx	r4
   97792:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   97796:	bf00      	nop
   97798:	f207 1303 	addw	r3, r7, #259	; 0x103
   9779c:	4619      	mov	r1, r3
   9779e:	4815      	ldr	r0, [pc, #84]	; (977f4 <DD_INIT_NVM+0x148>)
   977a0:	4b15      	ldr	r3, [pc, #84]	; (977f8 <DD_INIT_NVM+0x14c>)
   977a2:	4798      	blx	r3
   977a4:	4603      	mov	r3, r0
   977a6:	2b00      	cmp	r3, #0
   977a8:	d1f6      	bne.n	97798 <DD_INIT_NVM+0xec>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   977aa:	bf00      	nop
   977ac:	f207 1303 	addw	r3, r7, #259	; 0x103
   977b0:	4619      	mov	r1, r3
   977b2:	4810      	ldr	r0, [pc, #64]	; (977f4 <DD_INIT_NVM+0x148>)
   977b4:	4b10      	ldr	r3, [pc, #64]	; (977f8 <DD_INIT_NVM+0x14c>)
   977b6:	4798      	blx	r3
   977b8:	4603      	mov	r3, r0
   977ba:	2b00      	cmp	r3, #0
   977bc:	d1f6      	bne.n	977ac <DD_INIT_NVM+0x100>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   977be:	4b0f      	ldr	r3, [pc, #60]	; (977fc <DD_INIT_NVM+0x150>)
   977c0:	4798      	blx	r3
   977c2:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
   977c6:	e006      	b.n	977d6 <DD_INIT_NVM+0x12a>
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
	if (ul_rc != FLASH_RC_OK)
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   977c8:	bf00      	nop
   977ca:	e004      	b.n	977d6 <DD_INIT_NVM+0x12a>
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   977cc:	bf00      	nop
   977ce:	e002      	b.n	977d6 <DD_INIT_NVM+0x12a>
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
			//printf("\n\r-F- data error\n\r");
			return 0;
   977d0:	bf00      	nop
   977d2:	e000      	b.n	977d6 <DD_INIT_NVM+0x12a>
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   977d4:	bf00      	nop

		//printf("-I- All tests done\n\r");



}
   977d6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   977da:	46bd      	mov	sp, r7
   977dc:	bd90      	pop	{r4, r7, pc}
   977de:	bf00      	nop
   977e0:	000fff00 	.word	0x000fff00
   977e4:	0008083d 	.word	0x0008083d
   977e8:	00080a61 	.word	0x00080a61
   977ec:	000809c5 	.word	0x000809c5
   977f0:	00080871 	.word	0x00080871
   977f4:	400e0800 	.word	0x400e0800
   977f8:	0009ae1d 	.word	0x0009ae1d
   977fc:	00080ba5 	.word	0x00080ba5

00097800 <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   97800:	b480      	push	{r7}
   97802:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   97804:	4b2b      	ldr	r3, [pc, #172]	; (978b4 <DD_INIT_PWM+0xb4>)
   97806:	4a2c      	ldr	r2, [pc, #176]	; (978b8 <DD_INIT_PWM+0xb8>)
   97808:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   9780c:	4b29      	ldr	r3, [pc, #164]	; (978b4 <DD_INIT_PWM+0xb4>)
   9780e:	4a2b      	ldr	r2, [pc, #172]	; (978bc <DD_INIT_PWM+0xbc>)
   97810:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97814:	4b27      	ldr	r3, [pc, #156]	; (978b4 <DD_INIT_PWM+0xb4>)
   97816:	4a29      	ldr	r2, [pc, #164]	; (978bc <DD_INIT_PWM+0xbc>)
   97818:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   9781c:	4b25      	ldr	r3, [pc, #148]	; (978b4 <DD_INIT_PWM+0xb4>)
   9781e:	4a27      	ldr	r2, [pc, #156]	; (978bc <DD_INIT_PWM+0xbc>)
   97820:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97824:	4b23      	ldr	r3, [pc, #140]	; (978b4 <DD_INIT_PWM+0xb4>)
   97826:	4a26      	ldr	r2, [pc, #152]	; (978c0 <DD_INIT_PWM+0xc0>)
   97828:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   9782c:	4b21      	ldr	r3, [pc, #132]	; (978b4 <DD_INIT_PWM+0xb4>)
   9782e:	22ff      	movs	r2, #255	; 0xff
   97830:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   97832:	4b20      	ldr	r3, [pc, #128]	; (978b4 <DD_INIT_PWM+0xb4>)
   97834:	f640 2206 	movw	r2, #2566	; 0xa06
   97838:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   9783a:	4b1e      	ldr	r3, [pc, #120]	; (978b4 <DD_INIT_PWM+0xb4>)
   9783c:	220b      	movs	r2, #11
   9783e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   97842:	4b1c      	ldr	r3, [pc, #112]	; (978b4 <DD_INIT_PWM+0xb4>)
   97844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   97848:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   9784c:	4b19      	ldr	r3, [pc, #100]	; (978b4 <DD_INIT_PWM+0xb4>)
   9784e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   97852:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   97856:	4b17      	ldr	r3, [pc, #92]	; (978b4 <DD_INIT_PWM+0xb4>)
   97858:	f646 5260 	movw	r2, #28000	; 0x6d60
   9785c:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   97860:	4b14      	ldr	r3, [pc, #80]	; (978b4 <DD_INIT_PWM+0xb4>)
   97862:	f640 325a 	movw	r2, #2906	; 0xb5a
   97866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   9786a:	4b12      	ldr	r3, [pc, #72]	; (978b4 <DD_INIT_PWM+0xb4>)
   9786c:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   97870:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   97874:	4b0f      	ldr	r3, [pc, #60]	; (978b4 <DD_INIT_PWM+0xb4>)
   97876:	f44f 7248 	mov.w	r2, #800	; 0x320
   9787a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   9787e:	4b0d      	ldr	r3, [pc, #52]	; (978b4 <DD_INIT_PWM+0xb4>)
   97880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   97884:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   97888:	4b0a      	ldr	r3, [pc, #40]	; (978b4 <DD_INIT_PWM+0xb4>)
   9788a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9788e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   97892:	4b08      	ldr	r3, [pc, #32]	; (978b4 <DD_INIT_PWM+0xb4>)
   97894:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   97898:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   9789c:	4b05      	ldr	r3, [pc, #20]	; (978b4 <DD_INIT_PWM+0xb4>)
   9789e:	f44f 7248 	mov.w	r2, #800	; 0x320
   978a2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   978a6:	4b03      	ldr	r3, [pc, #12]	; (978b4 <DD_INIT_PWM+0xb4>)
   978a8:	2237      	movs	r2, #55	; 0x37
   978aa:	605a      	str	r2, [r3, #4]


	
	
}
   978ac:	bf00      	nop
   978ae:	46bd      	mov	sp, r7
   978b0:	bc80      	pop	{r7}
   978b2:	4770      	bx	lr
   978b4:	40094000 	.word	0x40094000
   978b8:	50574d00 	.word	0x50574d00
   978bc:	00070605 	.word	0x00070605
   978c0:	00070604 	.word	0x00070604

000978c4 <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   978c4:	b480      	push	{r7}
   978c6:	b083      	sub	sp, #12
   978c8:	af00      	add	r7, sp, #0
   978ca:	4603      	mov	r3, r0
   978cc:	6039      	str	r1, [r7, #0]
   978ce:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   978d0:	4a06      	ldr	r2, [pc, #24]	; (978ec <DD_SET_DUTY+0x28>)
   978d2:	79fb      	ldrb	r3, [r7, #7]
   978d4:	3310      	adds	r3, #16
   978d6:	015b      	lsls	r3, r3, #5
   978d8:	4413      	add	r3, r2
   978da:	3304      	adds	r3, #4
   978dc:	683a      	ldr	r2, [r7, #0]
   978de:	601a      	str	r2, [r3, #0]
	 
	 return 0;
   978e0:	2300      	movs	r3, #0
 }
   978e2:	4618      	mov	r0, r3
   978e4:	370c      	adds	r7, #12
   978e6:	46bd      	mov	sp, r7
   978e8:	bc80      	pop	{r7}
   978ea:	4770      	bx	lr
   978ec:	40094000 	.word	0x40094000

000978f0 <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   978f0:	b480      	push	{r7}
   978f2:	b083      	sub	sp, #12
   978f4:	af00      	add	r7, sp, #0
   978f6:	4603      	mov	r3, r0
   978f8:	6039      	str	r1, [r7, #0]
   978fa:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   978fc:	4a06      	ldr	r2, [pc, #24]	; (97918 <DD_SET_PRDY+0x28>)
   978fe:	79fb      	ldrb	r3, [r7, #7]
   97900:	015b      	lsls	r3, r3, #5
   97902:	4413      	add	r3, r2
   97904:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97908:	683a      	ldr	r2, [r7, #0]
   9790a:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   9790c:	2300      	movs	r3, #0
 }
   9790e:	4618      	mov	r0, r3
   97910:	370c      	adds	r7, #12
   97912:	46bd      	mov	sp, r7
   97914:	bc80      	pop	{r7}
   97916:	4770      	bx	lr
   97918:	40094000 	.word	0x40094000

0009791c <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   9791c:	b490      	push	{r4, r7}
   9791e:	b082      	sub	sp, #8
   97920:	af00      	add	r7, sp, #0
   97922:	4603      	mov	r3, r0
   97924:	80fb      	strh	r3, [r7, #6]
   97926:	460b      	mov	r3, r1
   97928:	717b      	strb	r3, [r7, #5]
   9792a:	4613      	mov	r3, r2
   9792c:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   9792e:	4911      	ldr	r1, [pc, #68]	; (97974 <dd_spi_set_transfer_delay+0x58>)
   97930:	88fb      	ldrh	r3, [r7, #6]
   97932:	4810      	ldr	r0, [pc, #64]	; (97974 <dd_spi_set_transfer_delay+0x58>)
   97934:	88fa      	ldrh	r2, [r7, #6]
   97936:	320c      	adds	r2, #12
   97938:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   9793c:	b292      	uxth	r2, r2
   9793e:	330c      	adds	r3, #12
   97940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   97944:	4c0b      	ldr	r4, [pc, #44]	; (97974 <dd_spi_set_transfer_delay+0x58>)
   97946:	88fb      	ldrh	r3, [r7, #6]
   97948:	490a      	ldr	r1, [pc, #40]	; (97974 <dd_spi_set_transfer_delay+0x58>)
   9794a:	88fa      	ldrh	r2, [r7, #6]
   9794c:	320c      	adds	r2, #12
   9794e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   97952:	797a      	ldrb	r2, [r7, #5]
   97954:	0412      	lsls	r2, r2, #16
   97956:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   9795a:	7938      	ldrb	r0, [r7, #4]
   9795c:	0600      	lsls	r0, r0, #24
   9795e:	4302      	orrs	r2, r0
   97960:	430a      	orrs	r2, r1
   97962:	330c      	adds	r3, #12
   97964:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   97968:	bf00      	nop
   9796a:	3708      	adds	r7, #8
   9796c:	46bd      	mov	sp, r7
   9796e:	bc90      	pop	{r4, r7}
   97970:	4770      	bx	lr
   97972:	bf00      	nop
   97974:	40008000 	.word	0x40008000

00097978 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   97978:	b480      	push	{r7}
   9797a:	b083      	sub	sp, #12
   9797c:	af00      	add	r7, sp, #0
   9797e:	4603      	mov	r3, r0
   97980:	6039      	str	r1, [r7, #0]
   97982:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   97984:	490e      	ldr	r1, [pc, #56]	; (979c0 <dd_spi_set_bits_per_transfer+0x48>)
   97986:	88fb      	ldrh	r3, [r7, #6]
   97988:	480d      	ldr	r0, [pc, #52]	; (979c0 <dd_spi_set_bits_per_transfer+0x48>)
   9798a:	88fa      	ldrh	r2, [r7, #6]
   9798c:	320c      	adds	r2, #12
   9798e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97992:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   97996:	330c      	adds	r3, #12
   97998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   9799c:	4808      	ldr	r0, [pc, #32]	; (979c0 <dd_spi_set_bits_per_transfer+0x48>)
   9799e:	88fb      	ldrh	r3, [r7, #6]
   979a0:	4907      	ldr	r1, [pc, #28]	; (979c0 <dd_spi_set_bits_per_transfer+0x48>)
   979a2:	88fa      	ldrh	r2, [r7, #6]
   979a4:	320c      	adds	r2, #12
   979a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   979aa:	683a      	ldr	r2, [r7, #0]
   979ac:	430a      	orrs	r2, r1
   979ae:	330c      	adds	r3, #12
   979b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   979b4:	bf00      	nop
   979b6:	370c      	adds	r7, #12
   979b8:	46bd      	mov	sp, r7
   979ba:	bc80      	pop	{r7}
   979bc:	4770      	bx	lr
   979be:	bf00      	nop
   979c0:	40008000 	.word	0x40008000

000979c4 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   979c4:	b480      	push	{r7}
   979c6:	b083      	sub	sp, #12
   979c8:	af00      	add	r7, sp, #0
   979ca:	4603      	mov	r3, r0
   979cc:	6039      	str	r1, [r7, #0]
   979ce:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   979d0:	683b      	ldr	r3, [r7, #0]
   979d2:	2b00      	cmp	r3, #0
   979d4:	d00c      	beq.n	979f0 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   979d6:	490f      	ldr	r1, [pc, #60]	; (97a14 <dd_spi_set_clock_polarity+0x50>)
   979d8:	88fb      	ldrh	r3, [r7, #6]
   979da:	480e      	ldr	r0, [pc, #56]	; (97a14 <dd_spi_set_clock_polarity+0x50>)
   979dc:	88fa      	ldrh	r2, [r7, #6]
   979de:	320c      	adds	r2, #12
   979e0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   979e4:	f042 0201 	orr.w	r2, r2, #1
   979e8:	330c      	adds	r3, #12
   979ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   979ee:	e00b      	b.n	97a08 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   979f0:	4908      	ldr	r1, [pc, #32]	; (97a14 <dd_spi_set_clock_polarity+0x50>)
   979f2:	88fb      	ldrh	r3, [r7, #6]
   979f4:	4807      	ldr	r0, [pc, #28]	; (97a14 <dd_spi_set_clock_polarity+0x50>)
   979f6:	88fa      	ldrh	r2, [r7, #6]
   979f8:	320c      	adds	r2, #12
   979fa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   979fe:	f022 0201 	bic.w	r2, r2, #1
   97a02:	330c      	adds	r3, #12
   97a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   97a08:	bf00      	nop
   97a0a:	370c      	adds	r7, #12
   97a0c:	46bd      	mov	sp, r7
   97a0e:	bc80      	pop	{r7}
   97a10:	4770      	bx	lr
   97a12:	bf00      	nop
   97a14:	40008000 	.word	0x40008000

00097a18 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   97a18:	b480      	push	{r7}
   97a1a:	b083      	sub	sp, #12
   97a1c:	af00      	add	r7, sp, #0
   97a1e:	4603      	mov	r3, r0
   97a20:	6039      	str	r1, [r7, #0]
   97a22:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   97a24:	683b      	ldr	r3, [r7, #0]
   97a26:	2b00      	cmp	r3, #0
   97a28:	d00c      	beq.n	97a44 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   97a2a:	490f      	ldr	r1, [pc, #60]	; (97a68 <dd_spi_set_clock_phase+0x50>)
   97a2c:	88fb      	ldrh	r3, [r7, #6]
   97a2e:	480e      	ldr	r0, [pc, #56]	; (97a68 <dd_spi_set_clock_phase+0x50>)
   97a30:	88fa      	ldrh	r2, [r7, #6]
   97a32:	320c      	adds	r2, #12
   97a34:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97a38:	f042 0202 	orr.w	r2, r2, #2
   97a3c:	330c      	adds	r3, #12
   97a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   97a42:	e00b      	b.n	97a5c <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   97a44:	4908      	ldr	r1, [pc, #32]	; (97a68 <dd_spi_set_clock_phase+0x50>)
   97a46:	88fb      	ldrh	r3, [r7, #6]
   97a48:	4807      	ldr	r0, [pc, #28]	; (97a68 <dd_spi_set_clock_phase+0x50>)
   97a4a:	88fa      	ldrh	r2, [r7, #6]
   97a4c:	320c      	adds	r2, #12
   97a4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97a52:	f022 0202 	bic.w	r2, r2, #2
   97a56:	330c      	adds	r3, #12
   97a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   97a5c:	bf00      	nop
   97a5e:	370c      	adds	r7, #12
   97a60:	46bd      	mov	sp, r7
   97a62:	bc80      	pop	{r7}
   97a64:	4770      	bx	lr
   97a66:	bf00      	nop
   97a68:	40008000 	.word	0x40008000

00097a6c <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   97a6c:	b480      	push	{r7}
   97a6e:	b083      	sub	sp, #12
   97a70:	af00      	add	r7, sp, #0
   97a72:	4603      	mov	r3, r0
   97a74:	460a      	mov	r2, r1
   97a76:	80fb      	strh	r3, [r7, #6]
   97a78:	4613      	mov	r3, r2
   97a7a:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   97a7c:	797b      	ldrb	r3, [r7, #5]
   97a7e:	2b00      	cmp	r3, #0
   97a80:	d102      	bne.n	97a88 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   97a82:	f04f 33ff 	mov.w	r3, #4294967295
   97a86:	e01a      	b.n	97abe <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   97a88:	490f      	ldr	r1, [pc, #60]	; (97ac8 <dd_spi_set_baudrate_div+0x5c>)
   97a8a:	88fb      	ldrh	r3, [r7, #6]
   97a8c:	480e      	ldr	r0, [pc, #56]	; (97ac8 <dd_spi_set_baudrate_div+0x5c>)
   97a8e:	88fa      	ldrh	r2, [r7, #6]
   97a90:	320c      	adds	r2, #12
   97a92:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97a96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   97a9a:	330c      	adds	r3, #12
   97a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   97aa0:	4809      	ldr	r0, [pc, #36]	; (97ac8 <dd_spi_set_baudrate_div+0x5c>)
   97aa2:	88fb      	ldrh	r3, [r7, #6]
   97aa4:	4908      	ldr	r1, [pc, #32]	; (97ac8 <dd_spi_set_baudrate_div+0x5c>)
   97aa6:	88fa      	ldrh	r2, [r7, #6]
   97aa8:	320c      	adds	r2, #12
   97aaa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   97aae:	797a      	ldrb	r2, [r7, #5]
   97ab0:	0212      	lsls	r2, r2, #8
   97ab2:	b292      	uxth	r2, r2
   97ab4:	430a      	orrs	r2, r1
   97ab6:	330c      	adds	r3, #12
   97ab8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   97abc:	2300      	movs	r3, #0
}
   97abe:	4618      	mov	r0, r3
   97ac0:	370c      	adds	r7, #12
   97ac2:	46bd      	mov	sp, r7
   97ac4:	bc80      	pop	{r7}
   97ac6:	4770      	bx	lr
   97ac8:	40008000 	.word	0x40008000

00097acc <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   97acc:	b580      	push	{r7, lr}
   97ace:	b086      	sub	sp, #24
   97ad0:	af00      	add	r7, sp, #0
   97ad2:	6078      	str	r0, [r7, #4]
   97ad4:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   97ad6:	687b      	ldr	r3, [r7, #4]
   97ad8:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   97ada:	2300      	movs	r3, #0
   97adc:	617b      	str	r3, [r7, #20]
   97ade:	e029      	b.n	97b34 <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   97ae0:	697b      	ldr	r3, [r7, #20]
   97ae2:	005b      	lsls	r3, r3, #1
   97ae4:	68fa      	ldr	r2, [r7, #12]
   97ae6:	4413      	add	r3, r2
   97ae8:	881b      	ldrh	r3, [r3, #0]
   97aea:	4618      	mov	r0, r3
   97aec:	4b15      	ldr	r3, [pc, #84]	; (97b44 <DD_SPI_SET_POT+0x78>)
   97aee:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   97af0:	2300      	movs	r3, #0
   97af2:	613b      	str	r3, [r7, #16]
   97af4:	e002      	b.n	97afc <DD_SPI_SET_POT+0x30>
   97af6:	693b      	ldr	r3, [r7, #16]
   97af8:	3301      	adds	r3, #1
   97afa:	613b      	str	r3, [r7, #16]
   97afc:	693b      	ldr	r3, [r7, #16]
   97afe:	f242 720f 	movw	r2, #9999	; 0x270f
   97b02:	4293      	cmp	r3, r2
   97b04:	d9f7      	bls.n	97af6 <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   97b06:	bf00      	nop
   97b08:	4b0f      	ldr	r3, [pc, #60]	; (97b48 <DD_SPI_SET_POT+0x7c>)
   97b0a:	691b      	ldr	r3, [r3, #16]
   97b0c:	f003 0301 	and.w	r3, r3, #1
   97b10:	2b00      	cmp	r3, #0
   97b12:	d0f9      	beq.n	97b08 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   97b14:	f107 030b 	add.w	r3, r7, #11
   97b18:	4619      	mov	r1, r3
   97b1a:	480c      	ldr	r0, [pc, #48]	; (97b4c <DD_SPI_SET_POT+0x80>)
   97b1c:	4b0c      	ldr	r3, [pc, #48]	; (97b50 <DD_SPI_SET_POT+0x84>)
   97b1e:	4798      	blx	r3
		p_buffer[i] = data;
   97b20:	697b      	ldr	r3, [r7, #20]
   97b22:	005b      	lsls	r3, r3, #1
   97b24:	68fa      	ldr	r2, [r7, #12]
   97b26:	4413      	add	r3, r2
   97b28:	4a08      	ldr	r2, [pc, #32]	; (97b4c <DD_SPI_SET_POT+0x80>)
   97b2a:	8812      	ldrh	r2, [r2, #0]
   97b2c:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   97b2e:	697b      	ldr	r3, [r7, #20]
   97b30:	3301      	adds	r3, #1
   97b32:	617b      	str	r3, [r7, #20]
   97b34:	697a      	ldr	r2, [r7, #20]
   97b36:	683b      	ldr	r3, [r7, #0]
   97b38:	429a      	cmp	r2, r3
   97b3a:	d3d1      	bcc.n	97ae0 <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   97b3c:	bf00      	nop
   97b3e:	3718      	adds	r7, #24
   97b40:	46bd      	mov	sp, r7
   97b42:	bd80      	pop	{r7, pc}
   97b44:	00097bc5 	.word	0x00097bc5
   97b48:	40008000 	.word	0x40008000
   97b4c:	20071b2e 	.word	0x20071b2e
   97b50:	00097b55 	.word	0x00097b55

00097b54 <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   97b54:	b480      	push	{r7}
   97b56:	b085      	sub	sp, #20
   97b58:	af00      	add	r7, sp, #0
   97b5a:	6078      	str	r0, [r7, #4]
   97b5c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   97b5e:	f643 2398 	movw	r3, #15000	; 0x3a98
   97b62:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   97b64:	e006      	b.n	97b74 <dd_spi_read+0x20>
		if (!timeout--) {
   97b66:	68fb      	ldr	r3, [r7, #12]
   97b68:	1e5a      	subs	r2, r3, #1
   97b6a:	60fa      	str	r2, [r7, #12]
   97b6c:	2b00      	cmp	r3, #0
   97b6e:	d101      	bne.n	97b74 <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   97b70:	2301      	movs	r3, #1
   97b72:	e01e      	b.n	97bb2 <dd_spi_read+0x5e>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   97b74:	4b11      	ldr	r3, [pc, #68]	; (97bbc <dd_spi_read+0x68>)
   97b76:	691b      	ldr	r3, [r3, #16]
   97b78:	f003 0301 	and.w	r3, r3, #1
   97b7c:	2b00      	cmp	r3, #0
   97b7e:	d0f2      	beq.n	97b66 <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   97b80:	4b0e      	ldr	r3, [pc, #56]	; (97bbc <dd_spi_read+0x68>)
   97b82:	689b      	ldr	r3, [r3, #8]
   97b84:	4a0e      	ldr	r2, [pc, #56]	; (97bc0 <dd_spi_read+0x6c>)
   97b86:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   97b88:	4b0c      	ldr	r3, [pc, #48]	; (97bbc <dd_spi_read+0x68>)
   97b8a:	685b      	ldr	r3, [r3, #4]
   97b8c:	f003 0302 	and.w	r3, r3, #2
   97b90:	2b00      	cmp	r3, #0
   97b92:	d008      	beq.n	97ba6 <dd_spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   97b94:	4b0a      	ldr	r3, [pc, #40]	; (97bc0 <dd_spi_read+0x6c>)
   97b96:	681b      	ldr	r3, [r3, #0]
   97b98:	0c1b      	lsrs	r3, r3, #16
   97b9a:	b2db      	uxtb	r3, r3
   97b9c:	f003 030f 	and.w	r3, r3, #15
   97ba0:	b2da      	uxtb	r2, r3
   97ba2:	683b      	ldr	r3, [r7, #0]
   97ba4:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   97ba6:	4b06      	ldr	r3, [pc, #24]	; (97bc0 <dd_spi_read+0x6c>)
   97ba8:	681b      	ldr	r3, [r3, #0]
   97baa:	b29a      	uxth	r2, r3
   97bac:	687b      	ldr	r3, [r7, #4]
   97bae:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   97bb0:	2300      	movs	r3, #0
}
   97bb2:	4618      	mov	r0, r3
   97bb4:	3714      	adds	r7, #20
   97bb6:	46bd      	mov	sp, r7
   97bb8:	bc80      	pop	{r7}
   97bba:	4770      	bx	lr
   97bbc:	40008000 	.word	0x40008000
   97bc0:	20071b30 	.word	0x20071b30

00097bc4 <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   97bc4:	b480      	push	{r7}
   97bc6:	b085      	sub	sp, #20
   97bc8:	af00      	add	r7, sp, #0
   97bca:	4603      	mov	r3, r0
   97bcc:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   97bce:	f643 2398 	movw	r3, #15000	; 0x3a98
   97bd2:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   97bd4:	e006      	b.n	97be4 <dd_spi_write+0x20>
		if (!timeout--) {
   97bd6:	68fb      	ldr	r3, [r7, #12]
   97bd8:	1e5a      	subs	r2, r3, #1
   97bda:	60fa      	str	r2, [r7, #12]
   97bdc:	2b00      	cmp	r3, #0
   97bde:	d101      	bne.n	97be4 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   97be0:	2301      	movs	r3, #1
   97be2:	e00b      	b.n	97bfc <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   97be4:	4b08      	ldr	r3, [pc, #32]	; (97c08 <dd_spi_write+0x44>)
   97be6:	691b      	ldr	r3, [r3, #16]
   97be8:	f003 0302 	and.w	r3, r3, #2
   97bec:	2b00      	cmp	r3, #0
   97bee:	d0f2      	beq.n	97bd6 <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   97bf0:	88fb      	ldrh	r3, [r7, #6]
   97bf2:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   97bf4:	4a04      	ldr	r2, [pc, #16]	; (97c08 <dd_spi_write+0x44>)
   97bf6:	68bb      	ldr	r3, [r7, #8]
   97bf8:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   97bfa:	2300      	movs	r3, #0
}
   97bfc:	4618      	mov	r0, r3
   97bfe:	3714      	adds	r7, #20
   97c00:	46bd      	mov	sp, r7
   97c02:	bc80      	pop	{r7}
   97c04:	4770      	bx	lr
   97c06:	bf00      	nop
   97c08:	40008000 	.word	0x40008000

00097c0c <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   97c0c:	b580      	push	{r7, lr}
   97c0e:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   97c10:	4b38      	ldr	r3, [pc, #224]	; (97cf4 <DD_INIT_SPI+0xe8>)
   97c12:	4a39      	ldr	r2, [pc, #228]	; (97cf8 <DD_INIT_SPI+0xec>)
   97c14:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   97c18:	4b36      	ldr	r3, [pc, #216]	; (97cf4 <DD_INIT_SPI+0xe8>)
   97c1a:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   97c1e:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   97c20:	4b36      	ldr	r3, [pc, #216]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c22:	4a37      	ldr	r2, [pc, #220]	; (97d00 <DD_INIT_SPI+0xf4>)
   97c24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   97c28:	4b36      	ldr	r3, [pc, #216]	; (97d04 <DD_INIT_SPI+0xf8>)
   97c2a:	4a37      	ldr	r2, [pc, #220]	; (97d08 <DD_INIT_SPI+0xfc>)
   97c2c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   97c30:	4832      	ldr	r0, [pc, #200]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c32:	4b36      	ldr	r3, [pc, #216]	; (97d0c <DD_INIT_SPI+0x100>)
   97c34:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   97c36:	4b31      	ldr	r3, [pc, #196]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c38:	2202      	movs	r2, #2
   97c3a:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   97c3c:	4b2f      	ldr	r3, [pc, #188]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c3e:	2280      	movs	r2, #128	; 0x80
   97c40:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   97c42:	4b2e      	ldr	r3, [pc, #184]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   97c48:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   97c4a:	4a2c      	ldr	r2, [pc, #176]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c4c:	4b2b      	ldr	r3, [pc, #172]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c4e:	685b      	ldr	r3, [r3, #4]
   97c50:	f043 0301 	orr.w	r3, r3, #1
   97c54:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   97c56:	4a29      	ldr	r2, [pc, #164]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c58:	4b28      	ldr	r3, [pc, #160]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c5a:	685b      	ldr	r3, [r3, #4]
   97c5c:	f043 0310 	orr.w	r3, r3, #16
   97c60:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   97c62:	4a26      	ldr	r2, [pc, #152]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c64:	4b25      	ldr	r3, [pc, #148]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c66:	685b      	ldr	r3, [r3, #4]
   97c68:	f023 0302 	bic.w	r3, r3, #2
   97c6c:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   97c6e:	4a23      	ldr	r2, [pc, #140]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c70:	4b22      	ldr	r3, [pc, #136]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c72:	685b      	ldr	r3, [r3, #4]
   97c74:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   97c78:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   97c7a:	4a20      	ldr	r2, [pc, #128]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c7c:	4b1f      	ldr	r3, [pc, #124]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c7e:	685b      	ldr	r3, [r3, #4]
   97c80:	f023 0304 	bic.w	r3, r3, #4
   97c84:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   97c86:	491d      	ldr	r1, [pc, #116]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c88:	4b1c      	ldr	r3, [pc, #112]	; (97cfc <DD_INIT_SPI+0xf0>)
   97c8a:	685a      	ldr	r2, [r3, #4]
   97c8c:	4b20      	ldr	r3, [pc, #128]	; (97d10 <DD_INIT_SPI+0x104>)
   97c8e:	781b      	ldrb	r3, [r3, #0]
   97c90:	4618      	mov	r0, r3
   97c92:	2301      	movs	r3, #1
   97c94:	4083      	lsls	r3, r0
   97c96:	43db      	mvns	r3, r3
   97c98:	041b      	lsls	r3, r3, #16
   97c9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   97c9e:	4313      	orrs	r3, r2
   97ca0:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   97ca2:	4b1b      	ldr	r3, [pc, #108]	; (97d10 <DD_INIT_SPI+0x104>)
   97ca4:	781b      	ldrb	r3, [r3, #0]
   97ca6:	b29b      	uxth	r3, r3
   97ca8:	2100      	movs	r1, #0
   97caa:	4618      	mov	r0, r3
   97cac:	4b19      	ldr	r3, [pc, #100]	; (97d14 <DD_INIT_SPI+0x108>)
   97cae:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   97cb0:	4b17      	ldr	r3, [pc, #92]	; (97d10 <DD_INIT_SPI+0x104>)
   97cb2:	781b      	ldrb	r3, [r3, #0]
   97cb4:	b29b      	uxth	r3, r3
   97cb6:	2100      	movs	r1, #0
   97cb8:	4618      	mov	r0, r3
   97cba:	4b17      	ldr	r3, [pc, #92]	; (97d18 <DD_INIT_SPI+0x10c>)
   97cbc:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   97cbe:	4b14      	ldr	r3, [pc, #80]	; (97d10 <DD_INIT_SPI+0x104>)
   97cc0:	781b      	ldrb	r3, [r3, #0]
   97cc2:	b29b      	uxth	r3, r3
   97cc4:	2180      	movs	r1, #128	; 0x80
   97cc6:	4618      	mov	r0, r3
   97cc8:	4b14      	ldr	r3, [pc, #80]	; (97d1c <DD_INIT_SPI+0x110>)
   97cca:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   97ccc:	4b10      	ldr	r3, [pc, #64]	; (97d10 <DD_INIT_SPI+0x104>)
   97cce:	781b      	ldrb	r3, [r3, #0]
   97cd0:	b29b      	uxth	r3, r3
   97cd2:	21ff      	movs	r1, #255	; 0xff
   97cd4:	4618      	mov	r0, r3
   97cd6:	4b12      	ldr	r3, [pc, #72]	; (97d20 <DD_INIT_SPI+0x114>)
   97cd8:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   97cda:	4b0d      	ldr	r3, [pc, #52]	; (97d10 <DD_INIT_SPI+0x104>)
   97cdc:	781b      	ldrb	r3, [r3, #0]
   97cde:	b29b      	uxth	r3, r3
   97ce0:	2210      	movs	r2, #16
   97ce2:	2180      	movs	r1, #128	; 0x80
   97ce4:	4618      	mov	r0, r3
   97ce6:	4b0f      	ldr	r3, [pc, #60]	; (97d24 <DD_INIT_SPI+0x118>)
   97ce8:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   97cea:	4b04      	ldr	r3, [pc, #16]	; (97cfc <DD_INIT_SPI+0xf0>)
   97cec:	2201      	movs	r2, #1
   97cee:	601a      	str	r2, [r3, #0]
}
   97cf0:	bf00      	nop
   97cf2:	bd80      	pop	{r7, pc}
   97cf4:	400e0e00 	.word	0x400e0e00
   97cf8:	50494f00 	.word	0x50494f00
   97cfc:	40008000 	.word	0x40008000
   97d00:	53504900 	.word	0x53504900
   97d04:	400e0600 	.word	0x400e0600
   97d08:	504d4300 	.word	0x504d4300
   97d0c:	000805dd 	.word	0x000805dd
   97d10:	20071b2c 	.word	0x20071b2c
   97d14:	000979c5 	.word	0x000979c5
   97d18:	00097a19 	.word	0x00097a19
   97d1c:	00097979 	.word	0x00097979
   97d20:	00097a6d 	.word	0x00097a6d
   97d24:	0009791d 	.word	0x0009791d

00097d28 <DD_ENABLE_BYPASS>:
//void BC_Switch1(void);
//void BC_Switch2(void);


uint8_t DD_ENABLE_BYPASS()
{
   97d28:	b580      	push	{r7, lr}
   97d2a:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   97d2c:	200f      	movs	r0, #15
   97d2e:	4b07      	ldr	r3, [pc, #28]	; (97d4c <DD_ENABLE_BYPASS+0x24>)
   97d30:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   97d32:	200d      	movs	r0, #13
   97d34:	4b06      	ldr	r3, [pc, #24]	; (97d50 <DD_ENABLE_BYPASS+0x28>)
   97d36:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   97d38:	200e      	movs	r0, #14
   97d3a:	4b05      	ldr	r3, [pc, #20]	; (97d50 <DD_ENABLE_BYPASS+0x28>)
   97d3c:	4798      	blx	r3
				ByPass = true;
   97d3e:	4b05      	ldr	r3, [pc, #20]	; (97d54 <DD_ENABLE_BYPASS+0x2c>)
   97d40:	2201      	movs	r2, #1
   97d42:	701a      	strb	r2, [r3, #0]
	
	return 0;
   97d44:	2300      	movs	r3, #0
}
   97d46:	4618      	mov	r0, r3
   97d48:	bd80      	pop	{r7, pc}
   97d4a:	bf00      	nop
   97d4c:	000982f1 	.word	0x000982f1
   97d50:	000983b1 	.word	0x000983b1
   97d54:	20071b38 	.word	0x20071b38

00097d58 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   97d58:	b580      	push	{r7, lr}
   97d5a:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   97d5c:	200f      	movs	r0, #15
   97d5e:	4b07      	ldr	r3, [pc, #28]	; (97d7c <DD_DISABLE_BYPASS+0x24>)
   97d60:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   97d62:	200d      	movs	r0, #13
   97d64:	4b06      	ldr	r3, [pc, #24]	; (97d80 <DD_DISABLE_BYPASS+0x28>)
   97d66:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   97d68:	200e      	movs	r0, #14
   97d6a:	4b05      	ldr	r3, [pc, #20]	; (97d80 <DD_DISABLE_BYPASS+0x28>)
   97d6c:	4798      	blx	r3
				ByPass = false;
   97d6e:	4b05      	ldr	r3, [pc, #20]	; (97d84 <DD_DISABLE_BYPASS+0x2c>)
   97d70:	2200      	movs	r2, #0
   97d72:	701a      	strb	r2, [r3, #0]
	
	return 0;
   97d74:	2300      	movs	r3, #0
}
   97d76:	4618      	mov	r0, r3
   97d78:	bd80      	pop	{r7, pc}
   97d7a:	bf00      	nop
   97d7c:	000983b1 	.word	0x000983b1
   97d80:	000982f1 	.word	0x000982f1
   97d84:	20071b38 	.word	0x20071b38

00097d88 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   97d88:	b580      	push	{r7, lr}
   97d8a:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   97d8c:	4b05      	ldr	r3, [pc, #20]	; (97da4 <DD_ENABLE_LOOPBACK+0x1c>)
   97d8e:	2201      	movs	r2, #1
   97d90:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   97d92:	2010      	movs	r0, #16
   97d94:	4b04      	ldr	r3, [pc, #16]	; (97da8 <DD_ENABLE_LOOPBACK+0x20>)
   97d96:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   97d98:	2012      	movs	r0, #18
   97d9a:	4b04      	ldr	r3, [pc, #16]	; (97dac <DD_ENABLE_LOOPBACK+0x24>)
   97d9c:	4798      	blx	r3
				
	return 0;
   97d9e:	2300      	movs	r3, #0
}
   97da0:	4618      	mov	r0, r3
   97da2:	bd80      	pop	{r7, pc}
   97da4:	20071b39 	.word	0x20071b39
   97da8:	000982f1 	.word	0x000982f1
   97dac:	000983b1 	.word	0x000983b1

00097db0 <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   97db0:	b580      	push	{r7, lr}
   97db2:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   97db4:	4b05      	ldr	r3, [pc, #20]	; (97dcc <DD_DISABLE_LOOPBACK+0x1c>)
   97db6:	2200      	movs	r2, #0
   97db8:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   97dba:	2010      	movs	r0, #16
   97dbc:	4b04      	ldr	r3, [pc, #16]	; (97dd0 <DD_DISABLE_LOOPBACK+0x20>)
   97dbe:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   97dc0:	2012      	movs	r0, #18
   97dc2:	4b04      	ldr	r3, [pc, #16]	; (97dd4 <DD_DISABLE_LOOPBACK+0x24>)
   97dc4:	4798      	blx	r3
	return 0;
   97dc6:	2300      	movs	r3, #0
}
   97dc8:	4618      	mov	r0, r3
   97dca:	bd80      	pop	{r7, pc}
   97dcc:	20071b39 	.word	0x20071b39
   97dd0:	000983b1 	.word	0x000983b1
   97dd4:	000982f1 	.word	0x000982f1

00097dd8 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   97dd8:	b580      	push	{r7, lr}
   97dda:	b084      	sub	sp, #16
   97ddc:	af00      	add	r7, sp, #0
   97dde:	4603      	mov	r3, r0
   97de0:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   97de2:	79fb      	ldrb	r3, [r7, #7]
   97de4:	3b01      	subs	r3, #1
   97de6:	2b04      	cmp	r3, #4
   97de8:	d858      	bhi.n	97e9c <DD_SET_PUMP+0xc4>
   97dea:	a201      	add	r2, pc, #4	; (adr r2, 97df0 <DD_SET_PUMP+0x18>)
   97dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97df0:	00097e05 	.word	0x00097e05
   97df4:	00097e29 	.word	0x00097e29
   97df8:	00097e9d 	.word	0x00097e9d
   97dfc:	00097e4d 	.word	0x00097e4d
   97e00:	00097e83 	.word	0x00097e83
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   97e04:	2314      	movs	r3, #20
   97e06:	60fb      	str	r3, [r7, #12]
		peri = PA;
   97e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97e0c:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   97e0e:	4b26      	ldr	r3, [pc, #152]	; (97ea8 <DD_SET_PUMP+0xd0>)
   97e10:	2204      	movs	r2, #4
   97e12:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   97e14:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   97e18:	2014      	movs	r0, #20
   97e1a:	4b24      	ldr	r3, [pc, #144]	; (97eac <DD_SET_PUMP+0xd4>)
   97e1c:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   97e1e:	68f9      	ldr	r1, [r7, #12]
   97e20:	68b8      	ldr	r0, [r7, #8]
   97e22:	4b23      	ldr	r3, [pc, #140]	; (97eb0 <DD_SET_PUMP+0xd8>)
   97e24:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   97e26:	e039      	b.n	97e9c <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   97e28:	2315      	movs	r3, #21
   97e2a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   97e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97e30:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   97e32:	4b1d      	ldr	r3, [pc, #116]	; (97ea8 <DD_SET_PUMP+0xd0>)
   97e34:	2201      	movs	r2, #1
   97e36:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   97e38:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   97e3c:	2015      	movs	r0, #21
   97e3e:	4b1b      	ldr	r3, [pc, #108]	; (97eac <DD_SET_PUMP+0xd4>)
   97e40:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   97e42:	68f9      	ldr	r1, [r7, #12]
   97e44:	68b8      	ldr	r0, [r7, #8]
   97e46:	4b1a      	ldr	r3, [pc, #104]	; (97eb0 <DD_SET_PUMP+0xd8>)
   97e48:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   97e4a:	e027      	b.n	97e9c <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   97e4c:	2316      	movs	r3, #22
   97e4e:	60fb      	str	r3, [r7, #12]
		peri = PC;
   97e50:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   97e54:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   97e56:	68f9      	ldr	r1, [r7, #12]
   97e58:	68b8      	ldr	r0, [r7, #8]
   97e5a:	4b16      	ldr	r3, [pc, #88]	; (97eb4 <DD_SET_PUMP+0xdc>)
   97e5c:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   97e5e:	4b12      	ldr	r3, [pc, #72]	; (97ea8 <DD_SET_PUMP+0xd0>)
   97e60:	2220      	movs	r2, #32
   97e62:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   97e64:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   97e68:	2056      	movs	r0, #86	; 0x56
   97e6a:	4b10      	ldr	r3, [pc, #64]	; (97eac <DD_SET_PUMP+0xd4>)
   97e6c:	4798      	blx	r3
		
		p_io = 15;
   97e6e:	230f      	movs	r3, #15
   97e70:	60fb      	str	r3, [r7, #12]
		peri = PA;
   97e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97e76:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   97e78:	68f9      	ldr	r1, [r7, #12]
   97e7a:	68b8      	ldr	r0, [r7, #8]
   97e7c:	4b0d      	ldr	r3, [pc, #52]	; (97eb4 <DD_SET_PUMP+0xdc>)
   97e7e:	4798      	blx	r3
		break;
   97e80:	e00c      	b.n	97e9c <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   97e82:	4b09      	ldr	r3, [pc, #36]	; (97ea8 <DD_SET_PUMP+0xd0>)
   97e84:	2210      	movs	r2, #16
   97e86:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   97e88:	2302      	movs	r3, #2
   97e8a:	60fb      	str	r3, [r7, #12]
		peri = PD;
   97e8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   97e90:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   97e92:	68f9      	ldr	r1, [r7, #12]
   97e94:	68b8      	ldr	r0, [r7, #8]
   97e96:	4b07      	ldr	r3, [pc, #28]	; (97eb4 <DD_SET_PUMP+0xdc>)
   97e98:	4798      	blx	r3

		break;
   97e9a:	bf00      	nop
				
	}
	
	
	
	return 0;
   97e9c:	2300      	movs	r3, #0
}
   97e9e:	4618      	mov	r0, r3
   97ea0:	3710      	adds	r7, #16
   97ea2:	46bd      	mov	sp, r7
   97ea4:	bd80      	pop	{r7, pc}
   97ea6:	bf00      	nop
   97ea8:	40094000 	.word	0x40094000
   97eac:	0009a64d 	.word	0x0009a64d
   97eb0:	00096d95 	.word	0x00096d95
   97eb4:	00096e9d 	.word	0x00096e9d

00097eb8 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   97eb8:	b580      	push	{r7, lr}
   97eba:	b082      	sub	sp, #8
   97ebc:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   97ebe:	231c      	movs	r3, #28
   97ec0:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   97ec2:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   97ec6:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   97ec8:	6879      	ldr	r1, [r7, #4]
   97eca:	6838      	ldr	r0, [r7, #0]
   97ecc:	4b0d      	ldr	r3, [pc, #52]	; (97f04 <DD_SET_HEATER+0x4c>)
   97ece:	4798      	blx	r3
	cl_wait(100);
   97ed0:	2064      	movs	r0, #100	; 0x64
   97ed2:	4b0d      	ldr	r3, [pc, #52]	; (97f08 <DD_SET_HEATER+0x50>)
   97ed4:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   97ed6:	4b0d      	ldr	r3, [pc, #52]	; (97f0c <DD_SET_HEATER+0x54>)
   97ed8:	2202      	movs	r2, #2
   97eda:	605a      	str	r2, [r3, #4]
	p_io = 12;
   97edc:	230c      	movs	r3, #12
   97ede:	607b      	str	r3, [r7, #4]
	peri = PA;
   97ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97ee4:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   97ee6:	4a0a      	ldr	r2, [pc, #40]	; (97f10 <DD_SET_HEATER+0x58>)
   97ee8:	2101      	movs	r1, #1
   97eea:	687b      	ldr	r3, [r7, #4]
   97eec:	fa01 f303 	lsl.w	r3, r1, r3
   97ef0:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   97ef2:	6879      	ldr	r1, [r7, #4]
   97ef4:	6838      	ldr	r0, [r7, #0]
   97ef6:	4b07      	ldr	r3, [pc, #28]	; (97f14 <DD_SET_HEATER+0x5c>)
   97ef8:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   97efa:	2300      	movs	r3, #0
}
   97efc:	4618      	mov	r0, r3
   97efe:	3708      	adds	r7, #8
   97f00:	46bd      	mov	sp, r7
   97f02:	bd80      	pop	{r7, pc}
   97f04:	00096e19 	.word	0x00096e19
   97f08:	00093009 	.word	0x00093009
   97f0c:	40094000 	.word	0x40094000
   97f10:	400e0e00 	.word	0x400e0e00
   97f14:	00096d95 	.word	0x00096d95

00097f18 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   97f18:	b580      	push	{r7, lr}
   97f1a:	b082      	sub	sp, #8
   97f1c:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   97f1e:	4b11      	ldr	r3, [pc, #68]	; (97f64 <DD_RESET_HEATER+0x4c>)
   97f20:	2202      	movs	r2, #2
   97f22:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   97f24:	230c      	movs	r3, #12
   97f26:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   97f28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97f2c:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   97f2e:	4a0e      	ldr	r2, [pc, #56]	; (97f68 <DD_RESET_HEATER+0x50>)
   97f30:	2101      	movs	r1, #1
   97f32:	687b      	ldr	r3, [r7, #4]
   97f34:	fa01 f303 	lsl.w	r3, r1, r3
   97f38:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   97f3a:	6879      	ldr	r1, [r7, #4]
   97f3c:	6838      	ldr	r0, [r7, #0]
   97f3e:	4b0b      	ldr	r3, [pc, #44]	; (97f6c <DD_RESET_HEATER+0x54>)
   97f40:	4798      	blx	r3
	
	cl_wait(100);
   97f42:	2064      	movs	r0, #100	; 0x64
   97f44:	4b0a      	ldr	r3, [pc, #40]	; (97f70 <DD_RESET_HEATER+0x58>)
   97f46:	4798      	blx	r3
	p_io = 28;
   97f48:	231c      	movs	r3, #28
   97f4a:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   97f4c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   97f50:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   97f52:	6879      	ldr	r1, [r7, #4]
   97f54:	6838      	ldr	r0, [r7, #0]
   97f56:	4b07      	ldr	r3, [pc, #28]	; (97f74 <DD_RESET_HEATER+0x5c>)
   97f58:	4798      	blx	r3
	return 0;
   97f5a:	2300      	movs	r3, #0
}
   97f5c:	4618      	mov	r0, r3
   97f5e:	3708      	adds	r7, #8
   97f60:	46bd      	mov	sp, r7
   97f62:	bd80      	pop	{r7, pc}
   97f64:	40094000 	.word	0x40094000
   97f68:	400e0e00 	.word	0x400e0e00
   97f6c:	00096ce1 	.word	0x00096ce1
   97f70:	00093009 	.word	0x00093009
   97f74:	00096e9d 	.word	0x00096e9d

00097f78 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   97f78:	b580      	push	{r7, lr}
   97f7a:	b084      	sub	sp, #16
   97f7c:	af00      	add	r7, sp, #0
   97f7e:	4603      	mov	r3, r0
   97f80:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   97f82:	79fb      	ldrb	r3, [r7, #7]
   97f84:	3b01      	subs	r3, #1
   97f86:	2b04      	cmp	r3, #4
   97f88:	d85b      	bhi.n	98042 <DD_RESET_PUMP+0xca>
   97f8a:	a201      	add	r2, pc, #4	; (adr r2, 97f90 <DD_RESET_PUMP+0x18>)
   97f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97f90:	00097fa5 	.word	0x00097fa5
   97f94:	00097fd1 	.word	0x00097fd1
   97f98:	00098043 	.word	0x00098043
   97f9c:	00097ffd 	.word	0x00097ffd
   97fa0:	00098029 	.word	0x00098029
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   97fa4:	2314      	movs	r3, #20
   97fa6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   97fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97fac:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   97fae:	4b27      	ldr	r3, [pc, #156]	; (9804c <DD_RESET_PUMP+0xd4>)
   97fb0:	2204      	movs	r2, #4
   97fb2:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   97fb4:	4b26      	ldr	r3, [pc, #152]	; (98050 <DD_RESET_PUMP+0xd8>)
   97fb6:	4a27      	ldr	r2, [pc, #156]	; (98054 <DD_RESET_PUMP+0xdc>)
   97fb8:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   97fba:	4a25      	ldr	r2, [pc, #148]	; (98050 <DD_RESET_PUMP+0xd8>)
   97fbc:	2101      	movs	r1, #1
   97fbe:	68fb      	ldr	r3, [r7, #12]
   97fc0:	fa01 f303 	lsl.w	r3, r1, r3
   97fc4:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   97fc6:	68f9      	ldr	r1, [r7, #12]
   97fc8:	68b8      	ldr	r0, [r7, #8]
   97fca:	4b23      	ldr	r3, [pc, #140]	; (98058 <DD_RESET_PUMP+0xe0>)
   97fcc:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   97fce:	e038      	b.n	98042 <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   97fd0:	2315      	movs	r3, #21
   97fd2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   97fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   97fd8:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   97fda:	4b1c      	ldr	r3, [pc, #112]	; (9804c <DD_RESET_PUMP+0xd4>)
   97fdc:	2201      	movs	r2, #1
   97fde:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   97fe0:	4b1b      	ldr	r3, [pc, #108]	; (98050 <DD_RESET_PUMP+0xd8>)
   97fe2:	4a1c      	ldr	r2, [pc, #112]	; (98054 <DD_RESET_PUMP+0xdc>)
   97fe4:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   97fe6:	4a1a      	ldr	r2, [pc, #104]	; (98050 <DD_RESET_PUMP+0xd8>)
   97fe8:	2101      	movs	r1, #1
   97fea:	68fb      	ldr	r3, [r7, #12]
   97fec:	fa01 f303 	lsl.w	r3, r1, r3
   97ff0:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   97ff2:	68f9      	ldr	r1, [r7, #12]
   97ff4:	68b8      	ldr	r0, [r7, #8]
   97ff6:	4b18      	ldr	r3, [pc, #96]	; (98058 <DD_RESET_PUMP+0xe0>)
   97ff8:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   97ffa:	e022      	b.n	98042 <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   97ffc:	2316      	movs	r3, #22
   97ffe:	60fb      	str	r3, [r7, #12]
		peri = PC;
   98000:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98004:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   98006:	68f9      	ldr	r1, [r7, #12]
   98008:	68b8      	ldr	r0, [r7, #8]
   9800a:	4b13      	ldr	r3, [pc, #76]	; (98058 <DD_RESET_PUMP+0xe0>)
   9800c:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   9800e:	4b0f      	ldr	r3, [pc, #60]	; (9804c <DD_RESET_PUMP+0xd4>)
   98010:	2220      	movs	r2, #32
   98012:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   98014:	230f      	movs	r3, #15
   98016:	60fb      	str	r3, [r7, #12]
		peri = PA;
   98018:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9801c:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9801e:	68f9      	ldr	r1, [r7, #12]
   98020:	68b8      	ldr	r0, [r7, #8]
   98022:	4b0e      	ldr	r3, [pc, #56]	; (9805c <DD_RESET_PUMP+0xe4>)
   98024:	4798      	blx	r3
		break;
   98026:	e00c      	b.n	98042 <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   98028:	2302      	movs	r3, #2
   9802a:	60fb      	str	r3, [r7, #12]
		peri = PD;
   9802c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98030:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   98032:	68f9      	ldr	r1, [r7, #12]
   98034:	68b8      	ldr	r0, [r7, #8]
   98036:	4b09      	ldr	r3, [pc, #36]	; (9805c <DD_RESET_PUMP+0xe4>)
   98038:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   9803a:	4b04      	ldr	r3, [pc, #16]	; (9804c <DD_RESET_PUMP+0xd4>)
   9803c:	2210      	movs	r2, #16
   9803e:	609a      	str	r2, [r3, #8]
		break;
   98040:	bf00      	nop
	
	}
	
	
	
	return 0;
   98042:	2300      	movs	r3, #0
	
}
   98044:	4618      	mov	r0, r3
   98046:	3710      	adds	r7, #16
   98048:	46bd      	mov	sp, r7
   9804a:	bd80      	pop	{r7, pc}
   9804c:	40094000 	.word	0x40094000
   98050:	400e0e00 	.word	0x400e0e00
   98054:	00391000 	.word	0x00391000
   98058:	00096ce1 	.word	0x00096ce1
   9805c:	00096e19 	.word	0x00096e19

00098060 <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   98060:	b580      	push	{r7, lr}
   98062:	b086      	sub	sp, #24
   98064:	af00      	add	r7, sp, #0
   98066:	4603      	mov	r3, r0
   98068:	6039      	str	r1, [r7, #0]
   9806a:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   9806c:	79fb      	ldrb	r3, [r7, #7]
   9806e:	3b01      	subs	r3, #1
   98070:	2b04      	cmp	r3, #4
   98072:	f200 8082 	bhi.w	9817a <DD_SET_SPEED+0x11a>
   98076:	a201      	add	r2, pc, #4	; (adr r2, 9807c <DD_SET_SPEED+0x1c>)
   98078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9807c:	00098091 	.word	0x00098091
   98080:	000980a5 	.word	0x000980a5
   98084:	000980b9 	.word	0x000980b9
   98088:	0009813b 	.word	0x0009813b
   9808c:	0009815b 	.word	0x0009815b
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   98090:	2302      	movs	r3, #2
   98092:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   98094:	683b      	ldr	r3, [r7, #0]
   98096:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   98098:	7bfb      	ldrb	r3, [r7, #15]
   9809a:	6939      	ldr	r1, [r7, #16]
   9809c:	4618      	mov	r0, r3
   9809e:	4b39      	ldr	r3, [pc, #228]	; (98184 <DD_SET_SPEED+0x124>)
   980a0:	4798      	blx	r3
		break;
   980a2:	e06a      	b.n	9817a <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   980a4:	2300      	movs	r3, #0
   980a6:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   980a8:	683b      	ldr	r3, [r7, #0]
   980aa:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   980ac:	7bfb      	ldrb	r3, [r7, #15]
   980ae:	6939      	ldr	r1, [r7, #16]
   980b0:	4618      	mov	r0, r3
   980b2:	4b34      	ldr	r3, [pc, #208]	; (98184 <DD_SET_SPEED+0x124>)
   980b4:	4798      	blx	r3
		break;
   980b6:	e060      	b.n	9817a <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   980b8:	683b      	ldr	r3, [r7, #0]
   980ba:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   980be:	d01c      	beq.n	980fa <DD_SET_SPEED+0x9a>
   980c0:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   980c4:	d804      	bhi.n	980d0 <DD_SET_SPEED+0x70>
   980c6:	2bc8      	cmp	r3, #200	; 0xc8
   980c8:	d009      	beq.n	980de <DD_SET_SPEED+0x7e>
   980ca:	2bf0      	cmp	r3, #240	; 0xf0
   980cc:	d00e      	beq.n	980ec <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   980ce:	e029      	b.n	98124 <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   980d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   980d4:	d018      	beq.n	98108 <DD_SET_SPEED+0xa8>
   980d6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   980da:	d01c      	beq.n	98116 <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   980dc:	e022      	b.n	98124 <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   980de:	f44f 73b8 	mov.w	r3, #368	; 0x170
   980e2:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   980e4:	f240 3375 	movw	r3, #885	; 0x375
   980e8:	617b      	str	r3, [r7, #20]
			break;
   980ea:	e01b      	b.n	98124 <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   980ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
   980f0:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   980f2:	f44f 7340 	mov.w	r3, #768	; 0x300
   980f6:	617b      	str	r3, [r7, #20]
			break;
   980f8:	e014      	b.n	98124 <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   980fa:	f44f 7398 	mov.w	r3, #304	; 0x130
   980fe:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   98100:	f44f 7320 	mov.w	r3, #640	; 0x280
   98104:	617b      	str	r3, [r7, #20]
			break;
   98106:	e00d      	b.n	98124 <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   98108:	f44f 7390 	mov.w	r3, #288	; 0x120
   9810c:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   9810e:	f44f 7314 	mov.w	r3, #592	; 0x250
   98112:	617b      	str	r3, [r7, #20]
			break;
   98114:	e006      	b.n	98124 <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   98116:	f44f 7388 	mov.w	r3, #272	; 0x110
   9811a:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   9811c:	f44f 7304 	mov.w	r3, #528	; 0x210
   98120:	617b      	str	r3, [r7, #20]
			break;
   98122:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   98124:	7bfb      	ldrb	r3, [r7, #15]
   98126:	6939      	ldr	r1, [r7, #16]
   98128:	4618      	mov	r0, r3
   9812a:	4b16      	ldr	r3, [pc, #88]	; (98184 <DD_SET_SPEED+0x124>)
   9812c:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   9812e:	7bfb      	ldrb	r3, [r7, #15]
   98130:	6979      	ldr	r1, [r7, #20]
   98132:	4618      	mov	r0, r3
   98134:	4b14      	ldr	r3, [pc, #80]	; (98188 <DD_SET_SPEED+0x128>)
   98136:	4798      	blx	r3
		break;
   98138:	e01f      	b.n	9817a <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   9813a:	2305      	movs	r3, #5
   9813c:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   9813e:	683b      	ldr	r3, [r7, #0]
   98140:	085b      	lsrs	r3, r3, #1
   98142:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   98144:	7bfb      	ldrb	r3, [r7, #15]
   98146:	6939      	ldr	r1, [r7, #16]
   98148:	4618      	mov	r0, r3
   9814a:	4b0e      	ldr	r3, [pc, #56]	; (98184 <DD_SET_SPEED+0x124>)
   9814c:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   9814e:	7bfb      	ldrb	r3, [r7, #15]
   98150:	6839      	ldr	r1, [r7, #0]
   98152:	4618      	mov	r0, r3
   98154:	4b0c      	ldr	r3, [pc, #48]	; (98188 <DD_SET_SPEED+0x128>)
   98156:	4798      	blx	r3
		break;
   98158:	e00f      	b.n	9817a <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   9815a:	2304      	movs	r3, #4
   9815c:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   9815e:	683b      	ldr	r3, [r7, #0]
   98160:	085b      	lsrs	r3, r3, #1
   98162:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   98164:	7bfb      	ldrb	r3, [r7, #15]
   98166:	6939      	ldr	r1, [r7, #16]
   98168:	4618      	mov	r0, r3
   9816a:	4b06      	ldr	r3, [pc, #24]	; (98184 <DD_SET_SPEED+0x124>)
   9816c:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   9816e:	7bfb      	ldrb	r3, [r7, #15]
   98170:	6839      	ldr	r1, [r7, #0]
   98172:	4618      	mov	r0, r3
   98174:	4b04      	ldr	r3, [pc, #16]	; (98188 <DD_SET_SPEED+0x128>)
   98176:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   98178:	bf00      	nop
	}
	
	return 0;
   9817a:	2300      	movs	r3, #0
}
   9817c:	4618      	mov	r0, r3
   9817e:	3718      	adds	r7, #24
   98180:	46bd      	mov	sp, r7
   98182:	bd80      	pop	{r7, pc}
   98184:	000978c5 	.word	0x000978c5
   98188:	000978f1 	.word	0x000978f1

0009818c <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   9818c:	b580      	push	{r7, lr}
   9818e:	b084      	sub	sp, #16
   98190:	af00      	add	r7, sp, #0
   98192:	4603      	mov	r3, r0
   98194:	6039      	str	r1, [r7, #0]
   98196:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   98198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   9819c:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   9819e:	683b      	ldr	r3, [r7, #0]
   981a0:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   981a2:	79fb      	ldrb	r3, [r7, #7]
   981a4:	2b01      	cmp	r3, #1
   981a6:	d002      	beq.n	981ae <DD_SET_PUMPFREQ+0x22>
   981a8:	2b02      	cmp	r3, #2
   981aa:	d008      	beq.n	981be <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   981ac:	e00f      	b.n	981ce <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   981ae:	2302      	movs	r3, #2
   981b0:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   981b2:	7afb      	ldrb	r3, [r7, #11]
   981b4:	68f9      	ldr	r1, [r7, #12]
   981b6:	4618      	mov	r0, r3
   981b8:	4b07      	ldr	r3, [pc, #28]	; (981d8 <DD_SET_PUMPFREQ+0x4c>)
   981ba:	4798      	blx	r3
								
				break;
   981bc:	e007      	b.n	981ce <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   981be:	2300      	movs	r3, #0
   981c0:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   981c2:	7afb      	ldrb	r3, [r7, #11]
   981c4:	68f9      	ldr	r1, [r7, #12]
   981c6:	4618      	mov	r0, r3
   981c8:	4b03      	ldr	r3, [pc, #12]	; (981d8 <DD_SET_PUMPFREQ+0x4c>)
   981ca:	4798      	blx	r3
							
				
				break;
   981cc:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   981ce:	2300      	movs	r3, #0
}
   981d0:	4618      	mov	r0, r3
   981d2:	3710      	adds	r7, #16
   981d4:	46bd      	mov	sp, r7
   981d6:	bd80      	pop	{r7, pc}
   981d8:	000978f1 	.word	0x000978f1

000981dc <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   981dc:	b580      	push	{r7, lr}
   981de:	b084      	sub	sp, #16
   981e0:	af00      	add	r7, sp, #0
   981e2:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   981e4:	2301      	movs	r3, #1
   981e6:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   981e8:	7bfb      	ldrb	r3, [r7, #15]
   981ea:	6879      	ldr	r1, [r7, #4]
   981ec:	4618      	mov	r0, r3
   981ee:	4b03      	ldr	r3, [pc, #12]	; (981fc <DD_CHNG_HTR+0x20>)
   981f0:	4798      	blx	r3
	
	return 0;
   981f2:	2300      	movs	r3, #0
}
   981f4:	4618      	mov	r0, r3
   981f6:	3710      	adds	r7, #16
   981f8:	46bd      	mov	sp, r7
   981fa:	bd80      	pop	{r7, pc}
   981fc:	000978c5 	.word	0x000978c5

00098200 <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   98200:	b580      	push	{r7, lr}
   98202:	b082      	sub	sp, #8
   98204:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   98206:	2301      	movs	r3, #1
   98208:	607b      	str	r3, [r7, #4]
	peri = PD;
   9820a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9820e:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   98210:	6879      	ldr	r1, [r7, #4]
   98212:	6838      	ldr	r0, [r7, #0]
   98214:	4b03      	ldr	r3, [pc, #12]	; (98224 <DD_SET_DIR+0x24>)
   98216:	4798      	blx	r3
	
	return 0;
   98218:	2300      	movs	r3, #0
}
   9821a:	4618      	mov	r0, r3
   9821c:	3708      	adds	r7, #8
   9821e:	46bd      	mov	sp, r7
   98220:	bd80      	pop	{r7, pc}
   98222:	bf00      	nop
   98224:	00096e19 	.word	0x00096e19

00098228 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   98228:	b580      	push	{r7, lr}
   9822a:	b082      	sub	sp, #8
   9822c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   9822e:	2301      	movs	r3, #1
   98230:	607b      	str	r3, [r7, #4]
	peri = PD;
   98232:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98236:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   98238:	6879      	ldr	r1, [r7, #4]
   9823a:	6838      	ldr	r0, [r7, #0]
   9823c:	4b03      	ldr	r3, [pc, #12]	; (9824c <DD_RESET_DIR+0x24>)
   9823e:	4798      	blx	r3
	
	return 0;
   98240:	2300      	movs	r3, #0
}
   98242:	4618      	mov	r0, r3
   98244:	3708      	adds	r7, #8
   98246:	46bd      	mov	sp, r7
   98248:	bd80      	pop	{r7, pc}
   9824a:	bf00      	nop
   9824c:	00096e9d 	.word	0x00096e9d

00098250 <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   98250:	b580      	push	{r7, lr}
   98252:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   98254:	201e      	movs	r0, #30
   98256:	4b02      	ldr	r3, [pc, #8]	; (98260 <DD_SET_RED+0x10>)
   98258:	4798      	blx	r3
	return 0;
   9825a:	2300      	movs	r3, #0
}
   9825c:	4618      	mov	r0, r3
   9825e:	bd80      	pop	{r7, pc}
   98260:	000982f1 	.word	0x000982f1

00098264 <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   98264:	b580      	push	{r7, lr}
   98266:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   98268:	2020      	movs	r0, #32
   9826a:	4b02      	ldr	r3, [pc, #8]	; (98274 <DD_SET_GREEN+0x10>)
   9826c:	4798      	blx	r3
	return 0;
   9826e:	2300      	movs	r3, #0
}
   98270:	4618      	mov	r0, r3
   98272:	bd80      	pop	{r7, pc}
   98274:	000982f1 	.word	0x000982f1

00098278 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   98278:	b580      	push	{r7, lr}
   9827a:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   9827c:	201f      	movs	r0, #31
   9827e:	4b02      	ldr	r3, [pc, #8]	; (98288 <DD_SET_YELLOW+0x10>)
   98280:	4798      	blx	r3
	return 0;
   98282:	2300      	movs	r3, #0
}
   98284:	4618      	mov	r0, r3
   98286:	bd80      	pop	{r7, pc}
   98288:	000982f1 	.word	0x000982f1

0009828c <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   9828c:	b580      	push	{r7, lr}
   9828e:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   98290:	201d      	movs	r0, #29
   98292:	4b02      	ldr	r3, [pc, #8]	; (9829c <DD_SET_BUZZER+0x10>)
   98294:	4798      	blx	r3
	return 0;
   98296:	2300      	movs	r3, #0
}
   98298:	4618      	mov	r0, r3
   9829a:	bd80      	pop	{r7, pc}
   9829c:	000982f1 	.word	0x000982f1

000982a0 <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   982a0:	b580      	push	{r7, lr}
   982a2:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   982a4:	201e      	movs	r0, #30
   982a6:	4b02      	ldr	r3, [pc, #8]	; (982b0 <DD_RESET_RED+0x10>)
   982a8:	4798      	blx	r3
	return 0;
   982aa:	2300      	movs	r3, #0
}
   982ac:	4618      	mov	r0, r3
   982ae:	bd80      	pop	{r7, pc}
   982b0:	000983b1 	.word	0x000983b1

000982b4 <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   982b4:	b580      	push	{r7, lr}
   982b6:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   982b8:	2020      	movs	r0, #32
   982ba:	4b02      	ldr	r3, [pc, #8]	; (982c4 <DD_RESET_GREEN+0x10>)
   982bc:	4798      	blx	r3
	return 0;
   982be:	2300      	movs	r3, #0
}
   982c0:	4618      	mov	r0, r3
   982c2:	bd80      	pop	{r7, pc}
   982c4:	000983b1 	.word	0x000983b1

000982c8 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   982c8:	b580      	push	{r7, lr}
   982ca:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   982cc:	201f      	movs	r0, #31
   982ce:	4b02      	ldr	r3, [pc, #8]	; (982d8 <DD_RESET_YELLOW+0x10>)
   982d0:	4798      	blx	r3
	return 0;
   982d2:	2300      	movs	r3, #0
}
   982d4:	4618      	mov	r0, r3
   982d6:	bd80      	pop	{r7, pc}
   982d8:	000983b1 	.word	0x000983b1

000982dc <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   982dc:	b580      	push	{r7, lr}
   982de:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   982e0:	201d      	movs	r0, #29
   982e2:	4b02      	ldr	r3, [pc, #8]	; (982ec <DD_RESET_BUZZER+0x10>)
   982e4:	4798      	blx	r3
	return 0;
   982e6:	2300      	movs	r3, #0
}
   982e8:	4618      	mov	r0, r3
   982ea:	bd80      	pop	{r7, pc}
   982ec:	000983b1 	.word	0x000983b1

000982f0 <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   982f0:	b580      	push	{r7, lr}
   982f2:	b082      	sub	sp, #8
   982f4:	af00      	add	r7, sp, #0
   982f6:	4603      	mov	r3, r0
   982f8:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   982fa:	79fb      	ldrb	r3, [r7, #7]
   982fc:	2b00      	cmp	r3, #0
   982fe:	d015      	beq.n	9832c <DD_SET_VALVE+0x3c>
   98300:	79fb      	ldrb	r3, [r7, #7]
   98302:	2b10      	cmp	r3, #16
   98304:	d812      	bhi.n	9832c <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   98306:	79fb      	ldrb	r3, [r7, #7]
   98308:	3b01      	subs	r3, #1
   9830a:	2201      	movs	r2, #1
   9830c:	fa02 f303 	lsl.w	r3, r2, r3
   98310:	b21a      	sxth	r2, r3
   98312:	4b21      	ldr	r3, [pc, #132]	; (98398 <DD_SET_VALVE+0xa8>)
   98314:	881b      	ldrh	r3, [r3, #0]
   98316:	b21b      	sxth	r3, r3
   98318:	4313      	orrs	r3, r2
   9831a:	b21b      	sxth	r3, r3
   9831c:	b29a      	uxth	r2, r3
   9831e:	4b1e      	ldr	r3, [pc, #120]	; (98398 <DD_SET_VALVE+0xa8>)
   98320:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   98322:	4b1e      	ldr	r3, [pc, #120]	; (9839c <DD_SET_VALVE+0xac>)
   98324:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   98326:	4b1e      	ldr	r3, [pc, #120]	; (983a0 <DD_SET_VALVE+0xb0>)
   98328:	4798      	blx	r3
   9832a:	e030      	b.n	9838e <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   9832c:	79fb      	ldrb	r3, [r7, #7]
   9832e:	2b10      	cmp	r3, #16
   98330:	d915      	bls.n	9835e <DD_SET_VALVE+0x6e>
   98332:	79fb      	ldrb	r3, [r7, #7]
   98334:	2b16      	cmp	r3, #22
   98336:	d812      	bhi.n	9835e <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_20 |= 1 << id_valve - 17;         // Earlier 6
   98338:	79fb      	ldrb	r3, [r7, #7]
   9833a:	3b11      	subs	r3, #17
   9833c:	2201      	movs	r2, #1
   9833e:	fa02 f303 	lsl.w	r3, r2, r3
   98342:	b21a      	sxth	r2, r3
   98344:	4b17      	ldr	r3, [pc, #92]	; (983a4 <DD_SET_VALVE+0xb4>)
   98346:	881b      	ldrh	r3, [r3, #0]
   98348:	b21b      	sxth	r3, r3
   9834a:	4313      	orrs	r3, r2
   9834c:	b21b      	sxth	r3, r3
   9834e:	b29a      	uxth	r2, r3
   98350:	4b14      	ldr	r3, [pc, #80]	; (983a4 <DD_SET_VALVE+0xb4>)
   98352:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   98354:	4b14      	ldr	r3, [pc, #80]	; (983a8 <DD_SET_VALVE+0xb8>)
   98356:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   98358:	4b14      	ldr	r3, [pc, #80]	; (983ac <DD_SET_VALVE+0xbc>)
   9835a:	4798      	blx	r3
   9835c:	e017      	b.n	9838e <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   9835e:	79fb      	ldrb	r3, [r7, #7]
   98360:	2b1c      	cmp	r3, #28
   98362:	d914      	bls.n	9838e <DD_SET_VALVE+0x9e>
   98364:	79fb      	ldrb	r3, [r7, #7]
   98366:	2b20      	cmp	r3, #32
   98368:	d811      	bhi.n	9838e <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_17_20 |= 1 << id_valve - 17;
   9836a:	79fb      	ldrb	r3, [r7, #7]
   9836c:	3b11      	subs	r3, #17
   9836e:	2201      	movs	r2, #1
   98370:	fa02 f303 	lsl.w	r3, r2, r3
   98374:	b21a      	sxth	r2, r3
   98376:	4b0b      	ldr	r3, [pc, #44]	; (983a4 <DD_SET_VALVE+0xb4>)
   98378:	881b      	ldrh	r3, [r3, #0]
   9837a:	b21b      	sxth	r3, r3
   9837c:	4313      	orrs	r3, r2
   9837e:	b21b      	sxth	r3, r3
   98380:	b29a      	uxth	r2, r3
   98382:	4b08      	ldr	r3, [pc, #32]	; (983a4 <DD_SET_VALVE+0xb4>)
   98384:	801a      	strh	r2, [r3, #0]
//			DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   98386:	4b08      	ldr	r3, [pc, #32]	; (983a8 <DD_SET_VALVE+0xb8>)
   98388:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   9838a:	4b08      	ldr	r3, [pc, #32]	; (983ac <DD_SET_VALVE+0xbc>)
   9838c:	4798      	blx	r3
		}
				
	

	return 0;
   9838e:	2300      	movs	r3, #0
}
   98390:	4618      	mov	r0, r3
   98392:	3708      	adds	r7, #8
   98394:	46bd      	mov	sp, r7
   98396:	bd80      	pop	{r7, pc}
   98398:	20071b34 	.word	0x20071b34
   9839c:	000984ad 	.word	0x000984ad
   983a0:	00099191 	.word	0x00099191
   983a4:	20071b36 	.word	0x20071b36
   983a8:	00098639 	.word	0x00098639
   983ac:	000991d9 	.word	0x000991d9

000983b0 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   983b0:	b580      	push	{r7, lr}
   983b2:	b082      	sub	sp, #8
   983b4:	af00      	add	r7, sp, #0
   983b6:	4603      	mov	r3, r0
   983b8:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   983ba:	79fb      	ldrb	r3, [r7, #7]
   983bc:	2b01      	cmp	r3, #1
   983be:	d104      	bne.n	983ca <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   983c0:	2206      	movs	r2, #6
   983c2:	4932      	ldr	r1, [pc, #200]	; (9848c <DD_RESET_VALVE+0xdc>)
   983c4:	2018      	movs	r0, #24
   983c6:	4b32      	ldr	r3, [pc, #200]	; (98490 <DD_RESET_VALVE+0xe0>)
   983c8:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   983ca:	79fb      	ldrb	r3, [r7, #7]
   983cc:	2b00      	cmp	r3, #0
   983ce:	d01b      	beq.n	98408 <DD_RESET_VALVE+0x58>
   983d0:	79fb      	ldrb	r3, [r7, #7]
   983d2:	2b10      	cmp	r3, #16
   983d4:	d818      	bhi.n	98408 <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   983d6:	79fb      	ldrb	r3, [r7, #7]
   983d8:	3b01      	subs	r3, #1
   983da:	2201      	movs	r2, #1
   983dc:	fa02 f303 	lsl.w	r3, r2, r3
   983e0:	b21b      	sxth	r3, r3
   983e2:	43db      	mvns	r3, r3
   983e4:	b21a      	sxth	r2, r3
   983e6:	4b2b      	ldr	r3, [pc, #172]	; (98494 <DD_RESET_VALVE+0xe4>)
   983e8:	881b      	ldrh	r3, [r3, #0]
   983ea:	b21b      	sxth	r3, r3
   983ec:	4013      	ands	r3, r2
   983ee:	b21b      	sxth	r3, r3
   983f0:	b29a      	uxth	r2, r3
   983f2:	4b28      	ldr	r3, [pc, #160]	; (98494 <DD_RESET_VALVE+0xe4>)
   983f4:	801a      	strh	r2, [r3, #0]
   983f6:	4b27      	ldr	r3, [pc, #156]	; (98494 <DD_RESET_VALVE+0xe4>)
   983f8:	881a      	ldrh	r2, [r3, #0]
   983fa:	4b26      	ldr	r3, [pc, #152]	; (98494 <DD_RESET_VALVE+0xe4>)
   983fc:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   983fe:	4b26      	ldr	r3, [pc, #152]	; (98498 <DD_RESET_VALVE+0xe8>)
   98400:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   98402:	4b26      	ldr	r3, [pc, #152]	; (9849c <DD_RESET_VALVE+0xec>)
   98404:	4798      	blx	r3
   98406:	e03c      	b.n	98482 <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   98408:	79fb      	ldrb	r3, [r7, #7]
   9840a:	2b10      	cmp	r3, #16
   9840c:	d91b      	bls.n	98446 <DD_RESET_VALVE+0x96>
   9840e:	79fb      	ldrb	r3, [r7, #7]
   98410:	2b16      	cmp	r3, #22
   98412:	d818      	bhi.n	98446 <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   98414:	79fb      	ldrb	r3, [r7, #7]
   98416:	3b11      	subs	r3, #17
   98418:	2201      	movs	r2, #1
   9841a:	fa02 f303 	lsl.w	r3, r2, r3
   9841e:	b21b      	sxth	r3, r3
   98420:	43db      	mvns	r3, r3
   98422:	b21a      	sxth	r2, r3
   98424:	4b1e      	ldr	r3, [pc, #120]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98426:	881b      	ldrh	r3, [r3, #0]
   98428:	b21b      	sxth	r3, r3
   9842a:	4013      	ands	r3, r2
   9842c:	b21b      	sxth	r3, r3
   9842e:	b29a      	uxth	r2, r3
   98430:	4b1b      	ldr	r3, [pc, #108]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98432:	801a      	strh	r2, [r3, #0]
   98434:	4b1a      	ldr	r3, [pc, #104]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98436:	881a      	ldrh	r2, [r3, #0]
   98438:	4b19      	ldr	r3, [pc, #100]	; (984a0 <DD_RESET_VALVE+0xf0>)
   9843a:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   9843c:	4b19      	ldr	r3, [pc, #100]	; (984a4 <DD_RESET_VALVE+0xf4>)
   9843e:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   98440:	4b19      	ldr	r3, [pc, #100]	; (984a8 <DD_RESET_VALVE+0xf8>)
   98442:	4798      	blx	r3
   98444:	e01d      	b.n	98482 <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   98446:	79fb      	ldrb	r3, [r7, #7]
   98448:	2b1c      	cmp	r3, #28
   9844a:	d91a      	bls.n	98482 <DD_RESET_VALVE+0xd2>
   9844c:	79fb      	ldrb	r3, [r7, #7]
   9844e:	2b20      	cmp	r3, #32
   98450:	d817      	bhi.n	98482 <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   98452:	79fb      	ldrb	r3, [r7, #7]
   98454:	3b11      	subs	r3, #17
   98456:	2201      	movs	r2, #1
   98458:	fa02 f303 	lsl.w	r3, r2, r3
   9845c:	b21b      	sxth	r3, r3
   9845e:	43db      	mvns	r3, r3
   98460:	b21a      	sxth	r2, r3
   98462:	4b0f      	ldr	r3, [pc, #60]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98464:	881b      	ldrh	r3, [r3, #0]
   98466:	b21b      	sxth	r3, r3
   98468:	4013      	ands	r3, r2
   9846a:	b21b      	sxth	r3, r3
   9846c:	b29a      	uxth	r2, r3
   9846e:	4b0c      	ldr	r3, [pc, #48]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98470:	801a      	strh	r2, [r3, #0]
   98472:	4b0b      	ldr	r3, [pc, #44]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98474:	881a      	ldrh	r2, [r3, #0]
   98476:	4b0a      	ldr	r3, [pc, #40]	; (984a0 <DD_RESET_VALVE+0xf0>)
   98478:	801a      	strh	r2, [r3, #0]
//		DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   9847a:	4b0a      	ldr	r3, [pc, #40]	; (984a4 <DD_RESET_VALVE+0xf4>)
   9847c:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   9847e:	4b0a      	ldr	r3, [pc, #40]	; (984a8 <DD_RESET_VALVE+0xf8>)
   98480:	4798      	blx	r3
	}

	
	return 0;
   98482:	2300      	movs	r3, #0
}
   98484:	4618      	mov	r0, r3
   98486:	3708      	adds	r7, #8
   98488:	46bd      	mov	sp, r7
   9848a:	bd80      	pop	{r7, pc}
   9848c:	000a89a8 	.word	0x000a89a8
   98490:	0009b805 	.word	0x0009b805
   98494:	20071b34 	.word	0x20071b34
   98498:	000984ad 	.word	0x000984ad
   9849c:	00099191 	.word	0x00099191
   984a0:	20071b36 	.word	0x20071b36
   984a4:	00098639 	.word	0x00098639
   984a8:	000991d9 	.word	0x000991d9

000984ac <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   984ac:	b580      	push	{r7, lr}
   984ae:	b084      	sub	sp, #16
   984b0:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   984b2:	2301      	movs	r3, #1
   984b4:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   984b6:	e0af      	b.n	98618 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   984b8:	7bfb      	ldrb	r3, [r7, #15]
   984ba:	3b01      	subs	r3, #1
   984bc:	2b0f      	cmp	r3, #15
   984be:	f200 8083 	bhi.w	985c8 <DD_SET_VALVE_1_16_IO+0x11c>
   984c2:	a201      	add	r2, pc, #4	; (adr r2, 984c8 <DD_SET_VALVE_1_16_IO+0x1c>)
   984c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   984c8:	00098509 	.word	0x00098509
   984cc:	00098515 	.word	0x00098515
   984d0:	00098521 	.word	0x00098521
   984d4:	0009852d 	.word	0x0009852d
   984d8:	00098539 	.word	0x00098539
   984dc:	00098545 	.word	0x00098545
   984e0:	00098551 	.word	0x00098551
   984e4:	0009855d 	.word	0x0009855d
   984e8:	00098569 	.word	0x00098569
   984ec:	00098575 	.word	0x00098575
   984f0:	00098581 	.word	0x00098581
   984f4:	0009858d 	.word	0x0009858d
   984f8:	00098599 	.word	0x00098599
   984fc:	000985a5 	.word	0x000985a5
   98500:	000985b1 	.word	0x000985b1
   98504:	000985bd 	.word	0x000985bd
			{	
			
			case VALVE_ID1:
			p_io = 10;
   98508:	230a      	movs	r3, #10
   9850a:	60bb      	str	r3, [r7, #8]
			peri = PB;
   9850c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98510:	607b      	str	r3, [r7, #4]
			break;
   98512:	e05a      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   98514:	2302      	movs	r3, #2
   98516:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98518:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9851c:	607b      	str	r3, [r7, #4]
			break;
   9851e:	e054      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   98520:	2303      	movs	r3, #3
   98522:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98524:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98528:	607b      	str	r3, [r7, #4]
			break;
   9852a:	e04e      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   9852c:	2304      	movs	r3, #4
   9852e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98530:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98534:	607b      	str	r3, [r7, #4]
			break;
   98536:	e048      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   98538:	2305      	movs	r3, #5
   9853a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9853c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98540:	607b      	str	r3, [r7, #4]
			break;
   98542:	e042      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   98544:	2306      	movs	r3, #6
   98546:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98548:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9854c:	607b      	str	r3, [r7, #4]
			break;
   9854e:	e03c      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   98550:	2307      	movs	r3, #7
   98552:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98554:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98558:	607b      	str	r3, [r7, #4]
			break;
   9855a:	e036      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   9855c:	2308      	movs	r3, #8
   9855e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98560:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98564:	607b      	str	r3, [r7, #4]
			break;
   98566:	e030      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   98568:	2309      	movs	r3, #9
   9856a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9856c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98570:	607b      	str	r3, [r7, #4]
			break;
   98572:	e02a      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   98574:	230a      	movs	r3, #10
   98576:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98578:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9857c:	607b      	str	r3, [r7, #4]
			break;
   9857e:	e024      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   98580:	230b      	movs	r3, #11
   98582:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98584:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98588:	607b      	str	r3, [r7, #4]
			break;
   9858a:	e01e      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   9858c:	230c      	movs	r3, #12
   9858e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98590:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98594:	607b      	str	r3, [r7, #4]
			break;
   98596:	e018      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   98598:	230d      	movs	r3, #13
   9859a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9859c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   985a0:	607b      	str	r3, [r7, #4]
			break;
   985a2:	e012      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   985a4:	230e      	movs	r3, #14
   985a6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   985a8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   985ac:	607b      	str	r3, [r7, #4]
			break;
   985ae:	e00c      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   985b0:	230f      	movs	r3, #15
   985b2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   985b4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   985b8:	607b      	str	r3, [r7, #4]
			break;
   985ba:	e006      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   985bc:	2310      	movs	r3, #16
   985be:	60bb      	str	r3, [r7, #8]
			peri = PC;
   985c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   985c4:	607b      	str	r3, [r7, #4]
			break;
   985c6:	e000      	b.n	985ca <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   985c8:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   985ca:	4b18      	ldr	r3, [pc, #96]	; (9862c <DD_SET_VALVE_1_16_IO+0x180>)
   985cc:	881b      	ldrh	r3, [r3, #0]
   985ce:	461a      	mov	r2, r3
   985d0:	7bfb      	ldrb	r3, [r7, #15]
   985d2:	3b01      	subs	r3, #1
   985d4:	fa42 f303 	asr.w	r3, r2, r3
   985d8:	f003 0301 	and.w	r3, r3, #1
   985dc:	2b00      	cmp	r3, #0
   985de:	d00c      	beq.n	985fa <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   985e0:	7bfb      	ldrb	r3, [r7, #15]
   985e2:	2b01      	cmp	r3, #1
   985e4:	d104      	bne.n	985f0 <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   985e6:	68b9      	ldr	r1, [r7, #8]
   985e8:	6878      	ldr	r0, [r7, #4]
   985ea:	4b11      	ldr	r3, [pc, #68]	; (98630 <DD_SET_VALVE_1_16_IO+0x184>)
   985ec:	4798      	blx	r3
   985ee:	e010      	b.n	98612 <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   985f0:	68b9      	ldr	r1, [r7, #8]
   985f2:	6878      	ldr	r0, [r7, #4]
   985f4:	4b0f      	ldr	r3, [pc, #60]	; (98634 <DD_SET_VALVE_1_16_IO+0x188>)
   985f6:	4798      	blx	r3
   985f8:	e00b      	b.n	98612 <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   985fa:	7bfb      	ldrb	r3, [r7, #15]
   985fc:	2b01      	cmp	r3, #1
   985fe:	d104      	bne.n	9860a <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   98600:	68b9      	ldr	r1, [r7, #8]
   98602:	6878      	ldr	r0, [r7, #4]
   98604:	4b0b      	ldr	r3, [pc, #44]	; (98634 <DD_SET_VALVE_1_16_IO+0x188>)
   98606:	4798      	blx	r3
   98608:	e003      	b.n	98612 <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   9860a:	68b9      	ldr	r1, [r7, #8]
   9860c:	6878      	ldr	r0, [r7, #4]
   9860e:	4b08      	ldr	r3, [pc, #32]	; (98630 <DD_SET_VALVE_1_16_IO+0x184>)
   98610:	4798      	blx	r3
						}
			count++;
   98612:	7bfb      	ldrb	r3, [r7, #15]
   98614:	3301      	adds	r3, #1
   98616:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   98618:	7bfb      	ldrb	r3, [r7, #15]
   9861a:	2b10      	cmp	r3, #16
   9861c:	f67f af4c 	bls.w	984b8 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   98620:	2300      	movs	r3, #0
}
   98622:	4618      	mov	r0, r3
   98624:	3710      	adds	r7, #16
   98626:	46bd      	mov	sp, r7
   98628:	bd80      	pop	{r7, pc}
   9862a:	bf00      	nop
   9862c:	20071b34 	.word	0x20071b34
   98630:	00096e19 	.word	0x00096e19
   98634:	00096e9d 	.word	0x00096e9d

00098638 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   98638:	b580      	push	{r7, lr}
   9863a:	b084      	sub	sp, #16
   9863c:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   9863e:	2311      	movs	r3, #17
   98640:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   98642:	e074      	b.n	9872e <DD_SET_VALVE_17_20_IO+0xf6>
		{
			switch (count)
   98644:	7bfb      	ldrb	r3, [r7, #15]
   98646:	3b11      	subs	r3, #17
   98648:	2b0f      	cmp	r3, #15
   9864a:	d853      	bhi.n	986f4 <DD_SET_VALVE_17_20_IO+0xbc>
   9864c:	a201      	add	r2, pc, #4	; (adr r2, 98654 <DD_SET_VALVE_17_20_IO+0x1c>)
   9864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98652:	bf00      	nop
   98654:	00098695 	.word	0x00098695
   98658:	000986a1 	.word	0x000986a1
   9865c:	000986ad 	.word	0x000986ad
   98660:	000986b9 	.word	0x000986b9
   98664:	000986f5 	.word	0x000986f5
   98668:	000986f5 	.word	0x000986f5
   9866c:	000986f5 	.word	0x000986f5
   98670:	000986f5 	.word	0x000986f5
   98674:	000986f5 	.word	0x000986f5
   98678:	000986f5 	.word	0x000986f5
   9867c:	000986f5 	.word	0x000986f5
   98680:	000986f5 	.word	0x000986f5
   98684:	000986c5 	.word	0x000986c5
   98688:	000986d1 	.word	0x000986d1
   9868c:	000986dd 	.word	0x000986dd
   98690:	000986e9 	.word	0x000986e9
			{
				
					case VALVE_ID17:
					p_io = 1;
   98694:	2301      	movs	r3, #1
   98696:	60bb      	str	r3, [r7, #8]
					peri = PC;
   98698:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9869c:	607b      	str	r3, [r7, #4]
					break;
   9869e:	e02a      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID18:
					p_io = 2;
   986a0:	2302      	movs	r3, #2
   986a2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986a4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986a8:	607b      	str	r3, [r7, #4]
					break;
   986aa:	e024      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID19:
					p_io = 3;
   986ac:	2303      	movs	r3, #3
   986ae:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986b0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986b4:	607b      	str	r3, [r7, #4]
					break;
   986b6:	e01e      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID20:
					p_io = 4;
   986b8:	2304      	movs	r3, #4
   986ba:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986bc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986c0:	607b      	str	r3, [r7, #4]
					break;
   986c2:	e018      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_BUZZER:
					p_io = 13;
   986c4:	230d      	movs	r3, #13
   986c6:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986c8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986cc:	607b      	str	r3, [r7, #4]
					break;
   986ce:	e012      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_RED:
					p_io = 14;
   986d0:	230e      	movs	r3, #14
   986d2:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986d4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986d8:	607b      	str	r3, [r7, #4]
					break;
   986da:	e00c      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_AMBER:
					p_io = 15;
   986dc:	230f      	movs	r3, #15
   986de:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986e4:	607b      	str	r3, [r7, #4]
					break;
   986e6:	e006      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_GREEN:
					p_io = 16;
   986e8:	2310      	movs	r3, #16
   986ea:	60bb      	str	r3, [r7, #8]
					peri = PC;
   986ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   986f0:	607b      	str	r3, [r7, #4]
					break;
   986f2:	e000      	b.n	986f6 <DD_SET_VALVE_17_20_IO+0xbe>
				
					default:
					break;
   986f4:	bf00      	nop
			}
					if (dd_valve_port_17_20 & 1<< count-17 )
   986f6:	4b12      	ldr	r3, [pc, #72]	; (98740 <DD_SET_VALVE_17_20_IO+0x108>)
   986f8:	881b      	ldrh	r3, [r3, #0]
   986fa:	461a      	mov	r2, r3
   986fc:	7bfb      	ldrb	r3, [r7, #15]
   986fe:	3b11      	subs	r3, #17
   98700:	fa42 f303 	asr.w	r3, r2, r3
   98704:	f003 0301 	and.w	r3, r3, #1
   98708:	2b00      	cmp	r3, #0
   9870a:	d004      	beq.n	98716 <DD_SET_VALVE_17_20_IO+0xde>
	
					{

						DD_RESET_PIO(peri,p_io);
   9870c:	68b9      	ldr	r1, [r7, #8]
   9870e:	6878      	ldr	r0, [r7, #4]
   98710:	4b0c      	ldr	r3, [pc, #48]	; (98744 <DD_SET_VALVE_17_20_IO+0x10c>)
   98712:	4798      	blx	r3
   98714:	e003      	b.n	9871e <DD_SET_VALVE_17_20_IO+0xe6>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   98716:	68b9      	ldr	r1, [r7, #8]
   98718:	6878      	ldr	r0, [r7, #4]
   9871a:	4b0b      	ldr	r3, [pc, #44]	; (98748 <DD_SET_VALVE_17_20_IO+0x110>)
   9871c:	4798      	blx	r3
			}
				
		count++;
   9871e:	7bfb      	ldrb	r3, [r7, #15]
   98720:	3301      	adds	r3, #1
   98722:	73fb      	strb	r3, [r7, #15]
		if (count == 21)
   98724:	7bfb      	ldrb	r3, [r7, #15]
   98726:	2b15      	cmp	r3, #21
   98728:	d101      	bne.n	9872e <DD_SET_VALVE_17_20_IO+0xf6>
		{
			count = 29;
   9872a:	231d      	movs	r3, #29
   9872c:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   9872e:	7bfb      	ldrb	r3, [r7, #15]
   98730:	2b20      	cmp	r3, #32
   98732:	d987      	bls.n	98644 <DD_SET_VALVE_17_20_IO+0xc>
		{
			count = 29;
		}
	}
	
	return 0;
   98734:	2300      	movs	r3, #0
}
   98736:	4618      	mov	r0, r3
   98738:	3710      	adds	r7, #16
   9873a:	46bd      	mov	sp, r7
   9873c:	bd80      	pop	{r7, pc}
   9873e:	bf00      	nop
   98740:	20071b36 	.word	0x20071b36
   98744:	00096e9d 	.word	0x00096e9d
   98748:	00096e19 	.word	0x00096e19

0009874c <DD_SET_CLAMP>:




uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   9874c:	b580      	push	{r7, lr}
   9874e:	b082      	sub	sp, #8
   98750:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   98752:	231b      	movs	r3, #27
   98754:	607b      	str	r3, [r7, #4]
	peri = PC;
   98756:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9875a:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   9875c:	6879      	ldr	r1, [r7, #4]
   9875e:	6838      	ldr	r0, [r7, #0]
   98760:	4b03      	ldr	r3, [pc, #12]	; (98770 <DD_SET_CLAMP+0x24>)
   98762:	4798      	blx	r3
	
	return 0;
   98764:	2300      	movs	r3, #0
}
   98766:	4618      	mov	r0, r3
   98768:	3708      	adds	r7, #8
   9876a:	46bd      	mov	sp, r7
   9876c:	bd80      	pop	{r7, pc}
   9876e:	bf00      	nop
   98770:	00096e19 	.word	0x00096e19

00098774 <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   98774:	b580      	push	{r7, lr}
   98776:	b082      	sub	sp, #8
   98778:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9877a:	231b      	movs	r3, #27
   9877c:	607b      	str	r3, [r7, #4]
	peri = PC;
   9877e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98782:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   98784:	6879      	ldr	r1, [r7, #4]
   98786:	6838      	ldr	r0, [r7, #0]
   98788:	4b03      	ldr	r3, [pc, #12]	; (98798 <DD_RESET_CLAMP+0x24>)
   9878a:	4798      	blx	r3
	
	return 0;
   9878c:	2300      	movs	r3, #0
}
   9878e:	4618      	mov	r0, r3
   98790:	3708      	adds	r7, #8
   98792:	46bd      	mov	sp, r7
   98794:	bd80      	pop	{r7, pc}
   98796:	bf00      	nop
   98798:	00096e9d 	.word	0x00096e9d

0009879c <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   9879c:	b580      	push	{r7, lr}
   9879e:	b086      	sub	sp, #24
   987a0:	af00      	add	r7, sp, #0
   987a2:	4603      	mov	r3, r0
   987a4:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   987a6:	2300      	movs	r3, #0
   987a8:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   987aa:	79fb      	ldrb	r3, [r7, #7]
   987ac:	3b01      	subs	r3, #1
   987ae:	2b24      	cmp	r3, #36	; 0x24
   987b0:	f200 812c 	bhi.w	98a0c <DD_RD_SENSIN+0x270>
   987b4:	a201      	add	r2, pc, #4	; (adr r2, 987bc <DD_RD_SENSIN+0x20>)
   987b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   987ba:	bf00      	nop
   987bc:	00098851 	.word	0x00098851
   987c0:	0009885d 	.word	0x0009885d
   987c4:	00098869 	.word	0x00098869
   987c8:	00098875 	.word	0x00098875
   987cc:	00098881 	.word	0x00098881
   987d0:	0009888d 	.word	0x0009888d
   987d4:	00098899 	.word	0x00098899
   987d8:	000988a5 	.word	0x000988a5
   987dc:	000988b1 	.word	0x000988b1
   987e0:	000988bd 	.word	0x000988bd
   987e4:	000988c9 	.word	0x000988c9
   987e8:	000988d5 	.word	0x000988d5
   987ec:	000988e1 	.word	0x000988e1
   987f0:	000988ed 	.word	0x000988ed
   987f4:	000988f9 	.word	0x000988f9
   987f8:	00098905 	.word	0x00098905
   987fc:	00098911 	.word	0x00098911
   98800:	0009891d 	.word	0x0009891d
   98804:	00098929 	.word	0x00098929
   98808:	00098935 	.word	0x00098935
   9880c:	00098941 	.word	0x00098941
   98810:	0009894d 	.word	0x0009894d
   98814:	00098959 	.word	0x00098959
   98818:	00098965 	.word	0x00098965
   9881c:	00098971 	.word	0x00098971
   98820:	0009897d 	.word	0x0009897d
   98824:	00098989 	.word	0x00098989
   98828:	00098995 	.word	0x00098995
   9882c:	000989a1 	.word	0x000989a1
   98830:	000989ad 	.word	0x000989ad
   98834:	000989b9 	.word	0x000989b9
   98838:	000989c5 	.word	0x000989c5
   9883c:	000989d1 	.word	0x000989d1
   98840:	000989dd 	.word	0x000989dd
   98844:	000989e9 	.word	0x000989e9
   98848:	000989f5 	.word	0x000989f5
   9884c:	00098a01 	.word	0x00098a01
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   98850:	2307      	movs	r3, #7
   98852:	617b      	str	r3, [r7, #20]
		peri = PA;
   98854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98858:	613b      	str	r3, [r7, #16]
		break;
   9885a:	e0d8      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   9885c:	2319      	movs	r3, #25
   9885e:	617b      	str	r3, [r7, #20]
		peri = PC;
   98860:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98864:	613b      	str	r3, [r7, #16]
		break;
   98866:	e0d2      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   98868:	230c      	movs	r3, #12
   9886a:	617b      	str	r3, [r7, #20]
		peri = PB;
   9886c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98870:	613b      	str	r3, [r7, #16]
		break;
   98872:	e0cc      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   98874:	2300      	movs	r3, #0
   98876:	617b      	str	r3, [r7, #20]
		peri = PD;
   98878:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9887c:	613b      	str	r3, [r7, #16]
		break;
   9887e:	e0c6      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   98880:	231e      	movs	r3, #30
   98882:	617b      	str	r3, [r7, #20]
		peri = PC;
   98884:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98888:	613b      	str	r3, [r7, #16]
		break;
   9888a:	e0c0      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   9888c:	2306      	movs	r3, #6
   9888e:	617b      	str	r3, [r7, #20]
		peri = PD;
   98890:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98894:	613b      	str	r3, [r7, #16]
		break;
   98896:	e0ba      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   98898:	2309      	movs	r3, #9
   9889a:	617b      	str	r3, [r7, #20]
		peri = PD;
   9889c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   988a0:	613b      	str	r3, [r7, #16]
		break;
   988a2:	e0b4      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   988a4:	2305      	movs	r3, #5
   988a6:	617b      	str	r3, [r7, #20]
		peri = PD;
   988a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   988ac:	613b      	str	r3, [r7, #16]
		break;
   988ae:	e0ae      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   988b0:	2308      	movs	r3, #8
   988b2:	617b      	str	r3, [r7, #20]
		peri = PB;
   988b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   988b8:	613b      	str	r3, [r7, #16]
		break;
   988ba:	e0a8      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   988bc:	2312      	movs	r3, #18
   988be:	617b      	str	r3, [r7, #20]
		peri = PB;
   988c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   988c4:	613b      	str	r3, [r7, #16]
		break;
   988c6:	e0a2      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   988c8:	231a      	movs	r3, #26
   988ca:	617b      	str	r3, [r7, #20]
		peri = PC;
   988cc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   988d0:	613b      	str	r3, [r7, #16]
		break;
   988d2:	e09c      	b.n	98a0e <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   988d4:	2313      	movs	r3, #19
   988d6:	617b      	str	r3, [r7, #20]
		peri =PA;
   988d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   988dc:	613b      	str	r3, [r7, #16]
		break;
   988de:	e096      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   988e0:	2303      	movs	r3, #3
   988e2:	617b      	str	r3, [r7, #20]
		peri =PD;
   988e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   988e8:	613b      	str	r3, [r7, #16]
		break;
   988ea:	e090      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   988ec:	2310      	movs	r3, #16
   988ee:	617b      	str	r3, [r7, #20]
		peri =PB;
   988f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   988f4:	613b      	str	r3, [r7, #16]
		break;
   988f6:	e08a      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   988f8:	2312      	movs	r3, #18
   988fa:	617b      	str	r3, [r7, #20]
		peri =PC;
   988fc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98900:	613b      	str	r3, [r7, #16]
		break;
   98902:	e084      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   98904:	2304      	movs	r3, #4
   98906:	617b      	str	r3, [r7, #20]
		peri =PD;
   98908:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9890c:	613b      	str	r3, [r7, #16]
		break;
   9890e:	e07e      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   98910:	2316      	movs	r3, #22
   98912:	617b      	str	r3, [r7, #20]
		peri =PB;
   98914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98918:	613b      	str	r3, [r7, #16]
		break;
   9891a:	e078      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   9891c:	230a      	movs	r3, #10
   9891e:	617b      	str	r3, [r7, #20]
		peri =PD;
   98920:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98924:	613b      	str	r3, [r7, #16]
		break;
   98926:	e072      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   98928:	2317      	movs	r3, #23
   9892a:	617b      	str	r3, [r7, #20]
 		peri =PB;
   9892c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98930:	613b      	str	r3, [r7, #16]
		break;
   98932:	e06c      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   98934:	2309      	movs	r3, #9
   98936:	617b      	str	r3, [r7, #20]
		peri =PB;
   98938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   9893c:	613b      	str	r3, [r7, #16]
		
		break;
   9893e:	e066      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   98940:	2319      	movs	r3, #25
   98942:	617b      	str	r3, [r7, #20]
		peri =PB;
   98944:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98948:	613b      	str	r3, [r7, #16]
		break;
   9894a:	e060      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   9894c:	2318      	movs	r3, #24
   9894e:	617b      	str	r3, [r7, #20]
		peri =PB;
   98950:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98954:	613b      	str	r3, [r7, #16]
		break;
   98956:	e05a      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   98958:	231b      	movs	r3, #27
   9895a:	617b      	str	r3, [r7, #20]
			peri =PB;
   9895c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98960:	613b      	str	r3, [r7, #16]
		break;
   98962:	e054      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   98964:	2318      	movs	r3, #24
   98966:	617b      	str	r3, [r7, #20]
			peri =PC;
   98968:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9896c:	613b      	str	r3, [r7, #16]
		break;
   9896e:	e04e      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   98970:	230e      	movs	r3, #14
   98972:	617b      	str	r3, [r7, #20]
		peri =PA;
   98974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98978:	613b      	str	r3, [r7, #16]
		break;
   9897a:	e048      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   9897c:	230f      	movs	r3, #15
   9897e:	617b      	str	r3, [r7, #20]
			peri =PB;
   98980:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98984:	613b      	str	r3, [r7, #16]
		break;
   98986:	e042      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   98988:	231d      	movs	r3, #29
   9898a:	617b      	str	r3, [r7, #20]
		peri =PC;
   9898c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98990:	613b      	str	r3, [r7, #16]
		break;
   98992:	e03c      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   98994:	2314      	movs	r3, #20
   98996:	617b      	str	r3, [r7, #20]
		peri =PC;
   98998:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9899c:	613b      	str	r3, [r7, #16]
		break;
   9899e:	e036      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   989a0:	2311      	movs	r3, #17
   989a2:	617b      	str	r3, [r7, #20]
		peri =PC;
   989a4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   989a8:	613b      	str	r3, [r7, #16]
		break;
   989aa:	e030      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   989ac:	2313      	movs	r3, #19
   989ae:	617b      	str	r3, [r7, #20]
		peri =PC;
   989b0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   989b4:	613b      	str	r3, [r7, #16]
		break;
   989b6:	e02a      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   989b8:	2310      	movs	r3, #16
   989ba:	617b      	str	r3, [r7, #20]
		peri =PA;
   989bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   989c0:	613b      	str	r3, [r7, #16]
		break;
   989c2:	e024      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   989c4:	2318      	movs	r3, #24
   989c6:	617b      	str	r3, [r7, #20]
		peri =PA;
   989c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   989cc:	613b      	str	r3, [r7, #16]
		break;
   989ce:	e01e      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   989d0:	2315      	movs	r3, #21
   989d2:	617b      	str	r3, [r7, #20]
		peri =PB;
   989d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   989d8:	613b      	str	r3, [r7, #16]
		break;
   989da:	e018      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   989dc:	230a      	movs	r3, #10
   989de:	617b      	str	r3, [r7, #20]
		peri =PA;
   989e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   989e4:	613b      	str	r3, [r7, #16]
		break;
   989e6:	e012      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   989e8:	2302      	movs	r3, #2
   989ea:	617b      	str	r3, [r7, #20]
		peri =PA;
   989ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   989f0:	613b      	str	r3, [r7, #16]
		break;
   989f2:	e00c      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   989f4:	231a      	movs	r3, #26
   989f6:	617b      	str	r3, [r7, #20]
		peri =PB;
   989f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   989fc:	613b      	str	r3, [r7, #16]
		break;
   989fe:	e006      	b.n	98a0e <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   98a00:	2304      	movs	r3, #4
   98a02:	617b      	str	r3, [r7, #20]
			peri =PA;
   98a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98a08:	613b      	str	r3, [r7, #16]
		break;
   98a0a:	e000      	b.n	98a0e <DD_RD_SENSIN+0x272>
		default:
		break;
   98a0c:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   98a0e:	6979      	ldr	r1, [r7, #20]
   98a10:	6938      	ldr	r0, [r7, #16]
   98a12:	4b04      	ldr	r3, [pc, #16]	; (98a24 <DD_RD_SENSIN+0x288>)
   98a14:	4798      	blx	r3
   98a16:	4603      	mov	r3, r0
   98a18:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   98a1a:	7bfb      	ldrb	r3, [r7, #15]
	
}
   98a1c:	4618      	mov	r0, r3
   98a1e:	3718      	adds	r7, #24
   98a20:	46bd      	mov	sp, r7
   98a22:	bd80      	pop	{r7, pc}
   98a24:	00096f21 	.word	0x00096f21

00098a28 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   98a28:	b580      	push	{r7, lr}
   98a2a:	b084      	sub	sp, #16
   98a2c:	af00      	add	r7, sp, #0
   98a2e:	4603      	mov	r3, r0
   98a30:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   98a32:	2301      	movs	r3, #1
   98a34:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   98a36:	79fb      	ldrb	r3, [r7, #7]
   98a38:	4618      	mov	r0, r3
   98a3a:	4b04      	ldr	r3, [pc, #16]	; (98a4c <DD_CONSOLE_TX+0x24>)
   98a3c:	4798      	blx	r3
   98a3e:	4603      	mov	r3, r0
   98a40:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   98a42:	7bfb      	ldrb	r3, [r7, #15]
}
   98a44:	4618      	mov	r0, r3
   98a46:	3710      	adds	r7, #16
   98a48:	46bd      	mov	sp, r7
   98a4a:	bd80      	pop	{r7, pc}
   98a4c:	000998d5 	.word	0x000998d5

00098a50 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   98a50:	b580      	push	{r7, lr}
   98a52:	b084      	sub	sp, #16
   98a54:	af00      	add	r7, sp, #0
   98a56:	4603      	mov	r3, r0
   98a58:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   98a5a:	79fb      	ldrb	r3, [r7, #7]
   98a5c:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   98a5e:	7bfb      	ldrb	r3, [r7, #15]
   98a60:	4618      	mov	r0, r3
   98a62:	4b03      	ldr	r3, [pc, #12]	; (98a70 <DD_CONSOLE_RX+0x20>)
   98a64:	4798      	blx	r3
	
	
	return 1;
   98a66:	2301      	movs	r3, #1
}
   98a68:	4618      	mov	r0, r3
   98a6a:	3710      	adds	r7, #16
   98a6c:	46bd      	mov	sp, r7
   98a6e:	bd80      	pop	{r7, pc}
   98a70:	00099e05 	.word	0x00099e05

00098a74 <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   98a74:	b590      	push	{r4, r7, lr}
   98a76:	b089      	sub	sp, #36	; 0x24
   98a78:	af00      	add	r7, sp, #0
   98a7a:	4603      	mov	r3, r0
   98a7c:	460a      	mov	r2, r1
   98a7e:	71fb      	strb	r3, [r7, #7]
   98a80:	4613      	mov	r3, r2
   98a82:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   98a84:	2300      	movs	r3, #0
   98a86:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   98a88:	79bb      	ldrb	r3, [r7, #6]
   98a8a:	2201      	movs	r2, #1
   98a8c:	fb92 f3f3 	sdiv	r3, r2, r3
   98a90:	01db      	lsls	r3, r3, #7
   98a92:	4a1b      	ldr	r2, [pc, #108]	; (98b00 <DD_CONFIG_TIMER+0x8c>)
   98a94:	fb92 f3f3 	sdiv	r3, r2, r3
   98a98:	1e5a      	subs	r2, r3, #1
   98a9a:	4b1a      	ldr	r3, [pc, #104]	; (98b04 <DD_CONFIG_TIMER+0x90>)
   98a9c:	4610      	mov	r0, r2
   98a9e:	4798      	blx	r3
   98aa0:	4603      	mov	r3, r0
   98aa2:	460c      	mov	r4, r1
   98aa4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   98aa8:	4b17      	ldr	r3, [pc, #92]	; (98b08 <DD_CONFIG_TIMER+0x94>)
   98aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   98aae:	4798      	blx	r3
   98ab0:	4603      	mov	r3, r0
   98ab2:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   98ab4:	79fb      	ldrb	r3, [r7, #7]
   98ab6:	2b01      	cmp	r3, #1
   98ab8:	d00a      	beq.n	98ad0 <DD_CONFIG_TIMER+0x5c>
   98aba:	2b02      	cmp	r3, #2
   98abc:	d011      	beq.n	98ae2 <DD_CONFIG_TIMER+0x6e>
   98abe:	2b00      	cmp	r3, #0
   98ac0:	d118      	bne.n	98af4 <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   98ac2:	68fb      	ldr	r3, [r7, #12]
   98ac4:	221b      	movs	r2, #27
   98ac6:	69f9      	ldr	r1, [r7, #28]
   98ac8:	4810      	ldr	r0, [pc, #64]	; (98b0c <DD_CONFIG_TIMER+0x98>)
   98aca:	4c11      	ldr	r4, [pc, #68]	; (98b10 <DD_CONFIG_TIMER+0x9c>)
   98acc:	47a0      	blx	r4
		break;
   98ace:	e011      	b.n	98af4 <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   98ad0:	4b10      	ldr	r3, [pc, #64]	; (98b14 <DD_CONFIG_TIMER+0xa0>)
   98ad2:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   98ad4:	68fb      	ldr	r3, [r7, #12]
   98ad6:	221e      	movs	r2, #30
   98ad8:	69f9      	ldr	r1, [r7, #28]
   98ada:	480f      	ldr	r0, [pc, #60]	; (98b18 <DD_CONFIG_TIMER+0xa4>)
   98adc:	4c0c      	ldr	r4, [pc, #48]	; (98b10 <DD_CONFIG_TIMER+0x9c>)
   98ade:	47a0      	blx	r4
		break;
   98ae0:	e008      	b.n	98af4 <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   98ae2:	4b0e      	ldr	r3, [pc, #56]	; (98b1c <DD_CONFIG_TIMER+0xa8>)
   98ae4:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   98ae6:	68fb      	ldr	r3, [r7, #12]
   98ae8:	2221      	movs	r2, #33	; 0x21
   98aea:	69f9      	ldr	r1, [r7, #28]
   98aec:	480c      	ldr	r0, [pc, #48]	; (98b20 <DD_CONFIG_TIMER+0xac>)
   98aee:	4c08      	ldr	r4, [pc, #32]	; (98b10 <DD_CONFIG_TIMER+0x9c>)
   98af0:	47a0      	blx	r4
		
		break;
   98af2:	bf00      	nop
		
	}
}
   98af4:	bf00      	nop
   98af6:	4618      	mov	r0, r3
   98af8:	3724      	adds	r7, #36	; 0x24
   98afa:	46bd      	mov	sp, r7
   98afc:	bd90      	pop	{r4, r7, pc}
   98afe:	bf00      	nop
   98b00:	0501bd00 	.word	0x0501bd00
   98b04:	000a5c45 	.word	0x000a5c45
   98b08:	000a6295 	.word	0x000a6295
   98b0c:	40080000 	.word	0x40080000
   98b10:	000993d1 	.word	0x000993d1
   98b14:	00321161 	.word	0x00321161
   98b18:	40084000 	.word	0x40084000
   98b1c:	001e0a6d 	.word	0x001e0a6d
   98b20:	40088000 	.word	0x40088000

00098b24 <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   98b24:	b580      	push	{r7, lr}
   98b26:	b082      	sub	sp, #8
   98b28:	af00      	add	r7, sp, #0
   98b2a:	4603      	mov	r3, r0
   98b2c:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   98b2e:	79fb      	ldrb	r3, [r7, #7]
   98b30:	3b01      	subs	r3, #1
   98b32:	2b14      	cmp	r3, #20
   98b34:	f200 831d 	bhi.w	99172 <DD_SET_FLOW_PATH+0x64e>
   98b38:	a201      	add	r2, pc, #4	; (adr r2, 98b40 <DD_SET_FLOW_PATH+0x1c>)
   98b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98b3e:	bf00      	nop
   98b40:	00098c47 	.word	0x00098c47
   98b44:	00098cc1 	.word	0x00098cc1
   98b48:	00098d3b 	.word	0x00098d3b
   98b4c:	00098d97 	.word	0x00098d97
   98b50:	00098e09 	.word	0x00098e09
   98b54:	00098ec1 	.word	0x00098ec1
   98b58:	00098f79 	.word	0x00098f79
   98b5c:	00099173 	.word	0x00099173
   98b60:	00099173 	.word	0x00099173
   98b64:	0009905d 	.word	0x0009905d
   98b68:	000990a7 	.word	0x000990a7
   98b6c:	00099173 	.word	0x00099173
   98b70:	00099173 	.word	0x00099173
   98b74:	00099173 	.word	0x00099173
   98b78:	00099173 	.word	0x00099173
   98b7c:	00099173 	.word	0x00099173
   98b80:	00098bc7 	.word	0x00098bc7
   98b84:	000990f1 	.word	0x000990f1
   98b88:	00098b95 	.word	0x00098b95
   98b8c:	00099173 	.word	0x00099173
   98b90:	00098fe1 	.word	0x00098fe1
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   98b94:	2005      	movs	r0, #5
   98b96:	4b97      	ldr	r3, [pc, #604]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98b98:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   98b9a:	2006      	movs	r0, #6
   98b9c:	4b95      	ldr	r3, [pc, #596]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98b9e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   98ba0:	2007      	movs	r0, #7
   98ba2:	4b94      	ldr	r3, [pc, #592]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98ba4:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   98ba6:	2008      	movs	r0, #8
   98ba8:	4b92      	ldr	r3, [pc, #584]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98baa:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   98bac:	2009      	movs	r0, #9
   98bae:	4b91      	ldr	r3, [pc, #580]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bb0:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   98bb2:	200a      	movs	r0, #10
   98bb4:	4b8f      	ldr	r3, [pc, #572]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bb6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   98bb8:	200b      	movs	r0, #11
   98bba:	4b8e      	ldr	r3, [pc, #568]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bbc:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   98bbe:	200c      	movs	r0, #12
   98bc0:	4b8c      	ldr	r3, [pc, #560]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bc2:	4798      	blx	r3
		break;
   98bc4:	e2d5      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   98bc6:	2001      	movs	r0, #1
   98bc8:	4b8a      	ldr	r3, [pc, #552]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bca:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   98bcc:	2002      	movs	r0, #2
   98bce:	4b89      	ldr	r3, [pc, #548]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bd0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   98bd2:	2003      	movs	r0, #3
   98bd4:	4b87      	ldr	r3, [pc, #540]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bd6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98bd8:	2004      	movs	r0, #4
   98bda:	4b86      	ldr	r3, [pc, #536]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bdc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98bde:	2005      	movs	r0, #5
   98be0:	4b84      	ldr	r3, [pc, #528]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98be2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98be4:	2006      	movs	r0, #6
   98be6:	4b83      	ldr	r3, [pc, #524]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98be8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98bea:	2007      	movs	r0, #7
   98bec:	4b81      	ldr	r3, [pc, #516]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98bf0:	2008      	movs	r0, #8
   98bf2:	4b80      	ldr	r3, [pc, #512]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bf4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98bf6:	2009      	movs	r0, #9
   98bf8:	4b7e      	ldr	r3, [pc, #504]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98bfa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98bfc:	200a      	movs	r0, #10
   98bfe:	4b7d      	ldr	r3, [pc, #500]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c00:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98c02:	200b      	movs	r0, #11
   98c04:	4b7b      	ldr	r3, [pc, #492]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c06:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98c08:	200c      	movs	r0, #12
   98c0a:	4b7a      	ldr	r3, [pc, #488]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c0c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98c0e:	200d      	movs	r0, #13
   98c10:	4b78      	ldr	r3, [pc, #480]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c12:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98c14:	200e      	movs	r0, #14
   98c16:	4b77      	ldr	r3, [pc, #476]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c18:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   98c1a:	200f      	movs	r0, #15
   98c1c:	4b75      	ldr	r3, [pc, #468]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c1e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98c20:	2010      	movs	r0, #16
   98c22:	4b74      	ldr	r3, [pc, #464]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c24:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98c26:	2011      	movs	r0, #17
   98c28:	4b72      	ldr	r3, [pc, #456]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c2a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   98c2c:	2012      	movs	r0, #18
   98c2e:	4b71      	ldr	r3, [pc, #452]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c30:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98c32:	2013      	movs	r0, #19
   98c34:	4b6f      	ldr	r3, [pc, #444]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c36:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   98c38:	2002      	movs	r0, #2
   98c3a:	4b6f      	ldr	r3, [pc, #444]	; (98df8 <DD_SET_FLOW_PATH+0x2d4>)
   98c3c:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   98c3e:	2001      	movs	r0, #1
   98c40:	4b6d      	ldr	r3, [pc, #436]	; (98df8 <DD_SET_FLOW_PATH+0x2d4>)
   98c42:	4798      	blx	r3
				
				
		break;
   98c44:	e295      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   98c46:	2001      	movs	r0, #1
   98c48:	4b6c      	ldr	r3, [pc, #432]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98c4a:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   98c4c:	2003      	movs	r0, #3
   98c4e:	4b69      	ldr	r3, [pc, #420]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c50:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98c52:	2004      	movs	r0, #4
   98c54:	4b67      	ldr	r3, [pc, #412]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c56:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98c58:	2005      	movs	r0, #5
   98c5a:	4b66      	ldr	r3, [pc, #408]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98c5e:	2006      	movs	r0, #6
   98c60:	4b64      	ldr	r3, [pc, #400]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c62:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98c64:	2007      	movs	r0, #7
   98c66:	4b63      	ldr	r3, [pc, #396]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98c6a:	2008      	movs	r0, #8
   98c6c:	4b61      	ldr	r3, [pc, #388]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c6e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98c70:	2009      	movs	r0, #9
   98c72:	4b60      	ldr	r3, [pc, #384]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c74:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98c76:	200a      	movs	r0, #10
   98c78:	4b5e      	ldr	r3, [pc, #376]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c7a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98c7c:	200b      	movs	r0, #11
   98c7e:	4b5d      	ldr	r3, [pc, #372]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c80:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98c82:	200c      	movs	r0, #12
   98c84:	4b5b      	ldr	r3, [pc, #364]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c86:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98c88:	200d      	movs	r0, #13
   98c8a:	4b5a      	ldr	r3, [pc, #360]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c8c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98c8e:	200e      	movs	r0, #14
   98c90:	4b58      	ldr	r3, [pc, #352]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c92:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   98c94:	200f      	movs	r0, #15
   98c96:	4b59      	ldr	r3, [pc, #356]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98c98:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   98c9a:	2010      	movs	r0, #16
   98c9c:	4b55      	ldr	r3, [pc, #340]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98c9e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98ca0:	2011      	movs	r0, #17
   98ca2:	4b54      	ldr	r3, [pc, #336]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98ca4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98ca6:	2012      	movs	r0, #18
   98ca8:	4b54      	ldr	r3, [pc, #336]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98caa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98cac:	2013      	movs	r0, #19
   98cae:	4b51      	ldr	r3, [pc, #324]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cb0:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   98cb2:	2002      	movs	r0, #2
   98cb4:	4b50      	ldr	r3, [pc, #320]	; (98df8 <DD_SET_FLOW_PATH+0x2d4>)
   98cb6:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   98cb8:	2001      	movs	r0, #1
   98cba:	4b4f      	ldr	r3, [pc, #316]	; (98df8 <DD_SET_FLOW_PATH+0x2d4>)
   98cbc:	4798      	blx	r3
		
		
		break;
   98cbe:	e258      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   98cc0:	2001      	movs	r0, #1
   98cc2:	4b4e      	ldr	r3, [pc, #312]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98cc4:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   98cc6:	2003      	movs	r0, #3
   98cc8:	4b4a      	ldr	r3, [pc, #296]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cca:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98ccc:	2004      	movs	r0, #4
   98cce:	4b49      	ldr	r3, [pc, #292]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cd0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98cd2:	2005      	movs	r0, #5
   98cd4:	4b47      	ldr	r3, [pc, #284]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cd6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98cd8:	2006      	movs	r0, #6
   98cda:	4b46      	ldr	r3, [pc, #280]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cdc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98cde:	2007      	movs	r0, #7
   98ce0:	4b44      	ldr	r3, [pc, #272]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98ce2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98ce4:	2008      	movs	r0, #8
   98ce6:	4b43      	ldr	r3, [pc, #268]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98ce8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98cea:	2009      	movs	r0, #9
   98cec:	4b41      	ldr	r3, [pc, #260]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98cf0:	200a      	movs	r0, #10
   98cf2:	4b40      	ldr	r3, [pc, #256]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cf4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98cf6:	200b      	movs	r0, #11
   98cf8:	4b3e      	ldr	r3, [pc, #248]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98cfa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98cfc:	200c      	movs	r0, #12
   98cfe:	4b3d      	ldr	r3, [pc, #244]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d00:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98d02:	200d      	movs	r0, #13
   98d04:	4b3b      	ldr	r3, [pc, #236]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d06:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98d08:	200e      	movs	r0, #14
   98d0a:	4b3a      	ldr	r3, [pc, #232]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d0c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   98d0e:	200f      	movs	r0, #15
   98d10:	4b38      	ldr	r3, [pc, #224]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d12:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98d14:	2010      	movs	r0, #16
   98d16:	4b37      	ldr	r3, [pc, #220]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d18:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98d1a:	2011      	movs	r0, #17
   98d1c:	4b35      	ldr	r3, [pc, #212]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d1e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98d20:	2012      	movs	r0, #18
   98d22:	4b36      	ldr	r3, [pc, #216]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d24:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98d26:	2013      	movs	r0, #19
   98d28:	4b32      	ldr	r3, [pc, #200]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d2a:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   98d2c:	2001      	movs	r0, #1
   98d2e:	4b34      	ldr	r3, [pc, #208]	; (98e00 <DD_SET_FLOW_PATH+0x2dc>)
   98d30:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   98d32:	2002      	movs	r0, #2
   98d34:	4b30      	ldr	r3, [pc, #192]	; (98df8 <DD_SET_FLOW_PATH+0x2d4>)
   98d36:	4798      	blx	r3
		
		break;
   98d38:	e21b      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   98d3a:	2005      	movs	r0, #5
   98d3c:	4b2d      	ldr	r3, [pc, #180]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d3e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   98d40:	2008      	movs	r0, #8
   98d42:	4b2c      	ldr	r3, [pc, #176]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d44:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   98d46:	200a      	movs	r0, #10
   98d48:	4b2a      	ldr	r3, [pc, #168]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d4a:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   98d4c:	200b      	movs	r0, #11
   98d4e:	4b29      	ldr	r3, [pc, #164]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d50:	4798      	blx	r3
				cl_wait(50);
   98d52:	2032      	movs	r0, #50	; 0x32
   98d54:	4b2b      	ldr	r3, [pc, #172]	; (98e04 <DD_SET_FLOW_PATH+0x2e0>)
   98d56:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   98d58:	2006      	movs	r0, #6
   98d5a:	4b28      	ldr	r3, [pc, #160]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d5c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   98d5e:	2007      	movs	r0, #7
   98d60:	4b26      	ldr	r3, [pc, #152]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d62:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   98d64:	2009      	movs	r0, #9
   98d66:	4b25      	ldr	r3, [pc, #148]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d68:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   98d6a:	200c      	movs	r0, #12
   98d6c:	4b23      	ldr	r3, [pc, #140]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d6e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   98d70:	200d      	movs	r0, #13
   98d72:	4b20      	ldr	r3, [pc, #128]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d74:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   98d76:	200e      	movs	r0, #14
   98d78:	4b1e      	ldr	r3, [pc, #120]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d7a:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   98d7c:	200f      	movs	r0, #15
   98d7e:	4b1f      	ldr	r3, [pc, #124]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d80:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   98d82:	2010      	movs	r0, #16
   98d84:	4b1b      	ldr	r3, [pc, #108]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d86:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   98d88:	2011      	movs	r0, #17
   98d8a:	4b1c      	ldr	r3, [pc, #112]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d8c:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   98d8e:	2012      	movs	r0, #18
   98d90:	4b1a      	ldr	r3, [pc, #104]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98d92:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   98d94:	e1ed      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   98d96:	2006      	movs	r0, #6
   98d98:	4b16      	ldr	r3, [pc, #88]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98d9a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98d9c:	2007      	movs	r0, #7
   98d9e:	4b15      	ldr	r3, [pc, #84]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98da0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98da2:	2009      	movs	r0, #9
   98da4:	4b13      	ldr	r3, [pc, #76]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98da6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98da8:	200c      	movs	r0, #12
   98daa:	4b12      	ldr	r3, [pc, #72]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98dac:	4798      	blx	r3
		cl_wait(50);
   98dae:	2032      	movs	r0, #50	; 0x32
   98db0:	4b14      	ldr	r3, [pc, #80]	; (98e04 <DD_SET_FLOW_PATH+0x2e0>)
   98db2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   98db4:	2005      	movs	r0, #5
   98db6:	4b11      	ldr	r3, [pc, #68]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98db8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   98dba:	2008      	movs	r0, #8
   98dbc:	4b0f      	ldr	r3, [pc, #60]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98dbe:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   98dc0:	200a      	movs	r0, #10
   98dc2:	4b0e      	ldr	r3, [pc, #56]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98dc4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   98dc6:	200b      	movs	r0, #11
   98dc8:	4b0c      	ldr	r3, [pc, #48]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98dca:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   98dcc:	200d      	movs	r0, #13
   98dce:	4b09      	ldr	r3, [pc, #36]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98dd0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98dd2:	200e      	movs	r0, #14
   98dd4:	4b07      	ldr	r3, [pc, #28]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98dd6:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   98dd8:	200f      	movs	r0, #15
   98dda:	4b08      	ldr	r3, [pc, #32]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98ddc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98dde:	2010      	movs	r0, #16
   98de0:	4b04      	ldr	r3, [pc, #16]	; (98df4 <DD_SET_FLOW_PATH+0x2d0>)
   98de2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   98de4:	2011      	movs	r0, #17
   98de6:	4b05      	ldr	r3, [pc, #20]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98de8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98dea:	2012      	movs	r0, #18
   98dec:	4b03      	ldr	r3, [pc, #12]	; (98dfc <DD_SET_FLOW_PATH+0x2d8>)
   98dee:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   98df0:	e1bf      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
   98df2:	bf00      	nop
   98df4:	000983b1 	.word	0x000983b1
   98df8:	00097f79 	.word	0x00097f79
   98dfc:	000982f1 	.word	0x000982f1
   98e00:	00097dd9 	.word	0x00097dd9
   98e04:	00093009 	.word	0x00093009
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   98e08:	2014      	movs	r0, #20
   98e0a:	4b8e      	ldr	r3, [pc, #568]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e0c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98e0e:	2005      	movs	r0, #5
   98e10:	4b8c      	ldr	r3, [pc, #560]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e12:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98e14:	2008      	movs	r0, #8
   98e16:	4b8b      	ldr	r3, [pc, #556]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e18:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98e1a:	200a      	movs	r0, #10
   98e1c:	4b89      	ldr	r3, [pc, #548]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e1e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98e20:	200b      	movs	r0, #11
   98e22:	4b88      	ldr	r3, [pc, #544]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e24:	4798      	blx	r3
		cl_wait(100);		
   98e26:	2064      	movs	r0, #100	; 0x64
   98e28:	4b87      	ldr	r3, [pc, #540]	; (99048 <DD_SET_FLOW_PATH+0x524>)
   98e2a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   98e2c:	2006      	movs	r0, #6
   98e2e:	4b87      	ldr	r3, [pc, #540]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e30:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   98e32:	2007      	movs	r0, #7
   98e34:	4b85      	ldr	r3, [pc, #532]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e36:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   98e38:	2009      	movs	r0, #9
   98e3a:	4b84      	ldr	r3, [pc, #528]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e3c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   98e3e:	200c      	movs	r0, #12
   98e40:	4b82      	ldr	r3, [pc, #520]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e42:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   98e44:	4b82      	ldr	r3, [pc, #520]	; (99050 <DD_SET_FLOW_PATH+0x52c>)
   98e46:	781b      	ldrb	r3, [r3, #0]
   98e48:	2b00      	cmp	r3, #0
   98e4a:	d010      	beq.n	98e6e <DD_SET_FLOW_PATH+0x34a>
   98e4c:	4b81      	ldr	r3, [pc, #516]	; (99054 <DD_SET_FLOW_PATH+0x530>)
   98e4e:	781b      	ldrb	r3, [r3, #0]
   98e50:	f083 0301 	eor.w	r3, r3, #1
   98e54:	b2db      	uxtb	r3, r3
   98e56:	2b00      	cmp	r3, #0
   98e58:	d009      	beq.n	98e6e <DD_SET_FLOW_PATH+0x34a>
		{
			DD_SET_VALVE (VALVE_ID15);
   98e5a:	200f      	movs	r0, #15
   98e5c:	4b7b      	ldr	r3, [pc, #492]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e5e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   98e60:	200d      	movs	r0, #13
   98e62:	4b78      	ldr	r3, [pc, #480]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e64:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   98e66:	200e      	movs	r0, #14
   98e68:	4b76      	ldr	r3, [pc, #472]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e6a:	4798      	blx	r3
   98e6c:	e016      	b.n	98e9c <DD_SET_FLOW_PATH+0x378>
		}
		else if (isouf)
   98e6e:	4b79      	ldr	r3, [pc, #484]	; (99054 <DD_SET_FLOW_PATH+0x530>)
   98e70:	781b      	ldrb	r3, [r3, #0]
   98e72:	2b00      	cmp	r3, #0
   98e74:	d009      	beq.n	98e8a <DD_SET_FLOW_PATH+0x366>
		{
			DD_SET_VALVE (VALVE_ID15);
   98e76:	200f      	movs	r0, #15
   98e78:	4b74      	ldr	r3, [pc, #464]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e7a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   98e7c:	200d      	movs	r0, #13
   98e7e:	4b71      	ldr	r3, [pc, #452]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e80:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   98e82:	200e      	movs	r0, #14
   98e84:	4b71      	ldr	r3, [pc, #452]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e86:	4798      	blx	r3
   98e88:	e008      	b.n	98e9c <DD_SET_FLOW_PATH+0x378>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   98e8a:	200f      	movs	r0, #15
   98e8c:	4b6d      	ldr	r3, [pc, #436]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98e8e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   98e90:	200d      	movs	r0, #13
   98e92:	4b6e      	ldr	r3, [pc, #440]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e94:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   98e96:	200e      	movs	r0, #14
   98e98:	4b6c      	ldr	r3, [pc, #432]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98e9a:	4798      	blx	r3
		}
		
		
		if( LoopBack)
   98e9c:	4b6e      	ldr	r3, [pc, #440]	; (99058 <DD_SET_FLOW_PATH+0x534>)
   98e9e:	781b      	ldrb	r3, [r3, #0]
   98ea0:	2b00      	cmp	r3, #0
   98ea2:	d006      	beq.n	98eb2 <DD_SET_FLOW_PATH+0x38e>
		{
			DD_SET_VALVE (VALVE_ID16);	
   98ea4:	2010      	movs	r0, #16
   98ea6:	4b69      	ldr	r3, [pc, #420]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ea8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   98eaa:	2012      	movs	r0, #18
   98eac:	4b65      	ldr	r3, [pc, #404]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98eae:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   98eb0:	e15f      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
			DD_SET_VALVE (VALVE_ID16);	
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   98eb2:	2010      	movs	r0, #16
   98eb4:	4b63      	ldr	r3, [pc, #396]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98eb6:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   98eb8:	2012      	movs	r0, #18
   98eba:	4b64      	ldr	r3, [pc, #400]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ebc:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   98ebe:	e158      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	DD_RESET_VALVE (VALVE_ID20);
   98ec0:	2014      	movs	r0, #20
   98ec2:	4b60      	ldr	r3, [pc, #384]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98ec4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98ec6:	2006      	movs	r0, #6
   98ec8:	4b5e      	ldr	r3, [pc, #376]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98eca:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98ecc:	2007      	movs	r0, #7
   98ece:	4b5d      	ldr	r3, [pc, #372]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98ed0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98ed2:	2009      	movs	r0, #9
   98ed4:	4b5b      	ldr	r3, [pc, #364]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98ed6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98ed8:	200c      	movs	r0, #12
   98eda:	4b5a      	ldr	r3, [pc, #360]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98edc:	4798      	blx	r3
		cl_wait(100);				
   98ede:	2064      	movs	r0, #100	; 0x64
   98ee0:	4b59      	ldr	r3, [pc, #356]	; (99048 <DD_SET_FLOW_PATH+0x524>)
   98ee2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   98ee4:	2005      	movs	r0, #5
   98ee6:	4b59      	ldr	r3, [pc, #356]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ee8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   98eea:	2008      	movs	r0, #8
   98eec:	4b57      	ldr	r3, [pc, #348]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98eee:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   98ef0:	200a      	movs	r0, #10
   98ef2:	4b56      	ldr	r3, [pc, #344]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ef4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   98ef6:	200b      	movs	r0, #11
   98ef8:	4b54      	ldr	r3, [pc, #336]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98efa:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   98efc:	4b54      	ldr	r3, [pc, #336]	; (99050 <DD_SET_FLOW_PATH+0x52c>)
   98efe:	781b      	ldrb	r3, [r3, #0]
   98f00:	2b00      	cmp	r3, #0
   98f02:	d010      	beq.n	98f26 <DD_SET_FLOW_PATH+0x402>
   98f04:	4b53      	ldr	r3, [pc, #332]	; (99054 <DD_SET_FLOW_PATH+0x530>)
   98f06:	781b      	ldrb	r3, [r3, #0]
   98f08:	f083 0301 	eor.w	r3, r3, #1
   98f0c:	b2db      	uxtb	r3, r3
   98f0e:	2b00      	cmp	r3, #0
   98f10:	d009      	beq.n	98f26 <DD_SET_FLOW_PATH+0x402>
		{
			DD_SET_VALVE (VALVE_ID15);
   98f12:	200f      	movs	r0, #15
   98f14:	4b4d      	ldr	r3, [pc, #308]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f16:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   98f18:	200d      	movs	r0, #13
   98f1a:	4b4a      	ldr	r3, [pc, #296]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f1c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   98f1e:	200e      	movs	r0, #14
   98f20:	4b48      	ldr	r3, [pc, #288]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f22:	4798      	blx	r3
   98f24:	e016      	b.n	98f54 <DD_SET_FLOW_PATH+0x430>
		}
		else if (isouf)
   98f26:	4b4b      	ldr	r3, [pc, #300]	; (99054 <DD_SET_FLOW_PATH+0x530>)
   98f28:	781b      	ldrb	r3, [r3, #0]
   98f2a:	2b00      	cmp	r3, #0
   98f2c:	d009      	beq.n	98f42 <DD_SET_FLOW_PATH+0x41e>
		{
			DD_SET_VALVE (VALVE_ID15);	
   98f2e:	200f      	movs	r0, #15
   98f30:	4b46      	ldr	r3, [pc, #280]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f32:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   98f34:	200d      	movs	r0, #13
   98f36:	4b43      	ldr	r3, [pc, #268]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f38:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   98f3a:	200e      	movs	r0, #14
   98f3c:	4b43      	ldr	r3, [pc, #268]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f3e:	4798      	blx	r3
   98f40:	e008      	b.n	98f54 <DD_SET_FLOW_PATH+0x430>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   98f42:	200f      	movs	r0, #15
   98f44:	4b3f      	ldr	r3, [pc, #252]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f46:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   98f48:	200d      	movs	r0, #13
   98f4a:	4b40      	ldr	r3, [pc, #256]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f4c:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   98f4e:	200e      	movs	r0, #14
   98f50:	4b3e      	ldr	r3, [pc, #248]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f52:	4798      	blx	r3
		}
		
		if( LoopBack)
   98f54:	4b40      	ldr	r3, [pc, #256]	; (99058 <DD_SET_FLOW_PATH+0x534>)
   98f56:	781b      	ldrb	r3, [r3, #0]
   98f58:	2b00      	cmp	r3, #0
   98f5a:	d006      	beq.n	98f6a <DD_SET_FLOW_PATH+0x446>
		{
			DD_SET_VALVE (VALVE_ID16);
   98f5c:	2010      	movs	r0, #16
   98f5e:	4b3b      	ldr	r3, [pc, #236]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f60:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   98f62:	2012      	movs	r0, #18
   98f64:	4b37      	ldr	r3, [pc, #220]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f66:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   98f68:	e103      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   98f6a:	2012      	movs	r0, #18
   98f6c:	4b37      	ldr	r3, [pc, #220]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f6e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   98f70:	2010      	movs	r0, #16
   98f72:	4b34      	ldr	r3, [pc, #208]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f74:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   98f76:	e0fc      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   98f78:	2004      	movs	r0, #4
   98f7a:	4b32      	ldr	r3, [pc, #200]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98f7c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   98f7e:	2005      	movs	r0, #5
   98f80:	4b32      	ldr	r3, [pc, #200]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f82:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   98f84:	2006      	movs	r0, #6
   98f86:	4b31      	ldr	r3, [pc, #196]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f88:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   98f8a:	2007      	movs	r0, #7
   98f8c:	4b2f      	ldr	r3, [pc, #188]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f8e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   98f90:	2008      	movs	r0, #8
   98f92:	4b2e      	ldr	r3, [pc, #184]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f94:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   98f96:	2009      	movs	r0, #9
   98f98:	4b2c      	ldr	r3, [pc, #176]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98f9a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   98f9c:	200a      	movs	r0, #10
   98f9e:	4b2b      	ldr	r3, [pc, #172]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fa0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   98fa2:	200b      	movs	r0, #11
   98fa4:	4b29      	ldr	r3, [pc, #164]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fa6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   98fa8:	200c      	movs	r0, #12
   98faa:	4b28      	ldr	r3, [pc, #160]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fac:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   98fae:	200d      	movs	r0, #13
   98fb0:	4b26      	ldr	r3, [pc, #152]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fb2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   98fb4:	200e      	movs	r0, #14
   98fb6:	4b25      	ldr	r3, [pc, #148]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fb8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   98fba:	200f      	movs	r0, #15
   98fbc:	4b23      	ldr	r3, [pc, #140]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fbe:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98fc0:	2010      	movs	r0, #16
   98fc2:	4b20      	ldr	r3, [pc, #128]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   98fc4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   98fc6:	2011      	movs	r0, #17
   98fc8:	4b20      	ldr	r3, [pc, #128]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fca:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98fcc:	2012      	movs	r0, #18
   98fce:	4b1f      	ldr	r3, [pc, #124]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fd0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   98fd2:	2013      	movs	r0, #19
   98fd4:	4b1d      	ldr	r3, [pc, #116]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fd6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID20);		
   98fd8:	2014      	movs	r0, #20
   98fda:	4b1c      	ldr	r3, [pc, #112]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fdc:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   98fde:	e0c8      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		case  BC_FLUSH_OPEN_DIS:
		
		//	DD_SET_VALVE(VALVE_ID1);
		//	DD_RESET_VALVE (VALVE_ID2);
		//	DD_RESET_VALVE (VALVE_ID3);
		DD_SET_VALVE (VALVE_ID4);
   98fe0:	2004      	movs	r0, #4
   98fe2:	4b1a      	ldr	r3, [pc, #104]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fe4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   98fe6:	2005      	movs	r0, #5
   98fe8:	4b18      	ldr	r3, [pc, #96]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98fea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   98fec:	2006      	movs	r0, #6
   98fee:	4b17      	ldr	r3, [pc, #92]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ff0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   98ff2:	2007      	movs	r0, #7
   98ff4:	4b15      	ldr	r3, [pc, #84]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ff6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   98ff8:	2008      	movs	r0, #8
   98ffa:	4b14      	ldr	r3, [pc, #80]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   98ffc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   98ffe:	2009      	movs	r0, #9
   99000:	4b12      	ldr	r3, [pc, #72]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99002:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   99004:	200a      	movs	r0, #10
   99006:	4b11      	ldr	r3, [pc, #68]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99008:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9900a:	200b      	movs	r0, #11
   9900c:	4b0f      	ldr	r3, [pc, #60]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   9900e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   99010:	200c      	movs	r0, #12
   99012:	4b0e      	ldr	r3, [pc, #56]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99014:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   99016:	200d      	movs	r0, #13
   99018:	4b0c      	ldr	r3, [pc, #48]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   9901a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   9901c:	200e      	movs	r0, #14
   9901e:	4b0b      	ldr	r3, [pc, #44]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99020:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   99022:	200f      	movs	r0, #15
   99024:	4b09      	ldr	r3, [pc, #36]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99026:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   99028:	2010      	movs	r0, #16
   9902a:	4b08      	ldr	r3, [pc, #32]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   9902c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   9902e:	2011      	movs	r0, #17
   99030:	4b06      	ldr	r3, [pc, #24]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   99032:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   99034:	2012      	movs	r0, #18
   99036:	4b03      	ldr	r3, [pc, #12]	; (99044 <DD_SET_FLOW_PATH+0x520>)
   99038:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9903a:	2013      	movs	r0, #19
   9903c:	4b03      	ldr	r3, [pc, #12]	; (9904c <DD_SET_FLOW_PATH+0x528>)
   9903e:	4798      	blx	r3
		//	DD_SET_PUMP(DCMOTOR1);
		//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   99040:	e097      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
   99042:	bf00      	nop
   99044:	000983b1 	.word	0x000983b1
   99048:	00093009 	.word	0x00093009
   9904c:	000982f1 	.word	0x000982f1
   99050:	20071b38 	.word	0x20071b38
   99054:	20071aec 	.word	0x20071aec
   99058:	20071b39 	.word	0x20071b39
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   9905c:	2005      	movs	r0, #5
   9905e:	4b47      	ldr	r3, [pc, #284]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99060:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   99062:	2008      	movs	r0, #8
   99064:	4b45      	ldr	r3, [pc, #276]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99066:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   99068:	200a      	movs	r0, #10
   9906a:	4b44      	ldr	r3, [pc, #272]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   9906c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9906e:	200b      	movs	r0, #11
   99070:	4b42      	ldr	r3, [pc, #264]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99072:	4798      	blx	r3
		cl_wait(100);		
   99074:	2064      	movs	r0, #100	; 0x64
   99076:	4b42      	ldr	r3, [pc, #264]	; (99180 <DD_SET_FLOW_PATH+0x65c>)
   99078:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9907a:	2006      	movs	r0, #6
   9907c:	4b41      	ldr	r3, [pc, #260]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9907e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   99080:	2007      	movs	r0, #7
   99082:	4b40      	ldr	r3, [pc, #256]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   99084:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   99086:	2009      	movs	r0, #9
   99088:	4b3e      	ldr	r3, [pc, #248]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9908a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9908c:	200c      	movs	r0, #12
   9908e:	4b3d      	ldr	r3, [pc, #244]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   99090:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   99092:	2010      	movs	r0, #16
   99094:	4b3b      	ldr	r3, [pc, #236]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   99096:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   99098:	200f      	movs	r0, #15
   9909a:	4b38      	ldr	r3, [pc, #224]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   9909c:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   9909e:	2012      	movs	r0, #18
   990a0:	4b36      	ldr	r3, [pc, #216]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990a2:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   990a4:	e065      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   990a6:	2006      	movs	r0, #6
   990a8:	4b34      	ldr	r3, [pc, #208]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990aa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   990ac:	2007      	movs	r0, #7
   990ae:	4b33      	ldr	r3, [pc, #204]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990b0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   990b2:	2009      	movs	r0, #9
   990b4:	4b31      	ldr	r3, [pc, #196]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990b6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   990b8:	200c      	movs	r0, #12
   990ba:	4b30      	ldr	r3, [pc, #192]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990bc:	4798      	blx	r3
		cl_wait(100);				
   990be:	2064      	movs	r0, #100	; 0x64
   990c0:	4b2f      	ldr	r3, [pc, #188]	; (99180 <DD_SET_FLOW_PATH+0x65c>)
   990c2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   990c4:	2005      	movs	r0, #5
   990c6:	4b2f      	ldr	r3, [pc, #188]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   990c8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   990ca:	2008      	movs	r0, #8
   990cc:	4b2d      	ldr	r3, [pc, #180]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   990ce:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   990d0:	200a      	movs	r0, #10
   990d2:	4b2c      	ldr	r3, [pc, #176]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   990d4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   990d6:	200b      	movs	r0, #11
   990d8:	4b2a      	ldr	r3, [pc, #168]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   990da:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   990dc:	200f      	movs	r0, #15
   990de:	4b27      	ldr	r3, [pc, #156]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990e0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   990e2:	2010      	movs	r0, #16
   990e4:	4b27      	ldr	r3, [pc, #156]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   990e6:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   990e8:	2012      	movs	r0, #18
   990ea:	4b24      	ldr	r3, [pc, #144]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990ec:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   990ee:	e040      	b.n	99172 <DD_SET_FLOW_PATH+0x64e>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   990f0:	2005      	movs	r0, #5
   990f2:	4b22      	ldr	r3, [pc, #136]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990f4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   990f6:	2006      	movs	r0, #6
   990f8:	4b20      	ldr	r3, [pc, #128]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   990fa:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   990fc:	2007      	movs	r0, #7
   990fe:	4b1f      	ldr	r3, [pc, #124]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99100:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   99102:	2008      	movs	r0, #8
   99104:	4b1d      	ldr	r3, [pc, #116]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99106:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   99108:	2009      	movs	r0, #9
   9910a:	4b1c      	ldr	r3, [pc, #112]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   9910c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   9910e:	200a      	movs	r0, #10
   99110:	4b1a      	ldr	r3, [pc, #104]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99112:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   99114:	200b      	movs	r0, #11
   99116:	4b19      	ldr	r3, [pc, #100]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99118:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   9911a:	200c      	movs	r0, #12
   9911c:	4b17      	ldr	r3, [pc, #92]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   9911e:	4798      	blx	r3

		if( ByPass)
   99120:	4b19      	ldr	r3, [pc, #100]	; (99188 <DD_SET_FLOW_PATH+0x664>)
   99122:	781b      	ldrb	r3, [r3, #0]
   99124:	2b00      	cmp	r3, #0
   99126:	d009      	beq.n	9913c <DD_SET_FLOW_PATH+0x618>
		{
			DD_SET_VALVE (VALVE_ID15);
   99128:	200f      	movs	r0, #15
   9912a:	4b16      	ldr	r3, [pc, #88]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9912c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9912e:	200d      	movs	r0, #13
   99130:	4b12      	ldr	r3, [pc, #72]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99132:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   99134:	200e      	movs	r0, #14
   99136:	4b11      	ldr	r3, [pc, #68]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99138:	4798      	blx	r3
   9913a:	e008      	b.n	9914e <DD_SET_FLOW_PATH+0x62a>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   9913c:	200f      	movs	r0, #15
   9913e:	4b0f      	ldr	r3, [pc, #60]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99140:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   99142:	200d      	movs	r0, #13
   99144:	4b0f      	ldr	r3, [pc, #60]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   99146:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   99148:	200e      	movs	r0, #14
   9914a:	4b0e      	ldr	r3, [pc, #56]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9914c:	4798      	blx	r3
		}
		if( LoopBack)
   9914e:	4b0f      	ldr	r3, [pc, #60]	; (9918c <DD_SET_FLOW_PATH+0x668>)
   99150:	781b      	ldrb	r3, [r3, #0]
   99152:	2b00      	cmp	r3, #0
   99154:	d006      	beq.n	99164 <DD_SET_FLOW_PATH+0x640>
		{
			DD_SET_VALVE (VALVE_ID16);
   99156:	2010      	movs	r0, #16
   99158:	4b0a      	ldr	r3, [pc, #40]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9915a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   9915c:	2012      	movs	r0, #18
   9915e:	4b07      	ldr	r3, [pc, #28]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99160:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   99162:	e005      	b.n	99170 <DD_SET_FLOW_PATH+0x64c>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   99164:	2010      	movs	r0, #16
   99166:	4b05      	ldr	r3, [pc, #20]	; (9917c <DD_SET_FLOW_PATH+0x658>)
   99168:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   9916a:	2012      	movs	r0, #18
   9916c:	4b05      	ldr	r3, [pc, #20]	; (99184 <DD_SET_FLOW_PATH+0x660>)
   9916e:	4798      	blx	r3
		}
		break;
   99170:	bf00      	nop
	}
	
	return 0;
   99172:	2300      	movs	r3, #0
	
}
   99174:	4618      	mov	r0, r3
   99176:	3708      	adds	r7, #8
   99178:	46bd      	mov	sp, r7
   9917a:	bd80      	pop	{r7, pc}
   9917c:	000983b1 	.word	0x000983b1
   99180:	00093009 	.word	0x00093009
   99184:	000982f1 	.word	0x000982f1
   99188:	20071b38 	.word	0x20071b38
   9918c:	20071b39 	.word	0x20071b39

00099190 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   99190:	b580      	push	{r7, lr}
   99192:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   99194:	210d      	movs	r1, #13
   99196:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   9919a:	4b0c      	ldr	r3, [pc, #48]	; (991cc <DD_LATCH_STROBE_X1_X16+0x3c>)
   9919c:	4798      	blx	r3
	cl_wait(2);
   9919e:	2002      	movs	r0, #2
   991a0:	4b0b      	ldr	r3, [pc, #44]	; (991d0 <DD_LATCH_STROBE_X1_X16+0x40>)
   991a2:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   991a4:	210d      	movs	r1, #13
   991a6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   991aa:	4b0a      	ldr	r3, [pc, #40]	; (991d4 <DD_LATCH_STROBE_X1_X16+0x44>)
   991ac:	4798      	blx	r3
	cl_wait(2);
   991ae:	2002      	movs	r0, #2
   991b0:	4b07      	ldr	r3, [pc, #28]	; (991d0 <DD_LATCH_STROBE_X1_X16+0x40>)
   991b2:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   991b4:	210d      	movs	r1, #13
   991b6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   991ba:	4b04      	ldr	r3, [pc, #16]	; (991cc <DD_LATCH_STROBE_X1_X16+0x3c>)
   991bc:	4798      	blx	r3
	cl_wait(2);
   991be:	2002      	movs	r0, #2
   991c0:	4b03      	ldr	r3, [pc, #12]	; (991d0 <DD_LATCH_STROBE_X1_X16+0x40>)
   991c2:	4798      	blx	r3
	
	return 0;
   991c4:	2300      	movs	r3, #0
}
   991c6:	4618      	mov	r0, r3
   991c8:	bd80      	pop	{r7, pc}
   991ca:	bf00      	nop
   991cc:	00096e9d 	.word	0x00096e9d
   991d0:	00093009 	.word	0x00093009
   991d4:	00096e19 	.word	0x00096e19

000991d8 <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   991d8:	b580      	push	{r7, lr}
   991da:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   991dc:	210b      	movs	r1, #11
   991de:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   991e2:	4b0c      	ldr	r3, [pc, #48]	; (99214 <DD_LATCH_STROBE_X17_X20+0x3c>)
   991e4:	4798      	blx	r3
	cl_wait(2);
   991e6:	2002      	movs	r0, #2
   991e8:	4b0b      	ldr	r3, [pc, #44]	; (99218 <DD_LATCH_STROBE_X17_X20+0x40>)
   991ea:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   991ec:	210b      	movs	r1, #11
   991ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   991f2:	4b0a      	ldr	r3, [pc, #40]	; (9921c <DD_LATCH_STROBE_X17_X20+0x44>)
   991f4:	4798      	blx	r3
	cl_wait(2);
   991f6:	2002      	movs	r0, #2
   991f8:	4b07      	ldr	r3, [pc, #28]	; (99218 <DD_LATCH_STROBE_X17_X20+0x40>)
   991fa:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   991fc:	210b      	movs	r1, #11
   991fe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   99202:	4b04      	ldr	r3, [pc, #16]	; (99214 <DD_LATCH_STROBE_X17_X20+0x3c>)
   99204:	4798      	blx	r3
	cl_wait(2);
   99206:	2002      	movs	r0, #2
   99208:	4b03      	ldr	r3, [pc, #12]	; (99218 <DD_LATCH_STROBE_X17_X20+0x40>)
   9920a:	4798      	blx	r3
	
	return 0;
   9920c:	2300      	movs	r3, #0
}
   9920e:	4618      	mov	r0, r3
   99210:	bd80      	pop	{r7, pc}
   99212:	bf00      	nop
   99214:	00096e9d 	.word	0x00096e9d
   99218:	00093009 	.word	0x00093009
   9921c:	00096e19 	.word	0x00096e19

00099220 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   99220:	b480      	push	{r7}
   99222:	b083      	sub	sp, #12
   99224:	af00      	add	r7, sp, #0
   99226:	4603      	mov	r3, r0
   99228:	6039      	str	r1, [r7, #0]
   9922a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   9922c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   99230:	2b00      	cmp	r3, #0
   99232:	da0b      	bge.n	9924c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   99234:	490d      	ldr	r1, [pc, #52]	; (9926c <NVIC_SetPriority+0x4c>)
   99236:	79fb      	ldrb	r3, [r7, #7]
   99238:	f003 030f 	and.w	r3, r3, #15
   9923c:	3b04      	subs	r3, #4
   9923e:	683a      	ldr	r2, [r7, #0]
   99240:	b2d2      	uxtb	r2, r2
   99242:	0112      	lsls	r2, r2, #4
   99244:	b2d2      	uxtb	r2, r2
   99246:	440b      	add	r3, r1
   99248:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   9924a:	e009      	b.n	99260 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   9924c:	4908      	ldr	r1, [pc, #32]	; (99270 <NVIC_SetPriority+0x50>)
   9924e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   99252:	683a      	ldr	r2, [r7, #0]
   99254:	b2d2      	uxtb	r2, r2
   99256:	0112      	lsls	r2, r2, #4
   99258:	b2d2      	uxtb	r2, r2
   9925a:	440b      	add	r3, r1
   9925c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   99260:	bf00      	nop
   99262:	370c      	adds	r7, #12
   99264:	46bd      	mov	sp, r7
   99266:	bc80      	pop	{r7}
   99268:	4770      	bx	lr
   9926a:	bf00      	nop
   9926c:	e000ed00 	.word	0xe000ed00
   99270:	e000e100 	.word	0xe000e100

00099274 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   99274:	b580      	push	{r7, lr}
   99276:	b082      	sub	sp, #8
   99278:	af00      	add	r7, sp, #0
   9927a:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   9927c:	687b      	ldr	r3, [r7, #4]
   9927e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   99282:	d301      	bcc.n	99288 <SysTick_Config+0x14>
   99284:	2301      	movs	r3, #1
   99286:	e011      	b.n	992ac <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   99288:	4a0a      	ldr	r2, [pc, #40]	; (992b4 <SysTick_Config+0x40>)
   9928a:	687b      	ldr	r3, [r7, #4]
   9928c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   99290:	3b01      	subs	r3, #1
   99292:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   99294:	210f      	movs	r1, #15
   99296:	f04f 30ff 	mov.w	r0, #4294967295
   9929a:	4b07      	ldr	r3, [pc, #28]	; (992b8 <SysTick_Config+0x44>)
   9929c:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   9929e:	4b05      	ldr	r3, [pc, #20]	; (992b4 <SysTick_Config+0x40>)
   992a0:	2200      	movs	r2, #0
   992a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   992a4:	4b03      	ldr	r3, [pc, #12]	; (992b4 <SysTick_Config+0x40>)
   992a6:	2207      	movs	r2, #7
   992a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   992aa:	2300      	movs	r3, #0
}
   992ac:	4618      	mov	r0, r3
   992ae:	3708      	adds	r7, #8
   992b0:	46bd      	mov	sp, r7
   992b2:	bd80      	pop	{r7, pc}
   992b4:	e000e010 	.word	0xe000e010
   992b8:	00099221 	.word	0x00099221

000992bc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   992bc:	b480      	push	{r7}
   992be:	b083      	sub	sp, #12
   992c0:	af00      	add	r7, sp, #0
   992c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   992c4:	687b      	ldr	r3, [r7, #4]
   992c6:	2b07      	cmp	r3, #7
   992c8:	d825      	bhi.n	99316 <osc_get_rate+0x5a>
   992ca:	a201      	add	r2, pc, #4	; (adr r2, 992d0 <osc_get_rate+0x14>)
   992cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   992d0:	000992f1 	.word	0x000992f1
   992d4:	000992f7 	.word	0x000992f7
   992d8:	000992fd 	.word	0x000992fd
   992dc:	00099303 	.word	0x00099303
   992e0:	00099307 	.word	0x00099307
   992e4:	0009930b 	.word	0x0009930b
   992e8:	0009930f 	.word	0x0009930f
   992ec:	00099313 	.word	0x00099313
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   992f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   992f4:	e010      	b.n	99318 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   992f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   992fa:	e00d      	b.n	99318 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   992fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   99300:	e00a      	b.n	99318 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   99302:	4b08      	ldr	r3, [pc, #32]	; (99324 <osc_get_rate+0x68>)
   99304:	e008      	b.n	99318 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   99306:	4b08      	ldr	r3, [pc, #32]	; (99328 <osc_get_rate+0x6c>)
   99308:	e006      	b.n	99318 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   9930a:	4b08      	ldr	r3, [pc, #32]	; (9932c <osc_get_rate+0x70>)
   9930c:	e004      	b.n	99318 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   9930e:	4b07      	ldr	r3, [pc, #28]	; (9932c <osc_get_rate+0x70>)
   99310:	e002      	b.n	99318 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   99312:	4b06      	ldr	r3, [pc, #24]	; (9932c <osc_get_rate+0x70>)
   99314:	e000      	b.n	99318 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   99316:	2300      	movs	r3, #0
}
   99318:	4618      	mov	r0, r3
   9931a:	370c      	adds	r7, #12
   9931c:	46bd      	mov	sp, r7
   9931e:	bc80      	pop	{r7}
   99320:	4770      	bx	lr
   99322:	bf00      	nop
   99324:	003d0900 	.word	0x003d0900
   99328:	007a1200 	.word	0x007a1200
   9932c:	00b71b00 	.word	0x00b71b00

00099330 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   99330:	b580      	push	{r7, lr}
   99332:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   99334:	2006      	movs	r0, #6
   99336:	4b04      	ldr	r3, [pc, #16]	; (99348 <sysclk_get_main_hz+0x18>)
   99338:	4798      	blx	r3
   9933a:	4602      	mov	r2, r0
   9933c:	4613      	mov	r3, r2
   9933e:	00db      	lsls	r3, r3, #3
   99340:	1a9b      	subs	r3, r3, r2
   99342:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   99344:	4618      	mov	r0, r3
   99346:	bd80      	pop	{r7, pc}
   99348:	000992bd 	.word	0x000992bd

0009934c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   9934c:	b580      	push	{r7, lr}
   9934e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   99350:	4b02      	ldr	r3, [pc, #8]	; (9935c <sysclk_get_cpu_hz+0x10>)
   99352:	4798      	blx	r3
   99354:	4603      	mov	r3, r0
   99356:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   99358:	4618      	mov	r0, r3
   9935a:	bd80      	pop	{r7, pc}
   9935c:	00099331 	.word	0x00099331

00099360 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   99360:	b580      	push	{r7, lr}
   99362:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   99364:	4b15      	ldr	r3, [pc, #84]	; (993bc <DD_INIT_TIMER+0x5c>)
   99366:	4a16      	ldr	r2, [pc, #88]	; (993c0 <DD_INIT_TIMER+0x60>)
   99368:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   9936c:	4b15      	ldr	r3, [pc, #84]	; (993c4 <DD_INIT_TIMER+0x64>)
   9936e:	4a14      	ldr	r2, [pc, #80]	; (993c0 <DD_INIT_TIMER+0x60>)
   99370:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   99374:	4b14      	ldr	r3, [pc, #80]	; (993c8 <DD_INIT_TIMER+0x68>)
   99376:	4a12      	ldr	r2, [pc, #72]	; (993c0 <DD_INIT_TIMER+0x60>)
   99378:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   9937c:	201b      	movs	r0, #27
   9937e:	4b13      	ldr	r3, [pc, #76]	; (993cc <DD_INIT_TIMER+0x6c>)
   99380:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   99382:	201c      	movs	r0, #28
   99384:	4b11      	ldr	r3, [pc, #68]	; (993cc <DD_INIT_TIMER+0x6c>)
   99386:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   99388:	201d      	movs	r0, #29
   9938a:	4b10      	ldr	r3, [pc, #64]	; (993cc <DD_INIT_TIMER+0x6c>)
   9938c:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9938e:	4b0b      	ldr	r3, [pc, #44]	; (993bc <DD_INIT_TIMER+0x5c>)
   99390:	f24c 0203 	movw	r2, #49155	; 0xc003
   99394:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   99396:	4b0b      	ldr	r3, [pc, #44]	; (993c4 <DD_INIT_TIMER+0x64>)
   99398:	f24c 0203 	movw	r2, #49155	; 0xc003
   9939c:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   9939e:	4b0a      	ldr	r3, [pc, #40]	; (993c8 <DD_INIT_TIMER+0x68>)
   993a0:	f24c 0203 	movw	r2, #49155	; 0xc003
   993a4:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   993a6:	4b05      	ldr	r3, [pc, #20]	; (993bc <DD_INIT_TIMER+0x5c>)
   993a8:	2210      	movs	r2, #16
   993aa:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   993ac:	4b05      	ldr	r3, [pc, #20]	; (993c4 <DD_INIT_TIMER+0x64>)
   993ae:	2210      	movs	r2, #16
   993b0:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   993b2:	4b05      	ldr	r3, [pc, #20]	; (993c8 <DD_INIT_TIMER+0x68>)
   993b4:	2210      	movs	r2, #16
   993b6:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   993b8:	bf00      	nop
   993ba:	bd80      	pop	{r7, pc}
   993bc:	40080000 	.word	0x40080000
   993c0:	54494d00 	.word	0x54494d00
   993c4:	40084000 	.word	0x40084000
   993c8:	40088000 	.word	0x40088000
   993cc:	0009abcd 	.word	0x0009abcd

000993d0 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   993d0:	b580      	push	{r7, lr}
   993d2:	b084      	sub	sp, #16
   993d4:	af00      	add	r7, sp, #0
   993d6:	60f8      	str	r0, [r7, #12]
   993d8:	60b9      	str	r1, [r7, #8]
   993da:	603b      	str	r3, [r7, #0]
   993dc:	4613      	mov	r3, r2
   993de:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   993e0:	2000      	movs	r0, #0
   993e2:	4b16      	ldr	r3, [pc, #88]	; (9943c <DD_SET_TIMER+0x6c>)
   993e4:	4798      	blx	r3
	channel=0;
   993e6:	2300      	movs	r3, #0
   993e8:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   993ea:	4b15      	ldr	r3, [pc, #84]	; (99440 <DD_SET_TIMER+0x70>)
   993ec:	f24c 0203 	movw	r2, #49155	; 0xc003
   993f0:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   993f2:	683a      	ldr	r2, [r7, #0]
   993f4:	68b9      	ldr	r1, [r7, #8]
   993f6:	68f8      	ldr	r0, [r7, #12]
   993f8:	4b12      	ldr	r3, [pc, #72]	; (99444 <DD_SET_TIMER+0x74>)
   993fa:	4798      	blx	r3
	tc_start(tc, channel);
   993fc:	68b9      	ldr	r1, [r7, #8]
   993fe:	68f8      	ldr	r0, [r7, #12]
   99400:	4b11      	ldr	r3, [pc, #68]	; (99448 <DD_SET_TIMER+0x78>)
   99402:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   99404:	2210      	movs	r2, #16
   99406:	68b9      	ldr	r1, [r7, #8]
   99408:	68f8      	ldr	r0, [r7, #12]
   9940a:	4b10      	ldr	r3, [pc, #64]	; (9944c <DD_SET_TIMER+0x7c>)
   9940c:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   9940e:	4b10      	ldr	r3, [pc, #64]	; (99450 <DD_SET_TIMER+0x80>)
   99410:	4798      	blx	r3
   99412:	4602      	mov	r2, r0
   99414:	4b0f      	ldr	r3, [pc, #60]	; (99454 <DD_SET_TIMER+0x84>)
   99416:	fba3 2302 	umull	r2, r3, r3, r2
   9941a:	099b      	lsrs	r3, r3, #6
   9941c:	4618      	mov	r0, r3
   9941e:	4b0e      	ldr	r3, [pc, #56]	; (99458 <DD_SET_TIMER+0x88>)
   99420:	4798      	blx	r3
   99422:	4603      	mov	r3, r0
   99424:	2b00      	cmp	r3, #0
   99426:	d003      	beq.n	99430 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   99428:	480c      	ldr	r0, [pc, #48]	; (9945c <DD_SET_TIMER+0x8c>)
   9942a:	4b0d      	ldr	r3, [pc, #52]	; (99460 <DD_SET_TIMER+0x90>)
   9942c:	4798      	blx	r3
		while (1);
   9942e:	e7fe      	b.n	9942e <DD_SET_TIMER+0x5e>
	}
	
}
   99430:	bf00      	nop
   99432:	4618      	mov	r0, r3
   99434:	3710      	adds	r7, #16
   99436:	46bd      	mov	sp, r7
   99438:	bd80      	pop	{r7, pc}
   9943a:	bf00      	nop
   9943c:	0009ac4d 	.word	0x0009ac4d
   99440:	40088000 	.word	0x40088000
   99444:	0009aca5 	.word	0x0009aca5
   99448:	0009ac85 	.word	0x0009ac85
   9944c:	0009acc9 	.word	0x0009acc9
   99450:	0009934d 	.word	0x0009934d
   99454:	10624dd3 	.word	0x10624dd3
   99458:	00099275 	.word	0x00099275
   9945c:	000a89b0 	.word	0x000a89b0
   99460:	000a6be9 	.word	0x000a6be9

00099464 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   99464:	b480      	push	{r7}
   99466:	b083      	sub	sp, #12
   99468:	af00      	add	r7, sp, #0
   9946a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9946c:	687b      	ldr	r3, [r7, #4]
   9946e:	2b07      	cmp	r3, #7
   99470:	d825      	bhi.n	994be <osc_get_rate+0x5a>
   99472:	a201      	add	r2, pc, #4	; (adr r2, 99478 <osc_get_rate+0x14>)
   99474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99478:	00099499 	.word	0x00099499
   9947c:	0009949f 	.word	0x0009949f
   99480:	000994a5 	.word	0x000994a5
   99484:	000994ab 	.word	0x000994ab
   99488:	000994af 	.word	0x000994af
   9948c:	000994b3 	.word	0x000994b3
   99490:	000994b7 	.word	0x000994b7
   99494:	000994bb 	.word	0x000994bb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   99498:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9949c:	e010      	b.n	994c0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9949e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   994a2:	e00d      	b.n	994c0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   994a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   994a8:	e00a      	b.n	994c0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   994aa:	4b08      	ldr	r3, [pc, #32]	; (994cc <osc_get_rate+0x68>)
   994ac:	e008      	b.n	994c0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   994ae:	4b08      	ldr	r3, [pc, #32]	; (994d0 <osc_get_rate+0x6c>)
   994b0:	e006      	b.n	994c0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   994b2:	4b08      	ldr	r3, [pc, #32]	; (994d4 <osc_get_rate+0x70>)
   994b4:	e004      	b.n	994c0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   994b6:	4b07      	ldr	r3, [pc, #28]	; (994d4 <osc_get_rate+0x70>)
   994b8:	e002      	b.n	994c0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   994ba:	4b06      	ldr	r3, [pc, #24]	; (994d4 <osc_get_rate+0x70>)
   994bc:	e000      	b.n	994c0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   994be:	2300      	movs	r3, #0
}
   994c0:	4618      	mov	r0, r3
   994c2:	370c      	adds	r7, #12
   994c4:	46bd      	mov	sp, r7
   994c6:	bc80      	pop	{r7}
   994c8:	4770      	bx	lr
   994ca:	bf00      	nop
   994cc:	003d0900 	.word	0x003d0900
   994d0:	007a1200 	.word	0x007a1200
   994d4:	00b71b00 	.word	0x00b71b00

000994d8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   994d8:	b580      	push	{r7, lr}
   994da:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   994dc:	2006      	movs	r0, #6
   994de:	4b04      	ldr	r3, [pc, #16]	; (994f0 <sysclk_get_main_hz+0x18>)
   994e0:	4798      	blx	r3
   994e2:	4602      	mov	r2, r0
   994e4:	4613      	mov	r3, r2
   994e6:	00db      	lsls	r3, r3, #3
   994e8:	1a9b      	subs	r3, r3, r2
   994ea:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   994ec:	4618      	mov	r0, r3
   994ee:	bd80      	pop	{r7, pc}
   994f0:	00099465 	.word	0x00099465

000994f4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   994f4:	b580      	push	{r7, lr}
   994f6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   994f8:	4b02      	ldr	r3, [pc, #8]	; (99504 <sysclk_get_peripheral_hz+0x10>)
   994fa:	4798      	blx	r3
   994fc:	4603      	mov	r3, r0
   994fe:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   99500:	4618      	mov	r0, r3
   99502:	bd80      	pop	{r7, pc}
   99504:	000994d9 	.word	0x000994d9

00099508 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   99508:	b580      	push	{r7, lr}
   9950a:	b082      	sub	sp, #8
   9950c:	af00      	add	r7, sp, #0
   9950e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   99510:	6878      	ldr	r0, [r7, #4]
   99512:	4b03      	ldr	r3, [pc, #12]	; (99520 <sysclk_enable_peripheral_clock+0x18>)
   99514:	4798      	blx	r3
}
   99516:	bf00      	nop
   99518:	3708      	adds	r7, #8
   9951a:	46bd      	mov	sp, r7
   9951c:	bd80      	pop	{r7, pc}
   9951e:	bf00      	nop
   99520:	0009abcd 	.word	0x0009abcd

00099524 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   99524:	b580      	push	{r7, lr}
   99526:	b08c      	sub	sp, #48	; 0x30
   99528:	af00      	add	r7, sp, #0
   9952a:	6078      	str	r0, [r7, #4]
   9952c:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   9952e:	4b40      	ldr	r3, [pc, #256]	; (99630 <usart_serial_init+0x10c>)
   99530:	4798      	blx	r3
   99532:	4603      	mov	r3, r0
   99534:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   99536:	683b      	ldr	r3, [r7, #0]
   99538:	681b      	ldr	r3, [r3, #0]
   9953a:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   9953c:	683b      	ldr	r3, [r7, #0]
   9953e:	689b      	ldr	r3, [r3, #8]
   99540:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   99542:	683b      	ldr	r3, [r7, #0]
   99544:	681b      	ldr	r3, [r3, #0]
   99546:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   99548:	683b      	ldr	r3, [r7, #0]
   9954a:	685b      	ldr	r3, [r3, #4]
   9954c:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   9954e:	683b      	ldr	r3, [r7, #0]
   99550:	689b      	ldr	r3, [r3, #8]
   99552:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   99554:	683b      	ldr	r3, [r7, #0]
   99556:	7b1b      	ldrb	r3, [r3, #12]
   99558:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9955a:	2300      	movs	r3, #0
   9955c:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9955e:	687b      	ldr	r3, [r7, #4]
   99560:	4a34      	ldr	r2, [pc, #208]	; (99634 <usart_serial_init+0x110>)
   99562:	4293      	cmp	r3, r2
   99564:	d108      	bne.n	99578 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   99566:	2008      	movs	r0, #8
   99568:	4b33      	ldr	r3, [pc, #204]	; (99638 <usart_serial_init+0x114>)
   9956a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   9956c:	f107 0320 	add.w	r3, r7, #32
   99570:	4619      	mov	r1, r3
   99572:	6878      	ldr	r0, [r7, #4]
   99574:	4b31      	ldr	r3, [pc, #196]	; (9963c <usart_serial_init+0x118>)
   99576:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   99578:	687b      	ldr	r3, [r7, #4]
   9957a:	4a31      	ldr	r2, [pc, #196]	; (99640 <usart_serial_init+0x11c>)
   9957c:	4293      	cmp	r3, r2
   9957e:	d111      	bne.n	995a4 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   99580:	2011      	movs	r0, #17
   99582:	4b2d      	ldr	r3, [pc, #180]	; (99638 <usart_serial_init+0x114>)
   99584:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   99586:	4b2a      	ldr	r3, [pc, #168]	; (99630 <usart_serial_init+0x10c>)
   99588:	4798      	blx	r3
   9958a:	4602      	mov	r2, r0
   9958c:	f107 0308 	add.w	r3, r7, #8
   99590:	4619      	mov	r1, r3
   99592:	6878      	ldr	r0, [r7, #4]
   99594:	4b2b      	ldr	r3, [pc, #172]	; (99644 <usart_serial_init+0x120>)
   99596:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   99598:	6878      	ldr	r0, [r7, #4]
   9959a:	4b2b      	ldr	r3, [pc, #172]	; (99648 <usart_serial_init+0x124>)
   9959c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   9959e:	6878      	ldr	r0, [r7, #4]
   995a0:	4b2a      	ldr	r3, [pc, #168]	; (9964c <usart_serial_init+0x128>)
   995a2:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   995a4:	687b      	ldr	r3, [r7, #4]
   995a6:	4a2a      	ldr	r2, [pc, #168]	; (99650 <usart_serial_init+0x12c>)
   995a8:	4293      	cmp	r3, r2
   995aa:	d111      	bne.n	995d0 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   995ac:	2012      	movs	r0, #18
   995ae:	4b22      	ldr	r3, [pc, #136]	; (99638 <usart_serial_init+0x114>)
   995b0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   995b2:	4b1f      	ldr	r3, [pc, #124]	; (99630 <usart_serial_init+0x10c>)
   995b4:	4798      	blx	r3
   995b6:	4602      	mov	r2, r0
   995b8:	f107 0308 	add.w	r3, r7, #8
   995bc:	4619      	mov	r1, r3
   995be:	6878      	ldr	r0, [r7, #4]
   995c0:	4b20      	ldr	r3, [pc, #128]	; (99644 <usart_serial_init+0x120>)
   995c2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   995c4:	6878      	ldr	r0, [r7, #4]
   995c6:	4b20      	ldr	r3, [pc, #128]	; (99648 <usart_serial_init+0x124>)
   995c8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   995ca:	6878      	ldr	r0, [r7, #4]
   995cc:	4b1f      	ldr	r3, [pc, #124]	; (9964c <usart_serial_init+0x128>)
   995ce:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   995d0:	687b      	ldr	r3, [r7, #4]
   995d2:	4a20      	ldr	r2, [pc, #128]	; (99654 <usart_serial_init+0x130>)
   995d4:	4293      	cmp	r3, r2
   995d6:	d111      	bne.n	995fc <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   995d8:	2013      	movs	r0, #19
   995da:	4b17      	ldr	r3, [pc, #92]	; (99638 <usart_serial_init+0x114>)
   995dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   995de:	4b14      	ldr	r3, [pc, #80]	; (99630 <usart_serial_init+0x10c>)
   995e0:	4798      	blx	r3
   995e2:	4602      	mov	r2, r0
   995e4:	f107 0308 	add.w	r3, r7, #8
   995e8:	4619      	mov	r1, r3
   995ea:	6878      	ldr	r0, [r7, #4]
   995ec:	4b15      	ldr	r3, [pc, #84]	; (99644 <usart_serial_init+0x120>)
   995ee:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   995f0:	6878      	ldr	r0, [r7, #4]
   995f2:	4b15      	ldr	r3, [pc, #84]	; (99648 <usart_serial_init+0x124>)
   995f4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   995f6:	6878      	ldr	r0, [r7, #4]
   995f8:	4b14      	ldr	r3, [pc, #80]	; (9964c <usart_serial_init+0x128>)
   995fa:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   995fc:	687b      	ldr	r3, [r7, #4]
   995fe:	4a16      	ldr	r2, [pc, #88]	; (99658 <usart_serial_init+0x134>)
   99600:	4293      	cmp	r3, r2
   99602:	d111      	bne.n	99628 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   99604:	2014      	movs	r0, #20
   99606:	4b0c      	ldr	r3, [pc, #48]	; (99638 <usart_serial_init+0x114>)
   99608:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9960a:	4b09      	ldr	r3, [pc, #36]	; (99630 <usart_serial_init+0x10c>)
   9960c:	4798      	blx	r3
   9960e:	4602      	mov	r2, r0
   99610:	f107 0308 	add.w	r3, r7, #8
   99614:	4619      	mov	r1, r3
   99616:	6878      	ldr	r0, [r7, #4]
   99618:	4b0a      	ldr	r3, [pc, #40]	; (99644 <usart_serial_init+0x120>)
   9961a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9961c:	6878      	ldr	r0, [r7, #4]
   9961e:	4b0a      	ldr	r3, [pc, #40]	; (99648 <usart_serial_init+0x124>)
   99620:	4798      	blx	r3
		usart_enable_rx(p_usart);
   99622:	6878      	ldr	r0, [r7, #4]
   99624:	4b09      	ldr	r3, [pc, #36]	; (9964c <usart_serial_init+0x128>)
   99626:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   99628:	bf00      	nop
   9962a:	3730      	adds	r7, #48	; 0x30
   9962c:	46bd      	mov	sp, r7
   9962e:	bd80      	pop	{r7, pc}
   99630:	000994f5 	.word	0x000994f5
   99634:	400e0800 	.word	0x400e0800
   99638:	00099509 	.word	0x00099509
   9963c:	0009ad15 	.word	0x0009ad15
   99640:	40098000 	.word	0x40098000
   99644:	0009af29 	.word	0x0009af29
   99648:	0009afad 	.word	0x0009afad
   9964c:	0009afdd 	.word	0x0009afdd
   99650:	4009c000 	.word	0x4009c000
   99654:	400a0000 	.word	0x400a0000
   99658:	400a4000 	.word	0x400a4000

0009965c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   9965c:	b580      	push	{r7, lr}
   9965e:	b082      	sub	sp, #8
   99660:	af00      	add	r7, sp, #0
   99662:	6078      	str	r0, [r7, #4]
   99664:	460b      	mov	r3, r1
   99666:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   99668:	687b      	ldr	r3, [r7, #4]
   9966a:	4a27      	ldr	r2, [pc, #156]	; (99708 <usart_serial_putchar+0xac>)
   9966c:	4293      	cmp	r3, r2
   9966e:	d10a      	bne.n	99686 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   99670:	bf00      	nop
   99672:	78fb      	ldrb	r3, [r7, #3]
   99674:	4619      	mov	r1, r3
   99676:	6878      	ldr	r0, [r7, #4]
   99678:	4b24      	ldr	r3, [pc, #144]	; (9970c <usart_serial_putchar+0xb0>)
   9967a:	4798      	blx	r3
   9967c:	4603      	mov	r3, r0
   9967e:	2b00      	cmp	r3, #0
   99680:	d1f7      	bne.n	99672 <usart_serial_putchar+0x16>
		return 1;
   99682:	2301      	movs	r3, #1
   99684:	e03c      	b.n	99700 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   99686:	687b      	ldr	r3, [r7, #4]
   99688:	4a21      	ldr	r2, [pc, #132]	; (99710 <usart_serial_putchar+0xb4>)
   9968a:	4293      	cmp	r3, r2
   9968c:	d10a      	bne.n	996a4 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   9968e:	bf00      	nop
   99690:	78fb      	ldrb	r3, [r7, #3]
   99692:	4619      	mov	r1, r3
   99694:	6878      	ldr	r0, [r7, #4]
   99696:	4b1f      	ldr	r3, [pc, #124]	; (99714 <usart_serial_putchar+0xb8>)
   99698:	4798      	blx	r3
   9969a:	4603      	mov	r3, r0
   9969c:	2b00      	cmp	r3, #0
   9969e:	d1f7      	bne.n	99690 <usart_serial_putchar+0x34>
		return 1;
   996a0:	2301      	movs	r3, #1
   996a2:	e02d      	b.n	99700 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   996a4:	687b      	ldr	r3, [r7, #4]
   996a6:	4a1c      	ldr	r2, [pc, #112]	; (99718 <usart_serial_putchar+0xbc>)
   996a8:	4293      	cmp	r3, r2
   996aa:	d10a      	bne.n	996c2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   996ac:	bf00      	nop
   996ae:	78fb      	ldrb	r3, [r7, #3]
   996b0:	4619      	mov	r1, r3
   996b2:	6878      	ldr	r0, [r7, #4]
   996b4:	4b17      	ldr	r3, [pc, #92]	; (99714 <usart_serial_putchar+0xb8>)
   996b6:	4798      	blx	r3
   996b8:	4603      	mov	r3, r0
   996ba:	2b00      	cmp	r3, #0
   996bc:	d1f7      	bne.n	996ae <usart_serial_putchar+0x52>
		return 1;
   996be:	2301      	movs	r3, #1
   996c0:	e01e      	b.n	99700 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   996c2:	687b      	ldr	r3, [r7, #4]
   996c4:	4a15      	ldr	r2, [pc, #84]	; (9971c <usart_serial_putchar+0xc0>)
   996c6:	4293      	cmp	r3, r2
   996c8:	d10a      	bne.n	996e0 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   996ca:	bf00      	nop
   996cc:	78fb      	ldrb	r3, [r7, #3]
   996ce:	4619      	mov	r1, r3
   996d0:	6878      	ldr	r0, [r7, #4]
   996d2:	4b10      	ldr	r3, [pc, #64]	; (99714 <usart_serial_putchar+0xb8>)
   996d4:	4798      	blx	r3
   996d6:	4603      	mov	r3, r0
   996d8:	2b00      	cmp	r3, #0
   996da:	d1f7      	bne.n	996cc <usart_serial_putchar+0x70>
		return 1;
   996dc:	2301      	movs	r3, #1
   996de:	e00f      	b.n	99700 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   996e0:	687b      	ldr	r3, [r7, #4]
   996e2:	4a0f      	ldr	r2, [pc, #60]	; (99720 <usart_serial_putchar+0xc4>)
   996e4:	4293      	cmp	r3, r2
   996e6:	d10a      	bne.n	996fe <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   996e8:	bf00      	nop
   996ea:	78fb      	ldrb	r3, [r7, #3]
   996ec:	4619      	mov	r1, r3
   996ee:	6878      	ldr	r0, [r7, #4]
   996f0:	4b08      	ldr	r3, [pc, #32]	; (99714 <usart_serial_putchar+0xb8>)
   996f2:	4798      	blx	r3
   996f4:	4603      	mov	r3, r0
   996f6:	2b00      	cmp	r3, #0
   996f8:	d1f7      	bne.n	996ea <usart_serial_putchar+0x8e>
		return 1;
   996fa:	2301      	movs	r3, #1
   996fc:	e000      	b.n	99700 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   996fe:	2300      	movs	r3, #0
}
   99700:	4618      	mov	r0, r3
   99702:	3708      	adds	r7, #8
   99704:	46bd      	mov	sp, r7
   99706:	bd80      	pop	{r7, pc}
   99708:	400e0800 	.word	0x400e0800
   9970c:	0009add9 	.word	0x0009add9
   99710:	40098000 	.word	0x40098000
   99714:	0009b045 	.word	0x0009b045
   99718:	4009c000 	.word	0x4009c000
   9971c:	400a0000 	.word	0x400a0000
   99720:	400a4000 	.word	0x400a4000

00099724 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   99724:	b580      	push	{r7, lr}
   99726:	b084      	sub	sp, #16
   99728:	af00      	add	r7, sp, #0
   9972a:	6078      	str	r0, [r7, #4]
   9972c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   9972e:	2300      	movs	r3, #0
   99730:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   99732:	687b      	ldr	r3, [r7, #4]
   99734:	4a2b      	ldr	r2, [pc, #172]	; (997e4 <usart_serial_getchar+0xc0>)
   99736:	4293      	cmp	r3, r2
   99738:	d107      	bne.n	9974a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9973a:	bf00      	nop
   9973c:	6839      	ldr	r1, [r7, #0]
   9973e:	6878      	ldr	r0, [r7, #4]
   99740:	4b29      	ldr	r3, [pc, #164]	; (997e8 <usart_serial_getchar+0xc4>)
   99742:	4798      	blx	r3
   99744:	4603      	mov	r3, r0
   99746:	2b00      	cmp	r3, #0
   99748:	d1f8      	bne.n	9973c <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9974a:	687b      	ldr	r3, [r7, #4]
   9974c:	4a27      	ldr	r2, [pc, #156]	; (997ec <usart_serial_getchar+0xc8>)
   9974e:	4293      	cmp	r3, r2
   99750:	d10d      	bne.n	9976e <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   99752:	bf00      	nop
   99754:	f107 030c 	add.w	r3, r7, #12
   99758:	4619      	mov	r1, r3
   9975a:	6878      	ldr	r0, [r7, #4]
   9975c:	4b24      	ldr	r3, [pc, #144]	; (997f0 <usart_serial_getchar+0xcc>)
   9975e:	4798      	blx	r3
   99760:	4603      	mov	r3, r0
   99762:	2b00      	cmp	r3, #0
   99764:	d1f6      	bne.n	99754 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   99766:	68fb      	ldr	r3, [r7, #12]
   99768:	b2da      	uxtb	r2, r3
   9976a:	683b      	ldr	r3, [r7, #0]
   9976c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9976e:	687b      	ldr	r3, [r7, #4]
   99770:	4a20      	ldr	r2, [pc, #128]	; (997f4 <usart_serial_getchar+0xd0>)
   99772:	4293      	cmp	r3, r2
   99774:	d10d      	bne.n	99792 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   99776:	bf00      	nop
   99778:	f107 030c 	add.w	r3, r7, #12
   9977c:	4619      	mov	r1, r3
   9977e:	6878      	ldr	r0, [r7, #4]
   99780:	4b1b      	ldr	r3, [pc, #108]	; (997f0 <usart_serial_getchar+0xcc>)
   99782:	4798      	blx	r3
   99784:	4603      	mov	r3, r0
   99786:	2b00      	cmp	r3, #0
   99788:	d1f6      	bne.n	99778 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   9978a:	68fb      	ldr	r3, [r7, #12]
   9978c:	b2da      	uxtb	r2, r3
   9978e:	683b      	ldr	r3, [r7, #0]
   99790:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   99792:	687b      	ldr	r3, [r7, #4]
   99794:	4a18      	ldr	r2, [pc, #96]	; (997f8 <usart_serial_getchar+0xd4>)
   99796:	4293      	cmp	r3, r2
   99798:	d10d      	bne.n	997b6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   9979a:	bf00      	nop
   9979c:	f107 030c 	add.w	r3, r7, #12
   997a0:	4619      	mov	r1, r3
   997a2:	6878      	ldr	r0, [r7, #4]
   997a4:	4b12      	ldr	r3, [pc, #72]	; (997f0 <usart_serial_getchar+0xcc>)
   997a6:	4798      	blx	r3
   997a8:	4603      	mov	r3, r0
   997aa:	2b00      	cmp	r3, #0
   997ac:	d1f6      	bne.n	9979c <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   997ae:	68fb      	ldr	r3, [r7, #12]
   997b0:	b2da      	uxtb	r2, r3
   997b2:	683b      	ldr	r3, [r7, #0]
   997b4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   997b6:	687b      	ldr	r3, [r7, #4]
   997b8:	4a10      	ldr	r2, [pc, #64]	; (997fc <usart_serial_getchar+0xd8>)
   997ba:	4293      	cmp	r3, r2
   997bc:	d10d      	bne.n	997da <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   997be:	bf00      	nop
   997c0:	f107 030c 	add.w	r3, r7, #12
   997c4:	4619      	mov	r1, r3
   997c6:	6878      	ldr	r0, [r7, #4]
   997c8:	4b09      	ldr	r3, [pc, #36]	; (997f0 <usart_serial_getchar+0xcc>)
   997ca:	4798      	blx	r3
   997cc:	4603      	mov	r3, r0
   997ce:	2b00      	cmp	r3, #0
   997d0:	d1f6      	bne.n	997c0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   997d2:	68fb      	ldr	r3, [r7, #12]
   997d4:	b2da      	uxtb	r2, r3
   997d6:	683b      	ldr	r3, [r7, #0]
   997d8:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   997da:	bf00      	nop
   997dc:	3710      	adds	r7, #16
   997de:	46bd      	mov	sp, r7
   997e0:	bd80      	pop	{r7, pc}
   997e2:	bf00      	nop
   997e4:	400e0800 	.word	0x400e0800
   997e8:	0009ae1d 	.word	0x0009ae1d
   997ec:	40098000 	.word	0x40098000
   997f0:	0009b075 	.word	0x0009b075
   997f4:	4009c000 	.word	0x4009c000
   997f8:	400a0000 	.word	0x400a0000
   997fc:	400a4000 	.word	0x400a4000

00099800 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   99800:	b580      	push	{r7, lr}
   99802:	b082      	sub	sp, #8
   99804:	af00      	add	r7, sp, #0
   99806:	6078      	str	r0, [r7, #4]
   99808:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   9980a:	4a0f      	ldr	r2, [pc, #60]	; (99848 <stdio_serial_init+0x48>)
   9980c:	687b      	ldr	r3, [r7, #4]
   9980e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   99810:	4b0e      	ldr	r3, [pc, #56]	; (9984c <stdio_serial_init+0x4c>)
   99812:	4a0f      	ldr	r2, [pc, #60]	; (99850 <stdio_serial_init+0x50>)
   99814:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   99816:	4b0f      	ldr	r3, [pc, #60]	; (99854 <stdio_serial_init+0x54>)
   99818:	4a0f      	ldr	r2, [pc, #60]	; (99858 <stdio_serial_init+0x58>)
   9981a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   9981c:	6839      	ldr	r1, [r7, #0]
   9981e:	6878      	ldr	r0, [r7, #4]
   99820:	4b0e      	ldr	r3, [pc, #56]	; (9985c <stdio_serial_init+0x5c>)
   99822:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   99824:	4b0e      	ldr	r3, [pc, #56]	; (99860 <stdio_serial_init+0x60>)
   99826:	681b      	ldr	r3, [r3, #0]
   99828:	689b      	ldr	r3, [r3, #8]
   9982a:	2100      	movs	r1, #0
   9982c:	4618      	mov	r0, r3
   9982e:	4b0d      	ldr	r3, [pc, #52]	; (99864 <stdio_serial_init+0x64>)
   99830:	4798      	blx	r3
	setbuf(stdin, NULL);
   99832:	4b0b      	ldr	r3, [pc, #44]	; (99860 <stdio_serial_init+0x60>)
   99834:	681b      	ldr	r3, [r3, #0]
   99836:	685b      	ldr	r3, [r3, #4]
   99838:	2100      	movs	r1, #0
   9983a:	4618      	mov	r0, r3
   9983c:	4b09      	ldr	r3, [pc, #36]	; (99864 <stdio_serial_init+0x64>)
   9983e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   99840:	bf00      	nop
   99842:	3708      	adds	r7, #8
   99844:	46bd      	mov	sp, r7
   99846:	bd80      	pop	{r7, pc}
   99848:	20072808 	.word	0x20072808
   9984c:	20072804 	.word	0x20072804
   99850:	0009965d 	.word	0x0009965d
   99854:	20072800 	.word	0x20072800
   99858:	00099725 	.word	0x00099725
   9985c:	00099525 	.word	0x00099525
   99860:	200711e0 	.word	0x200711e0
   99864:	000a6bf9 	.word	0x000a6bf9

00099868 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   99868:	b580      	push	{r7, lr}
   9986a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   9986c:	2008      	movs	r0, #8
   9986e:	4b11      	ldr	r3, [pc, #68]	; (998b4 <DD_INIT_UART+0x4c>)
   99870:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   99872:	4b11      	ldr	r3, [pc, #68]	; (998b8 <DD_INIT_UART+0x50>)
   99874:	2250      	movs	r2, #80	; 0x50
   99876:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   99878:	4b0f      	ldr	r3, [pc, #60]	; (998b8 <DD_INIT_UART+0x50>)
   9987a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   9987e:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   99880:	4b0d      	ldr	r3, [pc, #52]	; (998b8 <DD_INIT_UART+0x50>)
   99882:	2246      	movs	r2, #70	; 0x46
   99884:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   99886:	490d      	ldr	r1, [pc, #52]	; (998bc <DD_INIT_UART+0x54>)
   99888:	480b      	ldr	r0, [pc, #44]	; (998b8 <DD_INIT_UART+0x50>)
   9988a:	4b0d      	ldr	r3, [pc, #52]	; (998c0 <DD_INIT_UART+0x58>)
   9988c:	4798      	blx	r3
	uart_enable(UART);
   9988e:	480a      	ldr	r0, [pc, #40]	; (998b8 <DD_INIT_UART+0x50>)
   99890:	4b0c      	ldr	r3, [pc, #48]	; (998c4 <DD_INIT_UART+0x5c>)
   99892:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   99894:	2101      	movs	r1, #1
   99896:	4808      	ldr	r0, [pc, #32]	; (998b8 <DD_INIT_UART+0x50>)
   99898:	4b0b      	ldr	r3, [pc, #44]	; (998c8 <DD_INIT_UART+0x60>)
   9989a:	4798      	blx	r3
	uart_enable(UART);
   9989c:	4806      	ldr	r0, [pc, #24]	; (998b8 <DD_INIT_UART+0x50>)
   9989e:	4b09      	ldr	r3, [pc, #36]	; (998c4 <DD_INIT_UART+0x5c>)
   998a0:	4798      	blx	r3
	uart_enable_rx(UART);
   998a2:	4805      	ldr	r0, [pc, #20]	; (998b8 <DD_INIT_UART+0x50>)
   998a4:	4b09      	ldr	r3, [pc, #36]	; (998cc <DD_INIT_UART+0x64>)
   998a6:	4798      	blx	r3
	uart_enable_tx(UART);
   998a8:	4803      	ldr	r0, [pc, #12]	; (998b8 <DD_INIT_UART+0x50>)
   998aa:	4b09      	ldr	r3, [pc, #36]	; (998d0 <DD_INIT_UART+0x68>)
   998ac:	4798      	blx	r3
	
	
}
   998ae:	bf00      	nop
   998b0:	bd80      	pop	{r7, pc}
   998b2:	bf00      	nop
   998b4:	00099509 	.word	0x00099509
   998b8:	400e0800 	.word	0x400e0800
   998bc:	000a89d4 	.word	0x000a89d4
   998c0:	00099801 	.word	0x00099801
   998c4:	0009ada5 	.word	0x0009ada5
   998c8:	0009adbd 	.word	0x0009adbd
   998cc:	0009ad8d 	.word	0x0009ad8d
   998d0:	0009ad75 	.word	0x0009ad75

000998d4 <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   998d4:	b580      	push	{r7, lr}
   998d6:	b084      	sub	sp, #16
   998d8:	af00      	add	r7, sp, #0
   998da:	4603      	mov	r3, r0
   998dc:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   998de:	79fb      	ldrb	r3, [r7, #7]
   998e0:	4619      	mov	r1, r3
   998e2:	4804      	ldr	r0, [pc, #16]	; (998f4 <DD_TX_UART+0x20>)
   998e4:	4b04      	ldr	r3, [pc, #16]	; (998f8 <DD_TX_UART+0x24>)
   998e6:	4798      	blx	r3
   998e8:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   998ea:	68fb      	ldr	r3, [r7, #12]
}
   998ec:	4618      	mov	r0, r3
   998ee:	3710      	adds	r7, #16
   998f0:	46bd      	mov	sp, r7
   998f2:	bd80      	pop	{r7, pc}
   998f4:	400e0800 	.word	0x400e0800
   998f8:	0009add9 	.word	0x0009add9

000998fc <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   998fc:	b580      	push	{r7, lr}
   998fe:	b082      	sub	sp, #8
   99900:	af00      	add	r7, sp, #0
   99902:	4603      	mov	r3, r0
   99904:	460a      	mov	r2, r1
   99906:	80fb      	strh	r3, [r7, #6]
   99908:	4613      	mov	r3, r2
   9990a:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   9990c:	88ba      	ldrh	r2, [r7, #4]
   9990e:	88fb      	ldrh	r3, [r7, #6]
   99910:	4611      	mov	r1, r2
   99912:	4618      	mov	r0, r3
   99914:	4b02      	ldr	r3, [pc, #8]	; (99920 <SV_CAN_WRITE_PROPO+0x24>)
   99916:	4798      	blx	r3
	
}
   99918:	bf00      	nop
   9991a:	3708      	adds	r7, #8
   9991c:	46bd      	mov	sp, r7
   9991e:	bd80      	pop	{r7, pc}
   99920:	000967f9 	.word	0x000967f9

00099924 <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   99924:	b580      	push	{r7, lr}
   99926:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   99928:	4b02      	ldr	r3, [pc, #8]	; (99934 <SV_CAN_READ_HEMO+0x10>)
   9992a:	4798      	blx	r3
	return 0;
   9992c:	2300      	movs	r3, #0
}
   9992e:	4618      	mov	r0, r3
   99930:	bd80      	pop	{r7, pc}
   99932:	bf00      	nop
   99934:	000968bd 	.word	0x000968bd

00099938 <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   99938:	b580      	push	{r7, lr}
   9993a:	b082      	sub	sp, #8
   9993c:	af00      	add	r7, sp, #0
   9993e:	4603      	mov	r3, r0
   99940:	6039      	str	r1, [r7, #0]
   99942:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   99944:	683b      	ldr	r3, [r7, #0]
   99946:	b29b      	uxth	r3, r3
   99948:	4618      	mov	r0, r3
   9994a:	4b03      	ldr	r3, [pc, #12]	; (99958 <SV_CAN_WRITE_SENSOR+0x20>)
   9994c:	4798      	blx	r3
	
}
   9994e:	bf00      	nop
   99950:	3708      	adds	r7, #8
   99952:	46bd      	mov	sp, r7
   99954:	bd80      	pop	{r7, pc}
   99956:	bf00      	nop
   99958:	00096879 	.word	0x00096879

0009995c <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   9995c:	b580      	push	{r7, lr}
   9995e:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   99960:	4b23      	ldr	r3, [pc, #140]	; (999f0 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   99962:	681b      	ldr	r3, [r3, #0]
   99964:	4a23      	ldr	r2, [pc, #140]	; (999f4 <SV_CAN_REQUEST_SENSORDATA+0x98>)
   99966:	6013      	str	r3, [r2, #0]
	delay = 0;	
   99968:	4b23      	ldr	r3, [pc, #140]	; (999f8 <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   9996a:	2200      	movs	r2, #0
   9996c:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   9996e:	200a      	movs	r0, #10
   99970:	4b22      	ldr	r3, [pc, #136]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99972:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   99974:	2141      	movs	r1, #65	; 0x41
   99976:	2003      	movs	r0, #3
   99978:	4b21      	ldr	r3, [pc, #132]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9997a:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   9997c:	4b21      	ldr	r3, [pc, #132]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   9997e:	2200      	movs	r2, #0
   99980:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   99982:	200a      	movs	r0, #10
   99984:	4b1d      	ldr	r3, [pc, #116]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99986:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   99988:	2142      	movs	r1, #66	; 0x42
   9998a:	2003      	movs	r0, #3
   9998c:	4b1c      	ldr	r3, [pc, #112]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   9998e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   99990:	4b1c      	ldr	r3, [pc, #112]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99992:	2200      	movs	r2, #0
   99994:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   99996:	200a      	movs	r0, #10
   99998:	4b18      	ldr	r3, [pc, #96]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   9999a:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   9999c:	2143      	movs	r1, #67	; 0x43
   9999e:	2003      	movs	r0, #3
   999a0:	4b17      	ldr	r3, [pc, #92]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   999a2:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   999a4:	4b17      	ldr	r3, [pc, #92]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   999a6:	2200      	movs	r2, #0
   999a8:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   999aa:	200a      	movs	r0, #10
   999ac:	4b13      	ldr	r3, [pc, #76]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   999ae:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   999b0:	2144      	movs	r1, #68	; 0x44
   999b2:	2003      	movs	r0, #3
   999b4:	4b12      	ldr	r3, [pc, #72]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   999b6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   999b8:	4b12      	ldr	r3, [pc, #72]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   999ba:	2200      	movs	r2, #0
   999bc:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   999be:	200a      	movs	r0, #10
   999c0:	4b0e      	ldr	r3, [pc, #56]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   999c2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   999c4:	2145      	movs	r1, #69	; 0x45
   999c6:	2003      	movs	r0, #3
   999c8:	4b0d      	ldr	r3, [pc, #52]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   999ca:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   999cc:	4b0d      	ldr	r3, [pc, #52]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   999ce:	2200      	movs	r2, #0
   999d0:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   999d2:	200a      	movs	r0, #10
   999d4:	4b09      	ldr	r3, [pc, #36]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   999d6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   999d8:	2146      	movs	r1, #70	; 0x46
   999da:	2003      	movs	r0, #3
   999dc:	4b08      	ldr	r3, [pc, #32]	; (99a00 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   999de:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   999e0:	200a      	movs	r0, #10
   999e2:	4b06      	ldr	r3, [pc, #24]	; (999fc <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   999e4:	4798      	blx	r3
	array1[6]	= 0;
   999e6:	4b07      	ldr	r3, [pc, #28]	; (99a04 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   999e8:	2200      	movs	r2, #0
   999ea:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   999ec:	bf00      	nop
   999ee:	bd80      	pop	{r7, pc}
   999f0:	20071a98 	.word	0x20071a98
   999f4:	20071b48 	.word	0x20071b48
   999f8:	20071b4c 	.word	0x20071b4c
   999fc:	00093009 	.word	0x00093009
   99a00:	00099939 	.word	0x00099939
   99a04:	20071b3c 	.word	0x20071b3c

00099a08 <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   99a08:	b580      	push	{r7, lr}
   99a0a:	b084      	sub	sp, #16
   99a0c:	af00      	add	r7, sp, #0
   99a0e:	4603      	mov	r3, r0
   99a10:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   99a12:	2300      	movs	r3, #0
   99a14:	60fb      	str	r3, [r7, #12]
	
	if(sv_pump_id != BLOODPUMP)
   99a16:	79fb      	ldrb	r3, [r7, #7]
   99a18:	2b03      	cmp	r3, #3
   99a1a:	d004      	beq.n	99a26 <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   99a1c:	79fb      	ldrb	r3, [r7, #7]
   99a1e:	4618      	mov	r0, r3
   99a20:	4b06      	ldr	r3, [pc, #24]	; (99a3c <sv_cntrl_activatepump+0x34>)
   99a22:	4798      	blx	r3
   99a24:	e005      	b.n	99a32 <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   99a26:	2301      	movs	r3, #1
   99a28:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   99a2a:	2100      	movs	r1, #0
   99a2c:	2020      	movs	r0, #32
   99a2e:	4b04      	ldr	r3, [pc, #16]	; (99a40 <sv_cntrl_activatepump+0x38>)
   99a30:	4798      	blx	r3
	}
	
	return 0;
   99a32:	2300      	movs	r3, #0
}
   99a34:	4618      	mov	r0, r3
   99a36:	3710      	adds	r7, #16
   99a38:	46bd      	mov	sp, r7
   99a3a:	bd80      	pop	{r7, pc}
   99a3c:	00097dd9 	.word	0x00097dd9
   99a40:	00096831 	.word	0x00096831

00099a44 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   99a44:	b580      	push	{r7, lr}
   99a46:	b084      	sub	sp, #16
   99a48:	af00      	add	r7, sp, #0
   99a4a:	4603      	mov	r3, r0
   99a4c:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   99a4e:	2300      	movs	r3, #0
   99a50:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   99a52:	79fb      	ldrb	r3, [r7, #7]
   99a54:	2b03      	cmp	r3, #3
   99a56:	d004      	beq.n	99a62 <sv_cntrl_deactivatepump+0x1e>
	{
		DD_RESET_PUMP(sv_pump_id);
   99a58:	79fb      	ldrb	r3, [r7, #7]
   99a5a:	4618      	mov	r0, r3
   99a5c:	4b06      	ldr	r3, [pc, #24]	; (99a78 <sv_cntrl_deactivatepump+0x34>)
   99a5e:	4798      	blx	r3
   99a60:	e005      	b.n	99a6e <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   99a62:	2302      	movs	r3, #2
   99a64:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   99a66:	2100      	movs	r1, #0
   99a68:	2021      	movs	r0, #33	; 0x21
   99a6a:	4b04      	ldr	r3, [pc, #16]	; (99a7c <sv_cntrl_deactivatepump+0x38>)
   99a6c:	4798      	blx	r3
	}
	
	
	return 0;
   99a6e:	2300      	movs	r3, #0
}
   99a70:	4618      	mov	r0, r3
   99a72:	3710      	adds	r7, #16
   99a74:	46bd      	mov	sp, r7
   99a76:	bd80      	pop	{r7, pc}
   99a78:	00097f79 	.word	0x00097f79
   99a7c:	00096831 	.word	0x00096831

00099a80 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   99a80:	b580      	push	{r7, lr}
   99a82:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   99a84:	4b02      	ldr	r3, [pc, #8]	; (99a90 <sv_cntrl_poweronheater+0x10>)
   99a86:	4798      	blx	r3
	 return 0;
   99a88:	2300      	movs	r3, #0
}
   99a8a:	4618      	mov	r0, r3
   99a8c:	bd80      	pop	{r7, pc}
   99a8e:	bf00      	nop
   99a90:	00097eb9 	.word	0x00097eb9

00099a94 <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   99a94:	b580      	push	{r7, lr}
   99a96:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   99a98:	4b02      	ldr	r3, [pc, #8]	; (99aa4 <sv_cntrl_poweroffheater+0x10>)
   99a9a:	4798      	blx	r3
	return 0;
   99a9c:	2300      	movs	r3, #0
}
   99a9e:	4618      	mov	r0, r3
   99aa0:	bd80      	pop	{r7, pc}
   99aa2:	bf00      	nop
   99aa4:	00097f19 	.word	0x00097f19

00099aa8 <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   99aa8:	b580      	push	{r7, lr}
   99aaa:	b082      	sub	sp, #8
   99aac:	af00      	add	r7, sp, #0
   99aae:	4603      	mov	r3, r0
   99ab0:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   99ab2:	79fb      	ldrb	r3, [r7, #7]
   99ab4:	4618      	mov	r0, r3
   99ab6:	4b03      	ldr	r3, [pc, #12]	; (99ac4 <sv_cntrl_activate_valve+0x1c>)
   99ab8:	4798      	blx	r3
	}
	
	
	return 0;
   99aba:	2300      	movs	r3, #0
}
   99abc:	4618      	mov	r0, r3
   99abe:	3708      	adds	r7, #8
   99ac0:	46bd      	mov	sp, r7
   99ac2:	bd80      	pop	{r7, pc}
   99ac4:	000982f1 	.word	0x000982f1

00099ac8 <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   99ac8:	b580      	push	{r7, lr}
   99aca:	b082      	sub	sp, #8
   99acc:	af00      	add	r7, sp, #0
   99ace:	4603      	mov	r3, r0
   99ad0:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   99ad2:	79fb      	ldrb	r3, [r7, #7]
   99ad4:	2b10      	cmp	r3, #16
   99ad6:	d101      	bne.n	99adc <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   99ad8:	4b05      	ldr	r3, [pc, #20]	; (99af0 <sv_cntrl_deactivate_valve+0x28>)
   99ada:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   99adc:	79fb      	ldrb	r3, [r7, #7]
   99ade:	4618      	mov	r0, r3
   99ae0:	4b04      	ldr	r3, [pc, #16]	; (99af4 <sv_cntrl_deactivate_valve+0x2c>)
   99ae2:	4798      	blx	r3
	
	return 0;
   99ae4:	2300      	movs	r3, #0
}
   99ae6:	4618      	mov	r0, r3
   99ae8:	3708      	adds	r7, #8
   99aea:	46bd      	mov	sp, r7
   99aec:	bd80      	pop	{r7, pc}
   99aee:	bf00      	nop
   99af0:	00097f19 	.word	0x00097f19
   99af4:	000983b1 	.word	0x000983b1

00099af8 <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   99af8:	b580      	push	{r7, lr}
   99afa:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   99afc:	4b02      	ldr	r3, [pc, #8]	; (99b08 <sv_cntrl_setHepa_dir+0x10>)
   99afe:	4798      	blx	r3
	
	return 0;
   99b00:	2300      	movs	r3, #0
}
   99b02:	4618      	mov	r0, r3
   99b04:	bd80      	pop	{r7, pc}
   99b06:	bf00      	nop
   99b08:	00098201 	.word	0x00098201

00099b0c <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   99b0c:	b580      	push	{r7, lr}
   99b0e:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   99b10:	4b02      	ldr	r3, [pc, #8]	; (99b1c <sv_cntrl_resetHepa_dir+0x10>)
   99b12:	4798      	blx	r3
	
	return 0;	
   99b14:	2300      	movs	r3, #0
}
   99b16:	4618      	mov	r0, r3
   99b18:	bd80      	pop	{r7, pc}
   99b1a:	bf00      	nop
   99b1c:	00098229 	.word	0x00098229

00099b20 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   99b20:	b580      	push	{r7, lr}
   99b22:	b084      	sub	sp, #16
   99b24:	af00      	add	r7, sp, #0
   99b26:	4603      	mov	r3, r0
   99b28:	6039      	str	r1, [r7, #0]
   99b2a:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   99b2c:	2300      	movs	r3, #0
   99b2e:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   99b30:	2304      	movs	r3, #4
   99b32:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   99b34:	683b      	ldr	r3, [r7, #0]
   99b36:	b2db      	uxtb	r3, r3
   99b38:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   99b3a:	683b      	ldr	r3, [r7, #0]
   99b3c:	0a1b      	lsrs	r3, r3, #8
   99b3e:	b2db      	uxtb	r3, r3
   99b40:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   99b42:	79fb      	ldrb	r3, [r7, #7]
   99b44:	2b03      	cmp	r3, #3
   99b46:	d005      	beq.n	99b54 <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   99b48:	79fb      	ldrb	r3, [r7, #7]
   99b4a:	6839      	ldr	r1, [r7, #0]
   99b4c:	4618      	mov	r0, r3
   99b4e:	4b07      	ldr	r3, [pc, #28]	; (99b6c <sv_cntrl_setpumpspeed+0x4c>)
   99b50:	4798      	blx	r3
   99b52:	e005      	b.n	99b60 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   99b54:	683b      	ldr	r3, [r7, #0]
   99b56:	b29b      	uxth	r3, r3
   99b58:	4619      	mov	r1, r3
   99b5a:	2023      	movs	r0, #35	; 0x23
   99b5c:	4b04      	ldr	r3, [pc, #16]	; (99b70 <sv_cntrl_setpumpspeed+0x50>)
   99b5e:	4798      	blx	r3
		}
		
	
	return 0;
   99b60:	2300      	movs	r3, #0
}
   99b62:	4618      	mov	r0, r3
   99b64:	3710      	adds	r7, #16
   99b66:	46bd      	mov	sp, r7
   99b68:	bd80      	pop	{r7, pc}
   99b6a:	bf00      	nop
   99b6c:	00098061 	.word	0x00098061
   99b70:	00096831 	.word	0x00096831

00099b74 <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   99b74:	b480      	push	{r7}
   99b76:	b083      	sub	sp, #12
   99b78:	af00      	add	r7, sp, #0
   99b7a:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   99b7c:	bf00      	nop
   99b7e:	370c      	adds	r7, #12
   99b80:	46bd      	mov	sp, r7
   99b82:	bc80      	pop	{r7}
   99b84:	4770      	bx	lr
   99b86:	bf00      	nop

00099b88 <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   99b88:	b580      	push	{r7, lr}
   99b8a:	b082      	sub	sp, #8
   99b8c:	af00      	add	r7, sp, #0
   99b8e:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   99b90:	4b0c      	ldr	r3, [pc, #48]	; (99bc4 <sv_cntrl_incheater+0x3c>)
   99b92:	6878      	ldr	r0, [r7, #4]
   99b94:	4798      	blx	r3
   99b96:	4602      	mov	r2, r0
   99b98:	4b0b      	ldr	r3, [pc, #44]	; (99bc8 <sv_cntrl_incheater+0x40>)
   99b9a:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   99b9c:	687b      	ldr	r3, [r7, #4]
   99b9e:	f641 524c 	movw	r2, #7500	; 0x1d4c
   99ba2:	4293      	cmp	r3, r2
   99ba4:	dd02      	ble.n	99bac <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   99ba6:	f641 534c 	movw	r3, #7500	; 0x1d4c
   99baa:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   99bac:	687b      	ldr	r3, [r7, #4]
   99bae:	2b00      	cmp	r3, #0
   99bb0:	dd03      	ble.n	99bba <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   99bb2:	687b      	ldr	r3, [r7, #4]
   99bb4:	4618      	mov	r0, r3
   99bb6:	4b05      	ldr	r3, [pc, #20]	; (99bcc <sv_cntrl_incheater+0x44>)
   99bb8:	4798      	blx	r3
	 }
	
	
	return 0;
   99bba:	2300      	movs	r3, #0
}
   99bbc:	4618      	mov	r0, r3
   99bbe:	3708      	adds	r7, #8
   99bc0:	46bd      	mov	sp, r7
   99bc2:	bd80      	pop	{r7, pc}
   99bc4:	000a64e9 	.word	0x000a64e9
   99bc8:	20072184 	.word	0x20072184
   99bcc:	000981dd 	.word	0x000981dd

00099bd0 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   99bd0:	b580      	push	{r7, lr}
   99bd2:	b082      	sub	sp, #8
   99bd4:	af00      	add	r7, sp, #0
   99bd6:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   99bd8:	687b      	ldr	r3, [r7, #4]
   99bda:	2b00      	cmp	r3, #0
   99bdc:	dd03      	ble.n	99be6 <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   99bde:	687b      	ldr	r3, [r7, #4]
   99be0:	4618      	mov	r0, r3
   99be2:	4b03      	ldr	r3, [pc, #12]	; (99bf0 <sv_cntrl_decheater+0x20>)
   99be4:	4798      	blx	r3
	 }
	
	
	return 0;
   99be6:	2300      	movs	r3, #0
}
   99be8:	4618      	mov	r0, r3
   99bea:	3708      	adds	r7, #8
   99bec:	46bd      	mov	sp, r7
   99bee:	bd80      	pop	{r7, pc}
   99bf0:	000981dd 	.word	0x000981dd

00099bf4 <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   99bf4:	b580      	push	{r7, lr}
   99bf6:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   99bf8:	4b02      	ldr	r3, [pc, #8]	; (99c04 <sv_cntrl_activatevenousclamp+0x10>)
   99bfa:	4798      	blx	r3
	
	return 0;
   99bfc:	2300      	movs	r3, #0
}
   99bfe:	4618      	mov	r0, r3
   99c00:	bd80      	pop	{r7, pc}
   99c02:	bf00      	nop
   99c04:	0009874d 	.word	0x0009874d

00099c08 <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   99c08:	b580      	push	{r7, lr}
   99c0a:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   99c0c:	4b02      	ldr	r3, [pc, #8]	; (99c18 <sv_cntrl_deactivatevenousclamp+0x10>)
   99c0e:	4798      	blx	r3
	
	return 0;
   99c10:	2300      	movs	r3, #0
}
   99c12:	4618      	mov	r0, r3
   99c14:	bd80      	pop	{r7, pc}
   99c16:	bf00      	nop
   99c18:	00098775 	.word	0x00098775

00099c1c <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   99c1c:	b580      	push	{r7, lr}
   99c1e:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   99c20:	4b03      	ldr	r3, [pc, #12]	; (99c30 <sv_cntrl_enable_loopback+0x14>)
   99c22:	4798      	blx	r3
	Loopbackstatus = true;
   99c24:	4b03      	ldr	r3, [pc, #12]	; (99c34 <sv_cntrl_enable_loopback+0x18>)
   99c26:	2201      	movs	r2, #1
   99c28:	701a      	strb	r2, [r3, #0]
	return 0;
   99c2a:	2300      	movs	r3, #0

}
   99c2c:	4618      	mov	r0, r3
   99c2e:	bd80      	pop	{r7, pc}
   99c30:	00097d89 	.word	0x00097d89
   99c34:	200725b5 	.word	0x200725b5

00099c38 <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   99c38:	b580      	push	{r7, lr}
   99c3a:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   99c3c:	4b03      	ldr	r3, [pc, #12]	; (99c4c <sv_cntrl_disable_loopback+0x14>)
   99c3e:	4798      	blx	r3
	Loopbackstatus = false;
   99c40:	4b03      	ldr	r3, [pc, #12]	; (99c50 <sv_cntrl_disable_loopback+0x18>)
   99c42:	2200      	movs	r2, #0
   99c44:	701a      	strb	r2, [r3, #0]
	return 0;
   99c46:	2300      	movs	r3, #0

}
   99c48:	4618      	mov	r0, r3
   99c4a:	bd80      	pop	{r7, pc}
   99c4c:	00097db1 	.word	0x00097db1
   99c50:	200725b5 	.word	0x200725b5

00099c54 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   99c54:	b580      	push	{r7, lr}
   99c56:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   99c58:	4b05      	ldr	r3, [pc, #20]	; (99c70 <sv_cntrl_enable_bypass+0x1c>)
   99c5a:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   99c5c:	2004      	movs	r0, #4
   99c5e:	4b05      	ldr	r3, [pc, #20]	; (99c74 <sv_cntrl_enable_bypass+0x20>)
   99c60:	4798      	blx	r3
	Bypassstatus = true;
   99c62:	4b05      	ldr	r3, [pc, #20]	; (99c78 <sv_cntrl_enable_bypass+0x24>)
   99c64:	2201      	movs	r2, #1
   99c66:	701a      	strb	r2, [r3, #0]
	return 0;
   99c68:	2300      	movs	r3, #0

}
   99c6a:	4618      	mov	r0, r3
   99c6c:	bd80      	pop	{r7, pc}
   99c6e:	bf00      	nop
   99c70:	00097d29 	.word	0x00097d29
   99c74:	00099a45 	.word	0x00099a45
   99c78:	2007264d 	.word	0x2007264d

00099c7c <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   99c7c:	b580      	push	{r7, lr}
   99c7e:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   99c80:	4b03      	ldr	r3, [pc, #12]	; (99c90 <sv_cntrl_disable_bypass+0x14>)
   99c82:	4798      	blx	r3
	Bypassstatus = false;
   99c84:	4b03      	ldr	r3, [pc, #12]	; (99c94 <sv_cntrl_disable_bypass+0x18>)
   99c86:	2200      	movs	r2, #0
   99c88:	701a      	strb	r2, [r3, #0]
	return 0;
   99c8a:	2300      	movs	r3, #0

}
   99c8c:	4618      	mov	r0, r3
   99c8e:	bd80      	pop	{r7, pc}
   99c90:	00097d59 	.word	0x00097d59
   99c94:	2007264d 	.word	0x2007264d

00099c98 <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   99c98:	b580      	push	{r7, lr}
   99c9a:	b082      	sub	sp, #8
   99c9c:	af00      	add	r7, sp, #0
   99c9e:	4603      	mov	r3, r0
   99ca0:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   99ca2:	4b0a      	ldr	r3, [pc, #40]	; (99ccc <sv_cntrl_setflowpath+0x34>)
   99ca4:	681a      	ldr	r2, [r3, #0]
   99ca6:	4b0a      	ldr	r3, [pc, #40]	; (99cd0 <sv_cntrl_setflowpath+0x38>)
   99ca8:	681b      	ldr	r3, [r3, #0]
   99caa:	1ad3      	subs	r3, r2, r3
   99cac:	4a09      	ldr	r2, [pc, #36]	; (99cd4 <sv_cntrl_setflowpath+0x3c>)
   99cae:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   99cb0:	4b06      	ldr	r3, [pc, #24]	; (99ccc <sv_cntrl_setflowpath+0x34>)
   99cb2:	681b      	ldr	r3, [r3, #0]
   99cb4:	4a06      	ldr	r2, [pc, #24]	; (99cd0 <sv_cntrl_setflowpath+0x38>)
   99cb6:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   99cb8:	79fb      	ldrb	r3, [r7, #7]
   99cba:	4618      	mov	r0, r3
   99cbc:	4b06      	ldr	r3, [pc, #24]	; (99cd8 <sv_cntrl_setflowpath+0x40>)
   99cbe:	4798      	blx	r3
	
	return 0;
   99cc0:	2300      	movs	r3, #0

}
   99cc2:	4618      	mov	r0, r3
   99cc4:	3708      	adds	r7, #8
   99cc6:	46bd      	mov	sp, r7
   99cc8:	bd80      	pop	{r7, pc}
   99cca:	bf00      	nop
   99ccc:	20071a98 	.word	0x20071a98
   99cd0:	20072370 	.word	0x20072370
   99cd4:	200724d8 	.word	0x200724d8
   99cd8:	00098b25 	.word	0x00098b25

00099cdc <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   99cdc:	b580      	push	{r7, lr}
   99cde:	b082      	sub	sp, #8
   99ce0:	af00      	add	r7, sp, #0
   99ce2:	4603      	mov	r3, r0
   99ce4:	6039      	str	r1, [r7, #0]
   99ce6:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   99ce8:	79fb      	ldrb	r3, [r7, #7]
   99cea:	6839      	ldr	r1, [r7, #0]
   99cec:	4618      	mov	r0, r3
   99cee:	4b03      	ldr	r3, [pc, #12]	; (99cfc <sv_cntrl_setpumpfreq+0x20>)
   99cf0:	4798      	blx	r3
	return 0;
   99cf2:	2300      	movs	r3, #0
}
   99cf4:	4618      	mov	r0, r3
   99cf6:	3708      	adds	r7, #8
   99cf8:	46bd      	mov	sp, r7
   99cfa:	bd80      	pop	{r7, pc}
   99cfc:	0009818d 	.word	0x0009818d

00099d00 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   99d00:	b580      	push	{r7, lr}
   99d02:	af00      	add	r7, sp, #0
	DD_SET_RED();
   99d04:	4b02      	ldr	r3, [pc, #8]	; (99d10 <sv_cntrl_setredalarm+0x10>)
   99d06:	4798      	blx	r3
	return 0;
   99d08:	2300      	movs	r3, #0
}
   99d0a:	4618      	mov	r0, r3
   99d0c:	bd80      	pop	{r7, pc}
   99d0e:	bf00      	nop
   99d10:	00098251 	.word	0x00098251

00099d14 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   99d14:	b580      	push	{r7, lr}
   99d16:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   99d18:	4b02      	ldr	r3, [pc, #8]	; (99d24 <sv_cntrl_setyellowalarm+0x10>)
   99d1a:	4798      	blx	r3
	return 0;
   99d1c:	2300      	movs	r3, #0
}
   99d1e:	4618      	mov	r0, r3
   99d20:	bd80      	pop	{r7, pc}
   99d22:	bf00      	nop
   99d24:	00098279 	.word	0x00098279

00099d28 <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   99d28:	b580      	push	{r7, lr}
   99d2a:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   99d2c:	4b02      	ldr	r3, [pc, #8]	; (99d38 <sv_cntrl_setgreenalarm+0x10>)
   99d2e:	4798      	blx	r3
	return 0;
   99d30:	2300      	movs	r3, #0
}
   99d32:	4618      	mov	r0, r3
   99d34:	bd80      	pop	{r7, pc}
   99d36:	bf00      	nop
   99d38:	00098265 	.word	0x00098265

00099d3c <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   99d3c:	b580      	push	{r7, lr}
   99d3e:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   99d40:	4b02      	ldr	r3, [pc, #8]	; (99d4c <sv_cntrl_buzzer+0x10>)
   99d42:	4798      	blx	r3
	return 0;
   99d44:	2300      	movs	r3, #0
}
   99d46:	4618      	mov	r0, r3
   99d48:	bd80      	pop	{r7, pc}
   99d4a:	bf00      	nop
   99d4c:	0009828d 	.word	0x0009828d

00099d50 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   99d50:	b580      	push	{r7, lr}
   99d52:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   99d54:	4b02      	ldr	r3, [pc, #8]	; (99d60 <sv_cntrl_resetredalarm+0x10>)
   99d56:	4798      	blx	r3
	return 0;
   99d58:	2300      	movs	r3, #0
}
   99d5a:	4618      	mov	r0, r3
   99d5c:	bd80      	pop	{r7, pc}
   99d5e:	bf00      	nop
   99d60:	000982a1 	.word	0x000982a1

00099d64 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   99d64:	b580      	push	{r7, lr}
   99d66:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   99d68:	4b02      	ldr	r3, [pc, #8]	; (99d74 <sv_cntrl_resetyellowalarm+0x10>)
   99d6a:	4798      	blx	r3
	return 0;
   99d6c:	2300      	movs	r3, #0
}
   99d6e:	4618      	mov	r0, r3
   99d70:	bd80      	pop	{r7, pc}
   99d72:	bf00      	nop
   99d74:	000982c9 	.word	0x000982c9

00099d78 <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   99d78:	b580      	push	{r7, lr}
   99d7a:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   99d7c:	4b02      	ldr	r3, [pc, #8]	; (99d88 <sv_cntrl_resetgreenalarm+0x10>)
   99d7e:	4798      	blx	r3
	return 0;
   99d80:	2300      	movs	r3, #0
}
   99d82:	4618      	mov	r0, r3
   99d84:	bd80      	pop	{r7, pc}
   99d86:	bf00      	nop
   99d88:	000982b5 	.word	0x000982b5

00099d8c <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   99d8c:	b580      	push	{r7, lr}
   99d8e:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   99d90:	4b02      	ldr	r3, [pc, #8]	; (99d9c <sv_cntrl_nobuzzer+0x10>)
   99d92:	4798      	blx	r3
	return 0;
   99d94:	2300      	movs	r3, #0
}
   99d96:	4618      	mov	r0, r3
   99d98:	bd80      	pop	{r7, pc}
   99d9a:	bf00      	nop
   99d9c:	000982dd 	.word	0x000982dd

00099da0 <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   99da0:	b580      	push	{r7, lr}
   99da2:	b082      	sub	sp, #8
   99da4:	af00      	add	r7, sp, #0
   99da6:	6078      	str	r0, [r7, #4]
   99da8:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   99daa:	6879      	ldr	r1, [r7, #4]
   99dac:	6838      	ldr	r0, [r7, #0]
   99dae:	4b03      	ldr	r3, [pc, #12]	; (99dbc <sv_cntrl_setoutput+0x1c>)
   99db0:	4798      	blx	r3
	return 0;
   99db2:	2300      	movs	r3, #0
}
   99db4:	4618      	mov	r0, r3
   99db6:	3708      	adds	r7, #8
   99db8:	46bd      	mov	sp, r7
   99dba:	bd80      	pop	{r7, pc}
   99dbc:	00096e19 	.word	0x00096e19

00099dc0 <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   99dc0:	b580      	push	{r7, lr}
   99dc2:	b082      	sub	sp, #8
   99dc4:	af00      	add	r7, sp, #0
   99dc6:	6078      	str	r0, [r7, #4]
   99dc8:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   99dca:	6879      	ldr	r1, [r7, #4]
   99dcc:	6838      	ldr	r0, [r7, #0]
   99dce:	4b03      	ldr	r3, [pc, #12]	; (99ddc <sv_cntrl_resetoutput+0x1c>)
   99dd0:	4798      	blx	r3
	
	return 0;
   99dd2:	2300      	movs	r3, #0
   99dd4:	4618      	mov	r0, r3
   99dd6:	3708      	adds	r7, #8
   99dd8:	46bd      	mov	sp, r7
   99dda:	bd80      	pop	{r7, pc}
   99ddc:	00096e9d 	.word	0x00096e9d

00099de0 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   99de0:	b580      	push	{r7, lr}
   99de2:	b084      	sub	sp, #16
   99de4:	af00      	add	r7, sp, #0
   99de6:	4603      	mov	r3, r0
   99de8:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   99dea:	79fb      	ldrb	r3, [r7, #7]
   99dec:	4618      	mov	r0, r3
   99dee:	4b04      	ldr	r3, [pc, #16]	; (99e00 <sv_console_bytedatawrite+0x20>)
   99df0:	4798      	blx	r3
   99df2:	4603      	mov	r3, r0
   99df4:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   99df6:	68fb      	ldr	r3, [r7, #12]
	
}
   99df8:	4618      	mov	r0, r3
   99dfa:	3710      	adds	r7, #16
   99dfc:	46bd      	mov	sp, r7
   99dfe:	bd80      	pop	{r7, pc}
   99e00:	00098a29 	.word	0x00098a29

00099e04 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   99e04:	b580      	push	{r7, lr}
   99e06:	b082      	sub	sp, #8
   99e08:	af00      	add	r7, sp, #0
   99e0a:	4603      	mov	r3, r0
   99e0c:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   99e0e:	79fb      	ldrb	r3, [r7, #7]
   99e10:	4618      	mov	r0, r3
   99e12:	4b03      	ldr	r3, [pc, #12]	; (99e20 <sv_console_receivedbyte+0x1c>)
   99e14:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   99e16:	2300      	movs	r3, #0
	
}
   99e18:	4618      	mov	r0, r3
   99e1a:	3708      	adds	r7, #8
   99e1c:	46bd      	mov	sp, r7
   99e1e:	bd80      	pop	{r7, pc}
   99e20:	0009bd69 	.word	0x0009bd69

00099e24 <sv_prop_startpropeo_aligning>:
uint16_t count = 0;

extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

void sv_prop_startpropeo_aligning(void)
{
   99e24:	b590      	push	{r4, r7, lr}
   99e26:	b085      	sub	sp, #20
   99e28:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   99e2a:	4b07      	ldr	r3, [pc, #28]	; (99e48 <sv_prop_startpropeo_aligning+0x24>)
   99e2c:	463c      	mov	r4, r7
   99e2e:	6818      	ldr	r0, [r3, #0]
   99e30:	6859      	ldr	r1, [r3, #4]
   99e32:	689a      	ldr	r2, [r3, #8]
   99e34:	68db      	ldr	r3, [r3, #12]
   99e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   99e38:	2100      	movs	r1, #0
   99e3a:	2001      	movs	r0, #1
   99e3c:	4b03      	ldr	r3, [pc, #12]	; (99e4c <sv_prop_startpropeo_aligning+0x28>)
   99e3e:	4798      	blx	r3

}
   99e40:	bf00      	nop
   99e42:	3714      	adds	r7, #20
   99e44:	46bd      	mov	sp, r7
   99e46:	bd90      	pop	{r4, r7, pc}
   99e48:	000a89e4 	.word	0x000a89e4
   99e4c:	000998fd 	.word	0x000998fd

00099e50 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   99e50:	b580      	push	{r7, lr}
   99e52:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,Treatdata[ID_setcond]);
   99e54:	4b04      	ldr	r3, [pc, #16]	; (99e68 <sv_prop_startmixing+0x18>)
   99e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   99e58:	b29b      	uxth	r3, r3
   99e5a:	4619      	mov	r1, r3
   99e5c:	2002      	movs	r0, #2
   99e5e:	4b03      	ldr	r3, [pc, #12]	; (99e6c <sv_prop_startmixing+0x1c>)
   99e60:	4798      	blx	r3
	
	}
	
}
   99e62:	bf00      	nop
   99e64:	bd80      	pop	{r7, pc}
   99e66:	bf00      	nop
   99e68:	20072654 	.word	0x20072654
   99e6c:	000998fd 	.word	0x000998fd

00099e70 <sv_prop_startacidpump>:



void sv_prop_startacidpump()
{
   99e70:	b580      	push	{r7, lr}
   99e72:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   99e74:	2100      	movs	r1, #0
   99e76:	200c      	movs	r0, #12
   99e78:	4b01      	ldr	r3, [pc, #4]	; (99e80 <sv_prop_startacidpump+0x10>)
   99e7a:	4798      	blx	r3
			
}
   99e7c:	bf00      	nop
   99e7e:	bd80      	pop	{r7, pc}
   99e80:	000998fd 	.word	0x000998fd

00099e84 <sv_prop_set_propo_ACIDrc>:
	
}


void sv_prop_set_propo_ACIDrc(uint16_t data)
{
   99e84:	b580      	push	{r7, lr}
   99e86:	b084      	sub	sp, #16
   99e88:	af00      	add	r7, sp, #0
   99e8a:	4603      	mov	r3, r0
   99e8c:	80fb      	strh	r3, [r7, #6]
	
	uint16_t rc_count = data;
   99e8e:	88fb      	ldrh	r3, [r7, #6]
   99e90:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_UPDATE_ACID_RC,data);                 // Gopal: Send Acid RC (speed) to Propo CPU via Can
   99e92:	88fb      	ldrh	r3, [r7, #6]
   99e94:	4619      	mov	r1, r3
   99e96:	200e      	movs	r0, #14
   99e98:	4b02      	ldr	r3, [pc, #8]	; (99ea4 <sv_prop_set_propo_ACIDrc+0x20>)
   99e9a:	4798      	blx	r3
}
   99e9c:	bf00      	nop
   99e9e:	3710      	adds	r7, #16
   99ea0:	46bd      	mov	sp, r7
   99ea2:	bd80      	pop	{r7, pc}
   99ea4:	000998fd 	.word	0x000998fd

00099ea8 <sv_prop_stopmixing>:
{
	uint16_t conductivity = data;
	SV_CAN_WRITE_PROPO( PROP_SET_CONDUCTIVITY,conductivity);      // Gopal: Send user set conducivity value to Propo CPU via Can
}
void sv_prop_stopmixing()
{
   99ea8:	b580      	push	{r7, lr}
   99eaa:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   99eac:	2100      	movs	r1, #0
   99eae:	2003      	movs	r0, #3
   99eb0:	4b01      	ldr	r3, [pc, #4]	; (99eb8 <sv_prop_stopmixing+0x10>)
   99eb2:	4798      	blx	r3
}
   99eb4:	bf00      	nop
   99eb6:	bd80      	pop	{r7, pc}
   99eb8:	000998fd 	.word	0x000998fd

00099ebc <sv_prop_start_disinfect_intake>:


void sv_prop_start_disinfect_intake(void)
{
   99ebc:	b580      	push	{r7, lr}
   99ebe:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   99ec0:	2100      	movs	r1, #0
   99ec2:	2004      	movs	r0, #4
   99ec4:	4b01      	ldr	r3, [pc, #4]	; (99ecc <sv_prop_start_disinfect_intake+0x10>)
   99ec6:	4798      	blx	r3

	}
	
}
   99ec8:	bf00      	nop
   99eca:	bd80      	pop	{r7, pc}
   99ecc:	000998fd 	.word	0x000998fd

00099ed0 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   99ed0:	b580      	push	{r7, lr}
   99ed2:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   99ed4:	2100      	movs	r1, #0
   99ed6:	2005      	movs	r0, #5
   99ed8:	4b01      	ldr	r3, [pc, #4]	; (99ee0 <sv_prop_stop_disinfect_intake+0x10>)
   99eda:	4798      	blx	r3

	}
	
}
   99edc:	bf00      	nop
   99ede:	bd80      	pop	{r7, pc}
   99ee0:	000998fd 	.word	0x000998fd

00099ee4 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   99ee4:	b580      	push	{r7, lr}
   99ee6:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   99ee8:	2100      	movs	r1, #0
   99eea:	2006      	movs	r0, #6
   99eec:	4b01      	ldr	r3, [pc, #4]	; (99ef4 <sv_prop_start_citricdisinfect_intake+0x10>)
   99eee:	4798      	blx	r3


	}
	
}
   99ef0:	bf00      	nop
   99ef2:	bd80      	pop	{r7, pc}
   99ef4:	000998fd 	.word	0x000998fd

00099ef8 <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   99ef8:	b580      	push	{r7, lr}
   99efa:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   99efc:	2100      	movs	r1, #0
   99efe:	2007      	movs	r0, #7
   99f00:	4b01      	ldr	r3, [pc, #4]	; (99f08 <sv_prop_stop_citricdisinfect_intake+0x10>)
   99f02:	4798      	blx	r3


	}
	
}
   99f04:	bf00      	nop
   99f06:	bd80      	pop	{r7, pc}
   99f08:	000998fd 	.word	0x000998fd

00099f0c <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   99f0c:	b580      	push	{r7, lr}
   99f0e:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   99f10:	2206      	movs	r2, #6
   99f12:	4905      	ldr	r1, [pc, #20]	; (99f28 <sv_prop_startopenfill+0x1c>)
   99f14:	2018      	movs	r0, #24
   99f16:	4b05      	ldr	r3, [pc, #20]	; (99f2c <sv_prop_startopenfill+0x20>)
   99f18:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   99f1a:	2100      	movs	r1, #0
   99f1c:	2008      	movs	r0, #8
   99f1e:	4b04      	ldr	r3, [pc, #16]	; (99f30 <sv_prop_startopenfill+0x24>)
   99f20:	4798      	blx	r3
}
   99f22:	bf00      	nop
   99f24:	bd80      	pop	{r7, pc}
   99f26:	bf00      	nop
   99f28:	000a89f4 	.word	0x000a89f4
   99f2c:	0009b805 	.word	0x0009b805
   99f30:	000998fd 	.word	0x000998fd

00099f34 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   99f34:	b580      	push	{r7, lr}
   99f36:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   99f38:	2206      	movs	r2, #6
   99f3a:	4905      	ldr	r1, [pc, #20]	; (99f50 <sv_prop_stopopenfill+0x1c>)
   99f3c:	2018      	movs	r0, #24
   99f3e:	4b05      	ldr	r3, [pc, #20]	; (99f54 <sv_prop_stopopenfill+0x20>)
   99f40:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   99f42:	2100      	movs	r1, #0
   99f44:	2009      	movs	r0, #9
   99f46:	4b04      	ldr	r3, [pc, #16]	; (99f58 <sv_prop_stopopenfill+0x24>)
   99f48:	4798      	blx	r3
}
   99f4a:	bf00      	nop
   99f4c:	bd80      	pop	{r7, pc}
   99f4e:	bf00      	nop
   99f50:	000a89fc 	.word	0x000a89fc
   99f54:	0009b805 	.word	0x0009b805
   99f58:	000998fd 	.word	0x000998fd

00099f5c <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   99f5c:	b580      	push	{r7, lr}
   99f5e:	b082      	sub	sp, #8
   99f60:	af00      	add	r7, sp, #0
   99f62:	4603      	mov	r3, r0
   99f64:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   99f66:	88fb      	ldrh	r3, [r7, #6]
   99f68:	4618      	mov	r0, r3
   99f6a:	4b03      	ldr	r3, [pc, #12]	; (99f78 <sv_cs_setpotvalue+0x1c>)
   99f6c:	4798      	blx	r3
		
		}
   99f6e:	bf00      	nop
   99f70:	4618      	mov	r0, r3
   99f72:	3708      	adds	r7, #8
   99f74:	46bd      	mov	sp, r7
   99f76:	bd80      	pop	{r7, pc}
   99f78:	00099fa1 	.word	0x00099fa1

00099f7c <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   99f7c:	b580      	push	{r7, lr}
   99f7e:	b082      	sub	sp, #8
   99f80:	af00      	add	r7, sp, #0
   99f82:	4603      	mov	r3, r0
   99f84:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   99f86:	88fb      	ldrh	r3, [r7, #6]
   99f88:	4619      	mov	r1, r3
   99f8a:	202f      	movs	r0, #47	; 0x2f
   99f8c:	4b03      	ldr	r3, [pc, #12]	; (99f9c <sv_cs_setcondpotvalue+0x20>)
   99f8e:	4798      	blx	r3
	
}
   99f90:	bf00      	nop
   99f92:	4618      	mov	r0, r3
   99f94:	3708      	adds	r7, #8
   99f96:	46bd      	mov	sp, r7
   99f98:	bd80      	pop	{r7, pc}
   99f9a:	bf00      	nop
   99f9c:	00097451 	.word	0x00097451

00099fa0 <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   99fa0:	b580      	push	{r7, lr}
   99fa2:	b084      	sub	sp, #16
   99fa4:	af00      	add	r7, sp, #0
   99fa6:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   99fa8:	687b      	ldr	r3, [r7, #4]
   99faa:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   99fac:	89fb      	ldrh	r3, [r7, #14]
   99fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
   99fb2:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   99fb4:	4b08      	ldr	r3, [pc, #32]	; (99fd8 <SV_CS_SET_POT+0x38>)
   99fb6:	f641 4202 	movw	r2, #7170	; 0x1c02
   99fba:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   99fbc:	89fb      	ldrh	r3, [r7, #14]
   99fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   99fc2:	b29a      	uxth	r2, r3
   99fc4:	4b04      	ldr	r3, [pc, #16]	; (99fd8 <SV_CS_SET_POT+0x38>)
   99fc6:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   99fc8:	2102      	movs	r1, #2
   99fca:	4803      	ldr	r0, [pc, #12]	; (99fd8 <SV_CS_SET_POT+0x38>)
   99fcc:	4b03      	ldr	r3, [pc, #12]	; (99fdc <SV_CS_SET_POT+0x3c>)
   99fce:	4798      	blx	r3
   99fd0:	bf00      	nop
   99fd2:	3710      	adds	r7, #16
   99fd4:	46bd      	mov	sp, r7
   99fd6:	bd80      	pop	{r7, pc}
   99fd8:	200727f8 	.word	0x200727f8
   99fdc:	00097acd 	.word	0x00097acd

00099fe0 <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   99fe0:	b580      	push	{r7, lr}
   99fe2:	b098      	sub	sp, #96	; 0x60
   99fe4:	af00      	add	r7, sp, #0
   99fe6:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   99fe8:	2300      	movs	r3, #0
   99fea:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sensor_struct1.FPcurrentstatus	= 1;
   99fee:	2301      	movs	r3, #1
   99ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.DGPstatus = 1;
   99ff2:	2301      	movs	r3, #1
   99ff4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   99ff8:	2001      	movs	r0, #1
   99ffa:	4b9f      	ldr	r3, [pc, #636]	; (9a278 <sv_status_getsystemstatus+0x298>)
   99ffc:	4798      	blx	r3
   99ffe:	4603      	mov	r3, r0
   9a000:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   9a002:	2002      	movs	r0, #2
   9a004:	4b9c      	ldr	r3, [pc, #624]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a006:	4798      	blx	r3
   9a008:	4603      	mov	r3, r0
   9a00a:	857b      	strh	r3, [r7, #42]	; 0x2a
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   9a00c:	2003      	movs	r0, #3
   9a00e:	4b9a      	ldr	r3, [pc, #616]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a010:	4798      	blx	r3
   9a012:	4603      	mov	r3, r0
   9a014:	85bb      	strh	r3, [r7, #44]	; 0x2c

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   9a016:	2005      	movs	r0, #5
   9a018:	4b97      	ldr	r3, [pc, #604]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a01a:	4798      	blx	r3
   9a01c:	4603      	mov	r3, r0
   9a01e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   9a020:	2006      	movs	r0, #6
   9a022:	4b95      	ldr	r3, [pc, #596]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a024:	4798      	blx	r3
   9a026:	4603      	mov	r3, r0
   9a028:	863b      	strh	r3, [r7, #48]	; 0x30
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   9a02a:	2007      	movs	r0, #7
   9a02c:	4b92      	ldr	r3, [pc, #584]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a02e:	4798      	blx	r3
   9a030:	4603      	mov	r3, r0
   9a032:	867b      	strh	r3, [r7, #50]	; 0x32
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   9a034:	200d      	movs	r0, #13
   9a036:	4b90      	ldr	r3, [pc, #576]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a038:	4798      	blx	r3
   9a03a:	4603      	mov	r3, r0
   9a03c:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   9a03e:	200e      	movs	r0, #14
   9a040:	4b8d      	ldr	r3, [pc, #564]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a042:	4798      	blx	r3
   9a044:	4603      	mov	r3, r0
   9a046:	873b      	strh	r3, [r7, #56]	; 0x38
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   9a048:	200b      	movs	r0, #11
   9a04a:	4b8b      	ldr	r3, [pc, #556]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a04c:	4798      	blx	r3
   9a04e:	4603      	mov	r3, r0
   9a050:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   9a052:	200c      	movs	r0, #12
   9a054:	4b88      	ldr	r3, [pc, #544]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a056:	4798      	blx	r3
   9a058:	4603      	mov	r3, r0
   9a05a:	87fb      	strh	r3, [r7, #62]	; 0x3e
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   9a05c:	2013      	movs	r0, #19
   9a05e:	4b86      	ldr	r3, [pc, #536]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a060:	4798      	blx	r3
   9a062:	4603      	mov	r3, r0
   9a064:	833b      	strh	r3, [r7, #24]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   9a066:	2014      	movs	r0, #20
   9a068:	4b83      	ldr	r3, [pc, #524]	; (9a278 <sv_status_getsystemstatus+0x298>)
   9a06a:	4798      	blx	r3
   9a06c:	4603      	mov	r3, r0
   9a06e:	837b      	strh	r3, [r7, #26]
	
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   9a070:	200e      	movs	r0, #14
   9a072:	4b82      	ldr	r3, [pc, #520]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a074:	4798      	blx	r3
   9a076:	4603      	mov	r3, r0
   9a078:	723b      	strb	r3, [r7, #8]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   9a07a:	2005      	movs	r0, #5
   9a07c:	4b7f      	ldr	r3, [pc, #508]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a07e:	4798      	blx	r3
   9a080:	4603      	mov	r3, r0
   9a082:	b29b      	uxth	r3, r3
   9a084:	817b      	strh	r3, [r7, #10]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   9a086:	200f      	movs	r0, #15
   9a088:	4b7c      	ldr	r3, [pc, #496]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a08a:	4798      	blx	r3
   9a08c:	4603      	mov	r3, r0
   9a08e:	b29b      	uxth	r3, r3
   9a090:	81bb      	strh	r3, [r7, #12]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   9a092:	2010      	movs	r0, #16
   9a094:	4b79      	ldr	r3, [pc, #484]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a096:	4798      	blx	r3
   9a098:	4603      	mov	r3, r0
   9a09a:	b29b      	uxth	r3, r3
   9a09c:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   9a09e:	200d      	movs	r0, #13
   9a0a0:	4b76      	ldr	r3, [pc, #472]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0a2:	4798      	blx	r3
   9a0a4:	4603      	mov	r3, r0
   9a0a6:	b29b      	uxth	r3, r3
   9a0a8:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   9a0aa:	2006      	movs	r0, #6
   9a0ac:	4b73      	ldr	r3, [pc, #460]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0ae:	4798      	blx	r3
   9a0b0:	4603      	mov	r3, r0
   9a0b2:	b29b      	uxth	r3, r3
   9a0b4:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   9a0b6:	2007      	movs	r0, #7
   9a0b8:	4b70      	ldr	r3, [pc, #448]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0ba:	4798      	blx	r3
   9a0bc:	4603      	mov	r3, r0
   9a0be:	b29b      	uxth	r3, r3
   9a0c0:	82fb      	strh	r3, [r7, #22]

	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   9a0c2:	201a      	movs	r0, #26
   9a0c4:	4b6d      	ldr	r3, [pc, #436]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0c6:	4798      	blx	r3
   9a0c8:	4603      	mov	r3, r0
   9a0ca:	b29b      	uxth	r3, r3
   9a0cc:	843b      	strh	r3, [r7, #32]
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   9a0ce:	2008      	movs	r0, #8
   9a0d0:	4b6a      	ldr	r3, [pc, #424]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0d2:	4798      	blx	r3
   9a0d4:	4603      	mov	r3, r0
   9a0d6:	b29b      	uxth	r3, r3
   9a0d8:	847b      	strh	r3, [r7, #34]	; 0x22
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   9a0da:	2003      	movs	r0, #3
   9a0dc:	4b67      	ldr	r3, [pc, #412]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0de:	4798      	blx	r3
   9a0e0:	4603      	mov	r3, r0
   9a0e2:	b29b      	uxth	r3, r3
   9a0e4:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   9a0e6:	2004      	movs	r0, #4
   9a0e8:	4b64      	ldr	r3, [pc, #400]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0ea:	4798      	blx	r3
   9a0ec:	4603      	mov	r3, r0
   9a0ee:	b29b      	uxth	r3, r3
   9a0f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   9a0f2:	2001      	movs	r0, #1
   9a0f4:	4b61      	ldr	r3, [pc, #388]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a0f6:	4798      	blx	r3
   9a0f8:	4603      	mov	r3, r0
   9a0fa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   9a0fe:	200c      	movs	r0, #12
   9a100:	4b5e      	ldr	r3, [pc, #376]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a102:	4798      	blx	r3
   9a104:	4603      	mov	r3, r0
   9a106:	b29b      	uxth	r3, r3
   9a108:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   9a10c:	201b      	movs	r0, #27
   9a10e:	4b5b      	ldr	r3, [pc, #364]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a110:	4798      	blx	r3
   9a112:	4603      	mov	r3, r0
   9a114:	b29b      	uxth	r3, r3
   9a116:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   9a11a:	2009      	movs	r0, #9
   9a11c:	4b57      	ldr	r3, [pc, #348]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a11e:	4798      	blx	r3
   9a120:	4603      	mov	r3, r0
   9a122:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   9a126:	200a      	movs	r0, #10
   9a128:	4b54      	ldr	r3, [pc, #336]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a12a:	4798      	blx	r3
   9a12c:	4603      	mov	r3, r0
   9a12e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   9a132:	2013      	movs	r0, #19
   9a134:	4b51      	ldr	r3, [pc, #324]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a136:	4798      	blx	r3
   9a138:	4603      	mov	r3, r0
   9a13a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   9a13e:	2014      	movs	r0, #20
   9a140:	4b4e      	ldr	r3, [pc, #312]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a142:	4798      	blx	r3
   9a144:	4603      	mov	r3, r0
   9a146:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   9a14a:	2015      	movs	r0, #21
   9a14c:	4b4b      	ldr	r3, [pc, #300]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a14e:	4798      	blx	r3
   9a150:	4603      	mov	r3, r0
   9a152:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   9a156:	2016      	movs	r0, #22
   9a158:	4b48      	ldr	r3, [pc, #288]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a15a:	4798      	blx	r3
   9a15c:	4603      	mov	r3, r0
   9a15e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   9a162:	2017      	movs	r0, #23
   9a164:	4b45      	ldr	r3, [pc, #276]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a166:	4798      	blx	r3
   9a168:	4603      	mov	r3, r0
   9a16a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   9a16e:	2018      	movs	r0, #24
   9a170:	4b42      	ldr	r3, [pc, #264]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a172:	4798      	blx	r3
   9a174:	4603      	mov	r3, r0
   9a176:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   9a17a:	2002      	movs	r0, #2
   9a17c:	4b3f      	ldr	r3, [pc, #252]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a17e:	4798      	blx	r3
   9a180:	4603      	mov	r3, r0
   9a182:	b29b      	uxth	r3, r3
   9a184:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	sensor_struct1.PowerFailure		= DD_RD_SENSIN(SV_SENSIN_ID36);
   9a188:	2024      	movs	r0, #36	; 0x24
   9a18a:	4b3c      	ldr	r3, [pc, #240]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a18c:	4798      	blx	r3
   9a18e:	4603      	mov	r3, r0
   9a190:	b29b      	uxth	r3, r3
   9a192:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	
	sensor_struct1.BP_ON_OFF = DD_RD_SENSIN(SV_SENSIN_ID25);
   9a196:	2019      	movs	r0, #25
   9a198:	4b38      	ldr	r3, [pc, #224]	; (9a27c <sv_status_getsystemstatus+0x29c>)
   9a19a:	4798      	blx	r3
   9a19c:	4603      	mov	r3, r0
   9a19e:	b29b      	uxth	r3, r3
   9a1a0:	823b      	strh	r3, [r7, #16]
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   9a1a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   9a1a4:	687b      	ldr	r3, [r7, #4]
   9a1a6:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   9a1a8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   9a1aa:	687b      	ldr	r3, [r7, #4]
   9a1ac:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   9a1ae:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   9a1b0:	687b      	ldr	r3, [r7, #4]
   9a1b2:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   9a1b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   9a1b6:	687b      	ldr	r3, [r7, #4]
   9a1b8:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   9a1ba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   9a1bc:	687b      	ldr	r3, [r7, #4]
   9a1be:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   9a1c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   9a1c2:	687b      	ldr	r3, [r7, #4]
   9a1c4:	865a      	strh	r2, [r3, #50]	; 0x32
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   9a1c6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   9a1c8:	687b      	ldr	r3, [r7, #4]
   9a1ca:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   9a1cc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   9a1ce:	687b      	ldr	r3, [r7, #4]
   9a1d0:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   9a1d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9a1d4:	687b      	ldr	r3, [r7, #4]
   9a1d6:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   9a1d8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   9a1da:	687b      	ldr	r3, [r7, #4]
   9a1dc:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   9a1de:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9a1e0:	687b      	ldr	r3, [r7, #4]
   9a1e2:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   9a1e4:	8b3a      	ldrh	r2, [r7, #24]
   9a1e6:	687b      	ldr	r3, [r7, #4]
   9a1e8:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   9a1ea:	8b7a      	ldrh	r2, [r7, #26]
   9a1ec:	687b      	ldr	r3, [r7, #4]
   9a1ee:	825a      	strh	r2, [r3, #18]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   9a1f0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   9a1f4:	687b      	ldr	r3, [r7, #4]
   9a1f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   9a1fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   9a1fc:	687b      	ldr	r3, [r7, #4]
   9a1fe:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   9a200:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
   9a204:	687b      	ldr	r3, [r7, #4]
   9a206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   9a20a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9a20c:	687b      	ldr	r3, [r7, #4]
   9a20e:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   9a210:	897a      	ldrh	r2, [r7, #10]
   9a212:	687b      	ldr	r3, [r7, #4]
   9a214:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   9a216:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   9a21a:	687b      	ldr	r3, [r7, #4]
   9a21c:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   9a21e:	8c3a      	ldrh	r2, [r7, #32]
   9a220:	687b      	ldr	r3, [r7, #4]
   9a222:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   9a224:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9a226:	687b      	ldr	r3, [r7, #4]
   9a228:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   9a22a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   9a22e:	687b      	ldr	r3, [r7, #4]
   9a230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   9a234:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   9a238:	687b      	ldr	r3, [r7, #4]
   9a23a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   9a23e:	7a3a      	ldrb	r2, [r7, #8]
   9a240:	687b      	ldr	r3, [r7, #4]
   9a242:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   9a244:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   9a248:	687b      	ldr	r3, [r7, #4]
   9a24a:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   9a24c:	8aba      	ldrh	r2, [r7, #20]
   9a24e:	687b      	ldr	r3, [r7, #4]
   9a250:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   9a252:	8afa      	ldrh	r2, [r7, #22]
   9a254:	687b      	ldr	r3, [r7, #4]
   9a256:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   9a258:	8a7a      	ldrh	r2, [r7, #18]
   9a25a:	687b      	ldr	r3, [r7, #4]
   9a25c:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   9a25e:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
   9a262:	687b      	ldr	r3, [r7, #4]
   9a264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   9a268:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   9a26c:	687b      	ldr	r3, [r7, #4]
   9a26e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	
	sensor_struct->BP_DEC =sensor_struct1.BP_DEC;
   9a272:	89fa      	ldrh	r2, [r7, #14]
   9a274:	687b      	ldr	r3, [r7, #4]
   9a276:	e003      	b.n	9a280 <sv_status_getsystemstatus+0x2a0>
   9a278:	00096a41 	.word	0x00096a41
   9a27c:	0009879d 	.word	0x0009879d
   9a280:	80da      	strh	r2, [r3, #6]
	sensor_struct->BP_INC = sensor_struct1. BP_INC; 
   9a282:	89ba      	ldrh	r2, [r7, #12]
   9a284:	687b      	ldr	r3, [r7, #4]
   9a286:	809a      	strh	r2, [r3, #4]
	sensor_struct->BP_ON_OFF = sensor_struct1. BP_ON_OFF; 
   9a288:	8a3a      	ldrh	r2, [r7, #16]
   9a28a:	687b      	ldr	r3, [r7, #4]
   9a28c:	811a      	strh	r2, [r3, #8]
	sensor_struct->PowerFailure = sensor_struct1.PowerFailure; 
   9a28e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9a292:	687b      	ldr	r3, [r7, #4]
   9a294:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	
	return 0;
   9a298:	2300      	movs	r3, #0

}
   9a29a:	4618      	mov	r0, r3
   9a29c:	3760      	adds	r7, #96	; 0x60
   9a29e:	46bd      	mov	sp, r7
   9a2a0:	bd80      	pop	{r7, pc}
   9a2a2:	bf00      	nop

0009a2a4 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   9a2a4:	b580      	push	{r7, lr}
   9a2a6:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   9a2a8:	4b0c      	ldr	r3, [pc, #48]	; (9a2dc <SV_SYSTEM_INIT+0x38>)
   9a2aa:	4798      	blx	r3
	DD_INIT_PIO();
   9a2ac:	4b0c      	ldr	r3, [pc, #48]	; (9a2e0 <SV_SYSTEM_INIT+0x3c>)
   9a2ae:	4798      	blx	r3
	DD_INIT_UART();
   9a2b0:	4b0c      	ldr	r3, [pc, #48]	; (9a2e4 <SV_SYSTEM_INIT+0x40>)
   9a2b2:	4798      	blx	r3
	DD_INIT_TIMER();
   9a2b4:	4b0c      	ldr	r3, [pc, #48]	; (9a2e8 <SV_SYSTEM_INIT+0x44>)
   9a2b6:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   9a2b8:	4b0c      	ldr	r3, [pc, #48]	; (9a2ec <SV_SYSTEM_INIT+0x48>)
   9a2ba:	4798      	blx	r3
	DD_INIT_NVM();
   9a2bc:	4b0c      	ldr	r3, [pc, #48]	; (9a2f0 <SV_SYSTEM_INIT+0x4c>)
   9a2be:	4798      	blx	r3
	DD_INIT_INT();
   9a2c0:	4b0c      	ldr	r3, [pc, #48]	; (9a2f4 <SV_SYSTEM_INIT+0x50>)
   9a2c2:	4798      	blx	r3
	DD_INIT_IIC();
   9a2c4:	4b0c      	ldr	r3, [pc, #48]	; (9a2f8 <SV_SYSTEM_INIT+0x54>)
   9a2c6:	4798      	blx	r3
	DD_INIT_SPI();
   9a2c8:	4b0c      	ldr	r3, [pc, #48]	; (9a2fc <SV_SYSTEM_INIT+0x58>)
   9a2ca:	4798      	blx	r3

    DD_INIT_CAN();
   9a2cc:	4b0c      	ldr	r3, [pc, #48]	; (9a300 <SV_SYSTEM_INIT+0x5c>)
   9a2ce:	4798      	blx	r3
// 		{
// 			//printf("error\n");
// 		}
// 	}
	
	SV_START_TIMER(0,1);
   9a2d0:	2101      	movs	r1, #1
   9a2d2:	2000      	movs	r0, #0
   9a2d4:	4b0b      	ldr	r3, [pc, #44]	; (9a304 <SV_SYSTEM_INIT+0x60>)
   9a2d6:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   9a2d8:	bf00      	nop
   9a2da:	bd80      	pop	{r7, pc}
   9a2dc:	00096b5d 	.word	0x00096b5d
   9a2e0:	00096b91 	.word	0x00096b91
   9a2e4:	00099869 	.word	0x00099869
   9a2e8:	00099361 	.word	0x00099361
   9a2ec:	00097801 	.word	0x00097801
   9a2f0:	000976ad 	.word	0x000976ad
   9a2f4:	000975d1 	.word	0x000975d1
   9a2f8:	0009741d 	.word	0x0009741d
   9a2fc:	00097c0d 	.word	0x00097c0d
   9a300:	000968d1 	.word	0x000968d1
   9a304:	0009a309 	.word	0x0009a309

0009a308 <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   9a308:	b580      	push	{r7, lr}
   9a30a:	b082      	sub	sp, #8
   9a30c:	af00      	add	r7, sp, #0
   9a30e:	4603      	mov	r3, r0
   9a310:	6039      	str	r1, [r7, #0]
   9a312:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   9a314:	683b      	ldr	r3, [r7, #0]
   9a316:	b2da      	uxtb	r2, r3
   9a318:	79fb      	ldrb	r3, [r7, #7]
   9a31a:	4611      	mov	r1, r2
   9a31c:	4618      	mov	r0, r3
   9a31e:	4b03      	ldr	r3, [pc, #12]	; (9a32c <SV_START_TIMER+0x24>)
   9a320:	4798      	blx	r3
	
	return 0;
   9a322:	2300      	movs	r3, #0
}
   9a324:	4618      	mov	r0, r3
   9a326:	3708      	adds	r7, #8
   9a328:	46bd      	mov	sp, r7
   9a32a:	bd80      	pop	{r7, pc}
   9a32c:	00098a75 	.word	0x00098a75

0009a330 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   9a330:	b480      	push	{r7}
   9a332:	b085      	sub	sp, #20
   9a334:	af00      	add	r7, sp, #0
   9a336:	4603      	mov	r3, r0
   9a338:	6039      	str	r1, [r7, #0]
   9a33a:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   9a33c:	79fb      	ldrb	r3, [r7, #7]
   9a33e:	3b01      	subs	r3, #1
   9a340:	4a08      	ldr	r2, [pc, #32]	; (9a364 <sv_nvmgetdata+0x34>)
   9a342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9a346:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   9a348:	7b3a      	ldrb	r2, [r7, #12]
   9a34a:	683b      	ldr	r3, [r7, #0]
   9a34c:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   9a34e:	683b      	ldr	r3, [r7, #0]
   9a350:	3301      	adds	r3, #1
   9a352:	7b7a      	ldrb	r2, [r7, #13]
   9a354:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9a356:	2300      	movs	r3, #0
}
   9a358:	4618      	mov	r0, r3
   9a35a:	3714      	adds	r7, #20
   9a35c:	46bd      	mov	sp, r7
   9a35e:	bc80      	pop	{r7}
   9a360:	4770      	bx	lr
   9a362:	bf00      	nop
   9a364:	20070b1c 	.word	0x20070b1c

0009a368 <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   9a368:	b480      	push	{r7}
   9a36a:	b083      	sub	sp, #12
   9a36c:	af00      	add	r7, sp, #0
   9a36e:	4603      	mov	r3, r0
   9a370:	6039      	str	r1, [r7, #0]
   9a372:	71fb      	strb	r3, [r7, #7]
   9a374:	4613      	mov	r3, r2
   9a376:	71bb      	strb	r3, [r7, #6]
// 	
// 			temp.byte[0] = pdata[0];
// 			temp.byte[1] = pdata[1];
// 			nvmarray[dataItemId-1] = temp.twobyte;
			
		return SV_OK;
   9a378:	2300      	movs	r3, #0
   9a37a:	4618      	mov	r0, r3
   9a37c:	370c      	adds	r7, #12
   9a37e:	46bd      	mov	sp, r7
   9a380:	bc80      	pop	{r7}
   9a382:	4770      	bx	lr

0009a384 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   9a384:	b580      	push	{r7, lr}
   9a386:	b086      	sub	sp, #24
   9a388:	af00      	add	r7, sp, #0
   9a38a:	60f8      	str	r0, [r7, #12]
   9a38c:	60b9      	str	r1, [r7, #8]
   9a38e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9a390:	2300      	movs	r3, #0
   9a392:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   9a394:	68fb      	ldr	r3, [r7, #12]
   9a396:	2b00      	cmp	r3, #0
   9a398:	d012      	beq.n	9a3c0 <_read+0x3c>
		return -1;
   9a39a:	f04f 33ff 	mov.w	r3, #4294967295
   9a39e:	e013      	b.n	9a3c8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   9a3a0:	4b0b      	ldr	r3, [pc, #44]	; (9a3d0 <_read+0x4c>)
   9a3a2:	681b      	ldr	r3, [r3, #0]
   9a3a4:	4a0b      	ldr	r2, [pc, #44]	; (9a3d4 <_read+0x50>)
   9a3a6:	6812      	ldr	r2, [r2, #0]
   9a3a8:	68b9      	ldr	r1, [r7, #8]
   9a3aa:	4610      	mov	r0, r2
   9a3ac:	4798      	blx	r3
		ptr++;
   9a3ae:	68bb      	ldr	r3, [r7, #8]
   9a3b0:	3301      	adds	r3, #1
   9a3b2:	60bb      	str	r3, [r7, #8]
		nChars++;
   9a3b4:	697b      	ldr	r3, [r7, #20]
   9a3b6:	3301      	adds	r3, #1
   9a3b8:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   9a3ba:	687b      	ldr	r3, [r7, #4]
   9a3bc:	3b01      	subs	r3, #1
   9a3be:	607b      	str	r3, [r7, #4]
   9a3c0:	687b      	ldr	r3, [r7, #4]
   9a3c2:	2b00      	cmp	r3, #0
   9a3c4:	dcec      	bgt.n	9a3a0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   9a3c6:	697b      	ldr	r3, [r7, #20]
}
   9a3c8:	4618      	mov	r0, r3
   9a3ca:	3718      	adds	r7, #24
   9a3cc:	46bd      	mov	sp, r7
   9a3ce:	bd80      	pop	{r7, pc}
   9a3d0:	20072800 	.word	0x20072800
   9a3d4:	20072808 	.word	0x20072808

0009a3d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   9a3d8:	b580      	push	{r7, lr}
   9a3da:	b086      	sub	sp, #24
   9a3dc:	af00      	add	r7, sp, #0
   9a3de:	60f8      	str	r0, [r7, #12]
   9a3e0:	60b9      	str	r1, [r7, #8]
   9a3e2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9a3e4:	2300      	movs	r3, #0
   9a3e6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   9a3e8:	68fb      	ldr	r3, [r7, #12]
   9a3ea:	2b01      	cmp	r3, #1
   9a3ec:	d01e      	beq.n	9a42c <_write+0x54>
   9a3ee:	68fb      	ldr	r3, [r7, #12]
   9a3f0:	2b02      	cmp	r3, #2
   9a3f2:	d01b      	beq.n	9a42c <_write+0x54>
   9a3f4:	68fb      	ldr	r3, [r7, #12]
   9a3f6:	2b03      	cmp	r3, #3
   9a3f8:	d018      	beq.n	9a42c <_write+0x54>
		return -1;
   9a3fa:	f04f 33ff 	mov.w	r3, #4294967295
   9a3fe:	e019      	b.n	9a434 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   9a400:	4b0e      	ldr	r3, [pc, #56]	; (9a43c <_write+0x64>)
   9a402:	681a      	ldr	r2, [r3, #0]
   9a404:	4b0e      	ldr	r3, [pc, #56]	; (9a440 <_write+0x68>)
   9a406:	6818      	ldr	r0, [r3, #0]
   9a408:	68bb      	ldr	r3, [r7, #8]
   9a40a:	1c59      	adds	r1, r3, #1
   9a40c:	60b9      	str	r1, [r7, #8]
   9a40e:	781b      	ldrb	r3, [r3, #0]
   9a410:	4619      	mov	r1, r3
   9a412:	4790      	blx	r2
   9a414:	4603      	mov	r3, r0
   9a416:	2b00      	cmp	r3, #0
   9a418:	da02      	bge.n	9a420 <_write+0x48>
			return -1;
   9a41a:	f04f 33ff 	mov.w	r3, #4294967295
   9a41e:	e009      	b.n	9a434 <_write+0x5c>
		}
		++nChars;
   9a420:	697b      	ldr	r3, [r7, #20]
   9a422:	3301      	adds	r3, #1
   9a424:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9a426:	687b      	ldr	r3, [r7, #4]
   9a428:	3b01      	subs	r3, #1
   9a42a:	607b      	str	r3, [r7, #4]
   9a42c:	687b      	ldr	r3, [r7, #4]
   9a42e:	2b00      	cmp	r3, #0
   9a430:	d1e6      	bne.n	9a400 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   9a432:	697b      	ldr	r3, [r7, #20]
}
   9a434:	4618      	mov	r0, r3
   9a436:	3718      	adds	r7, #24
   9a438:	46bd      	mov	sp, r7
   9a43a:	bd80      	pop	{r7, pc}
   9a43c:	20072804 	.word	0x20072804
   9a440:	20072808 	.word	0x20072808

0009a444 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   9a444:	b580      	push	{r7, lr}
   9a446:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9a448:	4b05      	ldr	r3, [pc, #20]	; (9a460 <board_init+0x1c>)
   9a44a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9a44e:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   9a450:	4a04      	ldr	r2, [pc, #16]	; (9a464 <board_init+0x20>)
   9a452:	f44f 7140 	mov.w	r1, #768	; 0x300
   9a456:	4804      	ldr	r0, [pc, #16]	; (9a468 <board_init+0x24>)
   9a458:	4b04      	ldr	r3, [pc, #16]	; (9a46c <board_init+0x28>)
   9a45a:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   9a45c:	bf00      	nop
   9a45e:	bd80      	pop	{r7, pc}
   9a460:	400e1a50 	.word	0x400e1a50
   9a464:	08000001 	.word	0x08000001
   9a468:	400e0e00 	.word	0x400e0e00
   9a46c:	0009a789 	.word	0x0009a789

0009a470 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   9a470:	b480      	push	{r7}
   9a472:	b085      	sub	sp, #20
   9a474:	af00      	add	r7, sp, #0
   9a476:	60f8      	str	r0, [r7, #12]
   9a478:	60b9      	str	r1, [r7, #8]
   9a47a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   9a47c:	687b      	ldr	r3, [r7, #4]
   9a47e:	2b00      	cmp	r3, #0
   9a480:	d003      	beq.n	9a48a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   9a482:	68fb      	ldr	r3, [r7, #12]
   9a484:	68ba      	ldr	r2, [r7, #8]
   9a486:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   9a488:	e002      	b.n	9a490 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   9a48a:	68fb      	ldr	r3, [r7, #12]
   9a48c:	68ba      	ldr	r2, [r7, #8]
   9a48e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   9a490:	bf00      	nop
   9a492:	3714      	adds	r7, #20
   9a494:	46bd      	mov	sp, r7
   9a496:	bc80      	pop	{r7}
   9a498:	4770      	bx	lr
   9a49a:	bf00      	nop

0009a49c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   9a49c:	b480      	push	{r7}
   9a49e:	b087      	sub	sp, #28
   9a4a0:	af00      	add	r7, sp, #0
   9a4a2:	60f8      	str	r0, [r7, #12]
   9a4a4:	60b9      	str	r1, [r7, #8]
   9a4a6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   9a4a8:	68fb      	ldr	r3, [r7, #12]
   9a4aa:	687a      	ldr	r2, [r7, #4]
   9a4ac:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9a4ae:	68bb      	ldr	r3, [r7, #8]
   9a4b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a4b4:	d01f      	beq.n	9a4f6 <pio_set_peripheral+0x5a>
   9a4b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a4ba:	d805      	bhi.n	9a4c8 <pio_set_peripheral+0x2c>
   9a4bc:	2b00      	cmp	r3, #0
   9a4be:	d027      	beq.n	9a510 <pio_set_peripheral+0x74>
   9a4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a4c4:	d00a      	beq.n	9a4dc <pio_set_peripheral+0x40>
   9a4c6:	e01f      	b.n	9a508 <pio_set_peripheral+0x6c>
   9a4c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a4cc:	d020      	beq.n	9a510 <pio_set_peripheral+0x74>
   9a4ce:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a4d2:	d01d      	beq.n	9a510 <pio_set_peripheral+0x74>
   9a4d4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a4d8:	d01a      	beq.n	9a510 <pio_set_peripheral+0x74>
   9a4da:	e015      	b.n	9a508 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9a4dc:	68fb      	ldr	r3, [r7, #12]
   9a4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9a4e0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9a4e2:	68fb      	ldr	r3, [r7, #12]
   9a4e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9a4e6:	687b      	ldr	r3, [r7, #4]
   9a4e8:	43d9      	mvns	r1, r3
   9a4ea:	697b      	ldr	r3, [r7, #20]
   9a4ec:	400b      	ands	r3, r1
   9a4ee:	401a      	ands	r2, r3
   9a4f0:	68fb      	ldr	r3, [r7, #12]
   9a4f2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9a4f4:	e008      	b.n	9a508 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   9a4f6:	68fb      	ldr	r3, [r7, #12]
   9a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9a4fa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9a4fc:	687a      	ldr	r2, [r7, #4]
   9a4fe:	697b      	ldr	r3, [r7, #20]
   9a500:	431a      	orrs	r2, r3
   9a502:	68fb      	ldr	r3, [r7, #12]
   9a504:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9a506:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   9a508:	68fb      	ldr	r3, [r7, #12]
   9a50a:	687a      	ldr	r2, [r7, #4]
   9a50c:	605a      	str	r2, [r3, #4]
   9a50e:	e000      	b.n	9a512 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   9a510:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   9a512:	371c      	adds	r7, #28
   9a514:	46bd      	mov	sp, r7
   9a516:	bc80      	pop	{r7}
   9a518:	4770      	bx	lr
   9a51a:	bf00      	nop

0009a51c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9a51c:	b580      	push	{r7, lr}
   9a51e:	b084      	sub	sp, #16
   9a520:	af00      	add	r7, sp, #0
   9a522:	60f8      	str	r0, [r7, #12]
   9a524:	60b9      	str	r1, [r7, #8]
   9a526:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   9a528:	68b9      	ldr	r1, [r7, #8]
   9a52a:	68f8      	ldr	r0, [r7, #12]
   9a52c:	4b19      	ldr	r3, [pc, #100]	; (9a594 <pio_set_input+0x78>)
   9a52e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   9a530:	687b      	ldr	r3, [r7, #4]
   9a532:	f003 0301 	and.w	r3, r3, #1
   9a536:	461a      	mov	r2, r3
   9a538:	68b9      	ldr	r1, [r7, #8]
   9a53a:	68f8      	ldr	r0, [r7, #12]
   9a53c:	4b16      	ldr	r3, [pc, #88]	; (9a598 <pio_set_input+0x7c>)
   9a53e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   9a540:	687b      	ldr	r3, [r7, #4]
   9a542:	f003 030a 	and.w	r3, r3, #10
   9a546:	2b00      	cmp	r3, #0
   9a548:	d003      	beq.n	9a552 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   9a54a:	68fb      	ldr	r3, [r7, #12]
   9a54c:	68ba      	ldr	r2, [r7, #8]
   9a54e:	621a      	str	r2, [r3, #32]
   9a550:	e002      	b.n	9a558 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   9a552:	68fb      	ldr	r3, [r7, #12]
   9a554:	68ba      	ldr	r2, [r7, #8]
   9a556:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   9a558:	687b      	ldr	r3, [r7, #4]
   9a55a:	f003 0302 	and.w	r3, r3, #2
   9a55e:	2b00      	cmp	r3, #0
   9a560:	d004      	beq.n	9a56c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   9a562:	68fb      	ldr	r3, [r7, #12]
   9a564:	68ba      	ldr	r2, [r7, #8]
   9a566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   9a56a:	e008      	b.n	9a57e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   9a56c:	687b      	ldr	r3, [r7, #4]
   9a56e:	f003 0308 	and.w	r3, r3, #8
   9a572:	2b00      	cmp	r3, #0
   9a574:	d003      	beq.n	9a57e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9a576:	68fb      	ldr	r3, [r7, #12]
   9a578:	68ba      	ldr	r2, [r7, #8]
   9a57a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   9a57e:	68fb      	ldr	r3, [r7, #12]
   9a580:	68ba      	ldr	r2, [r7, #8]
   9a582:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9a584:	68fb      	ldr	r3, [r7, #12]
   9a586:	68ba      	ldr	r2, [r7, #8]
   9a588:	601a      	str	r2, [r3, #0]
}
   9a58a:	bf00      	nop
   9a58c:	3710      	adds	r7, #16
   9a58e:	46bd      	mov	sp, r7
   9a590:	bd80      	pop	{r7, pc}
   9a592:	bf00      	nop
   9a594:	0009a601 	.word	0x0009a601
   9a598:	0009a471 	.word	0x0009a471

0009a59c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   9a59c:	b580      	push	{r7, lr}
   9a59e:	b084      	sub	sp, #16
   9a5a0:	af00      	add	r7, sp, #0
   9a5a2:	60f8      	str	r0, [r7, #12]
   9a5a4:	60b9      	str	r1, [r7, #8]
   9a5a6:	607a      	str	r2, [r7, #4]
   9a5a8:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   9a5aa:	68b9      	ldr	r1, [r7, #8]
   9a5ac:	68f8      	ldr	r0, [r7, #12]
   9a5ae:	4b12      	ldr	r3, [pc, #72]	; (9a5f8 <pio_set_output+0x5c>)
   9a5b0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9a5b2:	69ba      	ldr	r2, [r7, #24]
   9a5b4:	68b9      	ldr	r1, [r7, #8]
   9a5b6:	68f8      	ldr	r0, [r7, #12]
   9a5b8:	4b10      	ldr	r3, [pc, #64]	; (9a5fc <pio_set_output+0x60>)
   9a5ba:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   9a5bc:	683b      	ldr	r3, [r7, #0]
   9a5be:	2b00      	cmp	r3, #0
   9a5c0:	d003      	beq.n	9a5ca <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9a5c2:	68fb      	ldr	r3, [r7, #12]
   9a5c4:	68ba      	ldr	r2, [r7, #8]
   9a5c6:	651a      	str	r2, [r3, #80]	; 0x50
   9a5c8:	e002      	b.n	9a5d0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   9a5ca:	68fb      	ldr	r3, [r7, #12]
   9a5cc:	68ba      	ldr	r2, [r7, #8]
   9a5ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9a5d0:	687b      	ldr	r3, [r7, #4]
   9a5d2:	2b00      	cmp	r3, #0
   9a5d4:	d003      	beq.n	9a5de <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   9a5d6:	68fb      	ldr	r3, [r7, #12]
   9a5d8:	68ba      	ldr	r2, [r7, #8]
   9a5da:	631a      	str	r2, [r3, #48]	; 0x30
   9a5dc:	e002      	b.n	9a5e4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9a5de:	68fb      	ldr	r3, [r7, #12]
   9a5e0:	68ba      	ldr	r2, [r7, #8]
   9a5e2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   9a5e4:	68fb      	ldr	r3, [r7, #12]
   9a5e6:	68ba      	ldr	r2, [r7, #8]
   9a5e8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9a5ea:	68fb      	ldr	r3, [r7, #12]
   9a5ec:	68ba      	ldr	r2, [r7, #8]
   9a5ee:	601a      	str	r2, [r3, #0]
}
   9a5f0:	bf00      	nop
   9a5f2:	3710      	adds	r7, #16
   9a5f4:	46bd      	mov	sp, r7
   9a5f6:	bd80      	pop	{r7, pc}
   9a5f8:	0009a601 	.word	0x0009a601
   9a5fc:	0009a471 	.word	0x0009a471

0009a600 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9a600:	b480      	push	{r7}
   9a602:	b083      	sub	sp, #12
   9a604:	af00      	add	r7, sp, #0
   9a606:	6078      	str	r0, [r7, #4]
   9a608:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   9a60a:	687b      	ldr	r3, [r7, #4]
   9a60c:	683a      	ldr	r2, [r7, #0]
   9a60e:	645a      	str	r2, [r3, #68]	; 0x44
}
   9a610:	bf00      	nop
   9a612:	370c      	adds	r7, #12
   9a614:	46bd      	mov	sp, r7
   9a616:	bc80      	pop	{r7}
   9a618:	4770      	bx	lr
   9a61a:	bf00      	nop

0009a61c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   9a61c:	b480      	push	{r7}
   9a61e:	b083      	sub	sp, #12
   9a620:	af00      	add	r7, sp, #0
   9a622:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9a624:	687b      	ldr	r3, [r7, #4]
   9a626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   9a628:	4618      	mov	r0, r3
   9a62a:	370c      	adds	r7, #12
   9a62c:	46bd      	mov	sp, r7
   9a62e:	bc80      	pop	{r7}
   9a630:	4770      	bx	lr
   9a632:	bf00      	nop

0009a634 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9a634:	b480      	push	{r7}
   9a636:	b083      	sub	sp, #12
   9a638:	af00      	add	r7, sp, #0
   9a63a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   9a63c:	687b      	ldr	r3, [r7, #4]
   9a63e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   9a640:	4618      	mov	r0, r3
   9a642:	370c      	adds	r7, #12
   9a644:	46bd      	mov	sp, r7
   9a646:	bc80      	pop	{r7}
   9a648:	4770      	bx	lr
   9a64a:	bf00      	nop

0009a64c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   9a64c:	b590      	push	{r4, r7, lr}
   9a64e:	b087      	sub	sp, #28
   9a650:	af02      	add	r7, sp, #8
   9a652:	6078      	str	r0, [r7, #4]
   9a654:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9a656:	687b      	ldr	r3, [r7, #4]
   9a658:	095b      	lsrs	r3, r3, #5
   9a65a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9a65e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9a662:	025b      	lsls	r3, r3, #9
   9a664:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9a666:	683b      	ldr	r3, [r7, #0]
   9a668:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9a66c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a670:	d046      	beq.n	9a700 <pio_configure_pin+0xb4>
   9a672:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a676:	d806      	bhi.n	9a686 <pio_configure_pin+0x3a>
   9a678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a67c:	d00a      	beq.n	9a694 <pio_configure_pin+0x48>
   9a67e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a682:	d022      	beq.n	9a6ca <pio_configure_pin+0x7e>
   9a684:	e070      	b.n	9a768 <pio_configure_pin+0x11c>
   9a686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a68a:	d045      	beq.n	9a718 <pio_configure_pin+0xcc>
   9a68c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a690:	d042      	beq.n	9a718 <pio_configure_pin+0xcc>
   9a692:	e069      	b.n	9a768 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9a694:	687b      	ldr	r3, [r7, #4]
   9a696:	f003 031f 	and.w	r3, r3, #31
   9a69a:	2201      	movs	r2, #1
   9a69c:	fa02 f303 	lsl.w	r3, r2, r3
   9a6a0:	461a      	mov	r2, r3
   9a6a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9a6a6:	68f8      	ldr	r0, [r7, #12]
   9a6a8:	4b33      	ldr	r3, [pc, #204]	; (9a778 <pio_configure_pin+0x12c>)
   9a6aa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9a6ac:	687b      	ldr	r3, [r7, #4]
   9a6ae:	f003 031f 	and.w	r3, r3, #31
   9a6b2:	2201      	movs	r2, #1
   9a6b4:	fa02 f303 	lsl.w	r3, r2, r3
   9a6b8:	4619      	mov	r1, r3
   9a6ba:	683b      	ldr	r3, [r7, #0]
   9a6bc:	f003 0301 	and.w	r3, r3, #1
   9a6c0:	461a      	mov	r2, r3
   9a6c2:	68f8      	ldr	r0, [r7, #12]
   9a6c4:	4b2d      	ldr	r3, [pc, #180]	; (9a77c <pio_configure_pin+0x130>)
   9a6c6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9a6c8:	e050      	b.n	9a76c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   9a6ca:	687b      	ldr	r3, [r7, #4]
   9a6cc:	f003 031f 	and.w	r3, r3, #31
   9a6d0:	2201      	movs	r2, #1
   9a6d2:	fa02 f303 	lsl.w	r3, r2, r3
   9a6d6:	461a      	mov	r2, r3
   9a6d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9a6dc:	68f8      	ldr	r0, [r7, #12]
   9a6de:	4b26      	ldr	r3, [pc, #152]	; (9a778 <pio_configure_pin+0x12c>)
   9a6e0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9a6e2:	687b      	ldr	r3, [r7, #4]
   9a6e4:	f003 031f 	and.w	r3, r3, #31
   9a6e8:	2201      	movs	r2, #1
   9a6ea:	fa02 f303 	lsl.w	r3, r2, r3
   9a6ee:	4619      	mov	r1, r3
   9a6f0:	683b      	ldr	r3, [r7, #0]
   9a6f2:	f003 0301 	and.w	r3, r3, #1
   9a6f6:	461a      	mov	r2, r3
   9a6f8:	68f8      	ldr	r0, [r7, #12]
   9a6fa:	4b20      	ldr	r3, [pc, #128]	; (9a77c <pio_configure_pin+0x130>)
   9a6fc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9a6fe:	e035      	b.n	9a76c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   9a700:	687b      	ldr	r3, [r7, #4]
   9a702:	f003 031f 	and.w	r3, r3, #31
   9a706:	2201      	movs	r2, #1
   9a708:	fa02 f303 	lsl.w	r3, r2, r3
   9a70c:	683a      	ldr	r2, [r7, #0]
   9a70e:	4619      	mov	r1, r3
   9a710:	68f8      	ldr	r0, [r7, #12]
   9a712:	4b1b      	ldr	r3, [pc, #108]	; (9a780 <pio_configure_pin+0x134>)
   9a714:	4798      	blx	r3
		break;
   9a716:	e029      	b.n	9a76c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a718:	687b      	ldr	r3, [r7, #4]
   9a71a:	f003 031f 	and.w	r3, r3, #31
   9a71e:	2201      	movs	r2, #1
   9a720:	fa02 f303 	lsl.w	r3, r2, r3
   9a724:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9a726:	683b      	ldr	r3, [r7, #0]
   9a728:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a72c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a730:	bf0c      	ite	eq
   9a732:	2301      	moveq	r3, #1
   9a734:	2300      	movne	r3, #0
   9a736:	b2db      	uxtb	r3, r3
   9a738:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9a73a:	683b      	ldr	r3, [r7, #0]
   9a73c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a740:	2b00      	cmp	r3, #0
   9a742:	bf14      	ite	ne
   9a744:	2301      	movne	r3, #1
   9a746:	2300      	moveq	r3, #0
   9a748:	b2db      	uxtb	r3, r3
   9a74a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9a74c:	683b      	ldr	r3, [r7, #0]
   9a74e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a752:	2b00      	cmp	r3, #0
   9a754:	bf14      	ite	ne
   9a756:	2301      	movne	r3, #1
   9a758:	2300      	moveq	r3, #0
   9a75a:	b2db      	uxtb	r3, r3
   9a75c:	9300      	str	r3, [sp, #0]
   9a75e:	4603      	mov	r3, r0
   9a760:	68f8      	ldr	r0, [r7, #12]
   9a762:	4c08      	ldr	r4, [pc, #32]	; (9a784 <pio_configure_pin+0x138>)
   9a764:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9a766:	e001      	b.n	9a76c <pio_configure_pin+0x120>

	default:
		return 0;
   9a768:	2300      	movs	r3, #0
   9a76a:	e000      	b.n	9a76e <pio_configure_pin+0x122>
	}

	return 1;
   9a76c:	2301      	movs	r3, #1
}
   9a76e:	4618      	mov	r0, r3
   9a770:	3714      	adds	r7, #20
   9a772:	46bd      	mov	sp, r7
   9a774:	bd90      	pop	{r4, r7, pc}
   9a776:	bf00      	nop
   9a778:	0009a49d 	.word	0x0009a49d
   9a77c:	0009a471 	.word	0x0009a471
   9a780:	0009a51d 	.word	0x0009a51d
   9a784:	0009a59d 	.word	0x0009a59d

0009a788 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   9a788:	b590      	push	{r4, r7, lr}
   9a78a:	b087      	sub	sp, #28
   9a78c:	af02      	add	r7, sp, #8
   9a78e:	60f8      	str	r0, [r7, #12]
   9a790:	60b9      	str	r1, [r7, #8]
   9a792:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9a794:	687b      	ldr	r3, [r7, #4]
   9a796:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9a79a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a79e:	d026      	beq.n	9a7ee <pio_configure_pin_group+0x66>
   9a7a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a7a4:	d806      	bhi.n	9a7b4 <pio_configure_pin_group+0x2c>
   9a7a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a7aa:	d00a      	beq.n	9a7c2 <pio_configure_pin_group+0x3a>
   9a7ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a7b0:	d00e      	beq.n	9a7d0 <pio_configure_pin_group+0x48>
   9a7b2:	e044      	b.n	9a83e <pio_configure_pin_group+0xb6>
   9a7b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a7b8:	d01f      	beq.n	9a7fa <pio_configure_pin_group+0x72>
   9a7ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a7be:	d01c      	beq.n	9a7fa <pio_configure_pin_group+0x72>
   9a7c0:	e03d      	b.n	9a83e <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   9a7c2:	68ba      	ldr	r2, [r7, #8]
   9a7c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9a7c8:	68f8      	ldr	r0, [r7, #12]
   9a7ca:	4b20      	ldr	r3, [pc, #128]	; (9a84c <pio_configure_pin_group+0xc4>)
   9a7cc:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9a7ce:	e038      	b.n	9a842 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   9a7d0:	68ba      	ldr	r2, [r7, #8]
   9a7d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9a7d6:	68f8      	ldr	r0, [r7, #12]
   9a7d8:	4b1c      	ldr	r3, [pc, #112]	; (9a84c <pio_configure_pin_group+0xc4>)
   9a7da:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9a7dc:	687b      	ldr	r3, [r7, #4]
   9a7de:	f003 0301 	and.w	r3, r3, #1
   9a7e2:	461a      	mov	r2, r3
   9a7e4:	68b9      	ldr	r1, [r7, #8]
   9a7e6:	68f8      	ldr	r0, [r7, #12]
   9a7e8:	4b19      	ldr	r3, [pc, #100]	; (9a850 <pio_configure_pin_group+0xc8>)
   9a7ea:	4798      	blx	r3
		break;
   9a7ec:	e029      	b.n	9a842 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9a7ee:	687a      	ldr	r2, [r7, #4]
   9a7f0:	68b9      	ldr	r1, [r7, #8]
   9a7f2:	68f8      	ldr	r0, [r7, #12]
   9a7f4:	4b17      	ldr	r3, [pc, #92]	; (9a854 <pio_configure_pin_group+0xcc>)
   9a7f6:	4798      	blx	r3
		break;
   9a7f8:	e023      	b.n	9a842 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9a7fa:	687b      	ldr	r3, [r7, #4]
   9a7fc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9a800:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a804:	bf0c      	ite	eq
   9a806:	2301      	moveq	r3, #1
   9a808:	2300      	movne	r3, #0
   9a80a:	b2db      	uxtb	r3, r3
   9a80c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9a80e:	687b      	ldr	r3, [r7, #4]
   9a810:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9a814:	2b00      	cmp	r3, #0
   9a816:	bf14      	ite	ne
   9a818:	2301      	movne	r3, #1
   9a81a:	2300      	moveq	r3, #0
   9a81c:	b2db      	uxtb	r3, r3
   9a81e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9a820:	687b      	ldr	r3, [r7, #4]
   9a822:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9a826:	2b00      	cmp	r3, #0
   9a828:	bf14      	ite	ne
   9a82a:	2301      	movne	r3, #1
   9a82c:	2300      	moveq	r3, #0
   9a82e:	b2db      	uxtb	r3, r3
   9a830:	9300      	str	r3, [sp, #0]
   9a832:	460b      	mov	r3, r1
   9a834:	68b9      	ldr	r1, [r7, #8]
   9a836:	68f8      	ldr	r0, [r7, #12]
   9a838:	4c07      	ldr	r4, [pc, #28]	; (9a858 <pio_configure_pin_group+0xd0>)
   9a83a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9a83c:	e001      	b.n	9a842 <pio_configure_pin_group+0xba>

	default:
		return 0;
   9a83e:	2300      	movs	r3, #0
   9a840:	e000      	b.n	9a844 <pio_configure_pin_group+0xbc>
	}

	return 1;
   9a842:	2301      	movs	r3, #1
}
   9a844:	4618      	mov	r0, r3
   9a846:	3714      	adds	r7, #20
   9a848:	46bd      	mov	sp, r7
   9a84a:	bd90      	pop	{r4, r7, pc}
   9a84c:	0009a49d 	.word	0x0009a49d
   9a850:	0009a471 	.word	0x0009a471
   9a854:	0009a51d 	.word	0x0009a51d
   9a858:	0009a59d 	.word	0x0009a59d

0009a85c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   9a85c:	b580      	push	{r7, lr}
   9a85e:	b084      	sub	sp, #16
   9a860:	af00      	add	r7, sp, #0
   9a862:	6078      	str	r0, [r7, #4]
   9a864:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9a866:	6878      	ldr	r0, [r7, #4]
   9a868:	4b24      	ldr	r3, [pc, #144]	; (9a8fc <pio_handler_process+0xa0>)
   9a86a:	4798      	blx	r3
   9a86c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   9a86e:	6878      	ldr	r0, [r7, #4]
   9a870:	4b23      	ldr	r3, [pc, #140]	; (9a900 <pio_handler_process+0xa4>)
   9a872:	4798      	blx	r3
   9a874:	4602      	mov	r2, r0
   9a876:	68fb      	ldr	r3, [r7, #12]
   9a878:	4013      	ands	r3, r2
   9a87a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   9a87c:	68fb      	ldr	r3, [r7, #12]
   9a87e:	2b00      	cmp	r3, #0
   9a880:	d037      	beq.n	9a8f2 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   9a882:	2300      	movs	r3, #0
   9a884:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   9a886:	e031      	b.n	9a8ec <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   9a888:	4a1e      	ldr	r2, [pc, #120]	; (9a904 <pio_handler_process+0xa8>)
   9a88a:	68bb      	ldr	r3, [r7, #8]
   9a88c:	011b      	lsls	r3, r3, #4
   9a88e:	4413      	add	r3, r2
   9a890:	681a      	ldr	r2, [r3, #0]
   9a892:	683b      	ldr	r3, [r7, #0]
   9a894:	429a      	cmp	r2, r3
   9a896:	d126      	bne.n	9a8e6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9a898:	4a1a      	ldr	r2, [pc, #104]	; (9a904 <pio_handler_process+0xa8>)
   9a89a:	68bb      	ldr	r3, [r7, #8]
   9a89c:	011b      	lsls	r3, r3, #4
   9a89e:	4413      	add	r3, r2
   9a8a0:	3304      	adds	r3, #4
   9a8a2:	681a      	ldr	r2, [r3, #0]
   9a8a4:	68fb      	ldr	r3, [r7, #12]
   9a8a6:	4013      	ands	r3, r2
   9a8a8:	2b00      	cmp	r3, #0
   9a8aa:	d01c      	beq.n	9a8e6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9a8ac:	4a15      	ldr	r2, [pc, #84]	; (9a904 <pio_handler_process+0xa8>)
   9a8ae:	68bb      	ldr	r3, [r7, #8]
   9a8b0:	011b      	lsls	r3, r3, #4
   9a8b2:	4413      	add	r3, r2
   9a8b4:	330c      	adds	r3, #12
   9a8b6:	681b      	ldr	r3, [r3, #0]
   9a8b8:	4912      	ldr	r1, [pc, #72]	; (9a904 <pio_handler_process+0xa8>)
   9a8ba:	68ba      	ldr	r2, [r7, #8]
   9a8bc:	0112      	lsls	r2, r2, #4
   9a8be:	440a      	add	r2, r1
   9a8c0:	6810      	ldr	r0, [r2, #0]
   9a8c2:	4910      	ldr	r1, [pc, #64]	; (9a904 <pio_handler_process+0xa8>)
   9a8c4:	68ba      	ldr	r2, [r7, #8]
   9a8c6:	0112      	lsls	r2, r2, #4
   9a8c8:	440a      	add	r2, r1
   9a8ca:	3204      	adds	r2, #4
   9a8cc:	6812      	ldr	r2, [r2, #0]
   9a8ce:	4611      	mov	r1, r2
   9a8d0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9a8d2:	4a0c      	ldr	r2, [pc, #48]	; (9a904 <pio_handler_process+0xa8>)
   9a8d4:	68bb      	ldr	r3, [r7, #8]
   9a8d6:	011b      	lsls	r3, r3, #4
   9a8d8:	4413      	add	r3, r2
   9a8da:	3304      	adds	r3, #4
   9a8dc:	681b      	ldr	r3, [r3, #0]
   9a8de:	43db      	mvns	r3, r3
   9a8e0:	68fa      	ldr	r2, [r7, #12]
   9a8e2:	4013      	ands	r3, r2
   9a8e4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9a8e6:	68bb      	ldr	r3, [r7, #8]
   9a8e8:	3301      	adds	r3, #1
   9a8ea:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   9a8ec:	68fb      	ldr	r3, [r7, #12]
   9a8ee:	2b00      	cmp	r3, #0
   9a8f0:	d1ca      	bne.n	9a888 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9a8f2:	bf00      	nop
   9a8f4:	3710      	adds	r7, #16
   9a8f6:	46bd      	mov	sp, r7
   9a8f8:	bd80      	pop	{r7, pc}
   9a8fa:	bf00      	nop
   9a8fc:	0009a61d 	.word	0x0009a61d
   9a900:	0009a635 	.word	0x0009a635
   9a904:	20071b50 	.word	0x20071b50

0009a908 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9a908:	b580      	push	{r7, lr}
   9a90a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   9a90c:	210b      	movs	r1, #11
   9a90e:	4802      	ldr	r0, [pc, #8]	; (9a918 <PIOA_Handler+0x10>)
   9a910:	4b02      	ldr	r3, [pc, #8]	; (9a91c <PIOA_Handler+0x14>)
   9a912:	4798      	blx	r3
}
   9a914:	bf00      	nop
   9a916:	bd80      	pop	{r7, pc}
   9a918:	400e0e00 	.word	0x400e0e00
   9a91c:	0009a85d 	.word	0x0009a85d

0009a920 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   9a920:	b580      	push	{r7, lr}
   9a922:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9a924:	210c      	movs	r1, #12
   9a926:	4802      	ldr	r0, [pc, #8]	; (9a930 <PIOB_Handler+0x10>)
   9a928:	4b02      	ldr	r3, [pc, #8]	; (9a934 <PIOB_Handler+0x14>)
   9a92a:	4798      	blx	r3
}
   9a92c:	bf00      	nop
   9a92e:	bd80      	pop	{r7, pc}
   9a930:	400e1000 	.word	0x400e1000
   9a934:	0009a85d 	.word	0x0009a85d

0009a938 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9a938:	b580      	push	{r7, lr}
   9a93a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   9a93c:	210d      	movs	r1, #13
   9a93e:	4802      	ldr	r0, [pc, #8]	; (9a948 <PIOC_Handler+0x10>)
   9a940:	4b02      	ldr	r3, [pc, #8]	; (9a94c <PIOC_Handler+0x14>)
   9a942:	4798      	blx	r3
}
   9a944:	bf00      	nop
   9a946:	bd80      	pop	{r7, pc}
   9a948:	400e1200 	.word	0x400e1200
   9a94c:	0009a85d 	.word	0x0009a85d

0009a950 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   9a950:	b580      	push	{r7, lr}
   9a952:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   9a954:	210e      	movs	r1, #14
   9a956:	4802      	ldr	r0, [pc, #8]	; (9a960 <PIOD_Handler+0x10>)
   9a958:	4b02      	ldr	r3, [pc, #8]	; (9a964 <PIOD_Handler+0x14>)
   9a95a:	4798      	blx	r3
}
   9a95c:	bf00      	nop
   9a95e:	bd80      	pop	{r7, pc}
   9a960:	400e1400 	.word	0x400e1400
   9a964:	0009a85d 	.word	0x0009a85d

0009a968 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   9a968:	b480      	push	{r7}
   9a96a:	b085      	sub	sp, #20
   9a96c:	af00      	add	r7, sp, #0
   9a96e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   9a970:	491c      	ldr	r1, [pc, #112]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a972:	4b1c      	ldr	r3, [pc, #112]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9a976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   9a97a:	687b      	ldr	r3, [r7, #4]
   9a97c:	4313      	orrs	r3, r2
   9a97e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9a980:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9a984:	60fb      	str	r3, [r7, #12]
   9a986:	e007      	b.n	9a998 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9a988:	68fb      	ldr	r3, [r7, #12]
   9a98a:	2b00      	cmp	r3, #0
   9a98c:	d101      	bne.n	9a992 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   9a98e:	2301      	movs	r3, #1
   9a990:	e023      	b.n	9a9da <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9a992:	68fb      	ldr	r3, [r7, #12]
   9a994:	3b01      	subs	r3, #1
   9a996:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9a998:	4b12      	ldr	r3, [pc, #72]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9a99c:	f003 0308 	and.w	r3, r3, #8
   9a9a0:	2b00      	cmp	r3, #0
   9a9a2:	d0f1      	beq.n	9a988 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9a9a4:	4a0f      	ldr	r2, [pc, #60]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a9a6:	4b0f      	ldr	r3, [pc, #60]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9a9aa:	f023 0303 	bic.w	r3, r3, #3
   9a9ae:	f043 0302 	orr.w	r3, r3, #2
   9a9b2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9a9b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9a9b8:	60fb      	str	r3, [r7, #12]
   9a9ba:	e007      	b.n	9a9cc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9a9bc:	68fb      	ldr	r3, [r7, #12]
   9a9be:	2b00      	cmp	r3, #0
   9a9c0:	d101      	bne.n	9a9c6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9a9c2:	2301      	movs	r3, #1
   9a9c4:	e009      	b.n	9a9da <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9a9c6:	68fb      	ldr	r3, [r7, #12]
   9a9c8:	3b01      	subs	r3, #1
   9a9ca:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9a9cc:	4b05      	ldr	r3, [pc, #20]	; (9a9e4 <pmc_switch_mck_to_pllack+0x7c>)
   9a9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9a9d0:	f003 0308 	and.w	r3, r3, #8
   9a9d4:	2b00      	cmp	r3, #0
   9a9d6:	d0f1      	beq.n	9a9bc <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   9a9d8:	2300      	movs	r3, #0
}
   9a9da:	4618      	mov	r0, r3
   9a9dc:	3714      	adds	r7, #20
   9a9de:	46bd      	mov	sp, r7
   9a9e0:	bc80      	pop	{r7}
   9a9e2:	4770      	bx	lr
   9a9e4:	400e0600 	.word	0x400e0600

0009a9e8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   9a9e8:	b480      	push	{r7}
   9a9ea:	b083      	sub	sp, #12
   9a9ec:	af00      	add	r7, sp, #0
   9a9ee:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9a9f0:	687b      	ldr	r3, [r7, #4]
   9a9f2:	2b01      	cmp	r3, #1
   9a9f4:	d107      	bne.n	9aa06 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9a9f6:	4a08      	ldr	r2, [pc, #32]	; (9aa18 <pmc_switch_sclk_to_32kxtal+0x30>)
   9a9f8:	4b07      	ldr	r3, [pc, #28]	; (9aa18 <pmc_switch_sclk_to_32kxtal+0x30>)
   9a9fa:	689b      	ldr	r3, [r3, #8]
   9a9fc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9aa00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9aa04:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9aa06:	4b04      	ldr	r3, [pc, #16]	; (9aa18 <pmc_switch_sclk_to_32kxtal+0x30>)
   9aa08:	4a04      	ldr	r2, [pc, #16]	; (9aa1c <pmc_switch_sclk_to_32kxtal+0x34>)
   9aa0a:	601a      	str	r2, [r3, #0]
}
   9aa0c:	bf00      	nop
   9aa0e:	370c      	adds	r7, #12
   9aa10:	46bd      	mov	sp, r7
   9aa12:	bc80      	pop	{r7}
   9aa14:	4770      	bx	lr
   9aa16:	bf00      	nop
   9aa18:	400e1a10 	.word	0x400e1a10
   9aa1c:	a5000008 	.word	0xa5000008

0009aa20 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9aa20:	b480      	push	{r7}
   9aa22:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9aa24:	4b09      	ldr	r3, [pc, #36]	; (9aa4c <pmc_osc_is_ready_32kxtal+0x2c>)
   9aa26:	695b      	ldr	r3, [r3, #20]
   9aa28:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   9aa2c:	2b00      	cmp	r3, #0
   9aa2e:	d007      	beq.n	9aa40 <pmc_osc_is_ready_32kxtal+0x20>
   9aa30:	4b07      	ldr	r3, [pc, #28]	; (9aa50 <pmc_osc_is_ready_32kxtal+0x30>)
   9aa32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9aa34:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9aa38:	2b00      	cmp	r3, #0
   9aa3a:	d001      	beq.n	9aa40 <pmc_osc_is_ready_32kxtal+0x20>
   9aa3c:	2301      	movs	r3, #1
   9aa3e:	e000      	b.n	9aa42 <pmc_osc_is_ready_32kxtal+0x22>
   9aa40:	2300      	movs	r3, #0
}
   9aa42:	4618      	mov	r0, r3
   9aa44:	46bd      	mov	sp, r7
   9aa46:	bc80      	pop	{r7}
   9aa48:	4770      	bx	lr
   9aa4a:	bf00      	nop
   9aa4c:	400e1a10 	.word	0x400e1a10
   9aa50:	400e0600 	.word	0x400e0600

0009aa54 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   9aa54:	b480      	push	{r7}
   9aa56:	b085      	sub	sp, #20
   9aa58:	af00      	add	r7, sp, #0
   9aa5a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   9aa5c:	2300      	movs	r3, #0
   9aa5e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   9aa60:	4b21      	ldr	r3, [pc, #132]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aa62:	6a1b      	ldr	r3, [r3, #32]
   9aa64:	f003 0301 	and.w	r3, r3, #1
   9aa68:	2b00      	cmp	r3, #0
   9aa6a:	d00e      	beq.n	9aa8a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9aa6c:	491e      	ldr	r1, [pc, #120]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aa6e:	4b1e      	ldr	r3, [pc, #120]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aa70:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   9aa72:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9aa76:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   9aa7a:	687a      	ldr	r2, [r7, #4]
   9aa7c:	4313      	orrs	r3, r2
   9aa7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9aa82:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9aa86:	620b      	str	r3, [r1, #32]
   9aa88:	e00b      	b.n	9aaa2 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   9aa8a:	2301      	movs	r3, #1
   9aa8c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9aa8e:	4916      	ldr	r1, [pc, #88]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aa90:	4b15      	ldr	r3, [pc, #84]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aa92:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   9aa94:	4b15      	ldr	r3, [pc, #84]	; (9aaec <pmc_switch_mainck_to_fastrc+0x98>)
   9aa96:	4013      	ands	r3, r2
   9aa98:	687a      	ldr	r2, [r7, #4]
   9aa9a:	431a      	orrs	r2, r3
   9aa9c:	4b14      	ldr	r3, [pc, #80]	; (9aaf0 <pmc_switch_mainck_to_fastrc+0x9c>)
   9aa9e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9aaa0:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9aaa2:	bf00      	nop
   9aaa4:	4b10      	ldr	r3, [pc, #64]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aaa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9aaa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   9aaac:	2b00      	cmp	r3, #0
   9aaae:	d0f9      	beq.n	9aaa4 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   9aab0:	4a0d      	ldr	r2, [pc, #52]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aab2:	4b0d      	ldr	r3, [pc, #52]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aab4:	6a1b      	ldr	r3, [r3, #32]
   9aab6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   9aaba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   9aabe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9aac2:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   9aac4:	68fb      	ldr	r3, [r7, #12]
   9aac6:	2b00      	cmp	r3, #0
   9aac8:	d009      	beq.n	9aade <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9aaca:	4a07      	ldr	r2, [pc, #28]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aacc:	4b06      	ldr	r3, [pc, #24]	; (9aae8 <pmc_switch_mainck_to_fastrc+0x94>)
   9aace:	6a1b      	ldr	r3, [r3, #32]
   9aad0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9aad4:	f023 0301 	bic.w	r3, r3, #1
   9aad8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9aadc:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   9aade:	bf00      	nop
   9aae0:	3714      	adds	r7, #20
   9aae2:	46bd      	mov	sp, r7
   9aae4:	bc80      	pop	{r7}
   9aae6:	4770      	bx	lr
   9aae8:	400e0600 	.word	0x400e0600
   9aaec:	ffc80086 	.word	0xffc80086
   9aaf0:	0037ff09 	.word	0x0037ff09

0009aaf4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   9aaf4:	b480      	push	{r7}
   9aaf6:	b083      	sub	sp, #12
   9aaf8:	af00      	add	r7, sp, #0
   9aafa:	6078      	str	r0, [r7, #4]
   9aafc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9aafe:	687b      	ldr	r3, [r7, #4]
   9ab00:	2b00      	cmp	r3, #0
   9ab02:	d008      	beq.n	9ab16 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9ab04:	4916      	ldr	r1, [pc, #88]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab06:	4b16      	ldr	r3, [pc, #88]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab08:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   9ab0a:	4a16      	ldr	r2, [pc, #88]	; (9ab64 <pmc_switch_mainck_to_xtal+0x70>)
   9ab0c:	401a      	ands	r2, r3
   9ab0e:	4b16      	ldr	r3, [pc, #88]	; (9ab68 <pmc_switch_mainck_to_xtal+0x74>)
   9ab10:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9ab12:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   9ab14:	e01e      	b.n	9ab54 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9ab16:	4912      	ldr	r1, [pc, #72]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab18:	4b11      	ldr	r3, [pc, #68]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab1a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9ab1c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9ab20:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9ab24:	683a      	ldr	r2, [r7, #0]
   9ab26:	0212      	lsls	r2, r2, #8
   9ab28:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9ab2a:	4313      	orrs	r3, r2
   9ab2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9ab30:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9ab34:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9ab36:	bf00      	nop
   9ab38:	4b09      	ldr	r3, [pc, #36]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ab3c:	f003 0301 	and.w	r3, r3, #1
   9ab40:	2b00      	cmp	r3, #0
   9ab42:	d0f9      	beq.n	9ab38 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   9ab44:	4a06      	ldr	r2, [pc, #24]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab46:	4b06      	ldr	r3, [pc, #24]	; (9ab60 <pmc_switch_mainck_to_xtal+0x6c>)
   9ab48:	6a1b      	ldr	r3, [r3, #32]
   9ab4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   9ab4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9ab52:	6213      	str	r3, [r2, #32]
	}
}
   9ab54:	bf00      	nop
   9ab56:	370c      	adds	r7, #12
   9ab58:	46bd      	mov	sp, r7
   9ab5a:	bc80      	pop	{r7}
   9ab5c:	4770      	bx	lr
   9ab5e:	bf00      	nop
   9ab60:	400e0600 	.word	0x400e0600
   9ab64:	fec8fffc 	.word	0xfec8fffc
   9ab68:	01370002 	.word	0x01370002

0009ab6c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   9ab6c:	b480      	push	{r7}
   9ab6e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   9ab70:	4b03      	ldr	r3, [pc, #12]	; (9ab80 <pmc_osc_is_ready_mainck+0x14>)
   9ab72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ab74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   9ab78:	4618      	mov	r0, r3
   9ab7a:	46bd      	mov	sp, r7
   9ab7c:	bc80      	pop	{r7}
   9ab7e:	4770      	bx	lr
   9ab80:	400e0600 	.word	0x400e0600

0009ab84 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   9ab84:	b480      	push	{r7}
   9ab86:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   9ab88:	4b03      	ldr	r3, [pc, #12]	; (9ab98 <pmc_disable_pllack+0x14>)
   9ab8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9ab8e:	629a      	str	r2, [r3, #40]	; 0x28
}
   9ab90:	bf00      	nop
   9ab92:	46bd      	mov	sp, r7
   9ab94:	bc80      	pop	{r7}
   9ab96:	4770      	bx	lr
   9ab98:	400e0600 	.word	0x400e0600

0009ab9c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   9ab9c:	b480      	push	{r7}
   9ab9e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   9aba0:	4b03      	ldr	r3, [pc, #12]	; (9abb0 <pmc_is_locked_pllack+0x14>)
   9aba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9aba4:	f003 0302 	and.w	r3, r3, #2
}
   9aba8:	4618      	mov	r0, r3
   9abaa:	46bd      	mov	sp, r7
   9abac:	bc80      	pop	{r7}
   9abae:	4770      	bx	lr
   9abb0:	400e0600 	.word	0x400e0600

0009abb4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   9abb4:	b480      	push	{r7}
   9abb6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   9abb8:	4b03      	ldr	r3, [pc, #12]	; (9abc8 <pmc_is_locked_upll+0x14>)
   9abba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9abbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   9abc0:	4618      	mov	r0, r3
   9abc2:	46bd      	mov	sp, r7
   9abc4:	bc80      	pop	{r7}
   9abc6:	4770      	bx	lr
   9abc8:	400e0600 	.word	0x400e0600

0009abcc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   9abcc:	b480      	push	{r7}
   9abce:	b083      	sub	sp, #12
   9abd0:	af00      	add	r7, sp, #0
   9abd2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9abd4:	687b      	ldr	r3, [r7, #4]
   9abd6:	2b2c      	cmp	r3, #44	; 0x2c
   9abd8:	d901      	bls.n	9abde <pmc_enable_periph_clk+0x12>
		return 1;
   9abda:	2301      	movs	r3, #1
   9abdc:	e02f      	b.n	9ac3e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   9abde:	687b      	ldr	r3, [r7, #4]
   9abe0:	2b1f      	cmp	r3, #31
   9abe2:	d813      	bhi.n	9ac0c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9abe4:	4b18      	ldr	r3, [pc, #96]	; (9ac48 <pmc_enable_periph_clk+0x7c>)
   9abe6:	699a      	ldr	r2, [r3, #24]
   9abe8:	2101      	movs	r1, #1
   9abea:	687b      	ldr	r3, [r7, #4]
   9abec:	fa01 f303 	lsl.w	r3, r1, r3
   9abf0:	401a      	ands	r2, r3
   9abf2:	2101      	movs	r1, #1
   9abf4:	687b      	ldr	r3, [r7, #4]
   9abf6:	fa01 f303 	lsl.w	r3, r1, r3
   9abfa:	429a      	cmp	r2, r3
   9abfc:	d01e      	beq.n	9ac3c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   9abfe:	4a12      	ldr	r2, [pc, #72]	; (9ac48 <pmc_enable_periph_clk+0x7c>)
   9ac00:	2101      	movs	r1, #1
   9ac02:	687b      	ldr	r3, [r7, #4]
   9ac04:	fa01 f303 	lsl.w	r3, r1, r3
   9ac08:	6113      	str	r3, [r2, #16]
   9ac0a:	e017      	b.n	9ac3c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   9ac0c:	687b      	ldr	r3, [r7, #4]
   9ac0e:	3b20      	subs	r3, #32
   9ac10:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9ac12:	4b0d      	ldr	r3, [pc, #52]	; (9ac48 <pmc_enable_periph_clk+0x7c>)
   9ac14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   9ac18:	2101      	movs	r1, #1
   9ac1a:	687b      	ldr	r3, [r7, #4]
   9ac1c:	fa01 f303 	lsl.w	r3, r1, r3
   9ac20:	401a      	ands	r2, r3
   9ac22:	2101      	movs	r1, #1
   9ac24:	687b      	ldr	r3, [r7, #4]
   9ac26:	fa01 f303 	lsl.w	r3, r1, r3
   9ac2a:	429a      	cmp	r2, r3
   9ac2c:	d006      	beq.n	9ac3c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   9ac2e:	4a06      	ldr	r2, [pc, #24]	; (9ac48 <pmc_enable_periph_clk+0x7c>)
   9ac30:	2101      	movs	r1, #1
   9ac32:	687b      	ldr	r3, [r7, #4]
   9ac34:	fa01 f303 	lsl.w	r3, r1, r3
   9ac38:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   9ac3c:	2300      	movs	r3, #0
}
   9ac3e:	4618      	mov	r0, r3
   9ac40:	370c      	adds	r7, #12
   9ac42:	46bd      	mov	sp, r7
   9ac44:	bc80      	pop	{r7}
   9ac46:	4770      	bx	lr
   9ac48:	400e0600 	.word	0x400e0600

0009ac4c <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   9ac4c:	b480      	push	{r7}
   9ac4e:	b083      	sub	sp, #12
   9ac50:	af00      	add	r7, sp, #0
   9ac52:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   9ac54:	687b      	ldr	r3, [r7, #4]
   9ac56:	2b00      	cmp	r3, #0
   9ac58:	d004      	beq.n	9ac64 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   9ac5a:	4b07      	ldr	r3, [pc, #28]	; (9ac78 <pmc_set_writeprotect+0x2c>)
   9ac5c:	4a07      	ldr	r2, [pc, #28]	; (9ac7c <pmc_set_writeprotect+0x30>)
   9ac5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   9ac62:	e003      	b.n	9ac6c <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   9ac64:	4b04      	ldr	r3, [pc, #16]	; (9ac78 <pmc_set_writeprotect+0x2c>)
   9ac66:	4a06      	ldr	r2, [pc, #24]	; (9ac80 <pmc_set_writeprotect+0x34>)
   9ac68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   9ac6c:	bf00      	nop
   9ac6e:	370c      	adds	r7, #12
   9ac70:	46bd      	mov	sp, r7
   9ac72:	bc80      	pop	{r7}
   9ac74:	4770      	bx	lr
   9ac76:	bf00      	nop
   9ac78:	400e0600 	.word	0x400e0600
   9ac7c:	504d4301 	.word	0x504d4301
   9ac80:	504d4300 	.word	0x504d4300

0009ac84 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   9ac84:	b480      	push	{r7}
   9ac86:	b083      	sub	sp, #12
   9ac88:	af00      	add	r7, sp, #0
   9ac8a:	6078      	str	r0, [r7, #4]
   9ac8c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9ac8e:	687a      	ldr	r2, [r7, #4]
   9ac90:	683b      	ldr	r3, [r7, #0]
   9ac92:	019b      	lsls	r3, r3, #6
   9ac94:	4413      	add	r3, r2
   9ac96:	2205      	movs	r2, #5
   9ac98:	601a      	str	r2, [r3, #0]
}
   9ac9a:	bf00      	nop
   9ac9c:	370c      	adds	r7, #12
   9ac9e:	46bd      	mov	sp, r7
   9aca0:	bc80      	pop	{r7}
   9aca2:	4770      	bx	lr

0009aca4 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   9aca4:	b480      	push	{r7}
   9aca6:	b085      	sub	sp, #20
   9aca8:	af00      	add	r7, sp, #0
   9acaa:	60f8      	str	r0, [r7, #12]
   9acac:	60b9      	str	r1, [r7, #8]
   9acae:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9acb0:	68fa      	ldr	r2, [r7, #12]
   9acb2:	68bb      	ldr	r3, [r7, #8]
   9acb4:	019b      	lsls	r3, r3, #6
   9acb6:	4413      	add	r3, r2
   9acb8:	331c      	adds	r3, #28
   9acba:	687a      	ldr	r2, [r7, #4]
   9acbc:	601a      	str	r2, [r3, #0]
}
   9acbe:	bf00      	nop
   9acc0:	3714      	adds	r7, #20
   9acc2:	46bd      	mov	sp, r7
   9acc4:	bc80      	pop	{r7}
   9acc6:	4770      	bx	lr

0009acc8 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   9acc8:	b480      	push	{r7}
   9acca:	b087      	sub	sp, #28
   9accc:	af00      	add	r7, sp, #0
   9acce:	60f8      	str	r0, [r7, #12]
   9acd0:	60b9      	str	r1, [r7, #8]
   9acd2:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9acd4:	68fa      	ldr	r2, [r7, #12]
   9acd6:	68bb      	ldr	r3, [r7, #8]
   9acd8:	019b      	lsls	r3, r3, #6
   9acda:	4413      	add	r3, r2
   9acdc:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   9acde:	697b      	ldr	r3, [r7, #20]
   9ace0:	687a      	ldr	r2, [r7, #4]
   9ace2:	625a      	str	r2, [r3, #36]	; 0x24
}
   9ace4:	bf00      	nop
   9ace6:	371c      	adds	r7, #28
   9ace8:	46bd      	mov	sp, r7
   9acea:	bc80      	pop	{r7}
   9acec:	4770      	bx	lr
   9acee:	bf00      	nop

0009acf0 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   9acf0:	b480      	push	{r7}
   9acf2:	b085      	sub	sp, #20
   9acf4:	af00      	add	r7, sp, #0
   9acf6:	6078      	str	r0, [r7, #4]
   9acf8:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9acfa:	687a      	ldr	r2, [r7, #4]
   9acfc:	683b      	ldr	r3, [r7, #0]
   9acfe:	019b      	lsls	r3, r3, #6
   9ad00:	4413      	add	r3, r2
   9ad02:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   9ad04:	68fb      	ldr	r3, [r7, #12]
   9ad06:	6a1b      	ldr	r3, [r3, #32]
}
   9ad08:	4618      	mov	r0, r3
   9ad0a:	3714      	adds	r7, #20
   9ad0c:	46bd      	mov	sp, r7
   9ad0e:	bc80      	pop	{r7}
   9ad10:	4770      	bx	lr
   9ad12:	bf00      	nop

0009ad14 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   9ad14:	b480      	push	{r7}
   9ad16:	b085      	sub	sp, #20
   9ad18:	af00      	add	r7, sp, #0
   9ad1a:	6078      	str	r0, [r7, #4]
   9ad1c:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   9ad1e:	2300      	movs	r3, #0
   9ad20:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   9ad22:	687b      	ldr	r3, [r7, #4]
   9ad24:	22ac      	movs	r2, #172	; 0xac
   9ad26:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   9ad28:	683b      	ldr	r3, [r7, #0]
   9ad2a:	681a      	ldr	r2, [r3, #0]
   9ad2c:	683b      	ldr	r3, [r7, #0]
   9ad2e:	685b      	ldr	r3, [r3, #4]
   9ad30:	fbb2 f3f3 	udiv	r3, r2, r3
   9ad34:	091b      	lsrs	r3, r3, #4
   9ad36:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   9ad38:	68fb      	ldr	r3, [r7, #12]
   9ad3a:	2b00      	cmp	r3, #0
   9ad3c:	d003      	beq.n	9ad46 <uart_init+0x32>
   9ad3e:	68fb      	ldr	r3, [r7, #12]
   9ad40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9ad44:	d301      	bcc.n	9ad4a <uart_init+0x36>
		return 1;
   9ad46:	2301      	movs	r3, #1
   9ad48:	e00f      	b.n	9ad6a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   9ad4a:	687b      	ldr	r3, [r7, #4]
   9ad4c:	68fa      	ldr	r2, [r7, #12]
   9ad4e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   9ad50:	683b      	ldr	r3, [r7, #0]
   9ad52:	689a      	ldr	r2, [r3, #8]
   9ad54:	687b      	ldr	r3, [r7, #4]
   9ad56:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   9ad58:	687b      	ldr	r3, [r7, #4]
   9ad5a:	f240 2202 	movw	r2, #514	; 0x202
   9ad5e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9ad62:	687b      	ldr	r3, [r7, #4]
   9ad64:	2250      	movs	r2, #80	; 0x50
   9ad66:	601a      	str	r2, [r3, #0]

	return 0;
   9ad68:	2300      	movs	r3, #0
}
   9ad6a:	4618      	mov	r0, r3
   9ad6c:	3714      	adds	r7, #20
   9ad6e:	46bd      	mov	sp, r7
   9ad70:	bc80      	pop	{r7}
   9ad72:	4770      	bx	lr

0009ad74 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   9ad74:	b480      	push	{r7}
   9ad76:	b083      	sub	sp, #12
   9ad78:	af00      	add	r7, sp, #0
   9ad7a:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   9ad7c:	687b      	ldr	r3, [r7, #4]
   9ad7e:	2240      	movs	r2, #64	; 0x40
   9ad80:	601a      	str	r2, [r3, #0]
}
   9ad82:	bf00      	nop
   9ad84:	370c      	adds	r7, #12
   9ad86:	46bd      	mov	sp, r7
   9ad88:	bc80      	pop	{r7}
   9ad8a:	4770      	bx	lr

0009ad8c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   9ad8c:	b480      	push	{r7}
   9ad8e:	b083      	sub	sp, #12
   9ad90:	af00      	add	r7, sp, #0
   9ad92:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   9ad94:	687b      	ldr	r3, [r7, #4]
   9ad96:	2210      	movs	r2, #16
   9ad98:	601a      	str	r2, [r3, #0]
}
   9ad9a:	bf00      	nop
   9ad9c:	370c      	adds	r7, #12
   9ad9e:	46bd      	mov	sp, r7
   9ada0:	bc80      	pop	{r7}
   9ada2:	4770      	bx	lr

0009ada4 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   9ada4:	b480      	push	{r7}
   9ada6:	b083      	sub	sp, #12
   9ada8:	af00      	add	r7, sp, #0
   9adaa:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9adac:	687b      	ldr	r3, [r7, #4]
   9adae:	2250      	movs	r2, #80	; 0x50
   9adb0:	601a      	str	r2, [r3, #0]
}
   9adb2:	bf00      	nop
   9adb4:	370c      	adds	r7, #12
   9adb6:	46bd      	mov	sp, r7
   9adb8:	bc80      	pop	{r7}
   9adba:	4770      	bx	lr

0009adbc <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   9adbc:	b480      	push	{r7}
   9adbe:	b083      	sub	sp, #12
   9adc0:	af00      	add	r7, sp, #0
   9adc2:	6078      	str	r0, [r7, #4]
   9adc4:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   9adc6:	687b      	ldr	r3, [r7, #4]
   9adc8:	683a      	ldr	r2, [r7, #0]
   9adca:	609a      	str	r2, [r3, #8]
}
   9adcc:	bf00      	nop
   9adce:	370c      	adds	r7, #12
   9add0:	46bd      	mov	sp, r7
   9add2:	bc80      	pop	{r7}
   9add4:	4770      	bx	lr
   9add6:	bf00      	nop

0009add8 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   9add8:	b480      	push	{r7}
   9adda:	b083      	sub	sp, #12
   9addc:	af00      	add	r7, sp, #0
   9adde:	6078      	str	r0, [r7, #4]
   9ade0:	460b      	mov	r3, r1
   9ade2:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   9ade4:	687b      	ldr	r3, [r7, #4]
   9ade6:	695b      	ldr	r3, [r3, #20]
   9ade8:	f003 0302 	and.w	r3, r3, #2
   9adec:	2b00      	cmp	r3, #0
   9adee:	d101      	bne.n	9adf4 <uart_write+0x1c>
		return 1;
   9adf0:	2301      	movs	r3, #1
   9adf2:	e00c      	b.n	9ae0e <uart_write+0x36>
if(cl_console_sync != true)
   9adf4:	4b08      	ldr	r3, [pc, #32]	; (9ae18 <uart_write+0x40>)
   9adf6:	781b      	ldrb	r3, [r3, #0]
   9adf8:	f083 0301 	eor.w	r3, r3, #1
   9adfc:	b2db      	uxtb	r3, r3
   9adfe:	2b00      	cmp	r3, #0
   9ae00:	d001      	beq.n	9ae06 <uart_write+0x2e>
	return 1;
   9ae02:	2301      	movs	r3, #1
   9ae04:	e003      	b.n	9ae0e <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   9ae06:	78fa      	ldrb	r2, [r7, #3]
   9ae08:	687b      	ldr	r3, [r7, #4]
   9ae0a:	61da      	str	r2, [r3, #28]
	return 0;
   9ae0c:	2300      	movs	r3, #0
}
   9ae0e:	4618      	mov	r0, r3
   9ae10:	370c      	adds	r7, #12
   9ae12:	46bd      	mov	sp, r7
   9ae14:	bc80      	pop	{r7}
   9ae16:	4770      	bx	lr
   9ae18:	20071bcd 	.word	0x20071bcd

0009ae1c <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   9ae1c:	b480      	push	{r7}
   9ae1e:	b083      	sub	sp, #12
   9ae20:	af00      	add	r7, sp, #0
   9ae22:	6078      	str	r0, [r7, #4]
   9ae24:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   9ae26:	687b      	ldr	r3, [r7, #4]
   9ae28:	695b      	ldr	r3, [r3, #20]
   9ae2a:	f003 0301 	and.w	r3, r3, #1
   9ae2e:	2b00      	cmp	r3, #0
   9ae30:	d101      	bne.n	9ae36 <uart_read+0x1a>
		return 1;
   9ae32:	2301      	movs	r3, #1
   9ae34:	e005      	b.n	9ae42 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   9ae36:	687b      	ldr	r3, [r7, #4]
   9ae38:	699b      	ldr	r3, [r3, #24]
   9ae3a:	b2da      	uxtb	r2, r3
   9ae3c:	683b      	ldr	r3, [r7, #0]
   9ae3e:	701a      	strb	r2, [r3, #0]
	return 0;
   9ae40:	2300      	movs	r3, #0
}
   9ae42:	4618      	mov	r0, r3
   9ae44:	370c      	adds	r7, #12
   9ae46:	46bd      	mov	sp, r7
   9ae48:	bc80      	pop	{r7}
   9ae4a:	4770      	bx	lr

0009ae4c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   9ae4c:	b480      	push	{r7}
   9ae4e:	b089      	sub	sp, #36	; 0x24
   9ae50:	af00      	add	r7, sp, #0
   9ae52:	60f8      	str	r0, [r7, #12]
   9ae54:	60b9      	str	r1, [r7, #8]
   9ae56:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   9ae58:	68bb      	ldr	r3, [r7, #8]
   9ae5a:	011a      	lsls	r2, r3, #4
   9ae5c:	687b      	ldr	r3, [r7, #4]
   9ae5e:	429a      	cmp	r2, r3
   9ae60:	d802      	bhi.n	9ae68 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   9ae62:	2310      	movs	r3, #16
   9ae64:	61fb      	str	r3, [r7, #28]
   9ae66:	e001      	b.n	9ae6c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   9ae68:	2308      	movs	r3, #8
   9ae6a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   9ae6c:	687b      	ldr	r3, [r7, #4]
   9ae6e:	00da      	lsls	r2, r3, #3
   9ae70:	69fb      	ldr	r3, [r7, #28]
   9ae72:	68b9      	ldr	r1, [r7, #8]
   9ae74:	fb01 f303 	mul.w	r3, r1, r3
   9ae78:	085b      	lsrs	r3, r3, #1
   9ae7a:	441a      	add	r2, r3
   9ae7c:	69fb      	ldr	r3, [r7, #28]
   9ae7e:	68b9      	ldr	r1, [r7, #8]
   9ae80:	fb01 f303 	mul.w	r3, r1, r3
   9ae84:	fbb2 f3f3 	udiv	r3, r2, r3
   9ae88:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   9ae8a:	69bb      	ldr	r3, [r7, #24]
   9ae8c:	08db      	lsrs	r3, r3, #3
   9ae8e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   9ae90:	69bb      	ldr	r3, [r7, #24]
   9ae92:	f003 0307 	and.w	r3, r3, #7
   9ae96:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   9ae98:	697b      	ldr	r3, [r7, #20]
   9ae9a:	2b00      	cmp	r3, #0
   9ae9c:	d003      	beq.n	9aea6 <usart_set_async_baudrate+0x5a>
   9ae9e:	697b      	ldr	r3, [r7, #20]
   9aea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9aea4:	d301      	bcc.n	9aeaa <usart_set_async_baudrate+0x5e>
		return 1;
   9aea6:	2301      	movs	r3, #1
   9aea8:	e00f      	b.n	9aeca <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   9aeaa:	69fb      	ldr	r3, [r7, #28]
   9aeac:	2b08      	cmp	r3, #8
   9aeae:	d105      	bne.n	9aebc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   9aeb0:	68fb      	ldr	r3, [r7, #12]
   9aeb2:	685b      	ldr	r3, [r3, #4]
   9aeb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   9aeb8:	68fb      	ldr	r3, [r7, #12]
   9aeba:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   9aebc:	693b      	ldr	r3, [r7, #16]
   9aebe:	041a      	lsls	r2, r3, #16
   9aec0:	697b      	ldr	r3, [r7, #20]
   9aec2:	431a      	orrs	r2, r3
   9aec4:	68fb      	ldr	r3, [r7, #12]
   9aec6:	621a      	str	r2, [r3, #32]

	return 0;
   9aec8:	2300      	movs	r3, #0
}
   9aeca:	4618      	mov	r0, r3
   9aecc:	3724      	adds	r7, #36	; 0x24
   9aece:	46bd      	mov	sp, r7
   9aed0:	bc80      	pop	{r7}
   9aed2:	4770      	bx	lr

0009aed4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   9aed4:	b580      	push	{r7, lr}
   9aed6:	b082      	sub	sp, #8
   9aed8:	af00      	add	r7, sp, #0
   9aeda:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   9aedc:	6878      	ldr	r0, [r7, #4]
   9aede:	4b0d      	ldr	r3, [pc, #52]	; (9af14 <usart_reset+0x40>)
   9aee0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   9aee2:	687b      	ldr	r3, [r7, #4]
   9aee4:	2200      	movs	r2, #0
   9aee6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   9aee8:	687b      	ldr	r3, [r7, #4]
   9aeea:	2200      	movs	r2, #0
   9aeec:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   9aeee:	687b      	ldr	r3, [r7, #4]
   9aef0:	2200      	movs	r2, #0
   9aef2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   9aef4:	6878      	ldr	r0, [r7, #4]
   9aef6:	4b08      	ldr	r3, [pc, #32]	; (9af18 <usart_reset+0x44>)
   9aef8:	4798      	blx	r3
	usart_reset_rx(p_usart);
   9aefa:	6878      	ldr	r0, [r7, #4]
   9aefc:	4b07      	ldr	r3, [pc, #28]	; (9af1c <usart_reset+0x48>)
   9aefe:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   9af00:	6878      	ldr	r0, [r7, #4]
   9af02:	4b07      	ldr	r3, [pc, #28]	; (9af20 <usart_reset+0x4c>)
   9af04:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   9af06:	6878      	ldr	r0, [r7, #4]
   9af08:	4b06      	ldr	r3, [pc, #24]	; (9af24 <usart_reset+0x50>)
   9af0a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   9af0c:	bf00      	nop
   9af0e:	3708      	adds	r7, #8
   9af10:	46bd      	mov	sp, r7
   9af12:	bd80      	pop	{r7, pc}
   9af14:	0009b0a9 	.word	0x0009b0a9
   9af18:	0009afc5 	.word	0x0009afc5
   9af1c:	0009aff5 	.word	0x0009aff5
   9af20:	0009b00d 	.word	0x0009b00d
   9af24:	0009b029 	.word	0x0009b029

0009af28 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   9af28:	b580      	push	{r7, lr}
   9af2a:	b084      	sub	sp, #16
   9af2c:	af00      	add	r7, sp, #0
   9af2e:	60f8      	str	r0, [r7, #12]
   9af30:	60b9      	str	r1, [r7, #8]
   9af32:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   9af34:	68f8      	ldr	r0, [r7, #12]
   9af36:	4b1a      	ldr	r3, [pc, #104]	; (9afa0 <usart_init_rs232+0x78>)
   9af38:	4798      	blx	r3

	ul_reg_val = 0;
   9af3a:	4b1a      	ldr	r3, [pc, #104]	; (9afa4 <usart_init_rs232+0x7c>)
   9af3c:	2200      	movs	r2, #0
   9af3e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   9af40:	68bb      	ldr	r3, [r7, #8]
   9af42:	2b00      	cmp	r3, #0
   9af44:	d009      	beq.n	9af5a <usart_init_rs232+0x32>
   9af46:	68bb      	ldr	r3, [r7, #8]
   9af48:	681b      	ldr	r3, [r3, #0]
   9af4a:	687a      	ldr	r2, [r7, #4]
   9af4c:	4619      	mov	r1, r3
   9af4e:	68f8      	ldr	r0, [r7, #12]
   9af50:	4b15      	ldr	r3, [pc, #84]	; (9afa8 <usart_init_rs232+0x80>)
   9af52:	4798      	blx	r3
   9af54:	4603      	mov	r3, r0
   9af56:	2b00      	cmp	r3, #0
   9af58:	d001      	beq.n	9af5e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   9af5a:	2301      	movs	r3, #1
   9af5c:	e01b      	b.n	9af96 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9af5e:	68bb      	ldr	r3, [r7, #8]
   9af60:	685a      	ldr	r2, [r3, #4]
   9af62:	68bb      	ldr	r3, [r7, #8]
   9af64:	689b      	ldr	r3, [r3, #8]
   9af66:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9af68:	68bb      	ldr	r3, [r7, #8]
   9af6a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9af6c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9af6e:	68bb      	ldr	r3, [r7, #8]
   9af70:	68db      	ldr	r3, [r3, #12]
   9af72:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9af74:	4b0b      	ldr	r3, [pc, #44]	; (9afa4 <usart_init_rs232+0x7c>)
   9af76:	681b      	ldr	r3, [r3, #0]
   9af78:	4313      	orrs	r3, r2
   9af7a:	4a0a      	ldr	r2, [pc, #40]	; (9afa4 <usart_init_rs232+0x7c>)
   9af7c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   9af7e:	4b09      	ldr	r3, [pc, #36]	; (9afa4 <usart_init_rs232+0x7c>)
   9af80:	681b      	ldr	r3, [r3, #0]
   9af82:	4a08      	ldr	r2, [pc, #32]	; (9afa4 <usart_init_rs232+0x7c>)
   9af84:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   9af86:	68fb      	ldr	r3, [r7, #12]
   9af88:	685a      	ldr	r2, [r3, #4]
   9af8a:	4b06      	ldr	r3, [pc, #24]	; (9afa4 <usart_init_rs232+0x7c>)
   9af8c:	681b      	ldr	r3, [r3, #0]
   9af8e:	431a      	orrs	r2, r3
   9af90:	68fb      	ldr	r3, [r7, #12]
   9af92:	605a      	str	r2, [r3, #4]

	return 0;
   9af94:	2300      	movs	r3, #0
}
   9af96:	4618      	mov	r0, r3
   9af98:	3710      	adds	r7, #16
   9af9a:	46bd      	mov	sp, r7
   9af9c:	bd80      	pop	{r7, pc}
   9af9e:	bf00      	nop
   9afa0:	0009aed5 	.word	0x0009aed5
   9afa4:	20071bc0 	.word	0x20071bc0
   9afa8:	0009ae4d 	.word	0x0009ae4d

0009afac <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   9afac:	b480      	push	{r7}
   9afae:	b083      	sub	sp, #12
   9afb0:	af00      	add	r7, sp, #0
   9afb2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   9afb4:	687b      	ldr	r3, [r7, #4]
   9afb6:	2240      	movs	r2, #64	; 0x40
   9afb8:	601a      	str	r2, [r3, #0]
}
   9afba:	bf00      	nop
   9afbc:	370c      	adds	r7, #12
   9afbe:	46bd      	mov	sp, r7
   9afc0:	bc80      	pop	{r7}
   9afc2:	4770      	bx	lr

0009afc4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   9afc4:	b480      	push	{r7}
   9afc6:	b083      	sub	sp, #12
   9afc8:	af00      	add	r7, sp, #0
   9afca:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   9afcc:	687b      	ldr	r3, [r7, #4]
   9afce:	2288      	movs	r2, #136	; 0x88
   9afd0:	601a      	str	r2, [r3, #0]
}
   9afd2:	bf00      	nop
   9afd4:	370c      	adds	r7, #12
   9afd6:	46bd      	mov	sp, r7
   9afd8:	bc80      	pop	{r7}
   9afda:	4770      	bx	lr

0009afdc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   9afdc:	b480      	push	{r7}
   9afde:	b083      	sub	sp, #12
   9afe0:	af00      	add	r7, sp, #0
   9afe2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   9afe4:	687b      	ldr	r3, [r7, #4]
   9afe6:	2210      	movs	r2, #16
   9afe8:	601a      	str	r2, [r3, #0]
}
   9afea:	bf00      	nop
   9afec:	370c      	adds	r7, #12
   9afee:	46bd      	mov	sp, r7
   9aff0:	bc80      	pop	{r7}
   9aff2:	4770      	bx	lr

0009aff4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   9aff4:	b480      	push	{r7}
   9aff6:	b083      	sub	sp, #12
   9aff8:	af00      	add	r7, sp, #0
   9affa:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   9affc:	687b      	ldr	r3, [r7, #4]
   9affe:	2224      	movs	r2, #36	; 0x24
   9b000:	601a      	str	r2, [r3, #0]
}
   9b002:	bf00      	nop
   9b004:	370c      	adds	r7, #12
   9b006:	46bd      	mov	sp, r7
   9b008:	bc80      	pop	{r7}
   9b00a:	4770      	bx	lr

0009b00c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   9b00c:	b480      	push	{r7}
   9b00e:	b083      	sub	sp, #12
   9b010:	af00      	add	r7, sp, #0
   9b012:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   9b014:	687b      	ldr	r3, [r7, #4]
   9b016:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b01a:	601a      	str	r2, [r3, #0]
}
   9b01c:	bf00      	nop
   9b01e:	370c      	adds	r7, #12
   9b020:	46bd      	mov	sp, r7
   9b022:	bc80      	pop	{r7}
   9b024:	4770      	bx	lr
   9b026:	bf00      	nop

0009b028 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   9b028:	b480      	push	{r7}
   9b02a:	b083      	sub	sp, #12
   9b02c:	af00      	add	r7, sp, #0
   9b02e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   9b030:	687b      	ldr	r3, [r7, #4]
   9b032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9b036:	601a      	str	r2, [r3, #0]
}
   9b038:	bf00      	nop
   9b03a:	370c      	adds	r7, #12
   9b03c:	46bd      	mov	sp, r7
   9b03e:	bc80      	pop	{r7}
   9b040:	4770      	bx	lr
   9b042:	bf00      	nop

0009b044 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   9b044:	b480      	push	{r7}
   9b046:	b083      	sub	sp, #12
   9b048:	af00      	add	r7, sp, #0
   9b04a:	6078      	str	r0, [r7, #4]
   9b04c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   9b04e:	687b      	ldr	r3, [r7, #4]
   9b050:	695b      	ldr	r3, [r3, #20]
   9b052:	f003 0302 	and.w	r3, r3, #2
   9b056:	2b00      	cmp	r3, #0
   9b058:	d101      	bne.n	9b05e <usart_write+0x1a>
		return 1;
   9b05a:	2301      	movs	r3, #1
   9b05c:	e005      	b.n	9b06a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   9b05e:	683b      	ldr	r3, [r7, #0]
   9b060:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9b064:	687b      	ldr	r3, [r7, #4]
   9b066:	61da      	str	r2, [r3, #28]
	return 0;
   9b068:	2300      	movs	r3, #0
}
   9b06a:	4618      	mov	r0, r3
   9b06c:	370c      	adds	r7, #12
   9b06e:	46bd      	mov	sp, r7
   9b070:	bc80      	pop	{r7}
   9b072:	4770      	bx	lr

0009b074 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   9b074:	b480      	push	{r7}
   9b076:	b083      	sub	sp, #12
   9b078:	af00      	add	r7, sp, #0
   9b07a:	6078      	str	r0, [r7, #4]
   9b07c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   9b07e:	687b      	ldr	r3, [r7, #4]
   9b080:	695b      	ldr	r3, [r3, #20]
   9b082:	f003 0301 	and.w	r3, r3, #1
   9b086:	2b00      	cmp	r3, #0
   9b088:	d101      	bne.n	9b08e <usart_read+0x1a>
		return 1;
   9b08a:	2301      	movs	r3, #1
   9b08c:	e006      	b.n	9b09c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   9b08e:	687b      	ldr	r3, [r7, #4]
   9b090:	699b      	ldr	r3, [r3, #24]
   9b092:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9b096:	683b      	ldr	r3, [r7, #0]
   9b098:	601a      	str	r2, [r3, #0]

	return 0;
   9b09a:	2300      	movs	r3, #0
}
   9b09c:	4618      	mov	r0, r3
   9b09e:	370c      	adds	r7, #12
   9b0a0:	46bd      	mov	sp, r7
   9b0a2:	bc80      	pop	{r7}
   9b0a4:	4770      	bx	lr
   9b0a6:	bf00      	nop

0009b0a8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   9b0a8:	b480      	push	{r7}
   9b0aa:	b083      	sub	sp, #12
   9b0ac:	af00      	add	r7, sp, #0
   9b0ae:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   9b0b0:	687b      	ldr	r3, [r7, #4]
   9b0b2:	4a04      	ldr	r2, [pc, #16]	; (9b0c4 <usart_disable_writeprotect+0x1c>)
   9b0b4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   9b0b8:	bf00      	nop
   9b0ba:	370c      	adds	r7, #12
   9b0bc:	46bd      	mov	sp, r7
   9b0be:	bc80      	pop	{r7}
   9b0c0:	4770      	bx	lr
   9b0c2:	bf00      	nop
   9b0c4:	55534100 	.word	0x55534100

0009b0c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   9b0c8:	b480      	push	{r7}
   9b0ca:	af00      	add	r7, sp, #0
	while (1) {
	}
   9b0cc:	e7fe      	b.n	9b0cc <Dummy_Handler+0x4>
   9b0ce:	bf00      	nop

0009b0d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   9b0d0:	b580      	push	{r7, lr}
   9b0d2:	b082      	sub	sp, #8
   9b0d4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   9b0d6:	4b1e      	ldr	r3, [pc, #120]	; (9b150 <Reset_Handler+0x80>)
   9b0d8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   9b0da:	4b1e      	ldr	r3, [pc, #120]	; (9b154 <Reset_Handler+0x84>)
   9b0dc:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   9b0de:	687a      	ldr	r2, [r7, #4]
   9b0e0:	683b      	ldr	r3, [r7, #0]
   9b0e2:	429a      	cmp	r2, r3
   9b0e4:	d00c      	beq.n	9b100 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9b0e6:	e007      	b.n	9b0f8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   9b0e8:	683b      	ldr	r3, [r7, #0]
   9b0ea:	1d1a      	adds	r2, r3, #4
   9b0ec:	603a      	str	r2, [r7, #0]
   9b0ee:	687a      	ldr	r2, [r7, #4]
   9b0f0:	1d11      	adds	r1, r2, #4
   9b0f2:	6079      	str	r1, [r7, #4]
   9b0f4:	6812      	ldr	r2, [r2, #0]
   9b0f6:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   9b0f8:	683b      	ldr	r3, [r7, #0]
   9b0fa:	4a17      	ldr	r2, [pc, #92]	; (9b158 <Reset_Handler+0x88>)
   9b0fc:	4293      	cmp	r3, r2
   9b0fe:	d3f3      	bcc.n	9b0e8 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9b100:	4b16      	ldr	r3, [pc, #88]	; (9b15c <Reset_Handler+0x8c>)
   9b102:	603b      	str	r3, [r7, #0]
   9b104:	e004      	b.n	9b110 <Reset_Handler+0x40>
		*pDest++ = 0;
   9b106:	683b      	ldr	r3, [r7, #0]
   9b108:	1d1a      	adds	r2, r3, #4
   9b10a:	603a      	str	r2, [r7, #0]
   9b10c:	2200      	movs	r2, #0
   9b10e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9b110:	683b      	ldr	r3, [r7, #0]
   9b112:	4a13      	ldr	r2, [pc, #76]	; (9b160 <Reset_Handler+0x90>)
   9b114:	4293      	cmp	r3, r2
   9b116:	d3f6      	bcc.n	9b106 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   9b118:	4b12      	ldr	r3, [pc, #72]	; (9b164 <Reset_Handler+0x94>)
   9b11a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9b11c:	4a12      	ldr	r2, [pc, #72]	; (9b168 <Reset_Handler+0x98>)
   9b11e:	687b      	ldr	r3, [r7, #4]
   9b120:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   9b124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9b128:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9b12a:	687b      	ldr	r3, [r7, #4]
   9b12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9b130:	d309      	bcc.n	9b146 <Reset_Handler+0x76>
   9b132:	687b      	ldr	r3, [r7, #4]
   9b134:	4a0d      	ldr	r2, [pc, #52]	; (9b16c <Reset_Handler+0x9c>)
   9b136:	4293      	cmp	r3, r2
   9b138:	d805      	bhi.n	9b146 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9b13a:	4a0b      	ldr	r2, [pc, #44]	; (9b168 <Reset_Handler+0x98>)
   9b13c:	4b0a      	ldr	r3, [pc, #40]	; (9b168 <Reset_Handler+0x98>)
   9b13e:	689b      	ldr	r3, [r3, #8]
   9b140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   9b144:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9b146:	4b0a      	ldr	r3, [pc, #40]	; (9b170 <Reset_Handler+0xa0>)
   9b148:	4798      	blx	r3

	/* Branch to main function */
	main();
   9b14a:	4b0a      	ldr	r3, [pc, #40]	; (9b174 <Reset_Handler+0xa4>)
   9b14c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   9b14e:	e7fe      	b.n	9b14e <Reset_Handler+0x7e>
   9b150:	000a8acc 	.word	0x000a8acc
   9b154:	20070000 	.word	0x20070000
   9b158:	200715f4 	.word	0x200715f4
   9b15c:	200715f4 	.word	0x200715f4
   9b160:	2007282c 	.word	0x2007282c
   9b164:	00080000 	.word	0x00080000
   9b168:	e000ed00 	.word	0xe000ed00
   9b16c:	200fffff 	.word	0x200fffff
   9b170:	000a69a9 	.word	0x000a69a9
   9b174:	0008ba9d 	.word	0x0008ba9d

0009b178 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   9b178:	b480      	push	{r7}
   9b17a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   9b17c:	4b57      	ldr	r3, [pc, #348]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b180:	f003 0303 	and.w	r3, r3, #3
   9b184:	2b03      	cmp	r3, #3
   9b186:	f200 808a 	bhi.w	9b29e <SystemCoreClockUpdate+0x126>
   9b18a:	a201      	add	r2, pc, #4	; (adr r2, 9b190 <SystemCoreClockUpdate+0x18>)
   9b18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b190:	0009b1a1 	.word	0x0009b1a1
   9b194:	0009b1c1 	.word	0x0009b1c1
   9b198:	0009b211 	.word	0x0009b211
   9b19c:	0009b211 	.word	0x0009b211
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   9b1a0:	4b4f      	ldr	r3, [pc, #316]	; (9b2e0 <SystemCoreClockUpdate+0x168>)
   9b1a2:	695b      	ldr	r3, [r3, #20]
   9b1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9b1a8:	2b00      	cmp	r3, #0
   9b1aa:	d004      	beq.n	9b1b6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   9b1ac:	4b4d      	ldr	r3, [pc, #308]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9b1b2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   9b1b4:	e073      	b.n	9b29e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   9b1b6:	4b4b      	ldr	r3, [pc, #300]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   9b1bc:	601a      	str	r2, [r3, #0]
		}
		break;
   9b1be:	e06e      	b.n	9b29e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9b1c0:	4b46      	ldr	r3, [pc, #280]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b1c2:	6a1b      	ldr	r3, [r3, #32]
   9b1c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9b1c8:	2b00      	cmp	r3, #0
   9b1ca:	d003      	beq.n	9b1d4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9b1cc:	4b45      	ldr	r3, [pc, #276]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1ce:	4a46      	ldr	r2, [pc, #280]	; (9b2e8 <SystemCoreClockUpdate+0x170>)
   9b1d0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   9b1d2:	e064      	b.n	9b29e <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9b1d4:	4b43      	ldr	r3, [pc, #268]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1d6:	4a45      	ldr	r2, [pc, #276]	; (9b2ec <SystemCoreClockUpdate+0x174>)
   9b1d8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9b1da:	4b40      	ldr	r3, [pc, #256]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b1dc:	6a1b      	ldr	r3, [r3, #32]
   9b1de:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b1e2:	2b10      	cmp	r3, #16
   9b1e4:	d004      	beq.n	9b1f0 <SystemCoreClockUpdate+0x78>
   9b1e6:	2b20      	cmp	r3, #32
   9b1e8:	d008      	beq.n	9b1fc <SystemCoreClockUpdate+0x84>
   9b1ea:	2b00      	cmp	r3, #0
   9b1ec:	d00e      	beq.n	9b20c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9b1ee:	e00e      	b.n	9b20e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9b1f0:	4b3c      	ldr	r3, [pc, #240]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1f2:	681b      	ldr	r3, [r3, #0]
   9b1f4:	005b      	lsls	r3, r3, #1
   9b1f6:	4a3b      	ldr	r2, [pc, #236]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1f8:	6013      	str	r3, [r2, #0]
				break;
   9b1fa:	e008      	b.n	9b20e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9b1fc:	4b39      	ldr	r3, [pc, #228]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b1fe:	681a      	ldr	r2, [r3, #0]
   9b200:	4613      	mov	r3, r2
   9b202:	005b      	lsls	r3, r3, #1
   9b204:	4413      	add	r3, r2
   9b206:	4a37      	ldr	r2, [pc, #220]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b208:	6013      	str	r3, [r2, #0]
				break;
   9b20a:	e000      	b.n	9b20e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9b20c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   9b20e:	e046      	b.n	9b29e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9b210:	4b32      	ldr	r3, [pc, #200]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b212:	6a1b      	ldr	r3, [r3, #32]
   9b214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9b218:	2b00      	cmp	r3, #0
   9b21a:	d003      	beq.n	9b224 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9b21c:	4b31      	ldr	r3, [pc, #196]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b21e:	4a32      	ldr	r2, [pc, #200]	; (9b2e8 <SystemCoreClockUpdate+0x170>)
   9b220:	601a      	str	r2, [r3, #0]
   9b222:	e01c      	b.n	9b25e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9b224:	4b2f      	ldr	r3, [pc, #188]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b226:	4a31      	ldr	r2, [pc, #196]	; (9b2ec <SystemCoreClockUpdate+0x174>)
   9b228:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9b22a:	4b2c      	ldr	r3, [pc, #176]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b22c:	6a1b      	ldr	r3, [r3, #32]
   9b22e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b232:	2b10      	cmp	r3, #16
   9b234:	d004      	beq.n	9b240 <SystemCoreClockUpdate+0xc8>
   9b236:	2b20      	cmp	r3, #32
   9b238:	d008      	beq.n	9b24c <SystemCoreClockUpdate+0xd4>
   9b23a:	2b00      	cmp	r3, #0
   9b23c:	d00e      	beq.n	9b25c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9b23e:	e00e      	b.n	9b25e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9b240:	4b28      	ldr	r3, [pc, #160]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b242:	681b      	ldr	r3, [r3, #0]
   9b244:	005b      	lsls	r3, r3, #1
   9b246:	4a27      	ldr	r2, [pc, #156]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b248:	6013      	str	r3, [r2, #0]
				break;
   9b24a:	e008      	b.n	9b25e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9b24c:	4b25      	ldr	r3, [pc, #148]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b24e:	681a      	ldr	r2, [r3, #0]
   9b250:	4613      	mov	r3, r2
   9b252:	005b      	lsls	r3, r3, #1
   9b254:	4413      	add	r3, r2
   9b256:	4a23      	ldr	r2, [pc, #140]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b258:	6013      	str	r3, [r2, #0]
				break;
   9b25a:	e000      	b.n	9b25e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9b25c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   9b25e:	4b1f      	ldr	r3, [pc, #124]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b262:	f003 0303 	and.w	r3, r3, #3
   9b266:	2b02      	cmp	r3, #2
   9b268:	d115      	bne.n	9b296 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9b26a:	4b1c      	ldr	r3, [pc, #112]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b26c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   9b26e:	4b20      	ldr	r3, [pc, #128]	; (9b2f0 <SystemCoreClockUpdate+0x178>)
   9b270:	4013      	ands	r3, r2
   9b272:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   9b274:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9b276:	4a1b      	ldr	r2, [pc, #108]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b278:	6812      	ldr	r2, [r2, #0]
   9b27a:	fb02 f303 	mul.w	r3, r2, r3
   9b27e:	4a19      	ldr	r2, [pc, #100]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b280:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9b282:	4b16      	ldr	r3, [pc, #88]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   9b286:	b2db      	uxtb	r3, r3
   9b288:	4a16      	ldr	r2, [pc, #88]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b28a:	6812      	ldr	r2, [r2, #0]
   9b28c:	fbb2 f3f3 	udiv	r3, r2, r3
   9b290:	4a14      	ldr	r2, [pc, #80]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b292:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   9b294:	e002      	b.n	9b29c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   9b296:	4b13      	ldr	r3, [pc, #76]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b298:	4a16      	ldr	r2, [pc, #88]	; (9b2f4 <SystemCoreClockUpdate+0x17c>)
   9b29a:	601a      	str	r2, [r3, #0]
		}
		break;
   9b29c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9b29e:	4b0f      	ldr	r3, [pc, #60]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b2a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b2a6:	2b70      	cmp	r3, #112	; 0x70
   9b2a8:	d108      	bne.n	9b2bc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   9b2aa:	4b0e      	ldr	r3, [pc, #56]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b2ac:	681b      	ldr	r3, [r3, #0]
   9b2ae:	4a12      	ldr	r2, [pc, #72]	; (9b2f8 <SystemCoreClockUpdate+0x180>)
   9b2b0:	fba2 2303 	umull	r2, r3, r2, r3
   9b2b4:	085b      	lsrs	r3, r3, #1
   9b2b6:	4a0b      	ldr	r2, [pc, #44]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b2b8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   9b2ba:	e00a      	b.n	9b2d2 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9b2bc:	4b07      	ldr	r3, [pc, #28]	; (9b2dc <SystemCoreClockUpdate+0x164>)
   9b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b2c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b2c4:	091b      	lsrs	r3, r3, #4
   9b2c6:	4a07      	ldr	r2, [pc, #28]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b2c8:	6812      	ldr	r2, [r2, #0]
   9b2ca:	fa22 f303 	lsr.w	r3, r2, r3
   9b2ce:	4a05      	ldr	r2, [pc, #20]	; (9b2e4 <SystemCoreClockUpdate+0x16c>)
   9b2d0:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   9b2d2:	bf00      	nop
   9b2d4:	46bd      	mov	sp, r7
   9b2d6:	bc80      	pop	{r7}
   9b2d8:	4770      	bx	lr
   9b2da:	bf00      	nop
   9b2dc:	400e0600 	.word	0x400e0600
   9b2e0:	400e1a10 	.word	0x400e1a10
   9b2e4:	20070b70 	.word	0x20070b70
   9b2e8:	00b71b00 	.word	0x00b71b00
   9b2ec:	003d0900 	.word	0x003d0900
   9b2f0:	07ff0000 	.word	0x07ff0000
   9b2f4:	0e4e1c00 	.word	0x0e4e1c00
   9b2f8:	aaaaaaab 	.word	0xaaaaaaab

0009b2fc <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   9b2fc:	b480      	push	{r7}
   9b2fe:	b083      	sub	sp, #12
   9b300:	af00      	add	r7, sp, #0
   9b302:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   9b304:	687b      	ldr	r3, [r7, #4]
   9b306:	4a25      	ldr	r2, [pc, #148]	; (9b39c <system_init_flash+0xa0>)
   9b308:	4293      	cmp	r3, r2
   9b30a:	d806      	bhi.n	9b31a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   9b30c:	4b24      	ldr	r3, [pc, #144]	; (9b3a0 <system_init_flash+0xa4>)
   9b30e:	2200      	movs	r2, #0
   9b310:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   9b312:	4b24      	ldr	r3, [pc, #144]	; (9b3a4 <system_init_flash+0xa8>)
   9b314:	2200      	movs	r2, #0
   9b316:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9b318:	e03b      	b.n	9b392 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9b31a:	687b      	ldr	r3, [r7, #4]
   9b31c:	4a22      	ldr	r2, [pc, #136]	; (9b3a8 <system_init_flash+0xac>)
   9b31e:	4293      	cmp	r3, r2
   9b320:	d808      	bhi.n	9b334 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   9b322:	4b1f      	ldr	r3, [pc, #124]	; (9b3a0 <system_init_flash+0xa4>)
   9b324:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b328:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9b32a:	4b1e      	ldr	r3, [pc, #120]	; (9b3a4 <system_init_flash+0xa8>)
   9b32c:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b330:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9b332:	e02e      	b.n	9b392 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   9b334:	687b      	ldr	r3, [r7, #4]
   9b336:	4a1d      	ldr	r2, [pc, #116]	; (9b3ac <system_init_flash+0xb0>)
   9b338:	4293      	cmp	r3, r2
   9b33a:	d808      	bhi.n	9b34e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   9b33c:	4b18      	ldr	r3, [pc, #96]	; (9b3a0 <system_init_flash+0xa4>)
   9b33e:	f44f 7200 	mov.w	r2, #512	; 0x200
   9b342:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   9b344:	4b17      	ldr	r3, [pc, #92]	; (9b3a4 <system_init_flash+0xa8>)
   9b346:	f44f 7200 	mov.w	r2, #512	; 0x200
   9b34a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9b34c:	e021      	b.n	9b392 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   9b34e:	687b      	ldr	r3, [r7, #4]
   9b350:	4a17      	ldr	r2, [pc, #92]	; (9b3b0 <system_init_flash+0xb4>)
   9b352:	4293      	cmp	r3, r2
   9b354:	d808      	bhi.n	9b368 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9b356:	4b12      	ldr	r3, [pc, #72]	; (9b3a0 <system_init_flash+0xa4>)
   9b358:	f44f 7240 	mov.w	r2, #768	; 0x300
   9b35c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   9b35e:	4b11      	ldr	r3, [pc, #68]	; (9b3a4 <system_init_flash+0xa8>)
   9b360:	f44f 7240 	mov.w	r2, #768	; 0x300
   9b364:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9b366:	e014      	b.n	9b392 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   9b368:	687b      	ldr	r3, [r7, #4]
   9b36a:	4a12      	ldr	r2, [pc, #72]	; (9b3b4 <system_init_flash+0xb8>)
   9b36c:	4293      	cmp	r3, r2
   9b36e:	d808      	bhi.n	9b382 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   9b370:	4b0b      	ldr	r3, [pc, #44]	; (9b3a0 <system_init_flash+0xa4>)
   9b372:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9b376:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   9b378:	4b0a      	ldr	r3, [pc, #40]	; (9b3a4 <system_init_flash+0xa8>)
   9b37a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9b37e:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   9b380:	e007      	b.n	9b392 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   9b382:	4b07      	ldr	r3, [pc, #28]	; (9b3a0 <system_init_flash+0xa4>)
   9b384:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9b388:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   9b38a:	4b06      	ldr	r3, [pc, #24]	; (9b3a4 <system_init_flash+0xa8>)
   9b38c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9b390:	601a      	str	r2, [r3, #0]
	}
}
   9b392:	bf00      	nop
   9b394:	370c      	adds	r7, #12
   9b396:	46bd      	mov	sp, r7
   9b398:	bc80      	pop	{r7}
   9b39a:	4770      	bx	lr
   9b39c:	0121eabf 	.word	0x0121eabf
   9b3a0:	400e0a00 	.word	0x400e0a00
   9b3a4:	400e0c00 	.word	0x400e0c00
   9b3a8:	02faf07f 	.word	0x02faf07f
   9b3ac:	03d08fff 	.word	0x03d08fff
   9b3b0:	04c4b3ff 	.word	0x04c4b3ff
   9b3b4:	055d4a7f 	.word	0x055d4a7f

0009b3b8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   9b3b8:	b480      	push	{r7}
   9b3ba:	b085      	sub	sp, #20
   9b3bc:	af00      	add	r7, sp, #0
   9b3be:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   9b3c0:	4b0a      	ldr	r3, [pc, #40]	; (9b3ec <_sbrk+0x34>)
   9b3c2:	681b      	ldr	r3, [r3, #0]
   9b3c4:	2b00      	cmp	r3, #0
   9b3c6:	d102      	bne.n	9b3ce <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   9b3c8:	4b08      	ldr	r3, [pc, #32]	; (9b3ec <_sbrk+0x34>)
   9b3ca:	4a09      	ldr	r2, [pc, #36]	; (9b3f0 <_sbrk+0x38>)
   9b3cc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   9b3ce:	4b07      	ldr	r3, [pc, #28]	; (9b3ec <_sbrk+0x34>)
   9b3d0:	681b      	ldr	r3, [r3, #0]
   9b3d2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   9b3d4:	4b05      	ldr	r3, [pc, #20]	; (9b3ec <_sbrk+0x34>)
   9b3d6:	681a      	ldr	r2, [r3, #0]
   9b3d8:	687b      	ldr	r3, [r7, #4]
   9b3da:	4413      	add	r3, r2
   9b3dc:	4a03      	ldr	r2, [pc, #12]	; (9b3ec <_sbrk+0x34>)
   9b3de:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   9b3e0:	68fb      	ldr	r3, [r7, #12]
}
   9b3e2:	4618      	mov	r0, r3
   9b3e4:	3714      	adds	r7, #20
   9b3e6:	46bd      	mov	sp, r7
   9b3e8:	bc80      	pop	{r7}
   9b3ea:	4770      	bx	lr
   9b3ec:	20071bc4 	.word	0x20071bc4
   9b3f0:	20074830 	.word	0x20074830

0009b3f4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   9b3f4:	b480      	push	{r7}
   9b3f6:	b083      	sub	sp, #12
   9b3f8:	af00      	add	r7, sp, #0
   9b3fa:	6078      	str	r0, [r7, #4]
	return -1;
   9b3fc:	f04f 33ff 	mov.w	r3, #4294967295
}
   9b400:	4618      	mov	r0, r3
   9b402:	370c      	adds	r7, #12
   9b404:	46bd      	mov	sp, r7
   9b406:	bc80      	pop	{r7}
   9b408:	4770      	bx	lr
   9b40a:	bf00      	nop

0009b40c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   9b40c:	b480      	push	{r7}
   9b40e:	b083      	sub	sp, #12
   9b410:	af00      	add	r7, sp, #0
   9b412:	6078      	str	r0, [r7, #4]
   9b414:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9b416:	683b      	ldr	r3, [r7, #0]
   9b418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   9b41c:	605a      	str	r2, [r3, #4]

	return 0;
   9b41e:	2300      	movs	r3, #0
}
   9b420:	4618      	mov	r0, r3
   9b422:	370c      	adds	r7, #12
   9b424:	46bd      	mov	sp, r7
   9b426:	bc80      	pop	{r7}
   9b428:	4770      	bx	lr
   9b42a:	bf00      	nop

0009b42c <_isatty>:

extern int _isatty(int file)
{
   9b42c:	b480      	push	{r7}
   9b42e:	b083      	sub	sp, #12
   9b430:	af00      	add	r7, sp, #0
   9b432:	6078      	str	r0, [r7, #4]
	return 1;
   9b434:	2301      	movs	r3, #1
}
   9b436:	4618      	mov	r0, r3
   9b438:	370c      	adds	r7, #12
   9b43a:	46bd      	mov	sp, r7
   9b43c:	bc80      	pop	{r7}
   9b43e:	4770      	bx	lr

0009b440 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   9b440:	b480      	push	{r7}
   9b442:	b085      	sub	sp, #20
   9b444:	af00      	add	r7, sp, #0
   9b446:	60f8      	str	r0, [r7, #12]
   9b448:	60b9      	str	r1, [r7, #8]
   9b44a:	607a      	str	r2, [r7, #4]
	return 0;
   9b44c:	2300      	movs	r3, #0
}
   9b44e:	4618      	mov	r0, r3
   9b450:	3714      	adds	r7, #20
   9b452:	46bd      	mov	sp, r7
   9b454:	bc80      	pop	{r7}
   9b456:	4770      	bx	lr

0009b458 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   9b458:	b480      	push	{r7}
   9b45a:	b083      	sub	sp, #12
   9b45c:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   9b45e:	2304      	movs	r3, #4
   9b460:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   9b462:	4b0b      	ldr	r3, [pc, #44]	; (9b490 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   9b464:	7e1b      	ldrb	r3, [r3, #24]
   9b466:	2b00      	cmp	r3, #0
   9b468:	d002      	beq.n	9b470 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   9b46a:	2300      	movs	r3, #0
   9b46c:	71fb      	strb	r3, [r7, #7]
   9b46e:	e008      	b.n	9b482 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   9b470:	4b08      	ldr	r3, [pc, #32]	; (9b494 <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   9b472:	7e1b      	ldrb	r3, [r3, #24]
   9b474:	2b00      	cmp	r3, #0
   9b476:	d002      	beq.n	9b47e <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   9b478:	2300      	movs	r3, #0
   9b47a:	71fb      	strb	r3, [r7, #7]
   9b47c:	e001      	b.n	9b482 <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   9b47e:	2301      	movs	r3, #1
   9b480:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   9b482:	79fb      	ldrb	r3, [r7, #7]
}
   9b484:	4618      	mov	r0, r3
   9b486:	370c      	adds	r7, #12
   9b488:	46bd      	mov	sp, r7
   9b48a:	bc80      	pop	{r7}
   9b48c:	4770      	bx	lr
   9b48e:	bf00      	nop
   9b490:	20072404 	.word	0x20072404
   9b494:	20072270 	.word	0x20072270

0009b498 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   9b498:	b480      	push	{r7}
   9b49a:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9b49c:	4b05      	ldr	r3, [pc, #20]	; (9b4b4 <Cl_Console_Read_Message_Ready_Status+0x1c>)
   9b49e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   9b4a2:	2b00      	cmp	r3, #0
   9b4a4:	d001      	beq.n	9b4aa <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   9b4a6:	2300      	movs	r3, #0
   9b4a8:	e000      	b.n	9b4ac <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9b4aa:	2301      	movs	r3, #1
	}
	
}
   9b4ac:	4618      	mov	r0, r3
   9b4ae:	46bd      	mov	sp, r7
   9b4b0:	bc80      	pop	{r7}
   9b4b2:	4770      	bx	lr
   9b4b4:	200721ec 	.word	0x200721ec

0009b4b8 <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   9b4b8:	b480      	push	{r7}
   9b4ba:	b083      	sub	sp, #12
   9b4bc:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   9b4be:	4b54      	ldr	r3, [pc, #336]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b4c0:	7e1b      	ldrb	r3, [r3, #24]
   9b4c2:	2b00      	cmp	r3, #0
   9b4c4:	d03c      	beq.n	9b540 <Cl_Console_Read_Message_Console+0x88>
   9b4c6:	4b52      	ldr	r3, [pc, #328]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b4c8:	7e5b      	ldrb	r3, [r3, #25]
   9b4ca:	f083 0301 	eor.w	r3, r3, #1
   9b4ce:	b2db      	uxtb	r3, r3
   9b4d0:	2b00      	cmp	r3, #0
   9b4d2:	d035      	beq.n	9b540 <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b4d4:	4b4f      	ldr	r3, [pc, #316]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b4d6:	2200      	movs	r2, #0
   9b4d8:	701a      	strb	r2, [r3, #0]
   9b4da:	2300      	movs	r3, #0
   9b4dc:	71fb      	strb	r3, [r7, #7]
   9b4de:	e010      	b.n	9b502 <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   9b4e0:	4b4c      	ldr	r3, [pc, #304]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b4e2:	781b      	ldrb	r3, [r3, #0]
   9b4e4:	4619      	mov	r1, r3
   9b4e6:	79fb      	ldrb	r3, [r7, #7]
   9b4e8:	4a49      	ldr	r2, [pc, #292]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b4ea:	5cd2      	ldrb	r2, [r2, r3]
   9b4ec:	4b4a      	ldr	r3, [pc, #296]	; (9b618 <Cl_Console_Read_Message_Console+0x160>)
   9b4ee:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b4f0:	4b48      	ldr	r3, [pc, #288]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b4f2:	781b      	ldrb	r3, [r3, #0]
   9b4f4:	3301      	adds	r3, #1
   9b4f6:	b2da      	uxtb	r2, r3
   9b4f8:	4b46      	ldr	r3, [pc, #280]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b4fa:	701a      	strb	r2, [r3, #0]
   9b4fc:	79fb      	ldrb	r3, [r7, #7]
   9b4fe:	3301      	adds	r3, #1
   9b500:	71fb      	strb	r3, [r7, #7]
   9b502:	4b43      	ldr	r3, [pc, #268]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b504:	7d1b      	ldrb	r3, [r3, #20]
   9b506:	79fa      	ldrb	r2, [r7, #7]
   9b508:	429a      	cmp	r2, r3
   9b50a:	d3e9      	bcc.n	9b4e0 <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   9b50c:	4b40      	ldr	r3, [pc, #256]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b50e:	7f5b      	ldrb	r3, [r3, #29]
   9b510:	f083 0301 	eor.w	r3, r3, #1
   9b514:	b2db      	uxtb	r3, r3
   9b516:	2b00      	cmp	r3, #0
   9b518:	d003      	beq.n	9b522 <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9b51a:	4b3f      	ldr	r3, [pc, #252]	; (9b618 <Cl_Console_Read_Message_Console+0x160>)
   9b51c:	2201      	movs	r2, #1
   9b51e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9b522:	4b3b      	ldr	r3, [pc, #236]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b524:	2201      	movs	r2, #1
   9b526:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9b528:	4b39      	ldr	r3, [pc, #228]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b52a:	2200      	movs	r2, #0
   9b52c:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   9b52e:	4b38      	ldr	r3, [pc, #224]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b530:	2200      	movs	r2, #0
   9b532:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9b534:	4b36      	ldr	r3, [pc, #216]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b536:	2200      	movs	r2, #0
   9b538:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   9b53a:	4b35      	ldr	r3, [pc, #212]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b53c:	2201      	movs	r2, #1
   9b53e:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   9b540:	4b36      	ldr	r3, [pc, #216]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b542:	7e1b      	ldrb	r3, [r3, #24]
   9b544:	2b00      	cmp	r3, #0
   9b546:	d05c      	beq.n	9b602 <Cl_Console_Read_Message_Console+0x14a>
   9b548:	4b34      	ldr	r3, [pc, #208]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b54a:	7e5b      	ldrb	r3, [r3, #25]
   9b54c:	f083 0301 	eor.w	r3, r3, #1
   9b550:	b2db      	uxtb	r3, r3
   9b552:	2b00      	cmp	r3, #0
   9b554:	d055      	beq.n	9b602 <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   9b556:	4b2e      	ldr	r3, [pc, #184]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b558:	7f5b      	ldrb	r3, [r3, #29]
   9b55a:	f083 0301 	eor.w	r3, r3, #1
   9b55e:	b2db      	uxtb	r3, r3
   9b560:	2b00      	cmp	r3, #0
   9b562:	d002      	beq.n	9b56a <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   9b564:	4b2b      	ldr	r3, [pc, #172]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b566:	2200      	movs	r2, #0
   9b568:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b56a:	2300      	movs	r3, #0
   9b56c:	71fb      	strb	r3, [r7, #7]
   9b56e:	e010      	b.n	9b592 <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   9b570:	4b28      	ldr	r3, [pc, #160]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b572:	781b      	ldrb	r3, [r3, #0]
   9b574:	4619      	mov	r1, r3
   9b576:	79fb      	ldrb	r3, [r7, #7]
   9b578:	4a28      	ldr	r2, [pc, #160]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b57a:	5cd2      	ldrb	r2, [r2, r3]
   9b57c:	4b26      	ldr	r3, [pc, #152]	; (9b618 <Cl_Console_Read_Message_Console+0x160>)
   9b57e:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b580:	4b24      	ldr	r3, [pc, #144]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b582:	781b      	ldrb	r3, [r3, #0]
   9b584:	3301      	adds	r3, #1
   9b586:	b2da      	uxtb	r2, r3
   9b588:	4b22      	ldr	r3, [pc, #136]	; (9b614 <Cl_Console_Read_Message_Console+0x15c>)
   9b58a:	701a      	strb	r2, [r3, #0]
   9b58c:	79fb      	ldrb	r3, [r7, #7]
   9b58e:	3301      	adds	r3, #1
   9b590:	71fb      	strb	r3, [r7, #7]
   9b592:	4b22      	ldr	r3, [pc, #136]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b594:	7d1b      	ldrb	r3, [r3, #20]
   9b596:	79fa      	ldrb	r2, [r7, #7]
   9b598:	429a      	cmp	r2, r3
   9b59a:	d3e9      	bcc.n	9b570 <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   9b59c:	4b1f      	ldr	r3, [pc, #124]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b59e:	7f5b      	ldrb	r3, [r3, #29]
   9b5a0:	f083 0301 	eor.w	r3, r3, #1
   9b5a4:	b2db      	uxtb	r3, r3
   9b5a6:	2b00      	cmp	r3, #0
   9b5a8:	d003      	beq.n	9b5b2 <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9b5aa:	4b1b      	ldr	r3, [pc, #108]	; (9b618 <Cl_Console_Read_Message_Console+0x160>)
   9b5ac:	2201      	movs	r2, #1
   9b5ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   9b5b2:	4b1a      	ldr	r3, [pc, #104]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5b4:	2201      	movs	r2, #1
   9b5b6:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9b5b8:	4b18      	ldr	r3, [pc, #96]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5ba:	2200      	movs	r2, #0
   9b5bc:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   9b5be:	4b17      	ldr	r3, [pc, #92]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5c0:	2200      	movs	r2, #0
   9b5c2:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   9b5c4:	4b15      	ldr	r3, [pc, #84]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5c6:	2200      	movs	r2, #0
   9b5c8:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   9b5ca:	4b14      	ldr	r3, [pc, #80]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5cc:	2201      	movs	r2, #1
   9b5ce:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   9b5d0:	4b0f      	ldr	r3, [pc, #60]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5d2:	7f5b      	ldrb	r3, [r3, #29]
   9b5d4:	2b00      	cmp	r3, #0
   9b5d6:	d014      	beq.n	9b602 <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9b5d8:	4b0d      	ldr	r3, [pc, #52]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5da:	2201      	movs	r2, #1
   9b5dc:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9b5de:	4b0c      	ldr	r3, [pc, #48]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5e0:	2200      	movs	r2, #0
   9b5e2:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   9b5e4:	4b0a      	ldr	r3, [pc, #40]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5e6:	2200      	movs	r2, #0
   9b5e8:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   9b5ea:	4b09      	ldr	r3, [pc, #36]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5ec:	2200      	movs	r2, #0
   9b5ee:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   9b5f0:	4b0a      	ldr	r3, [pc, #40]	; (9b61c <Cl_Console_Read_Message_Console+0x164>)
   9b5f2:	2200      	movs	r2, #0
   9b5f4:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9b5f6:	4b06      	ldr	r3, [pc, #24]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5f8:	2200      	movs	r2, #0
   9b5fa:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   9b5fc:	4b04      	ldr	r3, [pc, #16]	; (9b610 <Cl_Console_Read_Message_Console+0x158>)
   9b5fe:	2201      	movs	r2, #1
   9b600:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   9b602:	2300      	movs	r3, #0
}
   9b604:	4618      	mov	r0, r3
   9b606:	370c      	adds	r7, #12
   9b608:	46bd      	mov	sp, r7
   9b60a:	bc80      	pop	{r7}
   9b60c:	4770      	bx	lr
   9b60e:	bf00      	nop
   9b610:	20072404 	.word	0x20072404
   9b614:	20071bce 	.word	0x20071bce
   9b618:	200721ec 	.word	0x200721ec
   9b61c:	20072270 	.word	0x20072270

0009b620 <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   9b620:	b580      	push	{r7, lr}
   9b622:	b084      	sub	sp, #16
   9b624:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9b626:	2300      	movs	r3, #0
   9b628:	70fb      	strb	r3, [r7, #3]
   9b62a:	2300      	movs	r3, #0
   9b62c:	60bb      	str	r3, [r7, #8]
   9b62e:	2300      	movs	r3, #0
   9b630:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9b632:	4b46      	ldr	r3, [pc, #280]	; (9b74c <Cl_Mac_Create_ConsoleEvent+0x12c>)
   9b634:	4a46      	ldr	r2, [pc, #280]	; (9b750 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b636:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9b638:	4b45      	ldr	r3, [pc, #276]	; (9b750 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b63a:	781a      	ldrb	r2, [r3, #0]
   9b63c:	4b45      	ldr	r3, [pc, #276]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b63e:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9b640:	4b43      	ldr	r3, [pc, #268]	; (9b750 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b642:	785a      	ldrb	r2, [r3, #1]
   9b644:	4b43      	ldr	r3, [pc, #268]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b646:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9b648:	4b43      	ldr	r3, [pc, #268]	; (9b758 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9b64a:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   9b64c:	4b43      	ldr	r3, [pc, #268]	; (9b75c <Cl_Mac_Create_ConsoleEvent+0x13c>)
   9b64e:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b650:	2300      	movs	r3, #0
   9b652:	73fb      	strb	r3, [r7, #15]
   9b654:	e00c      	b.n	9b670 <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   9b656:	687b      	ldr	r3, [r7, #4]
   9b658:	781a      	ldrb	r2, [r3, #0]
   9b65a:	68bb      	ldr	r3, [r7, #8]
   9b65c:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   9b65e:	68bb      	ldr	r3, [r7, #8]
   9b660:	3301      	adds	r3, #1
   9b662:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   9b664:	687b      	ldr	r3, [r7, #4]
   9b666:	3301      	adds	r3, #1
   9b668:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b66a:	7bfb      	ldrb	r3, [r7, #15]
   9b66c:	3301      	adds	r3, #1
   9b66e:	73fb      	strb	r3, [r7, #15]
   9b670:	4b38      	ldr	r3, [pc, #224]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b672:	78db      	ldrb	r3, [r3, #3]
   9b674:	7bfa      	ldrb	r2, [r7, #15]
   9b676:	429a      	cmp	r2, r3
   9b678:	d3ed      	bcc.n	9b656 <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   9b67a:	4b36      	ldr	r3, [pc, #216]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b67c:	789b      	ldrb	r3, [r3, #2]
   9b67e:	2b04      	cmp	r3, #4
   9b680:	d00f      	beq.n	9b6a2 <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   9b682:	4b37      	ldr	r3, [pc, #220]	; (9b760 <Cl_Mac_Create_ConsoleEvent+0x140>)
   9b684:	4798      	blx	r3
				test_counter++;
   9b686:	4b37      	ldr	r3, [pc, #220]	; (9b764 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b688:	881b      	ldrh	r3, [r3, #0]
   9b68a:	3301      	adds	r3, #1
   9b68c:	b29a      	uxth	r2, r3
   9b68e:	4b35      	ldr	r3, [pc, #212]	; (9b764 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b690:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   9b692:	4b34      	ldr	r3, [pc, #208]	; (9b764 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b694:	881b      	ldrh	r3, [r3, #0]
   9b696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9b69a:	d302      	bcc.n	9b6a2 <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   9b69c:	4b31      	ldr	r3, [pc, #196]	; (9b764 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b69e:	2200      	movs	r2, #0
   9b6a0:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9b6a2:	4b2c      	ldr	r3, [pc, #176]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b6a4:	789b      	ldrb	r3, [r3, #2]
   9b6a6:	2b17      	cmp	r3, #23
   9b6a8:	d103      	bne.n	9b6b2 <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9b6aa:	482a      	ldr	r0, [pc, #168]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b6ac:	4b2e      	ldr	r3, [pc, #184]	; (9b768 <Cl_Mac_Create_ConsoleEvent+0x148>)
   9b6ae:	4798      	blx	r3
   9b6b0:	e046      	b.n	9b740 <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   9b6b2:	4b28      	ldr	r3, [pc, #160]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b6b4:	2201      	movs	r2, #1
   9b6b6:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9b6b8:	4b25      	ldr	r3, [pc, #148]	; (9b750 <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b6ba:	2200      	movs	r2, #0
   9b6bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   9b6c0:	4b24      	ldr	r3, [pc, #144]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b6c2:	789b      	ldrb	r3, [r3, #2]
   9b6c4:	1cba      	adds	r2, r7, #2
   9b6c6:	4611      	mov	r1, r2
   9b6c8:	4618      	mov	r0, r3
   9b6ca:	4b28      	ldr	r3, [pc, #160]	; (9b76c <Cl_Mac_Create_ConsoleEvent+0x14c>)
   9b6cc:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   9b6ce:	78ba      	ldrb	r2, [r7, #2]
   9b6d0:	4b27      	ldr	r3, [pc, #156]	; (9b770 <Cl_Mac_Create_ConsoleEvent+0x150>)
   9b6d2:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   9b6d4:	4b27      	ldr	r3, [pc, #156]	; (9b774 <Cl_Mac_Create_ConsoleEvent+0x154>)
   9b6d6:	2201      	movs	r2, #1
   9b6d8:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9b6da:	4b27      	ldr	r3, [pc, #156]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b6dc:	781b      	ldrb	r3, [r3, #0]
   9b6de:	2b0a      	cmp	r3, #10
   9b6e0:	d82e      	bhi.n	9b740 <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   9b6e2:	4b25      	ldr	r3, [pc, #148]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b6e4:	781b      	ldrb	r3, [r3, #0]
   9b6e6:	4619      	mov	r1, r3
   9b6e8:	78ba      	ldrb	r2, [r7, #2]
   9b6ea:	4b23      	ldr	r3, [pc, #140]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b6ec:	440b      	add	r3, r1
   9b6ee:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9b6f0:	4b21      	ldr	r3, [pc, #132]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b6f2:	2201      	movs	r2, #1
   9b6f4:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9b6f6:	4b20      	ldr	r3, [pc, #128]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b6f8:	781b      	ldrb	r3, [r3, #0]
   9b6fa:	3301      	adds	r3, #1
   9b6fc:	b2da      	uxtb	r2, r3
   9b6fe:	4b1e      	ldr	r3, [pc, #120]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b700:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9b702:	4b15      	ldr	r3, [pc, #84]	; (9b758 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9b704:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   9b706:	4b1c      	ldr	r3, [pc, #112]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b708:	781b      	ldrb	r3, [r3, #0]
   9b70a:	3301      	adds	r3, #1
   9b70c:	00db      	lsls	r3, r3, #3
   9b70e:	4a1a      	ldr	r2, [pc, #104]	; (9b778 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b710:	4413      	add	r3, r2
   9b712:	3304      	adds	r3, #4
   9b714:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b716:	2300      	movs	r3, #0
   9b718:	73fb      	strb	r3, [r7, #15]
   9b71a:	e00c      	b.n	9b736 <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   9b71c:	687b      	ldr	r3, [r7, #4]
   9b71e:	781a      	ldrb	r2, [r3, #0]
   9b720:	68bb      	ldr	r3, [r7, #8]
   9b722:	701a      	strb	r2, [r3, #0]
					dataptr++;
   9b724:	68bb      	ldr	r3, [r7, #8]
   9b726:	3301      	adds	r3, #1
   9b728:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   9b72a:	687b      	ldr	r3, [r7, #4]
   9b72c:	3301      	adds	r3, #1
   9b72e:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b730:	7bfb      	ldrb	r3, [r7, #15]
   9b732:	3301      	adds	r3, #1
   9b734:	73fb      	strb	r3, [r7, #15]
   9b736:	4b07      	ldr	r3, [pc, #28]	; (9b754 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b738:	78db      	ldrb	r3, [r3, #3]
   9b73a:	7bfa      	ldrb	r2, [r7, #15]
   9b73c:	429a      	cmp	r2, r3
   9b73e:	d3ed      	bcc.n	9b71c <Cl_Mac_Create_ConsoleEvent+0xfc>
			}
	#endif
			 		
	}
		
		return CL_OK;
   9b740:	2300      	movs	r3, #0
}
   9b742:	4618      	mov	r0, r3
   9b744:	3710      	adds	r7, #16
   9b746:	46bd      	mov	sp, r7
   9b748:	bd80      	pop	{r7, pc}
   9b74a:	bf00      	nop
   9b74c:	20071bd0 	.word	0x20071bd0
   9b750:	200721ec 	.word	0x200721ec
   9b754:	200723e8 	.word	0x200723e8
   9b758:	200721ee 	.word	0x200721ee
   9b75c:	200723ec 	.word	0x200723ec
   9b760:	0009b77d 	.word	0x0009b77d
   9b764:	20071bca 	.word	0x20071bca
   9b768:	000900e9 	.word	0x000900e9
   9b76c:	0009b95d 	.word	0x0009b95d
   9b770:	200719d6 	.word	0x200719d6
   9b774:	200719d8 	.word	0x200719d8
   9b778:	20072424 	.word	0x20072424

0009b77c <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   9b77c:	b580      	push	{r7, lr}
   9b77e:	b082      	sub	sp, #8
   9b780:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   9b782:	2001      	movs	r0, #1
   9b784:	4b19      	ldr	r3, [pc, #100]	; (9b7ec <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   9b786:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9b788:	4b19      	ldr	r3, [pc, #100]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b78a:	22cc      	movs	r2, #204	; 0xcc
   9b78c:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   9b78e:	4b18      	ldr	r3, [pc, #96]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b790:	22dd      	movs	r2, #221	; 0xdd
   9b792:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   9b794:	4b16      	ldr	r3, [pc, #88]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b796:	2204      	movs	r2, #4
   9b798:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9b79a:	4b15      	ldr	r3, [pc, #84]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b79c:	2201      	movs	r2, #1
   9b79e:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   9b7a0:	4b14      	ldr	r3, [pc, #80]	; (9b7f4 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9b7a2:	789a      	ldrb	r2, [r3, #2]
   9b7a4:	4b12      	ldr	r3, [pc, #72]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b7a6:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9b7a8:	4b11      	ldr	r3, [pc, #68]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b7aa:	22ee      	movs	r2, #238	; 0xee
   9b7ac:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   9b7ae:	4b10      	ldr	r3, [pc, #64]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b7b0:	22bb      	movs	r2, #187	; 0xbb
   9b7b2:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   9b7b4:	2300      	movs	r3, #0
   9b7b6:	71fb      	strb	r3, [r7, #7]
   9b7b8:	e00f      	b.n	9b7da <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   9b7ba:	4b0f      	ldr	r3, [pc, #60]	; (9b7f8 <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   9b7bc:	2201      	movs	r2, #1
   9b7be:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   9b7c0:	79fb      	ldrb	r3, [r7, #7]
   9b7c2:	4a0b      	ldr	r2, [pc, #44]	; (9b7f0 <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b7c4:	5cd3      	ldrb	r3, [r2, r3]
   9b7c6:	4619      	mov	r1, r3
   9b7c8:	480c      	ldr	r0, [pc, #48]	; (9b7fc <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   9b7ca:	4b0d      	ldr	r3, [pc, #52]	; (9b800 <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   9b7cc:	4798      	blx	r3
   9b7ce:	4603      	mov	r3, r0
   9b7d0:	2b00      	cmp	r3, #0
   9b7d2:	d102      	bne.n	9b7da <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   9b7d4:	79fb      	ldrb	r3, [r7, #7]
   9b7d6:	3301      	adds	r3, #1
   9b7d8:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   9b7da:	79fb      	ldrb	r3, [r7, #7]
   9b7dc:	2b06      	cmp	r3, #6
   9b7de:	d9ec      	bls.n	9b7ba <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   9b7e0:	2300      	movs	r3, #0
}
   9b7e2:	4618      	mov	r0, r3
   9b7e4:	3708      	adds	r7, #8
   9b7e6:	46bd      	mov	sp, r7
   9b7e8:	bd80      	pop	{r7, pc}
   9b7ea:	bf00      	nop
   9b7ec:	00093009 	.word	0x00093009
   9b7f0:	20072290 	.word	0x20072290
   9b7f4:	200723e8 	.word	0x200723e8
   9b7f8:	20071bcd 	.word	0x20071bcd
   9b7fc:	400e0800 	.word	0x400e0800
   9b800:	0009add9 	.word	0x0009add9

0009b804 <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   9b804:	b580      	push	{r7, lr}
   9b806:	b086      	sub	sp, #24
   9b808:	af00      	add	r7, sp, #0
   9b80a:	4603      	mov	r3, r0
   9b80c:	6039      	str	r1, [r7, #0]
   9b80e:	71fb      	strb	r3, [r7, #7]
   9b810:	4613      	mov	r3, r2
   9b812:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   9b814:	2300      	movs	r3, #0
   9b816:	75fb      	strb	r3, [r7, #23]
   9b818:	2304      	movs	r3, #4
   9b81a:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   9b81c:	2300      	movs	r3, #0
   9b81e:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   9b820:	2300      	movs	r3, #0
   9b822:	613b      	str	r3, [r7, #16]
   9b824:	2300      	movs	r3, #0
   9b826:	60fb      	str	r3, [r7, #12]
		}
		
		
	}
	
	cur_command = command;
   9b828:	4a41      	ldr	r2, [pc, #260]	; (9b930 <Cl_SendDatatoconsole+0x12c>)
   9b82a:	79fb      	ldrb	r3, [r7, #7]
   9b82c:	7013      	strb	r3, [r2, #0]
	cur_data = data;
   9b82e:	683b      	ldr	r3, [r7, #0]
   9b830:	b2da      	uxtb	r2, r3
   9b832:	4b40      	ldr	r3, [pc, #256]	; (9b934 <Cl_SendDatatoconsole+0x130>)
   9b834:	701a      	strb	r2, [r3, #0]
	cur_datasize = datasize;
   9b836:	4a40      	ldr	r2, [pc, #256]	; (9b938 <Cl_SendDatatoconsole+0x134>)
   9b838:	79bb      	ldrb	r3, [r7, #6]
   9b83a:	7013      	strb	r3, [r2, #0]
	
	
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   9b83c:	79fb      	ldrb	r3, [r7, #7]
   9b83e:	2b36      	cmp	r3, #54	; 0x36
   9b840:	d102      	bne.n	9b848 <Cl_SendDatatoconsole+0x44>
	{
		syncdone = true;
   9b842:	4b3e      	ldr	r3, [pc, #248]	; (9b93c <Cl_SendDatatoconsole+0x138>)
   9b844:	2201      	movs	r2, #1
   9b846:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   9b848:	79bb      	ldrb	r3, [r7, #6]
   9b84a:	2b00      	cmp	r3, #0
   9b84c:	d004      	beq.n	9b858 <Cl_SendDatatoconsole+0x54>
	{
		if(data != NULL)
   9b84e:	683b      	ldr	r3, [r7, #0]
   9b850:	2b00      	cmp	r3, #0
   9b852:	d001      	beq.n	9b858 <Cl_SendDatatoconsole+0x54>
		{
			dataptr = data;	
   9b854:	683b      	ldr	r3, [r7, #0]
   9b856:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   9b858:	79bb      	ldrb	r3, [r7, #6]
   9b85a:	3306      	adds	r3, #6
   9b85c:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   9b85e:	4b38      	ldr	r3, [pc, #224]	; (9b940 <Cl_SendDatatoconsole+0x13c>)
   9b860:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   9b862:	4b38      	ldr	r3, [pc, #224]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b864:	22cc      	movs	r2, #204	; 0xcc
   9b866:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   9b868:	4b36      	ldr	r3, [pc, #216]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b86a:	22dd      	movs	r2, #221	; 0xdd
   9b86c:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   9b86e:	4a35      	ldr	r2, [pc, #212]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b870:	79fb      	ldrb	r3, [r7, #7]
   9b872:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9b874:	4a33      	ldr	r2, [pc, #204]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b876:	79bb      	ldrb	r3, [r7, #6]
   9b878:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9b87a:	2300      	movs	r3, #0
   9b87c:	75fb      	strb	r3, [r7, #23]
   9b87e:	e00c      	b.n	9b89a <Cl_SendDatatoconsole+0x96>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   9b880:	7dbb      	ldrb	r3, [r7, #22]
   9b882:	7dfa      	ldrb	r2, [r7, #23]
   9b884:	6839      	ldr	r1, [r7, #0]
   9b886:	440a      	add	r2, r1
   9b888:	7811      	ldrb	r1, [r2, #0]
   9b88a:	4a2e      	ldr	r2, [pc, #184]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b88c:	54d1      	strb	r1, [r2, r3]
		temp++;
   9b88e:	7dbb      	ldrb	r3, [r7, #22]
   9b890:	3301      	adds	r3, #1
   9b892:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9b894:	7dfb      	ldrb	r3, [r7, #23]
   9b896:	3301      	adds	r3, #1
   9b898:	75fb      	strb	r3, [r7, #23]
   9b89a:	7dfa      	ldrb	r2, [r7, #23]
   9b89c:	79bb      	ldrb	r3, [r7, #6]
   9b89e:	429a      	cmp	r2, r3
   9b8a0:	d3ee      	bcc.n	9b880 <Cl_SendDatatoconsole+0x7c>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9b8a2:	7dbb      	ldrb	r3, [r7, #22]
   9b8a4:	1c5a      	adds	r2, r3, #1
   9b8a6:	75ba      	strb	r2, [r7, #22]
   9b8a8:	461a      	mov	r2, r3
   9b8aa:	4b26      	ldr	r3, [pc, #152]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b8ac:	21ee      	movs	r1, #238	; 0xee
   9b8ae:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   9b8b0:	7dbb      	ldrb	r3, [r7, #22]
   9b8b2:	1c5a      	adds	r2, r3, #1
   9b8b4:	75ba      	strb	r2, [r7, #22]
   9b8b6:	461a      	mov	r2, r3
   9b8b8:	4b22      	ldr	r3, [pc, #136]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b8ba:	21bb      	movs	r1, #187	; 0xbb
   9b8bc:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   9b8be:	4b1f      	ldr	r3, [pc, #124]	; (9b93c <Cl_SendDatatoconsole+0x138>)
   9b8c0:	781b      	ldrb	r3, [r3, #0]
   9b8c2:	2b00      	cmp	r3, #0
   9b8c4:	d013      	beq.n	9b8ee <Cl_SendDatatoconsole+0xea>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9b8c6:	4b20      	ldr	r3, [pc, #128]	; (9b948 <Cl_SendDatatoconsole+0x144>)
   9b8c8:	22aa      	movs	r2, #170	; 0xaa
   9b8ca:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9b8cc:	2300      	movs	r3, #0
   9b8ce:	75fb      	strb	r3, [r7, #23]
   9b8d0:	e009      	b.n	9b8e6 <Cl_SendDatatoconsole+0xe2>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9b8d2:	7dfb      	ldrb	r3, [r7, #23]
   9b8d4:	3301      	adds	r3, #1
   9b8d6:	7dfa      	ldrb	r2, [r7, #23]
   9b8d8:	491a      	ldr	r1, [pc, #104]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b8da:	5c89      	ldrb	r1, [r1, r2]
   9b8dc:	4a1a      	ldr	r2, [pc, #104]	; (9b948 <Cl_SendDatatoconsole+0x144>)
   9b8de:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9b8e0:	7dfb      	ldrb	r3, [r7, #23]
   9b8e2:	3301      	adds	r3, #1
   9b8e4:	75fb      	strb	r3, [r7, #23]
   9b8e6:	7dfa      	ldrb	r2, [r7, #23]
   9b8e8:	7d7b      	ldrb	r3, [r7, #21]
   9b8ea:	429a      	cmp	r2, r3
   9b8ec:	d3f1      	bcc.n	9b8d2 <Cl_SendDatatoconsole+0xce>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9b8ee:	2300      	movs	r3, #0
   9b8f0:	75fb      	strb	r3, [r7, #23]
   9b8f2:	e00e      	b.n	9b912 <Cl_SendDatatoconsole+0x10e>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   9b8f4:	4b15      	ldr	r3, [pc, #84]	; (9b94c <Cl_SendDatatoconsole+0x148>)
   9b8f6:	2201      	movs	r2, #1
   9b8f8:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   9b8fa:	7dfb      	ldrb	r3, [r7, #23]
   9b8fc:	4a11      	ldr	r2, [pc, #68]	; (9b944 <Cl_SendDatatoconsole+0x140>)
   9b8fe:	5cd3      	ldrb	r3, [r2, r3]
   9b900:	4618      	mov	r0, r3
   9b902:	4b13      	ldr	r3, [pc, #76]	; (9b950 <Cl_SendDatatoconsole+0x14c>)
   9b904:	4798      	blx	r3
   9b906:	4603      	mov	r3, r0
   9b908:	2b00      	cmp	r3, #0
   9b90a:	d102      	bne.n	9b912 <Cl_SendDatatoconsole+0x10e>
	
		{
			tempcount++;
   9b90c:	7dfb      	ldrb	r3, [r7, #23]
   9b90e:	3301      	adds	r3, #1
   9b910:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9b912:	7dfa      	ldrb	r2, [r7, #23]
   9b914:	7d7b      	ldrb	r3, [r7, #21]
   9b916:	429a      	cmp	r2, r3
   9b918:	d3ec      	bcc.n	9b8f4 <Cl_SendDatatoconsole+0xf0>
		//	printf("%s",Cl_ConsoleTxMsg);
		//printf("\n");
		
	}
	
ackCommand = command;	
   9b91a:	4a0e      	ldr	r2, [pc, #56]	; (9b954 <Cl_SendDatatoconsole+0x150>)
   9b91c:	79fb      	ldrb	r3, [r7, #7]
   9b91e:	7013      	strb	r3, [r2, #0]

//	printf("\n");
cl_wait(5);                     // check if needed 21082017
   9b920:	2005      	movs	r0, #5
   9b922:	4b0d      	ldr	r3, [pc, #52]	; (9b958 <Cl_SendDatatoconsole+0x154>)
   9b924:	4798      	blx	r3
	return CL_OK;
   9b926:	2300      	movs	r3, #0
}
   9b928:	4618      	mov	r0, r3
   9b92a:	3718      	adds	r7, #24
   9b92c:	46bd      	mov	sp, r7
   9b92e:	bd80      	pop	{r7, pc}
   9b930:	2007280d 	.word	0x2007280d
   9b934:	2007280e 	.word	0x2007280e
   9b938:	2007280c 	.word	0x2007280c
   9b93c:	20071bc8 	.word	0x20071bc8
   9b940:	20072294 	.word	0x20072294
   9b944:	20072290 	.word	0x20072290
   9b948:	20072538 	.word	0x20072538
   9b94c:	20071bcd 	.word	0x20071bcd
   9b950:	00099de1 	.word	0x00099de1
   9b954:	2007280f 	.word	0x2007280f
   9b958:	00093009 	.word	0x00093009

0009b95c <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   9b95c:	b480      	push	{r7}
   9b95e:	b083      	sub	sp, #12
   9b960:	af00      	add	r7, sp, #0
   9b962:	4603      	mov	r3, r0
   9b964:	6039      	str	r1, [r7, #0]
   9b966:	71fb      	strb	r3, [r7, #7]

	switch(command)
   9b968:	79fb      	ldrb	r3, [r7, #7]
   9b96a:	3b03      	subs	r3, #3
   9b96c:	2b32      	cmp	r3, #50	; 0x32
   9b96e:	f200 811d 	bhi.w	9bbac <Cl_Console_ConvertConsoleEvent_toMacEvent+0x250>
   9b972:	a201      	add	r2, pc, #4	; (adr r2, 9b978 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   9b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b978:	0009ba45 	.word	0x0009ba45
   9b97c:	0009ba55 	.word	0x0009ba55
   9b980:	0009ba5d 	.word	0x0009ba5d
   9b984:	0009bbad 	.word	0x0009bbad
   9b988:	0009bb25 	.word	0x0009bb25
   9b98c:	0009bae5 	.word	0x0009bae5
   9b990:	0009ba95 	.word	0x0009ba95
   9b994:	0009ba9d 	.word	0x0009ba9d
   9b998:	0009ba75 	.word	0x0009ba75
   9b99c:	0009ba7d 	.word	0x0009ba7d
   9b9a0:	0009ba85 	.word	0x0009ba85
   9b9a4:	0009baa5 	.word	0x0009baa5
   9b9a8:	0009bab5 	.word	0x0009bab5
   9b9ac:	0009bac5 	.word	0x0009bac5
   9b9b0:	0009baf5 	.word	0x0009baf5
   9b9b4:	0009bafd 	.word	0x0009bafd
   9b9b8:	0009bb05 	.word	0x0009bb05
   9b9bc:	0009bb0d 	.word	0x0009bb0d
   9b9c0:	0009ba4d 	.word	0x0009ba4d
   9b9c4:	0009bbad 	.word	0x0009bbad
   9b9c8:	0009bbad 	.word	0x0009bbad
   9b9cc:	0009ba8d 	.word	0x0009ba8d
   9b9d0:	0009baad 	.word	0x0009baad
   9b9d4:	0009bb2d 	.word	0x0009bb2d
   9b9d8:	0009bb35 	.word	0x0009bb35
   9b9dc:	0009bb3d 	.word	0x0009bb3d
   9b9e0:	0009bb45 	.word	0x0009bb45
   9b9e4:	0009baed 	.word	0x0009baed
   9b9e8:	0009bb4d 	.word	0x0009bb4d
   9b9ec:	0009babd 	.word	0x0009babd
   9b9f0:	0009bb55 	.word	0x0009bb55
   9b9f4:	0009bb5d 	.word	0x0009bb5d
   9b9f8:	0009bb65 	.word	0x0009bb65
   9b9fc:	0009bb6d 	.word	0x0009bb6d
   9ba00:	0009bb7d 	.word	0x0009bb7d
   9ba04:	0009bb85 	.word	0x0009bb85
   9ba08:	0009bb15 	.word	0x0009bb15
   9ba0c:	0009bb1d 	.word	0x0009bb1d
   9ba10:	0009bb8d 	.word	0x0009bb8d
   9ba14:	0009bb95 	.word	0x0009bb95
   9ba18:	0009bb75 	.word	0x0009bb75
   9ba1c:	0009ba65 	.word	0x0009ba65
   9ba20:	0009bbad 	.word	0x0009bbad
   9ba24:	0009bbad 	.word	0x0009bbad
   9ba28:	0009ba6d 	.word	0x0009ba6d
   9ba2c:	0009bbad 	.word	0x0009bbad
   9ba30:	0009bacd 	.word	0x0009bacd
   9ba34:	0009bad5 	.word	0x0009bad5
   9ba38:	0009badd 	.word	0x0009badd
   9ba3c:	0009bb9d 	.word	0x0009bb9d
   9ba40:	0009bba5 	.word	0x0009bba5
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   9ba44:	683b      	ldr	r3, [r7, #0]
   9ba46:	2201      	movs	r2, #1
   9ba48:	701a      	strb	r2, [r3, #0]
		break;
   9ba4a:	e0b0      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   9ba4c:	683b      	ldr	r3, [r7, #0]
   9ba4e:	2229      	movs	r2, #41	; 0x29
   9ba50:	701a      	strb	r2, [r3, #0]
		break;
   9ba52:	e0ac      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   9ba54:	683b      	ldr	r3, [r7, #0]
   9ba56:	2202      	movs	r2, #2
   9ba58:	701a      	strb	r2, [r3, #0]
		break;
   9ba5a:	e0a8      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   9ba5c:	683b      	ldr	r3, [r7, #0]
   9ba5e:	2207      	movs	r2, #7
   9ba60:	701a      	strb	r2, [r3, #0]
		break;
   9ba62:	e0a4      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   9ba64:	683b      	ldr	r3, [r7, #0]
   9ba66:	223f      	movs	r2, #63	; 0x3f
   9ba68:	701a      	strb	r2, [r3, #0]
		break;
   9ba6a:	e0a0      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   9ba6c:	683b      	ldr	r3, [r7, #0]
   9ba6e:	2240      	movs	r2, #64	; 0x40
   9ba70:	701a      	strb	r2, [r3, #0]
		break;
   9ba72:	e09c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   9ba74:	683b      	ldr	r3, [r7, #0]
   9ba76:	220a      	movs	r2, #10
   9ba78:	701a      	strb	r2, [r3, #0]
		break;
   9ba7a:	e098      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   9ba7c:	683b      	ldr	r3, [r7, #0]
   9ba7e:	220b      	movs	r2, #11
   9ba80:	701a      	strb	r2, [r3, #0]
		break;
   9ba82:	e094      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   9ba84:	683b      	ldr	r3, [r7, #0]
   9ba86:	220c      	movs	r2, #12
   9ba88:	701a      	strb	r2, [r3, #0]
		break;
   9ba8a:	e090      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   9ba8c:	683b      	ldr	r3, [r7, #0]
   9ba8e:	2211      	movs	r2, #17
   9ba90:	701a      	strb	r2, [r3, #0]
		break;
   9ba92:	e08c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   9ba94:	683b      	ldr	r3, [r7, #0]
   9ba96:	220d      	movs	r2, #13
   9ba98:	701a      	strb	r2, [r3, #0]
		break;
   9ba9a:	e088      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   9ba9c:	683b      	ldr	r3, [r7, #0]
   9ba9e:	220e      	movs	r2, #14
   9baa0:	701a      	strb	r2, [r3, #0]
		break;
   9baa2:	e084      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   9baa4:	683b      	ldr	r3, [r7, #0]
   9baa6:	220f      	movs	r2, #15
   9baa8:	701a      	strb	r2, [r3, #0]
		break;
   9baaa:	e080      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   9baac:	683b      	ldr	r3, [r7, #0]
   9baae:	2210      	movs	r2, #16
   9bab0:	701a      	strb	r2, [r3, #0]
		break;
   9bab2:	e07c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   9bab4:	683b      	ldr	r3, [r7, #0]
   9bab6:	2213      	movs	r2, #19
   9bab8:	701a      	strb	r2, [r3, #0]
		break;
   9baba:	e078      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   9babc:	683b      	ldr	r3, [r7, #0]
   9babe:	2214      	movs	r2, #20
   9bac0:	701a      	strb	r2, [r3, #0]
		break;
   9bac2:	e074      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   9bac4:	683b      	ldr	r3, [r7, #0]
   9bac6:	2215      	movs	r2, #21
   9bac8:	701a      	strb	r2, [r3, #0]
		break;
   9baca:	e070      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   9bacc:	683b      	ldr	r3, [r7, #0]
   9bace:	2226      	movs	r2, #38	; 0x26
   9bad0:	701a      	strb	r2, [r3, #0]
		break;
   9bad2:	e06c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   9bad4:	683b      	ldr	r3, [r7, #0]
   9bad6:	2227      	movs	r2, #39	; 0x27
   9bad8:	701a      	strb	r2, [r3, #0]
		break;
   9bada:	e068      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   9badc:	683b      	ldr	r3, [r7, #0]
   9bade:	2228      	movs	r2, #40	; 0x28
   9bae0:	701a      	strb	r2, [r3, #0]
		break;
   9bae2:	e064      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   9bae4:	683b      	ldr	r3, [r7, #0]
   9bae6:	2209      	movs	r2, #9
   9bae8:	701a      	strb	r2, [r3, #0]
		break;
   9baea:	e060      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9baec:	683b      	ldr	r3, [r7, #0]
   9baee:	2212      	movs	r2, #18
   9baf0:	701a      	strb	r2, [r3, #0]
		break;
   9baf2:	e05c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   9baf4:	683b      	ldr	r3, [r7, #0]
   9baf6:	2216      	movs	r2, #22
   9baf8:	701a      	strb	r2, [r3, #0]
		break;
   9bafa:	e058      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9bafc:	683b      	ldr	r3, [r7, #0]
   9bafe:	2217      	movs	r2, #23
   9bb00:	701a      	strb	r2, [r3, #0]
		break;
   9bb02:	e054      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   9bb04:	683b      	ldr	r3, [r7, #0]
   9bb06:	2218      	movs	r2, #24
   9bb08:	701a      	strb	r2, [r3, #0]
		break;
   9bb0a:	e050      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9bb0c:	683b      	ldr	r3, [r7, #0]
   9bb0e:	2219      	movs	r2, #25
   9bb10:	701a      	strb	r2, [r3, #0]
		break;
   9bb12:	e04c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   9bb14:	683b      	ldr	r3, [r7, #0]
   9bb16:	221a      	movs	r2, #26
   9bb18:	701a      	strb	r2, [r3, #0]
		break;
   9bb1a:	e048      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9bb1c:	683b      	ldr	r3, [r7, #0]
   9bb1e:	221b      	movs	r2, #27
   9bb20:	701a      	strb	r2, [r3, #0]
		break;
   9bb22:	e044      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   9bb24:	683b      	ldr	r3, [r7, #0]
   9bb26:	2208      	movs	r2, #8
   9bb28:	701a      	strb	r2, [r3, #0]
		break;
   9bb2a:	e040      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9bb2c:	683b      	ldr	r3, [r7, #0]
   9bb2e:	2203      	movs	r2, #3
   9bb30:	701a      	strb	r2, [r3, #0]
		break;
   9bb32:	e03c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   9bb34:	683b      	ldr	r3, [r7, #0]
   9bb36:	2204      	movs	r2, #4
   9bb38:	701a      	strb	r2, [r3, #0]
		break;
   9bb3a:	e038      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   9bb3c:	683b      	ldr	r3, [r7, #0]
   9bb3e:	2205      	movs	r2, #5
   9bb40:	701a      	strb	r2, [r3, #0]
		break;
   9bb42:	e034      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   9bb44:	683b      	ldr	r3, [r7, #0]
   9bb46:	2206      	movs	r2, #6
   9bb48:	701a      	strb	r2, [r3, #0]
		break;
   9bb4a:	e030      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   9bb4c:	683b      	ldr	r3, [r7, #0]
   9bb4e:	221c      	movs	r2, #28
   9bb50:	701a      	strb	r2, [r3, #0]
		break;
   9bb52:	e02c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   9bb54:	683b      	ldr	r3, [r7, #0]
   9bb56:	221d      	movs	r2, #29
   9bb58:	701a      	strb	r2, [r3, #0]
		break;
   9bb5a:	e028      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   9bb5c:	683b      	ldr	r3, [r7, #0]
   9bb5e:	221e      	movs	r2, #30
   9bb60:	701a      	strb	r2, [r3, #0]
		break;
   9bb62:	e024      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   9bb64:	683b      	ldr	r3, [r7, #0]
   9bb66:	221f      	movs	r2, #31
   9bb68:	701a      	strb	r2, [r3, #0]
		break;
   9bb6a:	e020      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   9bb6c:	683b      	ldr	r3, [r7, #0]
   9bb6e:	2220      	movs	r2, #32
   9bb70:	701a      	strb	r2, [r3, #0]
		break;
   9bb72:	e01c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   9bb74:	683b      	ldr	r3, [r7, #0]
   9bb76:	2221      	movs	r2, #33	; 0x21
   9bb78:	701a      	strb	r2, [r3, #0]
		break;
   9bb7a:	e018      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   9bb7c:	683b      	ldr	r3, [r7, #0]
   9bb7e:	2222      	movs	r2, #34	; 0x22
   9bb80:	701a      	strb	r2, [r3, #0]
		break;
   9bb82:	e014      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   9bb84:	683b      	ldr	r3, [r7, #0]
   9bb86:	2223      	movs	r2, #35	; 0x23
   9bb88:	701a      	strb	r2, [r3, #0]
		break;			
   9bb8a:	e010      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   9bb8c:	683b      	ldr	r3, [r7, #0]
   9bb8e:	2224      	movs	r2, #36	; 0x24
   9bb90:	701a      	strb	r2, [r3, #0]
		break;
   9bb92:	e00c      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   9bb94:	683b      	ldr	r3, [r7, #0]
   9bb96:	2225      	movs	r2, #37	; 0x25
   9bb98:	701a      	strb	r2, [r3, #0]
		break;
   9bb9a:	e008      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_START:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_START;
   9bb9c:	683b      	ldr	r3, [r7, #0]
   9bb9e:	2258      	movs	r2, #88	; 0x58
   9bba0:	701a      	strb	r2, [r3, #0]
		break;
   9bba2:	e004      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_STOP:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_STOP;
   9bba4:	683b      	ldr	r3, [r7, #0]
   9bba6:	2259      	movs	r2, #89	; 0x59
   9bba8:	701a      	strb	r2, [r3, #0]
		break;
   9bbaa:	e000      	b.n	9bbae <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		default:
		break;
   9bbac:	bf00      	nop
	}
	return CL_OK;
   9bbae:	2300      	movs	r3, #0
}
   9bbb0:	4618      	mov	r0, r3
   9bbb2:	370c      	adds	r7, #12
   9bbb4:	46bd      	mov	sp, r7
   9bbb6:	bc80      	pop	{r7}
   9bbb8:	4770      	bx	lr
   9bbba:	bf00      	nop

0009bbbc <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   9bbbc:	b580      	push	{r7, lr}
   9bbbe:	b082      	sub	sp, #8
   9bbc0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   9bbc2:	2304      	movs	r3, #4
   9bbc4:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   9bbc6:	2300      	movs	r3, #0
   9bbc8:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   9bbca:	2300      	movs	r3, #0
   9bbcc:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9bbce:	e07f      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   9bbd0:	79bb      	ldrb	r3, [r7, #6]
   9bbd2:	2b03      	cmp	r3, #3
   9bbd4:	d87b      	bhi.n	9bcce <Cl_Console_Console_Sync+0x112>
   9bbd6:	a201      	add	r2, pc, #4	; (adr r2, 9bbdc <Cl_Console_Console_Sync+0x20>)
   9bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bbdc:	0009bbed 	.word	0x0009bbed
   9bbe0:	0009bc27 	.word	0x0009bc27
   9bbe4:	0009bc43 	.word	0x0009bc43
   9bbe8:	0009bcc3 	.word	0x0009bcc3
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9bbec:	4b3d      	ldr	r3, [pc, #244]	; (9bce4 <Cl_Console_Console_Sync+0x128>)
   9bbee:	4798      	blx	r3
   9bbf0:	4603      	mov	r3, r0
   9bbf2:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   9bbf4:	79fb      	ldrb	r3, [r7, #7]
   9bbf6:	2b00      	cmp	r3, #0
   9bbf8:	d112      	bne.n	9bc20 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9bbfa:	4b3b      	ldr	r3, [pc, #236]	; (9bce8 <Cl_Console_Console_Sync+0x12c>)
   9bbfc:	781a      	ldrb	r2, [r3, #0]
   9bbfe:	4b3b      	ldr	r3, [pc, #236]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc00:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   9bc02:	4b3a      	ldr	r3, [pc, #232]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc04:	789b      	ldrb	r3, [r3, #2]
   9bc06:	2b03      	cmp	r3, #3
   9bc08:	d10a      	bne.n	9bc20 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9bc0a:	4b39      	ldr	r3, [pc, #228]	; (9bcf0 <Cl_Console_Console_Sync+0x134>)
   9bc0c:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9bc0e:	4b37      	ldr	r3, [pc, #220]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc10:	2201      	movs	r2, #1
   9bc12:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9bc14:	4b34      	ldr	r3, [pc, #208]	; (9bce8 <Cl_Console_Console_Sync+0x12c>)
   9bc16:	2200      	movs	r2, #0
   9bc18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9bc1c:	2301      	movs	r3, #1
   9bc1e:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   9bc20:	2301      	movs	r3, #1
   9bc22:	71fb      	strb	r3, [r7, #7]
								
			break;
   9bc24:	e054      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   9bc26:	200a      	movs	r0, #10
   9bc28:	4b32      	ldr	r3, [pc, #200]	; (9bcf4 <Cl_Console_Console_Sync+0x138>)
   9bc2a:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9bc2c:	1d7b      	adds	r3, r7, #5
   9bc2e:	2200      	movs	r2, #0
   9bc30:	4619      	mov	r1, r3
   9bc32:	2003      	movs	r0, #3
   9bc34:	4b30      	ldr	r3, [pc, #192]	; (9bcf8 <Cl_Console_Console_Sync+0x13c>)
   9bc36:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   9bc38:	2302      	movs	r3, #2
   9bc3a:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9bc3c:	2301      	movs	r3, #1
   9bc3e:	71fb      	strb	r3, [r7, #7]
				break;
   9bc40:	e046      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9bc42:	4b28      	ldr	r3, [pc, #160]	; (9bce4 <Cl_Console_Console_Sync+0x128>)
   9bc44:	4798      	blx	r3
   9bc46:	4603      	mov	r3, r0
   9bc48:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   9bc4a:	79fb      	ldrb	r3, [r7, #7]
   9bc4c:	2b00      	cmp	r3, #0
   9bc4e:	d13f      	bne.n	9bcd0 <Cl_Console_Console_Sync+0x114>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9bc50:	4b25      	ldr	r3, [pc, #148]	; (9bce8 <Cl_Console_Console_Sync+0x12c>)
   9bc52:	781a      	ldrb	r2, [r3, #0]
   9bc54:	4b25      	ldr	r3, [pc, #148]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc56:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9bc58:	4b23      	ldr	r3, [pc, #140]	; (9bce8 <Cl_Console_Console_Sync+0x12c>)
   9bc5a:	785a      	ldrb	r2, [r3, #1]
   9bc5c:	4b23      	ldr	r3, [pc, #140]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc5e:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   9bc60:	4b21      	ldr	r3, [pc, #132]	; (9bce8 <Cl_Console_Console_Sync+0x12c>)
   9bc62:	789a      	ldrb	r2, [r3, #2]
   9bc64:	4b21      	ldr	r3, [pc, #132]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc66:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   9bc68:	4b20      	ldr	r3, [pc, #128]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc6a:	789b      	ldrb	r3, [r3, #2]
   9bc6c:	2b04      	cmp	r3, #4
   9bc6e:	d125      	bne.n	9bcbc <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   9bc70:	4b1e      	ldr	r3, [pc, #120]	; (9bcec <Cl_Console_Console_Sync+0x130>)
   9bc72:	791b      	ldrb	r3, [r3, #4]
   9bc74:	2b03      	cmp	r3, #3
   9bc76:	d12b      	bne.n	9bcd0 <Cl_Console_Console_Sync+0x114>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   9bc78:	2303      	movs	r3, #3
   9bc7a:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9bc7c:	4b1f      	ldr	r3, [pc, #124]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bc7e:	781b      	ldrb	r3, [r3, #0]
   9bc80:	2b0a      	cmp	r3, #10
   9bc82:	d80f      	bhi.n	9bca4 <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   9bc84:	4b1d      	ldr	r3, [pc, #116]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bc86:	781b      	ldrb	r3, [r3, #0]
   9bc88:	461a      	mov	r2, r3
   9bc8a:	4b1c      	ldr	r3, [pc, #112]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bc8c:	4413      	add	r3, r2
   9bc8e:	222a      	movs	r2, #42	; 0x2a
   9bc90:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9bc92:	4b1a      	ldr	r3, [pc, #104]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bc94:	2201      	movs	r2, #1
   9bc96:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9bc98:	4b18      	ldr	r3, [pc, #96]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bc9a:	781b      	ldrb	r3, [r3, #0]
   9bc9c:	3301      	adds	r3, #1
   9bc9e:	b2da      	uxtb	r2, r3
   9bca0:	4b16      	ldr	r3, [pc, #88]	; (9bcfc <Cl_Console_Console_Sync+0x140>)
   9bca2:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   9bca4:	4b16      	ldr	r3, [pc, #88]	; (9bd00 <Cl_Console_Console_Sync+0x144>)
   9bca6:	2201      	movs	r2, #1
   9bca8:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9bcaa:	4b16      	ldr	r3, [pc, #88]	; (9bd04 <Cl_Console_Console_Sync+0x148>)
   9bcac:	2202      	movs	r2, #2
   9bcae:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   9bcb0:	2300      	movs	r3, #0
   9bcb2:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   9bcb4:	4b14      	ldr	r3, [pc, #80]	; (9bd08 <Cl_Console_Console_Sync+0x14c>)
   9bcb6:	2200      	movs	r2, #0
   9bcb8:	701a      	strb	r2, [r3, #0]
   9bcba:	e009      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9bcbc:	2301      	movs	r3, #1
   9bcbe:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   9bcc0:	e006      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   9bcc2:	4b10      	ldr	r3, [pc, #64]	; (9bd04 <Cl_Console_Console_Sync+0x148>)
   9bcc4:	2202      	movs	r2, #2
   9bcc6:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   9bcc8:	2300      	movs	r3, #0
   9bcca:	71fb      	strb	r3, [r7, #7]
			break;
   9bccc:	e000      	b.n	9bcd0 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9bcce:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9bcd0:	4b0c      	ldr	r3, [pc, #48]	; (9bd04 <Cl_Console_Console_Sync+0x148>)
   9bcd2:	781b      	ldrb	r3, [r3, #0]
   9bcd4:	2b01      	cmp	r3, #1
   9bcd6:	f43f af7b 	beq.w	9bbd0 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9bcda:	79fb      	ldrb	r3, [r7, #7]
 }
   9bcdc:	4618      	mov	r0, r3
   9bcde:	3708      	adds	r7, #8
   9bce0:	46bd      	mov	sp, r7
   9bce2:	bd80      	pop	{r7, pc}
   9bce4:	0009bd25 	.word	0x0009bd25
   9bce8:	200721ec 	.word	0x200721ec
   9bcec:	200723e8 	.word	0x200723e8
   9bcf0:	0009b77d 	.word	0x0009b77d
   9bcf4:	00093009 	.word	0x00093009
   9bcf8:	0009b805 	.word	0x0009b805
   9bcfc:	20072424 	.word	0x20072424
   9bd00:	20071bc8 	.word	0x20071bc8
   9bd04:	20070b74 	.word	0x20070b74
   9bd08:	20071bcc 	.word	0x20071bcc

0009bd0c <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   9bd0c:	b480      	push	{r7}
   9bd0e:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   9bd10:	4b03      	ldr	r3, [pc, #12]	; (9bd20 <Cl_Console_init+0x14>)
   9bd12:	2201      	movs	r2, #1
   9bd14:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   9bd16:	2300      	movs	r3, #0
 }
   9bd18:	4618      	mov	r0, r3
   9bd1a:	46bd      	mov	sp, r7
   9bd1c:	bc80      	pop	{r7}
   9bd1e:	4770      	bx	lr
   9bd20:	20070b74 	.word	0x20070b74

0009bd24 <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   9bd24:	b580      	push	{r7, lr}
   9bd26:	b082      	sub	sp, #8
   9bd28:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   9bd2a:	2301      	movs	r3, #1
   9bd2c:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9bd2e:	4b0b      	ldr	r3, [pc, #44]	; (9bd5c <Cl_Console_SyncGetMessage+0x38>)
   9bd30:	4798      	blx	r3
   9bd32:	4603      	mov	r3, r0
   9bd34:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   9bd36:	79fb      	ldrb	r3, [r7, #7]
   9bd38:	2b00      	cmp	r3, #0
   9bd3a:	d10a      	bne.n	9bd52 <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   9bd3c:	4b08      	ldr	r3, [pc, #32]	; (9bd60 <Cl_Console_SyncGetMessage+0x3c>)
   9bd3e:	4798      	blx	r3
   9bd40:	4603      	mov	r3, r0
   9bd42:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   9bd44:	79fb      	ldrb	r3, [r7, #7]
   9bd46:	2b00      	cmp	r3, #0
   9bd48:	d103      	bne.n	9bd52 <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9bd4a:	4b06      	ldr	r3, [pc, #24]	; (9bd64 <Cl_Console_SyncGetMessage+0x40>)
   9bd4c:	4798      	blx	r3
   9bd4e:	4603      	mov	r3, r0
   9bd50:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   9bd52:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   9bd54:	4618      	mov	r0, r3
   9bd56:	3708      	adds	r7, #8
   9bd58:	46bd      	mov	sp, r7
   9bd5a:	bd80      	pop	{r7, pc}
   9bd5c:	0009b459 	.word	0x0009b459
   9bd60:	0009b4b9 	.word	0x0009b4b9
   9bd64:	0009b499 	.word	0x0009b499

0009bd68 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   9bd68:	b480      	push	{r7}
   9bd6a:	b083      	sub	sp, #12
   9bd6c:	af00      	add	r7, sp, #0
   9bd6e:	4603      	mov	r3, r0
   9bd70:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   9bd72:	4b61      	ldr	r3, [pc, #388]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bd74:	7f1b      	ldrb	r3, [r3, #28]
   9bd76:	2b00      	cmp	r3, #0
   9bd78:	d009      	beq.n	9bd8e <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   9bd7a:	4b60      	ldr	r3, [pc, #384]	; (9befc <cl_console_receivedbyte+0x194>)
   9bd7c:	7f1b      	ldrb	r3, [r3, #28]
   9bd7e:	2b00      	cmp	r3, #0
   9bd80:	d005      	beq.n	9bd8e <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   9bd82:	4b5d      	ldr	r3, [pc, #372]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bd84:	2201      	movs	r2, #1
   9bd86:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   9bd88:	4b5c      	ldr	r3, [pc, #368]	; (9befc <cl_console_receivedbyte+0x194>)
   9bd8a:	2200      	movs	r2, #0
   9bd8c:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   9bd8e:	4b5a      	ldr	r3, [pc, #360]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bd90:	7e9b      	ldrb	r3, [r3, #26]
   9bd92:	2b00      	cmp	r3, #0
   9bd94:	d04e      	beq.n	9be34 <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   9bd96:	4b58      	ldr	r3, [pc, #352]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bd98:	7edb      	ldrb	r3, [r3, #27]
   9bd9a:	f083 0301 	eor.w	r3, r3, #1
   9bd9e:	b2db      	uxtb	r3, r3
   9bda0:	2b00      	cmp	r3, #0
   9bda2:	d00a      	beq.n	9bdba <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9bda4:	4b56      	ldr	r3, [pc, #344]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9bda6:	781b      	ldrb	r3, [r3, #0]
   9bda8:	2bcc      	cmp	r3, #204	; 0xcc
   9bdaa:	d12e      	bne.n	9be0a <cl_console_receivedbyte+0xa2>
   9bdac:	79fb      	ldrb	r3, [r7, #7]
   9bdae:	2bdd      	cmp	r3, #221	; 0xdd
   9bdb0:	d12b      	bne.n	9be0a <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   9bdb2:	4b51      	ldr	r3, [pc, #324]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdb4:	2201      	movs	r2, #1
   9bdb6:	76da      	strb	r2, [r3, #27]
   9bdb8:	e027      	b.n	9be0a <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9bdba:	4b4f      	ldr	r3, [pc, #316]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdbc:	7d1b      	ldrb	r3, [r3, #20]
   9bdbe:	4619      	mov	r1, r3
   9bdc0:	4a4d      	ldr	r2, [pc, #308]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdc2:	79fb      	ldrb	r3, [r7, #7]
   9bdc4:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   9bdc6:	4b4c      	ldr	r3, [pc, #304]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdc8:	2201      	movs	r2, #1
   9bdca:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   9bdcc:	4b4a      	ldr	r3, [pc, #296]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdce:	2200      	movs	r2, #0
   9bdd0:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9bdd2:	4b4b      	ldr	r3, [pc, #300]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9bdd4:	781b      	ldrb	r3, [r3, #0]
   9bdd6:	2bee      	cmp	r3, #238	; 0xee
   9bdd8:	d111      	bne.n	9bdfe <cl_console_receivedbyte+0x96>
   9bdda:	79fb      	ldrb	r3, [r7, #7]
   9bddc:	2bbb      	cmp	r3, #187	; 0xbb
   9bdde:	d10e      	bne.n	9bdfe <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   9bde0:	4b45      	ldr	r3, [pc, #276]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bde2:	2201      	movs	r2, #1
   9bde4:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9bde6:	4b44      	ldr	r3, [pc, #272]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bde8:	2200      	movs	r2, #0
   9bdea:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   9bdec:	4b42      	ldr	r3, [pc, #264]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdee:	2200      	movs	r2, #0
   9bdf0:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   9bdf2:	4b41      	ldr	r3, [pc, #260]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bdf4:	2200      	movs	r2, #0
   9bdf6:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   9bdf8:	4b40      	ldr	r3, [pc, #256]	; (9befc <cl_console_receivedbyte+0x194>)
   9bdfa:	2201      	movs	r2, #1
   9bdfc:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   9bdfe:	4b3e      	ldr	r3, [pc, #248]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be00:	7d1b      	ldrb	r3, [r3, #20]
   9be02:	3301      	adds	r3, #1
   9be04:	b2da      	uxtb	r2, r3
   9be06:	4b3c      	ldr	r3, [pc, #240]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be08:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9be0a:	4b3b      	ldr	r3, [pc, #236]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be0c:	7d1b      	ldrb	r3, [r3, #20]
   9be0e:	2b13      	cmp	r3, #19
   9be10:	d90b      	bls.n	9be2a <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   9be12:	4b39      	ldr	r3, [pc, #228]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be14:	2201      	movs	r2, #1
   9be16:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9be18:	4b37      	ldr	r3, [pc, #220]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be1a:	2200      	movs	r2, #0
   9be1c:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   9be1e:	4b36      	ldr	r3, [pc, #216]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be20:	2200      	movs	r2, #0
   9be22:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   9be24:	4b34      	ldr	r3, [pc, #208]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be26:	2201      	movs	r2, #1
   9be28:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9be2a:	4a35      	ldr	r2, [pc, #212]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9be2c:	79fb      	ldrb	r3, [r7, #7]
   9be2e:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   9be30:	2302      	movs	r3, #2
   9be32:	e05b      	b.n	9beec <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   9be34:	4b31      	ldr	r3, [pc, #196]	; (9befc <cl_console_receivedbyte+0x194>)
   9be36:	7e9b      	ldrb	r3, [r3, #26]
   9be38:	2b00      	cmp	r3, #0
   9be3a:	d056      	beq.n	9beea <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   9be3c:	4b2e      	ldr	r3, [pc, #184]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9be3e:	7f5b      	ldrb	r3, [r3, #29]
   9be40:	2b00      	cmp	r3, #0
   9be42:	d002      	beq.n	9be4a <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   9be44:	4b2d      	ldr	r3, [pc, #180]	; (9befc <cl_console_receivedbyte+0x194>)
   9be46:	2201      	movs	r2, #1
   9be48:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   9be4a:	4b2c      	ldr	r3, [pc, #176]	; (9befc <cl_console_receivedbyte+0x194>)
   9be4c:	7edb      	ldrb	r3, [r3, #27]
   9be4e:	f083 0301 	eor.w	r3, r3, #1
   9be52:	b2db      	uxtb	r3, r3
   9be54:	2b00      	cmp	r3, #0
   9be56:	d00d      	beq.n	9be74 <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9be58:	4b29      	ldr	r3, [pc, #164]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9be5a:	781b      	ldrb	r3, [r3, #0]
   9be5c:	2bcc      	cmp	r3, #204	; 0xcc
   9be5e:	d12e      	bne.n	9bebe <cl_console_receivedbyte+0x156>
   9be60:	79fb      	ldrb	r3, [r7, #7]
   9be62:	2bdd      	cmp	r3, #221	; 0xdd
   9be64:	d12b      	bne.n	9bebe <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   9be66:	4b25      	ldr	r3, [pc, #148]	; (9befc <cl_console_receivedbyte+0x194>)
   9be68:	2201      	movs	r2, #1
   9be6a:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   9be6c:	4b23      	ldr	r3, [pc, #140]	; (9befc <cl_console_receivedbyte+0x194>)
   9be6e:	2200      	movs	r2, #0
   9be70:	751a      	strb	r2, [r3, #20]
   9be72:	e024      	b.n	9bebe <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   9be74:	4b21      	ldr	r3, [pc, #132]	; (9befc <cl_console_receivedbyte+0x194>)
   9be76:	7d1b      	ldrb	r3, [r3, #20]
   9be78:	4619      	mov	r1, r3
   9be7a:	4a20      	ldr	r2, [pc, #128]	; (9befc <cl_console_receivedbyte+0x194>)
   9be7c:	79fb      	ldrb	r3, [r7, #7]
   9be7e:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   9be80:	4b1e      	ldr	r3, [pc, #120]	; (9befc <cl_console_receivedbyte+0x194>)
   9be82:	2201      	movs	r2, #1
   9be84:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   9be86:	4b1d      	ldr	r3, [pc, #116]	; (9befc <cl_console_receivedbyte+0x194>)
   9be88:	2200      	movs	r2, #0
   9be8a:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9be8c:	4b1c      	ldr	r3, [pc, #112]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9be8e:	781b      	ldrb	r3, [r3, #0]
   9be90:	2bee      	cmp	r3, #238	; 0xee
   9be92:	d10e      	bne.n	9beb2 <cl_console_receivedbyte+0x14a>
   9be94:	79fb      	ldrb	r3, [r7, #7]
   9be96:	2bbb      	cmp	r3, #187	; 0xbb
   9be98:	d10b      	bne.n	9beb2 <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   9be9a:	4b18      	ldr	r3, [pc, #96]	; (9befc <cl_console_receivedbyte+0x194>)
   9be9c:	2201      	movs	r2, #1
   9be9e:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   9bea0:	4b16      	ldr	r3, [pc, #88]	; (9befc <cl_console_receivedbyte+0x194>)
   9bea2:	2200      	movs	r2, #0
   9bea4:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   9bea6:	4b14      	ldr	r3, [pc, #80]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9bea8:	2201      	movs	r2, #1
   9beaa:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   9beac:	4b13      	ldr	r3, [pc, #76]	; (9befc <cl_console_receivedbyte+0x194>)
   9beae:	2200      	movs	r2, #0
   9beb0:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   9beb2:	4b12      	ldr	r3, [pc, #72]	; (9befc <cl_console_receivedbyte+0x194>)
   9beb4:	7d1b      	ldrb	r3, [r3, #20]
   9beb6:	3301      	adds	r3, #1
   9beb8:	b2da      	uxtb	r2, r3
   9beba:	4b10      	ldr	r3, [pc, #64]	; (9befc <cl_console_receivedbyte+0x194>)
   9bebc:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   9bebe:	4b0f      	ldr	r3, [pc, #60]	; (9befc <cl_console_receivedbyte+0x194>)
   9bec0:	7d1b      	ldrb	r3, [r3, #20]
   9bec2:	2b14      	cmp	r3, #20
   9bec4:	d90b      	bls.n	9bede <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   9bec6:	4b0d      	ldr	r3, [pc, #52]	; (9befc <cl_console_receivedbyte+0x194>)
   9bec8:	2201      	movs	r2, #1
   9beca:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   9becc:	4b0b      	ldr	r3, [pc, #44]	; (9befc <cl_console_receivedbyte+0x194>)
   9bece:	2200      	movs	r2, #0
   9bed0:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   9bed2:	4b0a      	ldr	r3, [pc, #40]	; (9befc <cl_console_receivedbyte+0x194>)
   9bed4:	2201      	movs	r2, #1
   9bed6:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   9bed8:	4b07      	ldr	r3, [pc, #28]	; (9bef8 <cl_console_receivedbyte+0x190>)
   9beda:	2200      	movs	r2, #0
   9bedc:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   9bede:	4b07      	ldr	r3, [pc, #28]	; (9befc <cl_console_receivedbyte+0x194>)
   9bee0:	7f5b      	ldrb	r3, [r3, #29]
   9bee2:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9bee4:	4a06      	ldr	r2, [pc, #24]	; (9bf00 <cl_console_receivedbyte+0x198>)
   9bee6:	79fb      	ldrb	r3, [r7, #7]
   9bee8:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   9beea:	2302      	movs	r3, #2
}
   9beec:	4618      	mov	r0, r3
   9beee:	370c      	adds	r7, #12
   9bef0:	46bd      	mov	sp, r7
   9bef2:	bc80      	pop	{r7}
   9bef4:	4770      	bx	lr
   9bef6:	bf00      	nop
   9bef8:	20072404 	.word	0x20072404
   9befc:	20072270 	.word	0x20072270
   9bf00:	20071bd4 	.word	0x20071bd4

0009bf04 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   9bf04:	b480      	push	{r7}
   9bf06:	b08b      	sub	sp, #44	; 0x2c
   9bf08:	af00      	add	r7, sp, #0
   9bf0a:	6078      	str	r0, [r7, #4]
   9bf0c:	687b      	ldr	r3, [r7, #4]
   9bf0e:	627b      	str	r3, [r7, #36]	; 0x24
   9bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9bf12:	623b      	str	r3, [r7, #32]
   9bf14:	6a3b      	ldr	r3, [r7, #32]
   9bf16:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   9bf18:	69fb      	ldr	r3, [r7, #28]
   9bf1a:	095b      	lsrs	r3, r3, #5
   9bf1c:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   9bf1e:	69bb      	ldr	r3, [r7, #24]
   9bf20:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9bf24:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9bf28:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   9bf2a:	617b      	str	r3, [r7, #20]
   9bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9bf2e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9bf30:	693b      	ldr	r3, [r7, #16]
   9bf32:	f003 031f 	and.w	r3, r3, #31
   9bf36:	2201      	movs	r2, #1
   9bf38:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   9bf3c:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9bf3e:	697b      	ldr	r3, [r7, #20]
   9bf40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   9bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9bf44:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9bf46:	68bb      	ldr	r3, [r7, #8]
   9bf48:	f003 031f 	and.w	r3, r3, #31
   9bf4c:	2101      	movs	r1, #1
   9bf4e:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9bf52:	4013      	ands	r3, r2
   9bf54:	2b00      	cmp	r3, #0
   9bf56:	d003      	beq.n	9bf60 <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   9bf58:	697b      	ldr	r3, [r7, #20]
   9bf5a:	68fa      	ldr	r2, [r7, #12]
   9bf5c:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_toggle_pin_level(pin);
}
   9bf5e:	e002      	b.n	9bf66 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   9bf60:	697b      	ldr	r3, [r7, #20]
   9bf62:	68fa      	ldr	r2, [r7, #12]
   9bf64:	631a      	str	r2, [r3, #48]	; 0x30
   9bf66:	bf00      	nop
   9bf68:	372c      	adds	r7, #44	; 0x2c
   9bf6a:	46bd      	mov	sp, r7
   9bf6c:	bc80      	pop	{r7}
   9bf6e:	4770      	bx	lr

0009bf70 <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   9bf70:	b580      	push	{r7, lr}
   9bf72:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   9bf74:	4b04      	ldr	r3, [pc, #16]	; (9bf88 <TC1_Handler+0x18>)
   9bf76:	781b      	ldrb	r3, [r3, #0]
   9bf78:	b2db      	uxtb	r3, r3
   9bf7a:	2b00      	cmp	r3, #0
   9bf7c:	d002      	beq.n	9bf84 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   9bf7e:	203b      	movs	r0, #59	; 0x3b
   9bf80:	4b02      	ldr	r3, [pc, #8]	; (9bf8c <TC1_Handler+0x1c>)
   9bf82:	4798      	blx	r3
		}
		#endif
}
   9bf84:	bf00      	nop
   9bf86:	bd80      	pop	{r7, pc}
   9bf88:	20070b75 	.word	0x20070b75
   9bf8c:	0009bf05 	.word	0x0009bf05

0009bf90 <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   9bf90:	b480      	push	{r7}
   9bf92:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   9bf94:	2300      	movs	r3, #0
 }
   9bf96:	4618      	mov	r0, r3
   9bf98:	46bd      	mov	sp, r7
   9bf9a:	bc80      	pop	{r7}
   9bf9c:	4770      	bx	lr
   9bf9e:	bf00      	nop

0009bfa0 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   9bfa0:	b590      	push	{r4, r7, lr}
   9bfa2:	b08d      	sub	sp, #52	; 0x34
   9bfa4:	af02      	add	r7, sp, #8
   9bfa6:	4603      	mov	r3, r0
   9bfa8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9bfaa:	2300      	movs	r3, #0
   9bfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   9bfb0:	2300      	movs	r3, #0
   9bfb2:	76fb      	strb	r3, [r7, #27]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9bfb4:	2351      	movs	r3, #81	; 0x51
   9bfb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9bfba:	2300      	movs	r3, #0
   9bfbc:	617b      	str	r3, [r7, #20]
		Cl_Uint8Type data = 0;
   9bfbe:	2300      	movs	r3, #0
   9bfc0:	74fb      	strb	r3, [r7, #19]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9bfc2:	2300      	movs	r3, #0
   9bfc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9bfc8:	2300      	movs	r3, #0
   9bfca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9bfce:	2300      	movs	r3, #0
   9bfd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9bfd4:	2300      	movs	r3, #0
   9bfd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   9bfda:	f107 021b 	add.w	r2, r7, #27
   9bfde:	79fb      	ldrb	r3, [r7, #7]
   9bfe0:	4611      	mov	r1, r2
   9bfe2:	4618      	mov	r0, r3
   9bfe4:	4bb8      	ldr	r3, [pc, #736]	; (9c2c8 <Cl_disinf_controller+0x328>)
   9bfe6:	4798      	blx	r3
   9bfe8:	4603      	mov	r3, r0
   9bfea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   9bfee:	4bb7      	ldr	r3, [pc, #732]	; (9c2cc <Cl_disinf_controller+0x32c>)
   9bff0:	781b      	ldrb	r3, [r3, #0]
   9bff2:	2b11      	cmp	r3, #17
   9bff4:	f201 81cd 	bhi.w	9d392 <Cl_disinf_controller+0x13f2>
   9bff8:	a201      	add	r2, pc, #4	; (adr r2, 9c000 <Cl_disinf_controller+0x60>)
   9bffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bffe:	bf00      	nop
   9c000:	0009c049 	.word	0x0009c049
   9c004:	0009d393 	.word	0x0009d393
   9c008:	0009d393 	.word	0x0009d393
   9c00c:	0009c165 	.word	0x0009c165
   9c010:	0009c26f 	.word	0x0009c26f
   9c014:	0009c679 	.word	0x0009c679
   9c018:	0009c785 	.word	0x0009c785
   9c01c:	0009ca19 	.word	0x0009ca19
   9c020:	0009cc23 	.word	0x0009cc23
   9c024:	0009cecb 	.word	0x0009cecb
   9c028:	0009cf13 	.word	0x0009cf13
   9c02c:	0009d393 	.word	0x0009d393
   9c030:	0009d13b 	.word	0x0009d13b
   9c034:	0009d393 	.word	0x0009d393
   9c038:	0009d393 	.word	0x0009d393
   9c03c:	0009d0b5 	.word	0x0009d0b5
   9c040:	0009c449 	.word	0x0009c449
   9c044:	0009cb29 	.word	0x0009cb29
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   9c048:	7efb      	ldrb	r3, [r7, #27]
   9c04a:	2b03      	cmp	r3, #3
   9c04c:	d046      	beq.n	9c0dc <Cl_disinf_controller+0x13c>
   9c04e:	2b14      	cmp	r3, #20
   9c050:	d002      	beq.n	9c058 <Cl_disinf_controller+0xb8>
   9c052:	2b01      	cmp	r3, #1
   9c054:	d045      	beq.n	9c0e2 <Cl_disinf_controller+0x142>
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   9c056:	e083      	b.n	9c160 <Cl_disinf_controller+0x1c0>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9c058:	4b9d      	ldr	r3, [pc, #628]	; (9c2d0 <Cl_disinf_controller+0x330>)
   9c05a:	7e1b      	ldrb	r3, [r3, #24]
   9c05c:	2b00      	cmp	r3, #0
   9c05e:	d07e      	beq.n	9c15e <Cl_disinf_controller+0x1be>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9c060:	4b9b      	ldr	r3, [pc, #620]	; (9c2d0 <Cl_disinf_controller+0x330>)
   9c062:	791b      	ldrb	r3, [r3, #4]
   9c064:	2b02      	cmp	r3, #2
   9c066:	d01d      	beq.n	9c0a4 <Cl_disinf_controller+0x104>
   9c068:	2b21      	cmp	r3, #33	; 0x21
   9c06a:	d000      	beq.n	9c06e <Cl_disinf_controller+0xce>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   9c06c:	e034      	b.n	9c0d8 <Cl_disinf_controller+0x138>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c06e:	2316      	movs	r3, #22
   9c070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9c074:	2323      	movs	r3, #35	; 0x23
   9c076:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9c078:	f107 0314 	add.w	r3, r7, #20
   9c07c:	3301      	adds	r3, #1
   9c07e:	4619      	mov	r1, r3
   9c080:	2028      	movs	r0, #40	; 0x28
   9c082:	4b94      	ldr	r3, [pc, #592]	; (9c2d4 <Cl_disinf_controller+0x334>)
   9c084:	4798      	blx	r3
   9c086:	4603      	mov	r3, r0
   9c088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c08c:	f107 0114 	add.w	r1, r7, #20
   9c090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c094:	2202      	movs	r2, #2
   9c096:	4618      	mov	r0, r3
   9c098:	4b8f      	ldr	r3, [pc, #572]	; (9c2d8 <Cl_disinf_controller+0x338>)
   9c09a:	4798      	blx	r3
   9c09c:	4603      	mov	r3, r0
   9c09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   9c0a2:	e01a      	b.n	9c0da <Cl_disinf_controller+0x13a>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c0a4:	2316      	movs	r3, #22
   9c0a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c0aa:	2302      	movs	r3, #2
   9c0ac:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c0ae:	f107 0314 	add.w	r3, r7, #20
   9c0b2:	3301      	adds	r3, #1
   9c0b4:	4619      	mov	r1, r3
   9c0b6:	2002      	movs	r0, #2
   9c0b8:	4b86      	ldr	r3, [pc, #536]	; (9c2d4 <Cl_disinf_controller+0x334>)
   9c0ba:	4798      	blx	r3
   9c0bc:	4603      	mov	r3, r0
   9c0be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c0c2:	f107 0114 	add.w	r1, r7, #20
   9c0c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c0ca:	2202      	movs	r2, #2
   9c0cc:	4618      	mov	r0, r3
   9c0ce:	4b82      	ldr	r3, [pc, #520]	; (9c2d8 <Cl_disinf_controller+0x338>)
   9c0d0:	4798      	blx	r3
   9c0d2:	4603      	mov	r3, r0
   9c0d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   9c0d8:	bf00      	nop
					}
				}
				break;
   9c0da:	e040      	b.n	9c15e <Cl_disinf_controller+0x1be>
				
				case EVENT_STOP_DISINF:
				Cl_Disinf_StopDisinf();
   9c0dc:	4b7f      	ldr	r3, [pc, #508]	; (9c2dc <Cl_disinf_controller+0x33c>)
   9c0de:	4798      	blx	r3
				break;
   9c0e0:	e03e      	b.n	9c160 <Cl_disinf_controller+0x1c0>
				
				case EVENT_START_DISINF:
				
				cl_wait(20);
   9c0e2:	2014      	movs	r0, #20
   9c0e4:	4b7e      	ldr	r3, [pc, #504]	; (9c2e0 <Cl_disinf_controller+0x340>)
   9c0e6:	4798      	blx	r3
				if(Cl_ConsoleRxMsg.msgready == true)
   9c0e8:	4b79      	ldr	r3, [pc, #484]	; (9c2d0 <Cl_disinf_controller+0x330>)
   9c0ea:	7e1b      	ldrb	r3, [r3, #24]
   9c0ec:	2b00      	cmp	r3, #0
   9c0ee:	d01a      	beq.n	9c126 <Cl_disinf_controller+0x186>
				{
					
 					cl_temp_diinftype.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c0f0:	4b77      	ldr	r3, [pc, #476]	; (9c2d0 <Cl_disinf_controller+0x330>)
   9c0f2:	791a      	ldrb	r2, [r3, #4]
   9c0f4:	4b7b      	ldr	r3, [pc, #492]	; (9c2e4 <Cl_disinf_controller+0x344>)
   9c0f6:	701a      	strb	r2, [r3, #0]
 					if (cl_temp_diinftype.bytearray[0] == 4)
   9c0f8:	4b7a      	ldr	r3, [pc, #488]	; (9c2e4 <Cl_disinf_controller+0x344>)
   9c0fa:	781b      	ldrb	r3, [r3, #0]
   9c0fc:	2b04      	cmp	r3, #4
   9c0fe:	d103      	bne.n	9c108 <Cl_disinf_controller+0x168>
 					{
 						flag_hotcitric = 1;
   9c100:	4b79      	ldr	r3, [pc, #484]	; (9c2e8 <Cl_disinf_controller+0x348>)
   9c102:	2201      	movs	r2, #1
   9c104:	701a      	strb	r2, [r3, #0]
   9c106:	e00e      	b.n	9c126 <Cl_disinf_controller+0x186>
 					}
 					else if (cl_temp_diinftype.bytearray[0] == 3)
   9c108:	4b76      	ldr	r3, [pc, #472]	; (9c2e4 <Cl_disinf_controller+0x344>)
   9c10a:	781b      	ldrb	r3, [r3, #0]
   9c10c:	2b03      	cmp	r3, #3
   9c10e:	d103      	bne.n	9c118 <Cl_disinf_controller+0x178>
 					{
 						flag_na = 1;
   9c110:	4b76      	ldr	r3, [pc, #472]	; (9c2ec <Cl_disinf_controller+0x34c>)
   9c112:	2201      	movs	r2, #1
   9c114:	701a      	strb	r2, [r3, #0]
   9c116:	e006      	b.n	9c126 <Cl_disinf_controller+0x186>
 					}
 					else if(cl_temp_diinftype.bytearray[0] == 5){
   9c118:	4b72      	ldr	r3, [pc, #456]	; (9c2e4 <Cl_disinf_controller+0x344>)
   9c11a:	781b      	ldrb	r3, [r3, #0]
   9c11c:	2b05      	cmp	r3, #5
   9c11e:	d102      	bne.n	9c126 <Cl_disinf_controller+0x186>
 						
 						flag_citric = 1;
   9c120:	4b73      	ldr	r3, [pc, #460]	; (9c2f0 <Cl_disinf_controller+0x350>)
   9c122:	2201      	movs	r2, #1
   9c124:	701a      	strb	r2, [r3, #0]
 					}
 					
				}
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   9c126:	233c      	movs	r3, #60	; 0x3c
   9c128:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9c12c:	2301      	movs	r3, #1
   9c12e:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c130:	f107 0113 	add.w	r1, r7, #19
   9c134:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c138:	2201      	movs	r2, #1
   9c13a:	4618      	mov	r0, r3
   9c13c:	4b66      	ldr	r3, [pc, #408]	; (9c2d8 <Cl_disinf_controller+0x338>)
   9c13e:	4798      	blx	r3
   9c140:	4603      	mov	r3, r0
   9c142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   9c146:	4b6b      	ldr	r3, [pc, #428]	; (9c2f4 <Cl_disinf_controller+0x354>)
   9c148:	4798      	blx	r3
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9c14a:	2044      	movs	r0, #68	; 0x44
   9c14c:	4b6a      	ldr	r3, [pc, #424]	; (9c2f8 <Cl_disinf_controller+0x358>)
   9c14e:	4798      	blx	r3
   9c150:	4603      	mov	r3, r0
   9c152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9c156:	4b5d      	ldr	r3, [pc, #372]	; (9c2cc <Cl_disinf_controller+0x32c>)
   9c158:	2203      	movs	r2, #3
   9c15a:	701a      	strb	r2, [r3, #0]
				break;
   9c15c:	e000      	b.n	9c160 <Cl_disinf_controller+0x1c0>
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
					}
				}
				break;
   9c15e:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   9c160:	f001 b91e 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   9c164:	7efb      	ldrb	r3, [r7, #27]
   9c166:	3b03      	subs	r3, #3
   9c168:	2b1f      	cmp	r3, #31
   9c16a:	d87a      	bhi.n	9c262 <Cl_disinf_controller+0x2c2>
   9c16c:	a201      	add	r2, pc, #4	; (adr r2, 9c174 <Cl_disinf_controller+0x1d4>)
   9c16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c172:	bf00      	nop
   9c174:	0009c1f5 	.word	0x0009c1f5
   9c178:	0009c263 	.word	0x0009c263
   9c17c:	0009c263 	.word	0x0009c263
   9c180:	0009c263 	.word	0x0009c263
   9c184:	0009c263 	.word	0x0009c263
   9c188:	0009c263 	.word	0x0009c263
   9c18c:	0009c263 	.word	0x0009c263
   9c190:	0009c263 	.word	0x0009c263
   9c194:	0009c263 	.word	0x0009c263
   9c198:	0009c263 	.word	0x0009c263
   9c19c:	0009c263 	.word	0x0009c263
   9c1a0:	0009c263 	.word	0x0009c263
   9c1a4:	0009c247 	.word	0x0009c247
   9c1a8:	0009c263 	.word	0x0009c263
   9c1ac:	0009c263 	.word	0x0009c263
   9c1b0:	0009c263 	.word	0x0009c263
   9c1b4:	0009c1fb 	.word	0x0009c1fb
   9c1b8:	0009c263 	.word	0x0009c263
   9c1bc:	0009c263 	.word	0x0009c263
   9c1c0:	0009c263 	.word	0x0009c263
   9c1c4:	0009c263 	.word	0x0009c263
   9c1c8:	0009c263 	.word	0x0009c263
   9c1cc:	0009c263 	.word	0x0009c263
   9c1d0:	0009c263 	.word	0x0009c263
   9c1d4:	0009c263 	.word	0x0009c263
   9c1d8:	0009c263 	.word	0x0009c263
   9c1dc:	0009c263 	.word	0x0009c263
   9c1e0:	0009c263 	.word	0x0009c263
   9c1e4:	0009c263 	.word	0x0009c263
   9c1e8:	0009c263 	.word	0x0009c263
   9c1ec:	0009c263 	.word	0x0009c263
   9c1f0:	0009c207 	.word	0x0009c207
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c1f4:	4b39      	ldr	r3, [pc, #228]	; (9c2dc <Cl_disinf_controller+0x33c>)
   9c1f6:	4798      	blx	r3
					break;
   9c1f8:	e037      	b.n	9c26a <Cl_disinf_controller+0x2ca>
					
					
					case EVENT_DISINF_ALARM:
					
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9c1fa:	4b40      	ldr	r3, [pc, #256]	; (9c2fc <Cl_disinf_controller+0x35c>)
   9c1fc:	4798      	blx	r3
   9c1fe:	4603      	mov	r3, r0
   9c200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c204:	e031      	b.n	9c26a <Cl_disinf_controller+0x2ca>
					
					
					
					
					//Send Pause
					CSeventcount = 0;
   9c206:	4b3e      	ldr	r3, [pc, #248]	; (9c300 <Cl_disinf_controller+0x360>)
   9c208:	2200      	movs	r2, #0
   9c20a:	601a      	str	r2, [r3, #0]
					 IntakeReadyFlag = true;
   9c20c:	4b3d      	ldr	r3, [pc, #244]	; (9c304 <Cl_disinf_controller+0x364>)
   9c20e:	2201      	movs	r2, #1
   9c210:	701a      	strb	r2, [r3, #0]
					 sv_cntrl_deactivate_valve(VALVE_ID1);
   9c212:	2001      	movs	r0, #1
   9c214:	4b3c      	ldr	r3, [pc, #240]	; (9c308 <Cl_disinf_controller+0x368>)
   9c216:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9c218:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9c21c:	2002      	movs	r0, #2
   9c21e:	4b3b      	ldr	r3, [pc, #236]	; (9c30c <Cl_disinf_controller+0x36c>)
   9c220:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9c222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9c226:	2001      	movs	r0, #1
   9c228:	4b38      	ldr	r3, [pc, #224]	; (9c30c <Cl_disinf_controller+0x36c>)
   9c22a:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR1);
   9c22c:	2001      	movs	r0, #1
   9c22e:	4b38      	ldr	r3, [pc, #224]	; (9c310 <Cl_disinf_controller+0x370>)
   9c230:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR2);
   9c232:	2002      	movs	r0, #2
   9c234:	4b36      	ldr	r3, [pc, #216]	; (9c310 <Cl_disinf_controller+0x370>)
   9c236:	4798      	blx	r3
					 
					 Cl_bc_controller(BC_EVENT_DISINF_INTAKE);
   9c238:	200f      	movs	r0, #15
   9c23a:	4b36      	ldr	r3, [pc, #216]	; (9c314 <Cl_disinf_controller+0x374>)
   9c23c:	4798      	blx	r3
					 
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   9c23e:	4b23      	ldr	r3, [pc, #140]	; (9c2cc <Cl_disinf_controller+0x32c>)
   9c240:	2204      	movs	r2, #4
   9c242:	701a      	strb	r2, [r3, #0]
					
					break;
   9c244:	e011      	b.n	9c26a <Cl_disinf_controller+0x2ca>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   9c246:	4b34      	ldr	r3, [pc, #208]	; (9c318 <Cl_disinf_controller+0x378>)
   9c248:	681b      	ldr	r3, [r3, #0]
   9c24a:	3301      	adds	r3, #1
   9c24c:	4a32      	ldr	r2, [pc, #200]	; (9c318 <Cl_disinf_controller+0x378>)
   9c24e:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   9c250:	4b32      	ldr	r3, [pc, #200]	; (9c31c <Cl_disinf_controller+0x37c>)
   9c252:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   9c254:	4b30      	ldr	r3, [pc, #192]	; (9c318 <Cl_disinf_controller+0x378>)
   9c256:	681b      	ldr	r3, [r3, #0]
   9c258:	2b3c      	cmp	r3, #60	; 0x3c
   9c25a:	d105      	bne.n	9c268 <Cl_disinf_controller+0x2c8>
					{
	
						UpdateDisinfMinuteTick();
   9c25c:	4b30      	ldr	r3, [pc, #192]	; (9c320 <Cl_disinf_controller+0x380>)
   9c25e:	4798      	blx	r3
						
							
					}

					break;
   9c260:	e002      	b.n	9c268 <Cl_disinf_controller+0x2c8>
					
					default:break;
   9c262:	bf00      	nop
   9c264:	f001 b89c 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
						UpdateDisinfMinuteTick();
						
							
					}

					break;
   9c268:	bf00      	nop
					
					default:break;
				}
				
			break;
   9c26a:	f001 b899 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   9c26e:	7efb      	ldrb	r3, [r7, #27]
   9c270:	3b02      	subs	r3, #2
   9c272:	2b11      	cmp	r3, #17
   9c274:	f200 80e2 	bhi.w	9c43c <Cl_disinf_controller+0x49c>
   9c278:	a201      	add	r2, pc, #4	; (adr r2, 9c280 <Cl_disinf_controller+0x2e0>)
   9c27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c27e:	bf00      	nop
   9c280:	0009c389 	.word	0x0009c389
   9c284:	0009c383 	.word	0x0009c383
   9c288:	0009c43d 	.word	0x0009c43d
   9c28c:	0009c43d 	.word	0x0009c43d
   9c290:	0009c43d 	.word	0x0009c43d
   9c294:	0009c43d 	.word	0x0009c43d
   9c298:	0009c43d 	.word	0x0009c43d
   9c29c:	0009c43d 	.word	0x0009c43d
   9c2a0:	0009c43d 	.word	0x0009c43d
   9c2a4:	0009c43d 	.word	0x0009c43d
   9c2a8:	0009c43d 	.word	0x0009c43d
   9c2ac:	0009c43d 	.word	0x0009c43d
   9c2b0:	0009c325 	.word	0x0009c325
   9c2b4:	0009c43d 	.word	0x0009c43d
   9c2b8:	0009c43d 	.word	0x0009c43d
   9c2bc:	0009c43d 	.word	0x0009c43d
   9c2c0:	0009c43d 	.word	0x0009c43d
   9c2c4:	0009c431 	.word	0x0009c431
   9c2c8:	0009d3b1 	.word	0x0009d3b1
   9c2cc:	20071bd7 	.word	0x20071bd7
   9c2d0:	200723e8 	.word	0x200723e8
   9c2d4:	0009a331 	.word	0x0009a331
   9c2d8:	0009b805 	.word	0x0009b805
   9c2dc:	0009d735 	.word	0x0009d735
   9c2e0:	00093009 	.word	0x00093009
   9c2e4:	20072810 	.word	0x20072810
   9c2e8:	20071a4f 	.word	0x20071a4f
   9c2ec:	20071a51 	.word	0x20071a51
   9c2f0:	20071a52 	.word	0x20071a52
   9c2f4:	0009d889 	.word	0x0009d889
   9c2f8:	0008ba55 	.word	0x0008ba55
   9c2fc:	0009d9dd 	.word	0x0009d9dd
   9c300:	20071764 	.word	0x20071764
   9c304:	20071c08 	.word	0x20071c08
   9c308:	00099ac9 	.word	0x00099ac9
   9c30c:	00099b21 	.word	0x00099b21
   9c310:	00099a09 	.word	0x00099a09
   9c314:	000832a1 	.word	0x000832a1
   9c318:	20071bd8 	.word	0x20071bd8
   9c31c:	0009dd09 	.word	0x0009dd09
   9c320:	0009e045 	.word	0x0009e045
				{ 
					case EVENT_DISINF_TICK_500MS :
					if(CSeventcount > 2){
   9c324:	4bba      	ldr	r3, [pc, #744]	; (9c610 <Cl_disinf_controller+0x670>)
   9c326:	681b      	ldr	r3, [r3, #0]
   9c328:	2b02      	cmp	r3, #2
   9c32a:	f340 808a 	ble.w	9c442 <Cl_disinf_controller+0x4a2>
						
						Cl_bc_controller(BC_EVENT_STOP);
   9c32e:	2005      	movs	r0, #5
   9c330:	4bb8      	ldr	r3, [pc, #736]	; (9c614 <Cl_disinf_controller+0x674>)
   9c332:	4798      	blx	r3
						command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9c334:	2339      	movs	r3, #57	; 0x39
   9c336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)1;
   9c33a:	2301      	movs	r3, #1
   9c33c:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c33e:	f107 0113 	add.w	r1, r7, #19
   9c342:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c346:	2201      	movs	r2, #1
   9c348:	4618      	mov	r0, r3
   9c34a:	4bb3      	ldr	r3, [pc, #716]	; (9c618 <Cl_disinf_controller+0x678>)
   9c34c:	4798      	blx	r3
   9c34e:	4603      	mov	r3, r0
   9c350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						cl_wait(10);
   9c354:	200a      	movs	r0, #10
   9c356:	4bb1      	ldr	r3, [pc, #708]	; (9c61c <Cl_disinf_controller+0x67c>)
   9c358:	4798      	blx	r3

						command = CON_TX_COMMAND_DISINF_PAUSED;
   9c35a:	2338      	movs	r3, #56	; 0x38
   9c35c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)0;
   9c360:	2300      	movs	r3, #0
   9c362:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c364:	f107 0113 	add.w	r1, r7, #19
   9c368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c36c:	2200      	movs	r2, #0
   9c36e:	4618      	mov	r0, r3
   9c370:	4ba9      	ldr	r3, [pc, #676]	; (9c618 <Cl_disinf_controller+0x678>)
   9c372:	4798      	blx	r3
   9c374:	4603      	mov	r3, r0
   9c376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
   9c37a:	4ba5      	ldr	r3, [pc, #660]	; (9c610 <Cl_disinf_controller+0x670>)
   9c37c:	2200      	movs	r2, #0
   9c37e:	601a      	str	r2, [r3, #0]
						
					}
					
					break;
   9c380:	e05f      	b.n	9c442 <Cl_disinf_controller+0x4a2>
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c382:	4ba7      	ldr	r3, [pc, #668]	; (9c620 <Cl_disinf_controller+0x680>)
   9c384:	4798      	blx	r3
					break;
   9c386:	e05d      	b.n	9c444 <Cl_disinf_controller+0x4a4>
					
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   9c388:	4ba6      	ldr	r3, [pc, #664]	; (9c624 <Cl_disinf_controller+0x684>)
   9c38a:	4798      	blx	r3
					 if (flag_hotcitric == 1 || flag_citric == 1)
   9c38c:	4ba6      	ldr	r3, [pc, #664]	; (9c628 <Cl_disinf_controller+0x688>)
   9c38e:	781b      	ldrb	r3, [r3, #0]
   9c390:	2b01      	cmp	r3, #1
   9c392:	d003      	beq.n	9c39c <Cl_disinf_controller+0x3fc>
   9c394:	4ba5      	ldr	r3, [pc, #660]	; (9c62c <Cl_disinf_controller+0x68c>)
   9c396:	781b      	ldrb	r3, [r3, #0]
   9c398:	2b01      	cmp	r3, #1
   9c39a:	d114      	bne.n	9c3c6 <Cl_disinf_controller+0x426>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   9c39c:	2300      	movs	r3, #0
   9c39e:	9300      	str	r3, [sp, #0]
   9c3a0:	f04f 0300 	mov.w	r3, #0
   9c3a4:	f04f 0200 	mov.w	r2, #0
   9c3a8:	2101      	movs	r1, #1
   9c3aa:	202b      	movs	r0, #43	; 0x2b
   9c3ac:	4ca0      	ldr	r4, [pc, #640]	; (9c630 <Cl_disinf_controller+0x690>)
   9c3ae:	47a0      	blx	r4
   9c3b0:	4603      	mov	r3, r0
   9c3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   9c3b6:	2101      	movs	r1, #1
   9c3b8:	202b      	movs	r0, #43	; 0x2b
   9c3ba:	4b9e      	ldr	r3, [pc, #632]	; (9c634 <Cl_disinf_controller+0x694>)
   9c3bc:	4798      	blx	r3
   9c3be:	4603      	mov	r3, r0
   9c3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9c3c4:	e017      	b.n	9c3f6 <Cl_disinf_controller+0x456>
					 }
					 else if (flag_na == 1)
   9c3c6:	4b9c      	ldr	r3, [pc, #624]	; (9c638 <Cl_disinf_controller+0x698>)
   9c3c8:	781b      	ldrb	r3, [r3, #0]
   9c3ca:	2b01      	cmp	r3, #1
   9c3cc:	d113      	bne.n	9c3f6 <Cl_disinf_controller+0x456>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   9c3ce:	2300      	movs	r3, #0
   9c3d0:	9300      	str	r3, [sp, #0]
   9c3d2:	f04f 0300 	mov.w	r3, #0
   9c3d6:	f04f 0200 	mov.w	r2, #0
   9c3da:	2101      	movs	r1, #1
   9c3dc:	2029      	movs	r0, #41	; 0x29
   9c3de:	4c94      	ldr	r4, [pc, #592]	; (9c630 <Cl_disinf_controller+0x690>)
   9c3e0:	47a0      	blx	r4
   9c3e2:	4603      	mov	r3, r0
   9c3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   9c3e8:	2101      	movs	r1, #1
   9c3ea:	2029      	movs	r0, #41	; 0x29
   9c3ec:	4b91      	ldr	r3, [pc, #580]	; (9c634 <Cl_disinf_controller+0x694>)
   9c3ee:	4798      	blx	r3
   9c3f0:	4603      	mov	r3, r0
   9c3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					// cl_disinfstate = CL_DISINF_STATE_INTER;
			//		 command = CON_TX_COMMAND_DISINF_PAUSED;
			//		  data = (Cl_Uint8Type)0;
			//		  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					
 					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9c3f6:	233b      	movs	r3, #59	; 0x3b
   9c3f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 					 data = (Cl_Uint8Type)0;
   9c3fc:	2300      	movs	r3, #0
   9c3fe:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c400:	f107 0113 	add.w	r1, r7, #19
   9c404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c408:	2200      	movs	r2, #0
   9c40a:	4618      	mov	r0, r3
   9c40c:	4b82      	ldr	r3, [pc, #520]	; (9c618 <Cl_disinf_controller+0x678>)
   9c40e:	4798      	blx	r3
   9c410:	4603      	mov	r3, r0
   9c412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 					cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c416:	4b89      	ldr	r3, [pc, #548]	; (9c63c <Cl_disinf_controller+0x69c>)
   9c418:	2205      	movs	r2, #5
   9c41a:	701a      	strb	r2, [r3, #0]
 					sv_cntrl_activate_valve(VALVE_ID16);
   9c41c:	2010      	movs	r0, #16
   9c41e:	4b88      	ldr	r3, [pc, #544]	; (9c640 <Cl_disinf_controller+0x6a0>)
   9c420:	4798      	blx	r3
 					sv_cntrl_deactivate_valve(VALVE_ID18);
   9c422:	2012      	movs	r0, #18
   9c424:	4b87      	ldr	r3, [pc, #540]	; (9c644 <Cl_disinf_controller+0x6a4>)
   9c426:	4798      	blx	r3

					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c428:	4b84      	ldr	r3, [pc, #528]	; (9c63c <Cl_disinf_controller+0x69c>)
   9c42a:	2205      	movs	r2, #5
   9c42c:	701a      	strb	r2, [r3, #0]
// 					 command = CON_TX_COMMAND_DISINF_RESUMED;
// 					 data = (Cl_Uint8Type)0;
// 					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   9c42e:	e009      	b.n	9c444 <Cl_disinf_controller+0x4a4>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9c430:	4b85      	ldr	r3, [pc, #532]	; (9c648 <Cl_disinf_controller+0x6a8>)
   9c432:	4798      	blx	r3
   9c434:	4603      	mov	r3, r0
   9c436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c43a:	e003      	b.n	9c444 <Cl_disinf_controller+0x4a4>
					
					
					default:break;
   9c43c:	bf00      	nop
   9c43e:	f000 bfaf 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
						
					}
					
					break;
   9c442:	bf00      	nop
					default:break;
					
							
				}
			
			break;
   9c444:	f000 bfac 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   9c448:	7efb      	ldrb	r3, [r7, #27]
   9c44a:	3b03      	subs	r3, #3
   9c44c:	2b22      	cmp	r3, #34	; 0x22
   9c44e:	f200 87a2 	bhi.w	9d396 <Cl_disinf_controller+0x13f6>
   9c452:	a201      	add	r2, pc, #4	; (adr r2, 9c458 <Cl_disinf_controller+0x4b8>)
   9c454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c458:	0009c4e5 	.word	0x0009c4e5
   9c45c:	0009d397 	.word	0x0009d397
   9c460:	0009d397 	.word	0x0009d397
   9c464:	0009d397 	.word	0x0009d397
   9c468:	0009d397 	.word	0x0009d397
   9c46c:	0009d397 	.word	0x0009d397
   9c470:	0009d397 	.word	0x0009d397
   9c474:	0009d397 	.word	0x0009d397
   9c478:	0009d397 	.word	0x0009d397
   9c47c:	0009d397 	.word	0x0009d397
   9c480:	0009d397 	.word	0x0009d397
   9c484:	0009d397 	.word	0x0009d397
   9c488:	0009c51b 	.word	0x0009c51b
   9c48c:	0009d397 	.word	0x0009d397
   9c490:	0009d397 	.word	0x0009d397
   9c494:	0009d397 	.word	0x0009d397
   9c498:	0009c4eb 	.word	0x0009c4eb
   9c49c:	0009d397 	.word	0x0009d397
   9c4a0:	0009d397 	.word	0x0009d397
   9c4a4:	0009d397 	.word	0x0009d397
   9c4a8:	0009d397 	.word	0x0009d397
   9c4ac:	0009d397 	.word	0x0009d397
   9c4b0:	0009d397 	.word	0x0009d397
   9c4b4:	0009d397 	.word	0x0009d397
   9c4b8:	0009d397 	.word	0x0009d397
   9c4bc:	0009d397 	.word	0x0009d397
   9c4c0:	0009d397 	.word	0x0009d397
   9c4c4:	0009d397 	.word	0x0009d397
   9c4c8:	0009d397 	.word	0x0009d397
   9c4cc:	0009d397 	.word	0x0009d397
   9c4d0:	0009d397 	.word	0x0009d397
   9c4d4:	0009d397 	.word	0x0009d397
   9c4d8:	0009d397 	.word	0x0009d397
   9c4dc:	0009d397 	.word	0x0009d397
   9c4e0:	0009c4f7 	.word	0x0009c4f7
				{
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c4e4:	4b4e      	ldr	r3, [pc, #312]	; (9c620 <Cl_disinf_controller+0x680>)
   9c4e6:	4798      	blx	r3
					break;
   9c4e8:	e090      	b.n	9c60c <Cl_disinf_controller+0x66c>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9c4ea:	4b57      	ldr	r3, [pc, #348]	; (9c648 <Cl_disinf_controller+0x6a8>)
   9c4ec:	4798      	blx	r3
   9c4ee:	4603      	mov	r3, r0
   9c4f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c4f4:	e08a      	b.n	9c60c <Cl_disinf_controller+0x66c>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9c4f6:	4b55      	ldr	r3, [pc, #340]	; (9c64c <Cl_disinf_controller+0x6ac>)
   9c4f8:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9c4fa:	4b55      	ldr	r3, [pc, #340]	; (9c650 <Cl_disinf_controller+0x6b0>)
   9c4fc:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9c4fe:	4b55      	ldr	r3, [pc, #340]	; (9c654 <Cl_disinf_controller+0x6b4>)
   9c500:	4798      	blx	r3
					if (alarm_flag == 1)
   9c502:	4b55      	ldr	r3, [pc, #340]	; (9c658 <Cl_disinf_controller+0x6b8>)
   9c504:	781b      	ldrb	r3, [r3, #0]
   9c506:	b2db      	uxtb	r3, r3
   9c508:	2b01      	cmp	r3, #1
   9c50a:	d17e      	bne.n	9c60a <Cl_disinf_controller+0x66a>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c50c:	4b4b      	ldr	r3, [pc, #300]	; (9c63c <Cl_disinf_controller+0x69c>)
   9c50e:	2205      	movs	r2, #5
   9c510:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9c512:	4b51      	ldr	r3, [pc, #324]	; (9c658 <Cl_disinf_controller+0x6b8>)
   9c514:	2200      	movs	r2, #0
   9c516:	701a      	strb	r2, [r3, #0]
					}
					break;
   9c518:	e077      	b.n	9c60a <Cl_disinf_controller+0x66a>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9c51a:	4b50      	ldr	r3, [pc, #320]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c51c:	2200      	movs	r2, #0
   9c51e:	801a      	strh	r2, [r3, #0]
   9c520:	e06e      	b.n	9c600 <Cl_disinf_controller+0x660>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9c522:	4b4e      	ldr	r3, [pc, #312]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c524:	881b      	ldrh	r3, [r3, #0]
   9c526:	4619      	mov	r1, r3
   9c528:	4a4d      	ldr	r2, [pc, #308]	; (9c660 <Cl_disinf_controller+0x6c0>)
   9c52a:	460b      	mov	r3, r1
   9c52c:	00db      	lsls	r3, r3, #3
   9c52e:	1a5b      	subs	r3, r3, r1
   9c530:	4413      	add	r3, r2
   9c532:	7818      	ldrb	r0, [r3, #0]
   9c534:	4b49      	ldr	r3, [pc, #292]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c536:	881b      	ldrh	r3, [r3, #0]
   9c538:	461a      	mov	r2, r3
   9c53a:	4613      	mov	r3, r2
   9c53c:	00db      	lsls	r3, r3, #3
   9c53e:	1a9b      	subs	r3, r3, r2
   9c540:	4a47      	ldr	r2, [pc, #284]	; (9c660 <Cl_disinf_controller+0x6c0>)
   9c542:	4413      	add	r3, r2
   9c544:	3302      	adds	r3, #2
   9c546:	4619      	mov	r1, r3
   9c548:	4b46      	ldr	r3, [pc, #280]	; (9c664 <Cl_disinf_controller+0x6c4>)
   9c54a:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9c54c:	4b43      	ldr	r3, [pc, #268]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c54e:	881b      	ldrh	r3, [r3, #0]
   9c550:	4619      	mov	r1, r3
   9c552:	4a43      	ldr	r2, [pc, #268]	; (9c660 <Cl_disinf_controller+0x6c0>)
   9c554:	460b      	mov	r3, r1
   9c556:	00db      	lsls	r3, r3, #3
   9c558:	1a5b      	subs	r3, r3, r1
   9c55a:	4413      	add	r3, r2
   9c55c:	3302      	adds	r3, #2
   9c55e:	781b      	ldrb	r3, [r3, #0]
   9c560:	2b00      	cmp	r3, #0
   9c562:	d015      	beq.n	9c590 <Cl_disinf_controller+0x5f0>
							{
								sv_cntrl_setredalarm();
   9c564:	4b40      	ldr	r3, [pc, #256]	; (9c668 <Cl_disinf_controller+0x6c8>)
   9c566:	4798      	blx	r3
								sv_cntrl_buzzer();
   9c568:	4b40      	ldr	r3, [pc, #256]	; (9c66c <Cl_disinf_controller+0x6cc>)
   9c56a:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9c56c:	2208      	movs	r2, #8
   9c56e:	4940      	ldr	r1, [pc, #256]	; (9c670 <Cl_disinf_controller+0x6d0>)
   9c570:	2018      	movs	r0, #24
   9c572:	4b29      	ldr	r3, [pc, #164]	; (9c618 <Cl_disinf_controller+0x678>)
   9c574:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9c576:	4b2a      	ldr	r3, [pc, #168]	; (9c620 <Cl_disinf_controller+0x680>)
   9c578:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   9c57a:	4b30      	ldr	r3, [pc, #192]	; (9c63c <Cl_disinf_controller+0x69c>)
   9c57c:	2210      	movs	r2, #16
   9c57e:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   9c580:	4b3c      	ldr	r3, [pc, #240]	; (9c674 <Cl_disinf_controller+0x6d4>)
   9c582:	2201      	movs	r2, #1
   9c584:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   9c586:	4b35      	ldr	r3, [pc, #212]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c588:	2200      	movs	r2, #0
   9c58a:	801a      	strh	r2, [r3, #0]
								break;
   9c58c:	bf00      	nop
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9c58e:	e03d      	b.n	9c60c <Cl_disinf_controller+0x66c>
								alarm_flag1 = 1;
								tempcount=0;
								break;
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9c590:	4b32      	ldr	r3, [pc, #200]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c592:	881b      	ldrh	r3, [r3, #0]
   9c594:	2b0b      	cmp	r3, #11
   9c596:	d12d      	bne.n	9c5f4 <Cl_disinf_controller+0x654>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9c598:	4b30      	ldr	r3, [pc, #192]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c59a:	881b      	ldrh	r3, [r3, #0]
   9c59c:	4619      	mov	r1, r3
   9c59e:	4a30      	ldr	r2, [pc, #192]	; (9c660 <Cl_disinf_controller+0x6c0>)
   9c5a0:	460b      	mov	r3, r1
   9c5a2:	00db      	lsls	r3, r3, #3
   9c5a4:	1a5b      	subs	r3, r3, r1
   9c5a6:	4413      	add	r3, r2
   9c5a8:	3302      	adds	r3, #2
   9c5aa:	781b      	ldrb	r3, [r3, #0]
   9c5ac:	f083 0301 	eor.w	r3, r3, #1
   9c5b0:	b2db      	uxtb	r3, r3
   9c5b2:	2b00      	cmp	r3, #0
   9c5b4:	d01e      	beq.n	9c5f4 <Cl_disinf_controller+0x654>
								{
									sv_cntrl_resetredalarm();
   9c5b6:	4b25      	ldr	r3, [pc, #148]	; (9c64c <Cl_disinf_controller+0x6ac>)
   9c5b8:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   9c5ba:	4b25      	ldr	r3, [pc, #148]	; (9c650 <Cl_disinf_controller+0x6b0>)
   9c5bc:	4798      	blx	r3
									alarm_flag = 1;
   9c5be:	4b26      	ldr	r3, [pc, #152]	; (9c658 <Cl_disinf_controller+0x6b8>)
   9c5c0:	2201      	movs	r2, #1
   9c5c2:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   9c5c4:	4b2b      	ldr	r3, [pc, #172]	; (9c674 <Cl_disinf_controller+0x6d4>)
   9c5c6:	781b      	ldrb	r3, [r3, #0]
   9c5c8:	b2db      	uxtb	r3, r3
   9c5ca:	2b00      	cmp	r3, #0
   9c5cc:	d112      	bne.n	9c5f4 <Cl_disinf_controller+0x654>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9c5ce:	233b      	movs	r3, #59	; 0x3b
   9c5d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   9c5d4:	2300      	movs	r3, #0
   9c5d6:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c5d8:	f107 0113 	add.w	r1, r7, #19
   9c5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c5e0:	2200      	movs	r2, #0
   9c5e2:	4618      	mov	r0, r3
   9c5e4:	4b0c      	ldr	r3, [pc, #48]	; (9c618 <Cl_disinf_controller+0x678>)
   9c5e6:	4798      	blx	r3
   9c5e8:	4603      	mov	r3, r0
   9c5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c5ee:	4b13      	ldr	r3, [pc, #76]	; (9c63c <Cl_disinf_controller+0x69c>)
   9c5f0:	2205      	movs	r2, #5
   9c5f2:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9c5f4:	4b19      	ldr	r3, [pc, #100]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c5f6:	881b      	ldrh	r3, [r3, #0]
   9c5f8:	3301      	adds	r3, #1
   9c5fa:	b29a      	uxth	r2, r3
   9c5fc:	4b17      	ldr	r3, [pc, #92]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c5fe:	801a      	strh	r2, [r3, #0]
   9c600:	4b16      	ldr	r3, [pc, #88]	; (9c65c <Cl_disinf_controller+0x6bc>)
   9c602:	881b      	ldrh	r3, [r3, #0]
   9c604:	2b0b      	cmp	r3, #11
   9c606:	d98c      	bls.n	9c522 <Cl_disinf_controller+0x582>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9c608:	e000      	b.n	9c60c <Cl_disinf_controller+0x66c>
					if (alarm_flag == 1)
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
						alarm_flag = 0;
					}
					break;
   9c60a:	bf00      	nop
							}
						}
					break;
							
				}
			break;
   9c60c:	f000 bec3 	b.w	9d396 <Cl_disinf_controller+0x13f6>
   9c610:	20071764 	.word	0x20071764
   9c614:	000832a1 	.word	0x000832a1
   9c618:	0009b805 	.word	0x0009b805
   9c61c:	00093009 	.word	0x00093009
   9c620:	0009d735 	.word	0x0009d735
   9c624:	0009d5e5 	.word	0x0009d5e5
   9c628:	20071a4f 	.word	0x20071a4f
   9c62c:	20071a52 	.word	0x20071a52
   9c630:	00082d85 	.word	0x00082d85
   9c634:	00082de1 	.word	0x00082de1
   9c638:	20071a51 	.word	0x20071a51
   9c63c:	20071bd7 	.word	0x20071bd7
   9c640:	00099aa9 	.word	0x00099aa9
   9c644:	00099ac9 	.word	0x00099ac9
   9c648:	0009d9dd 	.word	0x0009d9dd
   9c64c:	00099d51 	.word	0x00099d51
   9c650:	00099d8d 	.word	0x00099d8d
   9c654:	0009d7e9 	.word	0x0009d7e9
   9c658:	20071bd5 	.word	0x20071bd5
   9c65c:	20072814 	.word	0x20072814
   9c660:	20070b78 	.word	0x20070b78
   9c664:	00082fbd 	.word	0x00082fbd
   9c668:	00099d01 	.word	0x00099d01
   9c66c:	00099d3d 	.word	0x00099d3d
   9c670:	000a8a04 	.word	0x000a8a04
   9c674:	20071bd6 	.word	0x20071bd6
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   9c678:	7efb      	ldrb	r3, [r7, #27]
   9c67a:	3b03      	subs	r3, #3
   9c67c:	2b10      	cmp	r3, #16
   9c67e:	d87b      	bhi.n	9c778 <Cl_disinf_controller+0x7d8>
   9c680:	a201      	add	r2, pc, #4	; (adr r2, 9c688 <Cl_disinf_controller+0x6e8>)
   9c682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c686:	bf00      	nop
   9c688:	0009c6cd 	.word	0x0009c6cd
   9c68c:	0009c779 	.word	0x0009c779
   9c690:	0009c779 	.word	0x0009c779
   9c694:	0009c779 	.word	0x0009c779
   9c698:	0009c779 	.word	0x0009c779
   9c69c:	0009c779 	.word	0x0009c779
   9c6a0:	0009c779 	.word	0x0009c779
   9c6a4:	0009c779 	.word	0x0009c779
   9c6a8:	0009c779 	.word	0x0009c779
   9c6ac:	0009c779 	.word	0x0009c779
   9c6b0:	0009c779 	.word	0x0009c779
   9c6b4:	0009c779 	.word	0x0009c779
   9c6b8:	0009c6d3 	.word	0x0009c6d3
   9c6bc:	0009c779 	.word	0x0009c779
   9c6c0:	0009c779 	.word	0x0009c779
   9c6c4:	0009c779 	.word	0x0009c779
   9c6c8:	0009c76d 	.word	0x0009c76d
						{

							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9c6cc:	4b95      	ldr	r3, [pc, #596]	; (9c924 <Cl_disinf_controller+0x984>)
   9c6ce:	4798      	blx	r3
							break;
   9c6d0:	e056      	b.n	9c780 <Cl_disinf_controller+0x7e0>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   9c6d2:	4b95      	ldr	r3, [pc, #596]	; (9c928 <Cl_disinf_controller+0x988>)
   9c6d4:	881b      	ldrh	r3, [r3, #0]
   9c6d6:	3301      	adds	r3, #1
   9c6d8:	b29a      	uxth	r2, r3
   9c6da:	4b93      	ldr	r3, [pc, #588]	; (9c928 <Cl_disinf_controller+0x988>)
   9c6dc:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   9c6de:	4b92      	ldr	r3, [pc, #584]	; (9c928 <Cl_disinf_controller+0x988>)
   9c6e0:	881b      	ldrh	r3, [r3, #0]
   9c6e2:	2b03      	cmp	r3, #3
   9c6e4:	d902      	bls.n	9c6ec <Cl_disinf_controller+0x74c>
							{
								Cl_disinfOpenFillTimeOut = true;
   9c6e6:	4b91      	ldr	r3, [pc, #580]	; (9c92c <Cl_disinf_controller+0x98c>)
   9c6e8:	2201      	movs	r2, #1
   9c6ea:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   9c6ec:	4b8f      	ldr	r3, [pc, #572]	; (9c92c <Cl_disinf_controller+0x98c>)
   9c6ee:	781b      	ldrb	r3, [r3, #0]
   9c6f0:	2b00      	cmp	r3, #0
   9c6f2:	d044      	beq.n	9c77e <Cl_disinf_controller+0x7de>
							{
								if (flag_hotcitric == 1 || flag_citric == 1 )
   9c6f4:	4b8e      	ldr	r3, [pc, #568]	; (9c930 <Cl_disinf_controller+0x990>)
   9c6f6:	781b      	ldrb	r3, [r3, #0]
   9c6f8:	2b01      	cmp	r3, #1
   9c6fa:	d003      	beq.n	9c704 <Cl_disinf_controller+0x764>
   9c6fc:	4b8d      	ldr	r3, [pc, #564]	; (9c934 <Cl_disinf_controller+0x994>)
   9c6fe:	781b      	ldrb	r3, [r3, #0]
   9c700:	2b01      	cmp	r3, #1
   9c702:	d119      	bne.n	9c738 <Cl_disinf_controller+0x798>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c704:	2001      	movs	r0, #1
   9c706:	4b8c      	ldr	r3, [pc, #560]	; (9c938 <Cl_disinf_controller+0x998>)
   9c708:	4798      	blx	r3
   9c70a:	4603      	mov	r3, r0
   9c70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c710:	2002      	movs	r0, #2
   9c712:	4b89      	ldr	r3, [pc, #548]	; (9c938 <Cl_disinf_controller+0x998>)
   9c714:	4798      	blx	r3
   9c716:	4603      	mov	r3, r0
   9c718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9c71c:	2203      	movs	r2, #3
   9c71e:	4987      	ldr	r1, [pc, #540]	; (9c93c <Cl_disinf_controller+0x99c>)
   9c720:	2018      	movs	r0, #24
   9c722:	4b87      	ldr	r3, [pc, #540]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c724:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   9c726:	4b87      	ldr	r3, [pc, #540]	; (9c944 <Cl_disinf_controller+0x9a4>)
   9c728:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9c72a:	4b87      	ldr	r3, [pc, #540]	; (9c948 <Cl_disinf_controller+0x9a8>)
   9c72c:	2206      	movs	r2, #6
   9c72e:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9c730:	4b7d      	ldr	r3, [pc, #500]	; (9c928 <Cl_disinf_controller+0x988>)
   9c732:	2200      	movs	r2, #0
   9c734:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9c736:	e022      	b.n	9c77e <Cl_disinf_controller+0x7de>
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
								sec_count =0;
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c738:	2001      	movs	r0, #1
   9c73a:	4b7f      	ldr	r3, [pc, #508]	; (9c938 <Cl_disinf_controller+0x998>)
   9c73c:	4798      	blx	r3
   9c73e:	4603      	mov	r3, r0
   9c740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c744:	2002      	movs	r0, #2
   9c746:	4b7c      	ldr	r3, [pc, #496]	; (9c938 <Cl_disinf_controller+0x998>)
   9c748:	4798      	blx	r3
   9c74a:	4603      	mov	r3, r0
   9c74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9c750:	2203      	movs	r2, #3
   9c752:	497a      	ldr	r1, [pc, #488]	; (9c93c <Cl_disinf_controller+0x99c>)
   9c754:	2018      	movs	r0, #24
   9c756:	4b7a      	ldr	r3, [pc, #488]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c758:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   9c75a:	4b7c      	ldr	r3, [pc, #496]	; (9c94c <Cl_disinf_controller+0x9ac>)
   9c75c:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9c75e:	4b7a      	ldr	r3, [pc, #488]	; (9c948 <Cl_disinf_controller+0x9a8>)
   9c760:	2206      	movs	r2, #6
   9c762:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9c764:	4b70      	ldr	r3, [pc, #448]	; (9c928 <Cl_disinf_controller+0x988>)
   9c766:	2200      	movs	r2, #0
   9c768:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9c76a:	e008      	b.n	9c77e <Cl_disinf_controller+0x7de>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9c76c:	4b78      	ldr	r3, [pc, #480]	; (9c950 <Cl_disinf_controller+0x9b0>)
   9c76e:	4798      	blx	r3
   9c770:	4603      	mov	r3, r0
   9c772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c776:	e003      	b.n	9c780 <Cl_disinf_controller+0x7e0>
							default:break;
   9c778:	bf00      	nop
   9c77a:	f000 be11 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
								
							}

					
							
							break;
   9c77e:	bf00      	nop
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
							break;
							default:break;
						}
			break;
   9c780:	f000 be0e 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   9c784:	7efb      	ldrb	r3, [r7, #27]
   9c786:	3b03      	subs	r3, #3
   9c788:	2b10      	cmp	r3, #16
   9c78a:	f200 813f 	bhi.w	9ca0c <Cl_disinf_controller+0xa6c>
   9c78e:	a201      	add	r2, pc, #4	; (adr r2, 9c794 <Cl_disinf_controller+0x7f4>)
   9c790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c794:	0009c7d9 	.word	0x0009c7d9
   9c798:	0009ca0d 	.word	0x0009ca0d
   9c79c:	0009ca0d 	.word	0x0009ca0d
   9c7a0:	0009ca0d 	.word	0x0009ca0d
   9c7a4:	0009ca0d 	.word	0x0009ca0d
   9c7a8:	0009ca0d 	.word	0x0009ca0d
   9c7ac:	0009ca0d 	.word	0x0009ca0d
   9c7b0:	0009ca0d 	.word	0x0009ca0d
   9c7b4:	0009ca0d 	.word	0x0009ca0d
   9c7b8:	0009ca0d 	.word	0x0009ca0d
   9c7bc:	0009ca0d 	.word	0x0009ca0d
   9c7c0:	0009ca0d 	.word	0x0009ca0d
   9c7c4:	0009c7df 	.word	0x0009c7df
   9c7c8:	0009ca0d 	.word	0x0009ca0d
   9c7cc:	0009ca0d 	.word	0x0009ca0d
   9c7d0:	0009ca0d 	.word	0x0009ca0d
   9c7d4:	0009ca01 	.word	0x0009ca01
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9c7d8:	4b52      	ldr	r3, [pc, #328]	; (9c924 <Cl_disinf_controller+0x984>)
   9c7da:	4798      	blx	r3
							break;
   9c7dc:	e11a      	b.n	9ca14 <Cl_disinf_controller+0xa74>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   9c7de:	4b5d      	ldr	r3, [pc, #372]	; (9c954 <Cl_disinf_controller+0x9b4>)
   9c7e0:	681b      	ldr	r3, [r3, #0]
   9c7e2:	3301      	adds	r3, #1
   9c7e4:	4a5b      	ldr	r2, [pc, #364]	; (9c954 <Cl_disinf_controller+0x9b4>)
   9c7e6:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9c7e8:	4b5b      	ldr	r3, [pc, #364]	; (9c958 <Cl_disinf_controller+0x9b8>)
   9c7ea:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9c7ec:	4b59      	ldr	r3, [pc, #356]	; (9c954 <Cl_disinf_controller+0x9b4>)
   9c7ee:	681b      	ldr	r3, [r3, #0]
   9c7f0:	2b3c      	cmp	r3, #60	; 0x3c
   9c7f2:	d101      	bne.n	9c7f8 <Cl_disinf_controller+0x858>
							{
						
								UpdateDisinfMinuteTick();
   9c7f4:	4b59      	ldr	r3, [pc, #356]	; (9c95c <Cl_disinf_controller+0x9bc>)
   9c7f6:	4798      	blx	r3
						
						
							}
							sec_count ++;
   9c7f8:	4b4b      	ldr	r3, [pc, #300]	; (9c928 <Cl_disinf_controller+0x988>)
   9c7fa:	881b      	ldrh	r3, [r3, #0]
   9c7fc:	3301      	adds	r3, #1
   9c7fe:	b29a      	uxth	r2, r3
   9c800:	4b49      	ldr	r3, [pc, #292]	; (9c928 <Cl_disinf_controller+0x988>)
   9c802:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1 )
   9c804:	4b4a      	ldr	r3, [pc, #296]	; (9c930 <Cl_disinf_controller+0x990>)
   9c806:	781b      	ldrb	r3, [r3, #0]
   9c808:	2b01      	cmp	r3, #1
   9c80a:	d142      	bne.n	9c892 <Cl_disinf_controller+0x8f2>
							{
								if(sec_count > 90)
   9c80c:	4b46      	ldr	r3, [pc, #280]	; (9c928 <Cl_disinf_controller+0x988>)
   9c80e:	881b      	ldrh	r3, [r3, #0]
   9c810:	2b5a      	cmp	r3, #90	; 0x5a
   9c812:	d93e      	bls.n	9c892 <Cl_disinf_controller+0x8f2>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9c814:	2203      	movs	r2, #3
   9c816:	4952      	ldr	r1, [pc, #328]	; (9c960 <Cl_disinf_controller+0x9c0>)
   9c818:	2018      	movs	r0, #24
   9c81a:	4b49      	ldr	r3, [pc, #292]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c81c:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9c81e:	4b51      	ldr	r3, [pc, #324]	; (9c964 <Cl_disinf_controller+0x9c4>)
   9c820:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c822:	2002      	movs	r0, #2
   9c824:	4b44      	ldr	r3, [pc, #272]	; (9c938 <Cl_disinf_controller+0x998>)
   9c826:	4798      	blx	r3
   9c828:	4603      	mov	r3, r0
   9c82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c82e:	2001      	movs	r0, #1
   9c830:	4b41      	ldr	r3, [pc, #260]	; (9c938 <Cl_disinf_controller+0x998>)
   9c832:	4798      	blx	r3
   9c834:	4603      	mov	r3, r0
   9c836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9c83a:	2005      	movs	r0, #5
   9c83c:	4b4a      	ldr	r3, [pc, #296]	; (9c968 <Cl_disinf_controller+0x9c8>)
   9c83e:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9c840:	2339      	movs	r3, #57	; 0x39
   9c842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9c846:	2302      	movs	r3, #2
   9c848:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c84a:	f107 0113 	add.w	r1, r7, #19
   9c84e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c852:	2201      	movs	r2, #1
   9c854:	4618      	mov	r0, r3
   9c856:	4b3a      	ldr	r3, [pc, #232]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c858:	4798      	blx	r3
   9c85a:	4603      	mov	r3, r0
   9c85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									IntakeReadyFlag = false;
   9c860:	4b42      	ldr	r3, [pc, #264]	; (9c96c <Cl_disinf_controller+0x9cc>)
   9c862:	2200      	movs	r2, #0
   9c864:	701a      	strb	r2, [r3, #0]
									
									cl_wait(20);
   9c866:	2014      	movs	r0, #20
   9c868:	4b41      	ldr	r3, [pc, #260]	; (9c970 <Cl_disinf_controller+0x9d0>)
   9c86a:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9c86c:	2338      	movs	r3, #56	; 0x38
   9c86e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9c872:	2300      	movs	r3, #0
   9c874:	74fb      	strb	r3, [r7, #19]
						//			cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c876:	f107 0113 	add.w	r1, r7, #19
   9c87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c87e:	2200      	movs	r2, #0
   9c880:	4618      	mov	r0, r3
   9c882:	4b2f      	ldr	r3, [pc, #188]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c884:	4798      	blx	r3
   9c886:	4603      	mov	r3, r0
   9c888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9c88c:	4b2e      	ldr	r3, [pc, #184]	; (9c948 <Cl_disinf_controller+0x9a8>)
   9c88e:	2207      	movs	r2, #7
   9c890:	701a      	strb	r2, [r3, #0]

								}
							}
							
							if (flag_citric == 1 )
   9c892:	4b28      	ldr	r3, [pc, #160]	; (9c934 <Cl_disinf_controller+0x994>)
   9c894:	781b      	ldrb	r3, [r3, #0]
   9c896:	2b01      	cmp	r3, #1
   9c898:	d16c      	bne.n	9c974 <Cl_disinf_controller+0x9d4>
							{
								if(sec_count > 90)
   9c89a:	4b23      	ldr	r3, [pc, #140]	; (9c928 <Cl_disinf_controller+0x988>)
   9c89c:	881b      	ldrh	r3, [r3, #0]
   9c89e:	2b5a      	cmp	r3, #90	; 0x5a
   9c8a0:	f240 80b7 	bls.w	9ca12 <Cl_disinf_controller+0xa72>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9c8a4:	2203      	movs	r2, #3
   9c8a6:	492e      	ldr	r1, [pc, #184]	; (9c960 <Cl_disinf_controller+0x9c0>)
   9c8a8:	2018      	movs	r0, #24
   9c8aa:	4b25      	ldr	r3, [pc, #148]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c8ac:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9c8ae:	4b2d      	ldr	r3, [pc, #180]	; (9c964 <Cl_disinf_controller+0x9c4>)
   9c8b0:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c8b2:	2002      	movs	r0, #2
   9c8b4:	4b20      	ldr	r3, [pc, #128]	; (9c938 <Cl_disinf_controller+0x998>)
   9c8b6:	4798      	blx	r3
   9c8b8:	4603      	mov	r3, r0
   9c8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c8be:	2001      	movs	r0, #1
   9c8c0:	4b1d      	ldr	r3, [pc, #116]	; (9c938 <Cl_disinf_controller+0x998>)
   9c8c2:	4798      	blx	r3
   9c8c4:	4603      	mov	r3, r0
   9c8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9c8ca:	2005      	movs	r0, #5
   9c8cc:	4b26      	ldr	r3, [pc, #152]	; (9c968 <Cl_disinf_controller+0x9c8>)
   9c8ce:	4798      	blx	r3
								
								IntakeReadyFlag = false;
   9c8d0:	4b26      	ldr	r3, [pc, #152]	; (9c96c <Cl_disinf_controller+0x9cc>)
   9c8d2:	2200      	movs	r2, #0
   9c8d4:	701a      	strb	r2, [r3, #0]
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9c8d6:	2339      	movs	r3, #57	; 0x39
   9c8d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9c8dc:	2302      	movs	r3, #2
   9c8de:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c8e0:	f107 0113 	add.w	r1, r7, #19
   9c8e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c8e8:	2201      	movs	r2, #1
   9c8ea:	4618      	mov	r0, r3
   9c8ec:	4b14      	ldr	r3, [pc, #80]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c8ee:	4798      	blx	r3
   9c8f0:	4603      	mov	r3, r0
   9c8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(20);
   9c8f6:	2014      	movs	r0, #20
   9c8f8:	4b1d      	ldr	r3, [pc, #116]	; (9c970 <Cl_disinf_controller+0x9d0>)
   9c8fa:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9c8fc:	2338      	movs	r3, #56	; 0x38
   9c8fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9c902:	2300      	movs	r3, #0
   9c904:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c906:	f107 0113 	add.w	r1, r7, #19
   9c90a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c90e:	2200      	movs	r2, #0
   9c910:	4618      	mov	r0, r3
   9c912:	4b0b      	ldr	r3, [pc, #44]	; (9c940 <Cl_disinf_controller+0x9a0>)
   9c914:	4798      	blx	r3
   9c916:	4603      	mov	r3, r0
   9c918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9c91c:	4b0a      	ldr	r3, [pc, #40]	; (9c948 <Cl_disinf_controller+0x9a8>)
   9c91e:	2207      	movs	r2, #7
   9c920:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9c922:	e076      	b.n	9ca12 <Cl_disinf_controller+0xa72>
   9c924:	0009d735 	.word	0x0009d735
   9c928:	20071c00 	.word	0x20071c00
   9c92c:	20070b76 	.word	0x20070b76
   9c930:	20071a4f 	.word	0x20071a4f
   9c934:	20071a52 	.word	0x20071a52
   9c938:	00099a45 	.word	0x00099a45
   9c93c:	000a8a0c 	.word	0x000a8a0c
   9c940:	0009b805 	.word	0x0009b805
   9c944:	00099ee5 	.word	0x00099ee5
   9c948:	20071bd7 	.word	0x20071bd7
   9c94c:	00099ebd 	.word	0x00099ebd
   9c950:	0009d9dd 	.word	0x0009d9dd
   9c954:	20071bd8 	.word	0x20071bd8
   9c958:	0009dd09 	.word	0x0009dd09
   9c95c:	0009e045 	.word	0x0009e045
   9c960:	000a8a10 	.word	0x000a8a10
   9c964:	00099ef9 	.word	0x00099ef9
   9c968:	000832a1 	.word	0x000832a1
   9c96c:	20071c08 	.word	0x20071c08
   9c970:	00093009 	.word	0x00093009
								

								}
							}
							
							else if(sec_count > 80)
   9c974:	4bc2      	ldr	r3, [pc, #776]	; (9cc80 <Cl_disinf_controller+0xce0>)
   9c976:	881b      	ldrh	r3, [r3, #0]
   9c978:	2b50      	cmp	r3, #80	; 0x50
   9c97a:	d94a      	bls.n	9ca12 <Cl_disinf_controller+0xa72>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9c97c:	2203      	movs	r2, #3
   9c97e:	49c1      	ldr	r1, [pc, #772]	; (9cc84 <Cl_disinf_controller+0xce4>)
   9c980:	2018      	movs	r0, #24
   9c982:	4bc1      	ldr	r3, [pc, #772]	; (9cc88 <Cl_disinf_controller+0xce8>)
   9c984:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   9c986:	4bc1      	ldr	r3, [pc, #772]	; (9cc8c <Cl_disinf_controller+0xcec>)
   9c988:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   9c98a:	4bc1      	ldr	r3, [pc, #772]	; (9cc90 <Cl_disinf_controller+0xcf0>)
   9c98c:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c98e:	2002      	movs	r0, #2
   9c990:	4bc0      	ldr	r3, [pc, #768]	; (9cc94 <Cl_disinf_controller+0xcf4>)
   9c992:	4798      	blx	r3
   9c994:	4603      	mov	r3, r0
   9c996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c99a:	2001      	movs	r0, #1
   9c99c:	4bbd      	ldr	r3, [pc, #756]	; (9cc94 <Cl_disinf_controller+0xcf4>)
   9c99e:	4798      	blx	r3
   9c9a0:	4603      	mov	r3, r0
   9c9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9c9a6:	2005      	movs	r0, #5
   9c9a8:	4bbb      	ldr	r3, [pc, #748]	; (9cc98 <Cl_disinf_controller+0xcf8>)
   9c9aa:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9c9ac:	2339      	movs	r3, #57	; 0x39
   9c9ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   9c9b2:	2302      	movs	r3, #2
   9c9b4:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c9b6:	f107 0113 	add.w	r1, r7, #19
   9c9ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c9be:	2201      	movs	r2, #1
   9c9c0:	4618      	mov	r0, r3
   9c9c2:	4bb1      	ldr	r3, [pc, #708]	; (9cc88 <Cl_disinf_controller+0xce8>)
   9c9c4:	4798      	blx	r3
   9c9c6:	4603      	mov	r3, r0
   9c9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								IntakeReadyFlag = false;
   9c9cc:	4bb3      	ldr	r3, [pc, #716]	; (9cc9c <Cl_disinf_controller+0xcfc>)
   9c9ce:	2200      	movs	r2, #0
   9c9d0:	701a      	strb	r2, [r3, #0]
								
								cl_wait(20);
   9c9d2:	2014      	movs	r0, #20
   9c9d4:	4bb2      	ldr	r3, [pc, #712]	; (9cca0 <Cl_disinf_controller+0xd00>)
   9c9d6:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   9c9d8:	2338      	movs	r3, #56	; 0x38
   9c9da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   9c9de:	2300      	movs	r3, #0
   9c9e0:	74fb      	strb	r3, [r7, #19]
							//	cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c9e2:	f107 0113 	add.w	r1, r7, #19
   9c9e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9c9ea:	2200      	movs	r2, #0
   9c9ec:	4618      	mov	r0, r3
   9c9ee:	4ba6      	ldr	r3, [pc, #664]	; (9cc88 <Cl_disinf_controller+0xce8>)
   9c9f0:	4798      	blx	r3
   9c9f2:	4603      	mov	r3, r0
   9c9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9c9f8:	4baa      	ldr	r3, [pc, #680]	; (9cca4 <Cl_disinf_controller+0xd04>)
   9c9fa:	2207      	movs	r2, #7
   9c9fc:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   9c9fe:	e008      	b.n	9ca12 <Cl_disinf_controller+0xa72>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9ca00:	4ba9      	ldr	r3, [pc, #676]	; (9cca8 <Cl_disinf_controller+0xd08>)
   9ca02:	4798      	blx	r3
   9ca04:	4603      	mov	r3, r0
   9ca06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9ca0a:	e003      	b.n	9ca14 <Cl_disinf_controller+0xa74>
							default:break;
   9ca0c:	bf00      	nop
   9ca0e:	f000 bcc7 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9ca12:	bf00      	nop
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
							break;
							default:break;
						}
			
			break;
   9ca14:	f000 bcc4 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9ca18:	7efb      	ldrb	r3, [r7, #27]
   9ca1a:	2b03      	cmp	r3, #3
   9ca1c:	d004      	beq.n	9ca28 <Cl_disinf_controller+0xa88>
   9ca1e:	2b13      	cmp	r3, #19
   9ca20:	d07a      	beq.n	9cb18 <Cl_disinf_controller+0xb78>
   9ca22:	2b02      	cmp	r3, #2
   9ca24:	d003      	beq.n	9ca2e <Cl_disinf_controller+0xa8e>

								break;
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
								break;
								default:break;
   9ca26:	e07d      	b.n	9cb24 <Cl_disinf_controller+0xb84>
			
						switch (cl_disinfevent)
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9ca28:	4ba0      	ldr	r3, [pc, #640]	; (9ccac <Cl_disinf_controller+0xd0c>)
   9ca2a:	4798      	blx	r3
							break;
   9ca2c:	e07a      	b.n	9cb24 <Cl_disinf_controller+0xb84>
							
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9ca2e:	2002      	movs	r0, #2
   9ca30:	4b9f      	ldr	r3, [pc, #636]	; (9ccb0 <Cl_disinf_controller+0xd10>)
   9ca32:	4798      	blx	r3
   9ca34:	4603      	mov	r3, r0
   9ca36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9ca3a:	2001      	movs	r0, #1
   9ca3c:	4b9c      	ldr	r3, [pc, #624]	; (9ccb0 <Cl_disinf_controller+0xd10>)
   9ca3e:	4798      	blx	r3
   9ca40:	4603      	mov	r3, r0
   9ca42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9ca46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9ca4a:	2002      	movs	r0, #2
   9ca4c:	4b99      	ldr	r3, [pc, #612]	; (9ccb4 <Cl_disinf_controller+0xd14>)
   9ca4e:	4798      	blx	r3
   9ca50:	4603      	mov	r3, r0
   9ca52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9ca56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9ca5a:	2001      	movs	r0, #1
   9ca5c:	4b95      	ldr	r3, [pc, #596]	; (9ccb4 <Cl_disinf_controller+0xd14>)
   9ca5e:	4798      	blx	r3
   9ca60:	4603      	mov	r3, r0
   9ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   9ca66:	4b94      	ldr	r3, [pc, #592]	; (9ccb8 <Cl_disinf_controller+0xd18>)
   9ca68:	2201      	movs	r2, #1
   9ca6a:	701a      	strb	r2, [r3, #0]
								Cl_Uint16Type potvalue = 0;
   9ca6c:	2300      	movs	r3, #0
   9ca6e:	843b      	strh	r3, [r7, #32]
								potvalue = (850 * 1024)/10000;                                 // 600
   9ca70:	2357      	movs	r3, #87	; 0x57
   9ca72:	843b      	strh	r3, [r7, #32]
								sv_cs_setpotvalue(potvalue);
   9ca74:	8c3b      	ldrh	r3, [r7, #32]
   9ca76:	4618      	mov	r0, r3
   9ca78:	4b90      	ldr	r3, [pc, #576]	; (9ccbc <Cl_disinf_controller+0xd1c>)
   9ca7a:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9ca7c:	4b90      	ldr	r3, [pc, #576]	; (9ccc0 <Cl_disinf_controller+0xd20>)
   9ca7e:	781b      	ldrb	r3, [r3, #0]
   9ca80:	2b01      	cmp	r3, #1
   9ca82:	d102      	bne.n	9ca8a <Cl_disinf_controller+0xaea>
 								{
 								hotrinse_flag = 1;
   9ca84:	4b8f      	ldr	r3, [pc, #572]	; (9ccc4 <Cl_disinf_controller+0xd24>)
   9ca86:	2201      	movs	r2, #1
   9ca88:	701a      	strb	r2, [r3, #0]
 								}
								
								Cl_bc_controller(BC_EVENT_START);
   9ca8a:	2004      	movs	r0, #4
   9ca8c:	4b82      	ldr	r3, [pc, #520]	; (9cc98 <Cl_disinf_controller+0xcf8>)
   9ca8e:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   9ca90:	4b8d      	ldr	r3, [pc, #564]	; (9ccc8 <Cl_disinf_controller+0xd28>)
   9ca92:	4798      	blx	r3
// 								if (flag_hotcitric == 1)
// 								{
// 									sv_cntrl_poweronheater();
// 									sv_cntrl_incheater(3500);
// 								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9ca94:	2002      	movs	r0, #2
   9ca96:	4b8d      	ldr	r3, [pc, #564]	; (9cccc <Cl_disinf_controller+0xd2c>)
   9ca98:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   9ca9a:	2003      	movs	r0, #3
   9ca9c:	4b8b      	ldr	r3, [pc, #556]	; (9cccc <Cl_disinf_controller+0xd2c>)
   9ca9e:	4798      	blx	r3
								sv_prop_startmixing();
   9caa0:	4b8b      	ldr	r3, [pc, #556]	; (9ccd0 <Cl_disinf_controller+0xd30>)
   9caa2:	4798      	blx	r3
								sv_cntrl_activatepump(UFPUMP);
   9caa4:	2004      	movs	r0, #4
   9caa6:	4b82      	ldr	r3, [pc, #520]	; (9ccb0 <Cl_disinf_controller+0xd10>)
   9caa8:	4798      	blx	r3
								sec_count =0;
   9caaa:	4b75      	ldr	r3, [pc, #468]	; (9cc80 <Cl_disinf_controller+0xce0>)
   9caac:	2200      	movs	r2, #0
   9caae:	801a      	strh	r2, [r3, #0]
								command = CON_TX_COMMAND_DISINF_RESUMED;
   9cab0:	233b      	movs	r3, #59	; 0x3b
   9cab2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cab6:	f107 0113 	add.w	r1, r7, #19
   9caba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9cabe:	2200      	movs	r2, #0
   9cac0:	4618      	mov	r0, r3
   9cac2:	4b71      	ldr	r3, [pc, #452]	; (9cc88 <Cl_disinf_controller+0xce8>)
   9cac4:	4798      	blx	r3
   9cac6:	4603      	mov	r3, r0
   9cac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9cacc:	4b75      	ldr	r3, [pc, #468]	; (9cca4 <Cl_disinf_controller+0xd04>)
   9cace:	2208      	movs	r2, #8
   9cad0:	701a      	strb	r2, [r3, #0]
							//	cl_disinfstate = CL_DISINF_STATE_INTER_1;
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9cad2:	2300      	movs	r3, #0
   9cad4:	9300      	str	r3, [sp, #0]
   9cad6:	f04f 0300 	mov.w	r3, #0
   9cada:	f04f 0200 	mov.w	r2, #0
   9cade:	2100      	movs	r1, #0
   9cae0:	2029      	movs	r0, #41	; 0x29
   9cae2:	4c7c      	ldr	r4, [pc, #496]	; (9ccd4 <Cl_disinf_controller+0xd34>)
   9cae4:	47a0      	blx	r4
   9cae6:	4603      	mov	r3, r0
   9cae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9caec:	2300      	movs	r3, #0
   9caee:	9300      	str	r3, [sp, #0]
   9caf0:	f04f 0300 	mov.w	r3, #0
   9caf4:	f04f 0200 	mov.w	r2, #0
   9caf8:	2100      	movs	r1, #0
   9cafa:	202b      	movs	r0, #43	; 0x2b
   9cafc:	4c75      	ldr	r4, [pc, #468]	; (9ccd4 <Cl_disinf_controller+0xd34>)
   9cafe:	47a0      	blx	r4
   9cb00:	4603      	mov	r3, r0
   9cb02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_AlarmActivateAlarms(ACID_IN_OPEN,true);
   9cb06:	2101      	movs	r1, #1
   9cb08:	2029      	movs	r0, #41	; 0x29
   9cb0a:	4b73      	ldr	r3, [pc, #460]	; (9ccd8 <Cl_disinf_controller+0xd38>)
   9cb0c:	4798      	blx	r3
								Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true);
   9cb0e:	2101      	movs	r1, #1
   9cb10:	202b      	movs	r0, #43	; 0x2b
   9cb12:	4b71      	ldr	r3, [pc, #452]	; (9ccd8 <Cl_disinf_controller+0xd38>)
   9cb14:	4798      	blx	r3
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   9cb16:	e005      	b.n	9cb24 <Cl_disinf_controller+0xb84>
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9cb18:	4b63      	ldr	r3, [pc, #396]	; (9cca8 <Cl_disinf_controller+0xd08>)
   9cb1a:	4798      	blx	r3
   9cb1c:	4603      	mov	r3, r0
   9cb1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   9cb22:	bf00      	nop
								default:break;
						}
			
			break;
   9cb24:	f000 bc3c 	b.w	9d3a0 <Cl_disinf_controller+0x1400>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   9cb28:	7efb      	ldrb	r3, [r7, #27]
   9cb2a:	3b03      	subs	r3, #3
   9cb2c:	2b22      	cmp	r3, #34	; 0x22
   9cb2e:	f200 8434 	bhi.w	9d39a <Cl_disinf_controller+0x13fa>
   9cb32:	a201      	add	r2, pc, #4	; (adr r2, 9cb38 <Cl_disinf_controller+0xb98>)
   9cb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cb38:	0009cbc5 	.word	0x0009cbc5
   9cb3c:	0009d39b 	.word	0x0009d39b
   9cb40:	0009d39b 	.word	0x0009d39b
   9cb44:	0009d39b 	.word	0x0009d39b
   9cb48:	0009d39b 	.word	0x0009d39b
   9cb4c:	0009d39b 	.word	0x0009d39b
   9cb50:	0009d39b 	.word	0x0009d39b
   9cb54:	0009d39b 	.word	0x0009d39b
   9cb58:	0009d39b 	.word	0x0009d39b
   9cb5c:	0009d39b 	.word	0x0009d39b
   9cb60:	0009d39b 	.word	0x0009d39b
   9cb64:	0009d39b 	.word	0x0009d39b
   9cb68:	0009cbfb 	.word	0x0009cbfb
   9cb6c:	0009d39b 	.word	0x0009d39b
   9cb70:	0009d39b 	.word	0x0009d39b
   9cb74:	0009d39b 	.word	0x0009d39b
   9cb78:	0009cbcb 	.word	0x0009cbcb
   9cb7c:	0009d39b 	.word	0x0009d39b
   9cb80:	0009d39b 	.word	0x0009d39b
   9cb84:	0009d39b 	.word	0x0009d39b
   9cb88:	0009d39b 	.word	0x0009d39b
   9cb8c:	0009d39b 	.word	0x0009d39b
   9cb90:	0009d39b 	.word	0x0009d39b
   9cb94:	0009d39b 	.word	0x0009d39b
   9cb98:	0009d39b 	.word	0x0009d39b
   9cb9c:	0009d39b 	.word	0x0009d39b
   9cba0:	0009d39b 	.word	0x0009d39b
   9cba4:	0009d39b 	.word	0x0009d39b
   9cba8:	0009d39b 	.word	0x0009d39b
   9cbac:	0009d39b 	.word	0x0009d39b
   9cbb0:	0009d39b 	.word	0x0009d39b
   9cbb4:	0009d39b 	.word	0x0009d39b
   9cbb8:	0009d39b 	.word	0x0009d39b
   9cbbc:	0009d39b 	.word	0x0009d39b
   9cbc0:	0009cbd7 	.word	0x0009cbd7
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9cbc4:	4b39      	ldr	r3, [pc, #228]	; (9ccac <Cl_disinf_controller+0xd0c>)
   9cbc6:	4798      	blx	r3
					break;
   9cbc8:	e02a      	b.n	9cc20 <Cl_disinf_controller+0xc80>
					
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9cbca:	4b37      	ldr	r3, [pc, #220]	; (9cca8 <Cl_disinf_controller+0xd08>)
   9cbcc:	4798      	blx	r3
   9cbce:	4603      	mov	r3, r0
   9cbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9cbd4:	e024      	b.n	9cc20 <Cl_disinf_controller+0xc80>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9cbd6:	4b41      	ldr	r3, [pc, #260]	; (9ccdc <Cl_disinf_controller+0xd3c>)
   9cbd8:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9cbda:	4b41      	ldr	r3, [pc, #260]	; (9cce0 <Cl_disinf_controller+0xd40>)
   9cbdc:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9cbde:	4b41      	ldr	r3, [pc, #260]	; (9cce4 <Cl_disinf_controller+0xd44>)
   9cbe0:	4798      	blx	r3
					if (alarm_flag == 1)
   9cbe2:	4b41      	ldr	r3, [pc, #260]	; (9cce8 <Cl_disinf_controller+0xd48>)
   9cbe4:	781b      	ldrb	r3, [r3, #0]
   9cbe6:	b2db      	uxtb	r3, r3
   9cbe8:	2b01      	cmp	r3, #1
   9cbea:	d118      	bne.n	9cc1e <Cl_disinf_controller+0xc7e>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9cbec:	4b2d      	ldr	r3, [pc, #180]	; (9cca4 <Cl_disinf_controller+0xd04>)
   9cbee:	2208      	movs	r2, #8
   9cbf0:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9cbf2:	4b3d      	ldr	r3, [pc, #244]	; (9cce8 <Cl_disinf_controller+0xd48>)
   9cbf4:	2200      	movs	r2, #0
   9cbf6:	701a      	strb	r2, [r3, #0]
					}
					break;
   9cbf8:	e011      	b.n	9cc1e <Cl_disinf_controller+0xc7e>
								 
					case EVENT_DISINF_TICK_SECOND:
					
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9cbfa:	233b      	movs	r3, #59	; 0x3b
   9cbfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cc00:	f107 0113 	add.w	r1, r7, #19
   9cc04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9cc08:	2200      	movs	r2, #0
   9cc0a:	4618      	mov	r0, r3
   9cc0c:	4b1e      	ldr	r3, [pc, #120]	; (9cc88 <Cl_disinf_controller+0xce8>)
   9cc0e:	4798      	blx	r3
   9cc10:	4603      	mov	r3, r0
   9cc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9cc16:	4b23      	ldr	r3, [pc, #140]	; (9cca4 <Cl_disinf_controller+0xd04>)
   9cc18:	2208      	movs	r2, #8
   9cc1a:	701a      	strb	r2, [r3, #0]
// 								//Cl_Disinf_UpdateTimeInfo();
// 								
// 							}
// 						}
//					}
								break;
   9cc1c:	e000      	b.n	9cc20 <Cl_disinf_controller+0xc80>
					if (alarm_flag == 1)
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
						alarm_flag = 0;
					}
					break;
   9cc1e:	bf00      	nop
// 						}
//					}
								break;
					
						}
			break;
   9cc20:	e3bb      	b.n	9d39a <Cl_disinf_controller+0x13fa>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   9cc22:	7efb      	ldrb	r3, [r7, #27]
   9cc24:	3b03      	subs	r3, #3
   9cc26:	2b10      	cmp	r3, #16
   9cc28:	f200 814b 	bhi.w	9cec2 <Cl_disinf_controller+0xf22>
   9cc2c:	a201      	add	r2, pc, #4	; (adr r2, 9cc34 <Cl_disinf_controller+0xc94>)
   9cc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cc32:	bf00      	nop
   9cc34:	0009cc79 	.word	0x0009cc79
   9cc38:	0009cec3 	.word	0x0009cec3
   9cc3c:	0009cec3 	.word	0x0009cec3
   9cc40:	0009cec3 	.word	0x0009cec3
   9cc44:	0009cec3 	.word	0x0009cec3
   9cc48:	0009cec3 	.word	0x0009cec3
   9cc4c:	0009cec3 	.word	0x0009cec3
   9cc50:	0009cec3 	.word	0x0009cec3
   9cc54:	0009cec3 	.word	0x0009cec3
   9cc58:	0009cec3 	.word	0x0009cec3
   9cc5c:	0009cec3 	.word	0x0009cec3
   9cc60:	0009cec3 	.word	0x0009cec3
   9cc64:	0009cced 	.word	0x0009cced
   9cc68:	0009cec3 	.word	0x0009cec3
   9cc6c:	0009cec3 	.word	0x0009cec3
   9cc70:	0009cec3 	.word	0x0009cec3
   9cc74:	0009ceb7 	.word	0x0009ceb7
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9cc78:	4b0c      	ldr	r3, [pc, #48]	; (9ccac <Cl_disinf_controller+0xd0c>)
   9cc7a:	4798      	blx	r3
							break;
   9cc7c:	e124      	b.n	9cec8 <Cl_disinf_controller+0xf28>
   9cc7e:	bf00      	nop
   9cc80:	20071c00 	.word	0x20071c00
   9cc84:	000a8a10 	.word	0x000a8a10
   9cc88:	0009b805 	.word	0x0009b805
   9cc8c:	00099ed1 	.word	0x00099ed1
   9cc90:	00099ef9 	.word	0x00099ef9
   9cc94:	00099a45 	.word	0x00099a45
   9cc98:	000832a1 	.word	0x000832a1
   9cc9c:	20071c08 	.word	0x20071c08
   9cca0:	00093009 	.word	0x00093009
   9cca4:	20071bd7 	.word	0x20071bd7
   9cca8:	0009d9dd 	.word	0x0009d9dd
   9ccac:	0009d735 	.word	0x0009d735
   9ccb0:	00099a09 	.word	0x00099a09
   9ccb4:	00099b21 	.word	0x00099b21
   9ccb8:	20071c02 	.word	0x20071c02
   9ccbc:	00099f5d 	.word	0x00099f5d
   9ccc0:	20071a4f 	.word	0x20071a4f
   9ccc4:	20071cb1 	.word	0x20071cb1
   9ccc8:	00099c1d 	.word	0x00099c1d
   9cccc:	00099aa9 	.word	0x00099aa9
   9ccd0:	00099e51 	.word	0x00099e51
   9ccd4:	00082d85 	.word	0x00082d85
   9ccd8:	00082de1 	.word	0x00082de1
   9ccdc:	00099d51 	.word	0x00099d51
   9cce0:	00099d8d 	.word	0x00099d8d
   9cce4:	0009d7e9 	.word	0x0009d7e9
   9cce8:	20071bd5 	.word	0x20071bd5
								{
				//					
								}
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   9ccec:	4bb4      	ldr	r3, [pc, #720]	; (9cfc0 <Cl_disinf_controller+0x1020>)
   9ccee:	4798      	blx	r3
							Cl_Uint16Type temp;
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   9ccf0:	f107 0310 	add.w	r3, r7, #16
   9ccf4:	4619      	mov	r1, r3
   9ccf6:	2013      	movs	r0, #19
   9ccf8:	4bb2      	ldr	r3, [pc, #712]	; (9cfc4 <Cl_disinf_controller+0x1024>)
   9ccfa:	4798      	blx	r3
	
									{
		
											float ftemp,temp1;
										
											res_temp_lookuptable((402 *100* temp)/(2*32768));									// temperature from look up table in 4 digits
   9ccfc:	8a3b      	ldrh	r3, [r7, #16]
   9ccfe:	461a      	mov	r2, r3
   9cd00:	f649 5308 	movw	r3, #40200	; 0x9d08
   9cd04:	fb03 f302 	mul.w	r3, r3, r2
   9cd08:	2b00      	cmp	r3, #0
   9cd0a:	da02      	bge.n	9cd12 <Cl_disinf_controller+0xd72>
   9cd0c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cd10:	33ff      	adds	r3, #255	; 0xff
   9cd12:	141b      	asrs	r3, r3, #16
   9cd14:	4618      	mov	r0, r3
   9cd16:	4bac      	ldr	r3, [pc, #688]	; (9cfc8 <Cl_disinf_controller+0x1028>)
   9cd18:	4798      	blx	r3
											temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   9cd1a:	4bac      	ldr	r3, [pc, #688]	; (9cfcc <Cl_disinf_controller+0x102c>)
   9cd1c:	681a      	ldr	r2, [r3, #0]
   9cd1e:	4bac      	ldr	r3, [pc, #688]	; (9cfd0 <Cl_disinf_controller+0x1030>)
   9cd20:	49ac      	ldr	r1, [pc, #688]	; (9cfd4 <Cl_disinf_controller+0x1034>)
   9cd22:	4610      	mov	r0, r2
   9cd24:	4798      	blx	r3
   9cd26:	4603      	mov	r3, r0
   9cd28:	61fb      	str	r3, [r7, #28]
											temp1 = temp1 - 3.1 + 1.4 + 1.2;										// sensor offset
   9cd2a:	4bab      	ldr	r3, [pc, #684]	; (9cfd8 <Cl_disinf_controller+0x1038>)
   9cd2c:	69f8      	ldr	r0, [r7, #28]
   9cd2e:	4798      	blx	r3
   9cd30:	4caa      	ldr	r4, [pc, #680]	; (9cfdc <Cl_disinf_controller+0x103c>)
   9cd32:	a39f      	add	r3, pc, #636	; (adr r3, 9cfb0 <Cl_disinf_controller+0x1010>)
   9cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cd38:	47a0      	blx	r4
   9cd3a:	4603      	mov	r3, r0
   9cd3c:	460c      	mov	r4, r1
   9cd3e:	4618      	mov	r0, r3
   9cd40:	4621      	mov	r1, r4
   9cd42:	4ca7      	ldr	r4, [pc, #668]	; (9cfe0 <Cl_disinf_controller+0x1040>)
   9cd44:	a39c      	add	r3, pc, #624	; (adr r3, 9cfb8 <Cl_disinf_controller+0x1018>)
   9cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cd4a:	47a0      	blx	r4
   9cd4c:	4603      	mov	r3, r0
   9cd4e:	460c      	mov	r4, r1
   9cd50:	4618      	mov	r0, r3
   9cd52:	4621      	mov	r1, r4
   9cd54:	4ca2      	ldr	r4, [pc, #648]	; (9cfe0 <Cl_disinf_controller+0x1040>)
   9cd56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   9cd5a:	4ba2      	ldr	r3, [pc, #648]	; (9cfe4 <Cl_disinf_controller+0x1044>)
   9cd5c:	47a0      	blx	r4
   9cd5e:	4603      	mov	r3, r0
   9cd60:	460c      	mov	r4, r1
   9cd62:	4619      	mov	r1, r3
   9cd64:	4622      	mov	r2, r4
   9cd66:	4ba0      	ldr	r3, [pc, #640]	; (9cfe8 <Cl_disinf_controller+0x1048>)
   9cd68:	4608      	mov	r0, r1
   9cd6a:	4611      	mov	r1, r2
   9cd6c:	4798      	blx	r3
   9cd6e:	4603      	mov	r3, r0
   9cd70:	61fb      	str	r3, [r7, #28]
											heatcutavgtmp2 =(heatcutavgtmp2*5 + temp1)/6;
   9cd72:	4b9e      	ldr	r3, [pc, #632]	; (9cfec <Cl_disinf_controller+0x104c>)
   9cd74:	681a      	ldr	r2, [r3, #0]
   9cd76:	4b9e      	ldr	r3, [pc, #632]	; (9cff0 <Cl_disinf_controller+0x1050>)
   9cd78:	499e      	ldr	r1, [pc, #632]	; (9cff4 <Cl_disinf_controller+0x1054>)
   9cd7a:	4610      	mov	r0, r2
   9cd7c:	4798      	blx	r3
   9cd7e:	4603      	mov	r3, r0
   9cd80:	461a      	mov	r2, r3
   9cd82:	4b9d      	ldr	r3, [pc, #628]	; (9cff8 <Cl_disinf_controller+0x1058>)
   9cd84:	69f9      	ldr	r1, [r7, #28]
   9cd86:	4610      	mov	r0, r2
   9cd88:	4798      	blx	r3
   9cd8a:	4603      	mov	r3, r0
   9cd8c:	461a      	mov	r2, r3
   9cd8e:	4b90      	ldr	r3, [pc, #576]	; (9cfd0 <Cl_disinf_controller+0x1030>)
   9cd90:	499a      	ldr	r1, [pc, #616]	; (9cffc <Cl_disinf_controller+0x105c>)
   9cd92:	4610      	mov	r0, r2
   9cd94:	4798      	blx	r3
   9cd96:	4603      	mov	r3, r0
   9cd98:	461a      	mov	r2, r3
   9cd9a:	4b94      	ldr	r3, [pc, #592]	; (9cfec <Cl_disinf_controller+0x104c>)
   9cd9c:	601a      	str	r2, [r3, #0]
// 								sv_cntrl_poweroffheater();
// 								
// 								SetHeaterState(CL_HEATER_STATE_OFF);
// 							}
							
							Cl_disinfsecondscounter++;
   9cd9e:	4b98      	ldr	r3, [pc, #608]	; (9d000 <Cl_disinf_controller+0x1060>)
   9cda0:	681b      	ldr	r3, [r3, #0]
   9cda2:	3301      	adds	r3, #1
   9cda4:	4a96      	ldr	r2, [pc, #600]	; (9d000 <Cl_disinf_controller+0x1060>)
   9cda6:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9cda8:	4b96      	ldr	r3, [pc, #600]	; (9d004 <Cl_disinf_controller+0x1064>)
   9cdaa:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9cdac:	4b94      	ldr	r3, [pc, #592]	; (9d000 <Cl_disinf_controller+0x1060>)
   9cdae:	681b      	ldr	r3, [r3, #0]
   9cdb0:	2b3c      	cmp	r3, #60	; 0x3c
   9cdb2:	d101      	bne.n	9cdb8 <Cl_disinf_controller+0xe18>
							{
								UpdateDisinfMinuteTick();	
   9cdb4:	4b94      	ldr	r3, [pc, #592]	; (9d008 <Cl_disinf_controller+0x1068>)
   9cdb6:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   9cdb8:	4b94      	ldr	r3, [pc, #592]	; (9d00c <Cl_disinf_controller+0x106c>)
   9cdba:	681b      	ldr	r3, [r3, #0]
   9cdbc:	2b1e      	cmp	r3, #30
   9cdbe:	f340 8082 	ble.w	9cec6 <Cl_disinf_controller+0xf26>
							{
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9cdc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9cdc6:	2002      	movs	r0, #2
   9cdc8:	4b91      	ldr	r3, [pc, #580]	; (9d010 <Cl_disinf_controller+0x1070>)
   9cdca:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9cdcc:	4b91      	ldr	r3, [pc, #580]	; (9d014 <Cl_disinf_controller+0x1074>)
   9cdce:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9cdd0:	2002      	movs	r0, #2
   9cdd2:	4b91      	ldr	r3, [pc, #580]	; (9d018 <Cl_disinf_controller+0x1078>)
   9cdd4:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9cdd6:	2003      	movs	r0, #3
   9cdd8:	4b8f      	ldr	r3, [pc, #572]	; (9d018 <Cl_disinf_controller+0x1078>)
   9cdda:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   9cddc:	4b8f      	ldr	r3, [pc, #572]	; (9d01c <Cl_disinf_controller+0x107c>)
   9cdde:	4798      	blx	r3
								sv_prop_stopmixing();
   9cde0:	4b8f      	ldr	r3, [pc, #572]	; (9d020 <Cl_disinf_controller+0x1080>)
   9cde2:	4798      	blx	r3
								sv_cntrl_deactivatepump(UFPUMP);
   9cde4:	2004      	movs	r0, #4
   9cde6:	4b8f      	ldr	r3, [pc, #572]	; (9d024 <Cl_disinf_controller+0x1084>)
   9cde8:	4798      	blx	r3
								flag_hotrinse = 0;
   9cdea:	4b8f      	ldr	r3, [pc, #572]	; (9d028 <Cl_disinf_controller+0x1088>)
   9cdec:	2200      	movs	r2, #0
   9cdee:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9cdf0:	2002      	movs	r0, #2
   9cdf2:	4b8c      	ldr	r3, [pc, #560]	; (9d024 <Cl_disinf_controller+0x1084>)
   9cdf4:	4798      	blx	r3
   9cdf6:	4603      	mov	r3, r0
   9cdf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9cdfc:	2001      	movs	r0, #1
   9cdfe:	4b89      	ldr	r3, [pc, #548]	; (9d024 <Cl_disinf_controller+0x1084>)
   9ce00:	4798      	blx	r3
   9ce02:	4603      	mov	r3, r0
   9ce04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9ce08:	2005      	movs	r0, #5
   9ce0a:	4b88      	ldr	r3, [pc, #544]	; (9d02c <Cl_disinf_controller+0x108c>)
   9ce0c:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9ce0e:	4b88      	ldr	r3, [pc, #544]	; (9d030 <Cl_disinf_controller+0x1090>)
   9ce10:	781b      	ldrb	r3, [r3, #0]
   9ce12:	2b01      	cmp	r3, #1
   9ce14:	d110      	bne.n	9ce38 <Cl_disinf_controller+0xe98>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9ce16:	2339      	movs	r3, #57	; 0x39
   9ce18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   9ce1c:	2304      	movs	r3, #4
   9ce1e:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9ce20:	f107 0113 	add.w	r1, r7, #19
   9ce24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9ce28:	2201      	movs	r2, #1
   9ce2a:	4618      	mov	r0, r3
   9ce2c:	4b81      	ldr	r3, [pc, #516]	; (9d034 <Cl_disinf_controller+0x1094>)
   9ce2e:	4798      	blx	r3
   9ce30:	4603      	mov	r3, r0
   9ce32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9ce36:	e028      	b.n	9ce8a <Cl_disinf_controller+0xeea>
								}
								else if (flag_citric == 1)
   9ce38:	4b7f      	ldr	r3, [pc, #508]	; (9d038 <Cl_disinf_controller+0x1098>)
   9ce3a:	781b      	ldrb	r3, [r3, #0]
   9ce3c:	2b01      	cmp	r3, #1
   9ce3e:	d110      	bne.n	9ce62 <Cl_disinf_controller+0xec2>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9ce40:	2339      	movs	r3, #57	; 0x39
   9ce42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)5;
   9ce46:	2305      	movs	r3, #5
   9ce48:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9ce4a:	f107 0113 	add.w	r1, r7, #19
   9ce4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9ce52:	2201      	movs	r2, #1
   9ce54:	4618      	mov	r0, r3
   9ce56:	4b77      	ldr	r3, [pc, #476]	; (9d034 <Cl_disinf_controller+0x1094>)
   9ce58:	4798      	blx	r3
   9ce5a:	4603      	mov	r3, r0
   9ce5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9ce60:	e013      	b.n	9ce8a <Cl_disinf_controller+0xeea>
								}
								else if (flag_na == 1)
   9ce62:	4b76      	ldr	r3, [pc, #472]	; (9d03c <Cl_disinf_controller+0x109c>)
   9ce64:	781b      	ldrb	r3, [r3, #0]
   9ce66:	2b01      	cmp	r3, #1
   9ce68:	d10f      	bne.n	9ce8a <Cl_disinf_controller+0xeea>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9ce6a:	2339      	movs	r3, #57	; 0x39
   9ce6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9ce70:	2303      	movs	r3, #3
   9ce72:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9ce74:	f107 0113 	add.w	r1, r7, #19
   9ce78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9ce7c:	2201      	movs	r2, #1
   9ce7e:	4618      	mov	r0, r3
   9ce80:	4b6c      	ldr	r3, [pc, #432]	; (9d034 <Cl_disinf_controller+0x1094>)
   9ce82:	4798      	blx	r3
   9ce84:	4603      	mov	r3, r0
   9ce86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   9ce8a:	4b69      	ldr	r3, [pc, #420]	; (9d030 <Cl_disinf_controller+0x1090>)
   9ce8c:	2200      	movs	r2, #0
   9ce8e:	701a      	strb	r2, [r3, #0]
								flag_citric = 0;
   9ce90:	4b69      	ldr	r3, [pc, #420]	; (9d038 <Cl_disinf_controller+0x1098>)
   9ce92:	2200      	movs	r2, #0
   9ce94:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   9ce96:	4b69      	ldr	r3, [pc, #420]	; (9d03c <Cl_disinf_controller+0x109c>)
   9ce98:	2200      	movs	r2, #0
   9ce9a:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   9ce9c:	4b68      	ldr	r3, [pc, #416]	; (9d040 <Cl_disinf_controller+0x10a0>)
   9ce9e:	2200      	movs	r2, #0
   9cea0:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9cea2:	2045      	movs	r0, #69	; 0x45
   9cea4:	4b67      	ldr	r3, [pc, #412]	; (9d044 <Cl_disinf_controller+0x10a4>)
   9cea6:	4798      	blx	r3
   9cea8:	4603      	mov	r3, r0
   9ceaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9ceae:	4b66      	ldr	r3, [pc, #408]	; (9d048 <Cl_disinf_controller+0x10a8>)
   9ceb0:	220a      	movs	r2, #10
   9ceb2:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   9ceb4:	e007      	b.n	9cec6 <Cl_disinf_controller+0xf26>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9ceb6:	4b65      	ldr	r3, [pc, #404]	; (9d04c <Cl_disinf_controller+0x10ac>)
   9ceb8:	4798      	blx	r3
   9ceba:	4603      	mov	r3, r0
   9cebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9cec0:	e002      	b.n	9cec8 <Cl_disinf_controller+0xf28>
							command = CON_TX_COMMAND_DISINF_PAUSED;
							data = (Cl_Uint8Type)0;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
   9cec2:	bf00      	nop
   9cec4:	e26c      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
					 
							}
							break;
   9cec6:	bf00      	nop
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
						}
						
				break;
   9cec8:	e26a      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9ceca:	7efb      	ldrb	r3, [r7, #27]
   9cecc:	2b02      	cmp	r3, #2
   9cece:	d005      	beq.n	9cedc <Cl_disinf_controller+0xf3c>
   9ced0:	2b03      	cmp	r3, #3
   9ced2:	d000      	beq.n	9ced6 <Cl_disinf_controller+0xf36>
					 
							 //Send resumed
					 

							break;
							default:break;
   9ced4:	e01c      	b.n	9cf10 <Cl_disinf_controller+0xf70>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9ced6:	4b4f      	ldr	r3, [pc, #316]	; (9d014 <Cl_disinf_controller+0x1074>)
   9ced8:	4798      	blx	r3
							break;
   9ceda:	e019      	b.n	9cf10 <Cl_disinf_controller+0xf70>
							
							
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9cedc:	2045      	movs	r0, #69	; 0x45
   9cede:	4b59      	ldr	r3, [pc, #356]	; (9d044 <Cl_disinf_controller+0x10a4>)
   9cee0:	4798      	blx	r3
   9cee2:	4603      	mov	r3, r0
   9cee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9cee8:	233b      	movs	r3, #59	; 0x3b
   9ceea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9ceee:	2300      	movs	r3, #0
   9cef0:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cef2:	f107 0113 	add.w	r1, r7, #19
   9cef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9cefa:	2200      	movs	r2, #0
   9cefc:	4618      	mov	r0, r3
   9cefe:	4b4d      	ldr	r3, [pc, #308]	; (9d034 <Cl_disinf_controller+0x1094>)
   9cf00:	4798      	blx	r3
   9cf02:	4603      	mov	r3, r0
   9cf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9cf08:	4b4f      	ldr	r3, [pc, #316]	; (9d048 <Cl_disinf_controller+0x10a8>)
   9cf0a:	220a      	movs	r2, #10
   9cf0c:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9cf0e:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9cf10:	e246      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   9cf12:	7efb      	ldrb	r3, [r7, #27]
   9cf14:	3b03      	subs	r3, #3
   9cf16:	2b20      	cmp	r3, #32
   9cf18:	f200 80c8 	bhi.w	9d0ac <Cl_disinf_controller+0x110c>
   9cf1c:	a201      	add	r2, pc, #4	; (adr r2, 9cf24 <Cl_disinf_controller+0xf84>)
   9cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cf22:	bf00      	nop
   9cf24:	0009cfa9 	.word	0x0009cfa9
   9cf28:	0009d0ad 	.word	0x0009d0ad
   9cf2c:	0009d0ad 	.word	0x0009d0ad
   9cf30:	0009d0ad 	.word	0x0009d0ad
   9cf34:	0009d0ad 	.word	0x0009d0ad
   9cf38:	0009d0ad 	.word	0x0009d0ad
   9cf3c:	0009d0ad 	.word	0x0009d0ad
   9cf40:	0009d0ad 	.word	0x0009d0ad
   9cf44:	0009d0ad 	.word	0x0009d0ad
   9cf48:	0009d0ad 	.word	0x0009d0ad
   9cf4c:	0009d0ad 	.word	0x0009d0ad
   9cf50:	0009d0ad 	.word	0x0009d0ad
   9cf54:	0009d085 	.word	0x0009d085
   9cf58:	0009d0ad 	.word	0x0009d0ad
   9cf5c:	0009d0ad 	.word	0x0009d0ad
   9cf60:	0009d0ad 	.word	0x0009d0ad
   9cf64:	0009d0a1 	.word	0x0009d0a1
   9cf68:	0009d0ad 	.word	0x0009d0ad
   9cf6c:	0009d0ad 	.word	0x0009d0ad
   9cf70:	0009d0ad 	.word	0x0009d0ad
   9cf74:	0009d0ad 	.word	0x0009d0ad
   9cf78:	0009d0ad 	.word	0x0009d0ad
   9cf7c:	0009d0ad 	.word	0x0009d0ad
   9cf80:	0009d0ad 	.word	0x0009d0ad
   9cf84:	0009d0ad 	.word	0x0009d0ad
   9cf88:	0009d0ad 	.word	0x0009d0ad
   9cf8c:	0009d0ad 	.word	0x0009d0ad
   9cf90:	0009d0ad 	.word	0x0009d0ad
   9cf94:	0009d0ad 	.word	0x0009d0ad
   9cf98:	0009d0ad 	.word	0x0009d0ad
   9cf9c:	0009d0ad 	.word	0x0009d0ad
   9cfa0:	0009d0ad 	.word	0x0009d0ad
   9cfa4:	0009d051 	.word	0x0009d051
								{
									
									case EVENT_STOP_DISINF:
									Cl_Disinf_StopDisinf();
   9cfa8:	4b1a      	ldr	r3, [pc, #104]	; (9d014 <Cl_disinf_controller+0x1074>)
   9cfaa:	4798      	blx	r3
									break;
   9cfac:	e081      	b.n	9d0b2 <Cl_disinf_controller+0x1112>
   9cfae:	bf00      	nop
   9cfb0:	cccccccd 	.word	0xcccccccd
   9cfb4:	4008cccc 	.word	0x4008cccc
   9cfb8:	66666666 	.word	0x66666666
   9cfbc:	3ff66666 	.word	0x3ff66666
   9cfc0:	0009dc3d 	.word	0x0009dc3d
   9cfc4:	0008e6a1 	.word	0x0008e6a1
   9cfc8:	0008fc39 	.word	0x0008fc39
   9cfcc:	20071a48 	.word	0x20071a48
   9cfd0:	000a66f9 	.word	0x000a66f9
   9cfd4:	42c80000 	.word	0x42c80000
   9cfd8:	000a5c69 	.word	0x000a5c69
   9cfdc:	000a59a9 	.word	0x000a59a9
   9cfe0:	000a59ad 	.word	0x000a59ad
   9cfe4:	3ff33333 	.word	0x3ff33333
   9cfe8:	000a62d5 	.word	0x000a62d5
   9cfec:	20071c04 	.word	0x20071c04
   9cff0:	000a6591 	.word	0x000a6591
   9cff4:	40a00000 	.word	0x40a00000
   9cff8:	000a6381 	.word	0x000a6381
   9cffc:	40c00000 	.word	0x40c00000
   9d000:	20071bd8 	.word	0x20071bd8
   9d004:	0009dd09 	.word	0x0009dd09
   9d008:	0009e045 	.word	0x0009e045
   9d00c:	20071bdc 	.word	0x20071bdc
   9d010:	00099b21 	.word	0x00099b21
   9d014:	0009d735 	.word	0x0009d735
   9d018:	00099ac9 	.word	0x00099ac9
   9d01c:	00099a95 	.word	0x00099a95
   9d020:	00099ea9 	.word	0x00099ea9
   9d024:	00099a45 	.word	0x00099a45
   9d028:	20071a50 	.word	0x20071a50
   9d02c:	000832a1 	.word	0x000832a1
   9d030:	20071a4f 	.word	0x20071a4f
   9d034:	0009b805 	.word	0x0009b805
   9d038:	20071a52 	.word	0x20071a52
   9d03c:	20071a51 	.word	0x20071a51
   9d040:	20071c02 	.word	0x20071c02
   9d044:	0008ba55 	.word	0x0008ba55
   9d048:	20071bd7 	.word	0x20071bd7
   9d04c:	0009d9dd 	.word	0x0009d9dd
									
									
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9d050:	233a      	movs	r3, #58	; 0x3a
   9d052:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   9d056:	2300      	movs	r3, #0
   9d058:	74fb      	strb	r3, [r7, #19]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9d05a:	f107 0113 	add.w	r1, r7, #19
   9d05e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d062:	2200      	movs	r2, #0
   9d064:	4618      	mov	r0, r3
   9d066:	4bb1      	ldr	r3, [pc, #708]	; (9d32c <Cl_disinf_controller+0x138c>)
   9d068:	4798      	blx	r3
   9d06a:	4603      	mov	r3, r0
   9d06c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9d070:	2054      	movs	r0, #84	; 0x54
   9d072:	4baf      	ldr	r3, [pc, #700]	; (9d330 <Cl_disinf_controller+0x1390>)
   9d074:	4798      	blx	r3
   9d076:	4603      	mov	r3, r0
   9d078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9d07c:	4bad      	ldr	r3, [pc, #692]	; (9d334 <Cl_disinf_controller+0x1394>)
   9d07e:	220f      	movs	r2, #15
   9d080:	701a      	strb	r2, [r3, #0]
									 
									break;
   9d082:	e016      	b.n	9d0b2 <Cl_disinf_controller+0x1112>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   9d084:	4bac      	ldr	r3, [pc, #688]	; (9d338 <Cl_disinf_controller+0x1398>)
   9d086:	681b      	ldr	r3, [r3, #0]
   9d088:	3301      	adds	r3, #1
   9d08a:	4aab      	ldr	r2, [pc, #684]	; (9d338 <Cl_disinf_controller+0x1398>)
   9d08c:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9d08e:	4bab      	ldr	r3, [pc, #684]	; (9d33c <Cl_disinf_controller+0x139c>)
   9d090:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   9d092:	4ba9      	ldr	r3, [pc, #676]	; (9d338 <Cl_disinf_controller+0x1398>)
   9d094:	681b      	ldr	r3, [r3, #0]
   9d096:	2b3c      	cmp	r3, #60	; 0x3c
   9d098:	d10a      	bne.n	9d0b0 <Cl_disinf_controller+0x1110>
									{
										UpdateDisinfMinuteTick();
   9d09a:	4ba9      	ldr	r3, [pc, #676]	; (9d340 <Cl_disinf_controller+0x13a0>)
   9d09c:	4798      	blx	r3
									}
									break;
   9d09e:	e007      	b.n	9d0b0 <Cl_disinf_controller+0x1110>
									case EVENT_DISINF_ALARM:
									Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9d0a0:	4ba8      	ldr	r3, [pc, #672]	; (9d344 <Cl_disinf_controller+0x13a4>)
   9d0a2:	4798      	blx	r3
   9d0a4:	4603      	mov	r3, r0
   9d0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									break;
   9d0aa:	e002      	b.n	9d0b2 <Cl_disinf_controller+0x1112>
									default:break;
   9d0ac:	bf00      	nop
   9d0ae:	e177      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
									Cl_Disinf_SendDisinfStateData();
									if(Cl_disinfsecondscounter == 60)
									{
										UpdateDisinfMinuteTick();
									}
									break;
   9d0b0:	bf00      	nop
									break;
									default:break;
								}
				
				
				break;
   9d0b2:	e175      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   9d0b4:	7efb      	ldrb	r3, [r7, #27]
   9d0b6:	2b01      	cmp	r3, #1
   9d0b8:	d009      	beq.n	9d0ce <Cl_disinf_controller+0x112e>
   9d0ba:	2b24      	cmp	r3, #36	; 0x24
   9d0bc:	d000      	beq.n	9d0c0 <Cl_disinf_controller+0x1120>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   9d0be:	e16f      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9d0c0:	2045      	movs	r0, #69	; 0x45
   9d0c2:	4b9b      	ldr	r3, [pc, #620]	; (9d330 <Cl_disinf_controller+0x1390>)
   9d0c4:	4798      	blx	r3
   9d0c6:	4603      	mov	r3, r0
   9d0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9d0cc:	e034      	b.n	9d138 <Cl_disinf_controller+0x1198>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9d0ce:	2044      	movs	r0, #68	; 0x44
   9d0d0:	4b97      	ldr	r3, [pc, #604]	; (9d330 <Cl_disinf_controller+0x1390>)
   9d0d2:	4798      	blx	r3
   9d0d4:	4603      	mov	r3, r0
   9d0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   9d0da:	4b9b      	ldr	r3, [pc, #620]	; (9d348 <Cl_disinf_controller+0x13a8>)
   9d0dc:	7e1b      	ldrb	r3, [r3, #24]
   9d0de:	2b00      	cmp	r3, #0
   9d0e0:	d016      	beq.n	9d110 <Cl_disinf_controller+0x1170>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9d0e2:	4b99      	ldr	r3, [pc, #612]	; (9d348 <Cl_disinf_controller+0x13a8>)
   9d0e4:	791b      	ldrb	r3, [r3, #4]
   9d0e6:	733b      	strb	r3, [r7, #12]
								if (cl_temp.bytearray[0] == 4)
   9d0e8:	7b3b      	ldrb	r3, [r7, #12]
   9d0ea:	2b04      	cmp	r3, #4
   9d0ec:	d103      	bne.n	9d0f6 <Cl_disinf_controller+0x1156>
								{
										flag_hotcitric = 1;
   9d0ee:	4b97      	ldr	r3, [pc, #604]	; (9d34c <Cl_disinf_controller+0x13ac>)
   9d0f0:	2201      	movs	r2, #1
   9d0f2:	701a      	strb	r2, [r3, #0]
   9d0f4:	e00c      	b.n	9d110 <Cl_disinf_controller+0x1170>
								}
								else if (cl_temp.bytearray[0] == 3)
   9d0f6:	7b3b      	ldrb	r3, [r7, #12]
   9d0f8:	2b03      	cmp	r3, #3
   9d0fa:	d103      	bne.n	9d104 <Cl_disinf_controller+0x1164>
								{
										flag_na = 1;
   9d0fc:	4b94      	ldr	r3, [pc, #592]	; (9d350 <Cl_disinf_controller+0x13b0>)
   9d0fe:	2201      	movs	r2, #1
   9d100:	701a      	strb	r2, [r3, #0]
   9d102:	e005      	b.n	9d110 <Cl_disinf_controller+0x1170>
								}
								else if (cl_temp.bytearray[0] == 5)
   9d104:	7b3b      	ldrb	r3, [r7, #12]
   9d106:	2b05      	cmp	r3, #5
   9d108:	d102      	bne.n	9d110 <Cl_disinf_controller+0x1170>
								{
									flag_citric = 1;
   9d10a:	4b92      	ldr	r3, [pc, #584]	; (9d354 <Cl_disinf_controller+0x13b4>)
   9d10c:	2201      	movs	r2, #1
   9d10e:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   9d110:	233c      	movs	r3, #60	; 0x3c
   9d112:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9d116:	2301      	movs	r3, #1
   9d118:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   9d11a:	f107 0113 	add.w	r1, r7, #19
   9d11e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d122:	2201      	movs	r2, #1
   9d124:	4618      	mov	r0, r3
   9d126:	4b81      	ldr	r3, [pc, #516]	; (9d32c <Cl_disinf_controller+0x138c>)
   9d128:	4798      	blx	r3
   9d12a:	4603      	mov	r3, r0
   9d12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9d130:	4b80      	ldr	r3, [pc, #512]	; (9d334 <Cl_disinf_controller+0x1394>)
   9d132:	2203      	movs	r2, #3
   9d134:	701a      	strb	r2, [r3, #0]
						break;
   9d136:	bf00      	nop
					}
				break;
   9d138:	e132      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9d13a:	7efb      	ldrb	r3, [r7, #27]
   9d13c:	3b01      	subs	r3, #1
   9d13e:	2b24      	cmp	r3, #36	; 0x24
   9d140:	f200 812d 	bhi.w	9d39e <Cl_disinf_controller+0x13fe>
   9d144:	a201      	add	r2, pc, #4	; (adr r2, 9d14c <Cl_disinf_controller+0x11ac>)
   9d146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d14a:	bf00      	nop
   9d14c:	0009d1e1 	.word	0x0009d1e1
   9d150:	0009d39f 	.word	0x0009d39f
   9d154:	0009d39f 	.word	0x0009d39f
   9d158:	0009d39f 	.word	0x0009d39f
   9d15c:	0009d39f 	.word	0x0009d39f
   9d160:	0009d39f 	.word	0x0009d39f
   9d164:	0009d39f 	.word	0x0009d39f
   9d168:	0009d39f 	.word	0x0009d39f
   9d16c:	0009d39f 	.word	0x0009d39f
   9d170:	0009d39f 	.word	0x0009d39f
   9d174:	0009d39f 	.word	0x0009d39f
   9d178:	0009d39f 	.word	0x0009d39f
   9d17c:	0009d39f 	.word	0x0009d39f
   9d180:	0009d39f 	.word	0x0009d39f
   9d184:	0009d257 	.word	0x0009d257
   9d188:	0009d385 	.word	0x0009d385
   9d18c:	0009d39f 	.word	0x0009d39f
   9d190:	0009d39f 	.word	0x0009d39f
   9d194:	0009d24b 	.word	0x0009d24b
   9d198:	0009d39f 	.word	0x0009d39f
   9d19c:	0009d39f 	.word	0x0009d39f
   9d1a0:	0009d39f 	.word	0x0009d39f
   9d1a4:	0009d39f 	.word	0x0009d39f
   9d1a8:	0009d39f 	.word	0x0009d39f
   9d1ac:	0009d39f 	.word	0x0009d39f
   9d1b0:	0009d39f 	.word	0x0009d39f
   9d1b4:	0009d39f 	.word	0x0009d39f
   9d1b8:	0009d39f 	.word	0x0009d39f
   9d1bc:	0009d39f 	.word	0x0009d39f
   9d1c0:	0009d39f 	.word	0x0009d39f
   9d1c4:	0009d39f 	.word	0x0009d39f
   9d1c8:	0009d39f 	.word	0x0009d39f
   9d1cc:	0009d39f 	.word	0x0009d39f
   9d1d0:	0009d39f 	.word	0x0009d39f
   9d1d4:	0009d39f 	.word	0x0009d39f
   9d1d8:	0009d39f 	.word	0x0009d39f
   9d1dc:	0009d315 	.word	0x0009d315
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9d1e0:	2044      	movs	r0, #68	; 0x44
   9d1e2:	4b53      	ldr	r3, [pc, #332]	; (9d330 <Cl_disinf_controller+0x1390>)
   9d1e4:	4798      	blx	r3
   9d1e6:	4603      	mov	r3, r0
   9d1e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   9d1ec:	4b56      	ldr	r3, [pc, #344]	; (9d348 <Cl_disinf_controller+0x13a8>)
   9d1ee:	7e1b      	ldrb	r3, [r3, #24]
   9d1f0:	2b00      	cmp	r3, #0
   9d1f2:	d016      	beq.n	9d222 <Cl_disinf_controller+0x1282>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9d1f4:	4b54      	ldr	r3, [pc, #336]	; (9d348 <Cl_disinf_controller+0x13a8>)
   9d1f6:	791b      	ldrb	r3, [r3, #4]
   9d1f8:	723b      	strb	r3, [r7, #8]
					if (cl_temp.bytearray[0] == 4)
   9d1fa:	7a3b      	ldrb	r3, [r7, #8]
   9d1fc:	2b04      	cmp	r3, #4
   9d1fe:	d103      	bne.n	9d208 <Cl_disinf_controller+0x1268>
					{
						flag_hotcitric = 1;
   9d200:	4b52      	ldr	r3, [pc, #328]	; (9d34c <Cl_disinf_controller+0x13ac>)
   9d202:	2201      	movs	r2, #1
   9d204:	701a      	strb	r2, [r3, #0]
   9d206:	e00c      	b.n	9d222 <Cl_disinf_controller+0x1282>
					}
					else if (cl_temp.bytearray[0] == 3)
   9d208:	7a3b      	ldrb	r3, [r7, #8]
   9d20a:	2b03      	cmp	r3, #3
   9d20c:	d103      	bne.n	9d216 <Cl_disinf_controller+0x1276>
					{
						flag_na = 1;
   9d20e:	4b50      	ldr	r3, [pc, #320]	; (9d350 <Cl_disinf_controller+0x13b0>)
   9d210:	2201      	movs	r2, #1
   9d212:	701a      	strb	r2, [r3, #0]
   9d214:	e005      	b.n	9d222 <Cl_disinf_controller+0x1282>
					}
					else if (cl_temp.bytearray[0] == 5)
   9d216:	7a3b      	ldrb	r3, [r7, #8]
   9d218:	2b05      	cmp	r3, #5
   9d21a:	d102      	bne.n	9d222 <Cl_disinf_controller+0x1282>
					{
						flag_citric = 1;
   9d21c:	4b4d      	ldr	r3, [pc, #308]	; (9d354 <Cl_disinf_controller+0x13b4>)
   9d21e:	2201      	movs	r2, #1
   9d220:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   9d222:	233c      	movs	r3, #60	; 0x3c
   9d224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9d228:	2301      	movs	r3, #1
   9d22a:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d22c:	f107 0113 	add.w	r1, r7, #19
   9d230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   9d234:	2201      	movs	r2, #1
   9d236:	4618      	mov	r0, r3
   9d238:	4b3c      	ldr	r3, [pc, #240]	; (9d32c <Cl_disinf_controller+0x138c>)
   9d23a:	4798      	blx	r3
   9d23c:	4603      	mov	r3, r0
   9d23e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9d242:	4b3c      	ldr	r3, [pc, #240]	; (9d334 <Cl_disinf_controller+0x1394>)
   9d244:	2203      	movs	r2, #3
   9d246:	701a      	strb	r2, [r3, #0]
				break;
   9d248:	e0a2      	b.n	9d390 <Cl_disinf_controller+0x13f0>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9d24a:	4b3e      	ldr	r3, [pc, #248]	; (9d344 <Cl_disinf_controller+0x13a4>)
   9d24c:	4798      	blx	r3
   9d24e:	4603      	mov	r3, r0
   9d250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   9d254:	e09c      	b.n	9d390 <Cl_disinf_controller+0x13f0>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d256:	4b40      	ldr	r3, [pc, #256]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d258:	2200      	movs	r2, #0
   9d25a:	801a      	strh	r2, [r3, #0]
   9d25c:	e055      	b.n	9d30a <Cl_disinf_controller+0x136a>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9d25e:	4b3e      	ldr	r3, [pc, #248]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d260:	881b      	ldrh	r3, [r3, #0]
   9d262:	4619      	mov	r1, r3
   9d264:	4a3d      	ldr	r2, [pc, #244]	; (9d35c <Cl_disinf_controller+0x13bc>)
   9d266:	460b      	mov	r3, r1
   9d268:	00db      	lsls	r3, r3, #3
   9d26a:	1a5b      	subs	r3, r3, r1
   9d26c:	4413      	add	r3, r2
   9d26e:	7818      	ldrb	r0, [r3, #0]
   9d270:	4b39      	ldr	r3, [pc, #228]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d272:	881b      	ldrh	r3, [r3, #0]
   9d274:	461a      	mov	r2, r3
   9d276:	4613      	mov	r3, r2
   9d278:	00db      	lsls	r3, r3, #3
   9d27a:	1a9b      	subs	r3, r3, r2
   9d27c:	4a37      	ldr	r2, [pc, #220]	; (9d35c <Cl_disinf_controller+0x13bc>)
   9d27e:	4413      	add	r3, r2
   9d280:	3302      	adds	r3, #2
   9d282:	4619      	mov	r1, r3
   9d284:	4b36      	ldr	r3, [pc, #216]	; (9d360 <Cl_disinf_controller+0x13c0>)
   9d286:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9d288:	4b33      	ldr	r3, [pc, #204]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d28a:	881b      	ldrh	r3, [r3, #0]
   9d28c:	4619      	mov	r1, r3
   9d28e:	4a33      	ldr	r2, [pc, #204]	; (9d35c <Cl_disinf_controller+0x13bc>)
   9d290:	460b      	mov	r3, r1
   9d292:	00db      	lsls	r3, r3, #3
   9d294:	1a5b      	subs	r3, r3, r1
   9d296:	4413      	add	r3, r2
   9d298:	3302      	adds	r3, #2
   9d29a:	781b      	ldrb	r3, [r3, #0]
   9d29c:	2b00      	cmp	r3, #0
   9d29e:	d00e      	beq.n	9d2be <Cl_disinf_controller+0x131e>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9d2a0:	2208      	movs	r2, #8
   9d2a2:	4930      	ldr	r1, [pc, #192]	; (9d364 <Cl_disinf_controller+0x13c4>)
   9d2a4:	2018      	movs	r0, #24
   9d2a6:	4b21      	ldr	r3, [pc, #132]	; (9d32c <Cl_disinf_controller+0x138c>)
   9d2a8:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   9d2aa:	4b2f      	ldr	r3, [pc, #188]	; (9d368 <Cl_disinf_controller+0x13c8>)
   9d2ac:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9d2ae:	4b21      	ldr	r3, [pc, #132]	; (9d334 <Cl_disinf_controller+0x1394>)
   9d2b0:	220c      	movs	r2, #12
   9d2b2:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   9d2b4:	4b28      	ldr	r3, [pc, #160]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d2b6:	2200      	movs	r2, #0
   9d2b8:	801a      	strh	r2, [r3, #0]
						break;
   9d2ba:	bf00      	nop
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9d2bc:	e068      	b.n	9d390 <Cl_disinf_controller+0x13f0>
						//alarm_flag = 1;
						tempcount=0;
						break;
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9d2be:	4b26      	ldr	r3, [pc, #152]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d2c0:	881b      	ldrh	r3, [r3, #0]
   9d2c2:	2b0b      	cmp	r3, #11
   9d2c4:	d11b      	bne.n	9d2fe <Cl_disinf_controller+0x135e>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9d2c6:	4b24      	ldr	r3, [pc, #144]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d2c8:	881b      	ldrh	r3, [r3, #0]
   9d2ca:	4619      	mov	r1, r3
   9d2cc:	4a23      	ldr	r2, [pc, #140]	; (9d35c <Cl_disinf_controller+0x13bc>)
   9d2ce:	460b      	mov	r3, r1
   9d2d0:	00db      	lsls	r3, r3, #3
   9d2d2:	1a5b      	subs	r3, r3, r1
   9d2d4:	4413      	add	r3, r2
   9d2d6:	3302      	adds	r3, #2
   9d2d8:	781b      	ldrb	r3, [r3, #0]
   9d2da:	f083 0301 	eor.w	r3, r3, #1
   9d2de:	b2db      	uxtb	r3, r3
   9d2e0:	2b00      	cmp	r3, #0
   9d2e2:	d00c      	beq.n	9d2fe <Cl_disinf_controller+0x135e>
						{
							sv_cntrl_resetredalarm();
   9d2e4:	4b21      	ldr	r3, [pc, #132]	; (9d36c <Cl_disinf_controller+0x13cc>)
   9d2e6:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9d2e8:	4b21      	ldr	r3, [pc, #132]	; (9d370 <Cl_disinf_controller+0x13d0>)
   9d2ea:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9d2ec:	4b21      	ldr	r3, [pc, #132]	; (9d374 <Cl_disinf_controller+0x13d4>)
   9d2ee:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9d2f0:	2208      	movs	r2, #8
   9d2f2:	4921      	ldr	r1, [pc, #132]	; (9d378 <Cl_disinf_controller+0x13d8>)
   9d2f4:	2018      	movs	r0, #24
   9d2f6:	4b0d      	ldr	r3, [pc, #52]	; (9d32c <Cl_disinf_controller+0x138c>)
   9d2f8:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   9d2fa:	4b20      	ldr	r3, [pc, #128]	; (9d37c <Cl_disinf_controller+0x13dc>)
   9d2fc:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d2fe:	4b16      	ldr	r3, [pc, #88]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d300:	881b      	ldrh	r3, [r3, #0]
   9d302:	3301      	adds	r3, #1
   9d304:	b29a      	uxth	r2, r3
   9d306:	4b14      	ldr	r3, [pc, #80]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d308:	801a      	strh	r2, [r3, #0]
   9d30a:	4b13      	ldr	r3, [pc, #76]	; (9d358 <Cl_disinf_controller+0x13b8>)
   9d30c:	881b      	ldrh	r3, [r3, #0]
   9d30e:	2b0b      	cmp	r3, #11
   9d310:	d9a5      	bls.n	9d25e <Cl_disinf_controller+0x12be>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9d312:	e03d      	b.n	9d390 <Cl_disinf_controller+0x13f0>
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9d314:	4b15      	ldr	r3, [pc, #84]	; (9d36c <Cl_disinf_controller+0x13cc>)
   9d316:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   9d318:	4b15      	ldr	r3, [pc, #84]	; (9d370 <Cl_disinf_controller+0x13d0>)
   9d31a:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9d31c:	4b15      	ldr	r3, [pc, #84]	; (9d374 <Cl_disinf_controller+0x13d4>)
   9d31e:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9d320:	4b17      	ldr	r3, [pc, #92]	; (9d380 <Cl_disinf_controller+0x13e0>)
   9d322:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9d324:	4b03      	ldr	r3, [pc, #12]	; (9d334 <Cl_disinf_controller+0x1394>)
   9d326:	2208      	movs	r2, #8
   9d328:	701a      	strb	r2, [r3, #0]
				break;
   9d32a:	e031      	b.n	9d390 <Cl_disinf_controller+0x13f0>
   9d32c:	0009b805 	.word	0x0009b805
   9d330:	0008ba55 	.word	0x0008ba55
   9d334:	20071bd7 	.word	0x20071bd7
   9d338:	20071bd8 	.word	0x20071bd8
   9d33c:	0009dd09 	.word	0x0009dd09
   9d340:	0009e045 	.word	0x0009e045
   9d344:	0009d9dd 	.word	0x0009d9dd
   9d348:	200723e8 	.word	0x200723e8
   9d34c:	20071a4f 	.word	0x20071a4f
   9d350:	20071a51 	.word	0x20071a51
   9d354:	20071a52 	.word	0x20071a52
   9d358:	20072814 	.word	0x20072814
   9d35c:	20070b78 	.word	0x20070b78
   9d360:	00082fbd 	.word	0x00082fbd
   9d364:	000a8a04 	.word	0x000a8a04
   9d368:	0009d735 	.word	0x0009d735
   9d36c:	00099d51 	.word	0x00099d51
   9d370:	00099d65 	.word	0x00099d65
   9d374:	00099d8d 	.word	0x00099d8d
   9d378:	000a8a14 	.word	0x000a8a14
   9d37c:	0009dc3d 	.word	0x0009dc3d
   9d380:	0009d7e9 	.word	0x0009d7e9
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9d384:	4b09      	ldr	r3, [pc, #36]	; (9d3ac <Cl_disinf_controller+0x140c>)
   9d386:	4798      	blx	r3
   9d388:	4603      	mov	r3, r0
   9d38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9d38e:	bf00      	nop
				
			}
			break;
   9d390:	e005      	b.n	9d39e <Cl_disinf_controller+0x13fe>
			default:break;
   9d392:	bf00      	nop
   9d394:	e004      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
							}
						}
					break;
							
				}
			break;
   9d396:	bf00      	nop
   9d398:	e002      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
// 						}
//					}
								break;
					
						}
			break;
   9d39a:	bf00      	nop
   9d39c:	e000      	b.n	9d3a0 <Cl_disinf_controller+0x1400>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   9d39e:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   9d3a0:	2300      	movs	r3, #0
}
   9d3a2:	4618      	mov	r0, r3
   9d3a4:	372c      	adds	r7, #44	; 0x2c
   9d3a6:	46bd      	mov	sp, r7
   9d3a8:	bd90      	pop	{r4, r7, pc}
   9d3aa:	bf00      	nop
   9d3ac:	0009dc3d 	.word	0x0009dc3d

0009d3b0 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   9d3b0:	b480      	push	{r7}
   9d3b2:	b083      	sub	sp, #12
   9d3b4:	af00      	add	r7, sp, #0
   9d3b6:	4603      	mov	r3, r0
   9d3b8:	6039      	str	r1, [r7, #0]
   9d3ba:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   9d3bc:	79fb      	ldrb	r3, [r7, #7]
   9d3be:	3b07      	subs	r3, #7
   9d3c0:	2b4d      	cmp	r3, #77	; 0x4d
   9d3c2:	f200 8107 	bhi.w	9d5d4 <cl_disinf_translatemacevent+0x224>
   9d3c6:	a201      	add	r2, pc, #4	; (adr r2, 9d3cc <cl_disinf_translatemacevent+0x1c>)
   9d3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d3cc:	0009d58d 	.word	0x0009d58d
   9d3d0:	0009d5d5 	.word	0x0009d5d5
   9d3d4:	0009d5d5 	.word	0x0009d5d5
   9d3d8:	0009d5bd 	.word	0x0009d5bd
   9d3dc:	0009d5c5 	.word	0x0009d5c5
   9d3e0:	0009d5cd 	.word	0x0009d5cd
   9d3e4:	0009d585 	.word	0x0009d585
   9d3e8:	0009d595 	.word	0x0009d595
   9d3ec:	0009d59d 	.word	0x0009d59d
   9d3f0:	0009d5a5 	.word	0x0009d5a5
   9d3f4:	0009d5d5 	.word	0x0009d5d5
   9d3f8:	0009d5d5 	.word	0x0009d5d5
   9d3fc:	0009d5d5 	.word	0x0009d5d5
   9d400:	0009d5d5 	.word	0x0009d5d5
   9d404:	0009d5d5 	.word	0x0009d5d5
   9d408:	0009d5d5 	.word	0x0009d5d5
   9d40c:	0009d5d5 	.word	0x0009d5d5
   9d410:	0009d5d5 	.word	0x0009d5d5
   9d414:	0009d5d5 	.word	0x0009d5d5
   9d418:	0009d5d5 	.word	0x0009d5d5
   9d41c:	0009d5d5 	.word	0x0009d5d5
   9d420:	0009d5d5 	.word	0x0009d5d5
   9d424:	0009d5d5 	.word	0x0009d5d5
   9d428:	0009d5d5 	.word	0x0009d5d5
   9d42c:	0009d5ad 	.word	0x0009d5ad
   9d430:	0009d5b5 	.word	0x0009d5b5
   9d434:	0009d5d5 	.word	0x0009d5d5
   9d438:	0009d5d5 	.word	0x0009d5d5
   9d43c:	0009d5d5 	.word	0x0009d5d5
   9d440:	0009d5d5 	.word	0x0009d5d5
   9d444:	0009d5d5 	.word	0x0009d5d5
   9d448:	0009d5d5 	.word	0x0009d5d5
   9d44c:	0009d5d5 	.word	0x0009d5d5
   9d450:	0009d5d5 	.word	0x0009d5d5
   9d454:	0009d50d 	.word	0x0009d50d
   9d458:	0009d5d5 	.word	0x0009d5d5
   9d45c:	0009d5d5 	.word	0x0009d5d5
   9d460:	0009d5d5 	.word	0x0009d5d5
   9d464:	0009d57d 	.word	0x0009d57d
   9d468:	0009d575 	.word	0x0009d575
   9d46c:	0009d5d5 	.word	0x0009d5d5
   9d470:	0009d5d5 	.word	0x0009d5d5
   9d474:	0009d5d5 	.word	0x0009d5d5
   9d478:	0009d5d5 	.word	0x0009d5d5
   9d47c:	0009d5d5 	.word	0x0009d5d5
   9d480:	0009d5d5 	.word	0x0009d5d5
   9d484:	0009d5d5 	.word	0x0009d5d5
   9d488:	0009d5d5 	.word	0x0009d5d5
   9d48c:	0009d5d5 	.word	0x0009d5d5
   9d490:	0009d545 	.word	0x0009d545
   9d494:	0009d54d 	.word	0x0009d54d
   9d498:	0009d555 	.word	0x0009d555
   9d49c:	0009d55d 	.word	0x0009d55d
   9d4a0:	0009d565 	.word	0x0009d565
   9d4a4:	0009d56d 	.word	0x0009d56d
   9d4a8:	0009d5d5 	.word	0x0009d5d5
   9d4ac:	0009d505 	.word	0x0009d505
   9d4b0:	0009d515 	.word	0x0009d515
   9d4b4:	0009d51d 	.word	0x0009d51d
   9d4b8:	0009d5d5 	.word	0x0009d5d5
   9d4bc:	0009d5d5 	.word	0x0009d5d5
   9d4c0:	0009d5d5 	.word	0x0009d5d5
   9d4c4:	0009d5d5 	.word	0x0009d5d5
   9d4c8:	0009d5d5 	.word	0x0009d5d5
   9d4cc:	0009d5d5 	.word	0x0009d5d5
   9d4d0:	0009d5d5 	.word	0x0009d5d5
   9d4d4:	0009d5d5 	.word	0x0009d5d5
   9d4d8:	0009d5d5 	.word	0x0009d5d5
   9d4dc:	0009d5d5 	.word	0x0009d5d5
   9d4e0:	0009d5d5 	.word	0x0009d5d5
   9d4e4:	0009d5d5 	.word	0x0009d5d5
   9d4e8:	0009d5d5 	.word	0x0009d5d5
   9d4ec:	0009d5d5 	.word	0x0009d5d5
   9d4f0:	0009d5d5 	.word	0x0009d5d5
   9d4f4:	0009d53d 	.word	0x0009d53d
   9d4f8:	0009d525 	.word	0x0009d525
   9d4fc:	0009d52d 	.word	0x0009d52d
   9d500:	0009d535 	.word	0x0009d535
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   9d504:	683b      	ldr	r3, [r7, #0]
   9d506:	2201      	movs	r2, #1
   9d508:	701a      	strb	r2, [r3, #0]
		break;
   9d50a:	e064      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   9d50c:	683b      	ldr	r3, [r7, #0]
   9d50e:	2225      	movs	r2, #37	; 0x25
   9d510:	701a      	strb	r2, [r3, #0]
		break;
   9d512:	e060      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   9d514:	683b      	ldr	r3, [r7, #0]
   9d516:	2202      	movs	r2, #2
   9d518:	701a      	strb	r2, [r3, #0]
		break;
   9d51a:	e05c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   9d51c:	683b      	ldr	r3, [r7, #0]
   9d51e:	2203      	movs	r2, #3
   9d520:	701a      	strb	r2, [r3, #0]
		break;
   9d522:	e058      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   9d524:	683b      	ldr	r3, [r7, #0]
   9d526:	2222      	movs	r2, #34	; 0x22
   9d528:	701a      	strb	r2, [r3, #0]
		break;
   9d52a:	e054      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   9d52c:	683b      	ldr	r3, [r7, #0]
   9d52e:	2223      	movs	r2, #35	; 0x23
   9d530:	701a      	strb	r2, [r3, #0]
		break;
   9d532:	e050      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   9d534:	683b      	ldr	r3, [r7, #0]
   9d536:	2216      	movs	r2, #22
   9d538:	701a      	strb	r2, [r3, #0]
		break;
   9d53a:	e04c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   9d53c:	683b      	ldr	r3, [r7, #0]
   9d53e:	2221      	movs	r2, #33	; 0x21
   9d540:	701a      	strb	r2, [r3, #0]
		break;
   9d542:	e048      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   9d544:	683b      	ldr	r3, [r7, #0]
   9d546:	220c      	movs	r2, #12
   9d548:	701a      	strb	r2, [r3, #0]
		break;
   9d54a:	e044      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   9d54c:	683b      	ldr	r3, [r7, #0]
   9d54e:	220d      	movs	r2, #13
   9d550:	701a      	strb	r2, [r3, #0]
		break;
   9d552:	e040      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   9d554:	683b      	ldr	r3, [r7, #0]
   9d556:	220e      	movs	r2, #14
   9d558:	701a      	strb	r2, [r3, #0]
		break;
   9d55a:	e03c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   9d55c:	683b      	ldr	r3, [r7, #0]
   9d55e:	220f      	movs	r2, #15
   9d560:	701a      	strb	r2, [r3, #0]
		break;
   9d562:	e038      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   9d564:	683b      	ldr	r3, [r7, #0]
   9d566:	2210      	movs	r2, #16
   9d568:	701a      	strb	r2, [r3, #0]
		break;
   9d56a:	e034      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   9d56c:	683b      	ldr	r3, [r7, #0]
   9d56e:	2211      	movs	r2, #17
   9d570:	701a      	strb	r2, [r3, #0]
		break;
   9d572:	e030      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   9d574:	683b      	ldr	r3, [r7, #0]
   9d576:	2213      	movs	r2, #19
   9d578:	701a      	strb	r2, [r3, #0]
		break;
   9d57a:	e02c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   9d57c:	683b      	ldr	r3, [r7, #0]
   9d57e:	2212      	movs	r2, #18
   9d580:	701a      	strb	r2, [r3, #0]
		break;
   9d582:	e028      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   9d584:	683b      	ldr	r3, [r7, #0]
   9d586:	2215      	movs	r2, #21
   9d588:	701a      	strb	r2, [r3, #0]
		break;
   9d58a:	e024      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   9d58c:	683b      	ldr	r3, [r7, #0]
   9d58e:	2224      	movs	r2, #36	; 0x24
   9d590:	701a      	strb	r2, [r3, #0]
		break;
   9d592:	e020      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   9d594:	683b      	ldr	r3, [r7, #0]
   9d596:	2214      	movs	r2, #20
   9d598:	701a      	strb	r2, [r3, #0]
		break;
   9d59a:	e01c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   9d59c:	683b      	ldr	r3, [r7, #0]
   9d59e:	2217      	movs	r2, #23
   9d5a0:	701a      	strb	r2, [r3, #0]
		break;
   9d5a2:	e018      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   9d5a4:	683b      	ldr	r3, [r7, #0]
   9d5a6:	2218      	movs	r2, #24
   9d5a8:	701a      	strb	r2, [r3, #0]
		break;
   9d5aa:	e014      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   9d5ac:	683b      	ldr	r3, [r7, #0]
   9d5ae:	221c      	movs	r2, #28
   9d5b0:	701a      	strb	r2, [r3, #0]
		break;
   9d5b2:	e010      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   9d5b4:	683b      	ldr	r3, [r7, #0]
   9d5b6:	221d      	movs	r2, #29
   9d5b8:	701a      	strb	r2, [r3, #0]
		break;
   9d5ba:	e00c      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   9d5bc:	683b      	ldr	r3, [r7, #0]
   9d5be:	221e      	movs	r2, #30
   9d5c0:	701a      	strb	r2, [r3, #0]
		break;
   9d5c2:	e008      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   9d5c4:	683b      	ldr	r3, [r7, #0]
   9d5c6:	221f      	movs	r2, #31
   9d5c8:	701a      	strb	r2, [r3, #0]
		break;
   9d5ca:	e004      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   9d5cc:	683b      	ldr	r3, [r7, #0]
   9d5ce:	2220      	movs	r2, #32
   9d5d0:	701a      	strb	r2, [r3, #0]
		break;
   9d5d2:	e000      	b.n	9d5d6 <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   9d5d4:	bf00      	nop
	}
	return CL_OK;
   9d5d6:	2300      	movs	r3, #0
}
   9d5d8:	4618      	mov	r0, r3
   9d5da:	370c      	adds	r7, #12
   9d5dc:	46bd      	mov	sp, r7
   9d5de:	bc80      	pop	{r7}
   9d5e0:	4770      	bx	lr
   9d5e2:	bf00      	nop

0009d5e4 <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   9d5e4:	b590      	push	{r4, r7, lr}
   9d5e6:	b085      	sub	sp, #20
   9d5e8:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9d5ea:	2300      	movs	r3, #0
   9d5ec:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d5ee:	2351      	movs	r3, #81	; 0x51
   9d5f0:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9d5f2:	2300      	movs	r3, #0
   9d5f4:	603b      	str	r3, [r7, #0]
	Cl_Uint8Type data = 0;
   9d5f6:	2300      	movs	r3, #0
   9d5f8:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9d5fa:	2001      	movs	r0, #1
   9d5fc:	4b42      	ldr	r3, [pc, #264]	; (9d708 <Cl_Disinf_StartDisinf+0x124>)
   9d5fe:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   9d600:	f44f 7016 	mov.w	r0, #600	; 0x258
   9d604:	4b41      	ldr	r3, [pc, #260]	; (9d70c <Cl_Disinf_StartDisinf+0x128>)
   9d606:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9d608:	2001      	movs	r0, #1
   9d60a:	4b41      	ldr	r3, [pc, #260]	; (9d710 <Cl_Disinf_StartDisinf+0x12c>)
   9d60c:	4798      	blx	r3
   9d60e:	4603      	mov	r3, r0
   9d610:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   9d612:	f44f 7116 	mov.w	r1, #600	; 0x258
   9d616:	2001      	movs	r0, #1
   9d618:	4b3e      	ldr	r3, [pc, #248]	; (9d714 <Cl_Disinf_StartDisinf+0x130>)
   9d61a:	4798      	blx	r3
   9d61c:	4603      	mov	r3, r0
   9d61e:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   9d620:	2004      	movs	r0, #4
   9d622:	4b3d      	ldr	r3, [pc, #244]	; (9d718 <Cl_Disinf_StartDisinf+0x134>)
   9d624:	4798      	blx	r3
   9d626:	4603      	mov	r3, r0
   9d628:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   9d62a:	79fb      	ldrb	r3, [r7, #7]
   9d62c:	2b00      	cmp	r3, #0
   9d62e:	d165      	bne.n	9d6fc <Cl_Disinf_StartDisinf+0x118>
	{
		Cl_disinfOpenFillTimeOut = false;
   9d630:	4b3a      	ldr	r3, [pc, #232]	; (9d71c <Cl_Disinf_StartDisinf+0x138>)
   9d632:	2200      	movs	r2, #0
   9d634:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9d636:	4b3a      	ldr	r3, [pc, #232]	; (9d720 <Cl_Disinf_StartDisinf+0x13c>)
   9d638:	4798      	blx	r3
   9d63a:	4603      	mov	r3, r0
   9d63c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9d63e:	2001      	movs	r0, #1
   9d640:	4b38      	ldr	r3, [pc, #224]	; (9d724 <Cl_Disinf_StartDisinf+0x140>)
   9d642:	4798      	blx	r3
   9d644:	4603      	mov	r3, r0
   9d646:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9d648:	4b37      	ldr	r3, [pc, #220]	; (9d728 <Cl_Disinf_StartDisinf+0x144>)
   9d64a:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9d64c:	2300      	movs	r3, #0
   9d64e:	9300      	str	r3, [sp, #0]
   9d650:	f04f 0300 	mov.w	r3, #0
   9d654:	f04f 0200 	mov.w	r2, #0
   9d658:	2100      	movs	r1, #0
   9d65a:	2029      	movs	r0, #41	; 0x29
   9d65c:	4c33      	ldr	r4, [pc, #204]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d65e:	47a0      	blx	r4
   9d660:	4603      	mov	r3, r0
   9d662:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9d664:	2300      	movs	r3, #0
   9d666:	9300      	str	r3, [sp, #0]
   9d668:	f04f 0300 	mov.w	r3, #0
   9d66c:	f04f 0200 	mov.w	r2, #0
   9d670:	2100      	movs	r1, #0
   9d672:	202b      	movs	r0, #43	; 0x2b
   9d674:	4c2d      	ldr	r4, [pc, #180]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d676:	47a0      	blx	r4
   9d678:	4603      	mov	r3, r0
   9d67a:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d67c:	2300      	movs	r3, #0
   9d67e:	9300      	str	r3, [sp, #0]
   9d680:	f04f 0300 	mov.w	r3, #0
   9d684:	f04f 0200 	mov.w	r2, #0
   9d688:	2101      	movs	r1, #1
   9d68a:	2003      	movs	r0, #3
   9d68c:	4c27      	ldr	r4, [pc, #156]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d68e:	47a0      	blx	r4
   9d690:	4603      	mov	r3, r0
   9d692:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d694:	2300      	movs	r3, #0
   9d696:	9300      	str	r3, [sp, #0]
   9d698:	f04f 0300 	mov.w	r3, #0
   9d69c:	f04f 0200 	mov.w	r2, #0
   9d6a0:	2101      	movs	r1, #1
   9d6a2:	2004      	movs	r0, #4
   9d6a4:	4c21      	ldr	r4, [pc, #132]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d6a6:	47a0      	blx	r4
   9d6a8:	4603      	mov	r3, r0
   9d6aa:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9d6ac:	2300      	movs	r3, #0
   9d6ae:	9300      	str	r3, [sp, #0]
   9d6b0:	f04f 0300 	mov.w	r3, #0
   9d6b4:	f04f 0200 	mov.w	r2, #0
   9d6b8:	2100      	movs	r1, #0
   9d6ba:	203d      	movs	r0, #61	; 0x3d
   9d6bc:	4c1b      	ldr	r4, [pc, #108]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d6be:	47a0      	blx	r4
   9d6c0:	4603      	mov	r3, r0
   9d6c2:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9d6c4:	2300      	movs	r3, #0
   9d6c6:	9300      	str	r3, [sp, #0]
   9d6c8:	f04f 0300 	mov.w	r3, #0
   9d6cc:	f04f 0200 	mov.w	r2, #0
   9d6d0:	2101      	movs	r1, #1
   9d6d2:	203e      	movs	r0, #62	; 0x3e
   9d6d4:	4c15      	ldr	r4, [pc, #84]	; (9d72c <Cl_Disinf_StartDisinf+0x148>)
   9d6d6:	47a0      	blx	r4
   9d6d8:	4603      	mov	r3, r0
   9d6da:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   9d6dc:	2101      	movs	r1, #1
   9d6de:	203d      	movs	r0, #61	; 0x3d
   9d6e0:	4b13      	ldr	r3, [pc, #76]	; (9d730 <Cl_Disinf_StartDisinf+0x14c>)
   9d6e2:	4798      	blx	r3
   9d6e4:	4603      	mov	r3, r0
   9d6e6:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   9d6e8:	2101      	movs	r1, #1
   9d6ea:	203e      	movs	r0, #62	; 0x3e
   9d6ec:	4b10      	ldr	r3, [pc, #64]	; (9d730 <Cl_Disinf_StartDisinf+0x14c>)
   9d6ee:	4798      	blx	r3
   9d6f0:	4603      	mov	r3, r0
   9d6f2:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   9d6f4:	4b0c      	ldr	r3, [pc, #48]	; (9d728 <Cl_Disinf_StartDisinf+0x144>)
   9d6f6:	4798      	blx	r3
   9d6f8:	4603      	mov	r3, r0
   9d6fa:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   9d6fc:	2300      	movs	r3, #0
}
   9d6fe:	4618      	mov	r0, r3
   9d700:	370c      	adds	r7, #12
   9d702:	46bd      	mov	sp, r7
   9d704:	bd90      	pop	{r4, r7, pc}
   9d706:	bf00      	nop
   9d708:	00099ac9 	.word	0x00099ac9
   9d70c:	00099f5d 	.word	0x00099f5d
   9d710:	00099a09 	.word	0x00099a09
   9d714:	00099b21 	.word	0x00099b21
   9d718:	000832a1 	.word	0x000832a1
   9d71c:	20070b76 	.word	0x20070b76
   9d720:	0009d889 	.word	0x0009d889
   9d724:	00093665 	.word	0x00093665
   9d728:	0009dc3d 	.word	0x0009dc3d
   9d72c:	00082d85 	.word	0x00082d85
   9d730:	00082de1 	.word	0x00082de1

0009d734 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   9d734:	b580      	push	{r7, lr}
   9d736:	b082      	sub	sp, #8
   9d738:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_cntrl_disable_loopback();
   9d73a:	4b1c      	ldr	r3, [pc, #112]	; (9d7ac <Cl_Disinf_StopDisinf+0x78>)
   9d73c:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   9d73e:	4b1c      	ldr	r3, [pc, #112]	; (9d7b0 <Cl_Disinf_StopDisinf+0x7c>)
   9d740:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9d742:	4b1c      	ldr	r3, [pc, #112]	; (9d7b4 <Cl_Disinf_StopDisinf+0x80>)
   9d744:	220c      	movs	r2, #12
   9d746:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   9d748:	4b1b      	ldr	r3, [pc, #108]	; (9d7b8 <Cl_Disinf_StopDisinf+0x84>)
   9d74a:	681b      	ldr	r3, [r3, #0]
   9d74c:	4a1b      	ldr	r2, [pc, #108]	; (9d7bc <Cl_Disinf_StopDisinf+0x88>)
   9d74e:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   9d750:	4b1b      	ldr	r3, [pc, #108]	; (9d7c0 <Cl_Disinf_StopDisinf+0x8c>)
   9d752:	681b      	ldr	r3, [r3, #0]
   9d754:	4a1b      	ldr	r2, [pc, #108]	; (9d7c4 <Cl_Disinf_StopDisinf+0x90>)
   9d756:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   9d758:	4b1b      	ldr	r3, [pc, #108]	; (9d7c8 <Cl_Disinf_StopDisinf+0x94>)
   9d75a:	681b      	ldr	r3, [r3, #0]
   9d75c:	4a1b      	ldr	r2, [pc, #108]	; (9d7cc <Cl_Disinf_StopDisinf+0x98>)
   9d75e:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   9d760:	4b1b      	ldr	r3, [pc, #108]	; (9d7d0 <Cl_Disinf_StopDisinf+0x9c>)
   9d762:	681b      	ldr	r3, [r3, #0]
   9d764:	4a1b      	ldr	r2, [pc, #108]	; (9d7d4 <Cl_Disinf_StopDisinf+0xa0>)
   9d766:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   9d768:	4b1b      	ldr	r3, [pc, #108]	; (9d7d8 <Cl_Disinf_StopDisinf+0xa4>)
   9d76a:	681b      	ldr	r3, [r3, #0]
   9d76c:	4a1b      	ldr	r2, [pc, #108]	; (9d7dc <Cl_Disinf_StopDisinf+0xa8>)
   9d76e:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   9d770:	4b11      	ldr	r3, [pc, #68]	; (9d7b8 <Cl_Disinf_StopDisinf+0x84>)
   9d772:	2200      	movs	r2, #0
   9d774:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   9d776:	4b12      	ldr	r3, [pc, #72]	; (9d7c0 <Cl_Disinf_StopDisinf+0x8c>)
   9d778:	2200      	movs	r2, #0
   9d77a:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   9d77c:	4b12      	ldr	r3, [pc, #72]	; (9d7c8 <Cl_Disinf_StopDisinf+0x94>)
   9d77e:	2200      	movs	r2, #0
   9d780:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   9d782:	4b13      	ldr	r3, [pc, #76]	; (9d7d0 <Cl_Disinf_StopDisinf+0x9c>)
   9d784:	2200      	movs	r2, #0
   9d786:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   9d788:	4b13      	ldr	r3, [pc, #76]	; (9d7d8 <Cl_Disinf_StopDisinf+0xa4>)
   9d78a:	2200      	movs	r2, #0
   9d78c:	601a      	str	r2, [r3, #0]
	hotrinse_flag = 0;
   9d78e:	4b14      	ldr	r3, [pc, #80]	; (9d7e0 <Cl_Disinf_StopDisinf+0xac>)
   9d790:	2200      	movs	r2, #0
   9d792:	701a      	strb	r2, [r3, #0]
	Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_STOPPED,&data,0);
   9d794:	1dfb      	adds	r3, r7, #7
   9d796:	2200      	movs	r2, #0
   9d798:	4619      	mov	r1, r3
   9d79a:	2050      	movs	r0, #80	; 0x50
   9d79c:	4b11      	ldr	r3, [pc, #68]	; (9d7e4 <Cl_Disinf_StopDisinf+0xb0>)
   9d79e:	4798      	blx	r3
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   9d7a0:	2300      	movs	r3, #0
}
   9d7a2:	4618      	mov	r0, r3
   9d7a4:	3708      	adds	r7, #8
   9d7a6:	46bd      	mov	sp, r7
   9d7a8:	bd80      	pop	{r7, pc}
   9d7aa:	bf00      	nop
   9d7ac:	00099c39 	.word	0x00099c39
   9d7b0:	00099a95 	.word	0x00099a95
   9d7b4:	20071bd7 	.word	0x20071bd7
   9d7b8:	20071bd8 	.word	0x20071bd8
   9d7bc:	20071be4 	.word	0x20071be4
   9d7c0:	20071be0 	.word	0x20071be0
   9d7c4:	20071bec 	.word	0x20071bec
   9d7c8:	20071bdc 	.word	0x20071bdc
   9d7cc:	20071be8 	.word	0x20071be8
   9d7d0:	20071bf0 	.word	0x20071bf0
   9d7d4:	20071bf8 	.word	0x20071bf8
   9d7d8:	20071bf4 	.word	0x20071bf4
   9d7dc:	20071bfc 	.word	0x20071bfc
   9d7e0:	20071cb1 	.word	0x20071cb1
   9d7e4:	0009b805 	.word	0x0009b805

0009d7e8 <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   9d7e8:	b580      	push	{r7, lr}
   9d7ea:	b082      	sub	sp, #8
   9d7ec:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   9d7ee:	2300      	movs	r3, #0
   9d7f0:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   9d7f2:	4b16      	ldr	r3, [pc, #88]	; (9d84c <Cl_Disinf_resumeDisinf+0x64>)
   9d7f4:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9d7f6:	4b16      	ldr	r3, [pc, #88]	; (9d850 <Cl_Disinf_resumeDisinf+0x68>)
   9d7f8:	2208      	movs	r2, #8
   9d7fa:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   9d7fc:	4b15      	ldr	r3, [pc, #84]	; (9d854 <Cl_Disinf_resumeDisinf+0x6c>)
   9d7fe:	781b      	ldrb	r3, [r3, #0]
   9d800:	2b01      	cmp	r3, #1
   9d802:	d101      	bne.n	9d808 <Cl_Disinf_resumeDisinf+0x20>
	{
		sv_cntrl_poweronheater();
   9d804:	4b14      	ldr	r3, [pc, #80]	; (9d858 <Cl_Disinf_resumeDisinf+0x70>)
   9d806:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   9d808:	1dbb      	adds	r3, r7, #6
   9d80a:	2200      	movs	r2, #0
   9d80c:	4619      	mov	r1, r3
   9d80e:	203b      	movs	r0, #59	; 0x3b
   9d810:	4b12      	ldr	r3, [pc, #72]	; (9d85c <Cl_Disinf_resumeDisinf+0x74>)
   9d812:	4798      	blx	r3
   9d814:	4603      	mov	r3, r0
   9d816:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9d818:	4b11      	ldr	r3, [pc, #68]	; (9d860 <Cl_Disinf_resumeDisinf+0x78>)
   9d81a:	681b      	ldr	r3, [r3, #0]
   9d81c:	4a11      	ldr	r2, [pc, #68]	; (9d864 <Cl_Disinf_resumeDisinf+0x7c>)
   9d81e:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9d820:	4b11      	ldr	r3, [pc, #68]	; (9d868 <Cl_Disinf_resumeDisinf+0x80>)
   9d822:	681b      	ldr	r3, [r3, #0]
   9d824:	4a11      	ldr	r2, [pc, #68]	; (9d86c <Cl_Disinf_resumeDisinf+0x84>)
   9d826:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9d828:	4b11      	ldr	r3, [pc, #68]	; (9d870 <Cl_Disinf_resumeDisinf+0x88>)
   9d82a:	681b      	ldr	r3, [r3, #0]
   9d82c:	4a11      	ldr	r2, [pc, #68]	; (9d874 <Cl_Disinf_resumeDisinf+0x8c>)
   9d82e:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9d830:	4b11      	ldr	r3, [pc, #68]	; (9d878 <Cl_Disinf_resumeDisinf+0x90>)
   9d832:	681b      	ldr	r3, [r3, #0]
   9d834:	4a11      	ldr	r2, [pc, #68]	; (9d87c <Cl_Disinf_resumeDisinf+0x94>)
   9d836:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9d838:	4b11      	ldr	r3, [pc, #68]	; (9d880 <Cl_Disinf_resumeDisinf+0x98>)
   9d83a:	681b      	ldr	r3, [r3, #0]
   9d83c:	4a11      	ldr	r2, [pc, #68]	; (9d884 <Cl_Disinf_resumeDisinf+0x9c>)
   9d83e:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9d840:	2300      	movs	r3, #0
}
   9d842:	4618      	mov	r0, r3
   9d844:	3708      	adds	r7, #8
   9d846:	46bd      	mov	sp, r7
   9d848:	bd80      	pop	{r7, pc}
   9d84a:	bf00      	nop
   9d84c:	00099c1d 	.word	0x00099c1d
   9d850:	20071bd7 	.word	0x20071bd7
   9d854:	20071a4f 	.word	0x20071a4f
   9d858:	00099a81 	.word	0x00099a81
   9d85c:	0009b805 	.word	0x0009b805
   9d860:	20071be4 	.word	0x20071be4
   9d864:	20071bd8 	.word	0x20071bd8
   9d868:	20071bec 	.word	0x20071bec
   9d86c:	20071be0 	.word	0x20071be0
   9d870:	20071be8 	.word	0x20071be8
   9d874:	20071bdc 	.word	0x20071bdc
   9d878:	20071bf8 	.word	0x20071bf8
   9d87c:	20071bf0 	.word	0x20071bf0
   9d880:	20071bfc 	.word	0x20071bfc
   9d884:	20071bf4 	.word	0x20071bf4

0009d888 <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9d888:	b580      	push	{r7, lr}
   9d88a:	b084      	sub	sp, #16
   9d88c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9d88e:	2304      	movs	r3, #4
   9d890:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d892:	2351      	movs	r3, #81	; 0x51
   9d894:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9d896:	1d3b      	adds	r3, r7, #4
   9d898:	2200      	movs	r2, #0
   9d89a:	601a      	str	r2, [r3, #0]
   9d89c:	f8c3 2003 	str.w	r2, [r3, #3]
	
	command = CON_TX_COMMAND_REM_TIME;
   9d8a0:	230a      	movs	r3, #10
   9d8a2:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9d8a4:	230b      	movs	r3, #11
   9d8a6:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9d8a8:	4b08      	ldr	r3, [pc, #32]	; (9d8cc <Cl_Disinf_UpdateTimeInfo+0x44>)
   9d8aa:	681b      	ldr	r3, [r3, #0]
   9d8ac:	b2db      	uxtb	r3, r3
   9d8ae:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9d8b0:	1d39      	adds	r1, r7, #4
   9d8b2:	7bbb      	ldrb	r3, [r7, #14]
   9d8b4:	2202      	movs	r2, #2
   9d8b6:	4618      	mov	r0, r3
   9d8b8:	4b05      	ldr	r3, [pc, #20]	; (9d8d0 <Cl_Disinf_UpdateTimeInfo+0x48>)
   9d8ba:	4798      	blx	r3
   9d8bc:	4603      	mov	r3, r0
   9d8be:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9d8c0:	2300      	movs	r3, #0
	
}
   9d8c2:	4618      	mov	r0, r3
   9d8c4:	3710      	adds	r7, #16
   9d8c6:	46bd      	mov	sp, r7
   9d8c8:	bd80      	pop	{r7, pc}
   9d8ca:	bf00      	nop
   9d8cc:	20071bf0 	.word	0x20071bf0
   9d8d0:	0009b805 	.word	0x0009b805

0009d8d4 <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9d8d4:	b580      	push	{r7, lr}
   9d8d6:	b086      	sub	sp, #24
   9d8d8:	af00      	add	r7, sp, #0
   9d8da:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9d8dc:	2300      	movs	r3, #0
   9d8de:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9d8e0:	2300      	movs	r3, #0
   9d8e2:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9d8e4:	f107 030c 	add.w	r3, r7, #12
   9d8e8:	2100      	movs	r1, #0
   9d8ea:	460a      	mov	r2, r1
   9d8ec:	801a      	strh	r2, [r3, #0]
   9d8ee:	460a      	mov	r2, r1
   9d8f0:	709a      	strb	r2, [r3, #2]
   9d8f2:	2300      	movs	r3, #0
   9d8f4:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d8f6:	2351      	movs	r3, #81	; 0x51
   9d8f8:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d8fa:	2300      	movs	r3, #0
   9d8fc:	75bb      	strb	r3, [r7, #22]
   9d8fe:	e05f      	b.n	9d9c0 <Cl_Disinf_UpdateAlarmTable+0xec>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9d900:	7dba      	ldrb	r2, [r7, #22]
   9d902:	4933      	ldr	r1, [pc, #204]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d904:	4613      	mov	r3, r2
   9d906:	00db      	lsls	r3, r3, #3
   9d908:	1a9b      	subs	r3, r3, r2
   9d90a:	440b      	add	r3, r1
   9d90c:	7818      	ldrb	r0, [r3, #0]
   9d90e:	7dba      	ldrb	r2, [r7, #22]
   9d910:	4613      	mov	r3, r2
   9d912:	00db      	lsls	r3, r3, #3
   9d914:	1a9b      	subs	r3, r3, r2
   9d916:	4a2e      	ldr	r2, [pc, #184]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d918:	4413      	add	r3, r2
   9d91a:	3302      	adds	r3, #2
   9d91c:	4619      	mov	r1, r3
   9d91e:	4b2d      	ldr	r3, [pc, #180]	; (9d9d4 <Cl_Disinf_UpdateAlarmTable+0x100>)
   9d920:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9d922:	7dba      	ldrb	r2, [r7, #22]
   9d924:	492a      	ldr	r1, [pc, #168]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d926:	4613      	mov	r3, r2
   9d928:	00db      	lsls	r3, r3, #3
   9d92a:	1a9b      	subs	r3, r3, r2
   9d92c:	440b      	add	r3, r1
   9d92e:	3302      	adds	r3, #2
   9d930:	781b      	ldrb	r3, [r3, #0]
   9d932:	2b00      	cmp	r3, #0
   9d934:	d022      	beq.n	9d97c <Cl_Disinf_UpdateAlarmTable+0xa8>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9d936:	7dba      	ldrb	r2, [r7, #22]
   9d938:	4925      	ldr	r1, [pc, #148]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d93a:	4613      	mov	r3, r2
   9d93c:	00db      	lsls	r3, r3, #3
   9d93e:	1a9b      	subs	r3, r3, r2
   9d940:	440b      	add	r3, r1
   9d942:	3303      	adds	r3, #3
   9d944:	781b      	ldrb	r3, [r3, #0]
   9d946:	f083 0301 	eor.w	r3, r3, #1
   9d94a:	b2db      	uxtb	r3, r3
   9d94c:	2b00      	cmp	r3, #0
   9d94e:	d034      	beq.n	9d9ba <Cl_Disinf_UpdateAlarmTable+0xe6>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9d950:	7dba      	ldrb	r2, [r7, #22]
   9d952:	491f      	ldr	r1, [pc, #124]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d954:	4613      	mov	r3, r2
   9d956:	00db      	lsls	r3, r3, #3
   9d958:	1a9b      	subs	r3, r3, r2
   9d95a:	440b      	add	r3, r1
   9d95c:	3303      	adds	r3, #3
   9d95e:	2201      	movs	r2, #1
   9d960:	701a      	strb	r2, [r3, #0]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9d962:	7dba      	ldrb	r2, [r7, #22]
   9d964:	491a      	ldr	r1, [pc, #104]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d966:	4613      	mov	r3, r2
   9d968:	00db      	lsls	r3, r3, #3
   9d96a:	1a9b      	subs	r3, r3, r2
   9d96c:	440b      	add	r3, r1
   9d96e:	781b      	ldrb	r3, [r3, #0]
   9d970:	4618      	mov	r0, r3
   9d972:	4b19      	ldr	r3, [pc, #100]	; (9d9d8 <Cl_Disinf_UpdateAlarmTable+0x104>)
   9d974:	4798      	blx	r3
   9d976:	4603      	mov	r3, r0
   9d978:	75fb      	strb	r3, [r7, #23]
   9d97a:	e01e      	b.n	9d9ba <Cl_Disinf_UpdateAlarmTable+0xe6>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9d97c:	7dba      	ldrb	r2, [r7, #22]
   9d97e:	4914      	ldr	r1, [pc, #80]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d980:	4613      	mov	r3, r2
   9d982:	00db      	lsls	r3, r3, #3
   9d984:	1a9b      	subs	r3, r3, r2
   9d986:	440b      	add	r3, r1
   9d988:	3303      	adds	r3, #3
   9d98a:	781b      	ldrb	r3, [r3, #0]
   9d98c:	2b00      	cmp	r3, #0
   9d98e:	d014      	beq.n	9d9ba <Cl_Disinf_UpdateAlarmTable+0xe6>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9d990:	7dba      	ldrb	r2, [r7, #22]
   9d992:	490f      	ldr	r1, [pc, #60]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d994:	4613      	mov	r3, r2
   9d996:	00db      	lsls	r3, r3, #3
   9d998:	1a9b      	subs	r3, r3, r2
   9d99a:	440b      	add	r3, r1
   9d99c:	3303      	adds	r3, #3
   9d99e:	2200      	movs	r2, #0
   9d9a0:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9d9a2:	2307      	movs	r3, #7
   9d9a4:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9d9a6:	7dba      	ldrb	r2, [r7, #22]
   9d9a8:	4909      	ldr	r1, [pc, #36]	; (9d9d0 <Cl_Disinf_UpdateAlarmTable+0xfc>)
   9d9aa:	4613      	mov	r3, r2
   9d9ac:	00db      	lsls	r3, r3, #3
   9d9ae:	1a9b      	subs	r3, r3, r2
   9d9b0:	440b      	add	r3, r1
   9d9b2:	781b      	ldrb	r3, [r3, #0]
   9d9b4:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9d9b6:	2300      	movs	r3, #0
   9d9b8:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d9ba:	7dbb      	ldrb	r3, [r7, #22]
   9d9bc:	3301      	adds	r3, #1
   9d9be:	75bb      	strb	r3, [r7, #22]
   9d9c0:	7dbb      	ldrb	r3, [r7, #22]
   9d9c2:	2b0b      	cmp	r3, #11
   9d9c4:	d99c      	bls.n	9d900 <Cl_Disinf_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_disinfretcode );
   9d9c6:	7dfb      	ldrb	r3, [r7, #23]
}
   9d9c8:	4618      	mov	r0, r3
   9d9ca:	3718      	adds	r7, #24
   9d9cc:	46bd      	mov	sp, r7
   9d9ce:	bd80      	pop	{r7, pc}
   9d9d0:	20070b78 	.word	0x20070b78
   9d9d4:	00082fbd 	.word	0x00082fbd
   9d9d8:	0009da05 	.word	0x0009da05

0009d9dc <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9d9dc:	b580      	push	{r7, lr}
   9d9de:	b082      	sub	sp, #8
   9d9e0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9d9e2:	2300      	movs	r3, #0
   9d9e4:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d9e6:	2351      	movs	r3, #81	; 0x51
   9d9e8:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9d9ea:	1d7b      	adds	r3, r7, #5
   9d9ec:	4618      	mov	r0, r3
   9d9ee:	4b04      	ldr	r3, [pc, #16]	; (9da00 <Cl_disinf_ProcessAlarms+0x24>)
   9d9f0:	4798      	blx	r3
   9d9f2:	4603      	mov	r3, r0
   9d9f4:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9d9f6:	79fb      	ldrb	r3, [r7, #7]
}
   9d9f8:	4618      	mov	r0, r3
   9d9fa:	3708      	adds	r7, #8
   9d9fc:	46bd      	mov	sp, r7
   9d9fe:	bd80      	pop	{r7, pc}
   9da00:	0009d8d5 	.word	0x0009d8d5

0009da04 <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9da04:	b580      	push	{r7, lr}
   9da06:	b086      	sub	sp, #24
   9da08:	af00      	add	r7, sp, #0
   9da0a:	4603      	mov	r3, r0
   9da0c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9da0e:	2300      	movs	r3, #0
   9da10:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9da12:	f107 0308 	add.w	r3, r7, #8
   9da16:	2100      	movs	r1, #0
   9da18:	460a      	mov	r2, r1
   9da1a:	801a      	strh	r2, [r3, #0]
   9da1c:	460a      	mov	r2, r1
   9da1e:	709a      	strb	r2, [r3, #2]
   9da20:	2300      	movs	r3, #0
   9da22:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9da24:	2351      	movs	r3, #81	; 0x51
   9da26:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9da28:	2300      	movs	r3, #0
   9da2a:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9da2c:	79fb      	ldrb	r3, [r7, #7]
   9da2e:	3b03      	subs	r3, #3
   9da30:	2b28      	cmp	r3, #40	; 0x28
   9da32:	f200 80d5 	bhi.w	9dbe0 <CL_DisinfAlarmActon+0x1dc>
   9da36:	a201      	add	r2, pc, #4	; (adr r2, 9da3c <CL_DisinfAlarmActon+0x38>)
   9da38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9da3c:	0009db41 	.word	0x0009db41
   9da40:	0009db55 	.word	0x0009db55
   9da44:	0009dbe1 	.word	0x0009dbe1
   9da48:	0009dbe1 	.word	0x0009dbe1
   9da4c:	0009dbe1 	.word	0x0009dbe1
   9da50:	0009dbcd 	.word	0x0009dbcd
   9da54:	0009dbe1 	.word	0x0009dbe1
   9da58:	0009dbe1 	.word	0x0009dbe1
   9da5c:	0009dbe1 	.word	0x0009dbe1
   9da60:	0009dbe1 	.word	0x0009dbe1
   9da64:	0009dbe1 	.word	0x0009dbe1
   9da68:	0009dbe1 	.word	0x0009dbe1
   9da6c:	0009dbe1 	.word	0x0009dbe1
   9da70:	0009dbe1 	.word	0x0009dbe1
   9da74:	0009dbe1 	.word	0x0009dbe1
   9da78:	0009dbe1 	.word	0x0009dbe1
   9da7c:	0009db69 	.word	0x0009db69
   9da80:	0009db7d 	.word	0x0009db7d
   9da84:	0009db91 	.word	0x0009db91
   9da88:	0009db91 	.word	0x0009db91
   9da8c:	0009dba5 	.word	0x0009dba5
   9da90:	0009dba5 	.word	0x0009dba5
   9da94:	0009dbe1 	.word	0x0009dbe1
   9da98:	0009dbe1 	.word	0x0009dbe1
   9da9c:	0009dbe1 	.word	0x0009dbe1
   9daa0:	0009dbe1 	.word	0x0009dbe1
   9daa4:	0009dbe1 	.word	0x0009dbe1
   9daa8:	0009dbe1 	.word	0x0009dbe1
   9daac:	0009dbe1 	.word	0x0009dbe1
   9dab0:	0009dbe1 	.word	0x0009dbe1
   9dab4:	0009dbe1 	.word	0x0009dbe1
   9dab8:	0009dbe1 	.word	0x0009dbe1
   9dabc:	0009dbe1 	.word	0x0009dbe1
   9dac0:	0009dbe1 	.word	0x0009dbe1
   9dac4:	0009dbe1 	.word	0x0009dbe1
   9dac8:	0009dbe1 	.word	0x0009dbe1
   9dacc:	0009dbb9 	.word	0x0009dbb9
   9dad0:	0009dbb9 	.word	0x0009dbb9
   9dad4:	0009dae1 	.word	0x0009dae1
   9dad8:	0009dbe1 	.word	0x0009dbe1
   9dadc:	0009db2d 	.word	0x0009db2d
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9dae0:	4b4f      	ldr	r3, [pc, #316]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9dae2:	781b      	ldrb	r3, [r3, #0]
   9dae4:	2b10      	cmp	r3, #16
   9dae6:	d10b      	bne.n	9db00 <CL_DisinfAlarmActon+0xfc>
			{
				sv_cntrl_setredalarm();
   9dae8:	4b4e      	ldr	r3, [pc, #312]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9daea:	4798      	blx	r3
				sv_cntrl_buzzer();
   9daec:	4b4e      	ldr	r3, [pc, #312]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9daee:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9daf0:	4b4b      	ldr	r3, [pc, #300]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9daf2:	781b      	ldrb	r3, [r3, #0]
   9daf4:	2b10      	cmp	r3, #16
   9daf6:	d175      	bne.n	9dbe4 <CL_DisinfAlarmActon+0x1e0>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9daf8:	4b49      	ldr	r3, [pc, #292]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9dafa:	2210      	movs	r2, #16
   9dafc:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9dafe:	e071      	b.n	9dbe4 <CL_DisinfAlarmActon+0x1e0>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9db00:	4b47      	ldr	r3, [pc, #284]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db02:	781b      	ldrb	r3, [r3, #0]
   9db04:	2b11      	cmp	r3, #17
   9db06:	d107      	bne.n	9db18 <CL_DisinfAlarmActon+0x114>
			{
				sv_cntrl_setredalarm();
   9db08:	4b46      	ldr	r3, [pc, #280]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9db0a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db0c:	4b46      	ldr	r3, [pc, #280]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db0e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9db10:	4b43      	ldr	r3, [pc, #268]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db12:	2211      	movs	r2, #17
   9db14:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9db16:	e065      	b.n	9dbe4 <CL_DisinfAlarmActon+0x1e0>
				sv_cntrl_buzzer();
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
			}
			else
			{
				sv_cntrl_setredalarm();
   9db18:	4b42      	ldr	r3, [pc, #264]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9db1a:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db1c:	4b42      	ldr	r3, [pc, #264]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db1e:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9db20:	4b42      	ldr	r3, [pc, #264]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db22:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db24:	4b3e      	ldr	r3, [pc, #248]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db26:	220c      	movs	r2, #12
   9db28:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9db2a:	e05b      	b.n	9dbe4 <CL_DisinfAlarmActon+0x1e0>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9db2c:	4b3d      	ldr	r3, [pc, #244]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9db2e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9db30:	4b3d      	ldr	r3, [pc, #244]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db32:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9db34:	4b3d      	ldr	r3, [pc, #244]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db36:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db38:	4b39      	ldr	r3, [pc, #228]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db3a:	220c      	movs	r2, #12
   9db3c:	701a      	strb	r2, [r3, #0]
			break;
   9db3e:	e052      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9db40:	4b38      	ldr	r3, [pc, #224]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9db42:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db44:	4b38      	ldr	r3, [pc, #224]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db46:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9db48:	4b38      	ldr	r3, [pc, #224]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db4a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db4c:	4b34      	ldr	r3, [pc, #208]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db4e:	220c      	movs	r2, #12
   9db50:	701a      	strb	r2, [r3, #0]
			break;
   9db52:	e048      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9db54:	4b33      	ldr	r3, [pc, #204]	; (9dc24 <CL_DisinfAlarmActon+0x220>)
   9db56:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db58:	4b33      	ldr	r3, [pc, #204]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db5a:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9db5c:	4b33      	ldr	r3, [pc, #204]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db5e:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db60:	4b2f      	ldr	r3, [pc, #188]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db62:	220c      	movs	r2, #12
   9db64:	701a      	strb	r2, [r3, #0]
			break;
   9db66:	e03e      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9db68:	4b31      	ldr	r3, [pc, #196]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9db6a:	4798      	blx	r3
					sv_cntrl_buzzer();
   9db6c:	4b2e      	ldr	r3, [pc, #184]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db6e:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9db70:	4b2e      	ldr	r3, [pc, #184]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db72:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db74:	4b2a      	ldr	r3, [pc, #168]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db76:	220c      	movs	r2, #12
   9db78:	701a      	strb	r2, [r3, #0]
			break;
   9db7a:	e034      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9db7c:	4b2c      	ldr	r3, [pc, #176]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9db7e:	4798      	blx	r3
			sv_cntrl_buzzer();
   9db80:	4b29      	ldr	r3, [pc, #164]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db82:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9db84:	4b29      	ldr	r3, [pc, #164]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db86:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db88:	4b25      	ldr	r3, [pc, #148]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db8a:	220c      	movs	r2, #12
   9db8c:	701a      	strb	r2, [r3, #0]
			break;
   9db8e:	e02a      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9db90:	4b27      	ldr	r3, [pc, #156]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9db92:	4798      	blx	r3
				sv_cntrl_buzzer();
   9db94:	4b24      	ldr	r3, [pc, #144]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9db96:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9db98:	4b24      	ldr	r3, [pc, #144]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9db9a:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9db9c:	4b20      	ldr	r3, [pc, #128]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9db9e:	220c      	movs	r2, #12
   9dba0:	701a      	strb	r2, [r3, #0]
			break;
   9dba2:	e020      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9dba4:	4b22      	ldr	r3, [pc, #136]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9dba6:	4798      	blx	r3
				sv_cntrl_buzzer();
   9dba8:	4b1f      	ldr	r3, [pc, #124]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9dbaa:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9dbac:	4b1f      	ldr	r3, [pc, #124]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9dbae:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9dbb0:	4b1b      	ldr	r3, [pc, #108]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9dbb2:	220c      	movs	r2, #12
   9dbb4:	701a      	strb	r2, [r3, #0]
			break;
   9dbb6:	e016      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9dbb8:	4b1d      	ldr	r3, [pc, #116]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9dbba:	4798      	blx	r3
				sv_cntrl_buzzer();
   9dbbc:	4b1a      	ldr	r3, [pc, #104]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9dbbe:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9dbc0:	4b1a      	ldr	r3, [pc, #104]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9dbc2:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9dbc4:	4b16      	ldr	r3, [pc, #88]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9dbc6:	220c      	movs	r2, #12
   9dbc8:	701a      	strb	r2, [r3, #0]
			break;
   9dbca:	e00c      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9dbcc:	4b18      	ldr	r3, [pc, #96]	; (9dc30 <CL_DisinfAlarmActon+0x22c>)
   9dbce:	4798      	blx	r3
				sv_cntrl_buzzer();
   9dbd0:	4b15      	ldr	r3, [pc, #84]	; (9dc28 <CL_DisinfAlarmActon+0x224>)
   9dbd2:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9dbd4:	4b15      	ldr	r3, [pc, #84]	; (9dc2c <CL_DisinfAlarmActon+0x228>)
   9dbd6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9dbd8:	4b11      	ldr	r3, [pc, #68]	; (9dc20 <CL_DisinfAlarmActon+0x21c>)
   9dbda:	220c      	movs	r2, #12
   9dbdc:	701a      	strb	r2, [r3, #0]
			break;
   9dbde:	e002      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
			
			default:
			break;
   9dbe0:	bf00      	nop
   9dbe2:	e000      	b.n	9dbe6 <CL_DisinfAlarmActon+0x1e2>
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9dbe4:	bf00      	nop
			
			default:
			break;

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9dbe6:	79fb      	ldrb	r3, [r7, #7]
   9dbe8:	2b00      	cmp	r3, #0
   9dbea:	d013      	beq.n	9dc14 <CL_DisinfAlarmActon+0x210>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9dbec:	79fb      	ldrb	r3, [r7, #7]
   9dbee:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9dbf0:	2301      	movs	r3, #1
   9dbf2:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9dbf4:	2302      	movs	r3, #2
   9dbf6:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9dbf8:	2307      	movs	r3, #7
   9dbfa:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9dbfc:	f107 0108 	add.w	r1, r7, #8
   9dc00:	7bfb      	ldrb	r3, [r7, #15]
   9dc02:	2203      	movs	r2, #3
   9dc04:	4618      	mov	r0, r3
   9dc06:	4b0b      	ldr	r3, [pc, #44]	; (9dc34 <CL_DisinfAlarmActon+0x230>)
   9dc08:	4798      	blx	r3
   9dc0a:	4603      	mov	r3, r0
   9dc0c:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9dc0e:	200a      	movs	r0, #10
   9dc10:	4b09      	ldr	r3, [pc, #36]	; (9dc38 <CL_DisinfAlarmActon+0x234>)
   9dc12:	4798      	blx	r3
		 }
	return CL_OK;		
   9dc14:	2300      	movs	r3, #0
}
   9dc16:	4618      	mov	r0, r3
   9dc18:	3718      	adds	r7, #24
   9dc1a:	46bd      	mov	sp, r7
   9dc1c:	bd80      	pop	{r7, pc}
   9dc1e:	bf00      	nop
   9dc20:	20071bd7 	.word	0x20071bd7
   9dc24:	00099d01 	.word	0x00099d01
   9dc28:	00099d3d 	.word	0x00099d3d
   9dc2c:	0009d735 	.word	0x0009d735
   9dc30:	00099d15 	.word	0x00099d15
   9dc34:	0009b805 	.word	0x0009b805
   9dc38:	00093009 	.word	0x00093009

0009dc3c <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9dc3c:	b580      	push	{r7, lr}
   9dc3e:	b082      	sub	sp, #8
   9dc40:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9dc42:	2300      	movs	r3, #0
   9dc44:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9dc46:	2351      	movs	r3, #81	; 0x51
   9dc48:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9dc4a:	4b2d      	ldr	r3, [pc, #180]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc4c:	2200      	movs	r2, #0
   9dc4e:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9dc50:	4b2b      	ldr	r3, [pc, #172]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc52:	2200      	movs	r2, #0
   9dc54:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9dc56:	2029      	movs	r0, #41	; 0x29
   9dc58:	4b2a      	ldr	r3, [pc, #168]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dc5a:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9dc5c:	202b      	movs	r0, #43	; 0x2b
   9dc5e:	4b29      	ldr	r3, [pc, #164]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dc60:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9dc62:	4b27      	ldr	r3, [pc, #156]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc64:	2200      	movs	r2, #0
   9dc66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9dc6a:	2008      	movs	r0, #8
   9dc6c:	4b25      	ldr	r3, [pc, #148]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dc6e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9dc70:	4b23      	ldr	r3, [pc, #140]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc72:	2200      	movs	r2, #0
   9dc74:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9dc78:	4b21      	ldr	r3, [pc, #132]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc7a:	2200      	movs	r2, #0
   9dc7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9dc80:	2015      	movs	r0, #21
   9dc82:	4b20      	ldr	r3, [pc, #128]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dc84:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9dc86:	2016      	movs	r0, #22
   9dc88:	4b1e      	ldr	r3, [pc, #120]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dc8a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9dc8c:	4b1c      	ldr	r3, [pc, #112]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc8e:	2200      	movs	r2, #0
   9dc90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9dc94:	4b1a      	ldr	r3, [pc, #104]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dc96:	2200      	movs	r2, #0
   9dc98:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9dc9c:	2017      	movs	r0, #23
   9dc9e:	4b19      	ldr	r3, [pc, #100]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dca0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9dca2:	2018      	movs	r0, #24
   9dca4:	4b17      	ldr	r3, [pc, #92]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dca6:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9dca8:	4b15      	ldr	r3, [pc, #84]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dcaa:	2200      	movs	r2, #0
   9dcac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9dcb0:	4b13      	ldr	r3, [pc, #76]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dcb2:	2200      	movs	r2, #0
   9dcb4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9dcb8:	2028      	movs	r0, #40	; 0x28
   9dcba:	4b12      	ldr	r3, [pc, #72]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcbc:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9dcbe:	2027      	movs	r0, #39	; 0x27
   9dcc0:	4b10      	ldr	r3, [pc, #64]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcc2:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9dcc4:	4b0e      	ldr	r3, [pc, #56]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dcc6:	2200      	movs	r2, #0
   9dcc8:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9dcca:	2011      	movs	r0, #17
   9dccc:	4b0d      	ldr	r3, [pc, #52]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcce:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9dcd0:	4b0b      	ldr	r3, [pc, #44]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dcd2:	2200      	movs	r2, #0
   9dcd4:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9dcd6:	2003      	movs	r0, #3
   9dcd8:	4b0a      	ldr	r3, [pc, #40]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcda:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9dcdc:	2005      	movs	r0, #5
   9dcde:	4b09      	ldr	r3, [pc, #36]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dce0:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9dce2:	4b07      	ldr	r3, [pc, #28]	; (9dd00 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dce4:	2200      	movs	r2, #0
   9dce6:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9dce8:	2004      	movs	r0, #4
   9dcea:	4b06      	ldr	r3, [pc, #24]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcec:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9dcee:	2006      	movs	r0, #6
   9dcf0:	4b04      	ldr	r3, [pc, #16]	; (9dd04 <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dcf2:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9dcf4:	79fb      	ldrb	r3, [r7, #7]
}
   9dcf6:	4618      	mov	r0, r3
   9dcf8:	3708      	adds	r7, #8
   9dcfa:	46bd      	mov	sp, r7
   9dcfc:	bd80      	pop	{r7, pc}
   9dcfe:	bf00      	nop
   9dd00:	20070b78 	.word	0x20070b78
   9dd04:	00082ed5 	.word	0x00082ed5

0009dd08 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9dd08:	b5f0      	push	{r4, r5, r6, r7, lr}
   9dd0a:	b08b      	sub	sp, #44	; 0x2c
   9dd0c:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9dd0e:	2300      	movs	r3, #0
   9dd10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9dd14:	2300      	movs	r3, #0
   9dd16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9dd1a:	463b      	mov	r3, r7
   9dd1c:	2200      	movs	r2, #0
   9dd1e:	601a      	str	r2, [r3, #0]
   9dd20:	605a      	str	r2, [r3, #4]
   9dd22:	609a      	str	r2, [r3, #8]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9dd24:	4bac      	ldr	r3, [pc, #688]	; (9dfd8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9dd26:	681b      	ldr	r3, [r3, #0]
   9dd28:	3301      	adds	r3, #1
   9dd2a:	4aab      	ldr	r2, [pc, #684]	; (9dfd8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9dd2c:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9dd2e:	4baa      	ldr	r3, [pc, #680]	; (9dfd8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9dd30:	681b      	ldr	r3, [r3, #0]
   9dd32:	2b04      	cmp	r3, #4
   9dd34:	f240 8143 	bls.w	9dfbe <Cl_Disinf_SendDisinfStateData+0x2b6>
	{
		return;
	}
	else
	{
		timecount = 0;
   9dd38:	4ba7      	ldr	r3, [pc, #668]	; (9dfd8 <Cl_Disinf_SendDisinfStateData+0x2d0>)
   9dd3a:	2200      	movs	r2, #0
   9dd3c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9dd3e:	230b      	movs	r3, #11
   9dd40:	703b      	strb	r3, [r7, #0]
	count++;
   9dd42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9dd46:	3301      	adds	r3, #1
   9dd48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9dd4c:	f107 030e 	add.w	r3, r7, #14
   9dd50:	4619      	mov	r1, r3
   9dd52:	2014      	movs	r0, #20
   9dd54:	4ba1      	ldr	r3, [pc, #644]	; (9dfdc <Cl_Disinf_SendDisinfStateData+0x2d4>)
   9dd56:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9dd58:	2300      	movs	r3, #0
   9dd5a:	613b      	str	r3, [r7, #16]
// 			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
// //			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
// //			temp1 = temp1 - 3.1 -2 ;										// sensor offset
// //			avgtmp3 =(avgtmp3*5 + temp1)/6;
// 			avgtmp3 = (res_temp_value- 0.4)/10;
			temp1 = (float)temp/100;
   9dd5c:	89fa      	ldrh	r2, [r7, #14]
   9dd5e:	4ba0      	ldr	r3, [pc, #640]	; (9dfe0 <Cl_Disinf_SendDisinfStateData+0x2d8>)
   9dd60:	4610      	mov	r0, r2
   9dd62:	4798      	blx	r3
   9dd64:	4602      	mov	r2, r0
   9dd66:	4b9f      	ldr	r3, [pc, #636]	; (9dfe4 <Cl_Disinf_SendDisinfStateData+0x2dc>)
   9dd68:	499f      	ldr	r1, [pc, #636]	; (9dfe8 <Cl_Disinf_SendDisinfStateData+0x2e0>)
   9dd6a:	4610      	mov	r0, r2
   9dd6c:	4798      	blx	r3
   9dd6e:	4603      	mov	r3, r0
   9dd70:	623b      	str	r3, [r7, #32]
			avgtmp3 = temp1;
   9dd72:	4a9e      	ldr	r2, [pc, #632]	; (9dfec <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9dd74:	6a3b      	ldr	r3, [r7, #32]
   9dd76:	6013      	str	r3, [r2, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9dd78:	f107 030e 	add.w	r3, r7, #14
   9dd7c:	4619      	mov	r1, r3
   9dd7e:	2007      	movs	r0, #7
   9dd80:	4b96      	ldr	r3, [pc, #600]	; (9dfdc <Cl_Disinf_SendDisinfStateData+0x2d4>)
   9dd82:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9dd84:	f04f 0300 	mov.w	r3, #0
   9dd88:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9dd8a:	f04f 0300 	mov.w	r3, #0
   9dd8e:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9dd90:	89fb      	ldrh	r3, [r7, #14]
   9dd92:	461a      	mov	r2, r3
   9dd94:	4b96      	ldr	r3, [pc, #600]	; (9dff0 <Cl_Disinf_SendDisinfStateData+0x2e8>)
   9dd96:	4610      	mov	r0, r2
   9dd98:	4798      	blx	r3
   9dd9a:	4c96      	ldr	r4, [pc, #600]	; (9dff4 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9dd9c:	a38a      	add	r3, pc, #552	; (adr r3, 9dfc8 <Cl_Disinf_SendDisinfStateData+0x2c0>)
   9dd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9dda2:	47a0      	blx	r4
   9dda4:	4603      	mov	r3, r0
   9dda6:	460c      	mov	r4, r1
   9dda8:	4619      	mov	r1, r3
   9ddaa:	4622      	mov	r2, r4
   9ddac:	4b92      	ldr	r3, [pc, #584]	; (9dff8 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   9ddae:	4608      	mov	r0, r1
   9ddb0:	4611      	mov	r1, r2
   9ddb2:	4798      	blx	r3
   9ddb4:	4603      	mov	r3, r0
   9ddb6:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9ddb8:	4b90      	ldr	r3, [pc, #576]	; (9dffc <Cl_Disinf_SendDisinfStateData+0x2f4>)
   9ddba:	4991      	ldr	r1, [pc, #580]	; (9e000 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   9ddbc:	69b8      	ldr	r0, [r7, #24]
   9ddbe:	4798      	blx	r3
   9ddc0:	4603      	mov	r3, r0
   9ddc2:	2b00      	cmp	r3, #0
   9ddc4:	f000 8088 	beq.w	9ded8 <Cl_Disinf_SendDisinfStateData+0x1d0>
					{
			calibration_cond(temp2);
   9ddc8:	69b8      	ldr	r0, [r7, #24]
   9ddca:	4b8e      	ldr	r3, [pc, #568]	; (9e004 <Cl_Disinf_SendDisinfStateData+0x2fc>)
   9ddcc:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9ddce:	4b8e      	ldr	r3, [pc, #568]	; (9e008 <Cl_Disinf_SendDisinfStateData+0x300>)
   9ddd0:	681a      	ldr	r2, [r3, #0]
   9ddd2:	4b8e      	ldr	r3, [pc, #568]	; (9e00c <Cl_Disinf_SendDisinfStateData+0x304>)
   9ddd4:	498e      	ldr	r1, [pc, #568]	; (9e010 <Cl_Disinf_SendDisinfStateData+0x308>)
   9ddd6:	4610      	mov	r0, r2
   9ddd8:	4798      	blx	r3
   9ddda:	4603      	mov	r3, r0
   9dddc:	4618      	mov	r0, r3
   9ddde:	4b8d      	ldr	r3, [pc, #564]	; (9e014 <Cl_Disinf_SendDisinfStateData+0x30c>)
   9dde0:	681a      	ldr	r2, [r3, #0]
   9dde2:	4b8d      	ldr	r3, [pc, #564]	; (9e018 <Cl_Disinf_SendDisinfStateData+0x310>)
   9dde4:	4611      	mov	r1, r2
   9dde6:	4798      	blx	r3
   9dde8:	4603      	mov	r3, r0
   9ddea:	461a      	mov	r2, r3
   9ddec:	4b7d      	ldr	r3, [pc, #500]	; (9dfe4 <Cl_Disinf_SendDisinfStateData+0x2dc>)
   9ddee:	498b      	ldr	r1, [pc, #556]	; (9e01c <Cl_Disinf_SendDisinfStateData+0x314>)
   9ddf0:	4610      	mov	r0, r2
   9ddf2:	4798      	blx	r3
   9ddf4:	4603      	mov	r3, r0
   9ddf6:	461a      	mov	r2, r3
   9ddf8:	4b83      	ldr	r3, [pc, #524]	; (9e008 <Cl_Disinf_SendDisinfStateData+0x300>)
   9ddfa:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9ddfc:	4b82      	ldr	r3, [pc, #520]	; (9e008 <Cl_Disinf_SendDisinfStateData+0x300>)
   9ddfe:	681a      	ldr	r2, [r3, #0]
   9de00:	4b87      	ldr	r3, [pc, #540]	; (9e020 <Cl_Disinf_SendDisinfStateData+0x318>)
   9de02:	4610      	mov	r0, r2
   9de04:	4798      	blx	r3
   9de06:	4605      	mov	r5, r0
   9de08:	460e      	mov	r6, r1
   9de0a:	4b78      	ldr	r3, [pc, #480]	; (9dfec <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9de0c:	681a      	ldr	r2, [r3, #0]
   9de0e:	4b84      	ldr	r3, [pc, #528]	; (9e020 <Cl_Disinf_SendDisinfStateData+0x318>)
   9de10:	4610      	mov	r0, r2
   9de12:	4798      	blx	r3
   9de14:	4c83      	ldr	r4, [pc, #524]	; (9e024 <Cl_Disinf_SendDisinfStateData+0x31c>)
   9de16:	f04f 0200 	mov.w	r2, #0
   9de1a:	4b83      	ldr	r3, [pc, #524]	; (9e028 <Cl_Disinf_SendDisinfStateData+0x320>)
   9de1c:	47a0      	blx	r4
   9de1e:	4603      	mov	r3, r0
   9de20:	460c      	mov	r4, r1
   9de22:	4618      	mov	r0, r3
   9de24:	4621      	mov	r1, r4
   9de26:	4c73      	ldr	r4, [pc, #460]	; (9dff4 <Cl_Disinf_SendDisinfStateData+0x2ec>)
   9de28:	a369      	add	r3, pc, #420	; (adr r3, 9dfd0 <Cl_Disinf_SendDisinfStateData+0x2c8>)
   9de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9de2e:	47a0      	blx	r4
   9de30:	4603      	mov	r3, r0
   9de32:	460c      	mov	r4, r1
   9de34:	4618      	mov	r0, r3
   9de36:	4621      	mov	r1, r4
   9de38:	4c7c      	ldr	r4, [pc, #496]	; (9e02c <Cl_Disinf_SendDisinfStateData+0x324>)
   9de3a:	f04f 0200 	mov.w	r2, #0
   9de3e:	4b7c      	ldr	r3, [pc, #496]	; (9e030 <Cl_Disinf_SendDisinfStateData+0x328>)
   9de40:	47a0      	blx	r4
   9de42:	4603      	mov	r3, r0
   9de44:	460c      	mov	r4, r1
   9de46:	461a      	mov	r2, r3
   9de48:	4623      	mov	r3, r4
   9de4a:	4c7a      	ldr	r4, [pc, #488]	; (9e034 <Cl_Disinf_SendDisinfStateData+0x32c>)
   9de4c:	4628      	mov	r0, r5
   9de4e:	4631      	mov	r1, r6
   9de50:	47a0      	blx	r4
   9de52:	4603      	mov	r3, r0
   9de54:	460c      	mov	r4, r1
   9de56:	4619      	mov	r1, r3
   9de58:	4622      	mov	r2, r4
   9de5a:	4b67      	ldr	r3, [pc, #412]	; (9dff8 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   9de5c:	4608      	mov	r0, r1
   9de5e:	4611      	mov	r1, r2
   9de60:	4798      	blx	r3
   9de62:	4603      	mov	r3, r0
   9de64:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9de66:	4b5f      	ldr	r3, [pc, #380]	; (9dfe4 <Cl_Disinf_SendDisinfStateData+0x2dc>)
   9de68:	4973      	ldr	r1, [pc, #460]	; (9e038 <Cl_Disinf_SendDisinfStateData+0x330>)
   9de6a:	69f8      	ldr	r0, [r7, #28]
   9de6c:	4798      	blx	r3
   9de6e:	4603      	mov	r3, r0
   9de70:	461a      	mov	r2, r3
   9de72:	4b72      	ldr	r3, [pc, #456]	; (9e03c <Cl_Disinf_SendDisinfStateData+0x334>)
   9de74:	4610      	mov	r0, r2
   9de76:	4798      	blx	r3
   9de78:	4603      	mov	r3, r0
   9de7a:	b29b      	uxth	r3, r3
   9de7c:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9de7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9de82:	1c5a      	adds	r2, r3, #1
   9de84:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9de88:	7c3a      	ldrb	r2, [r7, #16]
   9de8a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9de8e:	440b      	add	r3, r1
   9de90:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9de94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9de98:	1c5a      	adds	r2, r3, #1
   9de9a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9de9e:	7c7a      	ldrb	r2, [r7, #17]
   9dea0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9dea4:	440b      	add	r3, r1
   9dea6:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9deaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9deae:	1c5a      	adds	r2, r3, #1
   9deb0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9deb4:	7cba      	ldrb	r2, [r7, #18]
   9deb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9deba:	440b      	add	r3, r1
   9debc:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9dec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9dec4:	1c5a      	adds	r2, r3, #1
   9dec6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9deca:	7cfa      	ldrb	r2, [r7, #19]
   9decc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9ded0:	440b      	add	r3, r1
   9ded2:	f803 2c28 	strb.w	r2, [r3, #-40]
   9ded6:	e02d      	b.n	9df34 <Cl_Disinf_SendDisinfStateData+0x22c>
					}
		else
					{
			data.Twobyte = 0;
   9ded8:	2300      	movs	r3, #0
   9deda:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9dedc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9dee0:	1c5a      	adds	r2, r3, #1
   9dee2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9dee6:	7c3a      	ldrb	r2, [r7, #16]
   9dee8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9deec:	440b      	add	r3, r1
   9deee:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9def2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9def6:	1c5a      	adds	r2, r3, #1
   9def8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9defc:	7c7a      	ldrb	r2, [r7, #17]
   9defe:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df02:	440b      	add	r3, r1
   9df04:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9df08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df0c:	1c5a      	adds	r2, r3, #1
   9df0e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df12:	7cba      	ldrb	r2, [r7, #18]
   9df14:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df18:	440b      	add	r3, r1
   9df1a:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9df1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df22:	1c5a      	adds	r2, r3, #1
   9df24:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df28:	7cfa      	ldrb	r2, [r7, #19]
   9df2a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df2e:	440b      	add	r3, r1
   9df30:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9df34:	4b2d      	ldr	r3, [pc, #180]	; (9dfec <Cl_Disinf_SendDisinfStateData+0x2e4>)
   9df36:	681a      	ldr	r2, [r3, #0]
   9df38:	4b34      	ldr	r3, [pc, #208]	; (9e00c <Cl_Disinf_SendDisinfStateData+0x304>)
   9df3a:	493f      	ldr	r1, [pc, #252]	; (9e038 <Cl_Disinf_SendDisinfStateData+0x330>)
   9df3c:	4610      	mov	r0, r2
   9df3e:	4798      	blx	r3
   9df40:	4603      	mov	r3, r0
   9df42:	461a      	mov	r2, r3
   9df44:	4b3d      	ldr	r3, [pc, #244]	; (9e03c <Cl_Disinf_SendDisinfStateData+0x334>)
   9df46:	4610      	mov	r0, r2
   9df48:	4798      	blx	r3
   9df4a:	4603      	mov	r3, r0
   9df4c:	b29b      	uxth	r3, r3
   9df4e:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9df50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df54:	1c5a      	adds	r2, r3, #1
   9df56:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df5a:	7c3a      	ldrb	r2, [r7, #16]
   9df5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df60:	440b      	add	r3, r1
   9df62:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9df66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df6a:	1c5a      	adds	r2, r3, #1
   9df6c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df70:	7c7a      	ldrb	r2, [r7, #17]
   9df72:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df76:	440b      	add	r3, r1
   9df78:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df80:	1c5a      	adds	r2, r3, #1
   9df82:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df86:	7cba      	ldrb	r2, [r7, #18]
   9df88:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9df8c:	440b      	add	r3, r1
   9df8e:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9df92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9df96:	1c5a      	adds	r2, r3, #1
   9df98:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9df9c:	7cfa      	ldrb	r2, [r7, #19]
   9df9e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9dfa2:	440b      	add	r3, r1
   9dfa4:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9dfa8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   9dfac:	463b      	mov	r3, r7
   9dfae:	4619      	mov	r1, r3
   9dfb0:	202a      	movs	r0, #42	; 0x2a
   9dfb2:	4b23      	ldr	r3, [pc, #140]	; (9e040 <Cl_Disinf_SendDisinfStateData+0x338>)
   9dfb4:	4798      	blx	r3
   9dfb6:	4603      	mov	r3, r0
   9dfb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9dfbc:	e000      	b.n	9dfc0 <Cl_Disinf_SendDisinfStateData+0x2b8>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   9dfbe:	bf00      	nop

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
	
	
	}
   9dfc0:	4618      	mov	r0, r3
   9dfc2:	372c      	adds	r7, #44	; 0x2c
   9dfc4:	46bd      	mov	sp, r7
   9dfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   9dfc8:	58e21965 	.word	0x58e21965
   9dfcc:	3fe9b717 	.word	0x3fe9b717
   9dfd0:	47ae147b 	.word	0x47ae147b
   9dfd4:	3f947ae1 	.word	0x3f947ae1
   9dfd8:	20071c0c 	.word	0x20071c0c
   9dfdc:	0008e6a1 	.word	0x0008e6a1
   9dfe0:	000a64e1 	.word	0x000a64e1
   9dfe4:	000a66f9 	.word	0x000a66f9
   9dfe8:	42c80000 	.word	0x42c80000
   9dfec:	20071c10 	.word	0x20071c10
   9dff0:	000a5c45 	.word	0x000a5c45
   9dff4:	000a5d11 	.word	0x000a5d11
   9dff8:	000a62d5 	.word	0x000a62d5
   9dffc:	000a6909 	.word	0x000a6909
   9e000:	44160000 	.word	0x44160000
   9e004:	000846ed 	.word	0x000846ed
   9e008:	20071c14 	.word	0x20071c14
   9e00c:	000a6591 	.word	0x000a6591
   9e010:	40a00000 	.word	0x40a00000
   9e014:	2007178c 	.word	0x2007178c
   9e018:	000a6381 	.word	0x000a6381
   9e01c:	40c00000 	.word	0x40c00000
   9e020:	000a5c69 	.word	0x000a5c69
   9e024:	000a59a9 	.word	0x000a59a9
   9e028:	40390000 	.word	0x40390000
   9e02c:	000a59ad 	.word	0x000a59ad
   9e030:	3ff00000 	.word	0x3ff00000
   9e034:	000a5f65 	.word	0x000a5f65
   9e038:	41200000 	.word	0x41200000
   9e03c:	000a6969 	.word	0x000a6969
   9e040:	0009b805 	.word	0x0009b805

0009e044 <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9e044:	b580      	push	{r7, lr}
   9e046:	b082      	sub	sp, #8
   9e048:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9e04a:	2300      	movs	r3, #0
   9e04c:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9e04e:	4b0b      	ldr	r3, [pc, #44]	; (9e07c <UpdateDisinfMinuteTick+0x38>)
   9e050:	2200      	movs	r2, #0
   9e052:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9e054:	4b0a      	ldr	r3, [pc, #40]	; (9e080 <UpdateDisinfMinuteTick+0x3c>)
   9e056:	681b      	ldr	r3, [r3, #0]
   9e058:	3301      	adds	r3, #1
   9e05a:	4a09      	ldr	r2, [pc, #36]	; (9e080 <UpdateDisinfMinuteTick+0x3c>)
   9e05c:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9e05e:	4b09      	ldr	r3, [pc, #36]	; (9e084 <UpdateDisinfMinuteTick+0x40>)
   9e060:	681b      	ldr	r3, [r3, #0]
   9e062:	3301      	adds	r3, #1
   9e064:	4a07      	ldr	r2, [pc, #28]	; (9e084 <UpdateDisinfMinuteTick+0x40>)
   9e066:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9e068:	4b07      	ldr	r3, [pc, #28]	; (9e088 <UpdateDisinfMinuteTick+0x44>)
   9e06a:	4798      	blx	r3
   9e06c:	4603      	mov	r3, r0
   9e06e:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9e070:	79fb      	ldrb	r3, [r7, #7]
	}
   9e072:	4618      	mov	r0, r3
   9e074:	3708      	adds	r7, #8
   9e076:	46bd      	mov	sp, r7
   9e078:	bd80      	pop	{r7, pc}
   9e07a:	bf00      	nop
   9e07c:	20071bd8 	.word	0x20071bd8
   9e080:	20071bdc 	.word	0x20071bdc
   9e084:	20071bf0 	.word	0x20071bf0
   9e088:	0009d889 	.word	0x0009d889

0009e08c <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9e08c:	b580      	push	{r7, lr}
   9e08e:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9e090:	4b2f      	ldr	r3, [pc, #188]	; (9e150 <Cl_dprep_init+0xc4>)
   9e092:	2200      	movs	r2, #0
   9e094:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9e096:	4b2f      	ldr	r3, [pc, #188]	; (9e154 <Cl_dprep_init+0xc8>)
   9e098:	2200      	movs	r2, #0
   9e09a:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9e09c:	4b2e      	ldr	r3, [pc, #184]	; (9e158 <Cl_dprep_init+0xcc>)
   9e09e:	2200      	movs	r2, #0
   9e0a0:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9e0a2:	4b2e      	ldr	r3, [pc, #184]	; (9e15c <Cl_dprep_init+0xd0>)
   9e0a4:	2200      	movs	r2, #0
   9e0a6:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9e0a8:	4b2d      	ldr	r3, [pc, #180]	; (9e160 <Cl_dprep_init+0xd4>)
   9e0aa:	2200      	movs	r2, #0
   9e0ac:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9e0ae:	4b2d      	ldr	r3, [pc, #180]	; (9e164 <Cl_dprep_init+0xd8>)
   9e0b0:	2200      	movs	r2, #0
   9e0b2:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9e0b4:	4b2c      	ldr	r3, [pc, #176]	; (9e168 <Cl_dprep_init+0xdc>)
   9e0b6:	2200      	movs	r2, #0
   9e0b8:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9e0ba:	4b2c      	ldr	r3, [pc, #176]	; (9e16c <Cl_dprep_init+0xe0>)
   9e0bc:	2200      	movs	r2, #0
   9e0be:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9e0c0:	4b2b      	ldr	r3, [pc, #172]	; (9e170 <Cl_dprep_init+0xe4>)
   9e0c2:	2200      	movs	r2, #0
   9e0c4:	801a      	strh	r2, [r3, #0]

	Cl_Dprep_Prime_secondscounter = 0;
   9e0c6:	4b2b      	ldr	r3, [pc, #172]	; (9e174 <Cl_dprep_init+0xe8>)
   9e0c8:	2200      	movs	r2, #0
   9e0ca:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9e0cc:	4b2a      	ldr	r3, [pc, #168]	; (9e178 <Cl_dprep_init+0xec>)
   9e0ce:	2200      	movs	r2, #0
   9e0d0:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9e0d2:	4b2a      	ldr	r3, [pc, #168]	; (9e17c <Cl_dprep_init+0xf0>)
   9e0d4:	2200      	movs	r2, #0
   9e0d6:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9e0d8:	4b29      	ldr	r3, [pc, #164]	; (9e180 <Cl_dprep_init+0xf4>)
   9e0da:	2200      	movs	r2, #0
   9e0dc:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9e0de:	4b29      	ldr	r3, [pc, #164]	; (9e184 <Cl_dprep_init+0xf8>)
   9e0e0:	2200      	movs	r2, #0
   9e0e2:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9e0e4:	4b28      	ldr	r3, [pc, #160]	; (9e188 <Cl_dprep_init+0xfc>)
   9e0e6:	2200      	movs	r2, #0
   9e0e8:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9e0ea:	4b28      	ldr	r3, [pc, #160]	; (9e18c <Cl_dprep_init+0x100>)
   9e0ec:	2200      	movs	r2, #0
   9e0ee:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9e0f0:	4b27      	ldr	r3, [pc, #156]	; (9e190 <Cl_dprep_init+0x104>)
   9e0f2:	2200      	movs	r2, #0
   9e0f4:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9e0f6:	4b27      	ldr	r3, [pc, #156]	; (9e194 <Cl_dprep_init+0x108>)
   9e0f8:	f04f 0200 	mov.w	r2, #0
   9e0fc:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9e0fe:	4b26      	ldr	r3, [pc, #152]	; (9e198 <Cl_dprep_init+0x10c>)
   9e100:	2200      	movs	r2, #0
   9e102:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9e104:	4b25      	ldr	r3, [pc, #148]	; (9e19c <Cl_dprep_init+0x110>)
   9e106:	2200      	movs	r2, #0
   9e108:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9e10a:	4b25      	ldr	r3, [pc, #148]	; (9e1a0 <Cl_dprep_init+0x114>)
   9e10c:	2200      	movs	r2, #0
   9e10e:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9e110:	4b24      	ldr	r3, [pc, #144]	; (9e1a4 <Cl_dprep_init+0x118>)
   9e112:	2200      	movs	r2, #0
   9e114:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9e116:	4b24      	ldr	r3, [pc, #144]	; (9e1a8 <Cl_dprep_init+0x11c>)
   9e118:	2200      	movs	r2, #0
   9e11a:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9e11c:	4b23      	ldr	r3, [pc, #140]	; (9e1ac <Cl_dprep_init+0x120>)
   9e11e:	2200      	movs	r2, #0
   9e120:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9e122:	4b23      	ldr	r3, [pc, #140]	; (9e1b0 <Cl_dprep_init+0x124>)
   9e124:	2200      	movs	r2, #0
   9e126:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9e128:	4b22      	ldr	r3, [pc, #136]	; (9e1b4 <Cl_dprep_init+0x128>)
   9e12a:	2200      	movs	r2, #0
   9e12c:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9e12e:	4b22      	ldr	r3, [pc, #136]	; (9e1b8 <Cl_dprep_init+0x12c>)
   9e130:	2200      	movs	r2, #0
   9e132:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9e134:	4b21      	ldr	r3, [pc, #132]	; (9e1bc <Cl_dprep_init+0x130>)
   9e136:	2200      	movs	r2, #0
   9e138:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9e13a:	4b21      	ldr	r3, [pc, #132]	; (9e1c0 <Cl_dprep_init+0x134>)
   9e13c:	2200      	movs	r2, #0
   9e13e:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9e140:	4b20      	ldr	r3, [pc, #128]	; (9e1c4 <Cl_dprep_init+0x138>)
   9e142:	2200      	movs	r2, #0
   9e144:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9e146:	4b20      	ldr	r3, [pc, #128]	; (9e1c8 <Cl_dprep_init+0x13c>)
   9e148:	4798      	blx	r3

	 return CL_OK;
   9e14a:	2300      	movs	r3, #0
 }
   9e14c:	4618      	mov	r0, r3
   9e14e:	bd80      	pop	{r7, pc}
   9e150:	20071c28 	.word	0x20071c28
   9e154:	20071c2c 	.word	0x20071c2c
   9e158:	20071c30 	.word	0x20071c30
   9e15c:	20071c34 	.word	0x20071c34
   9e160:	20071c38 	.word	0x20071c38
   9e164:	20071c3c 	.word	0x20071c3c
   9e168:	20071c3e 	.word	0x20071c3e
   9e16c:	20071c40 	.word	0x20071c40
   9e170:	20071c42 	.word	0x20071c42
   9e174:	20071c44 	.word	0x20071c44
   9e178:	20071c46 	.word	0x20071c46
   9e17c:	20071c48 	.word	0x20071c48
   9e180:	20071c4a 	.word	0x20071c4a
   9e184:	20071c4c 	.word	0x20071c4c
   9e188:	20071c4e 	.word	0x20071c4e
   9e18c:	20071c50 	.word	0x20071c50
   9e190:	20071c52 	.word	0x20071c52
   9e194:	20071c54 	.word	0x20071c54
   9e198:	20071c58 	.word	0x20071c58
   9e19c:	20071c59 	.word	0x20071c59
   9e1a0:	20071c5a 	.word	0x20071c5a
   9e1a4:	20071c5b 	.word	0x20071c5b
   9e1a8:	20071c5c 	.word	0x20071c5c
   9e1ac:	20071c5e 	.word	0x20071c5e
   9e1b0:	20071c5f 	.word	0x20071c5f
   9e1b4:	20071c61 	.word	0x20071c61
   9e1b8:	20071c19 	.word	0x20071c19
   9e1bc:	20071c1c 	.word	0x20071c1c
   9e1c0:	20071c20 	.word	0x20071c20
   9e1c4:	20071c24 	.word	0x20071c24
   9e1c8:	000883a5 	.word	0x000883a5
   9e1cc:	00000000 	.word	0x00000000

0009e1d0 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9e1d0:	b590      	push	{r4, r7, lr}
   9e1d2:	b0a9      	sub	sp, #164	; 0xa4
   9e1d4:	af00      	add	r7, sp, #0
   9e1d6:	4603      	mov	r3, r0
   9e1d8:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9e1da:	2300      	movs	r3, #0
   9e1dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9e1e0:	2300      	movs	r3, #0
   9e1e2:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e1e6:	2351      	movs	r3, #81	; 0x51
   9e1e8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	Cl_Uint8Type data = 0;
   9e1ec:	2300      	movs	r3, #0
   9e1ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	Cl_Uint8Type datasize = 0;
   9e1f2:	2300      	movs	r3, #0
   9e1f4:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9e1f8:	2300      	movs	r3, #0
   9e1fa:	673b      	str	r3, [r7, #112]	; 0x70
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9e1fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
   9e200:	2228      	movs	r2, #40	; 0x28
   9e202:	2100      	movs	r1, #0
   9e204:	4618      	mov	r0, r3
   9e206:	4bb5      	ldr	r3, [pc, #724]	; (9e4dc <Cl_dprep_controller+0x30c>)
   9e208:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9e20a:	2300      	movs	r3, #0
   9e20c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   9e210:	2300      	movs	r3, #0
   9e212:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
   9e216:	2300      	movs	r3, #0
   9e218:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   9e21c:	2300      	movs	r3, #0
   9e21e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9e222:	f04f 0300 	mov.w	r3, #0
   9e226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	Cl_Uint16Type temp = 0;
   9e22a:	2300      	movs	r3, #0
   9e22c:	863b      	strh	r3, [r7, #48]	; 0x30
	Cl_Uint16Type tempcount;
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   9e22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9e232:	2200      	movs	r2, #0
   9e234:	601a      	str	r2, [r3, #0]
   9e236:	711a      	strb	r2, [r3, #4]
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9e238:	f107 0278 	add.w	r2, r7, #120	; 0x78
   9e23c:	79fb      	ldrb	r3, [r7, #7]
   9e23e:	4611      	mov	r1, r2
   9e240:	4618      	mov	r0, r3
   9e242:	4ba7      	ldr	r3, [pc, #668]	; (9e4e0 <Cl_dprep_controller+0x310>)
   9e244:	4798      	blx	r3
	
	
	switch(cl_dprepevent)
   9e246:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e24a:	3b05      	subs	r3, #5
   9e24c:	2b57      	cmp	r3, #87	; 0x57
   9e24e:	f200 81b2 	bhi.w	9e5b6 <Cl_dprep_controller+0x3e6>
   9e252:	a201      	add	r2, pc, #4	; (adr r2, 9e258 <Cl_dprep_controller+0x88>)
   9e254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e258:	0009e3c3 	.word	0x0009e3c3
   9e25c:	0009e3db 	.word	0x0009e3db
   9e260:	0009e3f3 	.word	0x0009e3f3
   9e264:	0009e5b7 	.word	0x0009e5b7
   9e268:	0009e5b7 	.word	0x0009e5b7
   9e26c:	0009e5b7 	.word	0x0009e5b7
   9e270:	0009e5b7 	.word	0x0009e5b7
   9e274:	0009e5b7 	.word	0x0009e5b7
   9e278:	0009e5b7 	.word	0x0009e5b7
   9e27c:	0009e5b7 	.word	0x0009e5b7
   9e280:	0009e4a3 	.word	0x0009e4a3
   9e284:	0009e5b7 	.word	0x0009e5b7
   9e288:	0009e5b7 	.word	0x0009e5b7
   9e28c:	0009e5b7 	.word	0x0009e5b7
   9e290:	0009e5b7 	.word	0x0009e5b7
   9e294:	0009e5b7 	.word	0x0009e5b7
   9e298:	0009e5b7 	.word	0x0009e5b7
   9e29c:	0009e3b9 	.word	0x0009e3b9
   9e2a0:	0009e5b7 	.word	0x0009e5b7
   9e2a4:	0009e5b7 	.word	0x0009e5b7
   9e2a8:	0009e5b7 	.word	0x0009e5b7
   9e2ac:	0009e5b7 	.word	0x0009e5b7
   9e2b0:	0009e5b7 	.word	0x0009e5b7
   9e2b4:	0009e5b7 	.word	0x0009e5b7
   9e2b8:	0009e5b7 	.word	0x0009e5b7
   9e2bc:	0009e5b7 	.word	0x0009e5b7
   9e2c0:	0009e5b7 	.word	0x0009e5b7
   9e2c4:	0009e5b7 	.word	0x0009e5b7
   9e2c8:	0009e499 	.word	0x0009e499
   9e2cc:	0009e431 	.word	0x0009e431
   9e2d0:	0009e48f 	.word	0x0009e48f
   9e2d4:	0009e5b7 	.word	0x0009e5b7
   9e2d8:	0009e5b7 	.word	0x0009e5b7
   9e2dc:	0009e5b7 	.word	0x0009e5b7
   9e2e0:	0009e5b7 	.word	0x0009e5b7
   9e2e4:	0009e5b7 	.word	0x0009e5b7
   9e2e8:	0009e5b7 	.word	0x0009e5b7
   9e2ec:	0009e5b7 	.word	0x0009e5b7
   9e2f0:	0009e5b7 	.word	0x0009e5b7
   9e2f4:	0009e5b7 	.word	0x0009e5b7
   9e2f8:	0009e5b7 	.word	0x0009e5b7
   9e2fc:	0009e5b7 	.word	0x0009e5b7
   9e300:	0009e5b7 	.word	0x0009e5b7
   9e304:	0009e5b7 	.word	0x0009e5b7
   9e308:	0009e5b7 	.word	0x0009e5b7
   9e30c:	0009e5b7 	.word	0x0009e5b7
   9e310:	0009e5b7 	.word	0x0009e5b7
   9e314:	0009e5b7 	.word	0x0009e5b7
   9e318:	0009e5b7 	.word	0x0009e5b7
   9e31c:	0009e5b7 	.word	0x0009e5b7
   9e320:	0009e5b7 	.word	0x0009e5b7
   9e324:	0009e5b7 	.word	0x0009e5b7
   9e328:	0009e5b7 	.word	0x0009e5b7
   9e32c:	0009e5b7 	.word	0x0009e5b7
   9e330:	0009e5b7 	.word	0x0009e5b7
   9e334:	0009e5b7 	.word	0x0009e5b7
   9e338:	0009e5b7 	.word	0x0009e5b7
   9e33c:	0009e5b7 	.word	0x0009e5b7
   9e340:	0009e5b7 	.word	0x0009e5b7
   9e344:	0009e5b7 	.word	0x0009e5b7
   9e348:	0009e5b7 	.word	0x0009e5b7
   9e34c:	0009e5b7 	.word	0x0009e5b7
   9e350:	0009e5b7 	.word	0x0009e5b7
   9e354:	0009e5b7 	.word	0x0009e5b7
   9e358:	0009e5b7 	.word	0x0009e5b7
   9e35c:	0009e5b7 	.word	0x0009e5b7
   9e360:	0009e5b7 	.word	0x0009e5b7
   9e364:	0009e5b7 	.word	0x0009e5b7
   9e368:	0009e5b7 	.word	0x0009e5b7
   9e36c:	0009e5b7 	.word	0x0009e5b7
   9e370:	0009e5b7 	.word	0x0009e5b7
   9e374:	0009e5b7 	.word	0x0009e5b7
   9e378:	0009e5b7 	.word	0x0009e5b7
   9e37c:	0009e5b7 	.word	0x0009e5b7
   9e380:	0009e5b7 	.word	0x0009e5b7
   9e384:	0009e5b7 	.word	0x0009e5b7
   9e388:	0009e5b7 	.word	0x0009e5b7
   9e38c:	0009e5b7 	.word	0x0009e5b7
   9e390:	0009e5b7 	.word	0x0009e5b7
   9e394:	0009e5b7 	.word	0x0009e5b7
   9e398:	0009e5b7 	.word	0x0009e5b7
   9e39c:	0009e5b7 	.word	0x0009e5b7
   9e3a0:	0009e5b7 	.word	0x0009e5b7
   9e3a4:	0009e5b7 	.word	0x0009e5b7
   9e3a8:	0009e5b7 	.word	0x0009e5b7
   9e3ac:	0009e5b7 	.word	0x0009e5b7
   9e3b0:	0009e501 	.word	0x0009e501
   9e3b4:	0009e55d 	.word	0x0009e55d
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9e3b8:	4b4a      	ldr	r3, [pc, #296]	; (9e4e4 <Cl_dprep_controller+0x314>)
   9e3ba:	781a      	ldrb	r2, [r3, #0]
   9e3bc:	4b4a      	ldr	r3, [pc, #296]	; (9e4e8 <Cl_dprep_controller+0x318>)
   9e3be:	701a      	strb	r2, [r3, #0]
		break;
   9e3c0:	e104      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9e3c2:	2101      	movs	r1, #1
   9e3c4:	2001      	movs	r0, #1
   9e3c6:	4b49      	ldr	r3, [pc, #292]	; (9e4ec <Cl_dprep_controller+0x31c>)
   9e3c8:	4798      	blx	r3
   9e3ca:	4603      	mov	r3, r0
   9e3cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_START,1);
   9e3d0:	2101      	movs	r1, #1
   9e3d2:	2002      	movs	r0, #2
   9e3d4:	4b46      	ldr	r3, [pc, #280]	; (9e4f0 <Cl_dprep_controller+0x320>)
   9e3d6:	4798      	blx	r3
		break;
   9e3d8:	e0f8      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9e3da:	2100      	movs	r1, #0
   9e3dc:	2001      	movs	r0, #1
   9e3de:	4b43      	ldr	r3, [pc, #268]	; (9e4ec <Cl_dprep_controller+0x31c>)
   9e3e0:	4798      	blx	r3
   9e3e2:	4603      	mov	r3, r0
   9e3e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9e3e8:	2101      	movs	r1, #1
   9e3ea:	2004      	movs	r0, #4
   9e3ec:	4b40      	ldr	r3, [pc, #256]	; (9e4f0 <Cl_dprep_controller+0x320>)
   9e3ee:	4798      	blx	r3
		break;
   9e3f0:	e0ec      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9e3f2:	4b40      	ldr	r3, [pc, #256]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e3f4:	7e1b      	ldrb	r3, [r3, #24]
   9e3f6:	2b00      	cmp	r3, #0
   9e3f8:	f000 80df 	beq.w	9e5ba <Cl_dprep_controller+0x3ea>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e3fc:	4b3d      	ldr	r3, [pc, #244]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e3fe:	791b      	ldrb	r3, [r3, #4]
   9e400:	f887 3020 	strb.w	r3, [r7, #32]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9e404:	4b3b      	ldr	r3, [pc, #236]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e406:	795b      	ldrb	r3, [r3, #5]
   9e408:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9e40c:	4b39      	ldr	r3, [pc, #228]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e40e:	799b      	ldrb	r3, [r3, #6]
   9e410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9e414:	4b37      	ldr	r3, [pc, #220]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e416:	79db      	ldrb	r3, [r3, #7]
   9e418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9e41c:	8c3b      	ldrh	r3, [r7, #32]
   9e41e:	4619      	mov	r1, r3
   9e420:	2001      	movs	r0, #1
   9e422:	4b33      	ldr	r3, [pc, #204]	; (9e4f0 <Cl_dprep_controller+0x320>)
   9e424:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9e426:	8c3b      	ldrh	r3, [r7, #32]
   9e428:	461a      	mov	r2, r3
   9e42a:	4b33      	ldr	r3, [pc, #204]	; (9e4f8 <Cl_dprep_controller+0x328>)
   9e42c:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9e42e:	e0c4      	b.n	9e5ba <Cl_dprep_controller+0x3ea>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9e430:	4b30      	ldr	r3, [pc, #192]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e432:	7e1b      	ldrb	r3, [r3, #24]
   9e434:	2b00      	cmp	r3, #0
   9e436:	f000 80c2 	beq.w	9e5be <Cl_dprep_controller+0x3ee>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9e43a:	4b2e      	ldr	r3, [pc, #184]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e43c:	795b      	ldrb	r3, [r3, #5]
   9e43e:	773b      	strb	r3, [r7, #28]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9e440:	4b2c      	ldr	r3, [pc, #176]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e442:	799b      	ldrb	r3, [r3, #6]
   9e444:	777b      	strb	r3, [r7, #29]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9e446:	4b2b      	ldr	r3, [pc, #172]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e448:	79db      	ldrb	r3, [r3, #7]
   9e44a:	77bb      	strb	r3, [r7, #30]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9e44c:	4b29      	ldr	r3, [pc, #164]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e44e:	7a1b      	ldrb	r3, [r3, #8]
   9e450:	77fb      	strb	r3, [r7, #31]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9e452:	4b28      	ldr	r3, [pc, #160]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e454:	791b      	ldrb	r3, [r3, #4]
   9e456:	2b01      	cmp	r3, #1
   9e458:	d104      	bne.n	9e464 <Cl_dprep_controller+0x294>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9e45a:	2100      	movs	r1, #0
   9e45c:	2001      	movs	r0, #1
   9e45e:	4b27      	ldr	r3, [pc, #156]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e460:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9e462:	e0ac      	b.n	9e5be <Cl_dprep_controller+0x3ee>
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9e464:	4b23      	ldr	r3, [pc, #140]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e466:	791b      	ldrb	r3, [r3, #4]
   9e468:	2b02      	cmp	r3, #2
   9e46a:	d104      	bne.n	9e476 <Cl_dprep_controller+0x2a6>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9e46c:	2100      	movs	r1, #0
   9e46e:	2004      	movs	r0, #4
   9e470:	4b22      	ldr	r3, [pc, #136]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e472:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9e474:	e0a3      	b.n	9e5be <Cl_dprep_controller+0x3ee>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9e476:	4b1f      	ldr	r3, [pc, #124]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e478:	791b      	ldrb	r3, [r3, #4]
   9e47a:	2b00      	cmp	r3, #0
   9e47c:	f040 809f 	bne.w	9e5be <Cl_dprep_controller+0x3ee>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   9e480:	4b1d      	ldr	r3, [pc, #116]	; (9e4f8 <Cl_dprep_controller+0x328>)
   9e482:	69db      	ldr	r3, [r3, #28]
   9e484:	4619      	mov	r1, r3
   9e486:	200a      	movs	r0, #10
   9e488:	4b1c      	ldr	r3, [pc, #112]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e48a:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9e48c:	e097      	b.n	9e5be <Cl_dprep_controller+0x3ee>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9e48e:	2100      	movs	r1, #0
   9e490:	2009      	movs	r0, #9
   9e492:	4b1a      	ldr	r3, [pc, #104]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e494:	4798      	blx	r3
			break;
   9e496:	e099      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9e498:	2100      	movs	r1, #0
   9e49a:	2007      	movs	r0, #7
   9e49c:	4b17      	ldr	r3, [pc, #92]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e49e:	4798      	blx	r3
			break;
   9e4a0:	e094      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
// 		break;
// 		case EVENT_HEAPARIN_BOLUS:
// 		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   9e4a2:	4b14      	ldr	r3, [pc, #80]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e4a4:	7e1b      	ldrb	r3, [r3, #24]
   9e4a6:	2b00      	cmp	r3, #0
   9e4a8:	f000 808b 	beq.w	9e5c2 <Cl_dprep_controller+0x3f2>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e4ac:	4b11      	ldr	r3, [pc, #68]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e4ae:	791b      	ldrb	r3, [r3, #4]
   9e4b0:	763b      	strb	r3, [r7, #24]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9e4b2:	4b10      	ldr	r3, [pc, #64]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e4b4:	795b      	ldrb	r3, [r3, #5]
   9e4b6:	767b      	strb	r3, [r7, #25]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9e4b8:	4b0e      	ldr	r3, [pc, #56]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e4ba:	799b      	ldrb	r3, [r3, #6]
   9e4bc:	76bb      	strb	r3, [r7, #26]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9e4be:	4b0d      	ldr	r3, [pc, #52]	; (9e4f4 <Cl_dprep_controller+0x324>)
   9e4c0:	79db      	ldrb	r3, [r3, #7]
   9e4c2:	76fb      	strb	r3, [r7, #27]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   9e4c4:	8b3b      	ldrh	r3, [r7, #24]
   9e4c6:	461a      	mov	r2, r3
   9e4c8:	4b0b      	ldr	r3, [pc, #44]	; (9e4f8 <Cl_dprep_controller+0x328>)
   9e4ca:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   9e4cc:	4b0a      	ldr	r3, [pc, #40]	; (9e4f8 <Cl_dprep_controller+0x328>)
   9e4ce:	69db      	ldr	r3, [r3, #28]
   9e4d0:	4619      	mov	r1, r3
   9e4d2:	2006      	movs	r0, #6
   9e4d4:	4b09      	ldr	r3, [pc, #36]	; (9e4fc <Cl_dprep_controller+0x32c>)
   9e4d6:	4798      	blx	r3
		}
		
		break;
   9e4d8:	e073      	b.n	9e5c2 <Cl_dprep_controller+0x3f2>
   9e4da:	bf00      	nop
   9e4dc:	000a6ae5 	.word	0x000a6ae5
   9e4e0:	0009fb31 	.word	0x0009fb31
   9e4e4:	20071c5f 	.word	0x20071c5f
   9e4e8:	2007264f 	.word	0x2007264f
   9e4ec:	00082de1 	.word	0x00082de1
   9e4f0:	0009316d 	.word	0x0009316d
   9e4f4:	200723e8 	.word	0x200723e8
   9e4f8:	20072654 	.word	0x20072654
   9e4fc:	00093861 	.word	0x00093861
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   9e500:	4bcb      	ldr	r3, [pc, #812]	; (9e830 <Cl_dprep_controller+0x660>)
   9e502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e504:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   9e508:	d85d      	bhi.n	9e5c6 <Cl_dprep_controller+0x3f6>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   9e50a:	4bc9      	ldr	r3, [pc, #804]	; (9e830 <Cl_dprep_controller+0x660>)
   9e50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e50e:	330a      	adds	r3, #10
   9e510:	4ac7      	ldr	r2, [pc, #796]	; (9e830 <Cl_dprep_controller+0x660>)
   9e512:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9e514:	4bc6      	ldr	r3, [pc, #792]	; (9e830 <Cl_dprep_controller+0x660>)
   9e516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e518:	4619      	mov	r1, r3
   9e51a:	2001      	movs	r0, #1
   9e51c:	4bc5      	ldr	r3, [pc, #788]	; (9e834 <Cl_dprep_controller+0x664>)
   9e51e:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9e520:	230f      	movs	r3, #15
   9e522:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9e526:	4bc2      	ldr	r3, [pc, #776]	; (9e830 <Cl_dprep_controller+0x660>)
   9e528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e52a:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9e52c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9e530:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9e534:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9e538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9e53c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9e540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9e544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9e548:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9e54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9e550:	2205      	movs	r2, #5
   9e552:	4619      	mov	r1, r3
   9e554:	202a      	movs	r0, #42	; 0x2a
   9e556:	4bb8      	ldr	r3, [pc, #736]	; (9e838 <Cl_dprep_controller+0x668>)
   9e558:	4798      	blx	r3
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e55a:	e034      	b.n	9e5c6 <Cl_dprep_controller+0x3f6>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   9e55c:	4bb4      	ldr	r3, [pc, #720]	; (9e830 <Cl_dprep_controller+0x660>)
   9e55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e560:	2b63      	cmp	r3, #99	; 0x63
   9e562:	d932      	bls.n	9e5ca <Cl_dprep_controller+0x3fa>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   9e564:	4bb2      	ldr	r3, [pc, #712]	; (9e830 <Cl_dprep_controller+0x660>)
   9e566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e568:	3b0a      	subs	r3, #10
   9e56a:	4ab1      	ldr	r2, [pc, #708]	; (9e830 <Cl_dprep_controller+0x660>)
   9e56c:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9e56e:	4bb0      	ldr	r3, [pc, #704]	; (9e830 <Cl_dprep_controller+0x660>)
   9e570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e572:	4619      	mov	r1, r3
   9e574:	2001      	movs	r0, #1
   9e576:	4baf      	ldr	r3, [pc, #700]	; (9e834 <Cl_dprep_controller+0x664>)
   9e578:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9e57a:	230f      	movs	r3, #15
   9e57c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9e580:	4bab      	ldr	r3, [pc, #684]	; (9e830 <Cl_dprep_controller+0x660>)
   9e582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e584:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9e586:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9e58a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9e58e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9e592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9e596:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9e59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9e59e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9e5a2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9e5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9e5aa:	2205      	movs	r2, #5
   9e5ac:	4619      	mov	r1, r3
   9e5ae:	202a      	movs	r0, #42	; 0x2a
   9e5b0:	4ba1      	ldr	r3, [pc, #644]	; (9e838 <Cl_dprep_controller+0x668>)
   9e5b2:	4798      	blx	r3
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e5b4:	e009      	b.n	9e5ca <Cl_dprep_controller+0x3fa>
		

		default:break;
   9e5b6:	bf00      	nop
   9e5b8:	e008      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
		}
		
		break;
   9e5ba:	bf00      	nop
   9e5bc:	e006      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
				}
				
			}
			
			
			break;
   9e5be:	bf00      	nop
   9e5c0:	e004      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
			Treatdata[ID_heprate] = cl_temp.Twobyte;
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
		}
		
		break;
   9e5c2:	bf00      	nop
   9e5c4:	e002      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e5c6:	bf00      	nop
   9e5c8:	e000      	b.n	9e5cc <Cl_dprep_controller+0x3fc>
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e5ca:	bf00      	nop
		

		default:break;
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9e5cc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e5d0:	2b16      	cmp	r3, #22
   9e5d2:	d105      	bne.n	9e5e0 <Cl_dprep_controller+0x410>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9e5d4:	200c      	movs	r0, #12
   9e5d6:	4b99      	ldr	r3, [pc, #612]	; (9e83c <Cl_dprep_controller+0x66c>)
   9e5d8:	4798      	blx	r3
   9e5da:	4603      	mov	r3, r0
   9e5dc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9e5e0:	4b97      	ldr	r3, [pc, #604]	; (9e840 <Cl_dprep_controller+0x670>)
   9e5e2:	781b      	ldrb	r3, [r3, #0]
   9e5e4:	2b0e      	cmp	r3, #14
   9e5e6:	f201 8289 	bhi.w	9fafc <Cl_dprep_controller+0x192c>
   9e5ea:	a201      	add	r2, pc, #4	; (adr r2, 9e5f0 <Cl_dprep_controller+0x420>)
   9e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e5f0:	0009e62d 	.word	0x0009e62d
   9e5f4:	0009fafd 	.word	0x0009fafd
   9e5f8:	0009e995 	.word	0x0009e995
   9e5fc:	0009efd3 	.word	0x0009efd3
   9e600:	0009fafd 	.word	0x0009fafd
   9e604:	0009f32d 	.word	0x0009f32d
   9e608:	0009f5c1 	.word	0x0009f5c1
   9e60c:	0009f75d 	.word	0x0009f75d
   9e610:	0009f777 	.word	0x0009f777
   9e614:	0009f951 	.word	0x0009f951
   9e618:	0009fafd 	.word	0x0009fafd
   9e61c:	0009e62d 	.word	0x0009e62d
   9e620:	0009eef1 	.word	0x0009eef1
   9e624:	0009ee13 	.word	0x0009ee13
   9e628:	0009f199 	.word	0x0009f199

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9e62c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e630:	3b02      	subs	r3, #2
   9e632:	2b1d      	cmp	r3, #29
   9e634:	f200 8199 	bhi.w	9e96a <Cl_dprep_controller+0x79a>
   9e638:	a201      	add	r2, pc, #4	; (adr r2, 9e640 <Cl_dprep_controller+0x470>)
   9e63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e63e:	bf00      	nop
   9e640:	0009e905 	.word	0x0009e905
   9e644:	0009e777 	.word	0x0009e777
   9e648:	0009e6ed 	.word	0x0009e6ed
   9e64c:	0009e96b 	.word	0x0009e96b
   9e650:	0009e96b 	.word	0x0009e96b
   9e654:	0009e96b 	.word	0x0009e96b
   9e658:	0009e96b 	.word	0x0009e96b
   9e65c:	0009e96b 	.word	0x0009e96b
   9e660:	0009e945 	.word	0x0009e945
   9e664:	0009e96b 	.word	0x0009e96b
   9e668:	0009e96b 	.word	0x0009e96b
   9e66c:	0009e96b 	.word	0x0009e96b
   9e670:	0009e96b 	.word	0x0009e96b
   9e674:	0009e96b 	.word	0x0009e96b
   9e678:	0009e96b 	.word	0x0009e96b
   9e67c:	0009e96b 	.word	0x0009e96b
   9e680:	0009e96b 	.word	0x0009e96b
   9e684:	0009e96b 	.word	0x0009e96b
   9e688:	0009e96b 	.word	0x0009e96b
   9e68c:	0009e96b 	.word	0x0009e96b
   9e690:	0009e96b 	.word	0x0009e96b
   9e694:	0009e96b 	.word	0x0009e96b
   9e698:	0009e96b 	.word	0x0009e96b
   9e69c:	0009e939 	.word	0x0009e939
   9e6a0:	0009e96b 	.word	0x0009e96b
   9e6a4:	0009e96b 	.word	0x0009e96b
   9e6a8:	0009e96b 	.word	0x0009e96b
   9e6ac:	0009e91f 	.word	0x0009e91f
   9e6b0:	0009e96b 	.word	0x0009e96b
   9e6b4:	0009e6b9 	.word	0x0009e6b9
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9e6b8:	4b62      	ldr	r3, [pc, #392]	; (9e844 <Cl_dprep_controller+0x674>)
   9e6ba:	781b      	ldrb	r3, [r3, #0]
   9e6bc:	2b01      	cmp	r3, #1
   9e6be:	d108      	bne.n	9e6d2 <Cl_dprep_controller+0x502>
   9e6c0:	4b60      	ldr	r3, [pc, #384]	; (9e844 <Cl_dprep_controller+0x674>)
   9e6c2:	781b      	ldrb	r3, [r3, #0]
   9e6c4:	2b05      	cmp	r3, #5
   9e6c6:	d104      	bne.n	9e6d2 <Cl_dprep_controller+0x502>
   9e6c8:	4b5e      	ldr	r3, [pc, #376]	; (9e844 <Cl_dprep_controller+0x674>)
   9e6ca:	781b      	ldrb	r3, [r3, #0]
   9e6cc:	2b09      	cmp	r3, #9
   9e6ce:	f000 814f 	beq.w	9e970 <Cl_dprep_controller+0x7a0>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9e6d2:	2206      	movs	r2, #6
   9e6d4:	495c      	ldr	r1, [pc, #368]	; (9e848 <Cl_dprep_controller+0x678>)
   9e6d6:	2018      	movs	r0, #24
   9e6d8:	4b57      	ldr	r3, [pc, #348]	; (9e838 <Cl_dprep_controller+0x668>)
   9e6da:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9e6dc:	2100      	movs	r1, #0
   9e6de:	2005      	movs	r0, #5
   9e6e0:	4b5a      	ldr	r3, [pc, #360]	; (9e84c <Cl_dprep_controller+0x67c>)
   9e6e2:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9e6e4:	4b5a      	ldr	r3, [pc, #360]	; (9e850 <Cl_dprep_controller+0x680>)
   9e6e6:	2200      	movs	r2, #0
   9e6e8:	70da      	strb	r2, [r3, #3]
						}
				break;
   9e6ea:	e141      	b.n	9e970 <Cl_dprep_controller+0x7a0>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9e6ec:	4b59      	ldr	r3, [pc, #356]	; (9e854 <Cl_dprep_controller+0x684>)
   9e6ee:	7e1b      	ldrb	r3, [r3, #24]
   9e6f0:	2b00      	cmp	r3, #0
   9e6f2:	f000 8140 	beq.w	9e976 <Cl_dprep_controller+0x7a6>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9e6f6:	4b57      	ldr	r3, [pc, #348]	; (9e854 <Cl_dprep_controller+0x684>)
   9e6f8:	791b      	ldrb	r3, [r3, #4]
   9e6fa:	2b02      	cmp	r3, #2
   9e6fc:	d002      	beq.n	9e704 <Cl_dprep_controller+0x534>
   9e6fe:	2b04      	cmp	r3, #4
   9e700:	d01c      	beq.n	9e73c <Cl_dprep_controller+0x56c>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9e702:	e037      	b.n	9e774 <Cl_dprep_controller+0x5a4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9e704:	2316      	movs	r3, #22
   9e706:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9e70a:	2302      	movs	r3, #2
   9e70c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9e710:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9e714:	3301      	adds	r3, #1
   9e716:	4619      	mov	r1, r3
   9e718:	2002      	movs	r0, #2
   9e71a:	4b4f      	ldr	r3, [pc, #316]	; (9e858 <Cl_dprep_controller+0x688>)
   9e71c:	4798      	blx	r3
   9e71e:	4603      	mov	r3, r0
   9e720:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9e724:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9e728:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9e72c:	2202      	movs	r2, #2
   9e72e:	4618      	mov	r0, r3
   9e730:	4b41      	ldr	r3, [pc, #260]	; (9e838 <Cl_dprep_controller+0x668>)
   9e732:	4798      	blx	r3
   9e734:	4603      	mov	r3, r0
   9e736:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9e73a:	e01b      	b.n	9e774 <Cl_dprep_controller+0x5a4>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9e73c:	2316      	movs	r3, #22
   9e73e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9e742:	2304      	movs	r3, #4
   9e744:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9e748:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9e74c:	3301      	adds	r3, #1
   9e74e:	4619      	mov	r1, r3
   9e750:	2004      	movs	r0, #4
   9e752:	4b41      	ldr	r3, [pc, #260]	; (9e858 <Cl_dprep_controller+0x688>)
   9e754:	4798      	blx	r3
   9e756:	4603      	mov	r3, r0
   9e758:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9e75c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9e760:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9e764:	2202      	movs	r2, #2
   9e766:	4618      	mov	r0, r3
   9e768:	4b33      	ldr	r3, [pc, #204]	; (9e838 <Cl_dprep_controller+0x668>)
   9e76a:	4798      	blx	r3
   9e76c:	4603      	mov	r3, r0
   9e76e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9e772:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9e774:	e0ff      	b.n	9e976 <Cl_dprep_controller+0x7a6>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9e776:	4b37      	ldr	r3, [pc, #220]	; (9e854 <Cl_dprep_controller+0x684>)
   9e778:	7e1b      	ldrb	r3, [r3, #24]
   9e77a:	2b00      	cmp	r3, #0
   9e77c:	f000 80fe 	beq.w	9e97c <Cl_dprep_controller+0x7ac>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9e780:	4b34      	ldr	r3, [pc, #208]	; (9e854 <Cl_dprep_controller+0x684>)
   9e782:	795b      	ldrb	r3, [r3, #5]
   9e784:	753b      	strb	r3, [r7, #20]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9e786:	4b33      	ldr	r3, [pc, #204]	; (9e854 <Cl_dprep_controller+0x684>)
   9e788:	799b      	ldrb	r3, [r3, #6]
   9e78a:	757b      	strb	r3, [r7, #21]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9e78c:	4b31      	ldr	r3, [pc, #196]	; (9e854 <Cl_dprep_controller+0x684>)
   9e78e:	79db      	ldrb	r3, [r3, #7]
   9e790:	75bb      	strb	r3, [r7, #22]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9e792:	4b30      	ldr	r3, [pc, #192]	; (9e854 <Cl_dprep_controller+0x684>)
   9e794:	7a1b      	ldrb	r3, [r3, #8]
   9e796:	75fb      	strb	r3, [r7, #23]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9e798:	4b2e      	ldr	r3, [pc, #184]	; (9e854 <Cl_dprep_controller+0x684>)
   9e79a:	791b      	ldrb	r3, [r3, #4]
   9e79c:	3b05      	subs	r3, #5
   9e79e:	2b20      	cmp	r3, #32
   9e7a0:	f200 80ae 	bhi.w	9e900 <Cl_dprep_controller+0x730>
   9e7a4:	a201      	add	r2, pc, #4	; (adr r2, 9e7ac <Cl_dprep_controller+0x5dc>)
   9e7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e7aa:	bf00      	nop
   9e7ac:	0009e901 	.word	0x0009e901
   9e7b0:	0009e901 	.word	0x0009e901
   9e7b4:	0009e901 	.word	0x0009e901
   9e7b8:	0009e901 	.word	0x0009e901
   9e7bc:	0009e901 	.word	0x0009e901
   9e7c0:	0009e901 	.word	0x0009e901
   9e7c4:	0009e901 	.word	0x0009e901
   9e7c8:	0009e901 	.word	0x0009e901
   9e7cc:	0009e901 	.word	0x0009e901
   9e7d0:	0009e901 	.word	0x0009e901
   9e7d4:	0009e901 	.word	0x0009e901
   9e7d8:	0009e901 	.word	0x0009e901
   9e7dc:	0009e901 	.word	0x0009e901
   9e7e0:	0009e901 	.word	0x0009e901
   9e7e4:	0009e901 	.word	0x0009e901
   9e7e8:	0009e901 	.word	0x0009e901
   9e7ec:	0009e901 	.word	0x0009e901
   9e7f0:	0009e901 	.word	0x0009e901
   9e7f4:	0009e901 	.word	0x0009e901
   9e7f8:	0009e85d 	.word	0x0009e85d
   9e7fc:	0009e875 	.word	0x0009e875
   9e800:	0009e88d 	.word	0x0009e88d
   9e804:	0009e89d 	.word	0x0009e89d
   9e808:	0009e8ad 	.word	0x0009e8ad
   9e80c:	0009e8bd 	.word	0x0009e8bd
   9e810:	0009e901 	.word	0x0009e901
   9e814:	0009e901 	.word	0x0009e901
   9e818:	0009e901 	.word	0x0009e901
   9e81c:	0009e901 	.word	0x0009e901
   9e820:	0009e8cd 	.word	0x0009e8cd
   9e824:	0009e8d7 	.word	0x0009e8d7
   9e828:	0009e8e1 	.word	0x0009e8e1
   9e82c:	0009e8f1 	.word	0x0009e8f1
   9e830:	20072654 	.word	0x20072654
   9e834:	0009316d 	.word	0x0009316d
   9e838:	0009b805 	.word	0x0009b805
   9e83c:	00082ed5 	.word	0x00082ed5
   9e840:	20071c5f 	.word	0x20071c5f
   9e844:	20071984 	.word	0x20071984
   9e848:	000a8a1c 	.word	0x000a8a1c
   9e84c:	000883f1 	.word	0x000883f1
   9e850:	20070bcc 	.word	0x20070bcc
   9e854:	200723e8 	.word	0x200723e8
   9e858:	0009a331 	.word	0x0009a331
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9e85c:	697b      	ldr	r3, [r7, #20]
   9e85e:	4ab0      	ldr	r2, [pc, #704]	; (9eb20 <Cl_dprep_controller+0x950>)
   9e860:	fba2 2303 	umull	r2, r3, r2, r3
   9e864:	08da      	lsrs	r2, r3, #3
   9e866:	4baf      	ldr	r3, [pc, #700]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e868:	4610      	mov	r0, r2
   9e86a:	4798      	blx	r3
   9e86c:	4602      	mov	r2, r0
   9e86e:	4bae      	ldr	r3, [pc, #696]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e870:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9e872:	e046      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9e874:	697b      	ldr	r3, [r7, #20]
   9e876:	4aaa      	ldr	r2, [pc, #680]	; (9eb20 <Cl_dprep_controller+0x950>)
   9e878:	fba2 2303 	umull	r2, r3, r2, r3
   9e87c:	08da      	lsrs	r2, r3, #3
   9e87e:	4ba9      	ldr	r3, [pc, #676]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e880:	4610      	mov	r0, r2
   9e882:	4798      	blx	r3
   9e884:	4602      	mov	r2, r0
   9e886:	4ba8      	ldr	r3, [pc, #672]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e888:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9e88a:	e03a      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9e88c:	697a      	ldr	r2, [r7, #20]
   9e88e:	4ba5      	ldr	r3, [pc, #660]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e890:	4610      	mov	r0, r2
   9e892:	4798      	blx	r3
   9e894:	4602      	mov	r2, r0
   9e896:	4ba4      	ldr	r3, [pc, #656]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e898:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9e89a:	e032      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9e89c:	697a      	ldr	r2, [r7, #20]
   9e89e:	4ba1      	ldr	r3, [pc, #644]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e8a0:	4610      	mov	r0, r2
   9e8a2:	4798      	blx	r3
   9e8a4:	4602      	mov	r2, r0
   9e8a6:	4ba0      	ldr	r3, [pc, #640]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8a8:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9e8aa:	e02a      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9e8ac:	697a      	ldr	r2, [r7, #20]
   9e8ae:	4b9d      	ldr	r3, [pc, #628]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e8b0:	4610      	mov	r0, r2
   9e8b2:	4798      	blx	r3
   9e8b4:	4602      	mov	r2, r0
   9e8b6:	4b9c      	ldr	r3, [pc, #624]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8b8:	615a      	str	r2, [r3, #20]
										break;
   9e8ba:	e022      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9e8bc:	697a      	ldr	r2, [r7, #20]
   9e8be:	4b99      	ldr	r3, [pc, #612]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e8c0:	4610      	mov	r0, r2
   9e8c2:	4798      	blx	r3
   9e8c4:	4602      	mov	r2, r0
   9e8c6:	4b98      	ldr	r3, [pc, #608]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8c8:	611a      	str	r2, [r3, #16]
										break;
   9e8ca:	e01a      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9e8cc:	697b      	ldr	r3, [r7, #20]
   9e8ce:	b21a      	sxth	r2, r3
   9e8d0:	4b95      	ldr	r3, [pc, #596]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8d2:	801a      	strh	r2, [r3, #0]
										break;
   9e8d4:	e015      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9e8d6:	697b      	ldr	r3, [r7, #20]
   9e8d8:	b21a      	sxth	r2, r3
   9e8da:	4b93      	ldr	r3, [pc, #588]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8dc:	805a      	strh	r2, [r3, #2]
										break;
   9e8de:	e010      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9e8e0:	697a      	ldr	r2, [r7, #20]
   9e8e2:	4b90      	ldr	r3, [pc, #576]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e8e4:	4610      	mov	r0, r2
   9e8e6:	4798      	blx	r3
   9e8e8:	4602      	mov	r2, r0
   9e8ea:	4b8f      	ldr	r3, [pc, #572]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8ec:	60da      	str	r2, [r3, #12]
										break;
   9e8ee:	e008      	b.n	9e902 <Cl_dprep_controller+0x732>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9e8f0:	697a      	ldr	r2, [r7, #20]
   9e8f2:	4b8c      	ldr	r3, [pc, #560]	; (9eb24 <Cl_dprep_controller+0x954>)
   9e8f4:	4610      	mov	r0, r2
   9e8f6:	4798      	blx	r3
   9e8f8:	4602      	mov	r2, r0
   9e8fa:	4b8b      	ldr	r3, [pc, #556]	; (9eb28 <Cl_dprep_controller+0x958>)
   9e8fc:	609a      	str	r2, [r3, #8]
										break;
   9e8fe:	e000      	b.n	9e902 <Cl_dprep_controller+0x732>

									default:break;
   9e900:	bf00      	nop
								}
							}
						
	
			break;
   9e902:	e03b      	b.n	9e97c <Cl_dprep_controller+0x7ac>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9e904:	4b89      	ldr	r3, [pc, #548]	; (9eb2c <Cl_dprep_controller+0x95c>)
   9e906:	4798      	blx	r3
   9e908:	4603      	mov	r3, r0
   9e90a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9e90e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9e912:	2b03      	cmp	r3, #3
   9e914:	d135      	bne.n	9e982 <Cl_dprep_controller+0x7b2>
			{
				return Cl_dprepretcode;
   9e916:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9e91a:	f001 b8f1 	b.w	9fb00 <Cl_dprep_controller+0x1930>
			}
			break;
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9e91e:	4b83      	ldr	r3, [pc, #524]	; (9eb2c <Cl_dprep_controller+0x95c>)
   9e920:	4798      	blx	r3
   9e922:	4603      	mov	r3, r0
   9e924:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9e928:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9e92c:	2b03      	cmp	r3, #3
   9e92e:	d12b      	bne.n	9e988 <Cl_dprep_controller+0x7b8>
			{
				return Cl_dprepretcode;
   9e930:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9e934:	f001 b8e4 	b.w	9fb00 <Cl_dprep_controller+0x1930>
			}
			break;
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9e938:	4b7d      	ldr	r3, [pc, #500]	; (9eb30 <Cl_dprep_controller+0x960>)
   9e93a:	4798      	blx	r3
   9e93c:	4603      	mov	r3, r0
   9e93e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9e942:	e025      	b.n	9e990 <Cl_dprep_controller+0x7c0>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9e944:	4b7b      	ldr	r3, [pc, #492]	; (9eb34 <Cl_dprep_controller+0x964>)
   9e946:	781b      	ldrb	r3, [r3, #0]
   9e948:	2b01      	cmp	r3, #1
   9e94a:	d020      	beq.n	9e98e <Cl_dprep_controller+0x7be>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9e94c:	2206      	movs	r2, #6
   9e94e:	497a      	ldr	r1, [pc, #488]	; (9eb38 <Cl_dprep_controller+0x968>)
   9e950:	2018      	movs	r0, #24
   9e952:	4b7a      	ldr	r3, [pc, #488]	; (9eb3c <Cl_dprep_controller+0x96c>)
   9e954:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9e956:	4b7a      	ldr	r3, [pc, #488]	; (9eb40 <Cl_dprep_controller+0x970>)
   9e958:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9e95a:	2100      	movs	r1, #0
   9e95c:	2001      	movs	r0, #1
   9e95e:	4b79      	ldr	r3, [pc, #484]	; (9eb44 <Cl_dprep_controller+0x974>)
   9e960:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9e962:	4b79      	ldr	r3, [pc, #484]	; (9eb48 <Cl_dprep_controller+0x978>)
   9e964:	2200      	movs	r2, #0
   9e966:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9e968:	e011      	b.n	9e98e <Cl_dprep_controller+0x7be>
			default:
			break;
   9e96a:	bf00      	nop
   9e96c:	f001 b8c6 	b.w	9fafc <Cl_dprep_controller+0x192c>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
				break;
   9e970:	bf00      	nop
   9e972:	f001 b8c3 	b.w	9fafc <Cl_dprep_controller+0x192c>
						break;
						default:
						break;
					}
				}
			break;
   9e976:	bf00      	nop
   9e978:	f001 b8c0 	b.w	9fafc <Cl_dprep_controller+0x192c>
									default:break;
								}
							}
						
	
			break;
   9e97c:	bf00      	nop
   9e97e:	f001 b8bd 	b.w	9fafc <Cl_dprep_controller+0x192c>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9e982:	bf00      	nop
   9e984:	f001 b8ba 	b.w	9fafc <Cl_dprep_controller+0x192c>
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
			if(Cl_dprepretcode == CL_REJECTED)
			{
				return Cl_dprepretcode;
			}
			break;
   9e988:	bf00      	nop
   9e98a:	f001 b8b7 	b.w	9fafc <Cl_dprep_controller+0x192c>
				cl_dprep_activate_prime_related_alarms();
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9e98e:	bf00      	nop
			default:
			break;
		}
		break;
   9e990:	f001 b8b4 	b.w	9fafc <Cl_dprep_controller+0x192c>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9e994:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e998:	3b03      	subs	r3, #3
   9e99a:	2b20      	cmp	r3, #32
   9e99c:	f201 80a7 	bhi.w	9faee <Cl_dprep_controller+0x191e>
   9e9a0:	a201      	add	r2, pc, #4	; (adr r2, 9e9a8 <Cl_dprep_controller+0x7d8>)
   9e9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e9a6:	bf00      	nop
   9e9a8:	0009eb97 	.word	0x0009eb97
   9e9ac:	0009eacf 	.word	0x0009eacf
   9e9b0:	0009faef 	.word	0x0009faef
   9e9b4:	0009faef 	.word	0x0009faef
   9e9b8:	0009faef 	.word	0x0009faef
   9e9bc:	0009faef 	.word	0x0009faef
   9e9c0:	0009ed75 	.word	0x0009ed75
   9e9c4:	0009edc1 	.word	0x0009edc1
   9e9c8:	0009faef 	.word	0x0009faef
   9e9cc:	0009faef 	.word	0x0009faef
   9e9d0:	0009faef 	.word	0x0009faef
   9e9d4:	0009faef 	.word	0x0009faef
   9e9d8:	0009faef 	.word	0x0009faef
   9e9dc:	0009faef 	.word	0x0009faef
   9e9e0:	0009faef 	.word	0x0009faef
   9e9e4:	0009faef 	.word	0x0009faef
   9e9e8:	0009ebf5 	.word	0x0009ebf5
   9e9ec:	0009faef 	.word	0x0009faef
   9e9f0:	0009ede3 	.word	0x0009ede3
   9e9f4:	0009ec99 	.word	0x0009ec99
   9e9f8:	0009ec13 	.word	0x0009ec13
   9e9fc:	0009faef 	.word	0x0009faef
   9ea00:	0009ed81 	.word	0x0009ed81
   9ea04:	0009ed8d 	.word	0x0009ed8d
   9ea08:	0009faef 	.word	0x0009faef
   9ea0c:	0009faef 	.word	0x0009faef
   9ea10:	0009faef 	.word	0x0009faef
   9ea14:	0009ed75 	.word	0x0009ed75
   9ea18:	0009ea9b 	.word	0x0009ea9b
   9ea1c:	0009faef 	.word	0x0009faef
   9ea20:	0009ea91 	.word	0x0009ea91
   9ea24:	0009ea2d 	.word	0x0009ea2d
   9ea28:	0009ea87 	.word	0x0009ea87
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9ea2c:	4b47      	ldr	r3, [pc, #284]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea2e:	7e1b      	ldrb	r3, [r3, #24]
   9ea30:	2b00      	cmp	r3, #0
   9ea32:	f000 81d9 	beq.w	9ede8 <Cl_dprep_controller+0xc18>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ea36:	4b45      	ldr	r3, [pc, #276]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea38:	795b      	ldrb	r3, [r3, #5]
   9ea3a:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9ea3c:	4b43      	ldr	r3, [pc, #268]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea3e:	799b      	ldrb	r3, [r3, #6]
   9ea40:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ea42:	4b42      	ldr	r3, [pc, #264]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea44:	79db      	ldrb	r3, [r3, #7]
   9ea46:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ea48:	4b40      	ldr	r3, [pc, #256]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea4a:	7a1b      	ldrb	r3, [r3, #8]
   9ea4c:	74fb      	strb	r3, [r7, #19]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9ea4e:	4b3f      	ldr	r3, [pc, #252]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea50:	791b      	ldrb	r3, [r3, #4]
   9ea52:	2b01      	cmp	r3, #1
   9ea54:	d104      	bne.n	9ea60 <Cl_dprep_controller+0x890>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9ea56:	2100      	movs	r1, #0
   9ea58:	2001      	movs	r0, #1
   9ea5a:	4b3d      	ldr	r3, [pc, #244]	; (9eb50 <Cl_dprep_controller+0x980>)
   9ea5c:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ea5e:	e1c3      	b.n	9ede8 <Cl_dprep_controller+0xc18>
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9ea60:	4b3a      	ldr	r3, [pc, #232]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea62:	791b      	ldrb	r3, [r3, #4]
   9ea64:	2b02      	cmp	r3, #2
   9ea66:	d104      	bne.n	9ea72 <Cl_dprep_controller+0x8a2>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9ea68:	2100      	movs	r1, #0
   9ea6a:	2004      	movs	r0, #4
   9ea6c:	4b38      	ldr	r3, [pc, #224]	; (9eb50 <Cl_dprep_controller+0x980>)
   9ea6e:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ea70:	e1ba      	b.n	9ede8 <Cl_dprep_controller+0xc18>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9ea72:	4b36      	ldr	r3, [pc, #216]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ea74:	791b      	ldrb	r3, [r3, #4]
   9ea76:	2b00      	cmp	r3, #0
   9ea78:	f040 81b6 	bne.w	9ede8 <Cl_dprep_controller+0xc18>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9ea7c:	2100      	movs	r1, #0
   9ea7e:	200a      	movs	r0, #10
   9ea80:	4b33      	ldr	r3, [pc, #204]	; (9eb50 <Cl_dprep_controller+0x980>)
   9ea82:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9ea84:	e1b0      	b.n	9ede8 <Cl_dprep_controller+0xc18>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9ea86:	2100      	movs	r1, #0
   9ea88:	200c      	movs	r0, #12
   9ea8a:	4b31      	ldr	r3, [pc, #196]	; (9eb50 <Cl_dprep_controller+0x980>)
   9ea8c:	4798      	blx	r3
			break;
   9ea8e:	e1be      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9ea90:	2100      	movs	r1, #0
   9ea92:	2007      	movs	r0, #7
   9ea94:	4b2e      	ldr	r3, [pc, #184]	; (9eb50 <Cl_dprep_controller+0x980>)
   9ea96:	4798      	blx	r3
			break;
   9ea98:	e1b9      	b.n	9ee0e <Cl_dprep_controller+0xc3e>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9ea9a:	4b26      	ldr	r3, [pc, #152]	; (9eb34 <Cl_dprep_controller+0x964>)
   9ea9c:	781b      	ldrb	r3, [r3, #0]
   9ea9e:	2b01      	cmp	r3, #1
   9eaa0:	d108      	bne.n	9eab4 <Cl_dprep_controller+0x8e4>
   9eaa2:	4b24      	ldr	r3, [pc, #144]	; (9eb34 <Cl_dprep_controller+0x964>)
   9eaa4:	781b      	ldrb	r3, [r3, #0]
   9eaa6:	2b05      	cmp	r3, #5
   9eaa8:	d104      	bne.n	9eab4 <Cl_dprep_controller+0x8e4>
   9eaaa:	4b22      	ldr	r3, [pc, #136]	; (9eb34 <Cl_dprep_controller+0x964>)
   9eaac:	781b      	ldrb	r3, [r3, #0]
   9eaae:	2b09      	cmp	r3, #9
   9eab0:	f000 819d 	beq.w	9edee <Cl_dprep_controller+0xc1e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9eab4:	2206      	movs	r2, #6
   9eab6:	4927      	ldr	r1, [pc, #156]	; (9eb54 <Cl_dprep_controller+0x984>)
   9eab8:	2018      	movs	r0, #24
   9eaba:	4b20      	ldr	r3, [pc, #128]	; (9eb3c <Cl_dprep_controller+0x96c>)
   9eabc:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9eabe:	2100      	movs	r1, #0
   9eac0:	2005      	movs	r0, #5
   9eac2:	4b20      	ldr	r3, [pc, #128]	; (9eb44 <Cl_dprep_controller+0x974>)
   9eac4:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9eac6:	4b20      	ldr	r3, [pc, #128]	; (9eb48 <Cl_dprep_controller+0x978>)
   9eac8:	2200      	movs	r2, #0
   9eaca:	70da      	strb	r2, [r3, #3]
						}
			break;
   9eacc:	e18f      	b.n	9edee <Cl_dprep_controller+0xc1e>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9eace:	4b1f      	ldr	r3, [pc, #124]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9ead0:	7e1b      	ldrb	r3, [r3, #24]
   9ead2:	2b00      	cmp	r3, #0
   9ead4:	f000 818e 	beq.w	9edf4 <Cl_dprep_controller+0xc24>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ead8:	4b1c      	ldr	r3, [pc, #112]	; (9eb4c <Cl_dprep_controller+0x97c>)
   9eada:	791b      	ldrb	r3, [r3, #4]
   9eadc:	2b02      	cmp	r3, #2
   9eade:	d002      	beq.n	9eae6 <Cl_dprep_controller+0x916>
   9eae0:	2b04      	cmp	r3, #4
   9eae2:	d03b      	beq.n	9eb5c <Cl_dprep_controller+0x98c>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9eae4:	e056      	b.n	9eb94 <Cl_dprep_controller+0x9c4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9eae6:	2316      	movs	r3, #22
   9eae8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9eaec:	2302      	movs	r3, #2
   9eaee:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9eaf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9eaf6:	3301      	adds	r3, #1
   9eaf8:	4619      	mov	r1, r3
   9eafa:	2002      	movs	r0, #2
   9eafc:	4b16      	ldr	r3, [pc, #88]	; (9eb58 <Cl_dprep_controller+0x988>)
   9eafe:	4798      	blx	r3
   9eb00:	4603      	mov	r3, r0
   9eb02:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9eb06:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9eb0a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9eb0e:	2202      	movs	r2, #2
   9eb10:	4618      	mov	r0, r3
   9eb12:	4b0a      	ldr	r3, [pc, #40]	; (9eb3c <Cl_dprep_controller+0x96c>)
   9eb14:	4798      	blx	r3
   9eb16:	4603      	mov	r3, r0
   9eb18:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9eb1c:	e03a      	b.n	9eb94 <Cl_dprep_controller+0x9c4>
   9eb1e:	bf00      	nop
   9eb20:	cccccccd 	.word	0xcccccccd
   9eb24:	000a64e1 	.word	0x000a64e1
   9eb28:	200720f4 	.word	0x200720f4
   9eb2c:	000a1901 	.word	0x000a1901
   9eb30:	0009fe49 	.word	0x0009fe49
   9eb34:	20071984 	.word	0x20071984
   9eb38:	000a8a24 	.word	0x000a8a24
   9eb3c:	0009b805 	.word	0x0009b805
   9eb40:	00088e5d 	.word	0x00088e5d
   9eb44:	000883f1 	.word	0x000883f1
   9eb48:	20070bcc 	.word	0x20070bcc
   9eb4c:	200723e8 	.word	0x200723e8
   9eb50:	00093861 	.word	0x00093861
   9eb54:	000a8a1c 	.word	0x000a8a1c
   9eb58:	0009a331 	.word	0x0009a331
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9eb5c:	2316      	movs	r3, #22
   9eb5e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9eb62:	2304      	movs	r3, #4
   9eb64:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9eb68:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9eb6c:	3301      	adds	r3, #1
   9eb6e:	4619      	mov	r1, r3
   9eb70:	2004      	movs	r0, #4
   9eb72:	4bb1      	ldr	r3, [pc, #708]	; (9ee38 <Cl_dprep_controller+0xc68>)
   9eb74:	4798      	blx	r3
   9eb76:	4603      	mov	r3, r0
   9eb78:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9eb7c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9eb80:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9eb84:	2202      	movs	r2, #2
   9eb86:	4618      	mov	r0, r3
   9eb88:	4bac      	ldr	r3, [pc, #688]	; (9ee3c <Cl_dprep_controller+0xc6c>)
   9eb8a:	4798      	blx	r3
   9eb8c:	4603      	mov	r3, r0
   9eb8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9eb92:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9eb94:	e12e      	b.n	9edf4 <Cl_dprep_controller+0xc24>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   9eb96:	4baa      	ldr	r3, [pc, #680]	; (9ee40 <Cl_dprep_controller+0xc70>)
   9eb98:	7e1b      	ldrb	r3, [r3, #24]
   9eb9a:	2b00      	cmp	r3, #0
   9eb9c:	f000 812d 	beq.w	9edfa <Cl_dprep_controller+0xc2a>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9eba0:	4ba7      	ldr	r3, [pc, #668]	; (9ee40 <Cl_dprep_controller+0xc70>)
   9eba2:	791b      	ldrb	r3, [r3, #4]
   9eba4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9eba8:	2300      	movs	r3, #0
   9ebaa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9ebae:	e011      	b.n	9ebd4 <Cl_dprep_controller+0xa04>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9ebb0:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9ebb4:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9ebb8:	3201      	adds	r2, #1
   9ebba:	49a1      	ldr	r1, [pc, #644]	; (9ee40 <Cl_dprep_controller+0xc70>)
   9ebbc:	440a      	add	r2, r1
   9ebbe:	7912      	ldrb	r2, [r2, #4]
   9ebc0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9ebc4:	440b      	add	r3, r1
   9ebc6:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9ebca:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9ebce:	3301      	adds	r3, #1
   9ebd0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9ebd4:	4b9a      	ldr	r3, [pc, #616]	; (9ee40 <Cl_dprep_controller+0xc70>)
   9ebd6:	78db      	ldrb	r3, [r3, #3]
   9ebd8:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9ebdc:	429a      	cmp	r2, r3
   9ebde:	d3e7      	bcc.n	9ebb0 <Cl_dprep_controller+0x9e0>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9ebe0:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9ebe4:	f897 0093 	ldrb.w	r0, [r7, #147]	; 0x93
   9ebe8:	f107 0238 	add.w	r2, r7, #56	; 0x38
   9ebec:	ca06      	ldmia	r2, {r1, r2}
   9ebee:	4c95      	ldr	r4, [pc, #596]	; (9ee44 <Cl_dprep_controller+0xc74>)
   9ebf0:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9ebf2:	e102      	b.n	9edfa <Cl_dprep_controller+0xc2a>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9ebf4:	4b94      	ldr	r3, [pc, #592]	; (9ee48 <Cl_dprep_controller+0xc78>)
   9ebf6:	881b      	ldrh	r3, [r3, #0]
   9ebf8:	3301      	adds	r3, #1
   9ebfa:	b29a      	uxth	r2, r3
   9ebfc:	4b92      	ldr	r3, [pc, #584]	; (9ee48 <Cl_dprep_controller+0xc78>)
   9ebfe:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9ec00:	4b91      	ldr	r3, [pc, #580]	; (9ee48 <Cl_dprep_controller+0xc78>)
   9ec02:	881b      	ldrh	r3, [r3, #0]
   9ec04:	2b02      	cmp	r3, #2
   9ec06:	f040 80fb 	bne.w	9ee00 <Cl_dprep_controller+0xc30>
			{
				cl_50ms_timer =0;
   9ec0a:	4b8f      	ldr	r3, [pc, #572]	; (9ee48 <Cl_dprep_controller+0xc78>)
   9ec0c:	2200      	movs	r2, #0
   9ec0e:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9ec10:	e0f6      	b.n	9ee00 <Cl_dprep_controller+0xc30>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   9ec12:	4b8e      	ldr	r3, [pc, #568]	; (9ee4c <Cl_dprep_controller+0xc7c>)
   9ec14:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9ec16:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9ec1a:	4619      	mov	r1, r3
   9ec1c:	2014      	movs	r0, #20
   9ec1e:	4b8c      	ldr	r3, [pc, #560]	; (9ee50 <Cl_dprep_controller+0xc80>)
   9ec20:	4798      	blx	r3
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
// 				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 				temp_temp3 = temp_temp3- 0.4;										// sensor offset
				temp3_cel = (float)temp_temp3/100;
   9ec22:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9ec24:	4b8b      	ldr	r3, [pc, #556]	; (9ee54 <Cl_dprep_controller+0xc84>)
   9ec26:	4610      	mov	r0, r2
   9ec28:	4798      	blx	r3
   9ec2a:	4602      	mov	r2, r0
   9ec2c:	4b8a      	ldr	r3, [pc, #552]	; (9ee58 <Cl_dprep_controller+0xc88>)
   9ec2e:	498b      	ldr	r1, [pc, #556]	; (9ee5c <Cl_dprep_controller+0xc8c>)
   9ec30:	4610      	mov	r0, r2
   9ec32:	4798      	blx	r3
   9ec34:	4603      	mov	r3, r0
   9ec36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
// 						temp3_cel = temp_temp3;
// 					}
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9ec3a:	4b89      	ldr	r3, [pc, #548]	; (9ee60 <Cl_dprep_controller+0xc90>)
   9ec3c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9ec40:	4798      	blx	r3
   9ec42:	4c88      	ldr	r4, [pc, #544]	; (9ee64 <Cl_dprep_controller+0xc94>)
   9ec44:	a378      	add	r3, pc, #480	; (adr r3, 9ee28 <Cl_dprep_controller+0xc58>)
   9ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ec4a:	47a0      	blx	r4
   9ec4c:	4603      	mov	r3, r0
   9ec4e:	2b00      	cmp	r3, #0
   9ec50:	d01a      	beq.n	9ec88 <Cl_dprep_controller+0xab8>
   9ec52:	4b83      	ldr	r3, [pc, #524]	; (9ee60 <Cl_dprep_controller+0xc90>)
   9ec54:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9ec58:	4798      	blx	r3
   9ec5a:	4c83      	ldr	r4, [pc, #524]	; (9ee68 <Cl_dprep_controller+0xc98>)
   9ec5c:	a374      	add	r3, pc, #464	; (adr r3, 9ee30 <Cl_dprep_controller+0xc60>)
   9ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ec62:	47a0      	blx	r4
   9ec64:	4603      	mov	r3, r0
   9ec66:	2b00      	cmp	r3, #0
   9ec68:	d00e      	beq.n	9ec88 <Cl_dprep_controller+0xab8>
				{
					if( cl_temp3_37stable == true) 
   9ec6a:	4b80      	ldr	r3, [pc, #512]	; (9ee6c <Cl_dprep_controller+0xc9c>)
   9ec6c:	781b      	ldrb	r3, [r3, #0]
   9ec6e:	2b00      	cmp	r3, #0
   9ec70:	d003      	beq.n	9ec7a <Cl_dprep_controller+0xaaa>
					{
					 cl_temp3_stable_confirm = true;	
   9ec72:	4b7f      	ldr	r3, [pc, #508]	; (9ee70 <Cl_dprep_controller+0xca0>)
   9ec74:	2201      	movs	r2, #1
   9ec76:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9ec78:	e00d      	b.n	9ec96 <Cl_dprep_controller+0xac6>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   9ec7a:	4b7c      	ldr	r3, [pc, #496]	; (9ee6c <Cl_dprep_controller+0xc9c>)
   9ec7c:	2201      	movs	r2, #1
   9ec7e:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9ec80:	4b7b      	ldr	r3, [pc, #492]	; (9ee70 <Cl_dprep_controller+0xca0>)
   9ec82:	2200      	movs	r2, #0
   9ec84:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9ec86:	e006      	b.n	9ec96 <Cl_dprep_controller+0xac6>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   9ec88:	4b78      	ldr	r3, [pc, #480]	; (9ee6c <Cl_dprep_controller+0xc9c>)
   9ec8a:	2200      	movs	r2, #0
   9ec8c:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9ec8e:	4b78      	ldr	r3, [pc, #480]	; (9ee70 <Cl_dprep_controller+0xca0>)
   9ec90:	2200      	movs	r2, #0
   9ec92:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   9ec94:	e0bb      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
   9ec96:	e0ba      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   9ec98:	4b76      	ldr	r3, [pc, #472]	; (9ee74 <Cl_dprep_controller+0xca4>)
   9ec9a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ec9e:	b29b      	uxth	r3, r3
   9eca0:	3301      	adds	r3, #1
   9eca2:	b29b      	uxth	r3, r3
   9eca4:	b21a      	sxth	r2, r3
   9eca6:	4b73      	ldr	r3, [pc, #460]	; (9ee74 <Cl_dprep_controller+0xca4>)
   9eca8:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   9ecaa:	4b72      	ldr	r3, [pc, #456]	; (9ee74 <Cl_dprep_controller+0xca4>)
   9ecac:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ecb0:	2b3c      	cmp	r3, #60	; 0x3c
   9ecb2:	d101      	bne.n	9ecb8 <Cl_dprep_controller+0xae8>
					{
						UpdateDprepFillingMinuteTick();
   9ecb4:	4b70      	ldr	r3, [pc, #448]	; (9ee78 <Cl_dprep_controller+0xca8>)
   9ecb6:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9ecb8:	4b6e      	ldr	r3, [pc, #440]	; (9ee74 <Cl_dprep_controller+0xca4>)
   9ecba:	f9b3 3000 	ldrsh.w	r3, [r3]
   9ecbe:	2b1e      	cmp	r3, #30
   9ecc0:	d114      	bne.n	9ecec <Cl_dprep_controller+0xb1c>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9ecc2:	2101      	movs	r1, #1
   9ecc4:	200c      	movs	r0, #12
   9ecc6:	4b6d      	ldr	r3, [pc, #436]	; (9ee7c <Cl_dprep_controller+0xcac>)
   9ecc8:	4798      	blx	r3
   9ecca:	4603      	mov	r3, r0
   9eccc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9ecd0:	2101      	movs	r1, #1
   9ecd2:	200d      	movs	r0, #13
   9ecd4:	4b69      	ldr	r3, [pc, #420]	; (9ee7c <Cl_dprep_controller+0xcac>)
   9ecd6:	4798      	blx	r3
   9ecd8:	4603      	mov	r3, r0
   9ecda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9ecde:	2101      	movs	r1, #1
   9ece0:	200e      	movs	r0, #14
   9ece2:	4b66      	ldr	r3, [pc, #408]	; (9ee7c <Cl_dprep_controller+0xcac>)
   9ece4:	4798      	blx	r3
   9ece6:	4603      	mov	r3, r0
   9ece8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9ecec:	2004      	movs	r0, #4
   9ecee:	4b64      	ldr	r3, [pc, #400]	; (9ee80 <Cl_dprep_controller+0xcb0>)
   9ecf0:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   9ecf2:	4b64      	ldr	r3, [pc, #400]	; (9ee84 <Cl_dprep_controller+0xcb4>)
   9ecf4:	4798      	blx	r3
   9ecf6:	4603      	mov	r3, r0
   9ecf8:	2b00      	cmp	r3, #0
   9ecfa:	f040 8084 	bne.w	9ee06 <Cl_dprep_controller+0xc36>
					{
						sv_cntrl_setgreenalarm();
   9ecfe:	4b62      	ldr	r3, [pc, #392]	; (9ee88 <Cl_dprep_controller+0xcb8>)
   9ed00:	4798      	blx	r3
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   9ed02:	4b62      	ldr	r3, [pc, #392]	; (9ee8c <Cl_dprep_controller+0xcbc>)
   9ed04:	695b      	ldr	r3, [r3, #20]
   9ed06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						Cl_Uint16Type potvalue = 0;
   9ed0a:	2300      	movs	r3, #0
   9ed0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9ed10:	4b5f      	ldr	r3, [pc, #380]	; (9ee90 <Cl_dprep_controller+0xcc0>)
   9ed12:	781b      	ldrb	r3, [r3, #0]
   9ed14:	2b08      	cmp	r3, #8
   9ed16:	d108      	bne.n	9ed2a <Cl_dprep_controller+0xb5a>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   9ed18:	4b5e      	ldr	r3, [pc, #376]	; (9ee94 <Cl_dprep_controller+0xcc4>)
   9ed1a:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9ed1c:	4b5e      	ldr	r3, [pc, #376]	; (9ee98 <Cl_dprep_controller+0xcc8>)
   9ed1e:	2201      	movs	r2, #1
   9ed20:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9ed22:	4b5e      	ldr	r3, [pc, #376]	; (9ee9c <Cl_dprep_controller+0xccc>)
   9ed24:	2205      	movs	r2, #5
   9ed26:	701a      	strb	r2, [r3, #0]
   9ed28:	e007      	b.n	9ed3a <Cl_dprep_controller+0xb6a>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   9ed2a:	4b5a      	ldr	r3, [pc, #360]	; (9ee94 <Cl_dprep_controller+0xcc4>)
   9ed2c:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9ed2e:	4b5a      	ldr	r3, [pc, #360]	; (9ee98 <Cl_dprep_controller+0xcc8>)
   9ed30:	2201      	movs	r2, #1
   9ed32:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   9ed34:	4b59      	ldr	r3, [pc, #356]	; (9ee9c <Cl_dprep_controller+0xccc>)
   9ed36:	2203      	movs	r2, #3
   9ed38:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   9ed3a:	231f      	movs	r3, #31
   9ed3c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9ed40:	2301      	movs	r3, #1
   9ed42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						Cl_Dprep_filling_secondscounter = 0;
   9ed46:	4b4b      	ldr	r3, [pc, #300]	; (9ee74 <Cl_dprep_controller+0xca4>)
   9ed48:	2200      	movs	r2, #0
   9ed4a:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9ed4c:	4b54      	ldr	r3, [pc, #336]	; (9eea0 <Cl_dprep_controller+0xcd0>)
   9ed4e:	2200      	movs	r2, #0
   9ed50:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   9ed52:	4b54      	ldr	r3, [pc, #336]	; (9eea4 <Cl_dprep_controller+0xcd4>)
   9ed54:	2200      	movs	r2, #0
   9ed56:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   9ed58:	4b53      	ldr	r3, [pc, #332]	; (9eea8 <Cl_dprep_controller+0xcd8>)
   9ed5a:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9ed5c:	f107 0177 	add.w	r1, r7, #119	; 0x77
   9ed60:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9ed64:	2201      	movs	r2, #1
   9ed66:	4618      	mov	r0, r3
   9ed68:	4b34      	ldr	r3, [pc, #208]	; (9ee3c <Cl_dprep_controller+0xc6c>)
   9ed6a:	4798      	blx	r3
   9ed6c:	4603      	mov	r3, r0
   9ed6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
					
			break;
   9ed72:	e048      	b.n	9ee06 <Cl_dprep_controller+0xc36>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   9ed74:	4b4d      	ldr	r3, [pc, #308]	; (9eeac <Cl_dprep_controller+0xcdc>)
   9ed76:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9ed78:	4b48      	ldr	r3, [pc, #288]	; (9ee9c <Cl_dprep_controller+0xccc>)
   9ed7a:	220b      	movs	r2, #11
   9ed7c:	701a      	strb	r2, [r3, #0]
			break;
   9ed7e:	e046      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9ed80:	4b4b      	ldr	r3, [pc, #300]	; (9eeb0 <Cl_dprep_controller+0xce0>)
   9ed82:	4798      	blx	r3
   9ed84:	4603      	mov	r3, r0
   9ed86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9ed8a:	e040      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9ed8c:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9ed90:	4619      	mov	r1, r3
   9ed92:	203c      	movs	r0, #60	; 0x3c
   9ed94:	4b47      	ldr	r3, [pc, #284]	; (9eeb4 <Cl_dprep_controller+0xce4>)
   9ed96:	4798      	blx	r3
					if(alarmstatus1)
   9ed98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   9ed9c:	2b00      	cmp	r3, #0
   9ed9e:	d002      	beq.n	9eda6 <Cl_dprep_controller+0xbd6>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   9eda0:	4b29      	ldr	r3, [pc, #164]	; (9ee48 <Cl_dprep_controller+0xc78>)
   9eda2:	2201      	movs	r2, #1
   9eda4:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9eda6:	f107 0336 	add.w	r3, r7, #54	; 0x36
   9edaa:	4619      	mov	r1, r3
   9edac:	2011      	movs	r0, #17
   9edae:	4b41      	ldr	r3, [pc, #260]	; (9eeb4 <Cl_dprep_controller+0xce4>)
   9edb0:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9edb2:	f107 0335 	add.w	r3, r7, #53	; 0x35
   9edb6:	4619      	mov	r1, r3
   9edb8:	200c      	movs	r0, #12
   9edba:	4b3e      	ldr	r3, [pc, #248]	; (9eeb4 <Cl_dprep_controller+0xce4>)
   9edbc:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   9edbe:	e026      	b.n	9ee0e <Cl_dprep_controller+0xc3e>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9edc0:	4b33      	ldr	r3, [pc, #204]	; (9ee90 <Cl_dprep_controller+0xcc0>)
   9edc2:	781b      	ldrb	r3, [r3, #0]
   9edc4:	2b01      	cmp	r3, #1
   9edc6:	d021      	beq.n	9ee0c <Cl_dprep_controller+0xc3c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9edc8:	2206      	movs	r2, #6
   9edca:	493b      	ldr	r1, [pc, #236]	; (9eeb8 <Cl_dprep_controller+0xce8>)
   9edcc:	2018      	movs	r0, #24
   9edce:	4b1b      	ldr	r3, [pc, #108]	; (9ee3c <Cl_dprep_controller+0xc6c>)
   9edd0:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9edd2:	2100      	movs	r1, #0
   9edd4:	2001      	movs	r0, #1
   9edd6:	4b39      	ldr	r3, [pc, #228]	; (9eebc <Cl_dprep_controller+0xcec>)
   9edd8:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9edda:	4b39      	ldr	r3, [pc, #228]	; (9eec0 <Cl_dprep_controller+0xcf0>)
   9eddc:	2200      	movs	r2, #0
   9edde:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9ede0:	e014      	b.n	9ee0c <Cl_dprep_controller+0xc3c>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   9ede2:	bf00      	nop
   9ede4:	f000 be83 	b.w	9faee <Cl_dprep_controller+0x191e>
							}
								
						}
				
			
			break;
   9ede8:	bf00      	nop
   9edea:	f000 be80 	b.w	9faee <Cl_dprep_controller+0x191e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
			break;
   9edee:	bf00      	nop
   9edf0:	f000 be7d 	b.w	9faee <Cl_dprep_controller+0x191e>
						break;
						default:
						break;
					}
				}
			break;
   9edf4:	bf00      	nop
   9edf6:	f000 be7a 	b.w	9faee <Cl_dprep_controller+0x191e>
						 
						 
						 
					 }
	
			break;
   9edfa:	bf00      	nop
   9edfc:	f000 be77 	b.w	9faee <Cl_dprep_controller+0x191e>
			{
				cl_50ms_timer =0;
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9ee00:	bf00      	nop
   9ee02:	f000 be74 	b.w	9faee <Cl_dprep_controller+0x191e>
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
					}
					
			break;
   9ee06:	bf00      	nop
   9ee08:	f000 be71 	b.w	9faee <Cl_dprep_controller+0x191e>
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
			}
			
			break;
   9ee0c:	bf00      	nop

		}
		break;
   9ee0e:	f000 be6e 	b.w	9faee <Cl_dprep_controller+0x191e>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   9ee12:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9ee16:	2b17      	cmp	r3, #23
   9ee18:	d05c      	beq.n	9eed4 <Cl_dprep_controller+0xd04>
   9ee1a:	2b19      	cmp	r3, #25
   9ee1c:	d060      	beq.n	9eee0 <Cl_dprep_controller+0xd10>
   9ee1e:	2b0d      	cmp	r3, #13
   9ee20:	d050      	beq.n	9eec4 <Cl_dprep_controller+0xcf4>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   9ee22:	e063      	b.n	9eeec <Cl_dprep_controller+0xd1c>
   9ee24:	f3af 8000 	nop.w
   9ee28:	66666666 	.word	0x66666666
   9ee2c:	40426666 	.word	0x40426666
   9ee30:	9999999a 	.word	0x9999999a
   9ee34:	40429999 	.word	0x40429999
   9ee38:	0009a331 	.word	0x0009a331
   9ee3c:	0009b805 	.word	0x0009b805
   9ee40:	200723e8 	.word	0x200723e8
   9ee44:	000a0ee5 	.word	0x000a0ee5
   9ee48:	20071c5c 	.word	0x20071c5c
   9ee4c:	000a0d51 	.word	0x000a0d51
   9ee50:	0008e6a1 	.word	0x0008e6a1
   9ee54:	000a64e1 	.word	0x000a64e1
   9ee58:	000a66f9 	.word	0x000a66f9
   9ee5c:	42c80000 	.word	0x42c80000
   9ee60:	000a5c69 	.word	0x000a5c69
   9ee64:	000a6231 	.word	0x000a6231
   9ee68:	000a61f5 	.word	0x000a61f5
   9ee6c:	20071c5b 	.word	0x20071c5b
   9ee70:	20071c58 	.word	0x20071c58
   9ee74:	20071c3e 	.word	0x20071c3e
   9ee78:	000a0519 	.word	0x000a0519
   9ee7c:	00082de1 	.word	0x00082de1
   9ee80:	000a05c1 	.word	0x000a05c1
   9ee84:	000a02c1 	.word	0x000a02c1
   9ee88:	00099d29 	.word	0x00099d29
   9ee8c:	20072654 	.word	0x20072654
   9ee90:	20071984 	.word	0x20071984
   9ee94:	00099c55 	.word	0x00099c55
   9ee98:	20071c60 	.word	0x20071c60
   9ee9c:	20071c5f 	.word	0x20071c5f
   9eea0:	20071c40 	.word	0x20071c40
   9eea4:	20071c42 	.word	0x20071c42
   9eea8:	000a2179 	.word	0x000a2179
   9eeac:	000a20d1 	.word	0x000a20d1
   9eeb0:	0009fe49 	.word	0x0009fe49
   9eeb4:	00082fbd 	.word	0x00082fbd
   9eeb8:	000a8a24 	.word	0x000a8a24
   9eebc:	000883f1 	.word	0x000883f1
   9eec0:	20070bcc 	.word	0x20070bcc
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   9eec4:	4bbe      	ldr	r3, [pc, #760]	; (9f1c0 <Cl_dprep_controller+0xff0>)
   9eec6:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   9eec8:	4bbe      	ldr	r3, [pc, #760]	; (9f1c4 <Cl_dprep_controller+0xff4>)
   9eeca:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9eecc:	4bbe      	ldr	r3, [pc, #760]	; (9f1c8 <Cl_dprep_controller+0xff8>)
   9eece:	2206      	movs	r2, #6
   9eed0:	701a      	strb	r2, [r3, #0]
								 
						break;
   9eed2:	e00b      	b.n	9eeec <Cl_dprep_controller+0xd1c>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9eed4:	4bbd      	ldr	r3, [pc, #756]	; (9f1cc <Cl_dprep_controller+0xffc>)
   9eed6:	4798      	blx	r3
   9eed8:	4603      	mov	r3, r0
   9eeda:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9eede:	e005      	b.n	9eeec <Cl_dprep_controller+0xd1c>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9eee0:	4bbb      	ldr	r3, [pc, #748]	; (9f1d0 <Cl_dprep_controller+0x1000>)
   9eee2:	4798      	blx	r3
   9eee4:	4603      	mov	r3, r0
   9eee6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9eeea:	bf00      	nop
						default:break;
					}
		break;
   9eeec:	f000 be06 	b.w	9fafc <Cl_dprep_controller+0x192c>
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   9eef0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9eef4:	3b02      	subs	r3, #2
   9eef6:	2b1b      	cmp	r3, #27
   9eef8:	d862      	bhi.n	9efc0 <Cl_dprep_controller+0xdf0>
   9eefa:	a201      	add	r2, pc, #4	; (adr r2, 9ef00 <Cl_dprep_controller+0xd30>)
   9eefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ef00:	0009ef71 	.word	0x0009ef71
   9ef04:	0009efc1 	.word	0x0009efc1
   9ef08:	0009efc1 	.word	0x0009efc1
   9ef0c:	0009efc1 	.word	0x0009efc1
   9ef10:	0009efc1 	.word	0x0009efc1
   9ef14:	0009efc1 	.word	0x0009efc1
   9ef18:	0009efc1 	.word	0x0009efc1
   9ef1c:	0009efc1 	.word	0x0009efc1
   9ef20:	0009efc1 	.word	0x0009efc1
   9ef24:	0009efc1 	.word	0x0009efc1
   9ef28:	0009efc1 	.word	0x0009efc1
   9ef2c:	0009ef81 	.word	0x0009ef81
   9ef30:	0009efc1 	.word	0x0009efc1
   9ef34:	0009efc1 	.word	0x0009efc1
   9ef38:	0009efc1 	.word	0x0009efc1
   9ef3c:	0009efc1 	.word	0x0009efc1
   9ef40:	0009efc1 	.word	0x0009efc1
   9ef44:	0009efc1 	.word	0x0009efc1
   9ef48:	0009efc1 	.word	0x0009efc1
   9ef4c:	0009efc1 	.word	0x0009efc1
   9ef50:	0009efc1 	.word	0x0009efc1
   9ef54:	0009efa9 	.word	0x0009efa9
   9ef58:	0009efc1 	.word	0x0009efc1
   9ef5c:	0009efb5 	.word	0x0009efb5
   9ef60:	0009efc1 	.word	0x0009efc1
   9ef64:	0009efc1 	.word	0x0009efc1
   9ef68:	0009efc1 	.word	0x0009efc1
   9ef6c:	0009ef8f 	.word	0x0009ef8f
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   9ef70:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ef74:	2b03      	cmp	r3, #3
   9ef76:	d126      	bne.n	9efc6 <Cl_dprep_controller+0xdf6>
							{
								return Cl_dprepretcode;
   9ef78:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ef7c:	f000 bdc0 	b.w	9fb00 <Cl_dprep_controller+0x1930>
							}
						break;
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								Cl_Dprep_StartDialyserPrime();
   9ef80:	4b94      	ldr	r3, [pc, #592]	; (9f1d4 <Cl_dprep_controller+0x1004>)
   9ef82:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9ef84:	4b8e      	ldr	r3, [pc, #568]	; (9f1c0 <Cl_dprep_controller+0xff0>)
   9ef86:	4798      	blx	r3
								 sv_prop_startmixing();
   9ef88:	4b93      	ldr	r3, [pc, #588]	; (9f1d8 <Cl_dprep_controller+0x1008>)
   9ef8a:	4798      	blx	r3
						break;
   9ef8c:	e01f      	b.n	9efce <Cl_dprep_controller+0xdfe>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9ef8e:	4b93      	ldr	r3, [pc, #588]	; (9f1dc <Cl_dprep_controller+0x100c>)
   9ef90:	4798      	blx	r3
   9ef92:	4603      	mov	r3, r0
   9ef94:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if(Cl_dprepretcode == CL_REJECTED)
   9ef98:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ef9c:	2b03      	cmp	r3, #3
   9ef9e:	d115      	bne.n	9efcc <Cl_dprep_controller+0xdfc>
							{
								return Cl_dprepretcode;
   9efa0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9efa4:	f000 bdac 	b.w	9fb00 <Cl_dprep_controller+0x1930>
							}
						break;
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9efa8:	4b88      	ldr	r3, [pc, #544]	; (9f1cc <Cl_dprep_controller+0xffc>)
   9efaa:	4798      	blx	r3
   9efac:	4603      	mov	r3, r0
   9efae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9efb2:	e00c      	b.n	9efce <Cl_dprep_controller+0xdfe>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9efb4:	4b86      	ldr	r3, [pc, #536]	; (9f1d0 <Cl_dprep_controller+0x1000>)
   9efb6:	4798      	blx	r3
   9efb8:	4603      	mov	r3, r0
   9efba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9efbe:	e006      	b.n	9efce <Cl_dprep_controller+0xdfe>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   9efc0:	bf00      	nop
   9efc2:	f000 bd9b 	b.w	9fafc <Cl_dprep_controller+0x192c>
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9efc6:	bf00      	nop
   9efc8:	f000 bd98 	b.w	9fafc <Cl_dprep_controller+0x192c>
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
							{
								return Cl_dprepretcode;
							}
						break;
   9efcc:	bf00      	nop
// 							}
// 						}
						break;
						default:break;
					}
		break;
   9efce:	f000 bd95 	b.w	9fafc <Cl_dprep_controller+0x192c>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9efd2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9efd6:	3b04      	subs	r3, #4
   9efd8:	2b1b      	cmp	r3, #27
   9efda:	f200 80ce 	bhi.w	9f17a <Cl_dprep_controller+0xfaa>
   9efde:	a201      	add	r2, pc, #4	; (adr r2, 9efe4 <Cl_dprep_controller+0xe14>)
   9efe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9efe4:	0009f0f3 	.word	0x0009f0f3
   9efe8:	0009f17b 	.word	0x0009f17b
   9efec:	0009f17b 	.word	0x0009f17b
   9eff0:	0009f17b 	.word	0x0009f17b
   9eff4:	0009f17b 	.word	0x0009f17b
   9eff8:	0009f17b 	.word	0x0009f17b
   9effc:	0009f099 	.word	0x0009f099
   9f000:	0009f17b 	.word	0x0009f17b
   9f004:	0009f0dd 	.word	0x0009f0dd
   9f008:	0009f055 	.word	0x0009f055
   9f00c:	0009f17b 	.word	0x0009f17b
   9f010:	0009f17b 	.word	0x0009f17b
   9f014:	0009f17b 	.word	0x0009f17b
   9f018:	0009f17b 	.word	0x0009f17b
   9f01c:	0009f17b 	.word	0x0009f17b
   9f020:	0009f17b 	.word	0x0009f17b
   9f024:	0009f17b 	.word	0x0009f17b
   9f028:	0009f17b 	.word	0x0009f17b
   9f02c:	0009f0c1 	.word	0x0009f0c1
   9f030:	0009f0bb 	.word	0x0009f0bb
   9f034:	0009f17b 	.word	0x0009f17b
   9f038:	0009f0d1 	.word	0x0009f0d1
   9f03c:	0009f17b 	.word	0x0009f17b
   9f040:	0009f17b 	.word	0x0009f17b
   9f044:	0009f17b 	.word	0x0009f17b
   9f048:	0009f17b 	.word	0x0009f17b
   9f04c:	0009f17b 	.word	0x0009f17b
   9f050:	0009f065 	.word	0x0009f065
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9f054:	4b5f      	ldr	r3, [pc, #380]	; (9f1d4 <Cl_dprep_controller+0x1004>)
   9f056:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f058:	4b59      	ldr	r3, [pc, #356]	; (9f1c0 <Cl_dprep_controller+0xff0>)
   9f05a:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9f05c:	4b5a      	ldr	r3, [pc, #360]	; (9f1c8 <Cl_dprep_controller+0xff8>)
   9f05e:	2206      	movs	r2, #6
   9f060:	701a      	strb	r2, [r3, #0]
						break;
   9f062:	e097      	b.n	9f194 <Cl_dprep_controller+0xfc4>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9f064:	4b5e      	ldr	r3, [pc, #376]	; (9f1e0 <Cl_dprep_controller+0x1010>)
   9f066:	781b      	ldrb	r3, [r3, #0]
   9f068:	2b01      	cmp	r3, #1
   9f06a:	d108      	bne.n	9f07e <Cl_dprep_controller+0xeae>
   9f06c:	4b5c      	ldr	r3, [pc, #368]	; (9f1e0 <Cl_dprep_controller+0x1010>)
   9f06e:	781b      	ldrb	r3, [r3, #0]
   9f070:	2b05      	cmp	r3, #5
   9f072:	d104      	bne.n	9f07e <Cl_dprep_controller+0xeae>
   9f074:	4b5a      	ldr	r3, [pc, #360]	; (9f1e0 <Cl_dprep_controller+0x1010>)
   9f076:	781b      	ldrb	r3, [r3, #0]
   9f078:	2b09      	cmp	r3, #9
   9f07a:	f000 8081 	beq.w	9f180 <Cl_dprep_controller+0xfb0>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9f07e:	2206      	movs	r2, #6
   9f080:	4958      	ldr	r1, [pc, #352]	; (9f1e4 <Cl_dprep_controller+0x1014>)
   9f082:	2018      	movs	r0, #24
   9f084:	4b58      	ldr	r3, [pc, #352]	; (9f1e8 <Cl_dprep_controller+0x1018>)
   9f086:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9f088:	2100      	movs	r1, #0
   9f08a:	2005      	movs	r0, #5
   9f08c:	4b57      	ldr	r3, [pc, #348]	; (9f1ec <Cl_dprep_controller+0x101c>)
   9f08e:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f090:	4b57      	ldr	r3, [pc, #348]	; (9f1f0 <Cl_dprep_controller+0x1020>)
   9f092:	2200      	movs	r2, #0
   9f094:	70da      	strb	r2, [r3, #3]
									}
						break;
   9f096:	e073      	b.n	9f180 <Cl_dprep_controller+0xfb0>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f098:	4b51      	ldr	r3, [pc, #324]	; (9f1e0 <Cl_dprep_controller+0x1010>)
   9f09a:	781b      	ldrb	r3, [r3, #0]
   9f09c:	2b01      	cmp	r3, #1
   9f09e:	d072      	beq.n	9f186 <Cl_dprep_controller+0xfb6>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9f0a0:	2206      	movs	r2, #6
   9f0a2:	4954      	ldr	r1, [pc, #336]	; (9f1f4 <Cl_dprep_controller+0x1024>)
   9f0a4:	2018      	movs	r0, #24
   9f0a6:	4b50      	ldr	r3, [pc, #320]	; (9f1e8 <Cl_dprep_controller+0x1018>)
   9f0a8:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9f0aa:	2100      	movs	r1, #0
   9f0ac:	2001      	movs	r0, #1
   9f0ae:	4b4f      	ldr	r3, [pc, #316]	; (9f1ec <Cl_dprep_controller+0x101c>)
   9f0b0:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f0b2:	4b4f      	ldr	r3, [pc, #316]	; (9f1f0 <Cl_dprep_controller+0x1020>)
   9f0b4:	2200      	movs	r2, #0
   9f0b6:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9f0b8:	e065      	b.n	9f186 <Cl_dprep_controller+0xfb6>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9f0ba:	4b44      	ldr	r3, [pc, #272]	; (9f1cc <Cl_dprep_controller+0xffc>)
   9f0bc:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9f0be:	e069      	b.n	9f194 <Cl_dprep_controller+0xfc4>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9f0c0:	4b47      	ldr	r3, [pc, #284]	; (9f1e0 <Cl_dprep_controller+0x1010>)
   9f0c2:	781b      	ldrb	r3, [r3, #0]
   9f0c4:	2b08      	cmp	r3, #8
   9f0c6:	d161      	bne.n	9f18c <Cl_dprep_controller+0xfbc>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9f0c8:	4b3f      	ldr	r3, [pc, #252]	; (9f1c8 <Cl_dprep_controller+0xff8>)
   9f0ca:	2205      	movs	r2, #5
   9f0cc:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9f0ce:	e05d      	b.n	9f18c <Cl_dprep_controller+0xfbc>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f0d0:	4b3f      	ldr	r3, [pc, #252]	; (9f1d0 <Cl_dprep_controller+0x1000>)
   9f0d2:	4798      	blx	r3
   9f0d4:	4603      	mov	r3, r0
   9f0d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f0da:	e05b      	b.n	9f194 <Cl_dprep_controller+0xfc4>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9f0dc:	f107 0377 	add.w	r3, r7, #119	; 0x77
   9f0e0:	2200      	movs	r2, #0
   9f0e2:	4619      	mov	r1, r3
   9f0e4:	2025      	movs	r0, #37	; 0x25
   9f0e6:	4b40      	ldr	r3, [pc, #256]	; (9f1e8 <Cl_dprep_controller+0x1018>)
   9f0e8:	4798      	blx	r3
   9f0ea:	4603      	mov	r3, r0
   9f0ec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9f0f0:	e050      	b.n	9f194 <Cl_dprep_controller+0xfc4>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   9f0f2:	4b41      	ldr	r3, [pc, #260]	; (9f1f8 <Cl_dprep_controller+0x1028>)
   9f0f4:	7e1b      	ldrb	r3, [r3, #24]
   9f0f6:	2b00      	cmp	r3, #0
   9f0f8:	d04b      	beq.n	9f192 <Cl_dprep_controller+0xfc2>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9f0fa:	4b3f      	ldr	r3, [pc, #252]	; (9f1f8 <Cl_dprep_controller+0x1028>)
   9f0fc:	791b      	ldrb	r3, [r3, #4]
   9f0fe:	2b02      	cmp	r3, #2
   9f100:	d002      	beq.n	9f108 <Cl_dprep_controller+0xf38>
   9f102:	2b04      	cmp	r3, #4
   9f104:	d01c      	beq.n	9f140 <Cl_dprep_controller+0xf70>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   9f106:	e037      	b.n	9f178 <Cl_dprep_controller+0xfa8>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f108:	2316      	movs	r3, #22
   9f10a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9f10e:	2302      	movs	r3, #2
   9f110:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9f114:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f118:	3301      	adds	r3, #1
   9f11a:	4619      	mov	r1, r3
   9f11c:	2002      	movs	r0, #2
   9f11e:	4b37      	ldr	r3, [pc, #220]	; (9f1fc <Cl_dprep_controller+0x102c>)
   9f120:	4798      	blx	r3
   9f122:	4603      	mov	r3, r0
   9f124:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f128:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9f12c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9f130:	2202      	movs	r2, #2
   9f132:	4618      	mov	r0, r3
   9f134:	4b2c      	ldr	r3, [pc, #176]	; (9f1e8 <Cl_dprep_controller+0x1018>)
   9f136:	4798      	blx	r3
   9f138:	4603      	mov	r3, r0
   9f13a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f13e:	e01b      	b.n	9f178 <Cl_dprep_controller+0xfa8>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f140:	2316      	movs	r3, #22
   9f142:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9f146:	2304      	movs	r3, #4
   9f148:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9f14c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f150:	3301      	adds	r3, #1
   9f152:	4619      	mov	r1, r3
   9f154:	2004      	movs	r0, #4
   9f156:	4b29      	ldr	r3, [pc, #164]	; (9f1fc <Cl_dprep_controller+0x102c>)
   9f158:	4798      	blx	r3
   9f15a:	4603      	mov	r3, r0
   9f15c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f160:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9f164:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9f168:	2202      	movs	r2, #2
   9f16a:	4618      	mov	r0, r3
   9f16c:	4b1e      	ldr	r3, [pc, #120]	; (9f1e8 <Cl_dprep_controller+0x1018>)
   9f16e:	4798      	blx	r3
   9f170:	4603      	mov	r3, r0
   9f172:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f176:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9f178:	e00b      	b.n	9f192 <Cl_dprep_controller+0xfc2>
						default:break;
   9f17a:	bf00      	nop
   9f17c:	f000 bcbe 	b.w	9fafc <Cl_dprep_controller+0x192c>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
									}
						break;
   9f180:	bf00      	nop
   9f182:	f000 bcbb 	b.w	9fafc <Cl_dprep_controller+0x192c>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   9f186:	bf00      	nop
   9f188:	f000 bcb8 	b.w	9fafc <Cl_dprep_controller+0x192c>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
									 
						}
						break;
   9f18c:	bf00      	nop
   9f18e:	f000 bcb5 	b.w	9fafc <Cl_dprep_controller+0x192c>
									break;
									default:
									break;
								}
							}
						break;
   9f192:	bf00      	nop
						default:break;
					}

		break;
   9f194:	f000 bcb2 	b.w	9fafc <Cl_dprep_controller+0x192c>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 wait_timeout_counter = 0;
   9f198:	4b19      	ldr	r3, [pc, #100]	; (9f200 <Cl_dprep_controller+0x1030>)
   9f19a:	2200      	movs	r2, #0
   9f19c:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   9f19e:	4b19      	ldr	r3, [pc, #100]	; (9f204 <Cl_dprep_controller+0x1034>)
   9f1a0:	681b      	ldr	r3, [r3, #0]
   9f1a2:	2b03      	cmp	r3, #3
   9f1a4:	dd34      	ble.n	9f210 <Cl_dprep_controller+0x1040>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   9f1a6:	4b18      	ldr	r3, [pc, #96]	; (9f208 <Cl_dprep_controller+0x1038>)
   9f1a8:	4798      	blx	r3
			 state_counter = 0;
   9f1aa:	4b16      	ldr	r3, [pc, #88]	; (9f204 <Cl_dprep_controller+0x1034>)
   9f1ac:	2200      	movs	r2, #0
   9f1ae:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   9f1b0:	4b16      	ldr	r3, [pc, #88]	; (9f20c <Cl_dprep_controller+0x103c>)
   9f1b2:	2200      	movs	r2, #0
   9f1b4:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   9f1b6:	4b12      	ldr	r3, [pc, #72]	; (9f200 <Cl_dprep_controller+0x1030>)
   9f1b8:	2200      	movs	r2, #0
   9f1ba:	601a      	str	r2, [r3, #0]
			
		
		}
		}
		
		break;
   9f1bc:	f000 bc99 	b.w	9faf2 <Cl_dprep_controller+0x1922>
   9f1c0:	00099c39 	.word	0x00099c39
   9f1c4:	00099c7d 	.word	0x00099c7d
   9f1c8:	20071c5f 	.word	0x20071c5f
   9f1cc:	000a0d51 	.word	0x000a0d51
   9f1d0:	0009fe49 	.word	0x0009fe49
   9f1d4:	000a1d11 	.word	0x000a1d11
   9f1d8:	00099e51 	.word	0x00099e51
   9f1dc:	000a1901 	.word	0x000a1901
   9f1e0:	20071984 	.word	0x20071984
   9f1e4:	000a8a1c 	.word	0x000a8a1c
   9f1e8:	0009b805 	.word	0x0009b805
   9f1ec:	000883f1 	.word	0x000883f1
   9f1f0:	20070bcc 	.word	0x20070bcc
   9f1f4:	000a8a24 	.word	0x000a8a24
   9f1f8:	200723e8 	.word	0x200723e8
   9f1fc:	0009a331 	.word	0x0009a331
   9f200:	20071c20 	.word	0x20071c20
   9f204:	20071c24 	.word	0x20071c24
   9f208:	000a2075 	.word	0x000a2075
   9f20c:	20071c1c 	.word	0x20071c1c
			 wait_timeout_counter = 0;
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   9f210:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f214:	3b01      	subs	r3, #1
   9f216:	2b18      	cmp	r3, #24
   9f218:	f200 846b 	bhi.w	9faf2 <Cl_dprep_controller+0x1922>
   9f21c:	a201      	add	r2, pc, #4	; (adr r2, 9f224 <Cl_dprep_controller+0x1054>)
   9f21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f222:	bf00      	nop
   9f224:	0009f317 	.word	0x0009f317
   9f228:	0009faf3 	.word	0x0009faf3
   9f22c:	0009faf3 	.word	0x0009faf3
   9f230:	0009faf3 	.word	0x0009faf3
   9f234:	0009faf3 	.word	0x0009faf3
   9f238:	0009faf3 	.word	0x0009faf3
   9f23c:	0009faf3 	.word	0x0009faf3
   9f240:	0009faf3 	.word	0x0009faf3
   9f244:	0009faf3 	.word	0x0009faf3
   9f248:	0009faf3 	.word	0x0009faf3
   9f24c:	0009faf3 	.word	0x0009faf3
   9f250:	0009faf3 	.word	0x0009faf3
   9f254:	0009faf3 	.word	0x0009faf3
   9f258:	0009f311 	.word	0x0009f311
   9f25c:	0009faf3 	.word	0x0009faf3
   9f260:	0009faf3 	.word	0x0009faf3
   9f264:	0009faf3 	.word	0x0009faf3
   9f268:	0009faf3 	.word	0x0009faf3
   9f26c:	0009faf3 	.word	0x0009faf3
   9f270:	0009faf3 	.word	0x0009faf3
   9f274:	0009faf3 	.word	0x0009faf3
   9f278:	0009f289 	.word	0x0009f289
   9f27c:	0009faf3 	.word	0x0009faf3
   9f280:	0009faf3 	.word	0x0009faf3
   9f284:	0009f305 	.word	0x0009f305
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   9f288:	4bb1      	ldr	r3, [pc, #708]	; (9f550 <Cl_dprep_controller+0x1380>)
   9f28a:	681b      	ldr	r3, [r3, #0]
   9f28c:	3301      	adds	r3, #1
   9f28e:	4ab0      	ldr	r2, [pc, #704]	; (9f550 <Cl_dprep_controller+0x1380>)
   9f290:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9f292:	2003      	movs	r0, #3
   9f294:	4baf      	ldr	r3, [pc, #700]	; (9f554 <Cl_dprep_controller+0x1384>)
   9f296:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   9f298:	4baf      	ldr	r3, [pc, #700]	; (9f558 <Cl_dprep_controller+0x1388>)
   9f29a:	4798      	blx	r3
   9f29c:	4603      	mov	r3, r0
   9f29e:	2b00      	cmp	r3, #0
   9f2a0:	d104      	bne.n	9f2ac <Cl_dprep_controller+0x10dc>
			
			stability_counter++ ;
   9f2a2:	4bae      	ldr	r3, [pc, #696]	; (9f55c <Cl_dprep_controller+0x138c>)
   9f2a4:	681b      	ldr	r3, [r3, #0]
   9f2a6:	3301      	adds	r3, #1
   9f2a8:	4aac      	ldr	r2, [pc, #688]	; (9f55c <Cl_dprep_controller+0x138c>)
   9f2aa:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   9f2ac:	4bab      	ldr	r3, [pc, #684]	; (9f55c <Cl_dprep_controller+0x138c>)
   9f2ae:	681b      	ldr	r3, [r3, #0]
   9f2b0:	2b0a      	cmp	r3, #10
   9f2b2:	d120      	bne.n	9f2f6 <Cl_dprep_controller+0x1126>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // true
   9f2b4:	2100      	movs	r1, #0
   9f2b6:	2008      	movs	r0, #8
   9f2b8:	4ba9      	ldr	r3, [pc, #676]	; (9f560 <Cl_dprep_controller+0x1390>)
   9f2ba:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // true
   9f2bc:	2100      	movs	r1, #0
   9f2be:	2007      	movs	r0, #7
   9f2c0:	4ba7      	ldr	r3, [pc, #668]	; (9f560 <Cl_dprep_controller+0x1390>)
   9f2c2:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // true
   9f2c4:	2100      	movs	r1, #0
   9f2c6:	2013      	movs	r0, #19
   9f2c8:	4ba5      	ldr	r3, [pc, #660]	; (9f560 <Cl_dprep_controller+0x1390>)
   9f2ca:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); //true
   9f2cc:	2100      	movs	r1, #0
   9f2ce:	2014      	movs	r0, #20
   9f2d0:	4ba3      	ldr	r3, [pc, #652]	; (9f560 <Cl_dprep_controller+0x1390>)
   9f2d2:	4798      	blx	r3
		
		stability_counter = 0;	
   9f2d4:	4ba1      	ldr	r3, [pc, #644]	; (9f55c <Cl_dprep_controller+0x138c>)
   9f2d6:	2200      	movs	r2, #0
   9f2d8:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   9f2da:	4b9d      	ldr	r3, [pc, #628]	; (9f550 <Cl_dprep_controller+0x1380>)
   9f2dc:	2200      	movs	r2, #0
   9f2de:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9f2e0:	4ba0      	ldr	r3, [pc, #640]	; (9f564 <Cl_dprep_controller+0x1394>)
   9f2e2:	4798      	blx	r3
   9f2e4:	4603      	mov	r3, r0
   9f2e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   9f2ea:	4b9f      	ldr	r3, [pc, #636]	; (9f568 <Cl_dprep_controller+0x1398>)
   9f2ec:	2202      	movs	r2, #2
   9f2ee:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9f2f0:	4b9e      	ldr	r3, [pc, #632]	; (9f56c <Cl_dprep_controller+0x139c>)
   9f2f2:	2206      	movs	r2, #6
   9f2f4:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   9f2f6:	4b96      	ldr	r3, [pc, #600]	; (9f550 <Cl_dprep_controller+0x1380>)
   9f2f8:	681b      	ldr	r3, [r3, #0]
   9f2fa:	2b0f      	cmp	r3, #15
   9f2fc:	dd14      	ble.n	9f328 <Cl_dprep_controller+0x1158>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   9f2fe:	4b9c      	ldr	r3, [pc, #624]	; (9f570 <Cl_dprep_controller+0x13a0>)
   9f300:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9f302:	e011      	b.n	9f328 <Cl_dprep_controller+0x1158>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f304:	4b9b      	ldr	r3, [pc, #620]	; (9f574 <Cl_dprep_controller+0x13a4>)
   9f306:	4798      	blx	r3
   9f308:	4603      	mov	r3, r0
   9f30a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		break;
   9f30e:	e00c      	b.n	9f32a <Cl_dprep_controller+0x115a>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_Dprep_Priming_Stop();
   9f310:	4b97      	ldr	r3, [pc, #604]	; (9f570 <Cl_dprep_controller+0x13a0>)
   9f312:	4798      	blx	r3
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   9f314:	e009      	b.n	9f32a <Cl_dprep_controller+0x115a>
		
		case EVENT_DPREP_CLR_ALARM:
		sv_cntrl_resetyellowalarm();
   9f316:	4b98      	ldr	r3, [pc, #608]	; (9f578 <Cl_dprep_controller+0x13a8>)
   9f318:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   9f31a:	4b98      	ldr	r3, [pc, #608]	; (9f57c <Cl_dprep_controller+0x13ac>)
   9f31c:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   9f31e:	4b98      	ldr	r3, [pc, #608]	; (9f580 <Cl_dprep_controller+0x13b0>)
   9f320:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   9f322:	4b98      	ldr	r3, [pc, #608]	; (9f584 <Cl_dprep_controller+0x13b4>)
   9f324:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
		break;
   9f326:	e000      	b.n	9f32a <Cl_dprep_controller+0x115a>
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9f328:	bf00      	nop
			
		
		}
		}
		
		break;
   9f32a:	e3e2      	b.n	9faf2 <Cl_dprep_controller+0x1922>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   9f32c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f330:	3b01      	subs	r3, #1
   9f332:	2b19      	cmp	r3, #25
   9f334:	f200 8104 	bhi.w	9f540 <Cl_dprep_controller+0x1370>
   9f338:	a201      	add	r2, pc, #4	; (adr r2, 9f340 <Cl_dprep_controller+0x1170>)
   9f33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f33e:	bf00      	nop
   9f340:	0009f4ef 	.word	0x0009f4ef
   9f344:	0009f541 	.word	0x0009f541
   9f348:	0009f425 	.word	0x0009f425
   9f34c:	0009f3a9 	.word	0x0009f3a9
   9f350:	0009f541 	.word	0x0009f541
   9f354:	0009f541 	.word	0x0009f541
   9f358:	0009f4c1 	.word	0x0009f4c1
   9f35c:	0009f541 	.word	0x0009f541
   9f360:	0009f541 	.word	0x0009f541
   9f364:	0009f541 	.word	0x0009f541
   9f368:	0009f541 	.word	0x0009f541
   9f36c:	0009f483 	.word	0x0009f483
   9f370:	0009f499 	.word	0x0009f499
   9f374:	0009f541 	.word	0x0009f541
   9f378:	0009f541 	.word	0x0009f541
   9f37c:	0009f541 	.word	0x0009f541
   9f380:	0009f541 	.word	0x0009f541
   9f384:	0009f541 	.word	0x0009f541
   9f388:	0009f541 	.word	0x0009f541
   9f38c:	0009f541 	.word	0x0009f541
   9f390:	0009f541 	.word	0x0009f541
   9f394:	0009f541 	.word	0x0009f541
   9f398:	0009f501 	.word	0x0009f501
   9f39c:	0009f541 	.word	0x0009f541
   9f3a0:	0009f4b5 	.word	0x0009f4b5
   9f3a4:	0009f4a7 	.word	0x0009f4a7
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9f3a8:	4b77      	ldr	r3, [pc, #476]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f3aa:	7e1b      	ldrb	r3, [r3, #24]
   9f3ac:	2b00      	cmp	r3, #0
   9f3ae:	f000 80c9 	beq.w	9f544 <Cl_dprep_controller+0x1374>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9f3b2:	4b75      	ldr	r3, [pc, #468]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f3b4:	791b      	ldrb	r3, [r3, #4]
   9f3b6:	2b03      	cmp	r3, #3
   9f3b8:	d002      	beq.n	9f3c0 <Cl_dprep_controller+0x11f0>
   9f3ba:	2b04      	cmp	r3, #4
   9f3bc:	d015      	beq.n	9f3ea <Cl_dprep_controller+0x121a>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9f3be:	e030      	b.n	9f422 <Cl_dprep_controller+0x1252>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f3c0:	2316      	movs	r3, #22
   9f3c2:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9f3c6:	2303      	movs	r3, #3
   9f3c8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;									
   9f3cc:	2300      	movs	r3, #0
   9f3ce:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f3d2:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9f3d6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9f3da:	2202      	movs	r2, #2
   9f3dc:	4618      	mov	r0, r3
   9f3de:	4b6b      	ldr	r3, [pc, #428]	; (9f58c <Cl_dprep_controller+0x13bc>)
   9f3e0:	4798      	blx	r3
   9f3e2:	4603      	mov	r3, r0
   9f3e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f3e8:	e01b      	b.n	9f422 <Cl_dprep_controller+0x1252>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f3ea:	2316      	movs	r3, #22
   9f3ec:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9f3f0:	2304      	movs	r3, #4
   9f3f2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9f3f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f3fa:	3301      	adds	r3, #1
   9f3fc:	4619      	mov	r1, r3
   9f3fe:	2004      	movs	r0, #4
   9f400:	4b63      	ldr	r3, [pc, #396]	; (9f590 <Cl_dprep_controller+0x13c0>)
   9f402:	4798      	blx	r3
   9f404:	4603      	mov	r3, r0
   9f406:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f40a:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9f40e:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9f412:	2202      	movs	r2, #2
   9f414:	4618      	mov	r0, r3
   9f416:	4b5d      	ldr	r3, [pc, #372]	; (9f58c <Cl_dprep_controller+0x13bc>)
   9f418:	4798      	blx	r3
   9f41a:	4603      	mov	r3, r0
   9f41c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f420:	bf00      	nop
									default:break;
								}
							}
						break;
   9f422:	e08f      	b.n	9f544 <Cl_dprep_controller+0x1374>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9f424:	4b58      	ldr	r3, [pc, #352]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f426:	7e1b      	ldrb	r3, [r3, #24]
   9f428:	2b00      	cmp	r3, #0
   9f42a:	f000 808d 	beq.w	9f548 <Cl_dprep_controller+0x1378>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9f42e:	4b56      	ldr	r3, [pc, #344]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f430:	791b      	ldrb	r3, [r3, #4]
   9f432:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9f436:	2300      	movs	r3, #0
   9f438:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9f43c:	e011      	b.n	9f462 <Cl_dprep_controller+0x1292>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9f43e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9f442:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9f446:	3201      	adds	r2, #1
   9f448:	494f      	ldr	r1, [pc, #316]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f44a:	440a      	add	r2, r1
   9f44c:	7912      	ldrb	r2, [r2, #4]
   9f44e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9f452:	440b      	add	r3, r1
   9f454:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9f458:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9f45c:	3301      	adds	r3, #1
   9f45e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9f462:	4b49      	ldr	r3, [pc, #292]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f464:	78db      	ldrb	r3, [r3, #3]
   9f466:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9f46a:	429a      	cmp	r2, r3
   9f46c:	d3e7      	bcc.n	9f43e <Cl_dprep_controller+0x126e>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9f46e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9f472:	f897 0089 	ldrb.w	r0, [r7, #137]	; 0x89
   9f476:	f107 0238 	add.w	r2, r7, #56	; 0x38
   9f47a:	ca06      	ldmia	r2, {r1, r2}
   9f47c:	4c45      	ldr	r4, [pc, #276]	; (9f594 <Cl_dprep_controller+0x13c4>)
   9f47e:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9f480:	e062      	b.n	9f548 <Cl_dprep_controller+0x1378>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9f482:	f107 0377 	add.w	r3, r7, #119	; 0x77
   9f486:	2200      	movs	r2, #0
   9f488:	4619      	mov	r1, r3
   9f48a:	2025      	movs	r0, #37	; 0x25
   9f48c:	4b3f      	ldr	r3, [pc, #252]	; (9f58c <Cl_dprep_controller+0x13bc>)
   9f48e:	4798      	blx	r3
   9f490:	4603      	mov	r3, r0
   9f492:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9f496:	e05a      	b.n	9f54e <Cl_dprep_controller+0x137e>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9f498:	4b3f      	ldr	r3, [pc, #252]	; (9f598 <Cl_dprep_controller+0x13c8>)
   9f49a:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f49c:	4b3f      	ldr	r3, [pc, #252]	; (9f59c <Cl_dprep_controller+0x13cc>)
   9f49e:	4798      	blx	r3
								 sv_prop_startmixing();
   9f4a0:	4b3f      	ldr	r3, [pc, #252]	; (9f5a0 <Cl_dprep_controller+0x13d0>)
   9f4a2:	4798      	blx	r3
						break;
   9f4a4:	e053      	b.n	9f54e <Cl_dprep_controller+0x137e>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f4a6:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f4aa:	4619      	mov	r1, r3
   9f4ac:	203c      	movs	r0, #60	; 0x3c
   9f4ae:	4b3d      	ldr	r3, [pc, #244]	; (9f5a4 <Cl_dprep_controller+0x13d4>)
   9f4b0:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   9f4b2:	e04c      	b.n	9f54e <Cl_dprep_controller+0x137e>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f4b4:	4b2f      	ldr	r3, [pc, #188]	; (9f574 <Cl_dprep_controller+0x13a4>)
   9f4b6:	4798      	blx	r3
   9f4b8:	4603      	mov	r3, r0
   9f4ba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f4be:	e046      	b.n	9f54e <Cl_dprep_controller+0x137e>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   9f4c0:	4b31      	ldr	r3, [pc, #196]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f4c2:	7e1b      	ldrb	r3, [r3, #24]
   9f4c4:	2b00      	cmp	r3, #0
   9f4c6:	d041      	beq.n	9f54c <Cl_dprep_controller+0x137c>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f4c8:	4b2f      	ldr	r3, [pc, #188]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f4ca:	791b      	ldrb	r3, [r3, #4]
   9f4cc:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9f4ce:	4b2e      	ldr	r3, [pc, #184]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f4d0:	791b      	ldrb	r3, [r3, #4]
   9f4d2:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9f4d4:	4b2c      	ldr	r3, [pc, #176]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f4d6:	791b      	ldrb	r3, [r3, #4]
   9f4d8:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9f4da:	4b2b      	ldr	r3, [pc, #172]	; (9f588 <Cl_dprep_controller+0x13b8>)
   9f4dc:	791b      	ldrb	r3, [r3, #4]
   9f4de:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9f4e0:	89bb      	ldrh	r3, [r7, #12]
   9f4e2:	b21b      	sxth	r3, r3
   9f4e4:	4619      	mov	r1, r3
   9f4e6:	200e      	movs	r0, #14
   9f4e8:	4b2f      	ldr	r3, [pc, #188]	; (9f5a8 <Cl_dprep_controller+0x13d8>)
   9f4ea:	4798      	blx	r3
											}
						break;
   9f4ec:	e02e      	b.n	9f54c <Cl_dprep_controller+0x137c>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9f4ee:	4b22      	ldr	r3, [pc, #136]	; (9f578 <Cl_dprep_controller+0x13a8>)
   9f4f0:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9f4f2:	4b22      	ldr	r3, [pc, #136]	; (9f57c <Cl_dprep_controller+0x13ac>)
   9f4f4:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9f4f6:	4b22      	ldr	r3, [pc, #136]	; (9f580 <Cl_dprep_controller+0x13b0>)
   9f4f8:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9f4fa:	4b22      	ldr	r3, [pc, #136]	; (9f584 <Cl_dprep_controller+0x13b4>)
   9f4fc:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
						break;
   9f4fe:	e026      	b.n	9f54e <Cl_dprep_controller+0x137e>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   9f500:	f04f 0300 	mov.w	r3, #0
   9f504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9f508:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9f50c:	4619      	mov	r1, r3
   9f50e:	2014      	movs	r0, #20
   9f510:	4b26      	ldr	r3, [pc, #152]	; (9f5ac <Cl_dprep_controller+0x13dc>)
   9f512:	4798      	blx	r3
// 							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// 	//						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 							temp_temp3 = temp_temp3 - 0.4;										// sensor offset
							temp3_cel = (float)temp_temp3 /100;
   9f514:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9f516:	4b26      	ldr	r3, [pc, #152]	; (9f5b0 <Cl_dprep_controller+0x13e0>)
   9f518:	4610      	mov	r0, r2
   9f51a:	4798      	blx	r3
   9f51c:	4602      	mov	r2, r0
   9f51e:	4b25      	ldr	r3, [pc, #148]	; (9f5b4 <Cl_dprep_controller+0x13e4>)
   9f520:	4925      	ldr	r1, [pc, #148]	; (9f5b8 <Cl_dprep_controller+0x13e8>)
   9f522:	4610      	mov	r0, r2
   9f524:	4798      	blx	r3
   9f526:	4603      	mov	r3, r0
   9f528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							Cl_Dprep_filling_secondscounter++;
   9f52c:	4b23      	ldr	r3, [pc, #140]	; (9f5bc <Cl_dprep_controller+0x13ec>)
   9f52e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f532:	b29b      	uxth	r3, r3
   9f534:	3301      	adds	r3, #1
   9f536:	b29b      	uxth	r3, r3
   9f538:	b21a      	sxth	r2, r3
   9f53a:	4b20      	ldr	r3, [pc, #128]	; (9f5bc <Cl_dprep_controller+0x13ec>)
   9f53c:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   9f53e:	e006      	b.n	9f54e <Cl_dprep_controller+0x137e>
						default:
						break;
   9f540:	bf00      	nop
   9f542:	e2db      	b.n	9fafc <Cl_dprep_controller+0x192c>
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
								}
							}
						break;
   9f544:	bf00      	nop
   9f546:	e2d9      	b.n	9fafc <Cl_dprep_controller+0x192c>
						 
						 
						 
								 }
	
						break;
   9f548:	bf00      	nop
   9f54a:	e2d7      	b.n	9fafc <Cl_dprep_controller+0x192c>
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
											}
						break;
   9f54c:	bf00      	nop
					#endif
						break;
						default:
						break;
					}
		break;
   9f54e:	e2d5      	b.n	9fafc <Cl_dprep_controller+0x192c>
   9f550:	20071c20 	.word	0x20071c20
   9f554:	000a05c1 	.word	0x000a05c1
   9f558:	000a20a1 	.word	0x000a20a1
   9f55c:	20071c1c 	.word	0x20071c1c
   9f560:	00082de1 	.word	0x00082de1
   9f564:	00099c7d 	.word	0x00099c7d
   9f568:	20071c60 	.word	0x20071c60
   9f56c:	20071c5f 	.word	0x20071c5f
   9f570:	000a2075 	.word	0x000a2075
   9f574:	0009fe49 	.word	0x0009fe49
   9f578:	00099d65 	.word	0x00099d65
   9f57c:	00099d51 	.word	0x00099d51
   9f580:	00099d8d 	.word	0x00099d8d
   9f584:	000a0d51 	.word	0x000a0d51
   9f588:	200723e8 	.word	0x200723e8
   9f58c:	0009b805 	.word	0x0009b805
   9f590:	0009a331 	.word	0x0009a331
   9f594:	000a0ee5 	.word	0x000a0ee5
   9f598:	000a1d11 	.word	0x000a1d11
   9f59c:	00099c39 	.word	0x00099c39
   9f5a0:	00099e51 	.word	0x00099e51
   9f5a4:	00082fbd 	.word	0x00082fbd
   9f5a8:	000883f1 	.word	0x000883f1
   9f5ac:	0008e6a1 	.word	0x0008e6a1
   9f5b0:	000a64e1 	.word	0x000a64e1
   9f5b4:	000a66f9 	.word	0x000a66f9
   9f5b8:	42c80000 	.word	0x42c80000
   9f5bc:	20071c3e 	.word	0x20071c3e

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   9f5c0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f5c4:	3b01      	subs	r3, #1
   9f5c6:	2b19      	cmp	r3, #25
   9f5c8:	f200 8295 	bhi.w	9faf6 <Cl_dprep_controller+0x1926>
   9f5cc:	a201      	add	r2, pc, #4	; (adr r2, 9f5d4 <Cl_dprep_controller+0x1404>)
   9f5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f5d2:	bf00      	nop
   9f5d4:	0009f73f 	.word	0x0009f73f
   9f5d8:	0009faf7 	.word	0x0009faf7
   9f5dc:	0009faf7 	.word	0x0009faf7
   9f5e0:	0009faf7 	.word	0x0009faf7
   9f5e4:	0009faf7 	.word	0x0009faf7
   9f5e8:	0009faf7 	.word	0x0009faf7
   9f5ec:	0009faf7 	.word	0x0009faf7
   9f5f0:	0009faf7 	.word	0x0009faf7
   9f5f4:	0009faf7 	.word	0x0009faf7
   9f5f8:	0009faf7 	.word	0x0009faf7
   9f5fc:	0009faf7 	.word	0x0009faf7
   9f600:	0009faf7 	.word	0x0009faf7
   9f604:	0009faf7 	.word	0x0009faf7
   9f608:	0009f711 	.word	0x0009f711
   9f60c:	0009faf7 	.word	0x0009faf7
   9f610:	0009faf7 	.word	0x0009faf7
   9f614:	0009faf7 	.word	0x0009faf7
   9f618:	0009faf7 	.word	0x0009faf7
   9f61c:	0009f755 	.word	0x0009f755
   9f620:	0009faf7 	.word	0x0009faf7
   9f624:	0009f755 	.word	0x0009f755
   9f628:	0009f643 	.word	0x0009f643
   9f62c:	0009f63d 	.word	0x0009f63d
   9f630:	0009faf7 	.word	0x0009faf7
   9f634:	0009f725 	.word	0x0009f725
   9f638:	0009f731 	.word	0x0009f731
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9f63c:	4b9f      	ldr	r3, [pc, #636]	; (9f8bc <Cl_dprep_controller+0x16ec>)
   9f63e:	4798      	blx	r3
						break;
   9f640:	e08b      	b.n	9f75a <Cl_dprep_controller+0x158a>
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   9f642:	f04f 0300 	mov.w	r3, #0
   9f646:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9f64a:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9f64e:	4619      	mov	r1, r3
   9f650:	2014      	movs	r0, #20
   9f652:	4b9b      	ldr	r3, [pc, #620]	; (9f8c0 <Cl_dprep_controller+0x16f0>)
   9f654:	4798      	blx	r3
// 						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// //						temp_temp3 = temp_temp3 - 3.1 - 2;										// sensor offset
						temp3_cel = (float)temp_temp3;
   9f656:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9f658:	4b9a      	ldr	r3, [pc, #616]	; (9f8c4 <Cl_dprep_controller+0x16f4>)
   9f65a:	4610      	mov	r0, r2
   9f65c:	4798      	blx	r3
   9f65e:	4603      	mov	r3, r0
   9f660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						
							Cl_Dprep_filling_secondscounter++;
   9f664:	4b98      	ldr	r3, [pc, #608]	; (9f8c8 <Cl_dprep_controller+0x16f8>)
   9f666:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f66a:	b29b      	uxth	r3, r3
   9f66c:	3301      	adds	r3, #1
   9f66e:	b29b      	uxth	r3, r3
   9f670:	b21a      	sxth	r2, r3
   9f672:	4b95      	ldr	r3, [pc, #596]	; (9f8c8 <Cl_dprep_controller+0x16f8>)
   9f674:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9f676:	4b95      	ldr	r3, [pc, #596]	; (9f8cc <Cl_dprep_controller+0x16fc>)
   9f678:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f67c:	b29b      	uxth	r3, r3
   9f67e:	3301      	adds	r3, #1
   9f680:	b29b      	uxth	r3, r3
   9f682:	b21a      	sxth	r2, r3
   9f684:	4b91      	ldr	r3, [pc, #580]	; (9f8cc <Cl_dprep_controller+0x16fc>)
   9f686:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9f688:	4b90      	ldr	r3, [pc, #576]	; (9f8cc <Cl_dprep_controller+0x16fc>)
   9f68a:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f68e:	2b1e      	cmp	r3, #30
   9f690:	d114      	bne.n	9f6bc <Cl_dprep_controller+0x14ec>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9f692:	2101      	movs	r1, #1
   9f694:	200c      	movs	r0, #12
   9f696:	4b8e      	ldr	r3, [pc, #568]	; (9f8d0 <Cl_dprep_controller+0x1700>)
   9f698:	4798      	blx	r3
   9f69a:	4603      	mov	r3, r0
   9f69c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9f6a0:	2101      	movs	r1, #1
   9f6a2:	200d      	movs	r0, #13
   9f6a4:	4b8a      	ldr	r3, [pc, #552]	; (9f8d0 <Cl_dprep_controller+0x1700>)
   9f6a6:	4798      	blx	r3
   9f6a8:	4603      	mov	r3, r0
   9f6aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9f6ae:	2101      	movs	r1, #1
   9f6b0:	200e      	movs	r0, #14
   9f6b2:	4b87      	ldr	r3, [pc, #540]	; (9f8d0 <Cl_dprep_controller+0x1700>)
   9f6b4:	4798      	blx	r3
   9f6b6:	4603      	mov	r3, r0
   9f6b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   9f6bc:	4b83      	ldr	r3, [pc, #524]	; (9f8cc <Cl_dprep_controller+0x16fc>)
   9f6be:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f6c2:	2b3c      	cmp	r3, #60	; 0x3c
   9f6c4:	d101      	bne.n	9f6ca <Cl_dprep_controller+0x14fa>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9f6c6:	4b83      	ldr	r3, [pc, #524]	; (9f8d4 <Cl_dprep_controller+0x1704>)
   9f6c8:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9f6ca:	2003      	movs	r0, #3
   9f6cc:	4b82      	ldr	r3, [pc, #520]	; (9f8d8 <Cl_dprep_controller+0x1708>)
   9f6ce:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9f6d0:	4b82      	ldr	r3, [pc, #520]	; (9f8dc <Cl_dprep_controller+0x170c>)
   9f6d2:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f6d6:	2b04      	cmp	r3, #4
   9f6d8:	dd3e      	ble.n	9f758 <Cl_dprep_controller+0x1588>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9f6da:	4b80      	ldr	r3, [pc, #512]	; (9f8dc <Cl_dprep_controller+0x170c>)
   9f6dc:	2200      	movs	r2, #0
   9f6de:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   9f6e0:	2101      	movs	r1, #1
   9f6e2:	2009      	movs	r0, #9
   9f6e4:	4b7e      	ldr	r3, [pc, #504]	; (9f8e0 <Cl_dprep_controller+0x1710>)
   9f6e6:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   9f6e8:	4b7e      	ldr	r3, [pc, #504]	; (9f8e4 <Cl_dprep_controller+0x1714>)
   9f6ea:	695b      	ldr	r3, [r3, #20]
   9f6ec:	67fb      	str	r3, [r7, #124]	; 0x7c
								 Cl_Uint16Type potvalue=0;
   9f6ee:	2300      	movs	r3, #0
   9f6f0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   9f6f4:	4b7c      	ldr	r3, [pc, #496]	; (9f8e8 <Cl_dprep_controller+0x1718>)
   9f6f6:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   9f6f8:	4b7c      	ldr	r3, [pc, #496]	; (9f8ec <Cl_dprep_controller+0x171c>)
   9f6fa:	4798      	blx	r3
   9f6fc:	4603      	mov	r3, r0
   9f6fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9f702:	4b7b      	ldr	r3, [pc, #492]	; (9f8f0 <Cl_dprep_controller+0x1720>)
   9f704:	2201      	movs	r2, #1
   9f706:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   9f708:	4b7a      	ldr	r3, [pc, #488]	; (9f8f4 <Cl_dprep_controller+0x1724>)
   9f70a:	2208      	movs	r2, #8
   9f70c:	701a      	strb	r2, [r3, #0]
							}
						break;
   9f70e:	e023      	b.n	9f758 <Cl_dprep_controller+0x1588>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_dprep_StopMixing();
   9f710:	4b79      	ldr	r3, [pc, #484]	; (9f8f8 <Cl_dprep_controller+0x1728>)
   9f712:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9f714:	2100      	movs	r1, #0
   9f716:	2009      	movs	r0, #9
   9f718:	4b71      	ldr	r3, [pc, #452]	; (9f8e0 <Cl_dprep_controller+0x1710>)
   9f71a:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   9f71c:	4b75      	ldr	r3, [pc, #468]	; (9f8f4 <Cl_dprep_controller+0x1724>)
   9f71e:	2207      	movs	r2, #7
   9f720:	701a      	strb	r2, [r3, #0]
						break;
   9f722:	e01a      	b.n	9f75a <Cl_dprep_controller+0x158a>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f724:	4b75      	ldr	r3, [pc, #468]	; (9f8fc <Cl_dprep_controller+0x172c>)
   9f726:	4798      	blx	r3
   9f728:	4603      	mov	r3, r0
   9f72a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f72e:	e014      	b.n	9f75a <Cl_dprep_controller+0x158a>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f730:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f734:	4619      	mov	r1, r3
   9f736:	203c      	movs	r0, #60	; 0x3c
   9f738:	4b71      	ldr	r3, [pc, #452]	; (9f900 <Cl_dprep_controller+0x1730>)
   9f73a:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   9f73c:	e00d      	b.n	9f75a <Cl_dprep_controller+0x158a>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9f73e:	4b71      	ldr	r3, [pc, #452]	; (9f904 <Cl_dprep_controller+0x1734>)
   9f740:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9f742:	4b71      	ldr	r3, [pc, #452]	; (9f908 <Cl_dprep_controller+0x1738>)
   9f744:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9f746:	4b71      	ldr	r3, [pc, #452]	; (9f90c <Cl_dprep_controller+0x173c>)
   9f748:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9f74a:	4b5c      	ldr	r3, [pc, #368]	; (9f8bc <Cl_dprep_controller+0x16ec>)
   9f74c:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   9f74e:	4b70      	ldr	r3, [pc, #448]	; (9f910 <Cl_dprep_controller+0x1740>)
   9f750:	4798      	blx	r3
						break;
   9f752:	e002      	b.n	9f75a <Cl_dprep_controller+0x158a>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   9f754:	bf00      	nop
   9f756:	e1ce      	b.n	9faf6 <Cl_dprep_controller+0x1926>
								sv_cntrl_enable_bypass();
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
							}
						break;
   9f758:	bf00      	nop
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9f75a:	e1cc      	b.n	9faf6 <Cl_dprep_controller+0x1926>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   9f75c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f760:	2b0d      	cmp	r3, #13
   9f762:	d000      	beq.n	9f766 <Cl_dprep_controller+0x1596>
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   9f764:	e006      	b.n	9f774 <Cl_dprep_controller+0x15a4>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
							{
		
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9f766:	4b6b      	ldr	r3, [pc, #428]	; (9f914 <Cl_dprep_controller+0x1744>)
   9f768:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f76a:	4b6b      	ldr	r3, [pc, #428]	; (9f918 <Cl_dprep_controller+0x1748>)
   9f76c:	4798      	blx	r3
								sv_prop_startmixing();
   9f76e:	4b6b      	ldr	r3, [pc, #428]	; (9f91c <Cl_dprep_controller+0x174c>)
   9f770:	4798      	blx	r3
								 break;
   9f772:	bf00      	nop
								 default:break;
							}
		break;
   9f774:	e1c2      	b.n	9fafc <Cl_dprep_controller+0x192c>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   9f776:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f77a:	3b16      	subs	r3, #22
   9f77c:	2b06      	cmp	r3, #6
   9f77e:	f200 81bc 	bhi.w	9fafa <Cl_dprep_controller+0x192a>
   9f782:	a201      	add	r2, pc, #4	; (adr r2, 9f788 <Cl_dprep_controller+0x15b8>)
   9f784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f788:	0009f7f1 	.word	0x0009f7f1
   9f78c:	0009f7eb 	.word	0x0009f7eb
   9f790:	0009fafb 	.word	0x0009fafb
   9f794:	0009f7b3 	.word	0x0009f7b3
   9f798:	0009f7a5 	.word	0x0009f7a5
   9f79c:	0009f7cf 	.word	0x0009f7cf
   9f7a0:	0009f7bf 	.word	0x0009f7bf
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f7a4:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f7a8:	4619      	mov	r1, r3
   9f7aa:	203c      	movs	r0, #60	; 0x3c
   9f7ac:	4b54      	ldr	r3, [pc, #336]	; (9f900 <Cl_dprep_controller+0x1730>)
   9f7ae:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   9f7b0:	e082      	b.n	9f8b8 <Cl_dprep_controller+0x16e8>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f7b2:	4b52      	ldr	r3, [pc, #328]	; (9f8fc <Cl_dprep_controller+0x172c>)
   9f7b4:	4798      	blx	r3
   9f7b6:	4603      	mov	r3, r0
   9f7b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				break;
   9f7bc:	e07c      	b.n	9f8b8 <Cl_dprep_controller+0x16e8>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9f7be:	2100      	movs	r1, #0
   9f7c0:	2004      	movs	r0, #4
   9f7c2:	4b57      	ldr	r3, [pc, #348]	; (9f920 <Cl_dprep_controller+0x1750>)
   9f7c4:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   9f7c6:	4b57      	ldr	r3, [pc, #348]	; (9f924 <Cl_dprep_controller+0x1754>)
   9f7c8:	2201      	movs	r2, #1
   9f7ca:	701a      	strb	r2, [r3, #0]
				break;
   9f7cc:	e074      	b.n	9f8b8 <Cl_dprep_controller+0x16e8>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9f7ce:	4b55      	ldr	r3, [pc, #340]	; (9f924 <Cl_dprep_controller+0x1754>)
   9f7d0:	781b      	ldrb	r3, [r3, #0]
   9f7d2:	2b02      	cmp	r3, #2
   9f7d4:	d16d      	bne.n	9f8b2 <Cl_dprep_controller+0x16e2>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9f7d6:	204c      	movs	r0, #76	; 0x4c
   9f7d8:	4b53      	ldr	r3, [pc, #332]	; (9f928 <Cl_dprep_controller+0x1758>)
   9f7da:	4798      	blx	r3
   9f7dc:	4603      	mov	r3, r0
   9f7de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   9f7e2:	4b44      	ldr	r3, [pc, #272]	; (9f8f4 <Cl_dprep_controller+0x1724>)
   9f7e4:	2209      	movs	r2, #9
   9f7e6:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   9f7e8:	e063      	b.n	9f8b2 <Cl_dprep_controller+0x16e2>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   9f7ea:	4b34      	ldr	r3, [pc, #208]	; (9f8bc <Cl_dprep_controller+0x16ec>)
   9f7ec:	4798      	blx	r3
				break;
   9f7ee:	e063      	b.n	9f8b8 <Cl_dprep_controller+0x16e8>
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   9f7f0:	4b4c      	ldr	r3, [pc, #304]	; (9f924 <Cl_dprep_controller+0x1754>)
   9f7f2:	781b      	ldrb	r3, [r3, #0]
   9f7f4:	2b01      	cmp	r3, #1
   9f7f6:	d13d      	bne.n	9f874 <Cl_dprep_controller+0x16a4>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9f7f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   9f7fc:	4619      	mov	r1, r3
   9f7fe:	200a      	movs	r0, #10
   9f800:	4b2f      	ldr	r3, [pc, #188]	; (9f8c0 <Cl_dprep_controller+0x16f0>)
   9f802:	4798      	blx	r3
				
					if(temp == 0)
   9f804:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9f806:	2b00      	cmp	r3, #0
   9f808:	d134      	bne.n	9f874 <Cl_dprep_controller+0x16a4>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9f80a:	2205      	movs	r2, #5
   9f80c:	4947      	ldr	r1, [pc, #284]	; (9f92c <Cl_dprep_controller+0x175c>)
   9f80e:	2018      	movs	r0, #24
   9f810:	4b47      	ldr	r3, [pc, #284]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f812:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   9f814:	2200      	movs	r2, #0
   9f816:	2100      	movs	r1, #0
   9f818:	2027      	movs	r0, #39	; 0x27
   9f81a:	4b45      	ldr	r3, [pc, #276]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f81c:	4798      	blx	r3
   9f81e:	4603      	mov	r3, r0
   9f820:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   9f824:	4b3f      	ldr	r3, [pc, #252]	; (9f924 <Cl_dprep_controller+0x1754>)
   9f826:	2202      	movs	r2, #2
   9f828:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   9f82a:	4b2e      	ldr	r3, [pc, #184]	; (9f8e4 <Cl_dprep_controller+0x1714>)
   9f82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   9f82e:	60bb      	str	r3, [r7, #8]
										hep_calibration(temp);
   9f830:	68bb      	ldr	r3, [r7, #8]
   9f832:	4618      	mov	r0, r3
   9f834:	4b3f      	ldr	r3, [pc, #252]	; (9f934 <Cl_dprep_controller+0x1764>)
   9f836:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9f838:	f107 0308 	add.w	r3, r7, #8
   9f83c:	2202      	movs	r2, #2
   9f83e:	4619      	mov	r1, r3
   9f840:	2019      	movs	r0, #25
   9f842:	4b3b      	ldr	r3, [pc, #236]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f844:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   9f846:	2202      	movs	r2, #2
   9f848:	493b      	ldr	r1, [pc, #236]	; (9f938 <Cl_dprep_controller+0x1768>)
   9f84a:	2019      	movs	r0, #25
   9f84c:	4b38      	ldr	r3, [pc, #224]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f84e:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   9f850:	4b39      	ldr	r3, [pc, #228]	; (9f938 <Cl_dprep_controller+0x1768>)
   9f852:	681b      	ldr	r3, [r3, #0]
   9f854:	4619      	mov	r1, r3
   9f856:	2006      	movs	r0, #6
   9f858:	4b38      	ldr	r3, [pc, #224]	; (9f93c <Cl_dprep_controller+0x176c>)
   9f85a:	4798      	blx	r3
										cl_wait(100);
   9f85c:	2064      	movs	r0, #100	; 0x64
   9f85e:	4b38      	ldr	r3, [pc, #224]	; (9f940 <Cl_dprep_controller+0x1770>)
   9f860:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9f862:	2100      	movs	r1, #0
   9f864:	200a      	movs	r0, #10
   9f866:	4b35      	ldr	r3, [pc, #212]	; (9f93c <Cl_dprep_controller+0x176c>)
   9f868:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   9f86a:	2207      	movs	r2, #7
   9f86c:	4935      	ldr	r1, [pc, #212]	; (9f944 <Cl_dprep_controller+0x1774>)
   9f86e:	2018      	movs	r0, #24
   9f870:	4b2f      	ldr	r3, [pc, #188]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f872:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9f874:	4b2b      	ldr	r3, [pc, #172]	; (9f924 <Cl_dprep_controller+0x1754>)
   9f876:	781b      	ldrb	r3, [r3, #0]
   9f878:	2b02      	cmp	r3, #2
   9f87a:	d11c      	bne.n	9f8b6 <Cl_dprep_controller+0x16e6>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   9f87c:	4b32      	ldr	r3, [pc, #200]	; (9f948 <Cl_dprep_controller+0x1778>)
   9f87e:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f882:	b29b      	uxth	r3, r3
   9f884:	3301      	adds	r3, #1
   9f886:	b29b      	uxth	r3, r3
   9f888:	b21a      	sxth	r2, r3
   9f88a:	4b2f      	ldr	r3, [pc, #188]	; (9f948 <Cl_dprep_controller+0x1778>)
   9f88c:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   9f88e:	4b2e      	ldr	r3, [pc, #184]	; (9f948 <Cl_dprep_controller+0x1778>)
   9f890:	f9b3 3000 	ldrsh.w	r3, [r3]
   9f894:	2b3c      	cmp	r3, #60	; 0x3c
   9f896:	d10e      	bne.n	9f8b6 <Cl_dprep_controller+0x16e6>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   9f898:	4b2b      	ldr	r3, [pc, #172]	; (9f948 <Cl_dprep_controller+0x1778>)
   9f89a:	2200      	movs	r2, #0
   9f89c:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   9f89e:	2207      	movs	r2, #7
   9f8a0:	492a      	ldr	r1, [pc, #168]	; (9f94c <Cl_dprep_controller+0x177c>)
   9f8a2:	2018      	movs	r0, #24
   9f8a4:	4b22      	ldr	r3, [pc, #136]	; (9f930 <Cl_dprep_controller+0x1760>)
   9f8a6:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9f8a8:	2100      	movs	r1, #0
   9f8aa:	2009      	movs	r0, #9
   9f8ac:	4b23      	ldr	r3, [pc, #140]	; (9f93c <Cl_dprep_controller+0x176c>)
   9f8ae:	4798      	blx	r3
					}
					}
				break;
   9f8b0:	e001      	b.n	9f8b6 <Cl_dprep_controller+0x16e6>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
				}
				
				break;
   9f8b2:	bf00      	nop
   9f8b4:	e121      	b.n	9fafa <Cl_dprep_controller+0x192a>
						Cl_Dprep_hepbolus_secondscounter = 0;
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
					}
					}
				break;
   9f8b6:	bf00      	nop
			}
		
		break;
   9f8b8:	e11f      	b.n	9fafa <Cl_dprep_controller+0x192a>
   9f8ba:	bf00      	nop
   9f8bc:	000a0d51 	.word	0x000a0d51
   9f8c0:	0008e6a1 	.word	0x0008e6a1
   9f8c4:	000a64e1 	.word	0x000a64e1
   9f8c8:	20071c3e 	.word	0x20071c3e
   9f8cc:	20071c4a 	.word	0x20071c4a
   9f8d0:	00082de1 	.word	0x00082de1
   9f8d4:	000a0565 	.word	0x000a0565
   9f8d8:	000a05c1 	.word	0x000a05c1
   9f8dc:	20071c4c 	.word	0x20071c4c
   9f8e0:	000883f1 	.word	0x000883f1
   9f8e4:	20072654 	.word	0x20072654
   9f8e8:	00099c55 	.word	0x00099c55
   9f8ec:	0009fdc5 	.word	0x0009fdc5
   9f8f0:	20071c60 	.word	0x20071c60
   9f8f4:	20071c5f 	.word	0x20071c5f
   9f8f8:	000a20d1 	.word	0x000a20d1
   9f8fc:	0009fe49 	.word	0x0009fe49
   9f900:	00082fbd 	.word	0x00082fbd
   9f904:	00099d65 	.word	0x00099d65
   9f908:	00099d51 	.word	0x00099d51
   9f90c:	00099d8d 	.word	0x00099d8d
   9f910:	00099c7d 	.word	0x00099c7d
   9f914:	000a1d11 	.word	0x000a1d11
   9f918:	00099c39 	.word	0x00099c39
   9f91c:	00099e51 	.word	0x00099e51
   9f920:	0009316d 	.word	0x0009316d
   9f924:	20071c5e 	.word	0x20071c5e
   9f928:	0008ba55 	.word	0x0008ba55
   9f92c:	000a8a2c 	.word	0x000a8a2c
   9f930:	0009b805 	.word	0x0009b805
   9f934:	00083fc9 	.word	0x00083fc9
   9f938:	20072164 	.word	0x20072164
   9f93c:	00093861 	.word	0x00093861
   9f940:	00093009 	.word	0x00093009
   9f944:	000a8a34 	.word	0x000a8a34
   9f948:	20071c3c 	.word	0x20071c3c
   9f94c:	000a8a3c 	.word	0x000a8a3c
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   9f950:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f954:	3b03      	subs	r3, #3
   9f956:	2b17      	cmp	r3, #23
   9f958:	f200 80c1 	bhi.w	9fade <Cl_dprep_controller+0x190e>
   9f95c:	a201      	add	r2, pc, #4	; (adr r2, 9f964 <Cl_dprep_controller+0x1794>)
   9f95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f962:	bf00      	nop
   9f964:	0009fa77 	.word	0x0009fa77
   9f968:	0009f9fd 	.word	0x0009f9fd
   9f96c:	0009fadf 	.word	0x0009fadf
   9f970:	0009fadf 	.word	0x0009fadf
   9f974:	0009fadf 	.word	0x0009fadf
   9f978:	0009fadf 	.word	0x0009fadf
   9f97c:	0009fadf 	.word	0x0009fadf
   9f980:	0009fadf 	.word	0x0009fadf
   9f984:	0009fadf 	.word	0x0009fadf
   9f988:	0009fadf 	.word	0x0009fadf
   9f98c:	0009fadf 	.word	0x0009fadf
   9f990:	0009fadf 	.word	0x0009fadf
   9f994:	0009fadf 	.word	0x0009fadf
   9f998:	0009fadf 	.word	0x0009fadf
   9f99c:	0009fadf 	.word	0x0009fadf
   9f9a0:	0009fadf 	.word	0x0009fadf
   9f9a4:	0009fadf 	.word	0x0009fadf
   9f9a8:	0009fadf 	.word	0x0009fadf
   9f9ac:	0009fadf 	.word	0x0009fadf
   9f9b0:	0009f9d9 	.word	0x0009f9d9
   9f9b4:	0009f9d3 	.word	0x0009f9d3
   9f9b8:	0009fadf 	.word	0x0009fadf
   9f9bc:	0009fad3 	.word	0x0009fad3
   9f9c0:	0009f9c5 	.word	0x0009f9c5
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f9c4:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f9c8:	4619      	mov	r1, r3
   9f9ca:	203c      	movs	r0, #60	; 0x3c
   9f9cc:	4b4e      	ldr	r3, [pc, #312]	; (9fb08 <Cl_dprep_controller+0x1938>)
   9f9ce:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   9f9d0:	e08c      	b.n	9faec <Cl_dprep_controller+0x191c>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   9f9d2:	4b4e      	ldr	r3, [pc, #312]	; (9fb0c <Cl_dprep_controller+0x193c>)
   9f9d4:	4798      	blx	r3
					break;
   9f9d6:	e089      	b.n	9faec <Cl_dprep_controller+0x191c>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9f9d8:	2004      	movs	r0, #4
   9f9da:	4b4d      	ldr	r3, [pc, #308]	; (9fb10 <Cl_dprep_controller+0x1940>)
   9f9dc:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9f9de:	f107 0330 	add.w	r3, r7, #48	; 0x30
   9f9e2:	4619      	mov	r1, r3
   9f9e4:	200a      	movs	r0, #10
   9f9e6:	4b4b      	ldr	r3, [pc, #300]	; (9fb14 <Cl_dprep_controller+0x1944>)
   9f9e8:	4798      	blx	r3
					if( temp == 0)
   9f9ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9f9ec:	2b00      	cmp	r3, #0
   9f9ee:	d178      	bne.n	9fae2 <Cl_dprep_controller+0x1912>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9f9f0:	2205      	movs	r2, #5
   9f9f2:	4949      	ldr	r1, [pc, #292]	; (9fb18 <Cl_dprep_controller+0x1948>)
   9f9f4:	2018      	movs	r0, #24
   9f9f6:	4b49      	ldr	r3, [pc, #292]	; (9fb1c <Cl_dprep_controller+0x194c>)
   9f9f8:	4798      	blx	r3
					}
					break;
   9f9fa:	e072      	b.n	9fae2 <Cl_dprep_controller+0x1912>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9f9fc:	4b48      	ldr	r3, [pc, #288]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9f9fe:	7e1b      	ldrb	r3, [r3, #24]
   9fa00:	2b00      	cmp	r3, #0
   9fa02:	d070      	beq.n	9fae6 <Cl_dprep_controller+0x1916>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9fa04:	4b46      	ldr	r3, [pc, #280]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9fa06:	791b      	ldrb	r3, [r3, #4]
   9fa08:	2b03      	cmp	r3, #3
   9fa0a:	d002      	beq.n	9fa12 <Cl_dprep_controller+0x1842>
   9fa0c:	2b04      	cmp	r3, #4
   9fa0e:	d015      	beq.n	9fa3c <Cl_dprep_controller+0x186c>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9fa10:	e030      	b.n	9fa74 <Cl_dprep_controller+0x18a4>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9fa12:	2316      	movs	r3, #22
   9fa14:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9fa18:	2303      	movs	r3, #3
   9fa1a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;
   9fa1e:	2300      	movs	r3, #0
   9fa20:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fa24:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9fa28:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fa2c:	2202      	movs	r2, #2
   9fa2e:	4618      	mov	r0, r3
   9fa30:	4b3a      	ldr	r3, [pc, #232]	; (9fb1c <Cl_dprep_controller+0x194c>)
   9fa32:	4798      	blx	r3
   9fa34:	4603      	mov	r3, r0
   9fa36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9fa3a:	e01b      	b.n	9fa74 <Cl_dprep_controller+0x18a4>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9fa3c:	2316      	movs	r3, #22
   9fa3e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9fa42:	2304      	movs	r3, #4
   9fa44:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9fa48:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fa4c:	3301      	adds	r3, #1
   9fa4e:	4619      	mov	r1, r3
   9fa50:	2004      	movs	r0, #4
   9fa52:	4b34      	ldr	r3, [pc, #208]	; (9fb24 <Cl_dprep_controller+0x1954>)
   9fa54:	4798      	blx	r3
   9fa56:	4603      	mov	r3, r0
   9fa58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fa5c:	f107 0170 	add.w	r1, r7, #112	; 0x70
   9fa60:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   9fa64:	2202      	movs	r2, #2
   9fa66:	4618      	mov	r0, r3
   9fa68:	4b2c      	ldr	r3, [pc, #176]	; (9fb1c <Cl_dprep_controller+0x194c>)
   9fa6a:	4798      	blx	r3
   9fa6c:	4603      	mov	r3, r0
   9fa6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9fa72:	bf00      	nop
									default:break;
								}
							}
				
						break;
   9fa74:	e037      	b.n	9fae6 <Cl_dprep_controller+0x1916>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9fa76:	4b2a      	ldr	r3, [pc, #168]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9fa78:	7e1b      	ldrb	r3, [r3, #24]
   9fa7a:	2b00      	cmp	r3, #0
   9fa7c:	d035      	beq.n	9faea <Cl_dprep_controller+0x191a>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9fa7e:	4b28      	ldr	r3, [pc, #160]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9fa80:	791b      	ldrb	r3, [r3, #4]
   9fa82:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9fa86:	2300      	movs	r3, #0
   9fa88:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9fa8c:	e011      	b.n	9fab2 <Cl_dprep_controller+0x18e2>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9fa8e:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9fa92:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9fa96:	3201      	adds	r2, #1
   9fa98:	4921      	ldr	r1, [pc, #132]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9fa9a:	440a      	add	r2, r1
   9fa9c:	7912      	ldrb	r2, [r2, #4]
   9fa9e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9faa2:	440b      	add	r3, r1
   9faa4:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9faa8:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9faac:	3301      	adds	r3, #1
   9faae:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9fab2:	4b1b      	ldr	r3, [pc, #108]	; (9fb20 <Cl_dprep_controller+0x1950>)
   9fab4:	78db      	ldrb	r3, [r3, #3]
   9fab6:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9faba:	429a      	cmp	r2, r3
   9fabc:	d3e7      	bcc.n	9fa8e <Cl_dprep_controller+0x18be>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9fabe:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9fac2:	f897 0079 	ldrb.w	r0, [r7, #121]	; 0x79
   9fac6:	f107 0238 	add.w	r2, r7, #56	; 0x38
   9faca:	ca06      	ldmia	r2, {r1, r2}
   9facc:	4c16      	ldr	r4, [pc, #88]	; (9fb28 <Cl_dprep_controller+0x1958>)
   9face:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9fad0:	e00b      	b.n	9faea <Cl_dprep_controller+0x191a>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9fad2:	4b16      	ldr	r3, [pc, #88]	; (9fb2c <Cl_dprep_controller+0x195c>)
   9fad4:	4798      	blx	r3
   9fad6:	4603      	mov	r3, r0
   9fad8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9fadc:	e006      	b.n	9faec <Cl_dprep_controller+0x191c>
					default:
					break;
   9fade:	bf00      	nop
   9fae0:	e00c      	b.n	9fafc <Cl_dprep_controller+0x192c>
					if( temp == 0)
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
					}
					break;
   9fae2:	bf00      	nop
   9fae4:	e00a      	b.n	9fafc <Cl_dprep_controller+0x192c>
									break;
									default:break;
								}
							}
				
						break;
   9fae6:	bf00      	nop
   9fae8:	e008      	b.n	9fafc <Cl_dprep_controller+0x192c>
						 
						 
						 
								 }
	
						break;
   9faea:	bf00      	nop
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
					default:
					break;
				}
		break;
   9faec:	e006      	b.n	9fafc <Cl_dprep_controller+0x192c>
			}
			
			break;

		}
		break;
   9faee:	bf00      	nop
   9faf0:	e004      	b.n	9fafc <Cl_dprep_controller+0x192c>
			
		
		}
		}
		
		break;
   9faf2:	bf00      	nop
   9faf4:	e002      	b.n	9fafc <Cl_dprep_controller+0x192c>
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9faf6:	bf00      	nop
   9faf8:	e000      	b.n	9fafc <Cl_dprep_controller+0x192c>
					}
					}
				break;
			}
		
		break;
   9fafa:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   9fafc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
   9fb00:	4618      	mov	r0, r3
   9fb02:	37a4      	adds	r7, #164	; 0xa4
   9fb04:	46bd      	mov	sp, r7
   9fb06:	bd90      	pop	{r4, r7, pc}
   9fb08:	00082fbd 	.word	0x00082fbd
   9fb0c:	000a0d51 	.word	0x000a0d51
   9fb10:	000a05c1 	.word	0x000a05c1
   9fb14:	0008e6a1 	.word	0x0008e6a1
   9fb18:	000a8a2c 	.word	0x000a8a2c
   9fb1c:	0009b805 	.word	0x0009b805
   9fb20:	200723e8 	.word	0x200723e8
   9fb24:	0009a331 	.word	0x0009a331
   9fb28:	000a0ee5 	.word	0x000a0ee5
   9fb2c:	0009fe49 	.word	0x0009fe49

0009fb30 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   9fb30:	b480      	push	{r7}
   9fb32:	b083      	sub	sp, #12
   9fb34:	af00      	add	r7, sp, #0
   9fb36:	4603      	mov	r3, r0
   9fb38:	6039      	str	r1, [r7, #0]
   9fb3a:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   9fb3c:	79fb      	ldrb	r3, [r7, #7]
   9fb3e:	3b09      	subs	r3, #9
   9fb40:	2b53      	cmp	r3, #83	; 0x53
   9fb42:	f200 8137 	bhi.w	9fdb4 <cl_dprep_translatemacevent+0x284>
   9fb46:	a201      	add	r2, pc, #4	; (adr r2, 9fb4c <cl_dprep_translatemacevent+0x1c>)
   9fb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fb4c:	0009fca5 	.word	0x0009fca5
   9fb50:	0009fcad 	.word	0x0009fcad
   9fb54:	0009fcb5 	.word	0x0009fcb5
   9fb58:	0009fcbd 	.word	0x0009fcbd
   9fb5c:	0009fcc5 	.word	0x0009fcc5
   9fb60:	0009fccd 	.word	0x0009fccd
   9fb64:	0009fcdd 	.word	0x0009fcdd
   9fb68:	0009fce5 	.word	0x0009fce5
   9fb6c:	0009fcd5 	.word	0x0009fcd5
   9fb70:	0009fced 	.word	0x0009fced
   9fb74:	0009fcf5 	.word	0x0009fcf5
   9fb78:	0009fcfd 	.word	0x0009fcfd
   9fb7c:	0009fd9d 	.word	0x0009fd9d
   9fb80:	0009fd05 	.word	0x0009fd05
   9fb84:	0009fdb5 	.word	0x0009fdb5
   9fb88:	0009fdb5 	.word	0x0009fdb5
   9fb8c:	0009fdb5 	.word	0x0009fdb5
   9fb90:	0009fdb5 	.word	0x0009fdb5
   9fb94:	0009fdb5 	.word	0x0009fdb5
   9fb98:	0009fd5d 	.word	0x0009fd5d
   9fb9c:	0009fd6d 	.word	0x0009fd6d
   9fba0:	0009fd75 	.word	0x0009fd75
   9fba4:	0009fd7d 	.word	0x0009fd7d
   9fba8:	0009fdb5 	.word	0x0009fdb5
   9fbac:	0009fd65 	.word	0x0009fd65
   9fbb0:	0009fdb5 	.word	0x0009fdb5
   9fbb4:	0009fdb5 	.word	0x0009fdb5
   9fbb8:	0009fdb5 	.word	0x0009fdb5
   9fbbc:	0009fdb5 	.word	0x0009fdb5
   9fbc0:	0009fd85 	.word	0x0009fd85
   9fbc4:	0009fd8d 	.word	0x0009fd8d
   9fbc8:	0009fd95 	.word	0x0009fd95
   9fbcc:	0009fc9d 	.word	0x0009fc9d
   9fbd0:	0009fdb5 	.word	0x0009fdb5
   9fbd4:	0009fdb5 	.word	0x0009fdb5
   9fbd8:	0009fdb5 	.word	0x0009fdb5
   9fbdc:	0009fd55 	.word	0x0009fd55
   9fbe0:	0009fd4d 	.word	0x0009fd4d
   9fbe4:	0009fdb5 	.word	0x0009fdb5
   9fbe8:	0009fdb5 	.word	0x0009fdb5
   9fbec:	0009fdb5 	.word	0x0009fdb5
   9fbf0:	0009fdb5 	.word	0x0009fdb5
   9fbf4:	0009fdb5 	.word	0x0009fdb5
   9fbf8:	0009fdb5 	.word	0x0009fdb5
   9fbfc:	0009fdb5 	.word	0x0009fdb5
   9fc00:	0009fdb5 	.word	0x0009fdb5
   9fc04:	0009fdb5 	.word	0x0009fdb5
   9fc08:	0009fd0d 	.word	0x0009fd0d
   9fc0c:	0009fd15 	.word	0x0009fd15
   9fc10:	0009fd1d 	.word	0x0009fd1d
   9fc14:	0009fd25 	.word	0x0009fd25
   9fc18:	0009fd2d 	.word	0x0009fd2d
   9fc1c:	0009fd35 	.word	0x0009fd35
   9fc20:	0009fdb5 	.word	0x0009fdb5
   9fc24:	0009fdb5 	.word	0x0009fdb5
   9fc28:	0009fdb5 	.word	0x0009fdb5
   9fc2c:	0009fdb5 	.word	0x0009fdb5
   9fc30:	0009fdb5 	.word	0x0009fdb5
   9fc34:	0009fdb5 	.word	0x0009fdb5
   9fc38:	0009fdb5 	.word	0x0009fdb5
   9fc3c:	0009fdb5 	.word	0x0009fdb5
   9fc40:	0009fdb5 	.word	0x0009fdb5
   9fc44:	0009fdb5 	.word	0x0009fdb5
   9fc48:	0009fdb5 	.word	0x0009fdb5
   9fc4c:	0009fd3d 	.word	0x0009fd3d
   9fc50:	0009fdb5 	.word	0x0009fdb5
   9fc54:	0009fdb5 	.word	0x0009fdb5
   9fc58:	0009fd45 	.word	0x0009fd45
   9fc5c:	0009fdb5 	.word	0x0009fdb5
   9fc60:	0009fdb5 	.word	0x0009fdb5
   9fc64:	0009fdb5 	.word	0x0009fdb5
   9fc68:	0009fdb5 	.word	0x0009fdb5
   9fc6c:	0009fdb5 	.word	0x0009fdb5
   9fc70:	0009fdb5 	.word	0x0009fdb5
   9fc74:	0009fdb5 	.word	0x0009fdb5
   9fc78:	0009fdb5 	.word	0x0009fdb5
   9fc7c:	0009fdb5 	.word	0x0009fdb5
   9fc80:	0009fdb5 	.word	0x0009fdb5
   9fc84:	0009fdb5 	.word	0x0009fdb5
   9fc88:	0009fdb5 	.word	0x0009fdb5
   9fc8c:	0009fdb5 	.word	0x0009fdb5
   9fc90:	0009fdb5 	.word	0x0009fdb5
   9fc94:	0009fda5 	.word	0x0009fda5
   9fc98:	0009fdad 	.word	0x0009fdad
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   9fc9c:	683b      	ldr	r3, [r7, #0]
   9fc9e:	2201      	movs	r2, #1
   9fca0:	701a      	strb	r2, [r3, #0]
		break;
   9fca2:	e088      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   9fca4:	683b      	ldr	r3, [r7, #0]
   9fca6:	2202      	movs	r2, #2
   9fca8:	701a      	strb	r2, [r3, #0]
		break;
   9fcaa:	e084      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   9fcac:	683b      	ldr	r3, [r7, #0]
   9fcae:	2205      	movs	r2, #5
   9fcb0:	701a      	strb	r2, [r3, #0]
		break;
   9fcb2:	e080      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   9fcb4:	683b      	ldr	r3, [r7, #0]
   9fcb6:	2206      	movs	r2, #6
   9fcb8:	701a      	strb	r2, [r3, #0]
		break;
   9fcba:	e07c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   9fcbc:	683b      	ldr	r3, [r7, #0]
   9fcbe:	2207      	movs	r2, #7
   9fcc0:	701a      	strb	r2, [r3, #0]
		break;
   9fcc2:	e078      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   9fcc4:	683b      	ldr	r3, [r7, #0]
   9fcc6:	2203      	movs	r2, #3
   9fcc8:	701a      	strb	r2, [r3, #0]
		break;
   9fcca:	e074      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   9fccc:	683b      	ldr	r3, [r7, #0]
   9fcce:	2204      	movs	r2, #4
   9fcd0:	701a      	strb	r2, [r3, #0]
		break;
   9fcd2:	e070      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   9fcd4:	683b      	ldr	r3, [r7, #0]
   9fcd6:	2208      	movs	r2, #8
   9fcd8:	701a      	strb	r2, [r3, #0]
				break;
   9fcda:	e06c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   9fcdc:	683b      	ldr	r3, [r7, #0]
   9fcde:	220a      	movs	r2, #10
   9fce0:	701a      	strb	r2, [r3, #0]
		break;
   9fce2:	e068      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   9fce4:	683b      	ldr	r3, [r7, #0]
   9fce6:	220b      	movs	r2, #11
   9fce8:	701a      	strb	r2, [r3, #0]
		break;
   9fcea:	e064      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   9fcec:	683b      	ldr	r3, [r7, #0]
   9fcee:	220c      	movs	r2, #12
   9fcf0:	701a      	strb	r2, [r3, #0]
		break;
   9fcf2:	e060      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9fcf4:	683b      	ldr	r3, [r7, #0]
   9fcf6:	220d      	movs	r2, #13
   9fcf8:	701a      	strb	r2, [r3, #0]
		break;
   9fcfa:	e05c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   9fcfc:	683b      	ldr	r3, [r7, #0]
   9fcfe:	220e      	movs	r2, #14
   9fd00:	701a      	strb	r2, [r3, #0]
		break;	
   9fd02:	e058      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   9fd04:	683b      	ldr	r3, [r7, #0]
   9fd06:	2212      	movs	r2, #18
   9fd08:	701a      	strb	r2, [r3, #0]
		break;
   9fd0a:	e054      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   9fd0c:	683b      	ldr	r3, [r7, #0]
   9fd0e:	2213      	movs	r2, #19
   9fd10:	701a      	strb	r2, [r3, #0]
		break;
   9fd12:	e050      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   9fd14:	683b      	ldr	r3, [r7, #0]
   9fd16:	2214      	movs	r2, #20
   9fd18:	701a      	strb	r2, [r3, #0]
		break;
   9fd1a:	e04c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   9fd1c:	683b      	ldr	r3, [r7, #0]
   9fd1e:	2215      	movs	r2, #21
   9fd20:	701a      	strb	r2, [r3, #0]
		break;
   9fd22:	e048      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   9fd24:	683b      	ldr	r3, [r7, #0]
   9fd26:	2216      	movs	r2, #22
   9fd28:	701a      	strb	r2, [r3, #0]
		break;
   9fd2a:	e044      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   9fd2c:	683b      	ldr	r3, [r7, #0]
   9fd2e:	2217      	movs	r2, #23
   9fd30:	701a      	strb	r2, [r3, #0]
		break;			 
   9fd32:	e040      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   9fd34:	683b      	ldr	r3, [r7, #0]
   9fd36:	2218      	movs	r2, #24
   9fd38:	701a      	strb	r2, [r3, #0]
		break;
   9fd3a:	e03c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   9fd3c:	683b      	ldr	r3, [r7, #0]
   9fd3e:	2210      	movs	r2, #16
   9fd40:	701a      	strb	r2, [r3, #0]
		break;
   9fd42:	e038      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   9fd44:	683b      	ldr	r3, [r7, #0]
   9fd46:	2211      	movs	r2, #17
   9fd48:	701a      	strb	r2, [r3, #0]
		break;
   9fd4a:	e034      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   9fd4c:	683b      	ldr	r3, [r7, #0]
   9fd4e:	2219      	movs	r2, #25
   9fd50:	701a      	strb	r2, [r3, #0]
		break;
   9fd52:	e030      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   9fd54:	683b      	ldr	r3, [r7, #0]
   9fd56:	221a      	movs	r2, #26
   9fd58:	701a      	strb	r2, [r3, #0]
		break;
   9fd5a:	e02c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   9fd5c:	683b      	ldr	r3, [r7, #0]
   9fd5e:	221b      	movs	r2, #27
   9fd60:	701a      	strb	r2, [r3, #0]
		break;
   9fd62:	e028      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   9fd64:	683b      	ldr	r3, [r7, #0]
   9fd66:	221c      	movs	r2, #28
   9fd68:	701a      	strb	r2, [r3, #0]
		break;
   9fd6a:	e024      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   9fd6c:	683b      	ldr	r3, [r7, #0]
   9fd6e:	221d      	movs	r2, #29
   9fd70:	701a      	strb	r2, [r3, #0]
		break;
   9fd72:	e020      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   9fd74:	683b      	ldr	r3, [r7, #0]
   9fd76:	221e      	movs	r2, #30
   9fd78:	701a      	strb	r2, [r3, #0]
		break;
   9fd7a:	e01c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   9fd7c:	683b      	ldr	r3, [r7, #0]
   9fd7e:	221f      	movs	r2, #31
   9fd80:	701a      	strb	r2, [r3, #0]
		break;
   9fd82:	e018      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   9fd84:	683b      	ldr	r3, [r7, #0]
   9fd86:	2221      	movs	r2, #33	; 0x21
   9fd88:	701a      	strb	r2, [r3, #0]
		break;
   9fd8a:	e014      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   9fd8c:	683b      	ldr	r3, [r7, #0]
   9fd8e:	2222      	movs	r2, #34	; 0x22
   9fd90:	701a      	strb	r2, [r3, #0]
		break;
   9fd92:	e010      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   9fd94:	683b      	ldr	r3, [r7, #0]
   9fd96:	2223      	movs	r2, #35	; 0x23
   9fd98:	701a      	strb	r2, [r3, #0]
		break;
   9fd9a:	e00c      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   9fd9c:	683b      	ldr	r3, [r7, #0]
   9fd9e:	220f      	movs	r2, #15
   9fda0:	701a      	strb	r2, [r3, #0]
		break;
   9fda2:	e008      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   9fda4:	683b      	ldr	r3, [r7, #0]
   9fda6:	225b      	movs	r2, #91	; 0x5b
   9fda8:	701a      	strb	r2, [r3, #0]
		break;
   9fdaa:	e004      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   9fdac:	683b      	ldr	r3, [r7, #0]
   9fdae:	225c      	movs	r2, #92	; 0x5c
   9fdb0:	701a      	strb	r2, [r3, #0]
		break;
   9fdb2:	e000      	b.n	9fdb6 <cl_dprep_translatemacevent+0x286>
		default:
		break;
   9fdb4:	bf00      	nop
	}
		 return CL_OK;
   9fdb6:	2300      	movs	r3, #0
}
   9fdb8:	4618      	mov	r0, r3
   9fdba:	370c      	adds	r7, #12
   9fdbc:	46bd      	mov	sp, r7
   9fdbe:	bc80      	pop	{r7}
   9fdc0:	4770      	bx	lr
   9fdc2:	bf00      	nop

0009fdc4 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   9fdc4:	b580      	push	{r7, lr}
   9fdc6:	b082      	sub	sp, #8
   9fdc8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9fdca:	2300      	movs	r3, #0
   9fdcc:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   9fdce:	2300      	movs	r3, #0
   9fdd0:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   9fdd2:	4b15      	ldr	r3, [pc, #84]	; (9fe28 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   9fdd4:	2200      	movs	r2, #0
   9fdd6:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   9fdd8:	4b14      	ldr	r3, [pc, #80]	; (9fe2c <cl_dprep_notifydacandgotodpreptandby+0x68>)
   9fdda:	2200      	movs	r2, #0
   9fddc:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   9fdde:	4b14      	ldr	r3, [pc, #80]	; (9fe30 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   9fde0:	2200      	movs	r2, #0
   9fde2:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   9fde4:	4b13      	ldr	r3, [pc, #76]	; (9fe34 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   9fde6:	2200      	movs	r2, #0
   9fde8:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   9fdea:	4b13      	ldr	r3, [pc, #76]	; (9fe38 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   9fdec:	2200      	movs	r2, #0
   9fdee:	601a      	str	r2, [r3, #0]
		data = 1;
   9fdf0:	2301      	movs	r3, #1
   9fdf2:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   9fdf4:	1dbb      	adds	r3, r7, #6
   9fdf6:	2201      	movs	r2, #1
   9fdf8:	4619      	mov	r1, r3
   9fdfa:	2002      	movs	r0, #2
   9fdfc:	4b0f      	ldr	r3, [pc, #60]	; (9fe3c <cl_dprep_notifydacandgotodpreptandby+0x78>)
   9fdfe:	4798      	blx	r3
   9fe00:	4603      	mov	r3, r0
   9fe02:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   9fe04:	1dbb      	adds	r3, r7, #6
   9fe06:	2200      	movs	r2, #0
   9fe08:	4619      	mov	r1, r3
   9fe0a:	2010      	movs	r0, #16
   9fe0c:	4b0c      	ldr	r3, [pc, #48]	; (9fe40 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   9fe0e:	4798      	blx	r3
   9fe10:	4603      	mov	r3, r0
   9fe12:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9fe14:	204c      	movs	r0, #76	; 0x4c
   9fe16:	4b0b      	ldr	r3, [pc, #44]	; (9fe44 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   9fe18:	4798      	blx	r3
   9fe1a:	4603      	mov	r3, r0
   9fe1c:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   9fe1e:	79fb      	ldrb	r3, [r7, #7]
	}
   9fe20:	4618      	mov	r0, r3
   9fe22:	3708      	adds	r7, #8
   9fe24:	46bd      	mov	sp, r7
   9fe26:	bd80      	pop	{r7, pc}
   9fe28:	20071c64 	.word	0x20071c64
   9fe2c:	20071c68 	.word	0x20071c68
   9fe30:	20071c6c 	.word	0x20071c6c
   9fe34:	20071c70 	.word	0x20071c70
   9fe38:	20071c74 	.word	0x20071c74
   9fe3c:	0009a369 	.word	0x0009a369
   9fe40:	0009b805 	.word	0x0009b805
   9fe44:	0008ba55 	.word	0x0008ba55

0009fe48 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   9fe48:	b580      	push	{r7, lr}
   9fe4a:	b082      	sub	sp, #8
   9fe4c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9fe4e:	2300      	movs	r3, #0
   9fe50:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9fe52:	2351      	movs	r3, #81	; 0x51
   9fe54:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   9fe56:	4b04      	ldr	r3, [pc, #16]	; (9fe68 <Cl_Dprep_ProcessAlarms+0x20>)
   9fe58:	4798      	blx	r3
   9fe5a:	4603      	mov	r3, r0
   9fe5c:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   9fe5e:	79fb      	ldrb	r3, [r7, #7]
	}
   9fe60:	4618      	mov	r0, r3
   9fe62:	3708      	adds	r7, #8
   9fe64:	46bd      	mov	sp, r7
   9fe66:	bd80      	pop	{r7, pc}
   9fe68:	0009fe6d 	.word	0x0009fe6d

0009fe6c <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   9fe6c:	b580      	push	{r7, lr}
   9fe6e:	b084      	sub	sp, #16
   9fe70:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9fe72:	2300      	movs	r3, #0
   9fe74:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   9fe76:	2300      	movs	r3, #0
   9fe78:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   9fe7a:	2300      	movs	r3, #0
   9fe7c:	713b      	strb	r3, [r7, #4]
   9fe7e:	2300      	movs	r3, #0
   9fe80:	717b      	strb	r3, [r7, #5]
   9fe82:	2300      	movs	r3, #0
   9fe84:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9fe86:	2351      	movs	r3, #81	; 0x51
   9fe88:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9fe8a:	2300      	movs	r3, #0
   9fe8c:	73bb      	strb	r3, [r7, #14]
   9fe8e:	e068      	b.n	9ff62 <Cl_Dprep_UpdateAlarmTable+0xf6>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   9fe90:	7bba      	ldrb	r2, [r7, #14]
   9fe92:	4938      	ldr	r1, [pc, #224]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9fe94:	4613      	mov	r3, r2
   9fe96:	00db      	lsls	r3, r3, #3
   9fe98:	1a9b      	subs	r3, r3, r2
   9fe9a:	440b      	add	r3, r1
   9fe9c:	7818      	ldrb	r0, [r3, #0]
   9fe9e:	7bba      	ldrb	r2, [r7, #14]
   9fea0:	4613      	mov	r3, r2
   9fea2:	00db      	lsls	r3, r3, #3
   9fea4:	1a9b      	subs	r3, r3, r2
   9fea6:	4a33      	ldr	r2, [pc, #204]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9fea8:	4413      	add	r3, r2
   9feaa:	3302      	adds	r3, #2
   9feac:	4619      	mov	r1, r3
   9feae:	4b32      	ldr	r3, [pc, #200]	; (9ff78 <Cl_Dprep_UpdateAlarmTable+0x10c>)
   9feb0:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   9feb2:	7bba      	ldrb	r2, [r7, #14]
   9feb4:	492f      	ldr	r1, [pc, #188]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9feb6:	4613      	mov	r3, r2
   9feb8:	00db      	lsls	r3, r3, #3
   9feba:	1a9b      	subs	r3, r3, r2
   9febc:	440b      	add	r3, r1
   9febe:	3302      	adds	r3, #2
   9fec0:	781b      	ldrb	r3, [r3, #0]
   9fec2:	2b00      	cmp	r3, #0
   9fec4:	d022      	beq.n	9ff0c <Cl_Dprep_UpdateAlarmTable+0xa0>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   9fec6:	7bba      	ldrb	r2, [r7, #14]
   9fec8:	492a      	ldr	r1, [pc, #168]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9feca:	4613      	mov	r3, r2
   9fecc:	00db      	lsls	r3, r3, #3
   9fece:	1a9b      	subs	r3, r3, r2
   9fed0:	440b      	add	r3, r1
   9fed2:	3303      	adds	r3, #3
   9fed4:	781b      	ldrb	r3, [r3, #0]
   9fed6:	f083 0301 	eor.w	r3, r3, #1
   9feda:	b2db      	uxtb	r3, r3
   9fedc:	2b00      	cmp	r3, #0
   9fede:	d03d      	beq.n	9ff5c <Cl_Dprep_UpdateAlarmTable+0xf0>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   9fee0:	7bba      	ldrb	r2, [r7, #14]
   9fee2:	4924      	ldr	r1, [pc, #144]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9fee4:	4613      	mov	r3, r2
   9fee6:	00db      	lsls	r3, r3, #3
   9fee8:	1a9b      	subs	r3, r3, r2
   9feea:	440b      	add	r3, r1
   9feec:	3303      	adds	r3, #3
   9feee:	2201      	movs	r2, #1
   9fef0:	701a      	strb	r2, [r3, #0]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9fef2:	7bba      	ldrb	r2, [r7, #14]
   9fef4:	491f      	ldr	r1, [pc, #124]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9fef6:	4613      	mov	r3, r2
   9fef8:	00db      	lsls	r3, r3, #3
   9fefa:	1a9b      	subs	r3, r3, r2
   9fefc:	440b      	add	r3, r1
   9fefe:	781b      	ldrb	r3, [r3, #0]
   9ff00:	4618      	mov	r0, r3
   9ff02:	4b1e      	ldr	r3, [pc, #120]	; (9ff7c <Cl_Dprep_UpdateAlarmTable+0x110>)
   9ff04:	4798      	blx	r3
   9ff06:	4603      	mov	r3, r0
   9ff08:	73fb      	strb	r3, [r7, #15]
   9ff0a:	e027      	b.n	9ff5c <Cl_Dprep_UpdateAlarmTable+0xf0>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   9ff0c:	7bba      	ldrb	r2, [r7, #14]
   9ff0e:	4919      	ldr	r1, [pc, #100]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9ff10:	4613      	mov	r3, r2
   9ff12:	00db      	lsls	r3, r3, #3
   9ff14:	1a9b      	subs	r3, r3, r2
   9ff16:	440b      	add	r3, r1
   9ff18:	3303      	adds	r3, #3
   9ff1a:	781b      	ldrb	r3, [r3, #0]
   9ff1c:	2b00      	cmp	r3, #0
   9ff1e:	d014      	beq.n	9ff4a <Cl_Dprep_UpdateAlarmTable+0xde>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   9ff20:	7bba      	ldrb	r2, [r7, #14]
   9ff22:	4914      	ldr	r1, [pc, #80]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9ff24:	4613      	mov	r3, r2
   9ff26:	00db      	lsls	r3, r3, #3
   9ff28:	1a9b      	subs	r3, r3, r2
   9ff2a:	440b      	add	r3, r1
   9ff2c:	3303      	adds	r3, #3
   9ff2e:	2200      	movs	r2, #0
   9ff30:	701a      	strb	r2, [r3, #0]
					command = CON_TX_COMMAND_ALARM;
   9ff32:	2307      	movs	r3, #7
   9ff34:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   9ff36:	7bba      	ldrb	r2, [r7, #14]
   9ff38:	490e      	ldr	r1, [pc, #56]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9ff3a:	4613      	mov	r3, r2
   9ff3c:	00db      	lsls	r3, r3, #3
   9ff3e:	1a9b      	subs	r3, r3, r2
   9ff40:	440b      	add	r3, r1
   9ff42:	781b      	ldrb	r3, [r3, #0]
   9ff44:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   9ff46:	2300      	movs	r3, #0
   9ff48:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   9ff4a:	7bba      	ldrb	r2, [r7, #14]
   9ff4c:	4909      	ldr	r1, [pc, #36]	; (9ff74 <Cl_Dprep_UpdateAlarmTable+0x108>)
   9ff4e:	4613      	mov	r3, r2
   9ff50:	00db      	lsls	r3, r3, #3
   9ff52:	1a9b      	subs	r3, r3, r2
   9ff54:	440b      	add	r3, r1
   9ff56:	3302      	adds	r3, #2
   9ff58:	2201      	movs	r2, #1
   9ff5a:	701a      	strb	r2, [r3, #0]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   9ff5c:	7bbb      	ldrb	r3, [r7, #14]
   9ff5e:	3301      	adds	r3, #1
   9ff60:	73bb      	strb	r3, [r7, #14]
   9ff62:	7bbb      	ldrb	r3, [r7, #14]
   9ff64:	2b21      	cmp	r3, #33	; 0x21
   9ff66:	d993      	bls.n	9fe90 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   9ff68:	7bfb      	ldrb	r3, [r7, #15]
	}
   9ff6a:	4618      	mov	r0, r3
   9ff6c:	3710      	adds	r7, #16
   9ff6e:	46bd      	mov	sp, r7
   9ff70:	bd80      	pop	{r7, pc}
   9ff72:	bf00      	nop
   9ff74:	20070bcc 	.word	0x20070bcc
   9ff78:	00082fbd 	.word	0x00082fbd
   9ff7c:	0009ff81 	.word	0x0009ff81

0009ff80 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   9ff80:	b580      	push	{r7, lr}
   9ff82:	b086      	sub	sp, #24
   9ff84:	af00      	add	r7, sp, #0
   9ff86:	4603      	mov	r3, r0
   9ff88:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   9ff8a:	2300      	movs	r3, #0
   9ff8c:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   9ff8e:	2300      	movs	r3, #0
   9ff90:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   9ff92:	2300      	movs	r3, #0
   9ff94:	827b      	strh	r3, [r7, #18]
   9ff96:	2300      	movs	r3, #0
   9ff98:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   9ff9a:	f107 0308 	add.w	r3, r7, #8
   9ff9e:	2100      	movs	r1, #0
   9ffa0:	460a      	mov	r2, r1
   9ffa2:	801a      	strh	r2, [r3, #0]
   9ffa4:	460a      	mov	r2, r1
   9ffa6:	709a      	strb	r2, [r3, #2]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9ffa8:	2300      	movs	r3, #0
   9ffaa:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9ffac:	2351      	movs	r3, #81	; 0x51
   9ffae:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   9ffb0:	79fb      	ldrb	r3, [r7, #7]
   9ffb2:	3b01      	subs	r3, #1
   9ffb4:	2b3d      	cmp	r3, #61	; 0x3d
   9ffb6:	f200 810d 	bhi.w	a01d4 <CL_DrepAlarmActon+0x254>
   9ffba:	a201      	add	r2, pc, #4	; (adr r2, 9ffc0 <CL_DrepAlarmActon+0x40>)
   9ffbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ffc0:	000a00e7 	.word	0x000a00e7
   9ffc4:	000a01d5 	.word	0x000a01d5
   9ffc8:	000a00f5 	.word	0x000a00f5
   9ffcc:	000a00f5 	.word	0x000a00f5
   9ffd0:	000a0135 	.word	0x000a0135
   9ffd4:	000a0135 	.word	0x000a0135
   9ffd8:	000a016d 	.word	0x000a016d
   9ffdc:	000a016d 	.word	0x000a016d
   9ffe0:	000a01d5 	.word	0x000a01d5
   9ffe4:	000a01d5 	.word	0x000a01d5
   9ffe8:	000a01d5 	.word	0x000a01d5
   9ffec:	000a00b9 	.word	0x000a00b9
   9fff0:	000a00b9 	.word	0x000a00b9
   9fff4:	000a00b9 	.word	0x000a00b9
   9fff8:	000a00b9 	.word	0x000a00b9
   9fffc:	000a00b9 	.word	0x000a00b9
   a0000:	000a00b9 	.word	0x000a00b9
   a0004:	000a00b9 	.word	0x000a00b9
   a0008:	000a016d 	.word	0x000a016d
   a000c:	000a016d 	.word	0x000a016d
   a0010:	000a00b9 	.word	0x000a00b9
   a0014:	000a00b9 	.word	0x000a00b9
   a0018:	000a00b9 	.word	0x000a00b9
   a001c:	000a00b9 	.word	0x000a00b9
   a0020:	000a01d5 	.word	0x000a01d5
   a0024:	000a00b9 	.word	0x000a00b9
   a0028:	000a01d5 	.word	0x000a01d5
   a002c:	000a01d5 	.word	0x000a01d5
   a0030:	000a01d5 	.word	0x000a01d5
   a0034:	000a01d5 	.word	0x000a01d5
   a0038:	000a01d5 	.word	0x000a01d5
   a003c:	000a01d5 	.word	0x000a01d5
   a0040:	000a01d5 	.word	0x000a01d5
   a0044:	000a01d5 	.word	0x000a01d5
   a0048:	000a01d5 	.word	0x000a01d5
   a004c:	000a01d5 	.word	0x000a01d5
   a0050:	000a01d5 	.word	0x000a01d5
   a0054:	000a01d5 	.word	0x000a01d5
   a0058:	000a00b9 	.word	0x000a00b9
   a005c:	000a00b9 	.word	0x000a00b9
   a0060:	000a01d5 	.word	0x000a01d5
   a0064:	000a0135 	.word	0x000a0135
   a0068:	000a01d5 	.word	0x000a01d5
   a006c:	000a0135 	.word	0x000a0135
   a0070:	000a01d5 	.word	0x000a01d5
   a0074:	000a01d5 	.word	0x000a01d5
   a0078:	000a01d5 	.word	0x000a01d5
   a007c:	000a01d5 	.word	0x000a01d5
   a0080:	000a01d5 	.word	0x000a01d5
   a0084:	000a01d5 	.word	0x000a01d5
   a0088:	000a01d5 	.word	0x000a01d5
   a008c:	000a01d5 	.word	0x000a01d5
   a0090:	000a01d5 	.word	0x000a01d5
   a0094:	000a01d5 	.word	0x000a01d5
   a0098:	000a01d5 	.word	0x000a01d5
   a009c:	000a01d5 	.word	0x000a01d5
   a00a0:	000a01d5 	.word	0x000a01d5
   a00a4:	000a01d5 	.word	0x000a01d5
   a00a8:	000a01d5 	.word	0x000a01d5
   a00ac:	000a01d5 	.word	0x000a01d5
   a00b0:	000a01db 	.word	0x000a01db
   a00b4:	000a01db 	.word	0x000a01db
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				
				//sv_cntrl_setredalarm();
	        	sv_cntrl_buzzer();	
   a00b8:	4b5c      	ldr	r3, [pc, #368]	; (a022c <CL_DrepAlarmActon+0x2ac>)
   a00ba:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a00bc:	4b5c      	ldr	r3, [pc, #368]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a00be:	781b      	ldrb	r3, [r3, #0]
   a00c0:	2b06      	cmp	r3, #6
   a00c2:	d007      	beq.n	a00d4 <CL_DrepAlarmActon+0x154>
   a00c4:	4b5a      	ldr	r3, [pc, #360]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a00c6:	781b      	ldrb	r3, [r3, #0]
   a00c8:	2b0e      	cmp	r3, #14
   a00ca:	d003      	beq.n	a00d4 <CL_DrepAlarmActon+0x154>
   a00cc:	4b58      	ldr	r3, [pc, #352]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a00ce:	781b      	ldrb	r3, [r3, #0]
   a00d0:	2b0d      	cmp	r3, #13
   a00d2:	d102      	bne.n	a00da <CL_DrepAlarmActon+0x15a>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a00d4:	4b57      	ldr	r3, [pc, #348]	; (a0234 <CL_DrepAlarmActon+0x2b4>)
   a00d6:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   a00d8:	e080      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a00da:	4b57      	ldr	r3, [pc, #348]	; (a0238 <CL_DrepAlarmActon+0x2b8>)
   a00dc:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a00de:	4b54      	ldr	r3, [pc, #336]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a00e0:	220c      	movs	r2, #12
   a00e2:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   a00e4:	e07a      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a00e6:	4b55      	ldr	r3, [pc, #340]	; (a023c <CL_DrepAlarmActon+0x2bc>)
   a00e8:	4798      	blx	r3
			//	sv_cntrl_buzzer();
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a00ea:	2100      	movs	r1, #0
   a00ec:	2004      	movs	r0, #4
   a00ee:	4b54      	ldr	r3, [pc, #336]	; (a0240 <CL_DrepAlarmActon+0x2c0>)
   a00f0:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   a00f2:	e073      	b.n	a01dc <CL_DrepAlarmActon+0x25c>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				
				sv_cntrl_buzzer();
   a00f4:	4b4d      	ldr	r3, [pc, #308]	; (a022c <CL_DrepAlarmActon+0x2ac>)
   a00f6:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a00f8:	4b4d      	ldr	r3, [pc, #308]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a00fa:	781b      	ldrb	r3, [r3, #0]
   a00fc:	2b06      	cmp	r3, #6
   a00fe:	d007      	beq.n	a0110 <CL_DrepAlarmActon+0x190>
   a0100:	4b4b      	ldr	r3, [pc, #300]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a0102:	781b      	ldrb	r3, [r3, #0]
   a0104:	2b0e      	cmp	r3, #14
   a0106:	d003      	beq.n	a0110 <CL_DrepAlarmActon+0x190>
   a0108:	4b49      	ldr	r3, [pc, #292]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a010a:	781b      	ldrb	r3, [r3, #0]
   a010c:	2b0d      	cmp	r3, #13
   a010e:	d10b      	bne.n	a0128 <CL_DrepAlarmActon+0x1a8>
				{
				sv_cntrl_setyellowalarm();
   a0110:	4b4a      	ldr	r3, [pc, #296]	; (a023c <CL_DrepAlarmActon+0x2bc>)
   a0112:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a0114:	4b4b      	ldr	r3, [pc, #300]	; (a0244 <CL_DrepAlarmActon+0x2c4>)
   a0116:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a0118:	2100      	movs	r1, #0
   a011a:	2002      	movs	r0, #2
   a011c:	4b4a      	ldr	r3, [pc, #296]	; (a0248 <CL_DrepAlarmActon+0x2c8>)
   a011e:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   a0120:	4b4a      	ldr	r3, [pc, #296]	; (a024c <CL_DrepAlarmActon+0x2cc>)
   a0122:	2201      	movs	r2, #1
   a0124:	701a      	strb	r2, [r3, #0]
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   a0126:	e059      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
				//	cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
				}
				else{
					
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a0128:	4b43      	ldr	r3, [pc, #268]	; (a0238 <CL_DrepAlarmActon+0x2b8>)
   a012a:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   a012c:	4b40      	ldr	r3, [pc, #256]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a012e:	220c      	movs	r2, #12
   a0130:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   a0132:	e053      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a0134:	4b3d      	ldr	r3, [pc, #244]	; (a022c <CL_DrepAlarmActon+0x2ac>)
   a0136:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a0138:	4b3d      	ldr	r3, [pc, #244]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a013a:	781b      	ldrb	r3, [r3, #0]
   a013c:	2b06      	cmp	r3, #6
   a013e:	d007      	beq.n	a0150 <CL_DrepAlarmActon+0x1d0>
   a0140:	4b3b      	ldr	r3, [pc, #236]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a0142:	781b      	ldrb	r3, [r3, #0]
   a0144:	2b0e      	cmp	r3, #14
   a0146:	d003      	beq.n	a0150 <CL_DrepAlarmActon+0x1d0>
   a0148:	4b39      	ldr	r3, [pc, #228]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a014a:	781b      	ldrb	r3, [r3, #0]
   a014c:	2b0d      	cmp	r3, #13
   a014e:	d107      	bne.n	a0160 <CL_DrepAlarmActon+0x1e0>
			{
				sv_cntrl_setyellowalarm();
   a0150:	4b3a      	ldr	r3, [pc, #232]	; (a023c <CL_DrepAlarmActon+0x2bc>)
   a0152:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a0154:	4b3b      	ldr	r3, [pc, #236]	; (a0244 <CL_DrepAlarmActon+0x2c4>)
   a0156:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a0158:	4b3c      	ldr	r3, [pc, #240]	; (a024c <CL_DrepAlarmActon+0x2cc>)
   a015a:	2201      	movs	r2, #1
   a015c:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   a015e:	e03d      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   a0160:	4b35      	ldr	r3, [pc, #212]	; (a0238 <CL_DrepAlarmActon+0x2b8>)
   a0162:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a0164:	4b32      	ldr	r3, [pc, #200]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a0166:	220c      	movs	r2, #12
   a0168:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   a016a:	e037      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				
				sv_cntrl_buzzer();
   a016c:	4b2f      	ldr	r3, [pc, #188]	; (a022c <CL_DrepAlarmActon+0x2ac>)
   a016e:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a0170:	4b2f      	ldr	r3, [pc, #188]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a0172:	781b      	ldrb	r3, [r3, #0]
   a0174:	2b06      	cmp	r3, #6
   a0176:	d007      	beq.n	a0188 <CL_DrepAlarmActon+0x208>
   a0178:	4b2d      	ldr	r3, [pc, #180]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a017a:	781b      	ldrb	r3, [r3, #0]
   a017c:	2b0e      	cmp	r3, #14
   a017e:	d003      	beq.n	a0188 <CL_DrepAlarmActon+0x208>
   a0180:	4b2b      	ldr	r3, [pc, #172]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a0182:	781b      	ldrb	r3, [r3, #0]
   a0184:	2b0d      	cmp	r3, #13
   a0186:	d11f      	bne.n	a01c8 <CL_DrepAlarmActon+0x248>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_setyellowalarm();
   a0188:	4b2c      	ldr	r3, [pc, #176]	; (a023c <CL_DrepAlarmActon+0x2bc>)
   a018a:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a018c:	4b2d      	ldr	r3, [pc, #180]	; (a0244 <CL_DrepAlarmActon+0x2c4>)
   a018e:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a0190:	4b2e      	ldr	r3, [pc, #184]	; (a024c <CL_DrepAlarmActon+0x2cc>)
   a0192:	2201      	movs	r2, #1
   a0194:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   a0196:	4b2e      	ldr	r3, [pc, #184]	; (a0250 <CL_DrepAlarmActon+0x2d0>)
   a0198:	681b      	ldr	r3, [r3, #0]
   a019a:	3301      	adds	r3, #1
   a019c:	4a2c      	ldr	r2, [pc, #176]	; (a0250 <CL_DrepAlarmActon+0x2d0>)
   a019e:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a01a0:	2100      	movs	r1, #0
   a01a2:	2008      	movs	r0, #8
   a01a4:	4b2b      	ldr	r3, [pc, #172]	; (a0254 <CL_DrepAlarmActon+0x2d4>)
   a01a6:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a01a8:	2100      	movs	r1, #0
   a01aa:	2007      	movs	r0, #7
   a01ac:	4b29      	ldr	r3, [pc, #164]	; (a0254 <CL_DrepAlarmActon+0x2d4>)
   a01ae:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a01b0:	2100      	movs	r1, #0
   a01b2:	2013      	movs	r0, #19
   a01b4:	4b27      	ldr	r3, [pc, #156]	; (a0254 <CL_DrepAlarmActon+0x2d4>)
   a01b6:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a01b8:	2100      	movs	r1, #0
   a01ba:	2014      	movs	r0, #20
   a01bc:	4b25      	ldr	r3, [pc, #148]	; (a0254 <CL_DrepAlarmActon+0x2d4>)
   a01be:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a01c0:	4b1b      	ldr	r3, [pc, #108]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a01c2:	220e      	movs	r2, #14
   a01c4:	701a      	strb	r2, [r3, #0]
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   a01c6:	e009      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a01c8:	4b1b      	ldr	r3, [pc, #108]	; (a0238 <CL_DrepAlarmActon+0x2b8>)
   a01ca:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a01cc:	4b18      	ldr	r3, [pc, #96]	; (a0230 <CL_DrepAlarmActon+0x2b0>)
   a01ce:	220c      	movs	r2, #12
   a01d0:	701a      	strb	r2, [r3, #0]
			}
			break;
   a01d2:	e003      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   a01d4:	2300      	movs	r3, #0
   a01d6:	71fb      	strb	r3, [r7, #7]
			break;
   a01d8:	e000      	b.n	a01dc <CL_DrepAlarmActon+0x25c>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   a01da:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   a01dc:	79fb      	ldrb	r3, [r7, #7]
   a01de:	2b00      	cmp	r3, #0
   a01e0:	d01f      	beq.n	a0222 <CL_DrepAlarmActon+0x2a2>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   a01e2:	79fb      	ldrb	r3, [r7, #7]
   a01e4:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a01e6:	2301      	movs	r3, #1
   a01e8:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a01ea:	2302      	movs	r3, #2
   a01ec:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a01ee:	2307      	movs	r3, #7
   a01f0:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   a01f2:	f107 0108 	add.w	r1, r7, #8
   a01f6:	7bbb      	ldrb	r3, [r7, #14]
   a01f8:	2203      	movs	r2, #3
   a01fa:	4618      	mov	r0, r3
   a01fc:	4b16      	ldr	r3, [pc, #88]	; (a0258 <CL_DrepAlarmActon+0x2d8>)
   a01fe:	4798      	blx	r3
   a0200:	4603      	mov	r3, r0
   a0202:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   a0204:	232b      	movs	r3, #43	; 0x2b
   a0206:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   a0208:	2302      	movs	r3, #2
   a020a:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   a020c:	2300      	movs	r3, #0
   a020e:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   a0210:	f107 0108 	add.w	r1, r7, #8
   a0214:	7bbb      	ldrb	r3, [r7, #14]
   a0216:	2202      	movs	r2, #2
   a0218:	4618      	mov	r0, r3
   a021a:	4b0f      	ldr	r3, [pc, #60]	; (a0258 <CL_DrepAlarmActon+0x2d8>)
   a021c:	4798      	blx	r3
   a021e:	4603      	mov	r3, r0
   a0220:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   a0222:	2300      	movs	r3, #0
}
   a0224:	4618      	mov	r0, r3
   a0226:	3718      	adds	r7, #24
   a0228:	46bd      	mov	sp, r7
   a022a:	bd80      	pop	{r7, pc}
   a022c:	00099d3d 	.word	0x00099d3d
   a0230:	20071c5f 	.word	0x20071c5f
   a0234:	000a2075 	.word	0x000a2075
   a0238:	000a0be9 	.word	0x000a0be9
   a023c:	00099d15 	.word	0x00099d15
   a0240:	0009316d 	.word	0x0009316d
   a0244:	00099c55 	.word	0x00099c55
   a0248:	000883f1 	.word	0x000883f1
   a024c:	20071c60 	.word	0x20071c60
   a0250:	20071c24 	.word	0x20071c24
   a0254:	00082de1 	.word	0x00082de1
   a0258:	0009b805 	.word	0x0009b805

000a025c <Cl_dprepSendAlarm>:
	
	

Cl_ReturnCodeType  Cl_dprepSendAlarm(Cl_NewAlarmIdType cl_dprepalarmId )
{
   a025c:	b580      	push	{r7, lr}
   a025e:	b086      	sub	sp, #24
   a0260:	af00      	add	r7, sp, #0
   a0262:	4603      	mov	r3, r0
   a0264:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a0266:	2300      	movs	r3, #0
   a0268:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a026a:	f107 030c 	add.w	r3, r7, #12
   a026e:	2100      	movs	r1, #0
   a0270:	460a      	mov	r2, r1
   a0272:	801a      	strh	r2, [r3, #0]
   a0274:	460a      	mov	r2, r1
   a0276:	709a      	strb	r2, [r3, #2]
   a0278:	2300      	movs	r3, #0
   a027a:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a027c:	2351      	movs	r3, #81	; 0x51
   a027e:	73fb      	strb	r3, [r7, #15]
			if(cl_dprepalarmId != _NO_ALARM)
   a0280:	79fb      	ldrb	r3, [r7, #7]
   a0282:	2b00      	cmp	r3, #0
   a0284:	d013      	beq.n	a02ae <Cl_dprepSendAlarm+0x52>
			 {
				data[0] = (Cl_Uint8Type)cl_dprepalarmId;
   a0286:	79fb      	ldrb	r3, [r7, #7]
   a0288:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a028a:	2301      	movs	r3, #1
   a028c:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a028e:	2302      	movs	r3, #2
   a0290:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a0292:	2307      	movs	r3, #7
   a0294:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a0296:	f107 010c 	add.w	r1, r7, #12
   a029a:	7bfb      	ldrb	r3, [r7, #15]
   a029c:	2203      	movs	r2, #3
   a029e:	4618      	mov	r0, r3
   a02a0:	4b05      	ldr	r3, [pc, #20]	; (a02b8 <Cl_dprepSendAlarm+0x5c>)
   a02a2:	4798      	blx	r3
   a02a4:	4603      	mov	r3, r0
   a02a6:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a02a8:	200a      	movs	r0, #10
   a02aa:	4b04      	ldr	r3, [pc, #16]	; (a02bc <Cl_dprepSendAlarm+0x60>)
   a02ac:	4798      	blx	r3

			 }
}	
   a02ae:	bf00      	nop
   a02b0:	4618      	mov	r0, r3
   a02b2:	3718      	adds	r7, #24
   a02b4:	46bd      	mov	sp, r7
   a02b6:	bd80      	pop	{r7, pc}
   a02b8:	0009b805 	.word	0x0009b805
   a02bc:	00093009 	.word	0x00093009

000a02c0 <Cl_Dprep_CheckforfillingCompletion>:
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   a02c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   a02c2:	b087      	sub	sp, #28
   a02c4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   a02c6:	2304      	movs	r3, #4
   a02c8:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   a02ca:	2202      	movs	r2, #2
   a02cc:	4974      	ldr	r1, [pc, #464]	; (a04a0 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a02ce:	2019      	movs	r0, #25
   a02d0:	4b74      	ldr	r3, [pc, #464]	; (a04a4 <Cl_Dprep_CheckforfillingCompletion+0x1e4>)
   a02d2:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   a02d4:	4b72      	ldr	r3, [pc, #456]	; (a04a0 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a02d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   a02da:	2b0a      	cmp	r3, #10
   a02dc:	dd02      	ble.n	a02e4 <Cl_Dprep_CheckforfillingCompletion+0x24>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   a02de:	2300      	movs	r3, #0
   a02e0:	75fb      	strb	r3, [r7, #23]
   a02e2:	e0bd      	b.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   a02e4:	1d3b      	adds	r3, r7, #4
   a02e6:	4619      	mov	r1, r3
   a02e8:	2014      	movs	r0, #20
   a02ea:	4b6f      	ldr	r3, [pc, #444]	; (a04a8 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a02ec:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   a02ee:	1dbb      	adds	r3, r7, #6
   a02f0:	4619      	mov	r1, r3
   a02f2:	2007      	movs	r0, #7
   a02f4:	4b6c      	ldr	r3, [pc, #432]	; (a04a8 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a02f6:	4798      	blx	r3
// 			//temp3 = ((temp3* 4) +temp)/5;
// 			
// 							
// 			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;

		cl_temp3_cel = cl_temp3 /100;
   a02f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
   a02fc:	4a6b      	ldr	r2, [pc, #428]	; (a04ac <Cl_Dprep_CheckforfillingCompletion+0x1ec>)
   a02fe:	fb82 1203 	smull	r1, r2, r2, r3
   a0302:	1152      	asrs	r2, r2, #5
   a0304:	17db      	asrs	r3, r3, #31
   a0306:	1ad3      	subs	r3, r2, r3
   a0308:	b21a      	sxth	r2, r3
   a030a:	4b69      	ldr	r3, [pc, #420]	; (a04b0 <Cl_Dprep_CheckforfillingCompletion+0x1f0>)
   a030c:	4610      	mov	r0, r2
   a030e:	4798      	blx	r3
   a0310:	4603      	mov	r3, r0
   a0312:	613b      	str	r3, [r7, #16]
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   a0314:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a0318:	4b66      	ldr	r3, [pc, #408]	; (a04b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a031a:	4610      	mov	r0, r2
   a031c:	4798      	blx	r3
   a031e:	4c66      	ldr	r4, [pc, #408]	; (a04b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a0320:	a353      	add	r3, pc, #332	; (adr r3, a0470 <Cl_Dprep_CheckforfillingCompletion+0x1b0>)
   a0322:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0326:	47a0      	blx	r4
   a0328:	4603      	mov	r3, r0
   a032a:	460c      	mov	r4, r1
   a032c:	461d      	mov	r5, r3
   a032e:	4626      	mov	r6, r4
   a0330:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a0334:	4b5f      	ldr	r3, [pc, #380]	; (a04b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a0336:	4610      	mov	r0, r2
   a0338:	4798      	blx	r3
   a033a:	4602      	mov	r2, r0
   a033c:	460b      	mov	r3, r1
   a033e:	4c5e      	ldr	r4, [pc, #376]	; (a04b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a0340:	4628      	mov	r0, r5
   a0342:	4631      	mov	r1, r6
   a0344:	47a0      	blx	r4
   a0346:	4603      	mov	r3, r0
   a0348:	460c      	mov	r4, r1
   a034a:	461d      	mov	r5, r3
   a034c:	4626      	mov	r6, r4
   a034e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   a0352:	4b58      	ldr	r3, [pc, #352]	; (a04b4 <Cl_Dprep_CheckforfillingCompletion+0x1f4>)
   a0354:	4610      	mov	r0, r2
   a0356:	4798      	blx	r3
   a0358:	4c57      	ldr	r4, [pc, #348]	; (a04b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a035a:	a347      	add	r3, pc, #284	; (adr r3, a0478 <Cl_Dprep_CheckforfillingCompletion+0x1b8>)
   a035c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0360:	47a0      	blx	r4
   a0362:	4603      	mov	r3, r0
   a0364:	460c      	mov	r4, r1
   a0366:	461a      	mov	r2, r3
   a0368:	4623      	mov	r3, r4
   a036a:	4c54      	ldr	r4, [pc, #336]	; (a04bc <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a036c:	4628      	mov	r0, r5
   a036e:	4631      	mov	r1, r6
   a0370:	47a0      	blx	r4
   a0372:	4603      	mov	r3, r0
   a0374:	460c      	mov	r4, r1
   a0376:	4618      	mov	r0, r3
   a0378:	4621      	mov	r1, r4
   a037a:	4c51      	ldr	r4, [pc, #324]	; (a04c0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a037c:	a340      	add	r3, pc, #256	; (adr r3, a0480 <Cl_Dprep_CheckforfillingCompletion+0x1c0>)
   a037e:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0382:	47a0      	blx	r4
   a0384:	4603      	mov	r3, r0
   a0386:	460c      	mov	r4, r1
   a0388:	4619      	mov	r1, r3
   a038a:	4622      	mov	r2, r4
   a038c:	4b4d      	ldr	r3, [pc, #308]	; (a04c4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a038e:	4608      	mov	r0, r1
   a0390:	4611      	mov	r1, r2
   a0392:	4798      	blx	r3
   a0394:	4603      	mov	r3, r0
   a0396:	60fb      	str	r3, [r7, #12]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   a0398:	4b4b      	ldr	r3, [pc, #300]	; (a04c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a039a:	68f8      	ldr	r0, [r7, #12]
   a039c:	4798      	blx	r3
   a039e:	4605      	mov	r5, r0
   a03a0:	460e      	mov	r6, r1
   a03a2:	4b49      	ldr	r3, [pc, #292]	; (a04c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a03a4:	6938      	ldr	r0, [r7, #16]
   a03a6:	4798      	blx	r3
   a03a8:	4c45      	ldr	r4, [pc, #276]	; (a04c0 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a03aa:	f04f 0200 	mov.w	r2, #0
   a03ae:	4b47      	ldr	r3, [pc, #284]	; (a04cc <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a03b0:	47a0      	blx	r4
   a03b2:	4603      	mov	r3, r0
   a03b4:	460c      	mov	r4, r1
   a03b6:	4618      	mov	r0, r3
   a03b8:	4621      	mov	r1, r4
   a03ba:	4c3f      	ldr	r4, [pc, #252]	; (a04b8 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a03bc:	a332      	add	r3, pc, #200	; (adr r3, a0488 <Cl_Dprep_CheckforfillingCompletion+0x1c8>)
   a03be:	e9d3 2300 	ldrd	r2, r3, [r3]
   a03c2:	47a0      	blx	r4
   a03c4:	4603      	mov	r3, r0
   a03c6:	460c      	mov	r4, r1
   a03c8:	4618      	mov	r0, r3
   a03ca:	4621      	mov	r1, r4
   a03cc:	4c3b      	ldr	r4, [pc, #236]	; (a04bc <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a03ce:	f04f 0200 	mov.w	r2, #0
   a03d2:	4b3f      	ldr	r3, [pc, #252]	; (a04d0 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a03d4:	47a0      	blx	r4
   a03d6:	4603      	mov	r3, r0
   a03d8:	460c      	mov	r4, r1
   a03da:	461a      	mov	r2, r3
   a03dc:	4623      	mov	r3, r4
   a03de:	4c3d      	ldr	r4, [pc, #244]	; (a04d4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a03e0:	4628      	mov	r0, r5
   a03e2:	4631      	mov	r1, r6
   a03e4:	47a0      	blx	r4
   a03e6:	4603      	mov	r3, r0
   a03e8:	460c      	mov	r4, r1
   a03ea:	4618      	mov	r0, r3
   a03ec:	4621      	mov	r1, r4
   a03ee:	4c39      	ldr	r4, [pc, #228]	; (a04d4 <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a03f0:	f04f 0200 	mov.w	r2, #0
   a03f4:	4b38      	ldr	r3, [pc, #224]	; (a04d8 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a03f6:	47a0      	blx	r4
   a03f8:	4603      	mov	r3, r0
   a03fa:	460c      	mov	r4, r1
   a03fc:	4619      	mov	r1, r3
   a03fe:	4622      	mov	r2, r4
   a0400:	4b30      	ldr	r3, [pc, #192]	; (a04c4 <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a0402:	4608      	mov	r0, r1
   a0404:	4611      	mov	r1, r2
   a0406:	4798      	blx	r3
   a0408:	4603      	mov	r3, r0
   a040a:	60bb      	str	r3, [r7, #8]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   a040c:	4b2e      	ldr	r3, [pc, #184]	; (a04c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a040e:	68b8      	ldr	r0, [r7, #8]
   a0410:	4798      	blx	r3
   a0412:	4c32      	ldr	r4, [pc, #200]	; (a04dc <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a0414:	a31e      	add	r3, pc, #120	; (adr r3, a0490 <Cl_Dprep_CheckforfillingCompletion+0x1d0>)
   a0416:	e9d3 2300 	ldrd	r2, r3, [r3]
   a041a:	47a0      	blx	r4
   a041c:	4603      	mov	r3, r0
   a041e:	2b00      	cmp	r3, #0
   a0420:	d01e      	beq.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   a0422:	4b29      	ldr	r3, [pc, #164]	; (a04c8 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a0424:	68b8      	ldr	r0, [r7, #8]
   a0426:	4798      	blx	r3
   a0428:	4c2d      	ldr	r4, [pc, #180]	; (a04e0 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a042a:	a31b      	add	r3, pc, #108	; (adr r3, a0498 <Cl_Dprep_CheckforfillingCompletion+0x1d8>)
   a042c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0430:	47a0      	blx	r4
   a0432:	4603      	mov	r3, r0
   a0434:	2b00      	cmp	r3, #0
   a0436:	d013      	beq.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   a0438:	4b2a      	ldr	r3, [pc, #168]	; (a04e4 <Cl_Dprep_CheckforfillingCompletion+0x224>)
   a043a:	492b      	ldr	r1, [pc, #172]	; (a04e8 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   a043c:	6938      	ldr	r0, [r7, #16]
   a043e:	4798      	blx	r3
   a0440:	4603      	mov	r3, r0
   a0442:	2b00      	cmp	r3, #0
   a0444:	d00c      	beq.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
   a0446:	4b29      	ldr	r3, [pc, #164]	; (a04ec <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a0448:	4929      	ldr	r1, [pc, #164]	; (a04f0 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   a044a:	6938      	ldr	r0, [r7, #16]
   a044c:	4798      	blx	r3
   a044e:	4603      	mov	r3, r0
   a0450:	2b00      	cmp	r3, #0
   a0452:	d005      	beq.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
				{
					if(cl_temp3_stable_confirm == true)
   a0454:	4b27      	ldr	r3, [pc, #156]	; (a04f4 <Cl_Dprep_CheckforfillingCompletion+0x234>)
   a0456:	781b      	ldrb	r3, [r3, #0]
   a0458:	2b00      	cmp	r3, #0
   a045a:	d001      	beq.n	a0460 <Cl_Dprep_CheckforfillingCompletion+0x1a0>
							Cl_dprepretcode = CL_OK;
   a045c:	2300      	movs	r3, #0
   a045e:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   a0460:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   a0462:	4618      	mov	r0, r3
   a0464:	371c      	adds	r7, #28
   a0466:	46bd      	mov	sp, r7
   a0468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a046a:	bf00      	nop
   a046c:	f3af 8000 	nop.w
   a0470:	eb1c432d 	.word	0xeb1c432d
   a0474:	bf1a36e2 	.word	0xbf1a36e2
   a0478:	70a3d70a 	.word	0x70a3d70a
   a047c:	3fd70a3d 	.word	0x3fd70a3d
   a0480:	851eb852 	.word	0x851eb852
   a0484:	404331eb 	.word	0x404331eb
   a0488:	47ae147b 	.word	0x47ae147b
   a048c:	3f947ae1 	.word	0x3f947ae1
   a0490:	9999999a 	.word	0x9999999a
   a0494:	402a9999 	.word	0x402a9999
   a0498:	9999999a 	.word	0x9999999a
   a049c:	402b9999 	.word	0x402b9999
   a04a0:	20071c42 	.word	0x20071c42
   a04a4:	0009b805 	.word	0x0009b805
   a04a8:	0008e6a1 	.word	0x0008e6a1
   a04ac:	51eb851f 	.word	0x51eb851f
   a04b0:	000a64e9 	.word	0x000a64e9
   a04b4:	000a5c45 	.word	0x000a5c45
   a04b8:	000a5d11 	.word	0x000a5d11
   a04bc:	000a59ad 	.word	0x000a59ad
   a04c0:	000a59a9 	.word	0x000a59a9
   a04c4:	000a62d5 	.word	0x000a62d5
   a04c8:	000a5c69 	.word	0x000a5c69
   a04cc:	40390000 	.word	0x40390000
   a04d0:	3ff00000 	.word	0x3ff00000
   a04d4:	000a5f65 	.word	0x000a5f65
   a04d8:	40240000 	.word	0x40240000
   a04dc:	000a6231 	.word	0x000a6231
   a04e0:	000a61f5 	.word	0x000a61f5
   a04e4:	000a6909 	.word	0x000a6909
   a04e8:	42120000 	.word	0x42120000
   a04ec:	000a68cd 	.word	0x000a68cd
   a04f0:	42160000 	.word	0x42160000
   a04f4:	20071c58 	.word	0x20071c58

000a04f8 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   a04f8:	b580      	push	{r7, lr}
   a04fa:	b082      	sub	sp, #8
   a04fc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a04fe:	2300      	movs	r3, #0
   a0500:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   a0502:	2012      	movs	r0, #18
   a0504:	4b03      	ldr	r3, [pc, #12]	; (a0514 <Cl_DprepSelectDialysateInlet+0x1c>)
   a0506:	4798      	blx	r3
		return Cl_RetVal;
   a0508:	79fb      	ldrb	r3, [r7, #7]
	}
   a050a:	4618      	mov	r0, r3
   a050c:	3708      	adds	r7, #8
   a050e:	46bd      	mov	sp, r7
   a0510:	bd80      	pop	{r7, pc}
   a0512:	bf00      	nop
   a0514:	00099aa9 	.word	0x00099aa9

000a0518 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   a0518:	b480      	push	{r7}
   a051a:	b083      	sub	sp, #12
   a051c:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a051e:	2300      	movs	r3, #0
   a0520:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   a0522:	4b0d      	ldr	r3, [pc, #52]	; (a0558 <UpdateDprepFillingMinuteTick+0x40>)
   a0524:	2200      	movs	r2, #0
   a0526:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   a0528:	4b0c      	ldr	r3, [pc, #48]	; (a055c <UpdateDprepFillingMinuteTick+0x44>)
   a052a:	f9b3 3000 	ldrsh.w	r3, [r3]
   a052e:	b29b      	uxth	r3, r3
   a0530:	3301      	adds	r3, #1
   a0532:	b29b      	uxth	r3, r3
   a0534:	b21a      	sxth	r2, r3
   a0536:	4b09      	ldr	r3, [pc, #36]	; (a055c <UpdateDprepFillingMinuteTick+0x44>)
   a0538:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   a053a:	4b09      	ldr	r3, [pc, #36]	; (a0560 <UpdateDprepFillingMinuteTick+0x48>)
   a053c:	f9b3 3000 	ldrsh.w	r3, [r3]
   a0540:	b29b      	uxth	r3, r3
   a0542:	3301      	adds	r3, #1
   a0544:	b29b      	uxth	r3, r3
   a0546:	b21a      	sxth	r2, r3
   a0548:	4b05      	ldr	r3, [pc, #20]	; (a0560 <UpdateDprepFillingMinuteTick+0x48>)
   a054a:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   a054c:	79fb      	ldrb	r3, [r7, #7]
					

}
   a054e:	4618      	mov	r0, r3
   a0550:	370c      	adds	r7, #12
   a0552:	46bd      	mov	sp, r7
   a0554:	bc80      	pop	{r7}
   a0556:	4770      	bx	lr
   a0558:	20071c3e 	.word	0x20071c3e
   a055c:	20071c40 	.word	0x20071c40
   a0560:	20071c42 	.word	0x20071c42

000a0564 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   a0564:	b580      	push	{r7, lr}
   a0566:	b082      	sub	sp, #8
   a0568:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a056a:	2300      	movs	r3, #0
   a056c:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   a056e:	4b0f      	ldr	r3, [pc, #60]	; (a05ac <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   a0570:	2200      	movs	r2, #0
   a0572:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   a0574:	4b0e      	ldr	r3, [pc, #56]	; (a05b0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a0576:	f9b3 3000 	ldrsh.w	r3, [r3]
   a057a:	b29b      	uxth	r3, r3
   a057c:	3301      	adds	r3, #1
   a057e:	b29b      	uxth	r3, r3
   a0580:	b21a      	sxth	r2, r3
   a0582:	4b0b      	ldr	r3, [pc, #44]	; (a05b0 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a0584:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   a0586:	4b0b      	ldr	r3, [pc, #44]	; (a05b4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a0588:	f9b3 3000 	ldrsh.w	r3, [r3]
   a058c:	b29b      	uxth	r3, r3
   a058e:	3301      	adds	r3, #1
   a0590:	b29b      	uxth	r3, r3
   a0592:	b21a      	sxth	r2, r3
   a0594:	4b07      	ldr	r3, [pc, #28]	; (a05b4 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a0596:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   a0598:	4b07      	ldr	r3, [pc, #28]	; (a05b8 <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   a059a:	4798      	blx	r3
   a059c:	4603      	mov	r3, r0
   a059e:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   a05a0:	79fb      	ldrb	r3, [r7, #7]
	

}
   a05a2:	4618      	mov	r0, r3
   a05a4:	3708      	adds	r7, #8
   a05a6:	46bd      	mov	sp, r7
   a05a8:	bd80      	pop	{r7, pc}
   a05aa:	bf00      	nop
   a05ac:	20071c4a 	.word	0x20071c4a
   a05b0:	20071c4c 	.word	0x20071c4c
   a05b4:	20071c4e 	.word	0x20071c4e
   a05b8:	00088de1 	.word	0x00088de1
   a05bc:	00000000 	.word	0x00000000

000a05c0 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   a05c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   a05c2:	b099      	sub	sp, #100	; 0x64
   a05c4:	af00      	add	r7, sp, #0
   a05c6:	4603      	mov	r3, r0
   a05c8:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   a05ca:	f107 0314 	add.w	r3, r7, #20
   a05ce:	2228      	movs	r2, #40	; 0x28
   a05d0:	2100      	movs	r1, #0
   a05d2:	4618      	mov	r0, r3
   a05d4:	4b9c      	ldr	r3, [pc, #624]	; (a0848 <Cl_Dprep_SendPrepStateData+0x288>)
   a05d6:	4798      	blx	r3
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0;
   a05d8:	2300      	movs	r3, #0
   a05da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   a05de:	2300      	movs	r3, #0
   a05e0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
   a05e4:	2300      	movs	r3, #0
   a05e6:	817b      	strh	r3, [r7, #10]
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0,apt=0,vpt=0,TMP =0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a05e8:	2300      	movs	r3, #0
   a05ea:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	Cl_Uint8Type count = 0;
   a05ee:	2300      	movs	r3, #0
   a05f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a05f4:	2351      	movs	r3, #81	; 0x51
   a05f6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   a05fa:	232a      	movs	r3, #42	; 0x2a
   a05fc:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					systemdataarray[0] = datatype;
   a0600:	79fb      	ldrb	r3, [r7, #7]
   a0602:	753b      	strb	r3, [r7, #20]
					count++;
   a0604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0608:	3301      	adds	r3, #1
   a060a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a060e:	f107 030a 	add.w	r3, r7, #10
   a0612:	4619      	mov	r1, r3
   a0614:	2014      	movs	r0, #20
   a0616:	4b8d      	ldr	r3, [pc, #564]	; (a084c <Cl_Dprep_SendPrepStateData+0x28c>)
   a0618:	4798      	blx	r3
// 							uint16_t temp = res_temp_value/10;
// //							temp = temp - 3.1 + 1.4;										// sensor offset 
// //							temp = temp - 3.1 -2;										// sensor offset 
// //							tmp3 =(tmp3*5 + temp)/6;
// 							tmp3 = temp - 0.4;
							tmp3 = (float)sensordata/10;
   a061a:	897a      	ldrh	r2, [r7, #10]
   a061c:	4b8c      	ldr	r3, [pc, #560]	; (a0850 <Cl_Dprep_SendPrepStateData+0x290>)
   a061e:	4610      	mov	r0, r2
   a0620:	4798      	blx	r3
   a0622:	4602      	mov	r2, r0
   a0624:	4b8b      	ldr	r3, [pc, #556]	; (a0854 <Cl_Dprep_SendPrepStateData+0x294>)
   a0626:	498c      	ldr	r1, [pc, #560]	; (a0858 <Cl_Dprep_SendPrepStateData+0x298>)
   a0628:	4610      	mov	r0, r2
   a062a:	4798      	blx	r3
   a062c:	4603      	mov	r3, r0
   a062e:	461a      	mov	r2, r3
   a0630:	4b8a      	ldr	r3, [pc, #552]	; (a085c <Cl_Dprep_SendPrepStateData+0x29c>)
   a0632:	601a      	str	r2, [r3, #0]

							
						}
						
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   a0634:	f107 030a 	add.w	r3, r7, #10
   a0638:	4619      	mov	r1, r3
   a063a:	2007      	movs	r0, #7
   a063c:	4b83      	ldr	r3, [pc, #524]	; (a084c <Cl_Dprep_SendPrepStateData+0x28c>)
   a063e:	4798      	blx	r3
					{
					
						float cond_comp=0;
   a0640:	f04f 0300 	mov.w	r3, #0
   a0644:	657b      	str	r3, [r7, #84]	; 0x54
						float temp2=0;
   a0646:	f04f 0300 	mov.w	r3, #0
   a064a:	653b      	str	r3, [r7, #80]	; 0x50
						float	 cond1,	cond_final, cond1x100, cond_final_X10000;
					//	temp2 = temp * 0.8036;
					sensordata = sensordata/10;
   a064c:	897b      	ldrh	r3, [r7, #10]
   a064e:	4a84      	ldr	r2, [pc, #528]	; (a0860 <Cl_Dprep_SendPrepStateData+0x2a0>)
   a0650:	fba2 2303 	umull	r2, r3, r2, r3
   a0654:	08db      	lsrs	r3, r3, #3
   a0656:	b29b      	uxth	r3, r3
   a0658:	817b      	strh	r3, [r7, #10]
						if (sensordata > 50)
   a065a:	897b      	ldrh	r3, [r7, #10]
   a065c:	2b32      	cmp	r3, #50	; 0x32
   a065e:	f240 811b 	bls.w	a0898 <Cl_Dprep_SendPrepStateData+0x2d8>
						//	cond =(cond*5 + cond_final_cs3)/6;
						
								
								//	sensordata  = 25600;
								
								cond1 = sensordata/100;
   a0662:	897b      	ldrh	r3, [r7, #10]
   a0664:	4a7f      	ldr	r2, [pc, #508]	; (a0864 <Cl_Dprep_SendPrepStateData+0x2a4>)
   a0666:	fba2 2303 	umull	r2, r3, r2, r3
   a066a:	095b      	lsrs	r3, r3, #5
   a066c:	b29b      	uxth	r3, r3
   a066e:	461a      	mov	r2, r3
   a0670:	4b7d      	ldr	r3, [pc, #500]	; (a0868 <Cl_Dprep_SendPrepStateData+0x2a8>)
   a0672:	4610      	mov	r0, r2
   a0674:	4798      	blx	r3
   a0676:	4603      	mov	r3, r0
   a0678:	64fb      	str	r3, [r7, #76]	; 0x4c
								cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   a067a:	4b7c      	ldr	r3, [pc, #496]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a067c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a067e:	4798      	blx	r3
   a0680:	4c7b      	ldr	r4, [pc, #492]	; (a0870 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a0682:	a365      	add	r3, pc, #404	; (adr r3, a0818 <Cl_Dprep_SendPrepStateData+0x258>)
   a0684:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0688:	47a0      	blx	r4
   a068a:	4603      	mov	r3, r0
   a068c:	460c      	mov	r4, r1
   a068e:	461d      	mov	r5, r3
   a0690:	4626      	mov	r6, r4
   a0692:	4b76      	ldr	r3, [pc, #472]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a0694:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a0696:	4798      	blx	r3
   a0698:	4602      	mov	r2, r0
   a069a:	460b      	mov	r3, r1
   a069c:	4c74      	ldr	r4, [pc, #464]	; (a0870 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a069e:	4628      	mov	r0, r5
   a06a0:	4631      	mov	r1, r6
   a06a2:	47a0      	blx	r4
   a06a4:	4603      	mov	r3, r0
   a06a6:	460c      	mov	r4, r1
   a06a8:	461d      	mov	r5, r3
   a06aa:	4626      	mov	r6, r4
   a06ac:	4b6f      	ldr	r3, [pc, #444]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a06ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a06b0:	4798      	blx	r3
   a06b2:	4c6f      	ldr	r4, [pc, #444]	; (a0870 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a06b4:	a35a      	add	r3, pc, #360	; (adr r3, a0820 <Cl_Dprep_SendPrepStateData+0x260>)
   a06b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   a06ba:	47a0      	blx	r4
   a06bc:	4603      	mov	r3, r0
   a06be:	460c      	mov	r4, r1
   a06c0:	461a      	mov	r2, r3
   a06c2:	4623      	mov	r3, r4
   a06c4:	4c6b      	ldr	r4, [pc, #428]	; (a0874 <Cl_Dprep_SendPrepStateData+0x2b4>)
   a06c6:	4628      	mov	r0, r5
   a06c8:	4631      	mov	r1, r6
   a06ca:	47a0      	blx	r4
   a06cc:	4603      	mov	r3, r0
   a06ce:	460c      	mov	r4, r1
   a06d0:	4618      	mov	r0, r3
   a06d2:	4621      	mov	r1, r4
   a06d4:	4c67      	ldr	r4, [pc, #412]	; (a0874 <Cl_Dprep_SendPrepStateData+0x2b4>)
   a06d6:	a354      	add	r3, pc, #336	; (adr r3, a0828 <Cl_Dprep_SendPrepStateData+0x268>)
   a06d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a06dc:	47a0      	blx	r4
   a06de:	4603      	mov	r3, r0
   a06e0:	460c      	mov	r4, r1
   a06e2:	4618      	mov	r0, r3
   a06e4:	4621      	mov	r1, r4
   a06e6:	4c63      	ldr	r4, [pc, #396]	; (a0874 <Cl_Dprep_SendPrepStateData+0x2b4>)
   a06e8:	a351      	add	r3, pc, #324	; (adr r3, a0830 <Cl_Dprep_SendPrepStateData+0x270>)
   a06ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   a06ee:	47a0      	blx	r4
   a06f0:	4603      	mov	r3, r0
   a06f2:	460c      	mov	r4, r1
   a06f4:	4619      	mov	r1, r3
   a06f6:	4622      	mov	r2, r4
   a06f8:	4b5f      	ldr	r3, [pc, #380]	; (a0878 <Cl_Dprep_SendPrepStateData+0x2b8>)
   a06fa:	4608      	mov	r0, r1
   a06fc:	4611      	mov	r1, r2
   a06fe:	4798      	blx	r3
   a0700:	4603      	mov	r3, r0
   a0702:	64bb      	str	r3, [r7, #72]	; 0x48
								cond1x100 = cond_final*100; ;
   a0704:	4b5d      	ldr	r3, [pc, #372]	; (a087c <Cl_Dprep_SendPrepStateData+0x2bc>)
   a0706:	495e      	ldr	r1, [pc, #376]	; (a0880 <Cl_Dprep_SendPrepStateData+0x2c0>)
   a0708:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   a070a:	4798      	blx	r3
   a070c:	4603      	mov	r3, r0
   a070e:	647b      	str	r3, [r7, #68]	; 0x44
								cond_final_X10000= (cond1x100/(1+(tmp3/10  -25.0)*0.021));
   a0710:	4b56      	ldr	r3, [pc, #344]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a0712:	6c78      	ldr	r0, [r7, #68]	; 0x44
   a0714:	4798      	blx	r3
   a0716:	4605      	mov	r5, r0
   a0718:	460e      	mov	r6, r1
   a071a:	4b50      	ldr	r3, [pc, #320]	; (a085c <Cl_Dprep_SendPrepStateData+0x29c>)
   a071c:	681a      	ldr	r2, [r3, #0]
   a071e:	4b4d      	ldr	r3, [pc, #308]	; (a0854 <Cl_Dprep_SendPrepStateData+0x294>)
   a0720:	494d      	ldr	r1, [pc, #308]	; (a0858 <Cl_Dprep_SendPrepStateData+0x298>)
   a0722:	4610      	mov	r0, r2
   a0724:	4798      	blx	r3
   a0726:	4603      	mov	r3, r0
   a0728:	461a      	mov	r2, r3
   a072a:	4b50      	ldr	r3, [pc, #320]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a072c:	4610      	mov	r0, r2
   a072e:	4798      	blx	r3
   a0730:	4c54      	ldr	r4, [pc, #336]	; (a0884 <Cl_Dprep_SendPrepStateData+0x2c4>)
   a0732:	f04f 0200 	mov.w	r2, #0
   a0736:	4b54      	ldr	r3, [pc, #336]	; (a0888 <Cl_Dprep_SendPrepStateData+0x2c8>)
   a0738:	47a0      	blx	r4
   a073a:	4603      	mov	r3, r0
   a073c:	460c      	mov	r4, r1
   a073e:	4618      	mov	r0, r3
   a0740:	4621      	mov	r1, r4
   a0742:	4c4b      	ldr	r4, [pc, #300]	; (a0870 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a0744:	a33c      	add	r3, pc, #240	; (adr r3, a0838 <Cl_Dprep_SendPrepStateData+0x278>)
   a0746:	e9d3 2300 	ldrd	r2, r3, [r3]
   a074a:	47a0      	blx	r4
   a074c:	4603      	mov	r3, r0
   a074e:	460c      	mov	r4, r1
   a0750:	4618      	mov	r0, r3
   a0752:	4621      	mov	r1, r4
   a0754:	4c47      	ldr	r4, [pc, #284]	; (a0874 <Cl_Dprep_SendPrepStateData+0x2b4>)
   a0756:	f04f 0200 	mov.w	r2, #0
   a075a:	4b4c      	ldr	r3, [pc, #304]	; (a088c <Cl_Dprep_SendPrepStateData+0x2cc>)
   a075c:	47a0      	blx	r4
   a075e:	4603      	mov	r3, r0
   a0760:	460c      	mov	r4, r1
   a0762:	461a      	mov	r2, r3
   a0764:	4623      	mov	r3, r4
   a0766:	4c4a      	ldr	r4, [pc, #296]	; (a0890 <Cl_Dprep_SendPrepStateData+0x2d0>)
   a0768:	4628      	mov	r0, r5
   a076a:	4631      	mov	r1, r6
   a076c:	47a0      	blx	r4
   a076e:	4603      	mov	r3, r0
   a0770:	460c      	mov	r4, r1
   a0772:	4619      	mov	r1, r3
   a0774:	4622      	mov	r2, r4
   a0776:	4b40      	ldr	r3, [pc, #256]	; (a0878 <Cl_Dprep_SendPrepStateData+0x2b8>)
   a0778:	4608      	mov	r0, r1
   a077a:	4611      	mov	r1, r2
   a077c:	4798      	blx	r3
   a077e:	4603      	mov	r3, r0
   a0780:	643b      	str	r3, [r7, #64]	; 0x40
								cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   a0782:	4b3a      	ldr	r3, [pc, #232]	; (a086c <Cl_Dprep_SendPrepStateData+0x2ac>)
   a0784:	6c38      	ldr	r0, [r7, #64]	; 0x40
   a0786:	4798      	blx	r3
   a0788:	4c39      	ldr	r4, [pc, #228]	; (a0870 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a078a:	a32d      	add	r3, pc, #180	; (adr r3, a0840 <Cl_Dprep_SendPrepStateData+0x280>)
   a078c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0790:	47a0      	blx	r4
   a0792:	4603      	mov	r3, r0
   a0794:	460c      	mov	r4, r1
   a0796:	4619      	mov	r1, r3
   a0798:	4622      	mov	r2, r4
   a079a:	4b37      	ldr	r3, [pc, #220]	; (a0878 <Cl_Dprep_SendPrepStateData+0x2b8>)
   a079c:	4608      	mov	r0, r1
   a079e:	4611      	mov	r1, r2
   a07a0:	4798      	blx	r3
   a07a2:	4603      	mov	r3, r0
   a07a4:	643b      	str	r3, [r7, #64]	; 0x40
								
								
							//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
							//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
								tempdata.word = (cond_final_X10000/10);
   a07a6:	4b2b      	ldr	r3, [pc, #172]	; (a0854 <Cl_Dprep_SendPrepStateData+0x294>)
   a07a8:	492b      	ldr	r1, [pc, #172]	; (a0858 <Cl_Dprep_SendPrepStateData+0x298>)
   a07aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
   a07ac:	4798      	blx	r3
   a07ae:	4603      	mov	r3, r0
   a07b0:	461a      	mov	r2, r3
   a07b2:	4b38      	ldr	r3, [pc, #224]	; (a0894 <Cl_Dprep_SendPrepStateData+0x2d4>)
   a07b4:	4610      	mov	r0, r2
   a07b6:	4798      	blx	r3
   a07b8:	4603      	mov	r3, r0
   a07ba:	60fb      	str	r3, [r7, #12]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   a07bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a07c0:	1c5a      	adds	r2, r3, #1
   a07c2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a07c6:	7b3a      	ldrb	r2, [r7, #12]
   a07c8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a07cc:	440b      	add	r3, r1
   a07ce:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[1];
   a07d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a07d6:	1c5a      	adds	r2, r3, #1
   a07d8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a07dc:	7b7a      	ldrb	r2, [r7, #13]
   a07de:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a07e2:	440b      	add	r3, r1
   a07e4:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[2];
   a07e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a07ec:	1c5a      	adds	r2, r3, #1
   a07ee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a07f2:	7bba      	ldrb	r2, [r7, #14]
   a07f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a07f8:	440b      	add	r3, r1
   a07fa:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[3];
   a07fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0802:	1c5a      	adds	r2, r3, #1
   a0804:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0808:	7bfa      	ldrb	r2, [r7, #15]
   a080a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a080e:	440b      	add	r3, r1
   a0810:	f803 2c4c 	strb.w	r2, [r3, #-76]
   a0814:	e06e      	b.n	a08f4 <Cl_Dprep_SendPrepStateData+0x334>
   a0816:	bf00      	nop
   a0818:	eb1c432d 	.word	0xeb1c432d
   a081c:	3f1a36e2 	.word	0x3f1a36e2
   a0820:	d2f1a9fc 	.word	0xd2f1a9fc
   a0824:	3fa0624d 	.word	0x3fa0624d
   a0828:	51eb851f 	.word	0x51eb851f
   a082c:	3fed1eb8 	.word	0x3fed1eb8
   a0830:	9999999a 	.word	0x9999999a
   a0834:	3fd99999 	.word	0x3fd99999
   a0838:	24dd2f1b 	.word	0x24dd2f1b
   a083c:	3f958106 	.word	0x3f958106
   a0840:	33333333 	.word	0x33333333
   a0844:	40153333 	.word	0x40153333
   a0848:	000a6ae5 	.word	0x000a6ae5
   a084c:	0008e6a1 	.word	0x0008e6a1
   a0850:	000a64e1 	.word	0x000a64e1
   a0854:	000a66f9 	.word	0x000a66f9
   a0858:	41200000 	.word	0x41200000
   a085c:	20071c78 	.word	0x20071c78
   a0860:	cccccccd 	.word	0xcccccccd
   a0864:	51eb851f 	.word	0x51eb851f
   a0868:	000a64e9 	.word	0x000a64e9
   a086c:	000a5c69 	.word	0x000a5c69
   a0870:	000a5d11 	.word	0x000a5d11
   a0874:	000a59ad 	.word	0x000a59ad
   a0878:	000a62d5 	.word	0x000a62d5
   a087c:	000a6591 	.word	0x000a6591
   a0880:	42c80000 	.word	0x42c80000
   a0884:	000a59a9 	.word	0x000a59a9
   a0888:	40390000 	.word	0x40390000
   a088c:	3ff00000 	.word	0x3ff00000
   a0890:	000a5f65 	.word	0x000a5f65
   a0894:	000a6969 	.word	0x000a6969
							}
							else
							{
								tempdata.word = 0;
   a0898:	2300      	movs	r3, #0
   a089a:	60fb      	str	r3, [r7, #12]
							systemdataarray[count++] = tempdata.bytearray[0];
   a089c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a08a0:	1c5a      	adds	r2, r3, #1
   a08a2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a08a6:	7b3a      	ldrb	r2, [r7, #12]
   a08a8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a08ac:	440b      	add	r3, r1
   a08ae:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[1];
   a08b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a08b6:	1c5a      	adds	r2, r3, #1
   a08b8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a08bc:	7b7a      	ldrb	r2, [r7, #13]
   a08be:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a08c2:	440b      	add	r3, r1
   a08c4:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[2];
   a08c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a08cc:	1c5a      	adds	r2, r3, #1
   a08ce:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a08d2:	7bba      	ldrb	r2, [r7, #14]
   a08d4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a08d8:	440b      	add	r3, r1
   a08da:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[3];
   a08de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a08e2:	1c5a      	adds	r2, r3, #1
   a08e4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a08e8:	7bfa      	ldrb	r2, [r7, #15]
   a08ea:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a08ee:	440b      	add	r3, r1
   a08f0:	f803 2c4c 	strb.w	r2, [r3, #-76]
		
					}
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   a08f4:	4ba8      	ldr	r3, [pc, #672]	; (a0b98 <Cl_Dprep_SendPrepStateData+0x5d8>)
   a08f6:	681a      	ldr	r2, [r3, #0]
   a08f8:	4ba8      	ldr	r3, [pc, #672]	; (a0b9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   a08fa:	4610      	mov	r0, r2
   a08fc:	4798      	blx	r3
   a08fe:	4603      	mov	r3, r0
   a0900:	60fb      	str	r3, [r7, #12]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   a0902:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0906:	1c5a      	adds	r2, r3, #1
   a0908:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a090c:	7b3a      	ldrb	r2, [r7, #12]
   a090e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0912:	440b      	add	r3, r1
   a0914:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1];
   a0918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a091c:	1c5a      	adds	r2, r3, #1
   a091e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0922:	7b7a      	ldrb	r2, [r7, #13]
   a0924:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0928:	440b      	add	r3, r1
   a092a:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2];
   a092e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0932:	1c5a      	adds	r2, r3, #1
   a0934:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0938:	7bba      	ldrb	r2, [r7, #14]
   a093a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a093e:	440b      	add	r3, r1
   a0940:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3];
   a0944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0948:	1c5a      	adds	r2, r3, #1
   a094a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a094e:	7bfa      	ldrb	r2, [r7, #15]
   a0950:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0954:	440b      	add	r3, r1
   a0956:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   a095a:	f107 030c 	add.w	r3, r7, #12
   a095e:	4619      	mov	r1, r3
   a0960:	200b      	movs	r0, #11
   a0962:	4b8f      	ldr	r3, [pc, #572]	; (a0ba0 <Cl_Dprep_SendPrepStateData+0x5e0>)
   a0964:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   a0966:	89bb      	ldrh	r3, [r7, #12]
   a0968:	461a      	mov	r2, r3
   a096a:	4b8e      	ldr	r3, [pc, #568]	; (a0ba4 <Cl_Dprep_SendPrepStateData+0x5e4>)
   a096c:	4610      	mov	r0, r2
   a096e:	4798      	blx	r3
   a0970:	4c8d      	ldr	r4, [pc, #564]	; (a0ba8 <Cl_Dprep_SendPrepStateData+0x5e8>)
   a0972:	a387      	add	r3, pc, #540	; (adr r3, a0b90 <Cl_Dprep_SendPrepStateData+0x5d0>)
   a0974:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0978:	47a0      	blx	r4
   a097a:	4603      	mov	r3, r0
   a097c:	460c      	mov	r4, r1
   a097e:	4619      	mov	r1, r3
   a0980:	4622      	mov	r2, r4
   a0982:	4b8a      	ldr	r3, [pc, #552]	; (a0bac <Cl_Dprep_SendPrepStateData+0x5ec>)
   a0984:	4608      	mov	r0, r1
   a0986:	4611      	mov	r1, r2
   a0988:	4798      	blx	r3
   a098a:	4603      	mov	r3, r0
   a098c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_apt(sensordatamillivolts);
   a098e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   a0992:	4618      	mov	r0, r3
   a0994:	4b86      	ldr	r3, [pc, #536]	; (a0bb0 <Cl_Dprep_SendPrepStateData+0x5f0>)
   a0996:	4798      	blx	r3
						apt =(apt*5 + pressure_final_apt)/6;
   a0998:	4b86      	ldr	r3, [pc, #536]	; (a0bb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   a099a:	681a      	ldr	r2, [r3, #0]
   a099c:	4b86      	ldr	r3, [pc, #536]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x5f8>)
   a099e:	4987      	ldr	r1, [pc, #540]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x5fc>)
   a09a0:	4610      	mov	r0, r2
   a09a2:	4798      	blx	r3
   a09a4:	4603      	mov	r3, r0
   a09a6:	4618      	mov	r0, r3
   a09a8:	4b85      	ldr	r3, [pc, #532]	; (a0bc0 <Cl_Dprep_SendPrepStateData+0x600>)
   a09aa:	681a      	ldr	r2, [r3, #0]
   a09ac:	4b85      	ldr	r3, [pc, #532]	; (a0bc4 <Cl_Dprep_SendPrepStateData+0x604>)
   a09ae:	4611      	mov	r1, r2
   a09b0:	4798      	blx	r3
   a09b2:	4603      	mov	r3, r0
   a09b4:	461a      	mov	r2, r3
   a09b6:	4b84      	ldr	r3, [pc, #528]	; (a0bc8 <Cl_Dprep_SendPrepStateData+0x608>)
   a09b8:	4984      	ldr	r1, [pc, #528]	; (a0bcc <Cl_Dprep_SendPrepStateData+0x60c>)
   a09ba:	4610      	mov	r0, r2
   a09bc:	4798      	blx	r3
   a09be:	4603      	mov	r3, r0
   a09c0:	461a      	mov	r2, r3
   a09c2:	4b7c      	ldr	r3, [pc, #496]	; (a0bb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   a09c4:	601a      	str	r2, [r3, #0]
						tempdata.word	 = apt;
   a09c6:	4b7b      	ldr	r3, [pc, #492]	; (a0bb4 <Cl_Dprep_SendPrepStateData+0x5f4>)
   a09c8:	681a      	ldr	r2, [r3, #0]
   a09ca:	4b74      	ldr	r3, [pc, #464]	; (a0b9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   a09cc:	4610      	mov	r0, r2
   a09ce:	4798      	blx	r3
   a09d0:	4603      	mov	r3, r0
   a09d2:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a09d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a09d8:	1c5a      	adds	r2, r3, #1
   a09da:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a09de:	7b3a      	ldrb	r2, [r7, #12]
   a09e0:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a09e4:	440b      	add	r3, r1
   a09e6:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a09ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a09ee:	1c5a      	adds	r2, r3, #1
   a09f0:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a09f4:	7b7a      	ldrb	r2, [r7, #13]
   a09f6:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a09fa:	440b      	add	r3, r1
   a09fc:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0a04:	1c5a      	adds	r2, r3, #1
   a0a06:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0a0a:	7bba      	ldrb	r2, [r7, #14]
   a0a0c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0a10:	440b      	add	r3, r1
   a0a12:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0a1a:	1c5a      	adds	r2, r3, #1
   a0a1c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0a20:	7bfa      	ldrb	r2, [r7, #15]
   a0a22:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0a26:	440b      	add	r3, r1
   a0a28:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   a0a2c:	f107 030c 	add.w	r3, r7, #12
   a0a30:	4619      	mov	r1, r3
   a0a32:	200c      	movs	r0, #12
   a0a34:	4b5a      	ldr	r3, [pc, #360]	; (a0ba0 <Cl_Dprep_SendPrepStateData+0x5e0>)
   a0a36:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   a0a38:	89bb      	ldrh	r3, [r7, #12]
   a0a3a:	461a      	mov	r2, r3
   a0a3c:	4b59      	ldr	r3, [pc, #356]	; (a0ba4 <Cl_Dprep_SendPrepStateData+0x5e4>)
   a0a3e:	4610      	mov	r0, r2
   a0a40:	4798      	blx	r3
   a0a42:	4c59      	ldr	r4, [pc, #356]	; (a0ba8 <Cl_Dprep_SendPrepStateData+0x5e8>)
   a0a44:	a352      	add	r3, pc, #328	; (adr r3, a0b90 <Cl_Dprep_SendPrepStateData+0x5d0>)
   a0a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0a4a:	47a0      	blx	r4
   a0a4c:	4603      	mov	r3, r0
   a0a4e:	460c      	mov	r4, r1
   a0a50:	4619      	mov	r1, r3
   a0a52:	4622      	mov	r2, r4
   a0a54:	4b55      	ldr	r3, [pc, #340]	; (a0bac <Cl_Dprep_SendPrepStateData+0x5ec>)
   a0a56:	4608      	mov	r0, r1
   a0a58:	4611      	mov	r1, r2
   a0a5a:	4798      	blx	r3
   a0a5c:	4603      	mov	r3, r0
   a0a5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_vpt(sensordatamillivolts);
   a0a60:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
   a0a64:	4618      	mov	r0, r3
   a0a66:	4b5a      	ldr	r3, [pc, #360]	; (a0bd0 <Cl_Dprep_SendPrepStateData+0x610>)
   a0a68:	4798      	blx	r3
						vpt =(vpt*5 + pressure_final_vpt)/6;
   a0a6a:	4b5a      	ldr	r3, [pc, #360]	; (a0bd4 <Cl_Dprep_SendPrepStateData+0x614>)
   a0a6c:	681a      	ldr	r2, [r3, #0]
   a0a6e:	4b52      	ldr	r3, [pc, #328]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x5f8>)
   a0a70:	4952      	ldr	r1, [pc, #328]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x5fc>)
   a0a72:	4610      	mov	r0, r2
   a0a74:	4798      	blx	r3
   a0a76:	4603      	mov	r3, r0
   a0a78:	4618      	mov	r0, r3
   a0a7a:	4b57      	ldr	r3, [pc, #348]	; (a0bd8 <Cl_Dprep_SendPrepStateData+0x618>)
   a0a7c:	681a      	ldr	r2, [r3, #0]
   a0a7e:	4b51      	ldr	r3, [pc, #324]	; (a0bc4 <Cl_Dprep_SendPrepStateData+0x604>)
   a0a80:	4611      	mov	r1, r2
   a0a82:	4798      	blx	r3
   a0a84:	4603      	mov	r3, r0
   a0a86:	461a      	mov	r2, r3
   a0a88:	4b4f      	ldr	r3, [pc, #316]	; (a0bc8 <Cl_Dprep_SendPrepStateData+0x608>)
   a0a8a:	4950      	ldr	r1, [pc, #320]	; (a0bcc <Cl_Dprep_SendPrepStateData+0x60c>)
   a0a8c:	4610      	mov	r0, r2
   a0a8e:	4798      	blx	r3
   a0a90:	4603      	mov	r3, r0
   a0a92:	461a      	mov	r2, r3
   a0a94:	4b4f      	ldr	r3, [pc, #316]	; (a0bd4 <Cl_Dprep_SendPrepStateData+0x614>)
   a0a96:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (vpt);
   a0a98:	4b4e      	ldr	r3, [pc, #312]	; (a0bd4 <Cl_Dprep_SendPrepStateData+0x614>)
   a0a9a:	681a      	ldr	r2, [r3, #0]
   a0a9c:	4b3f      	ldr	r3, [pc, #252]	; (a0b9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   a0a9e:	4610      	mov	r0, r2
   a0aa0:	4798      	blx	r3
   a0aa2:	4603      	mov	r3, r0
   a0aa4:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a0aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0aaa:	1c5a      	adds	r2, r3, #1
   a0aac:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0ab0:	7b3a      	ldrb	r2, [r7, #12]
   a0ab2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0ab6:	440b      	add	r3, r1
   a0ab8:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a0abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0ac0:	1c5a      	adds	r2, r3, #1
   a0ac2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0ac6:	7b7a      	ldrb	r2, [r7, #13]
   a0ac8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0acc:	440b      	add	r3, r1
   a0ace:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0ad6:	1c5a      	adds	r2, r3, #1
   a0ad8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0adc:	7bba      	ldrb	r2, [r7, #14]
   a0ade:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0ae2:	440b      	add	r3, r1
   a0ae4:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0aec:	1c5a      	adds	r2, r3, #1
   a0aee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0af2:	7bfa      	ldrb	r2, [r7, #15]
   a0af4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0af8:	440b      	add	r3, r1
   a0afa:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   a0afe:	79fb      	ldrb	r3, [r7, #7]
   a0b00:	2b04      	cmp	r3, #4
   a0b02:	d135      	bne.n	a0b70 <Cl_Dprep_SendPrepStateData+0x5b0>
					{
						TMP = 5000;
   a0b04:	4b35      	ldr	r3, [pc, #212]	; (a0bdc <Cl_Dprep_SendPrepStateData+0x61c>)
   a0b06:	4a36      	ldr	r2, [pc, #216]	; (a0be0 <Cl_Dprep_SendPrepStateData+0x620>)
   a0b08:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (TMP);
   a0b0a:	4b34      	ldr	r3, [pc, #208]	; (a0bdc <Cl_Dprep_SendPrepStateData+0x61c>)
   a0b0c:	681a      	ldr	r2, [r3, #0]
   a0b0e:	4b23      	ldr	r3, [pc, #140]	; (a0b9c <Cl_Dprep_SendPrepStateData+0x5dc>)
   a0b10:	4610      	mov	r0, r2
   a0b12:	4798      	blx	r3
   a0b14:	4603      	mov	r3, r0
   a0b16:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a0b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b1c:	1c5a      	adds	r2, r3, #1
   a0b1e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b22:	7b3a      	ldrb	r2, [r7, #12]
   a0b24:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b28:	440b      	add	r3, r1
   a0b2a:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a0b2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b32:	1c5a      	adds	r2, r3, #1
   a0b34:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b38:	7b7a      	ldrb	r2, [r7, #13]
   a0b3a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b3e:	440b      	add	r3, r1
   a0b40:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b48:	1c5a      	adds	r2, r3, #1
   a0b4a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b4e:	7bba      	ldrb	r2, [r7, #14]
   a0b50:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b54:	440b      	add	r3, r1
   a0b56:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b5e:	1c5a      	adds	r2, r3, #1
   a0b60:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b64:	7bfa      	ldrb	r2, [r7, #15]
   a0b66:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b6a:	440b      	add	r3, r1
   a0b6c:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   a0b70:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
   a0b74:	f107 0314 	add.w	r3, r7, #20
   a0b78:	4619      	mov	r1, r3
   a0b7a:	202a      	movs	r0, #42	; 0x2a
   a0b7c:	4b19      	ldr	r3, [pc, #100]	; (a0be4 <Cl_Dprep_SendPrepStateData+0x624>)
   a0b7e:	4798      	blx	r3
   a0b80:	4603      	mov	r3, r0
   a0b82:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   a0b86:	2300      	movs	r3, #0
}
   a0b88:	4618      	mov	r0, r3
   a0b8a:	3764      	adds	r7, #100	; 0x64
   a0b8c:	46bd      	mov	sp, r7
   a0b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a0b90:	58e21965 	.word	0x58e21965
   a0b94:	3fe9b717 	.word	0x3fe9b717
   a0b98:	20071c78 	.word	0x20071c78
   a0b9c:	000a6969 	.word	0x000a6969
   a0ba0:	0008e6a1 	.word	0x0008e6a1
   a0ba4:	000a5c45 	.word	0x000a5c45
   a0ba8:	000a5d11 	.word	0x000a5d11
   a0bac:	000a6295 	.word	0x000a6295
   a0bb0:	000840b5 	.word	0x000840b5
   a0bb4:	20071c7c 	.word	0x20071c7c
   a0bb8:	000a6591 	.word	0x000a6591
   a0bbc:	40a00000 	.word	0x40a00000
   a0bc0:	20072160 	.word	0x20072160
   a0bc4:	000a6381 	.word	0x000a6381
   a0bc8:	000a66f9 	.word	0x000a66f9
   a0bcc:	40c00000 	.word	0x40c00000
   a0bd0:	00084235 	.word	0x00084235
   a0bd4:	20071c80 	.word	0x20071c80
   a0bd8:	20071774 	.word	0x20071774
   a0bdc:	20071c84 	.word	0x20071c84
   a0be0:	459c4000 	.word	0x459c4000
   a0be4:	0009b805 	.word	0x0009b805

000a0be8 <Cl_Dprep_Stoppreparation>:
// 	return CL_OK;
// }


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   a0be8:	b580      	push	{r7, lr}
   a0bea:	b082      	sub	sp, #8
   a0bec:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a0bee:	2300      	movs	r3, #0
   a0bf0:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	sv_cntrl_setredalarm();
   a0bf2:	4b3b      	ldr	r3, [pc, #236]	; (a0ce0 <Cl_Dprep_Stoppreparation+0xf8>)
   a0bf4:	4798      	blx	r3
	sv_cntrl_nobuzzer(); // manav01 added
   a0bf6:	4b3b      	ldr	r3, [pc, #236]	; (a0ce4 <Cl_Dprep_Stoppreparation+0xfc>)
   a0bf8:	4798      	blx	r3
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   a0bfa:	4b3b      	ldr	r3, [pc, #236]	; (a0ce8 <Cl_Dprep_Stoppreparation+0x100>)
   a0bfc:	781b      	ldrb	r3, [r3, #0]
   a0bfe:	2b00      	cmp	r3, #0
   a0c00:	d068      	beq.n	a0cd4 <Cl_Dprep_Stoppreparation+0xec>
   a0c02:	4b39      	ldr	r3, [pc, #228]	; (a0ce8 <Cl_Dprep_Stoppreparation+0x100>)
   a0c04:	781b      	ldrb	r3, [r3, #0]
   a0c06:	2b0b      	cmp	r3, #11
   a0c08:	d064      	beq.n	a0cd4 <Cl_Dprep_Stoppreparation+0xec>
   a0c0a:	4b37      	ldr	r3, [pc, #220]	; (a0ce8 <Cl_Dprep_Stoppreparation+0x100>)
   a0c0c:	781b      	ldrb	r3, [r3, #0]
   a0c0e:	2b0c      	cmp	r3, #12
   a0c10:	d060      	beq.n	a0cd4 <Cl_Dprep_Stoppreparation+0xec>
				{
					
					stability_counter = 0;
   a0c12:	4b36      	ldr	r3, [pc, #216]	; (a0cec <Cl_Dprep_Stoppreparation+0x104>)
   a0c14:	2200      	movs	r2, #0
   a0c16:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   a0c18:	4b35      	ldr	r3, [pc, #212]	; (a0cf0 <Cl_Dprep_Stoppreparation+0x108>)
   a0c1a:	2200      	movs	r2, #0
   a0c1c:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   a0c1e:	4b35      	ldr	r3, [pc, #212]	; (a0cf4 <Cl_Dprep_Stoppreparation+0x10c>)
   a0c20:	2200      	movs	r2, #0
   a0c22:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   a0c24:	4b34      	ldr	r3, [pc, #208]	; (a0cf8 <Cl_Dprep_Stoppreparation+0x110>)
   a0c26:	2200      	movs	r2, #0
   a0c28:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   a0c2a:	4b34      	ldr	r3, [pc, #208]	; (a0cfc <Cl_Dprep_Stoppreparation+0x114>)
   a0c2c:	2200      	movs	r2, #0
   a0c2e:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   a0c30:	4b33      	ldr	r3, [pc, #204]	; (a0d00 <Cl_Dprep_Stoppreparation+0x118>)
   a0c32:	2200      	movs	r2, #0
   a0c34:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   a0c36:	4b33      	ldr	r3, [pc, #204]	; (a0d04 <Cl_Dprep_Stoppreparation+0x11c>)
   a0c38:	2200      	movs	r2, #0
   a0c3a:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   a0c3c:	4b32      	ldr	r3, [pc, #200]	; (a0d08 <Cl_Dprep_Stoppreparation+0x120>)
   a0c3e:	2200      	movs	r2, #0
   a0c40:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   a0c42:	4b32      	ldr	r3, [pc, #200]	; (a0d0c <Cl_Dprep_Stoppreparation+0x124>)
   a0c44:	2200      	movs	r2, #0
   a0c46:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   a0c48:	4b31      	ldr	r3, [pc, #196]	; (a0d10 <Cl_Dprep_Stoppreparation+0x128>)
   a0c4a:	2200      	movs	r2, #0
   a0c4c:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   a0c4e:	4b31      	ldr	r3, [pc, #196]	; (a0d14 <Cl_Dprep_Stoppreparation+0x12c>)
   a0c50:	2200      	movs	r2, #0
   a0c52:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   a0c54:	4b30      	ldr	r3, [pc, #192]	; (a0d18 <Cl_Dprep_Stoppreparation+0x130>)
   a0c56:	2200      	movs	r2, #0
   a0c58:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   a0c5a:	4b30      	ldr	r3, [pc, #192]	; (a0d1c <Cl_Dprep_Stoppreparation+0x134>)
   a0c5c:	2200      	movs	r2, #0
   a0c5e:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   a0c60:	4b2f      	ldr	r3, [pc, #188]	; (a0d20 <Cl_Dprep_Stoppreparation+0x138>)
   a0c62:	2200      	movs	r2, #0
   a0c64:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   a0c66:	4b2f      	ldr	r3, [pc, #188]	; (a0d24 <Cl_Dprep_Stoppreparation+0x13c>)
   a0c68:	2200      	movs	r2, #0
   a0c6a:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a0c6c:	4b2e      	ldr	r3, [pc, #184]	; (a0d28 <Cl_Dprep_Stoppreparation+0x140>)
   a0c6e:	2200      	movs	r2, #0
   a0c70:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   a0c72:	4b2e      	ldr	r3, [pc, #184]	; (a0d2c <Cl_Dprep_Stoppreparation+0x144>)
   a0c74:	2200      	movs	r2, #0
   a0c76:	801a      	strh	r2, [r3, #0]
						
					Cl_deactivate_prep_alarms();							
   a0c78:	4b2d      	ldr	r3, [pc, #180]	; (a0d30 <Cl_Dprep_Stoppreparation+0x148>)
   a0c7a:	4798      	blx	r3
							
							
							
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   a0c7c:	4b2d      	ldr	r3, [pc, #180]	; (a0d34 <Cl_Dprep_Stoppreparation+0x14c>)
   a0c7e:	4798      	blx	r3
   a0c80:	4603      	mov	r3, r0
   a0c82:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   a0c84:	2011      	movs	r0, #17
   a0c86:	4b2c      	ldr	r3, [pc, #176]	; (a0d38 <Cl_Dprep_Stoppreparation+0x150>)
   a0c88:	4798      	blx	r3
   a0c8a:	4603      	mov	r3, r0
   a0c8c:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a0c8e:	4b2b      	ldr	r3, [pc, #172]	; (a0d3c <Cl_Dprep_Stoppreparation+0x154>)
   a0c90:	4798      	blx	r3
   a0c92:	4603      	mov	r3, r0
   a0c94:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a0c96:	2004      	movs	r0, #4
   a0c98:	4b29      	ldr	r3, [pc, #164]	; (a0d40 <Cl_Dprep_Stoppreparation+0x158>)
   a0c9a:	4798      	blx	r3
   a0c9c:	4603      	mov	r3, r0
   a0c9e:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a0ca0:	2100      	movs	r1, #0
   a0ca2:	2002      	movs	r0, #2
   a0ca4:	4b27      	ldr	r3, [pc, #156]	; (a0d44 <Cl_Dprep_Stoppreparation+0x15c>)
   a0ca6:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   a0ca8:	4b27      	ldr	r3, [pc, #156]	; (a0d48 <Cl_Dprep_Stoppreparation+0x160>)
   a0caa:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a0cac:	4b0e      	ldr	r3, [pc, #56]	; (a0ce8 <Cl_Dprep_Stoppreparation+0x100>)
   a0cae:	781b      	ldrb	r3, [r3, #0]
   a0cb0:	2b06      	cmp	r3, #6
   a0cb2:	d104      	bne.n	a0cbe <Cl_Dprep_Stoppreparation+0xd6>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a0cb4:	2100      	movs	r1, #0
   a0cb6:	2009      	movs	r0, #9
   a0cb8:	4b22      	ldr	r3, [pc, #136]	; (a0d44 <Cl_Dprep_Stoppreparation+0x15c>)
   a0cba:	4798      	blx	r3
   a0cbc:	e007      	b.n	a0cce <Cl_Dprep_Stoppreparation+0xe6>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a0cbe:	1dbb      	adds	r3, r7, #6
   a0cc0:	2200      	movs	r2, #0
   a0cc2:	4619      	mov	r1, r3
   a0cc4:	202d      	movs	r0, #45	; 0x2d
   a0cc6:	4b21      	ldr	r3, [pc, #132]	; (a0d4c <Cl_Dprep_Stoppreparation+0x164>)
   a0cc8:	4798      	blx	r3
   a0cca:	4603      	mov	r3, r0
   a0ccc:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   a0cce:	4b06      	ldr	r3, [pc, #24]	; (a0ce8 <Cl_Dprep_Stoppreparation+0x100>)
   a0cd0:	2200      	movs	r2, #0
   a0cd2:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   a0cd4:	2300      	movs	r3, #0
}
   a0cd6:	4618      	mov	r0, r3
   a0cd8:	3708      	adds	r7, #8
   a0cda:	46bd      	mov	sp, r7
   a0cdc:	bd80      	pop	{r7, pc}
   a0cde:	bf00      	nop
   a0ce0:	00099d01 	.word	0x00099d01
   a0ce4:	00099d8d 	.word	0x00099d8d
   a0ce8:	20071c5f 	.word	0x20071c5f
   a0cec:	20071c1c 	.word	0x20071c1c
   a0cf0:	20071c20 	.word	0x20071c20
   a0cf4:	20071c24 	.word	0x20071c24
   a0cf8:	20071c28 	.word	0x20071c28
   a0cfc:	20071c2c 	.word	0x20071c2c
   a0d00:	20071c30 	.word	0x20071c30
   a0d04:	20071c34 	.word	0x20071c34
   a0d08:	20071c38 	.word	0x20071c38
   a0d0c:	20071c3e 	.word	0x20071c3e
   a0d10:	20071c40 	.word	0x20071c40
   a0d14:	20071c42 	.word	0x20071c42
   a0d18:	20071c44 	.word	0x20071c44
   a0d1c:	20071c46 	.word	0x20071c46
   a0d20:	20071c48 	.word	0x20071c48
   a0d24:	20071c4a 	.word	0x20071c4a
   a0d28:	20071c4c 	.word	0x20071c4c
   a0d2c:	20071c4e 	.word	0x20071c4e
   a0d30:	000a2179 	.word	0x000a2179
   a0d34:	00099c09 	.word	0x00099c09
   a0d38:	00099c99 	.word	0x00099c99
   a0d3c:	00099a95 	.word	0x00099a95
   a0d40:	00089385 	.word	0x00089385
   a0d44:	000883f1 	.word	0x000883f1
   a0d48:	000a20d1 	.word	0x000a20d1
   a0d4c:	0009b805 	.word	0x0009b805

000a0d50 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   a0d50:	b580      	push	{r7, lr}
   a0d52:	b082      	sub	sp, #8
   a0d54:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a0d56:	2300      	movs	r3, #0
   a0d58:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0d5a:	2351      	movs	r3, #81	; 0x51
   a0d5c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a0d5e:	4b5f      	ldr	r3, [pc, #380]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d60:	2200      	movs	r2, #0
   a0d62:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   a0d64:	2001      	movs	r0, #1
   a0d66:	4b5e      	ldr	r3, [pc, #376]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0d68:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   a0d6a:	4b5c      	ldr	r3, [pc, #368]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d6c:	2200      	movs	r2, #0
   a0d6e:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   a0d70:	4b5a      	ldr	r3, [pc, #360]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d72:	2200      	movs	r2, #0
   a0d74:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   a0d76:	2005      	movs	r0, #5
   a0d78:	4b59      	ldr	r3, [pc, #356]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0d7a:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   a0d7c:	2006      	movs	r0, #6
   a0d7e:	4b58      	ldr	r3, [pc, #352]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0d80:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a0d82:	4b56      	ldr	r3, [pc, #344]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d84:	2200      	movs	r2, #0
   a0d86:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a0d88:	4b54      	ldr	r3, [pc, #336]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d8a:	2200      	movs	r2, #0
   a0d8c:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a0d8e:	2003      	movs	r0, #3
   a0d90:	4b53      	ldr	r3, [pc, #332]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0d92:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a0d94:	2004      	movs	r0, #4
   a0d96:	4b52      	ldr	r3, [pc, #328]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0d98:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   a0d9a:	4b50      	ldr	r3, [pc, #320]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0d9c:	2200      	movs	r2, #0
   a0d9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   a0da2:	202a      	movs	r0, #42	; 0x2a
   a0da4:	4b4e      	ldr	r3, [pc, #312]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0da6:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   a0da8:	4b4c      	ldr	r3, [pc, #304]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0daa:	2200      	movs	r2, #0
   a0dac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   a0db0:	202c      	movs	r0, #44	; 0x2c
   a0db2:	4b4b      	ldr	r3, [pc, #300]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0db4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   a0db6:	4b49      	ldr	r3, [pc, #292]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0db8:	2200      	movs	r2, #0
   a0dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a0dbe:	4b47      	ldr	r3, [pc, #284]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0dc0:	2200      	movs	r2, #0
   a0dc2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a0dc6:	2008      	movs	r0, #8
   a0dc8:	4b45      	ldr	r3, [pc, #276]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0dca:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   a0dcc:	2007      	movs	r0, #7
   a0dce:	4b44      	ldr	r3, [pc, #272]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0dd0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   a0dd2:	4b42      	ldr	r3, [pc, #264]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0dd4:	2200      	movs	r2, #0
   a0dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   a0dda:	4b40      	ldr	r3, [pc, #256]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0ddc:	2200      	movs	r2, #0
   a0dde:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   a0de2:	4b3e      	ldr	r3, [pc, #248]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0de4:	2200      	movs	r2, #0
   a0de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a0dea:	4b3c      	ldr	r3, [pc, #240]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0dec:	2200      	movs	r2, #0
   a0dee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a0df2:	4b3a      	ldr	r3, [pc, #232]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0df4:	2200      	movs	r2, #0
   a0df6:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   a0dfa:	4b38      	ldr	r3, [pc, #224]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0dfc:	2200      	movs	r2, #0
   a0dfe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   a0e02:	4b36      	ldr	r3, [pc, #216]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e04:	2200      	movs	r2, #0
   a0e06:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   a0e0a:	4b34      	ldr	r3, [pc, #208]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e0c:	2200      	movs	r2, #0
   a0e0e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   a0e12:	4b32      	ldr	r3, [pc, #200]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e14:	2200      	movs	r2, #0
   a0e16:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   a0e1a:	4b30      	ldr	r3, [pc, #192]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e1c:	2200      	movs	r2, #0
   a0e1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a0e22:	4b2e      	ldr	r3, [pc, #184]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e24:	2200      	movs	r2, #0
   a0e26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a0e2a:	4b2c      	ldr	r3, [pc, #176]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e2c:	2200      	movs	r2, #0
   a0e2e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a0e32:	2015      	movs	r0, #21
   a0e34:	4b2a      	ldr	r3, [pc, #168]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e36:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a0e38:	2016      	movs	r0, #22
   a0e3a:	4b29      	ldr	r3, [pc, #164]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e3c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a0e3e:	4b27      	ldr	r3, [pc, #156]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e40:	2200      	movs	r2, #0
   a0e42:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a0e46:	4b25      	ldr	r3, [pc, #148]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e48:	2200      	movs	r2, #0
   a0e4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a0e4e:	2017      	movs	r0, #23
   a0e50:	4b23      	ldr	r3, [pc, #140]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e52:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a0e54:	2018      	movs	r0, #24
   a0e56:	4b22      	ldr	r3, [pc, #136]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e58:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a0e5a:	4b20      	ldr	r3, [pc, #128]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e5c:	2200      	movs	r2, #0
   a0e5e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a0e62:	4b1e      	ldr	r3, [pc, #120]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e64:	2200      	movs	r2, #0
   a0e66:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a0e6a:	2027      	movs	r0, #39	; 0x27
   a0e6c:	4b1c      	ldr	r3, [pc, #112]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e6e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a0e70:	2028      	movs	r0, #40	; 0x28
   a0e72:	4b1b      	ldr	r3, [pc, #108]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e74:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a0e76:	4b19      	ldr	r3, [pc, #100]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e78:	2200      	movs	r2, #0
   a0e7a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a0e7e:	4b17      	ldr	r3, [pc, #92]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e80:	2200      	movs	r2, #0
   a0e82:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a0e86:	4b15      	ldr	r3, [pc, #84]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e88:	2200      	movs	r2, #0
   a0e8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a0e8e:	200f      	movs	r0, #15
   a0e90:	4b13      	ldr	r3, [pc, #76]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e92:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a0e94:	2010      	movs	r0, #16
   a0e96:	4b12      	ldr	r3, [pc, #72]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0e98:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a0e9a:	4b10      	ldr	r3, [pc, #64]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0e9c:	2200      	movs	r2, #0
   a0e9e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   a0ea2:	4b0e      	ldr	r3, [pc, #56]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0ea4:	2200      	movs	r2, #0
   a0ea6:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a0eaa:	2011      	movs	r0, #17
   a0eac:	4b0c      	ldr	r3, [pc, #48]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0eae:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a0eb0:	2012      	movs	r0, #18
   a0eb2:	4b0b      	ldr	r3, [pc, #44]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0eb4:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a0eb6:	4b09      	ldr	r3, [pc, #36]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0eb8:	2200      	movs	r2, #0
   a0eba:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a0ebe:	4b07      	ldr	r3, [pc, #28]	; (a0edc <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a0ec0:	2200      	movs	r2, #0
   a0ec2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a0ec6:	2013      	movs	r0, #19
   a0ec8:	4b05      	ldr	r3, [pc, #20]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0eca:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a0ecc:	2014      	movs	r0, #20
   a0ece:	4b04      	ldr	r3, [pc, #16]	; (a0ee0 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a0ed0:	4798      	blx	r3

	return (Cl_dprepretcode);
   a0ed2:	79fb      	ldrb	r3, [r7, #7]
	
}
   a0ed4:	4618      	mov	r0, r3
   a0ed6:	3708      	adds	r7, #8
   a0ed8:	46bd      	mov	sp, r7
   a0eda:	bd80      	pop	{r7, pc}
   a0edc:	20070bcc 	.word	0x20070bcc
   a0ee0:	00082ed5 	.word	0x00082ed5

000a0ee4 <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   a0ee4:	b590      	push	{r4, r7, lr}
   a0ee6:	b089      	sub	sp, #36	; 0x24
   a0ee8:	af00      	add	r7, sp, #0
   a0eea:	4604      	mov	r4, r0
   a0eec:	1d38      	adds	r0, r7, #4
   a0eee:	e880 0006 	stmia.w	r0, {r1, r2}
   a0ef2:	461a      	mov	r2, r3
   a0ef4:	4623      	mov	r3, r4
   a0ef6:	73fb      	strb	r3, [r7, #15]
   a0ef8:	4613      	mov	r3, r2
   a0efa:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a0efc:	2300      	movs	r3, #0
   a0efe:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0f00:	2351      	movs	r3, #81	; 0x51
   a0f02:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   a0f04:	f107 0314 	add.w	r3, r7, #20
   a0f08:	2200      	movs	r2, #0
   a0f0a:	601a      	str	r2, [r3, #0]
   a0f0c:	605a      	str	r2, [r3, #4]
	Cl_Uint8Type  databytecnt = 0;
   a0f0e:	2300      	movs	r3, #0
   a0f10:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   a0f12:	7bfb      	ldrb	r3, [r7, #15]
   a0f14:	3b05      	subs	r3, #5
   a0f16:	2b18      	cmp	r3, #24
   a0f18:	f200 837c 	bhi.w	a1614 <Cl_Dprep_setdata+0x730>
   a0f1c:	a201      	add	r2, pc, #4	; (adr r2, a0f24 <Cl_Dprep_setdata+0x40>)
   a0f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a0f22:	bf00      	nop
   a0f24:	000a0f89 	.word	0x000a0f89
   a0f28:	000a0fb3 	.word	0x000a0fb3
   a0f2c:	000a0fdd 	.word	0x000a0fdd
   a0f30:	000a1031 	.word	0x000a1031
   a0f34:	000a105b 	.word	0x000a105b
   a0f38:	000a1615 	.word	0x000a1615
   a0f3c:	000a1085 	.word	0x000a1085
   a0f40:	000a10af 	.word	0x000a10af
   a0f44:	000a10d9 	.word	0x000a10d9
   a0f48:	000a1007 	.word	0x000a1007
   a0f4c:	000a1103 	.word	0x000a1103
   a0f50:	000a1615 	.word	0x000a1615
   a0f54:	000a1615 	.word	0x000a1615
   a0f58:	000a1615 	.word	0x000a1615
   a0f5c:	000a1131 	.word	0x000a1131
   a0f60:	000a11a1 	.word	0x000a11a1
   a0f64:	000a1211 	.word	0x000a1211
   a0f68:	000a128d 	.word	0x000a128d
   a0f6c:	000a12fd 	.word	0x000a12fd
   a0f70:	000a136d 	.word	0x000a136d
   a0f74:	000a13db 	.word	0x000a13db
   a0f78:	000a144b 	.word	0x000a144b
   a0f7c:	000a14bb 	.word	0x000a14bb
   a0f80:	000a152b 	.word	0x000a152b
   a0f84:	000a15a5 	.word	0x000a15a5
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a0f88:	4bbd      	ldr	r3, [pc, #756]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a0f8a:	78da      	ldrb	r2, [r3, #3]
   a0f8c:	1d3b      	adds	r3, r7, #4
   a0f8e:	4619      	mov	r1, r3
   a0f90:	2005      	movs	r0, #5
   a0f92:	4bbc      	ldr	r3, [pc, #752]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a0f94:	4798      	blx	r3
   a0f96:	4603      	mov	r3, r0
   a0f98:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   a0f9a:	2305      	movs	r3, #5
   a0f9c:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   a0f9e:	f107 0314 	add.w	r3, r7, #20
   a0fa2:	3301      	adds	r3, #1
   a0fa4:	4619      	mov	r1, r3
   a0fa6:	2005      	movs	r0, #5
   a0fa8:	4bb7      	ldr	r3, [pc, #732]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a0faa:	4798      	blx	r3
   a0fac:	4603      	mov	r3, r0
   a0fae:	77fb      	strb	r3, [r7, #31]
					
					 break;
   a0fb0:	e331      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a0fb2:	4bb3      	ldr	r3, [pc, #716]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a0fb4:	78da      	ldrb	r2, [r3, #3]
   a0fb6:	1d3b      	adds	r3, r7, #4
   a0fb8:	4619      	mov	r1, r3
   a0fba:	2006      	movs	r0, #6
   a0fbc:	4bb1      	ldr	r3, [pc, #708]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a0fbe:	4798      	blx	r3
   a0fc0:	4603      	mov	r3, r0
   a0fc2:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   a0fc4:	2306      	movs	r3, #6
   a0fc6:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a0fc8:	f107 0314 	add.w	r3, r7, #20
   a0fcc:	3301      	adds	r3, #1
   a0fce:	4619      	mov	r1, r3
   a0fd0:	2006      	movs	r0, #6
   a0fd2:	4bad      	ldr	r3, [pc, #692]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a0fd4:	4798      	blx	r3
   a0fd6:	4603      	mov	r3, r0
   a0fd8:	77fb      	strb	r3, [r7, #31]

					 break;
   a0fda:	e31c      	b.n	a1616 <Cl_Dprep_setdata+0x732>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a0fdc:	4ba8      	ldr	r3, [pc, #672]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a0fde:	78da      	ldrb	r2, [r3, #3]
   a0fe0:	1d3b      	adds	r3, r7, #4
   a0fe2:	4619      	mov	r1, r3
   a0fe4:	200e      	movs	r0, #14
   a0fe6:	4ba7      	ldr	r3, [pc, #668]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a0fe8:	4798      	blx	r3
   a0fea:	4603      	mov	r3, r0
   a0fec:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   a0fee:	2307      	movs	r3, #7
   a0ff0:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a0ff2:	f107 0314 	add.w	r3, r7, #20
   a0ff6:	3301      	adds	r3, #1
   a0ff8:	4619      	mov	r1, r3
   a0ffa:	200e      	movs	r0, #14
   a0ffc:	4ba2      	ldr	r3, [pc, #648]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a0ffe:	4798      	blx	r3
   a1000:	4603      	mov	r3, r0
   a1002:	77fb      	strb	r3, [r7, #31]
					 break;
   a1004:	e307      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1006:	4b9e      	ldr	r3, [pc, #632]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a1008:	78da      	ldrb	r2, [r3, #3]
   a100a:	1d3b      	adds	r3, r7, #4
   a100c:	4619      	mov	r1, r3
   a100e:	200f      	movs	r0, #15
   a1010:	4b9c      	ldr	r3, [pc, #624]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a1012:	4798      	blx	r3
   a1014:	4603      	mov	r3, r0
   a1016:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   a1018:	230e      	movs	r3, #14
   a101a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a101c:	f107 0314 	add.w	r3, r7, #20
   a1020:	3301      	adds	r3, #1
   a1022:	4619      	mov	r1, r3
   a1024:	200f      	movs	r0, #15
   a1026:	4b98      	ldr	r3, [pc, #608]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1028:	4798      	blx	r3
   a102a:	4603      	mov	r3, r0
   a102c:	77fb      	strb	r3, [r7, #31]

					break;
   a102e:	e2f2      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1030:	4b93      	ldr	r3, [pc, #588]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a1032:	78da      	ldrb	r2, [r3, #3]
   a1034:	1d3b      	adds	r3, r7, #4
   a1036:	4619      	mov	r1, r3
   a1038:	2007      	movs	r0, #7
   a103a:	4b92      	ldr	r3, [pc, #584]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a103c:	4798      	blx	r3
   a103e:	4603      	mov	r3, r0
   a1040:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   a1042:	2308      	movs	r3, #8
   a1044:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a1046:	f107 0314 	add.w	r3, r7, #20
   a104a:	3301      	adds	r3, #1
   a104c:	4619      	mov	r1, r3
   a104e:	2007      	movs	r0, #7
   a1050:	4b8d      	ldr	r3, [pc, #564]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1052:	4798      	blx	r3
   a1054:	4603      	mov	r3, r0
   a1056:	77fb      	strb	r3, [r7, #31]

					 break;
   a1058:	e2dd      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a105a:	4b89      	ldr	r3, [pc, #548]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a105c:	78da      	ldrb	r2, [r3, #3]
   a105e:	1d3b      	adds	r3, r7, #4
   a1060:	4619      	mov	r1, r3
   a1062:	2008      	movs	r0, #8
   a1064:	4b87      	ldr	r3, [pc, #540]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a1066:	4798      	blx	r3
   a1068:	4603      	mov	r3, r0
   a106a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   a106c:	2309      	movs	r3, #9
   a106e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a1070:	f107 0314 	add.w	r3, r7, #20
   a1074:	3301      	adds	r3, #1
   a1076:	4619      	mov	r1, r3
   a1078:	2008      	movs	r0, #8
   a107a:	4b83      	ldr	r3, [pc, #524]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a107c:	4798      	blx	r3
   a107e:	4603      	mov	r3, r0
   a1080:	77fb      	strb	r3, [r7, #31]

					 break;
   a1082:	e2c8      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1084:	4b7e      	ldr	r3, [pc, #504]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a1086:	78da      	ldrb	r2, [r3, #3]
   a1088:	1d3b      	adds	r3, r7, #4
   a108a:	4619      	mov	r1, r3
   a108c:	200a      	movs	r0, #10
   a108e:	4b7d      	ldr	r3, [pc, #500]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a1090:	4798      	blx	r3
   a1092:	4603      	mov	r3, r0
   a1094:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   a1096:	230b      	movs	r3, #11
   a1098:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a109a:	f107 0314 	add.w	r3, r7, #20
   a109e:	3301      	adds	r3, #1
   a10a0:	4619      	mov	r1, r3
   a10a2:	200a      	movs	r0, #10
   a10a4:	4b78      	ldr	r3, [pc, #480]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a10a6:	4798      	blx	r3
   a10a8:	4603      	mov	r3, r0
   a10aa:	77fb      	strb	r3, [r7, #31]

					 break;
   a10ac:	e2b3      	b.n	a1616 <Cl_Dprep_setdata+0x732>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a10ae:	4b74      	ldr	r3, [pc, #464]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a10b0:	78da      	ldrb	r2, [r3, #3]
   a10b2:	1d3b      	adds	r3, r7, #4
   a10b4:	4619      	mov	r1, r3
   a10b6:	200b      	movs	r0, #11
   a10b8:	4b72      	ldr	r3, [pc, #456]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a10ba:	4798      	blx	r3
   a10bc:	4603      	mov	r3, r0
   a10be:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   a10c0:	230c      	movs	r3, #12
   a10c2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a10c4:	f107 0314 	add.w	r3, r7, #20
   a10c8:	3301      	adds	r3, #1
   a10ca:	4619      	mov	r1, r3
   a10cc:	200b      	movs	r0, #11
   a10ce:	4b6e      	ldr	r3, [pc, #440]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a10d0:	4798      	blx	r3
   a10d2:	4603      	mov	r3, r0
   a10d4:	77fb      	strb	r3, [r7, #31]

					 break;
   a10d6:	e29e      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a10d8:	4b69      	ldr	r3, [pc, #420]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a10da:	78da      	ldrb	r2, [r3, #3]
   a10dc:	1d3b      	adds	r3, r7, #4
   a10de:	4619      	mov	r1, r3
   a10e0:	200c      	movs	r0, #12
   a10e2:	4b68      	ldr	r3, [pc, #416]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a10e4:	4798      	blx	r3
   a10e6:	4603      	mov	r3, r0
   a10e8:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   a10ea:	230d      	movs	r3, #13
   a10ec:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a10ee:	f107 0314 	add.w	r3, r7, #20
   a10f2:	3301      	adds	r3, #1
   a10f4:	4619      	mov	r1, r3
   a10f6:	200c      	movs	r0, #12
   a10f8:	4b63      	ldr	r3, [pc, #396]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a10fa:	4798      	blx	r3
   a10fc:	4603      	mov	r3, r0
   a10fe:	77fb      	strb	r3, [r7, #31]

					 break;
   a1100:	e289      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a1102:	4b5f      	ldr	r3, [pc, #380]	; (a1280 <Cl_Dprep_setdata+0x39c>)
   a1104:	78da      	ldrb	r2, [r3, #3]
   a1106:	1d3b      	adds	r3, r7, #4
   a1108:	4619      	mov	r1, r3
   a110a:	200e      	movs	r0, #14
   a110c:	4b5d      	ldr	r3, [pc, #372]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a110e:	4798      	blx	r3
   a1110:	4603      	mov	r3, r0
   a1112:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   a1114:	2316      	movs	r3, #22
   a1116:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   a1118:	230f      	movs	r3, #15
   a111a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   a111c:	f107 0314 	add.w	r3, r7, #20
   a1120:	3301      	adds	r3, #1
   a1122:	4619      	mov	r1, r3
   a1124:	200d      	movs	r0, #13
   a1126:	4b58      	ldr	r3, [pc, #352]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1128:	4798      	blx	r3
   a112a:	4603      	mov	r3, r0
   a112c:	77fb      	strb	r3, [r7, #31]
					 break;
   a112e:	e272      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   a1130:	1d3b      	adds	r3, r7, #4
   a1132:	2202      	movs	r2, #2
   a1134:	4619      	mov	r1, r3
   a1136:	2005      	movs	r0, #5
   a1138:	4b52      	ldr	r3, [pc, #328]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a113a:	4798      	blx	r3
   a113c:	4603      	mov	r3, r0
   a113e:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1140:	1d3b      	adds	r3, r7, #4
   a1142:	3302      	adds	r3, #2
   a1144:	2202      	movs	r2, #2
   a1146:	4619      	mov	r1, r3
   a1148:	2012      	movs	r0, #18
   a114a:	4b4e      	ldr	r3, [pc, #312]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a114c:	4798      	blx	r3
   a114e:	4603      	mov	r3, r0
   a1150:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1152:	1d3b      	adds	r3, r7, #4
   a1154:	3304      	adds	r3, #4
   a1156:	2202      	movs	r2, #2
   a1158:	4619      	mov	r1, r3
   a115a:	2013      	movs	r0, #19
   a115c:	4b49      	ldr	r3, [pc, #292]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a115e:	4798      	blx	r3
   a1160:	4603      	mov	r3, r0
   a1162:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   a1164:	2313      	movs	r3, #19
   a1166:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   a1168:	f107 0314 	add.w	r3, r7, #20
   a116c:	3301      	adds	r3, #1
   a116e:	4619      	mov	r1, r3
   a1170:	2005      	movs	r0, #5
   a1172:	4b45      	ldr	r3, [pc, #276]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1174:	4798      	blx	r3
   a1176:	4603      	mov	r3, r0
   a1178:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   a117a:	f107 0314 	add.w	r3, r7, #20
   a117e:	3303      	adds	r3, #3
   a1180:	4619      	mov	r1, r3
   a1182:	2012      	movs	r0, #18
   a1184:	4b40      	ldr	r3, [pc, #256]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1186:	4798      	blx	r3
   a1188:	4603      	mov	r3, r0
   a118a:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   a118c:	f107 0314 	add.w	r3, r7, #20
   a1190:	3305      	adds	r3, #5
   a1192:	4619      	mov	r1, r3
   a1194:	2013      	movs	r0, #19
   a1196:	4b3c      	ldr	r3, [pc, #240]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1198:	4798      	blx	r3
   a119a:	4603      	mov	r3, r0
   a119c:	77fb      	strb	r3, [r7, #31]
							
					break;
   a119e:	e23a      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   a11a0:	1d3b      	adds	r3, r7, #4
   a11a2:	2202      	movs	r2, #2
   a11a4:	4619      	mov	r1, r3
   a11a6:	2006      	movs	r0, #6
   a11a8:	4b36      	ldr	r3, [pc, #216]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a11aa:	4798      	blx	r3
   a11ac:	4603      	mov	r3, r0
   a11ae:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a11b0:	1d3b      	adds	r3, r7, #4
   a11b2:	3302      	adds	r3, #2
   a11b4:	2202      	movs	r2, #2
   a11b6:	4619      	mov	r1, r3
   a11b8:	2014      	movs	r0, #20
   a11ba:	4b32      	ldr	r3, [pc, #200]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a11bc:	4798      	blx	r3
   a11be:	4603      	mov	r3, r0
   a11c0:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a11c2:	1d3b      	adds	r3, r7, #4
   a11c4:	3304      	adds	r3, #4
   a11c6:	2202      	movs	r2, #2
   a11c8:	4619      	mov	r1, r3
   a11ca:	2015      	movs	r0, #21
   a11cc:	4b2d      	ldr	r3, [pc, #180]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a11ce:	4798      	blx	r3
   a11d0:	4603      	mov	r3, r0
   a11d2:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   a11d4:	2314      	movs	r3, #20
   a11d6:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a11d8:	f107 0314 	add.w	r3, r7, #20
   a11dc:	3301      	adds	r3, #1
   a11de:	4619      	mov	r1, r3
   a11e0:	2006      	movs	r0, #6
   a11e2:	4b29      	ldr	r3, [pc, #164]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a11e4:	4798      	blx	r3
   a11e6:	4603      	mov	r3, r0
   a11e8:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   a11ea:	f107 0314 	add.w	r3, r7, #20
   a11ee:	3303      	adds	r3, #3
   a11f0:	4619      	mov	r1, r3
   a11f2:	2014      	movs	r0, #20
   a11f4:	4b24      	ldr	r3, [pc, #144]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a11f6:	4798      	blx	r3
   a11f8:	4603      	mov	r3, r0
   a11fa:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   a11fc:	f107 0314 	add.w	r3, r7, #20
   a1200:	3305      	adds	r3, #5
   a1202:	4619      	mov	r1, r3
   a1204:	2015      	movs	r0, #21
   a1206:	4b20      	ldr	r3, [pc, #128]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1208:	4798      	blx	r3
   a120a:	4603      	mov	r3, r0
   a120c:	77fb      	strb	r3, [r7, #31]
					break;
   a120e:	e202      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   a1210:	1d3b      	adds	r3, r7, #4
   a1212:	2202      	movs	r2, #2
   a1214:	4619      	mov	r1, r3
   a1216:	200e      	movs	r0, #14
   a1218:	4b1a      	ldr	r3, [pc, #104]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a121a:	4798      	blx	r3
   a121c:	4603      	mov	r3, r0
   a121e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1220:	1d3b      	adds	r3, r7, #4
   a1222:	3302      	adds	r3, #2
   a1224:	2202      	movs	r2, #2
   a1226:	4619      	mov	r1, r3
   a1228:	2016      	movs	r0, #22
   a122a:	4b16      	ldr	r3, [pc, #88]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a122c:	4798      	blx	r3
   a122e:	4603      	mov	r3, r0
   a1230:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1232:	1d3b      	adds	r3, r7, #4
   a1234:	3304      	adds	r3, #4
   a1236:	2202      	movs	r2, #2
   a1238:	4619      	mov	r1, r3
   a123a:	2017      	movs	r0, #23
   a123c:	4b11      	ldr	r3, [pc, #68]	; (a1284 <Cl_Dprep_setdata+0x3a0>)
   a123e:	4798      	blx	r3
   a1240:	4603      	mov	r3, r0
   a1242:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   a1244:	2315      	movs	r3, #21
   a1246:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a1248:	f107 0314 	add.w	r3, r7, #20
   a124c:	3301      	adds	r3, #1
   a124e:	4619      	mov	r1, r3
   a1250:	200e      	movs	r0, #14
   a1252:	4b0d      	ldr	r3, [pc, #52]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1254:	4798      	blx	r3
   a1256:	4603      	mov	r3, r0
   a1258:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   a125a:	f107 0314 	add.w	r3, r7, #20
   a125e:	3303      	adds	r3, #3
   a1260:	4619      	mov	r1, r3
   a1262:	2016      	movs	r0, #22
   a1264:	4b08      	ldr	r3, [pc, #32]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1266:	4798      	blx	r3
   a1268:	4603      	mov	r3, r0
   a126a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   a126c:	f107 0314 	add.w	r3, r7, #20
   a1270:	3305      	adds	r3, #5
   a1272:	4619      	mov	r1, r3
   a1274:	2017      	movs	r0, #23
   a1276:	4b04      	ldr	r3, [pc, #16]	; (a1288 <Cl_Dprep_setdata+0x3a4>)
   a1278:	4798      	blx	r3
   a127a:	4603      	mov	r3, r0
   a127c:	77fb      	strb	r3, [r7, #31]
					break;
   a127e:	e1ca      	b.n	a1616 <Cl_Dprep_setdata+0x732>
   a1280:	200723e8 	.word	0x200723e8
   a1284:	0009a369 	.word	0x0009a369
   a1288:	0009a331 	.word	0x0009a331
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   a128c:	1d3b      	adds	r3, r7, #4
   a128e:	2202      	movs	r2, #2
   a1290:	4619      	mov	r1, r3
   a1292:	2007      	movs	r0, #7
   a1294:	4bc1      	ldr	r3, [pc, #772]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1296:	4798      	blx	r3
   a1298:	4603      	mov	r3, r0
   a129a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a129c:	1d3b      	adds	r3, r7, #4
   a129e:	3302      	adds	r3, #2
   a12a0:	2202      	movs	r2, #2
   a12a2:	4619      	mov	r1, r3
   a12a4:	2018      	movs	r0, #24
   a12a6:	4bbd      	ldr	r3, [pc, #756]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a12a8:	4798      	blx	r3
   a12aa:	4603      	mov	r3, r0
   a12ac:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a12ae:	1d3b      	adds	r3, r7, #4
   a12b0:	3304      	adds	r3, #4
   a12b2:	2202      	movs	r2, #2
   a12b4:	4619      	mov	r1, r3
   a12b6:	2019      	movs	r0, #25
   a12b8:	4bb8      	ldr	r3, [pc, #736]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a12ba:	4798      	blx	r3
   a12bc:	4603      	mov	r3, r0
   a12be:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   a12c0:	2316      	movs	r3, #22
   a12c2:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a12c4:	f107 0314 	add.w	r3, r7, #20
   a12c8:	3301      	adds	r3, #1
   a12ca:	4619      	mov	r1, r3
   a12cc:	2007      	movs	r0, #7
   a12ce:	4bb4      	ldr	r3, [pc, #720]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a12d0:	4798      	blx	r3
   a12d2:	4603      	mov	r3, r0
   a12d4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a12d6:	f107 0314 	add.w	r3, r7, #20
   a12da:	3303      	adds	r3, #3
   a12dc:	4619      	mov	r1, r3
   a12de:	2018      	movs	r0, #24
   a12e0:	4baf      	ldr	r3, [pc, #700]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a12e2:	4798      	blx	r3
   a12e4:	4603      	mov	r3, r0
   a12e6:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a12e8:	f107 0314 	add.w	r3, r7, #20
   a12ec:	3305      	adds	r3, #5
   a12ee:	4619      	mov	r1, r3
   a12f0:	2019      	movs	r0, #25
   a12f2:	4bab      	ldr	r3, [pc, #684]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a12f4:	4798      	blx	r3
   a12f6:	4603      	mov	r3, r0
   a12f8:	77fb      	strb	r3, [r7, #31]
					break;
   a12fa:	e18c      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   a12fc:	1d3b      	adds	r3, r7, #4
   a12fe:	2202      	movs	r2, #2
   a1300:	4619      	mov	r1, r3
   a1302:	2008      	movs	r0, #8
   a1304:	4ba5      	ldr	r3, [pc, #660]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1306:	4798      	blx	r3
   a1308:	4603      	mov	r3, r0
   a130a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a130c:	1d3b      	adds	r3, r7, #4
   a130e:	3302      	adds	r3, #2
   a1310:	2202      	movs	r2, #2
   a1312:	4619      	mov	r1, r3
   a1314:	201a      	movs	r0, #26
   a1316:	4ba1      	ldr	r3, [pc, #644]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1318:	4798      	blx	r3
   a131a:	4603      	mov	r3, r0
   a131c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a131e:	1d3b      	adds	r3, r7, #4
   a1320:	3304      	adds	r3, #4
   a1322:	2202      	movs	r2, #2
   a1324:	4619      	mov	r1, r3
   a1326:	201b      	movs	r0, #27
   a1328:	4b9c      	ldr	r3, [pc, #624]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a132a:	4798      	blx	r3
   a132c:	4603      	mov	r3, r0
   a132e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   a1330:	2317      	movs	r3, #23
   a1332:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a1334:	f107 0314 	add.w	r3, r7, #20
   a1338:	3301      	adds	r3, #1
   a133a:	4619      	mov	r1, r3
   a133c:	2008      	movs	r0, #8
   a133e:	4b98      	ldr	r3, [pc, #608]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1340:	4798      	blx	r3
   a1342:	4603      	mov	r3, r0
   a1344:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a1346:	f107 0314 	add.w	r3, r7, #20
   a134a:	3303      	adds	r3, #3
   a134c:	4619      	mov	r1, r3
   a134e:	201a      	movs	r0, #26
   a1350:	4b93      	ldr	r3, [pc, #588]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1352:	4798      	blx	r3
   a1354:	4603      	mov	r3, r0
   a1356:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a1358:	f107 0314 	add.w	r3, r7, #20
   a135c:	3305      	adds	r3, #5
   a135e:	4619      	mov	r1, r3
   a1360:	201b      	movs	r0, #27
   a1362:	4b8f      	ldr	r3, [pc, #572]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1364:	4798      	blx	r3
   a1366:	4603      	mov	r3, r0
   a1368:	77fb      	strb	r3, [r7, #31]
					break;
   a136a:	e154      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   a136c:	1d3b      	adds	r3, r7, #4
   a136e:	2202      	movs	r2, #2
   a1370:	4619      	mov	r1, r3
   a1372:	2009      	movs	r0, #9
   a1374:	4b89      	ldr	r3, [pc, #548]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1376:	4798      	blx	r3
   a1378:	4603      	mov	r3, r0
   a137a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   a137c:	1d3b      	adds	r3, r7, #4
   a137e:	2202      	movs	r2, #2
   a1380:	4619      	mov	r1, r3
   a1382:	201c      	movs	r0, #28
   a1384:	4b85      	ldr	r3, [pc, #532]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1386:	4798      	blx	r3
   a1388:	4603      	mov	r3, r0
   a138a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a138c:	1d3b      	adds	r3, r7, #4
   a138e:	3304      	adds	r3, #4
   a1390:	2202      	movs	r2, #2
   a1392:	4619      	mov	r1, r3
   a1394:	201d      	movs	r0, #29
   a1396:	4b81      	ldr	r3, [pc, #516]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1398:	4798      	blx	r3
   a139a:	4603      	mov	r3, r0
   a139c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   a139e:	2318      	movs	r3, #24
   a13a0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   a13a2:	f107 0314 	add.w	r3, r7, #20
   a13a6:	3301      	adds	r3, #1
   a13a8:	4619      	mov	r1, r3
   a13aa:	2009      	movs	r0, #9
   a13ac:	4b7c      	ldr	r3, [pc, #496]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a13ae:	4798      	blx	r3
   a13b0:	4603      	mov	r3, r0
   a13b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   a13b4:	f107 0314 	add.w	r3, r7, #20
   a13b8:	3303      	adds	r3, #3
   a13ba:	4619      	mov	r1, r3
   a13bc:	201c      	movs	r0, #28
   a13be:	4b78      	ldr	r3, [pc, #480]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a13c0:	4798      	blx	r3
   a13c2:	4603      	mov	r3, r0
   a13c4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   a13c6:	f107 0314 	add.w	r3, r7, #20
   a13ca:	3305      	adds	r3, #5
   a13cc:	4619      	mov	r1, r3
   a13ce:	201d      	movs	r0, #29
   a13d0:	4b73      	ldr	r3, [pc, #460]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a13d2:	4798      	blx	r3
   a13d4:	4603      	mov	r3, r0
   a13d6:	77fb      	strb	r3, [r7, #31]
					break;
   a13d8:	e11d      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   a13da:	1d3b      	adds	r3, r7, #4
   a13dc:	2202      	movs	r2, #2
   a13de:	4619      	mov	r1, r3
   a13e0:	200a      	movs	r0, #10
   a13e2:	4b6e      	ldr	r3, [pc, #440]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a13e4:	4798      	blx	r3
   a13e6:	4603      	mov	r3, r0
   a13e8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a13ea:	1d3b      	adds	r3, r7, #4
   a13ec:	3302      	adds	r3, #2
   a13ee:	2202      	movs	r2, #2
   a13f0:	4619      	mov	r1, r3
   a13f2:	201e      	movs	r0, #30
   a13f4:	4b69      	ldr	r3, [pc, #420]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a13f6:	4798      	blx	r3
   a13f8:	4603      	mov	r3, r0
   a13fa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a13fc:	1d3b      	adds	r3, r7, #4
   a13fe:	3304      	adds	r3, #4
   a1400:	2202      	movs	r2, #2
   a1402:	4619      	mov	r1, r3
   a1404:	201f      	movs	r0, #31
   a1406:	4b65      	ldr	r3, [pc, #404]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1408:	4798      	blx	r3
   a140a:	4603      	mov	r3, r0
   a140c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   a140e:	2319      	movs	r3, #25
   a1410:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a1412:	f107 0314 	add.w	r3, r7, #20
   a1416:	3301      	adds	r3, #1
   a1418:	4619      	mov	r1, r3
   a141a:	200a      	movs	r0, #10
   a141c:	4b60      	ldr	r3, [pc, #384]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a141e:	4798      	blx	r3
   a1420:	4603      	mov	r3, r0
   a1422:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   a1424:	f107 0314 	add.w	r3, r7, #20
   a1428:	3303      	adds	r3, #3
   a142a:	4619      	mov	r1, r3
   a142c:	201e      	movs	r0, #30
   a142e:	4b5c      	ldr	r3, [pc, #368]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1430:	4798      	blx	r3
   a1432:	4603      	mov	r3, r0
   a1434:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   a1436:	f107 0314 	add.w	r3, r7, #20
   a143a:	3305      	adds	r3, #5
   a143c:	4619      	mov	r1, r3
   a143e:	201f      	movs	r0, #31
   a1440:	4b57      	ldr	r3, [pc, #348]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1442:	4798      	blx	r3
   a1444:	4603      	mov	r3, r0
   a1446:	77fb      	strb	r3, [r7, #31]
					break;
   a1448:	e0e5      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   a144a:	1d3b      	adds	r3, r7, #4
   a144c:	2202      	movs	r2, #2
   a144e:	4619      	mov	r1, r3
   a1450:	200b      	movs	r0, #11
   a1452:	4b52      	ldr	r3, [pc, #328]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1454:	4798      	blx	r3
   a1456:	4603      	mov	r3, r0
   a1458:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a145a:	1d3b      	adds	r3, r7, #4
   a145c:	3302      	adds	r3, #2
   a145e:	2202      	movs	r2, #2
   a1460:	4619      	mov	r1, r3
   a1462:	2020      	movs	r0, #32
   a1464:	4b4d      	ldr	r3, [pc, #308]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1466:	4798      	blx	r3
   a1468:	4603      	mov	r3, r0
   a146a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a146c:	1d3b      	adds	r3, r7, #4
   a146e:	3304      	adds	r3, #4
   a1470:	2202      	movs	r2, #2
   a1472:	4619      	mov	r1, r3
   a1474:	2021      	movs	r0, #33	; 0x21
   a1476:	4b49      	ldr	r3, [pc, #292]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1478:	4798      	blx	r3
   a147a:	4603      	mov	r3, r0
   a147c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   a147e:	231a      	movs	r3, #26
   a1480:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a1482:	f107 0314 	add.w	r3, r7, #20
   a1486:	3301      	adds	r3, #1
   a1488:	4619      	mov	r1, r3
   a148a:	200b      	movs	r0, #11
   a148c:	4b44      	ldr	r3, [pc, #272]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a148e:	4798      	blx	r3
   a1490:	4603      	mov	r3, r0
   a1492:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   a1494:	f107 0314 	add.w	r3, r7, #20
   a1498:	3303      	adds	r3, #3
   a149a:	4619      	mov	r1, r3
   a149c:	2020      	movs	r0, #32
   a149e:	4b40      	ldr	r3, [pc, #256]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a14a0:	4798      	blx	r3
   a14a2:	4603      	mov	r3, r0
   a14a4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   a14a6:	f107 0314 	add.w	r3, r7, #20
   a14aa:	3305      	adds	r3, #5
   a14ac:	4619      	mov	r1, r3
   a14ae:	2021      	movs	r0, #33	; 0x21
   a14b0:	4b3b      	ldr	r3, [pc, #236]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a14b2:	4798      	blx	r3
   a14b4:	4603      	mov	r3, r0
   a14b6:	77fb      	strb	r3, [r7, #31]
					break;
   a14b8:	e0ad      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   a14ba:	1d3b      	adds	r3, r7, #4
   a14bc:	2202      	movs	r2, #2
   a14be:	4619      	mov	r1, r3
   a14c0:	200c      	movs	r0, #12
   a14c2:	4b36      	ldr	r3, [pc, #216]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a14c4:	4798      	blx	r3
   a14c6:	4603      	mov	r3, r0
   a14c8:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a14ca:	1d3b      	adds	r3, r7, #4
   a14cc:	3302      	adds	r3, #2
   a14ce:	2202      	movs	r2, #2
   a14d0:	4619      	mov	r1, r3
   a14d2:	2022      	movs	r0, #34	; 0x22
   a14d4:	4b31      	ldr	r3, [pc, #196]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a14d6:	4798      	blx	r3
   a14d8:	4603      	mov	r3, r0
   a14da:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a14dc:	1d3b      	adds	r3, r7, #4
   a14de:	3304      	adds	r3, #4
   a14e0:	2202      	movs	r2, #2
   a14e2:	4619      	mov	r1, r3
   a14e4:	2023      	movs	r0, #35	; 0x23
   a14e6:	4b2d      	ldr	r3, [pc, #180]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a14e8:	4798      	blx	r3
   a14ea:	4603      	mov	r3, r0
   a14ec:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   a14ee:	231b      	movs	r3, #27
   a14f0:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a14f2:	f107 0314 	add.w	r3, r7, #20
   a14f6:	3301      	adds	r3, #1
   a14f8:	4619      	mov	r1, r3
   a14fa:	200c      	movs	r0, #12
   a14fc:	4b28      	ldr	r3, [pc, #160]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a14fe:	4798      	blx	r3
   a1500:	4603      	mov	r3, r0
   a1502:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   a1504:	f107 0314 	add.w	r3, r7, #20
   a1508:	3303      	adds	r3, #3
   a150a:	4619      	mov	r1, r3
   a150c:	2022      	movs	r0, #34	; 0x22
   a150e:	4b24      	ldr	r3, [pc, #144]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1510:	4798      	blx	r3
   a1512:	4603      	mov	r3, r0
   a1514:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   a1516:	f107 0314 	add.w	r3, r7, #20
   a151a:	3305      	adds	r3, #5
   a151c:	4619      	mov	r1, r3
   a151e:	2023      	movs	r0, #35	; 0x23
   a1520:	4b1f      	ldr	r3, [pc, #124]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1522:	4798      	blx	r3
   a1524:	4603      	mov	r3, r0
   a1526:	77fb      	strb	r3, [r7, #31]
					break;
   a1528:	e075      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   a152a:	1d3b      	adds	r3, r7, #4
   a152c:	2202      	movs	r2, #2
   a152e:	4619      	mov	r1, r3
   a1530:	200f      	movs	r0, #15
   a1532:	4b1a      	ldr	r3, [pc, #104]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1534:	4798      	blx	r3
   a1536:	4603      	mov	r3, r0
   a1538:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a153a:	1d3b      	adds	r3, r7, #4
   a153c:	3302      	adds	r3, #2
   a153e:	2202      	movs	r2, #2
   a1540:	4619      	mov	r1, r3
   a1542:	2024      	movs	r0, #36	; 0x24
   a1544:	4b15      	ldr	r3, [pc, #84]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1546:	4798      	blx	r3
   a1548:	4603      	mov	r3, r0
   a154a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a154c:	1d3b      	adds	r3, r7, #4
   a154e:	3304      	adds	r3, #4
   a1550:	2202      	movs	r2, #2
   a1552:	4619      	mov	r1, r3
   a1554:	2025      	movs	r0, #37	; 0x25
   a1556:	4b11      	ldr	r3, [pc, #68]	; (a159c <Cl_Dprep_setdata+0x6b8>)
   a1558:	4798      	blx	r3
   a155a:	4603      	mov	r3, r0
   a155c:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   a155e:	231c      	movs	r3, #28
   a1560:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a1562:	f107 0314 	add.w	r3, r7, #20
   a1566:	3301      	adds	r3, #1
   a1568:	4619      	mov	r1, r3
   a156a:	200f      	movs	r0, #15
   a156c:	4b0c      	ldr	r3, [pc, #48]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a156e:	4798      	blx	r3
   a1570:	4603      	mov	r3, r0
   a1572:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   a1574:	f107 0314 	add.w	r3, r7, #20
   a1578:	3303      	adds	r3, #3
   a157a:	4619      	mov	r1, r3
   a157c:	2024      	movs	r0, #36	; 0x24
   a157e:	4b08      	ldr	r3, [pc, #32]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1580:	4798      	blx	r3
   a1582:	4603      	mov	r3, r0
   a1584:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   a1586:	f107 0314 	add.w	r3, r7, #20
   a158a:	3305      	adds	r3, #5
   a158c:	4619      	mov	r1, r3
   a158e:	2025      	movs	r0, #37	; 0x25
   a1590:	4b03      	ldr	r3, [pc, #12]	; (a15a0 <Cl_Dprep_setdata+0x6bc>)
   a1592:	4798      	blx	r3
   a1594:	4603      	mov	r3, r0
   a1596:	77fb      	strb	r3, [r7, #31]
					break;
   a1598:	e03d      	b.n	a1616 <Cl_Dprep_setdata+0x732>
   a159a:	bf00      	nop
   a159c:	0009a369 	.word	0x0009a369
   a15a0:	0009a331 	.word	0x0009a331
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   a15a4:	1d3b      	adds	r3, r7, #4
   a15a6:	2202      	movs	r2, #2
   a15a8:	4619      	mov	r1, r3
   a15aa:	200d      	movs	r0, #13
   a15ac:	4b22      	ldr	r3, [pc, #136]	; (a1638 <Cl_Dprep_setdata+0x754>)
   a15ae:	4798      	blx	r3
   a15b0:	4603      	mov	r3, r0
   a15b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a15b4:	1d3b      	adds	r3, r7, #4
   a15b6:	3302      	adds	r3, #2
   a15b8:	2202      	movs	r2, #2
   a15ba:	4619      	mov	r1, r3
   a15bc:	2026      	movs	r0, #38	; 0x26
   a15be:	4b1e      	ldr	r3, [pc, #120]	; (a1638 <Cl_Dprep_setdata+0x754>)
   a15c0:	4798      	blx	r3
   a15c2:	4603      	mov	r3, r0
   a15c4:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a15c6:	1d3b      	adds	r3, r7, #4
   a15c8:	3304      	adds	r3, #4
   a15ca:	2202      	movs	r2, #2
   a15cc:	4619      	mov	r1, r3
   a15ce:	2027      	movs	r0, #39	; 0x27
   a15d0:	4b19      	ldr	r3, [pc, #100]	; (a1638 <Cl_Dprep_setdata+0x754>)
   a15d2:	4798      	blx	r3
   a15d4:	4603      	mov	r3, r0
   a15d6:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   a15d8:	231d      	movs	r3, #29
   a15da:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   a15dc:	f107 0314 	add.w	r3, r7, #20
   a15e0:	3301      	adds	r3, #1
   a15e2:	4619      	mov	r1, r3
   a15e4:	200d      	movs	r0, #13
   a15e6:	4b15      	ldr	r3, [pc, #84]	; (a163c <Cl_Dprep_setdata+0x758>)
   a15e8:	4798      	blx	r3
   a15ea:	4603      	mov	r3, r0
   a15ec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   a15ee:	f107 0314 	add.w	r3, r7, #20
   a15f2:	3303      	adds	r3, #3
   a15f4:	4619      	mov	r1, r3
   a15f6:	2026      	movs	r0, #38	; 0x26
   a15f8:	4b10      	ldr	r3, [pc, #64]	; (a163c <Cl_Dprep_setdata+0x758>)
   a15fa:	4798      	blx	r3
   a15fc:	4603      	mov	r3, r0
   a15fe:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   a1600:	f107 0314 	add.w	r3, r7, #20
   a1604:	3305      	adds	r3, #5
   a1606:	4619      	mov	r1, r3
   a1608:	2027      	movs	r0, #39	; 0x27
   a160a:	4b0c      	ldr	r3, [pc, #48]	; (a163c <Cl_Dprep_setdata+0x758>)
   a160c:	4798      	blx	r3
   a160e:	4603      	mov	r3, r0
   a1610:	77fb      	strb	r3, [r7, #31]
					break;
   a1612:	e000      	b.n	a1616 <Cl_Dprep_setdata+0x732>
					
					 default:
					 break;
   a1614:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   a1616:	2316      	movs	r3, #22
   a1618:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   a161a:	7bba      	ldrb	r2, [r7, #14]
   a161c:	f107 0114 	add.w	r1, r7, #20
   a1620:	7fbb      	ldrb	r3, [r7, #30]
   a1622:	4618      	mov	r0, r3
   a1624:	4b06      	ldr	r3, [pc, #24]	; (a1640 <Cl_Dprep_setdata+0x75c>)
   a1626:	4798      	blx	r3
   a1628:	4603      	mov	r3, r0
   a162a:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   a162c:	2300      	movs	r3, #0
}
   a162e:	4618      	mov	r0, r3
   a1630:	3724      	adds	r7, #36	; 0x24
   a1632:	46bd      	mov	sp, r7
   a1634:	bd90      	pop	{r4, r7, pc}
   a1636:	bf00      	nop
   a1638:	0009a369 	.word	0x0009a369
   a163c:	0009a331 	.word	0x0009a331
   a1640:	0009b805 	.word	0x0009b805

000a1644 <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   a1644:	b590      	push	{r4, r7, lr}
   a1646:	b085      	sub	sp, #20
   a1648:	af02      	add	r7, sp, #8
   a164a:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   a164c:	687b      	ldr	r3, [r7, #4]
   a164e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a1652:	f000 80ab 	beq.w	a17ac <conf_activate_pressure_alarms+0x168>
   a1656:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a165a:	dc04      	bgt.n	a1666 <conf_activate_pressure_alarms+0x22>
   a165c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a1660:	f000 80f2 	beq.w	a1848 <conf_activate_pressure_alarms+0x204>
   a1664:	e13e      	b.n	a18e4 <conf_activate_pressure_alarms+0x2a0>
   a1666:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a166a:	d051      	beq.n	a1710 <conf_activate_pressure_alarms+0xcc>
   a166c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a1670:	f040 8138 	bne.w	a18e4 <conf_activate_pressure_alarms+0x2a0>
		
		case 800 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1674:	2300      	movs	r3, #0
   a1676:	9300      	str	r3, [sp, #0]
   a1678:	f04f 0300 	mov.w	r3, #0
   a167c:	4a9c      	ldr	r2, [pc, #624]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a167e:	2102      	movs	r1, #2
   a1680:	2015      	movs	r0, #21
   a1682:	4c9c      	ldr	r4, [pc, #624]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1684:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1686:	2300      	movs	r3, #0
   a1688:	9300      	str	r3, [sp, #0]
   a168a:	f04f 0300 	mov.w	r3, #0
   a168e:	4a98      	ldr	r2, [pc, #608]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a1690:	2102      	movs	r1, #2
   a1692:	2017      	movs	r0, #23
   a1694:	4c97      	ldr	r4, [pc, #604]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1696:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1698:	2300      	movs	r3, #0
   a169a:	9300      	str	r3, [sp, #0]
   a169c:	f04f 0300 	mov.w	r3, #0
   a16a0:	4a95      	ldr	r2, [pc, #596]	; (a18f8 <conf_activate_pressure_alarms+0x2b4>)
   a16a2:	2102      	movs	r1, #2
   a16a4:	2027      	movs	r0, #39	; 0x27
   a16a6:	4c93      	ldr	r4, [pc, #588]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a16a8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a16aa:	2300      	movs	r3, #0
   a16ac:	9300      	str	r3, [sp, #0]
   a16ae:	f04f 0300 	mov.w	r3, #0
   a16b2:	f04f 0200 	mov.w	r2, #0
   a16b6:	2103      	movs	r1, #3
   a16b8:	2016      	movs	r0, #22
   a16ba:	4c8e      	ldr	r4, [pc, #568]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a16bc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a16be:	2300      	movs	r3, #0
   a16c0:	9300      	str	r3, [sp, #0]
   a16c2:	f04f 0300 	mov.w	r3, #0
   a16c6:	f04f 0200 	mov.w	r2, #0
   a16ca:	2103      	movs	r1, #3
   a16cc:	2018      	movs	r0, #24
   a16ce:	4c89      	ldr	r4, [pc, #548]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a16d0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a16d2:	2300      	movs	r3, #0
   a16d4:	9300      	str	r3, [sp, #0]
   a16d6:	f04f 0300 	mov.w	r3, #0
   a16da:	f04f 0200 	mov.w	r2, #0
   a16de:	2103      	movs	r1, #3
   a16e0:	2028      	movs	r0, #40	; 0x28
   a16e2:	4c84      	ldr	r4, [pc, #528]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a16e4:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a16e6:	2101      	movs	r1, #1
   a16e8:	2015      	movs	r0, #21
   a16ea:	4b84      	ldr	r3, [pc, #528]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a16ec:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a16ee:	2101      	movs	r1, #1
   a16f0:	2016      	movs	r0, #22
   a16f2:	4b82      	ldr	r3, [pc, #520]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a16f4:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a16f6:	2101      	movs	r1, #1
   a16f8:	2017      	movs	r0, #23
   a16fa:	4b80      	ldr	r3, [pc, #512]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a16fc:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a16fe:	2101      	movs	r1, #1
   a1700:	2018      	movs	r0, #24
   a1702:	4b7e      	ldr	r3, [pc, #504]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1704:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   a1706:	2101      	movs	r1, #1
   a1708:	2027      	movs	r0, #39	; 0x27
   a170a:	4b7c      	ldr	r3, [pc, #496]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a170c:	4798      	blx	r3
					
					break;
   a170e:	e0e9      	b.n	a18e4 <conf_activate_pressure_alarms+0x2a0>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1710:	2300      	movs	r3, #0
   a1712:	9300      	str	r3, [sp, #0]
   a1714:	f04f 0300 	mov.w	r3, #0
   a1718:	4a75      	ldr	r2, [pc, #468]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a171a:	2102      	movs	r1, #2
   a171c:	2015      	movs	r0, #21
   a171e:	4c75      	ldr	r4, [pc, #468]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1720:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1722:	2300      	movs	r3, #0
   a1724:	9300      	str	r3, [sp, #0]
   a1726:	f04f 0300 	mov.w	r3, #0
   a172a:	4a71      	ldr	r2, [pc, #452]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a172c:	2102      	movs	r1, #2
   a172e:	2017      	movs	r0, #23
   a1730:	4c70      	ldr	r4, [pc, #448]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1732:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1734:	2300      	movs	r3, #0
   a1736:	9300      	str	r3, [sp, #0]
   a1738:	f04f 0300 	mov.w	r3, #0
   a173c:	4a6e      	ldr	r2, [pc, #440]	; (a18f8 <conf_activate_pressure_alarms+0x2b4>)
   a173e:	2102      	movs	r1, #2
   a1740:	2027      	movs	r0, #39	; 0x27
   a1742:	4c6c      	ldr	r4, [pc, #432]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1744:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a1746:	2300      	movs	r3, #0
   a1748:	9300      	str	r3, [sp, #0]
   a174a:	f04f 0300 	mov.w	r3, #0
   a174e:	f04f 0200 	mov.w	r2, #0
   a1752:	2103      	movs	r1, #3
   a1754:	2016      	movs	r0, #22
   a1756:	4c67      	ldr	r4, [pc, #412]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1758:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a175a:	2300      	movs	r3, #0
   a175c:	9300      	str	r3, [sp, #0]
   a175e:	f04f 0300 	mov.w	r3, #0
   a1762:	f04f 0200 	mov.w	r2, #0
   a1766:	2103      	movs	r1, #3
   a1768:	2018      	movs	r0, #24
   a176a:	4c62      	ldr	r4, [pc, #392]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a176c:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a176e:	2300      	movs	r3, #0
   a1770:	9300      	str	r3, [sp, #0]
   a1772:	f04f 0300 	mov.w	r3, #0
   a1776:	f04f 0200 	mov.w	r2, #0
   a177a:	2103      	movs	r1, #3
   a177c:	2028      	movs	r0, #40	; 0x28
   a177e:	4c5d      	ldr	r4, [pc, #372]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1780:	47a0      	blx	r4
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a1782:	2101      	movs	r1, #1
   a1784:	2015      	movs	r0, #21
   a1786:	4b5d      	ldr	r3, [pc, #372]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1788:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a178a:	2101      	movs	r1, #1
   a178c:	2016      	movs	r0, #22
   a178e:	4b5b      	ldr	r3, [pc, #364]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1790:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a1792:	2101      	movs	r1, #1
   a1794:	2017      	movs	r0, #23
   a1796:	4b59      	ldr	r3, [pc, #356]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1798:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a179a:	2101      	movs	r1, #1
   a179c:	2018      	movs	r0, #24
   a179e:	4b57      	ldr	r3, [pc, #348]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a17a0:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a17a2:	2101      	movs	r1, #1
   a17a4:	2027      	movs	r0, #39	; 0x27
   a17a6:	4b55      	ldr	r3, [pc, #340]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a17a8:	4798      	blx	r3
		
		break;
   a17aa:	e09b      	b.n	a18e4 <conf_activate_pressure_alarms+0x2a0>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a17ac:	2300      	movs	r3, #0
   a17ae:	9300      	str	r3, [sp, #0]
   a17b0:	f04f 0300 	mov.w	r3, #0
   a17b4:	4a4e      	ldr	r2, [pc, #312]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a17b6:	2102      	movs	r1, #2
   a17b8:	2015      	movs	r0, #21
   a17ba:	4c4e      	ldr	r4, [pc, #312]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a17bc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a17be:	2300      	movs	r3, #0
   a17c0:	9300      	str	r3, [sp, #0]
   a17c2:	f04f 0300 	mov.w	r3, #0
   a17c6:	4a4a      	ldr	r2, [pc, #296]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a17c8:	2102      	movs	r1, #2
   a17ca:	2017      	movs	r0, #23
   a17cc:	4c49      	ldr	r4, [pc, #292]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a17ce:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a17d0:	2300      	movs	r3, #0
   a17d2:	9300      	str	r3, [sp, #0]
   a17d4:	f04f 0300 	mov.w	r3, #0
   a17d8:	4a47      	ldr	r2, [pc, #284]	; (a18f8 <conf_activate_pressure_alarms+0x2b4>)
   a17da:	2102      	movs	r1, #2
   a17dc:	2027      	movs	r0, #39	; 0x27
   a17de:	4c45      	ldr	r4, [pc, #276]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a17e0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a17e2:	2300      	movs	r3, #0
   a17e4:	9300      	str	r3, [sp, #0]
   a17e6:	f04f 0300 	mov.w	r3, #0
   a17ea:	f04f 0200 	mov.w	r2, #0
   a17ee:	2103      	movs	r1, #3
   a17f0:	2016      	movs	r0, #22
   a17f2:	4c40      	ldr	r4, [pc, #256]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a17f4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a17f6:	2300      	movs	r3, #0
   a17f8:	9300      	str	r3, [sp, #0]
   a17fa:	f04f 0300 	mov.w	r3, #0
   a17fe:	f04f 0200 	mov.w	r2, #0
   a1802:	2103      	movs	r1, #3
   a1804:	2018      	movs	r0, #24
   a1806:	4c3b      	ldr	r4, [pc, #236]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1808:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a180a:	2300      	movs	r3, #0
   a180c:	9300      	str	r3, [sp, #0]
   a180e:	f04f 0300 	mov.w	r3, #0
   a1812:	f04f 0200 	mov.w	r2, #0
   a1816:	2103      	movs	r1, #3
   a1818:	2028      	movs	r0, #40	; 0x28
   a181a:	4c36      	ldr	r4, [pc, #216]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a181c:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a181e:	2100      	movs	r1, #0
   a1820:	2015      	movs	r0, #21
   a1822:	4b36      	ldr	r3, [pc, #216]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1824:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a1826:	2100      	movs	r1, #0
   a1828:	2016      	movs	r0, #22
   a182a:	4b34      	ldr	r3, [pc, #208]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a182c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a182e:	2100      	movs	r1, #0
   a1830:	2017      	movs	r0, #23
   a1832:	4b32      	ldr	r3, [pc, #200]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1834:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a1836:	2100      	movs	r1, #0
   a1838:	2018      	movs	r0, #24
   a183a:	4b30      	ldr	r3, [pc, #192]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a183c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a183e:	2100      	movs	r1, #0
   a1840:	2027      	movs	r0, #39	; 0x27
   a1842:	4b2e      	ldr	r3, [pc, #184]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a1844:	4798      	blx	r3
					break;
   a1846:	e04d      	b.n	a18e4 <conf_activate_pressure_alarms+0x2a0>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1848:	2300      	movs	r3, #0
   a184a:	9300      	str	r3, [sp, #0]
   a184c:	f04f 0300 	mov.w	r3, #0
   a1850:	4a27      	ldr	r2, [pc, #156]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a1852:	2102      	movs	r1, #2
   a1854:	2015      	movs	r0, #21
   a1856:	4c27      	ldr	r4, [pc, #156]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1858:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a185a:	2300      	movs	r3, #0
   a185c:	9300      	str	r3, [sp, #0]
   a185e:	f04f 0300 	mov.w	r3, #0
   a1862:	4a23      	ldr	r2, [pc, #140]	; (a18f0 <conf_activate_pressure_alarms+0x2ac>)
   a1864:	2102      	movs	r1, #2
   a1866:	2017      	movs	r0, #23
   a1868:	4c22      	ldr	r4, [pc, #136]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a186a:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a186c:	2300      	movs	r3, #0
   a186e:	9300      	str	r3, [sp, #0]
   a1870:	f04f 0300 	mov.w	r3, #0
   a1874:	4a20      	ldr	r2, [pc, #128]	; (a18f8 <conf_activate_pressure_alarms+0x2b4>)
   a1876:	2102      	movs	r1, #2
   a1878:	2027      	movs	r0, #39	; 0x27
   a187a:	4c1e      	ldr	r4, [pc, #120]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a187c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a187e:	2300      	movs	r3, #0
   a1880:	9300      	str	r3, [sp, #0]
   a1882:	f04f 0300 	mov.w	r3, #0
   a1886:	f04f 0200 	mov.w	r2, #0
   a188a:	2103      	movs	r1, #3
   a188c:	2016      	movs	r0, #22
   a188e:	4c19      	ldr	r4, [pc, #100]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a1890:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a1892:	2300      	movs	r3, #0
   a1894:	9300      	str	r3, [sp, #0]
   a1896:	f04f 0300 	mov.w	r3, #0
   a189a:	f04f 0200 	mov.w	r2, #0
   a189e:	2103      	movs	r1, #3
   a18a0:	2018      	movs	r0, #24
   a18a2:	4c14      	ldr	r4, [pc, #80]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a18a4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a18a6:	2300      	movs	r3, #0
   a18a8:	9300      	str	r3, [sp, #0]
   a18aa:	f04f 0300 	mov.w	r3, #0
   a18ae:	f04f 0200 	mov.w	r2, #0
   a18b2:	2103      	movs	r1, #3
   a18b4:	2028      	movs	r0, #40	; 0x28
   a18b6:	4c0f      	ldr	r4, [pc, #60]	; (a18f4 <conf_activate_pressure_alarms+0x2b0>)
   a18b8:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a18ba:	2101      	movs	r1, #1
   a18bc:	2015      	movs	r0, #21
   a18be:	4b0f      	ldr	r3, [pc, #60]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a18c0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a18c2:	2101      	movs	r1, #1
   a18c4:	2016      	movs	r0, #22
   a18c6:	4b0d      	ldr	r3, [pc, #52]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a18c8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a18ca:	2101      	movs	r1, #1
   a18cc:	2017      	movs	r0, #23
   a18ce:	4b0b      	ldr	r3, [pc, #44]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a18d0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a18d2:	2101      	movs	r1, #1
   a18d4:	2018      	movs	r0, #24
   a18d6:	4b09      	ldr	r3, [pc, #36]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a18d8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a18da:	2101      	movs	r1, #1
   a18dc:	2027      	movs	r0, #39	; 0x27
   a18de:	4b07      	ldr	r3, [pc, #28]	; (a18fc <conf_activate_pressure_alarms+0x2b8>)
   a18e0:	4798      	blx	r3
					break;
   a18e2:	bf00      	nop
		
		
		
	}
	
}
   a18e4:	bf00      	nop
   a18e6:	4618      	mov	r0, r3
   a18e8:	370c      	adds	r7, #12
   a18ea:	46bd      	mov	sp, r7
   a18ec:	bd90      	pop	{r4, r7, pc}
   a18ee:	bf00      	nop
   a18f0:	43c80000 	.word	0x43c80000
   a18f4:	00082d85 	.word	0x00082d85
   a18f8:	44fa0000 	.word	0x44fa0000
   a18fc:	00082de1 	.word	0x00082de1

000a1900 <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   a1900:	b590      	push	{r4, r7, lr}
   a1902:	b089      	sub	sp, #36	; 0x24
   a1904:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a1906:	2300      	movs	r3, #0
   a1908:	75bb      	strb	r3, [r7, #22]
			Cl_Uint8Type data =0;
   a190a:	2300      	movs	r3, #0
   a190c:	737b      	strb	r3, [r7, #13]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   a190e:	2300      	movs	r3, #0
   a1910:	817b      	strh	r3, [r7, #10]
   a1912:	2300      	movs	r3, #0
   a1914:	813b      	strh	r3, [r7, #8]
   a1916:	2300      	movs	r3, #0
   a1918:	80fb      	strh	r3, [r7, #6]
   a191a:	2300      	movs	r3, #0
   a191c:	80bb      	strh	r3, [r7, #4]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   a191e:	2301      	movs	r3, #1
   a1920:	75fb      	strb	r3, [r7, #23]
					
				//Check for  dprep readiness and alarm status
				
				//Cl_checkdprepReadyness();
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_dprep_acidstatus);
   a1922:	f107 030a 	add.w	r3, r7, #10
   a1926:	4619      	mov	r1, r3
   a1928:	2020      	movs	r0, #32
   a192a:	4bb4      	ldr	r3, [pc, #720]	; (a1bfc <Cl_Dprep_StartPreparation+0x2fc>)
   a192c:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_dprep_bicarbstatus);
   a192e:	f107 0308 	add.w	r3, r7, #8
   a1932:	4619      	mov	r1, r3
   a1934:	2021      	movs	r0, #33	; 0x21
   a1936:	4bb1      	ldr	r3, [pc, #708]	; (a1bfc <Cl_Dprep_StartPreparation+0x2fc>)
   a1938:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_dprep_holder1status);
   a193a:	1dbb      	adds	r3, r7, #6
   a193c:	4619      	mov	r1, r3
   a193e:	2003      	movs	r0, #3
   a1940:	4bae      	ldr	r3, [pc, #696]	; (a1bfc <Cl_Dprep_StartPreparation+0x2fc>)
   a1942:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_dprep_holder2status);
   a1944:	1d3b      	adds	r3, r7, #4
   a1946:	4619      	mov	r1, r3
   a1948:	2004      	movs	r0, #4
   a194a:	4bac      	ldr	r3, [pc, #688]	; (a1bfc <Cl_Dprep_StartPreparation+0x2fc>)
   a194c:	4798      	blx	r3
 				 if(cl_dprep_acidstatus == ACID_INLET_CLOSED )
   a194e:	897b      	ldrh	r3, [r7, #10]
   a1950:	2b01      	cmp	r3, #1
   a1952:	d104      	bne.n	a195e <Cl_Dprep_StartPreparation+0x5e>
 				 {
 					 Cl_dprepSendAlarm(ACID_IN_CLOSED);
   a1954:	202a      	movs	r0, #42	; 0x2a
   a1956:	4baa      	ldr	r3, [pc, #680]	; (a1c00 <Cl_Dprep_StartPreparation+0x300>)
   a1958:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a195a:	2300      	movs	r3, #0
   a195c:	75fb      	strb	r3, [r7, #23]
 				 }
 				 if(cl_dprep_bicarbstatus == BICARB_INLET_CLOSED )
   a195e:	893b      	ldrh	r3, [r7, #8]
   a1960:	2b01      	cmp	r3, #1
   a1962:	d104      	bne.n	a196e <Cl_Dprep_StartPreparation+0x6e>
 				 {
 					  Cl_dprepSendAlarm(BICARB_IN_CLOSED);
   a1964:	202c      	movs	r0, #44	; 0x2c
   a1966:	4ba6      	ldr	r3, [pc, #664]	; (a1c00 <Cl_Dprep_StartPreparation+0x300>)
   a1968:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a196a:	2300      	movs	r3, #0
   a196c:	75fb      	strb	r3, [r7, #23]
 				 }	
			//	 #if 0
				 if(cl_dprep_holder1status == CL_HOLDER1OPEN )
   a196e:	88fb      	ldrh	r3, [r7, #6]
   a1970:	2b01      	cmp	r3, #1
   a1972:	d104      	bne.n	a197e <Cl_Dprep_StartPreparation+0x7e>
				 {
					 Cl_dprepSendAlarm(HOLDER1STATUS_OPEN);
   a1974:	2003      	movs	r0, #3
   a1976:	4ba2      	ldr	r3, [pc, #648]	; (a1c00 <Cl_Dprep_StartPreparation+0x300>)
   a1978:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a197a:	2300      	movs	r3, #0
   a197c:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_dprep_holder2status == CL_HOLDER1OPEN )
   a197e:	88bb      	ldrh	r3, [r7, #4]
   a1980:	2b01      	cmp	r3, #1
   a1982:	d104      	bne.n	a198e <Cl_Dprep_StartPreparation+0x8e>
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
   a1984:	2004      	movs	r0, #4
   a1986:	4b9e      	ldr	r3, [pc, #632]	; (a1c00 <Cl_Dprep_StartPreparation+0x300>)
   a1988:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a198a:	2300      	movs	r3, #0
   a198c:	75fb      	strb	r3, [r7, #23]
				 }		
			//	 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   a198e:	7dfb      	ldrb	r3, [r7, #23]
   a1990:	f083 0301 	eor.w	r3, r3, #1
   a1994:	b2db      	uxtb	r3, r3
   a1996:	2b00      	cmp	r3, #0
   a1998:	d001      	beq.n	a199e <Cl_Dprep_StartPreparation+0x9e>
				 {
					 return CL_REJECTED;
   a199a:	2303      	movs	r3, #3
   a199c:	e1a3      	b.n	a1ce6 <Cl_Dprep_StartPreparation+0x3e6>
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   a199e:	4b99      	ldr	r3, [pc, #612]	; (a1c04 <Cl_Dprep_StartPreparation+0x304>)
   a19a0:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a19a2:	4b99      	ldr	r3, [pc, #612]	; (a1c08 <Cl_Dprep_StartPreparation+0x308>)
   a19a4:	4798      	blx	r3
   a19a6:	4603      	mov	r3, r0
   a19a8:	75bb      	strb	r3, [r7, #22]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   a19aa:	4b98      	ldr	r3, [pc, #608]	; (a1c0c <Cl_Dprep_StartPreparation+0x30c>)
   a19ac:	4798      	blx	r3
							data = 1;
   a19ae:	2301      	movs	r3, #1
   a19b0:	737b      	strb	r3, [r7, #13]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   a19b2:	f107 030d 	add.w	r3, r7, #13
   a19b6:	2200      	movs	r2, #0
   a19b8:	4619      	mov	r1, r3
   a19ba:	200c      	movs	r0, #12
   a19bc:	4b94      	ldr	r3, [pc, #592]	; (a1c10 <Cl_Dprep_StartPreparation+0x310>)
   a19be:	4798      	blx	r3
   a19c0:	4603      	mov	r3, r0
   a19c2:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   a19c4:	f107 030d 	add.w	r3, r7, #13
   a19c8:	2200      	movs	r2, #0
   a19ca:	4619      	mov	r1, r3
   a19cc:	201e      	movs	r0, #30
   a19ce:	4b90      	ldr	r3, [pc, #576]	; (a1c10 <Cl_Dprep_StartPreparation+0x310>)
   a19d0:	4798      	blx	r3
   a19d2:	4603      	mov	r3, r0
   a19d4:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a19d6:	2001      	movs	r0, #1
   a19d8:	4b8e      	ldr	r3, [pc, #568]	; (a1c14 <Cl_Dprep_StartPreparation+0x314>)
   a19da:	4798      	blx	r3
   a19dc:	4603      	mov	r3, r0
   a19de:	75bb      	strb	r3, [r7, #22]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a19e0:	2300      	movs	r3, #0
   a19e2:	9300      	str	r3, [sp, #0]
   a19e4:	f04f 0300 	mov.w	r3, #0
   a19e8:	f04f 0200 	mov.w	r2, #0
   a19ec:	2101      	movs	r1, #1
   a19ee:	202a      	movs	r0, #42	; 0x2a
   a19f0:	4c89      	ldr	r4, [pc, #548]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a19f2:	47a0      	blx	r4
   a19f4:	4603      	mov	r3, r0
   a19f6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a19f8:	2300      	movs	r3, #0
   a19fa:	9300      	str	r3, [sp, #0]
   a19fc:	f04f 0300 	mov.w	r3, #0
   a1a00:	f04f 0200 	mov.w	r2, #0
   a1a04:	2101      	movs	r1, #1
   a1a06:	202c      	movs	r0, #44	; 0x2c
   a1a08:	4c83      	ldr	r4, [pc, #524]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a0a:	47a0      	blx	r4
   a1a0c:	4603      	mov	r3, r0
   a1a0e:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a1a10:	2300      	movs	r3, #0
   a1a12:	9300      	str	r3, [sp, #0]
   a1a14:	f04f 0300 	mov.w	r3, #0
   a1a18:	f04f 0200 	mov.w	r2, #0
   a1a1c:	2101      	movs	r1, #1
   a1a1e:	2004      	movs	r0, #4
   a1a20:	4c7d      	ldr	r4, [pc, #500]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a22:	47a0      	blx	r4
   a1a24:	4603      	mov	r3, r0
   a1a26:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a1a28:	2300      	movs	r3, #0
   a1a2a:	9300      	str	r3, [sp, #0]
   a1a2c:	f04f 0300 	mov.w	r3, #0
   a1a30:	f04f 0200 	mov.w	r2, #0
   a1a34:	2101      	movs	r1, #1
   a1a36:	2003      	movs	r0, #3
   a1a38:	4c77      	ldr	r4, [pc, #476]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a3a:	47a0      	blx	r4
   a1a3c:	4603      	mov	r3, r0
   a1a3e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,17,0,0);
   a1a40:	2300      	movs	r3, #0
   a1a42:	9300      	str	r3, [sp, #0]
   a1a44:	f04f 0300 	mov.w	r3, #0
   a1a48:	4a74      	ldr	r2, [pc, #464]	; (a1c1c <Cl_Dprep_StartPreparation+0x31c>)
   a1a4a:	2102      	movs	r1, #2
   a1a4c:	2008      	movs	r0, #8
   a1a4e:	4c72      	ldr	r4, [pc, #456]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a50:	47a0      	blx	r4
   a1a52:	4603      	mov	r3, r0
   a1a54:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,0,0,0);
   a1a56:	2300      	movs	r3, #0
   a1a58:	9300      	str	r3, [sp, #0]
   a1a5a:	f04f 0300 	mov.w	r3, #0
   a1a5e:	f04f 0200 	mov.w	r2, #0
   a1a62:	2103      	movs	r1, #3
   a1a64:	2007      	movs	r0, #7
   a1a66:	4c6c      	ldr	r4, [pc, #432]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a68:	47a0      	blx	r4
   a1a6a:	4603      	mov	r3, r0
   a1a6c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1a6e:	2300      	movs	r3, #0
   a1a70:	9300      	str	r3, [sp, #0]
   a1a72:	f04f 0300 	mov.w	r3, #0
   a1a76:	4a6a      	ldr	r2, [pc, #424]	; (a1c20 <Cl_Dprep_StartPreparation+0x320>)
   a1a78:	2102      	movs	r1, #2
   a1a7a:	200f      	movs	r0, #15
   a1a7c:	4c66      	ldr	r4, [pc, #408]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a7e:	47a0      	blx	r4
   a1a80:	4603      	mov	r3, r0
   a1a82:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1a84:	2300      	movs	r3, #0
   a1a86:	9300      	str	r3, [sp, #0]
   a1a88:	f04f 0300 	mov.w	r3, #0
   a1a8c:	4a64      	ldr	r2, [pc, #400]	; (a1c20 <Cl_Dprep_StartPreparation+0x320>)
   a1a8e:	2102      	movs	r1, #2
   a1a90:	2011      	movs	r0, #17
   a1a92:	4c61      	ldr	r4, [pc, #388]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1a94:	47a0      	blx	r4
   a1a96:	4603      	mov	r3, r0
   a1a98:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1a9a:	2300      	movs	r3, #0
   a1a9c:	9300      	str	r3, [sp, #0]
   a1a9e:	f04f 0300 	mov.w	r3, #0
   a1aa2:	4a5f      	ldr	r2, [pc, #380]	; (a1c20 <Cl_Dprep_StartPreparation+0x320>)
   a1aa4:	2102      	movs	r1, #2
   a1aa6:	2013      	movs	r0, #19
   a1aa8:	4c5b      	ldr	r4, [pc, #364]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1aaa:	47a0      	blx	r4
   a1aac:	4603      	mov	r3, r0
   a1aae:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,BELOW,0,0,0);
   a1ab0:	2300      	movs	r3, #0
   a1ab2:	9300      	str	r3, [sp, #0]
   a1ab4:	f04f 0300 	mov.w	r3, #0
   a1ab8:	f04f 0200 	mov.w	r2, #0
   a1abc:	2103      	movs	r1, #3
   a1abe:	2010      	movs	r0, #16
   a1ac0:	4c55      	ldr	r4, [pc, #340]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1ac2:	47a0      	blx	r4
   a1ac4:	4603      	mov	r3, r0
   a1ac6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,BELOW,0,0,0);
   a1ac8:	2300      	movs	r3, #0
   a1aca:	9300      	str	r3, [sp, #0]
   a1acc:	f04f 0300 	mov.w	r3, #0
   a1ad0:	f04f 0200 	mov.w	r2, #0
   a1ad4:	2103      	movs	r1, #3
   a1ad6:	2012      	movs	r0, #18
   a1ad8:	4c4f      	ldr	r4, [pc, #316]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1ada:	47a0      	blx	r4
   a1adc:	4603      	mov	r3, r0
   a1ade:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_LOW_THRESHOLD,BELOW,0,0,0);
   a1ae0:	2300      	movs	r3, #0
   a1ae2:	9300      	str	r3, [sp, #0]
   a1ae4:	f04f 0300 	mov.w	r3, #0
   a1ae8:	f04f 0200 	mov.w	r2, #0
   a1aec:	2103      	movs	r1, #3
   a1aee:	2014      	movs	r0, #20
   a1af0:	4c49      	ldr	r4, [pc, #292]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1af2:	47a0      	blx	r4
   a1af4:	4603      	mov	r3, r0
   a1af6:	75bb      	strb	r3, [r7, #22]
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a1af8:	2300      	movs	r3, #0
   a1afa:	9300      	str	r3, [sp, #0]
   a1afc:	f04f 0300 	mov.w	r3, #0
   a1b00:	f04f 0200 	mov.w	r2, #0
   a1b04:	2100      	movs	r1, #0
   a1b06:	200d      	movs	r0, #13
   a1b08:	4c43      	ldr	r4, [pc, #268]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1b0a:	47a0      	blx	r4
   a1b0c:	4603      	mov	r3, r0
   a1b0e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a1b10:	2300      	movs	r3, #0
   a1b12:	9300      	str	r3, [sp, #0]
   a1b14:	f04f 0300 	mov.w	r3, #0
   a1b18:	f04f 0200 	mov.w	r2, #0
   a1b1c:	2100      	movs	r1, #0
   a1b1e:	200c      	movs	r0, #12
   a1b20:	4c3d      	ldr	r4, [pc, #244]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1b22:	47a0      	blx	r4
   a1b24:	4603      	mov	r3, r0
   a1b26:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a1b28:	2300      	movs	r3, #0
   a1b2a:	9300      	str	r3, [sp, #0]
   a1b2c:	f04f 0300 	mov.w	r3, #0
   a1b30:	4a3c      	ldr	r2, [pc, #240]	; (a1c24 <Cl_Dprep_StartPreparation+0x324>)
   a1b32:	2100      	movs	r1, #0
   a1b34:	200e      	movs	r0, #14
   a1b36:	4c38      	ldr	r4, [pc, #224]	; (a1c18 <Cl_Dprep_StartPreparation+0x318>)
   a1b38:	47a0      	blx	r4
   a1b3a:	4603      	mov	r3, r0
   a1b3c:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a1b3e:	2101      	movs	r1, #1
   a1b40:	202a      	movs	r0, #42	; 0x2a
   a1b42:	4b39      	ldr	r3, [pc, #228]	; (a1c28 <Cl_Dprep_StartPreparation+0x328>)
   a1b44:	4798      	blx	r3
   a1b46:	4603      	mov	r3, r0
   a1b48:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a1b4a:	2101      	movs	r1, #1
   a1b4c:	202c      	movs	r0, #44	; 0x2c
   a1b4e:	4b36      	ldr	r3, [pc, #216]	; (a1c28 <Cl_Dprep_StartPreparation+0x328>)
   a1b50:	4798      	blx	r3
   a1b52:	4603      	mov	r3, r0
   a1b54:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a1b56:	2101      	movs	r1, #1
   a1b58:	2003      	movs	r0, #3
   a1b5a:	4b33      	ldr	r3, [pc, #204]	; (a1c28 <Cl_Dprep_StartPreparation+0x328>)
   a1b5c:	4798      	blx	r3
   a1b5e:	4603      	mov	r3, r0
   a1b60:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a1b62:	2101      	movs	r1, #1
   a1b64:	2004      	movs	r0, #4
   a1b66:	4b30      	ldr	r3, [pc, #192]	; (a1c28 <Cl_Dprep_StartPreparation+0x328>)
   a1b68:	4798      	blx	r3
   a1b6a:	4603      	mov	r3, r0
   a1b6c:	75bb      	strb	r3, [r7, #22]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 							
						
							if(Current_sense_trigger)
   a1b6e:	4b2f      	ldr	r3, [pc, #188]	; (a1c2c <Cl_Dprep_StartPreparation+0x32c>)
   a1b70:	781b      	ldrb	r3, [r3, #0]
   a1b72:	2b00      	cmp	r3, #0
   a1b74:	d005      	beq.n	a1b82 <Cl_Dprep_StartPreparation+0x282>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a1b76:	2101      	movs	r1, #1
   a1b78:	203c      	movs	r0, #60	; 0x3c
   a1b7a:	4b2b      	ldr	r3, [pc, #172]	; (a1c28 <Cl_Dprep_StartPreparation+0x328>)
   a1b7c:	4798      	blx	r3
   a1b7e:	4603      	mov	r3, r0
   a1b80:	75bb      	strb	r3, [r7, #22]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a1b82:	2001      	movs	r0, #1
   a1b84:	4b2a      	ldr	r3, [pc, #168]	; (a1c30 <Cl_Dprep_StartPreparation+0x330>)
   a1b86:	4798      	blx	r3
   a1b88:	4603      	mov	r3, r0
   a1b8a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a1b8c:	2002      	movs	r0, #2
   a1b8e:	4b28      	ldr	r3, [pc, #160]	; (a1c30 <Cl_Dprep_StartPreparation+0x330>)
   a1b90:	4798      	blx	r3
   a1b92:	4603      	mov	r3, r0
   a1b94:	75bb      	strb	r3, [r7, #22]
						//	sv_cntrl_enable_bypass();
						//	cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
							sv_cntrl_disable_bypass();
   a1b96:	4b27      	ldr	r3, [pc, #156]	; (a1c34 <Cl_Dprep_StartPreparation+0x334>)
   a1b98:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   a1b9a:	4b27      	ldr	r3, [pc, #156]	; (a1c38 <Cl_Dprep_StartPreparation+0x338>)
   a1b9c:	2202      	movs	r2, #2
   a1b9e:	701a      	strb	r2, [r3, #0]
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   a1ba0:	200b      	movs	r0, #11
   a1ba2:	4b26      	ldr	r3, [pc, #152]	; (a1c3c <Cl_Dprep_StartPreparation+0x33c>)
   a1ba4:	4798      	blx	r3
   a1ba6:	4603      	mov	r3, r0
   a1ba8:	75bb      	strb	r3, [r7, #22]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   a1baa:	4b25      	ldr	r3, [pc, #148]	; (a1c40 <Cl_Dprep_StartPreparation+0x340>)
   a1bac:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   a1bae:	4b25      	ldr	r3, [pc, #148]	; (a1c44 <Cl_Dprep_StartPreparation+0x344>)
   a1bb0:	695b      	ldr	r3, [r3, #20]
   a1bb2:	613b      	str	r3, [r7, #16]
							Cl_Uint16Type potvalue = 0;
   a1bb4:	2300      	movs	r3, #0
   a1bb6:	81fb      	strh	r3, [r7, #14]
							switch (temp)
   a1bb8:	693b      	ldr	r3, [r7, #16]
   a1bba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a1bbe:	d049      	beq.n	a1c54 <Cl_Dprep_StartPreparation+0x354>
   a1bc0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a1bc4:	d003      	beq.n	a1bce <Cl_Dprep_StartPreparation+0x2ce>
   a1bc6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a1bca:	d05d      	beq.n	a1c88 <Cl_Dprep_StartPreparation+0x388>
   a1bcc:	e071      	b.n	a1cb2 <Cl_Dprep_StartPreparation+0x3b2>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a1bce:	f44f 7161 	mov.w	r1, #900	; 0x384
   a1bd2:	2002      	movs	r0, #2
   a1bd4:	4b1c      	ldr	r3, [pc, #112]	; (a1c48 <Cl_Dprep_StartPreparation+0x348>)
   a1bd6:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   a1bd8:	f44f 7148 	mov.w	r1, #800	; 0x320
   a1bdc:	2001      	movs	r0, #1
   a1bde:	4b1a      	ldr	r3, [pc, #104]	; (a1c48 <Cl_Dprep_StartPreparation+0x348>)
   a1be0:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   a1be2:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a1be6:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1be8:	89fb      	ldrh	r3, [r7, #14]
   a1bea:	4618      	mov	r0, r3
   a1bec:	4b17      	ldr	r3, [pc, #92]	; (a1c4c <Cl_Dprep_StartPreparation+0x34c>)
   a1bee:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   a1bf0:	f44f 7048 	mov.w	r0, #800	; 0x320
   a1bf4:	4b16      	ldr	r3, [pc, #88]	; (a1c50 <Cl_Dprep_StartPreparation+0x350>)
   a1bf6:	4798      	blx	r3
								
							
								
								break;
   a1bf8:	e06c      	b.n	a1cd4 <Cl_Dprep_StartPreparation+0x3d4>
   a1bfa:	bf00      	nop
   a1bfc:	0008e6a1 	.word	0x0008e6a1
   a1c00:	000a025d 	.word	0x000a025d
   a1c04:	00099d79 	.word	0x00099d79
   a1c08:	000a04f9 	.word	0x000a04f9
   a1c0c:	000a0d51 	.word	0x000a0d51
   a1c10:	0009b805 	.word	0x0009b805
   a1c14:	00093665 	.word	0x00093665
   a1c18:	00082d85 	.word	0x00082d85
   a1c1c:	41880000 	.word	0x41880000
   a1c20:	42200000 	.word	0x42200000
   a1c24:	44bb8000 	.word	0x44bb8000
   a1c28:	00082de1 	.word	0x00082de1
   a1c2c:	20070a2a 	.word	0x20070a2a
   a1c30:	00099a09 	.word	0x00099a09
   a1c34:	00099c7d 	.word	0x00099c7d
   a1c38:	20071c60 	.word	0x20071c60
   a1c3c:	000832a1 	.word	0x000832a1
   a1c40:	00099e51 	.word	0x00099e51
   a1c44:	20072654 	.word	0x20072654
   a1c48:	00099b21 	.word	0x00099b21
   a1c4c:	00099f5d 	.word	0x00099f5d
   a1c50:	000a1645 	.word	0x000a1645
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a1c54:	2203      	movs	r2, #3
   a1c56:	4926      	ldr	r1, [pc, #152]	; (a1cf0 <Cl_Dprep_StartPreparation+0x3f0>)
   a1c58:	2018      	movs	r0, #24
   a1c5a:	4b26      	ldr	r3, [pc, #152]	; (a1cf4 <Cl_Dprep_StartPreparation+0x3f4>)
   a1c5c:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1c62:	2002      	movs	r0, #2
   a1c64:	4b24      	ldr	r3, [pc, #144]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1c66:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a1c68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1c6c:	2001      	movs	r0, #1
   a1c6e:	4b22      	ldr	r3, [pc, #136]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1c70:	4798      	blx	r3
								potvalue = (690 * 1024)/10000;
   a1c72:	2346      	movs	r3, #70	; 0x46
   a1c74:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1c76:	89fb      	ldrh	r3, [r7, #14]
   a1c78:	4618      	mov	r0, r3
   a1c7a:	4b20      	ldr	r3, [pc, #128]	; (a1cfc <Cl_Dprep_StartPreparation+0x3fc>)
   a1c7c:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   a1c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a1c82:	4b1f      	ldr	r3, [pc, #124]	; (a1d00 <Cl_Dprep_StartPreparation+0x400>)
   a1c84:	4798      	blx	r3
								
								break;
   a1c86:	e025      	b.n	a1cd4 <Cl_Dprep_StartPreparation+0x3d4>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1c88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1c8c:	2002      	movs	r0, #2
   a1c8e:	4b1a      	ldr	r3, [pc, #104]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1c90:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a1c92:	f44f 7116 	mov.w	r1, #600	; 0x258
   a1c96:	2001      	movs	r0, #1
   a1c98:	4b17      	ldr	r3, [pc, #92]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1c9a:	4798      	blx	r3
								potvalue = (650 * 1024)/10000;
   a1c9c:	2342      	movs	r3, #66	; 0x42
   a1c9e:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1ca0:	89fb      	ldrh	r3, [r7, #14]
   a1ca2:	4618      	mov	r0, r3
   a1ca4:	4b15      	ldr	r3, [pc, #84]	; (a1cfc <Cl_Dprep_StartPreparation+0x3fc>)
   a1ca6:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   a1ca8:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a1cac:	4b14      	ldr	r3, [pc, #80]	; (a1d00 <Cl_Dprep_StartPreparation+0x400>)
   a1cae:	4798      	blx	r3
										
								break;
   a1cb0:	e010      	b.n	a1cd4 <Cl_Dprep_StartPreparation+0x3d4>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1cb2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1cb6:	2002      	movs	r0, #2
   a1cb8:	4b0f      	ldr	r3, [pc, #60]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1cba:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   a1cbc:	f240 414c 	movw	r1, #1100	; 0x44c
   a1cc0:	2001      	movs	r0, #1
   a1cc2:	4b0d      	ldr	r3, [pc, #52]	; (a1cf8 <Cl_Dprep_StartPreparation+0x3f8>)
   a1cc4:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   a1cc6:	2344      	movs	r3, #68	; 0x44
   a1cc8:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1cca:	89fb      	ldrh	r3, [r7, #14]
   a1ccc:	4618      	mov	r0, r3
   a1cce:	4b0b      	ldr	r3, [pc, #44]	; (a1cfc <Cl_Dprep_StartPreparation+0x3fc>)
   a1cd0:	4798      	blx	r3
								
								break;
   a1cd2:	bf00      	nop
							}
						//	#if 0
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a1cd4:	2001      	movs	r0, #1
   a1cd6:	4b0b      	ldr	r3, [pc, #44]	; (a1d04 <Cl_Dprep_StartPreparation+0x404>)
   a1cd8:	4798      	blx	r3
   a1cda:	4603      	mov	r3, r0
   a1cdc:	75bb      	strb	r3, [r7, #22]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   a1cde:	4b0a      	ldr	r3, [pc, #40]	; (a1d08 <Cl_Dprep_StartPreparation+0x408>)
   a1ce0:	2202      	movs	r2, #2
   a1ce2:	701a      	strb	r2, [r3, #0]
							
							return 0;
   a1ce4:	2300      	movs	r3, #0
				
	}
   a1ce6:	4618      	mov	r0, r3
   a1ce8:	371c      	adds	r7, #28
   a1cea:	46bd      	mov	sp, r7
   a1cec:	bd90      	pop	{r4, r7, pc}
   a1cee:	bf00      	nop
   a1cf0:	000a8a44 	.word	0x000a8a44
   a1cf4:	0009b805 	.word	0x0009b805
   a1cf8:	00099b21 	.word	0x00099b21
   a1cfc:	00099f5d 	.word	0x00099f5d
   a1d00:	000a1645 	.word	0x000a1645
   a1d04:	00089385 	.word	0x00089385
   a1d08:	20071c5f 	.word	0x20071c5f
   a1d0c:	00000000 	.word	0x00000000

000a1d10 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   a1d10:	b590      	push	{r4, r7, lr}
   a1d12:	b087      	sub	sp, #28
   a1d14:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   a1d16:	4b9e      	ldr	r3, [pc, #632]	; (a1f90 <Cl_Dprep_StartDialyserPrime+0x280>)
   a1d18:	4798      	blx	r3
			dialyzerprime_flag =1;
   a1d1a:	4b9e      	ldr	r3, [pc, #632]	; (a1f94 <Cl_Dprep_StartDialyserPrime+0x284>)
   a1d1c:	2201      	movs	r2, #1
   a1d1e:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a1d20:	2300      	movs	r3, #0
   a1d22:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   a1d24:	2300      	movs	r3, #0
   a1d26:	717b      	strb	r3, [r7, #5]
				
			Cl_dprepMinutescounter = 0;
   a1d28:	4b9b      	ldr	r3, [pc, #620]	; (a1f98 <Cl_Dprep_StartDialyserPrime+0x288>)
   a1d2a:	2200      	movs	r2, #0
   a1d2c:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   a1d2e:	4b9b      	ldr	r3, [pc, #620]	; (a1f9c <Cl_Dprep_StartDialyserPrime+0x28c>)
   a1d30:	2200      	movs	r2, #0
   a1d32:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   a1d34:	4b9a      	ldr	r3, [pc, #616]	; (a1fa0 <Cl_Dprep_StartDialyserPrime+0x290>)
   a1d36:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a1d38:	4b9a      	ldr	r3, [pc, #616]	; (a1fa4 <Cl_Dprep_StartDialyserPrime+0x294>)
   a1d3a:	4798      	blx	r3
   a1d3c:	4603      	mov	r3, r0
   a1d3e:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a1d40:	2300      	movs	r3, #0
   a1d42:	9300      	str	r3, [sp, #0]
   a1d44:	f04f 0300 	mov.w	r3, #0
   a1d48:	f04f 0200 	mov.w	r2, #0
   a1d4c:	2100      	movs	r1, #0
   a1d4e:	2005      	movs	r0, #5
   a1d50:	4c95      	ldr	r4, [pc, #596]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1d52:	47a0      	blx	r4
   a1d54:	4603      	mov	r3, r0
   a1d56:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a1d58:	2300      	movs	r3, #0
   a1d5a:	9300      	str	r3, [sp, #0]
   a1d5c:	f04f 0300 	mov.w	r3, #0
   a1d60:	f04f 0200 	mov.w	r2, #0
   a1d64:	2100      	movs	r1, #0
   a1d66:	2006      	movs	r0, #6
   a1d68:	4c8f      	ldr	r4, [pc, #572]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1d6a:	47a0      	blx	r4
   a1d6c:	4603      	mov	r3, r0
   a1d6e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a1d70:	2300      	movs	r3, #0
   a1d72:	9300      	str	r3, [sp, #0]
   a1d74:	f04f 0300 	mov.w	r3, #0
   a1d78:	f04f 0200 	mov.w	r2, #0
   a1d7c:	2101      	movs	r1, #1
   a1d7e:	202a      	movs	r0, #42	; 0x2a
   a1d80:	4c89      	ldr	r4, [pc, #548]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1d82:	47a0      	blx	r4
   a1d84:	4603      	mov	r3, r0
   a1d86:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a1d88:	2300      	movs	r3, #0
   a1d8a:	9300      	str	r3, [sp, #0]
   a1d8c:	f04f 0300 	mov.w	r3, #0
   a1d90:	f04f 0200 	mov.w	r2, #0
   a1d94:	2101      	movs	r1, #1
   a1d96:	202c      	movs	r0, #44	; 0x2c
   a1d98:	4c83      	ldr	r4, [pc, #524]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1d9a:	47a0      	blx	r4
   a1d9c:	4603      	mov	r3, r0
   a1d9e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   a1da0:	4b82      	ldr	r3, [pc, #520]	; (a1fac <Cl_Dprep_StartDialyserPrime+0x29c>)
   a1da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a1da4:	4b82      	ldr	r3, [pc, #520]	; (a1fb0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a1da6:	4610      	mov	r0, r2
   a1da8:	4798      	blx	r3
   a1daa:	4c82      	ldr	r4, [pc, #520]	; (a1fb4 <Cl_Dprep_StartDialyserPrime+0x2a4>)
   a1dac:	a376      	add	r3, pc, #472	; (adr r3, a1f88 <Cl_Dprep_StartDialyserPrime+0x278>)
   a1dae:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1db2:	47a0      	blx	r4
   a1db4:	4603      	mov	r3, r0
   a1db6:	460c      	mov	r4, r1
   a1db8:	4619      	mov	r1, r3
   a1dba:	4622      	mov	r2, r4
   a1dbc:	4b7e      	ldr	r3, [pc, #504]	; (a1fb8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   a1dbe:	4608      	mov	r0, r1
   a1dc0:	4611      	mov	r1, r2
   a1dc2:	4798      	blx	r3
   a1dc4:	4602      	mov	r2, r0
   a1dc6:	2300      	movs	r3, #0
   a1dc8:	9300      	str	r3, [sp, #0]
   a1dca:	f04f 0300 	mov.w	r3, #0
   a1dce:	2103      	movs	r1, #3
   a1dd0:	2007      	movs	r0, #7
   a1dd2:	4c75      	ldr	r4, [pc, #468]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1dd4:	47a0      	blx	r4
   a1dd6:	4603      	mov	r3, r0
   a1dd8:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   a1dda:	4b74      	ldr	r3, [pc, #464]	; (a1fac <Cl_Dprep_StartDialyserPrime+0x29c>)
   a1ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a1dde:	4b74      	ldr	r3, [pc, #464]	; (a1fb0 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a1de0:	4610      	mov	r0, r2
   a1de2:	4798      	blx	r3
   a1de4:	4c75      	ldr	r4, [pc, #468]	; (a1fbc <Cl_Dprep_StartDialyserPrime+0x2ac>)
   a1de6:	a368      	add	r3, pc, #416	; (adr r3, a1f88 <Cl_Dprep_StartDialyserPrime+0x278>)
   a1de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a1dec:	47a0      	blx	r4
   a1dee:	4603      	mov	r3, r0
   a1df0:	460c      	mov	r4, r1
   a1df2:	4619      	mov	r1, r3
   a1df4:	4622      	mov	r2, r4
   a1df6:	4b70      	ldr	r3, [pc, #448]	; (a1fb8 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   a1df8:	4608      	mov	r0, r1
   a1dfa:	4611      	mov	r1, r2
   a1dfc:	4798      	blx	r3
   a1dfe:	4602      	mov	r2, r0
   a1e00:	2300      	movs	r3, #0
   a1e02:	9300      	str	r3, [sp, #0]
   a1e04:	f04f 0300 	mov.w	r3, #0
   a1e08:	2103      	movs	r1, #3
   a1e0a:	2008      	movs	r0, #8
   a1e0c:	4c66      	ldr	r4, [pc, #408]	; (a1fa8 <Cl_Dprep_StartDialyserPrime+0x298>)
   a1e0e:	47a0      	blx	r4
   a1e10:	4603      	mov	r3, r0
   a1e12:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a1e14:	2100      	movs	r1, #0
   a1e16:	2029      	movs	r0, #41	; 0x29
   a1e18:	4b69      	ldr	r3, [pc, #420]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e1a:	4798      	blx	r3
   a1e1c:	4603      	mov	r3, r0
   a1e1e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a1e20:	2100      	movs	r1, #0
   a1e22:	202b      	movs	r0, #43	; 0x2b
   a1e24:	4b66      	ldr	r3, [pc, #408]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e26:	4798      	blx	r3
   a1e28:	4603      	mov	r3, r0
   a1e2a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a1e2c:	2100      	movs	r1, #0
   a1e2e:	2003      	movs	r0, #3
   a1e30:	4b63      	ldr	r3, [pc, #396]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e32:	4798      	blx	r3
   a1e34:	4603      	mov	r3, r0
   a1e36:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a1e38:	2100      	movs	r1, #0
   a1e3a:	2004      	movs	r0, #4
   a1e3c:	4b60      	ldr	r3, [pc, #384]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e3e:	4798      	blx	r3
   a1e40:	4603      	mov	r3, r0
   a1e42:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a1e44:	2101      	movs	r1, #1
   a1e46:	202a      	movs	r0, #42	; 0x2a
   a1e48:	4b5d      	ldr	r3, [pc, #372]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e4a:	4798      	blx	r3
   a1e4c:	4603      	mov	r3, r0
   a1e4e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a1e50:	2101      	movs	r1, #1
   a1e52:	202c      	movs	r0, #44	; 0x2c
   a1e54:	4b5a      	ldr	r3, [pc, #360]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e56:	4798      	blx	r3
   a1e58:	4603      	mov	r3, r0
   a1e5a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   a1e5c:	2101      	movs	r1, #1
   a1e5e:	2005      	movs	r0, #5
   a1e60:	4b57      	ldr	r3, [pc, #348]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e62:	4798      	blx	r3
   a1e64:	4603      	mov	r3, r0
   a1e66:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   a1e68:	2101      	movs	r1, #1
   a1e6a:	2006      	movs	r0, #6
   a1e6c:	4b54      	ldr	r3, [pc, #336]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e6e:	4798      	blx	r3
   a1e70:	4603      	mov	r3, r0
   a1e72:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   a1e74:	4b53      	ldr	r3, [pc, #332]	; (a1fc4 <Cl_Dprep_StartDialyserPrime+0x2b4>)
   a1e76:	781b      	ldrb	r3, [r3, #0]
   a1e78:	2b00      	cmp	r3, #0
   a1e7a:	d005      	beq.n	a1e88 <Cl_Dprep_StartDialyserPrime+0x178>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a1e7c:	2101      	movs	r1, #1
   a1e7e:	203c      	movs	r0, #60	; 0x3c
   a1e80:	4b4f      	ldr	r3, [pc, #316]	; (a1fc0 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a1e82:	4798      	blx	r3
   a1e84:	4603      	mov	r3, r0
   a1e86:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a1e88:	2001      	movs	r0, #1
   a1e8a:	4b4f      	ldr	r3, [pc, #316]	; (a1fc8 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a1e8c:	4798      	blx	r3
   a1e8e:	4603      	mov	r3, r0
   a1e90:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a1e92:	2002      	movs	r0, #2
   a1e94:	4b4c      	ldr	r3, [pc, #304]	; (a1fc8 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a1e96:	4798      	blx	r3
   a1e98:	4603      	mov	r3, r0
   a1e9a:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   a1e9c:	4b43      	ldr	r3, [pc, #268]	; (a1fac <Cl_Dprep_StartDialyserPrime+0x29c>)
   a1e9e:	695b      	ldr	r3, [r3, #20]
   a1ea0:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   a1ea2:	4a4a      	ldr	r2, [pc, #296]	; (a1fcc <Cl_Dprep_StartDialyserPrime+0x2bc>)
   a1ea4:	68bb      	ldr	r3, [r7, #8]
   a1ea6:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   a1ea8:	2300      	movs	r3, #0
   a1eaa:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   a1eac:	68bb      	ldr	r3, [r7, #8]
   a1eae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a1eb2:	d038      	beq.n	a1f26 <Cl_Dprep_StartDialyserPrime+0x216>
   a1eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a1eb8:	d803      	bhi.n	a1ec2 <Cl_Dprep_StartDialyserPrime+0x1b2>
   a1eba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a1ebe:	d04c      	beq.n	a1f5a <Cl_Dprep_StartDialyserPrime+0x24a>
   a1ec0:	e090      	b.n	a1fe4 <Cl_Dprep_StartDialyserPrime+0x2d4>
   a1ec2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a1ec6:	d018      	beq.n	a1efa <Cl_Dprep_StartDialyserPrime+0x1ea>
   a1ec8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a1ecc:	f040 808a 	bne.w	a1fe4 <Cl_Dprep_StartDialyserPrime+0x2d4>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1ed4:	2002      	movs	r0, #2
   a1ed6:	4b3e      	ldr	r3, [pc, #248]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1ed8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   a1eda:	f240 5173 	movw	r1, #1395	; 0x573
   a1ede:	2001      	movs	r0, #1
   a1ee0:	4b3b      	ldr	r3, [pc, #236]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1ee2:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   a1ee4:	233e      	movs	r3, #62	; 0x3e
   a1ee6:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a1ee8:	88fb      	ldrh	r3, [r7, #6]
   a1eea:	4618      	mov	r0, r3
   a1eec:	4b39      	ldr	r3, [pc, #228]	; (a1fd4 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a1eee:	4798      	blx	r3
				
				conf_activate_pressure_alarms(800);
   a1ef0:	f44f 7048 	mov.w	r0, #800	; 0x320
   a1ef4:	4b38      	ldr	r3, [pc, #224]	; (a1fd8 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a1ef6:	4798      	blx	r3
				break;
   a1ef8:	e08a      	b.n	a2010 <Cl_Dprep_StartDialyserPrime+0x300>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a1efa:	f44f 7161 	mov.w	r1, #900	; 0x384
   a1efe:	2002      	movs	r0, #2
   a1f00:	4b33      	ldr	r3, [pc, #204]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f02:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   a1f04:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   a1f08:	2001      	movs	r0, #1
   a1f0a:	4b31      	ldr	r3, [pc, #196]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f0c:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   a1f0e:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a1f12:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a1f14:	88fb      	ldrh	r3, [r7, #6]
   a1f16:	4618      	mov	r0, r3
   a1f18:	4b2e      	ldr	r3, [pc, #184]	; (a1fd4 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a1f1a:	4798      	blx	r3
				
				conf_activate_pressure_alarms(700);
   a1f1c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   a1f20:	4b2d      	ldr	r3, [pc, #180]	; (a1fd8 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a1f22:	4798      	blx	r3
				break;
   a1f24:	e074      	b.n	a2010 <Cl_Dprep_StartDialyserPrime+0x300>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a1f26:	2203      	movs	r2, #3
   a1f28:	492c      	ldr	r1, [pc, #176]	; (a1fdc <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a1f2a:	2018      	movs	r0, #24
   a1f2c:	4b2c      	ldr	r3, [pc, #176]	; (a1fe0 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a1f2e:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1f34:	2002      	movs	r0, #2
   a1f36:	4b26      	ldr	r3, [pc, #152]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f38:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a1f3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1f3e:	2001      	movs	r0, #1
   a1f40:	4b23      	ldr	r3, [pc, #140]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f42:	4798      	blx	r3
				potvalue = (690 * 1024)/10000;
   a1f44:	2346      	movs	r3, #70	; 0x46
   a1f46:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a1f48:	88fb      	ldrh	r3, [r7, #6]
   a1f4a:	4618      	mov	r0, r3
   a1f4c:	4b21      	ldr	r3, [pc, #132]	; (a1fd4 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a1f4e:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   a1f50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a1f54:	4b20      	ldr	r3, [pc, #128]	; (a1fd8 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a1f56:	4798      	blx	r3
				break;
   a1f58:	e05a      	b.n	a2010 <Cl_Dprep_StartDialyserPrime+0x300>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1f5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1f5e:	2002      	movs	r0, #2
   a1f60:	4b1b      	ldr	r3, [pc, #108]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f62:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a1f64:	f44f 7116 	mov.w	r1, #600	; 0x258
   a1f68:	2001      	movs	r0, #1
   a1f6a:	4b19      	ldr	r3, [pc, #100]	; (a1fd0 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a1f6c:	4798      	blx	r3
				potvalue = (650 * 1024)/10000;
   a1f6e:	2342      	movs	r3, #66	; 0x42
   a1f70:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a1f72:	88fb      	ldrh	r3, [r7, #6]
   a1f74:	4618      	mov	r0, r3
   a1f76:	4b17      	ldr	r3, [pc, #92]	; (a1fd4 <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a1f78:	4798      	blx	r3
				
				conf_activate_pressure_alarms(300);
   a1f7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a1f7e:	4b16      	ldr	r3, [pc, #88]	; (a1fd8 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a1f80:	4798      	blx	r3
				
				break;
   a1f82:	e045      	b.n	a2010 <Cl_Dprep_StartDialyserPrime+0x300>
   a1f84:	f3af 8000 	nop.w
   a1f88:	9999999a 	.word	0x9999999a
   a1f8c:	3fc99999 	.word	0x3fc99999
   a1f90:	00099d79 	.word	0x00099d79
   a1f94:	20071c18 	.word	0x20071c18
   a1f98:	20071c68 	.word	0x20071c68
   a1f9c:	20071c64 	.word	0x20071c64
   a1fa0:	000a0d51 	.word	0x000a0d51
   a1fa4:	000a04f9 	.word	0x000a04f9
   a1fa8:	00082d85 	.word	0x00082d85
   a1fac:	20072654 	.word	0x20072654
   a1fb0:	000a5c25 	.word	0x000a5c25
   a1fb4:	000a59a9 	.word	0x000a59a9
   a1fb8:	000a62d5 	.word	0x000a62d5
   a1fbc:	000a59ad 	.word	0x000a59ad
   a1fc0:	00082de1 	.word	0x00082de1
   a1fc4:	20070a2a 	.word	0x20070a2a
   a1fc8:	00099a09 	.word	0x00099a09
   a1fcc:	20071944 	.word	0x20071944
   a1fd0:	00099b21 	.word	0x00099b21
   a1fd4:	00099f5d 	.word	0x00099f5d
   a1fd8:	000a1645 	.word	0x000a1645
   a1fdc:	000a8a44 	.word	0x000a8a44
   a1fe0:	0009b805 	.word	0x0009b805
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a1fe4:	2203      	movs	r2, #3
   a1fe6:	4919      	ldr	r1, [pc, #100]	; (a204c <Cl_Dprep_StartDialyserPrime+0x33c>)
   a1fe8:	2018      	movs	r0, #24
   a1fea:	4b19      	ldr	r3, [pc, #100]	; (a2050 <Cl_Dprep_StartDialyserPrime+0x340>)
   a1fec:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1ff2:	2002      	movs	r0, #2
   a1ff4:	4b17      	ldr	r3, [pc, #92]	; (a2054 <Cl_Dprep_StartDialyserPrime+0x344>)
   a1ff6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   a1ff8:	f240 414c 	movw	r1, #1100	; 0x44c
   a1ffc:	2001      	movs	r0, #1
   a1ffe:	4b15      	ldr	r3, [pc, #84]	; (a2054 <Cl_Dprep_StartDialyserPrime+0x344>)
   a2000:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   a2002:	2344      	movs	r3, #68	; 0x44
   a2004:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a2006:	88fb      	ldrh	r3, [r7, #6]
   a2008:	4618      	mov	r0, r3
   a200a:	4b13      	ldr	r3, [pc, #76]	; (a2058 <Cl_Dprep_StartDialyserPrime+0x348>)
   a200c:	4798      	blx	r3
				break;
   a200e:	bf00      	nop
			}
			
		//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
		//	{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   a2010:	2100      	movs	r1, #0
   a2012:	2008      	movs	r0, #8
   a2014:	4b11      	ldr	r3, [pc, #68]	; (a205c <Cl_Dprep_StartDialyserPrime+0x34c>)
   a2016:	4798      	blx	r3
				 Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0); // manav01 added 29-8-17 removed from prime controller
   a2018:	1d7b      	adds	r3, r7, #5
   a201a:	2200      	movs	r2, #0
   a201c:	4619      	mov	r1, r3
   a201e:	2028      	movs	r0, #40	; 0x28
   a2020:	4b0b      	ldr	r3, [pc, #44]	; (a2050 <Cl_Dprep_StartDialyserPrime+0x340>)
   a2022:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2024:	4b0e      	ldr	r3, [pc, #56]	; (a2060 <Cl_Dprep_StartDialyserPrime+0x350>)
   a2026:	2200      	movs	r2, #0
   a2028:	70da      	strb	r2, [r3, #3]
		//	}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   a202a:	4b0e      	ldr	r3, [pc, #56]	; (a2064 <Cl_Dprep_StartDialyserPrime+0x354>)
   a202c:	4798      	blx	r3
   a202e:	4603      	mov	r3, r0
   a2030:	73fb      	strb	r3, [r7, #15]
			sv_prop_startmixing();
   a2032:	4b0d      	ldr	r3, [pc, #52]	; (a2068 <Cl_Dprep_StartDialyserPrime+0x358>)
   a2034:	4798      	blx	r3
		//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);                      // manav01 commented 29-8-17
		//	Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);      // manav01 commented 29-8-17
			
			UpdateDprepFillingMinuteTick();
   a2036:	4b0d      	ldr	r3, [pc, #52]	; (a206c <Cl_Dprep_StartDialyserPrime+0x35c>)
   a2038:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a203a:	4b0d      	ldr	r3, [pc, #52]	; (a2070 <Cl_Dprep_StartDialyserPrime+0x360>)
   a203c:	220e      	movs	r2, #14
   a203e:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   a2040:	2300      	movs	r3, #0
	}
   a2042:	4618      	mov	r0, r3
   a2044:	3714      	adds	r7, #20
   a2046:	46bd      	mov	sp, r7
   a2048:	bd90      	pop	{r4, r7, pc}
   a204a:	bf00      	nop
   a204c:	000a8a44 	.word	0x000a8a44
   a2050:	0009b805 	.word	0x0009b805
   a2054:	00099b21 	.word	0x00099b21
   a2058:	00099f5d 	.word	0x00099f5d
   a205c:	000883f1 	.word	0x000883f1
   a2060:	20070bcc 	.word	0x20070bcc
   a2064:	00099c39 	.word	0x00099c39
   a2068:	00099e51 	.word	0x00099e51
   a206c:	000a0519 	.word	0x000a0519
   a2070:	20071c5f 	.word	0x20071c5f

000a2074 <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   a2074:	b580      	push	{r7, lr}
   a2076:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();      //manav01 added
   a2078:	4b05      	ldr	r3, [pc, #20]	; (a2090 <Cl_Dprep_Priming_Stop+0x1c>)
   a207a:	4798      	blx	r3
	sv_cntrl_nobuzzer();        //manav01 added
   a207c:	4b05      	ldr	r3, [pc, #20]	; (a2094 <Cl_Dprep_Priming_Stop+0x20>)
   a207e:	4798      	blx	r3
	 Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);
   a2080:	2014      	movs	r0, #20
   a2082:	4b05      	ldr	r3, [pc, #20]	; (a2098 <Cl_Dprep_Priming_Stop+0x24>)
   a2084:	4798      	blx	r3

Cl_deactivate_prep_alarms();
   a2086:	4b05      	ldr	r3, [pc, #20]	; (a209c <Cl_Dprep_Priming_Stop+0x28>)
   a2088:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   a208a:	bf00      	nop
   a208c:	4618      	mov	r0, r3
   a208e:	bd80      	pop	{r7, pc}
   a2090:	00099d01 	.word	0x00099d01
   a2094:	00099d8d 	.word	0x00099d8d
   a2098:	0008ba55 	.word	0x0008ba55
   a209c:	000a2179 	.word	0x000a2179

000a20a0 <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   a20a0:	b580      	push	{r7, lr}
   a20a2:	b082      	sub	sp, #8
   a20a4:	af00      	add	r7, sp, #0
	
	
	
	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
   a20a6:	4807      	ldr	r0, [pc, #28]	; (a20c4 <Cl_Check_Temp_Cond_Stability+0x24>)
   a20a8:	4b07      	ldr	r3, [pc, #28]	; (a20c8 <Cl_Check_Temp_Cond_Stability+0x28>)
   a20aa:	4798      	blx	r3
	Cl_Uint16Type temp = 0;
   a20ac:	2300      	movs	r3, #0
   a20ae:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   a20b0:	1dbb      	adds	r3, r7, #6
   a20b2:	4619      	mov	r1, r3
   a20b4:	2007      	movs	r0, #7
   a20b6:	4b05      	ldr	r3, [pc, #20]	; (a20cc <Cl_Check_Temp_Cond_Stability+0x2c>)
   a20b8:	4798      	blx	r3
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	
   a20ba:	2300      	movs	r3, #0
}
   a20bc:	4618      	mov	r0, r3
   a20be:	3708      	adds	r7, #8
   a20c0:	46bd      	mov	sp, r7
   a20c2:	bd80      	pop	{r7, pc}
   a20c4:	20071c19 	.word	0x20071c19
   a20c8:	00089239 	.word	0x00089239
   a20cc:	0008e6a1 	.word	0x0008e6a1

000a20d0 <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   a20d0:	b580      	push	{r7, lr}
   a20d2:	b082      	sub	sp, #8
   a20d4:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a20d6:	2300      	movs	r3, #0
   a20d8:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   a20da:	4b1f      	ldr	r3, [pc, #124]	; (a2158 <Cl_dprep_StopMixing+0x88>)
   a20dc:	781b      	ldrb	r3, [r3, #0]
   a20de:	2b02      	cmp	r3, #2
   a20e0:	d11c      	bne.n	a211c <Cl_dprep_StopMixing+0x4c>
				{
					
				Cl_dprepMinutescounter = 0;
   a20e2:	4b1e      	ldr	r3, [pc, #120]	; (a215c <Cl_dprep_StopMixing+0x8c>)
   a20e4:	2200      	movs	r2, #0
   a20e6:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   a20e8:	4b1d      	ldr	r3, [pc, #116]	; (a2160 <Cl_dprep_StopMixing+0x90>)
   a20ea:	2200      	movs	r2, #0
   a20ec:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a20ee:	4b1d      	ldr	r3, [pc, #116]	; (a2164 <Cl_dprep_StopMixing+0x94>)
   a20f0:	4798      	blx	r3
   a20f2:	4603      	mov	r3, r0
   a20f4:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a20f6:	2004      	movs	r0, #4
   a20f8:	4b1b      	ldr	r3, [pc, #108]	; (a2168 <Cl_dprep_StopMixing+0x98>)
   a20fa:	4798      	blx	r3
   a20fc:	4603      	mov	r3, r0
   a20fe:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   a2100:	2005      	movs	r0, #5
   a2102:	4b1a      	ldr	r3, [pc, #104]	; (a216c <Cl_dprep_StopMixing+0x9c>)
   a2104:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a2106:	4b14      	ldr	r3, [pc, #80]	; (a2158 <Cl_dprep_StopMixing+0x88>)
   a2108:	220b      	movs	r2, #11
   a210a:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a210c:	1dbb      	adds	r3, r7, #6
   a210e:	2200      	movs	r2, #0
   a2110:	4619      	mov	r1, r3
   a2112:	202d      	movs	r0, #45	; 0x2d
   a2114:	4b16      	ldr	r3, [pc, #88]	; (a2170 <Cl_dprep_StopMixing+0xa0>)
   a2116:	4798      	blx	r3
   a2118:	4603      	mov	r3, r0
   a211a:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a211c:	4b0e      	ldr	r3, [pc, #56]	; (a2158 <Cl_dprep_StopMixing+0x88>)
   a211e:	781b      	ldrb	r3, [r3, #0]
   a2120:	2b06      	cmp	r3, #6
   a2122:	d111      	bne.n	a2148 <Cl_dprep_StopMixing+0x78>
					
					Cl_dprepMinutescounter = 0;
   a2124:	4b0d      	ldr	r3, [pc, #52]	; (a215c <Cl_dprep_StopMixing+0x8c>)
   a2126:	2200      	movs	r2, #0
   a2128:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   a212a:	4b0d      	ldr	r3, [pc, #52]	; (a2160 <Cl_dprep_StopMixing+0x90>)
   a212c:	2200      	movs	r2, #0
   a212e:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   a2130:	4b0c      	ldr	r3, [pc, #48]	; (a2164 <Cl_dprep_StopMixing+0x94>)
   a2132:	4798      	blx	r3
   a2134:	4603      	mov	r3, r0
   a2136:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a2138:	2004      	movs	r0, #4
   a213a:	4b0b      	ldr	r3, [pc, #44]	; (a2168 <Cl_dprep_StopMixing+0x98>)
   a213c:	4798      	blx	r3
   a213e:	4603      	mov	r3, r0
   a2140:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   a2142:	2005      	movs	r0, #5
   a2144:	4b09      	ldr	r3, [pc, #36]	; (a216c <Cl_dprep_StopMixing+0x9c>)
   a2146:	4798      	blx	r3
					
					
				}

Cl_deactivate_prep_alarms();
   a2148:	4b0a      	ldr	r3, [pc, #40]	; (a2174 <Cl_dprep_StopMixing+0xa4>)
   a214a:	4798      	blx	r3
				return Cl_dprepretcode;
   a214c:	79fb      	ldrb	r3, [r7, #7]
}
   a214e:	4618      	mov	r0, r3
   a2150:	3708      	adds	r7, #8
   a2152:	46bd      	mov	sp, r7
   a2154:	bd80      	pop	{r7, pc}
   a2156:	bf00      	nop
   a2158:	20071c5f 	.word	0x20071c5f
   a215c:	20071c68 	.word	0x20071c68
   a2160:	20071c64 	.word	0x20071c64
   a2164:	00099a95 	.word	0x00099a95
   a2168:	00089385 	.word	0x00089385
   a216c:	000832a1 	.word	0x000832a1
   a2170:	0009b805 	.word	0x0009b805
   a2174:	000a2179 	.word	0x000a2179

000a2178 <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   a2178:	b580      	push	{r7, lr}
   a217a:	b082      	sub	sp, #8
   a217c:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a217e:	2300      	movs	r3, #0
   a2180:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   a2182:	2100      	movs	r1, #0
   a2184:	202a      	movs	r0, #42	; 0x2a
   a2186:	4b4f      	ldr	r3, [pc, #316]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2188:	4798      	blx	r3
   a218a:	4603      	mov	r3, r0
   a218c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   a218e:	2100      	movs	r1, #0
   a2190:	202c      	movs	r0, #44	; 0x2c
   a2192:	4b4c      	ldr	r3, [pc, #304]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2194:	4798      	blx	r3
   a2196:	4603      	mov	r3, r0
   a2198:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   a219a:	2100      	movs	r1, #0
   a219c:	2005      	movs	r0, #5
   a219e:	4b49      	ldr	r3, [pc, #292]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21a0:	4798      	blx	r3
   a21a2:	4603      	mov	r3, r0
   a21a4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   a21a6:	2100      	movs	r1, #0
   a21a8:	2006      	movs	r0, #6
   a21aa:	4b46      	ldr	r3, [pc, #280]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21ac:	4798      	blx	r3
   a21ae:	4603      	mov	r3, r0
   a21b0:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a21b2:	2100      	movs	r1, #0
   a21b4:	2029      	movs	r0, #41	; 0x29
   a21b6:	4b43      	ldr	r3, [pc, #268]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21b8:	4798      	blx	r3
   a21ba:	4603      	mov	r3, r0
   a21bc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a21be:	2100      	movs	r1, #0
   a21c0:	202b      	movs	r0, #43	; 0x2b
   a21c2:	4b40      	ldr	r3, [pc, #256]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21c4:	4798      	blx	r3
   a21c6:	4603      	mov	r3, r0
   a21c8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a21ca:	2100      	movs	r1, #0
   a21cc:	2003      	movs	r0, #3
   a21ce:	4b3d      	ldr	r3, [pc, #244]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21d0:	4798      	blx	r3
   a21d2:	4603      	mov	r3, r0
   a21d4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a21d6:	2100      	movs	r1, #0
   a21d8:	2004      	movs	r0, #4
   a21da:	4b3a      	ldr	r3, [pc, #232]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21dc:	4798      	blx	r3
   a21de:	4603      	mov	r3, r0
   a21e0:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a21e2:	2100      	movs	r1, #0
   a21e4:	2015      	movs	r0, #21
   a21e6:	4b37      	ldr	r3, [pc, #220]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21e8:	4798      	blx	r3
   a21ea:	4603      	mov	r3, r0
   a21ec:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a21ee:	2100      	movs	r1, #0
   a21f0:	2016      	movs	r0, #22
   a21f2:	4b34      	ldr	r3, [pc, #208]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a21f4:	4798      	blx	r3
   a21f6:	4603      	mov	r3, r0
   a21f8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a21fa:	2100      	movs	r1, #0
   a21fc:	2017      	movs	r0, #23
   a21fe:	4b31      	ldr	r3, [pc, #196]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2200:	4798      	blx	r3
   a2202:	4603      	mov	r3, r0
   a2204:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a2206:	2100      	movs	r1, #0
   a2208:	2018      	movs	r0, #24
   a220a:	4b2e      	ldr	r3, [pc, #184]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a220c:	4798      	blx	r3
   a220e:	4603      	mov	r3, r0
   a2210:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a2212:	2100      	movs	r1, #0
   a2214:	2027      	movs	r0, #39	; 0x27
   a2216:	4b2b      	ldr	r3, [pc, #172]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2218:	4798      	blx	r3
   a221a:	4603      	mov	r3, r0
   a221c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   a221e:	2100      	movs	r1, #0
   a2220:	2028      	movs	r0, #40	; 0x28
   a2222:	4b28      	ldr	r3, [pc, #160]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2224:	4798      	blx	r3
   a2226:	4603      	mov	r3, r0
   a2228:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a222a:	2100      	movs	r1, #0
   a222c:	200f      	movs	r0, #15
   a222e:	4b25      	ldr	r3, [pc, #148]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2230:	4798      	blx	r3
   a2232:	4603      	mov	r3, r0
   a2234:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   a2236:	2100      	movs	r1, #0
   a2238:	2010      	movs	r0, #16
   a223a:	4b22      	ldr	r3, [pc, #136]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a223c:	4798      	blx	r3
   a223e:	4603      	mov	r3, r0
   a2240:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   a2242:	2100      	movs	r1, #0
   a2244:	2011      	movs	r0, #17
   a2246:	4b1f      	ldr	r3, [pc, #124]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2248:	4798      	blx	r3
   a224a:	4603      	mov	r3, r0
   a224c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   a224e:	2100      	movs	r1, #0
   a2250:	2012      	movs	r0, #18
   a2252:	4b1c      	ldr	r3, [pc, #112]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2254:	4798      	blx	r3
   a2256:	4603      	mov	r3, r0
   a2258:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a225a:	2100      	movs	r1, #0
   a225c:	2013      	movs	r0, #19
   a225e:	4b19      	ldr	r3, [pc, #100]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2260:	4798      	blx	r3
   a2262:	4603      	mov	r3, r0
   a2264:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a2266:	2100      	movs	r1, #0
   a2268:	2014      	movs	r0, #20
   a226a:	4b16      	ldr	r3, [pc, #88]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a226c:	4798      	blx	r3
   a226e:	4603      	mov	r3, r0
   a2270:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a2272:	2100      	movs	r1, #0
   a2274:	2008      	movs	r0, #8
   a2276:	4b13      	ldr	r3, [pc, #76]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2278:	4798      	blx	r3
   a227a:	4603      	mov	r3, r0
   a227c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a227e:	2100      	movs	r1, #0
   a2280:	2007      	movs	r0, #7
   a2282:	4b10      	ldr	r3, [pc, #64]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2284:	4798      	blx	r3
   a2286:	4603      	mov	r3, r0
   a2288:	71fb      	strb	r3, [r7, #7]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a228a:	2100      	movs	r1, #0
   a228c:	200e      	movs	r0, #14
   a228e:	4b0d      	ldr	r3, [pc, #52]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a2290:	4798      	blx	r3
   a2292:	4603      	mov	r3, r0
   a2294:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a2296:	2100      	movs	r1, #0
   a2298:	200c      	movs	r0, #12
   a229a:	4b0a      	ldr	r3, [pc, #40]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a229c:	4798      	blx	r3
   a229e:	4603      	mov	r3, r0
   a22a0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a22a2:	2100      	movs	r1, #0
   a22a4:	200d      	movs	r0, #13
   a22a6:	4b07      	ldr	r3, [pc, #28]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a22a8:	4798      	blx	r3
   a22aa:	4603      	mov	r3, r0
   a22ac:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a22ae:	2100      	movs	r1, #0
   a22b0:	200e      	movs	r0, #14
   a22b2:	4b04      	ldr	r3, [pc, #16]	; (a22c4 <Cl_deactivate_prep_alarms+0x14c>)
   a22b4:	4798      	blx	r3
   a22b6:	4603      	mov	r3, r0
   a22b8:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   a22ba:	bf00      	nop
   a22bc:	4618      	mov	r0, r3
   a22be:	3708      	adds	r7, #8
   a22c0:	46bd      	mov	sp, r7
   a22c2:	bd80      	pop	{r7, pc}
   a22c4:	00082de1 	.word	0x00082de1

000a22c8 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   a22c8:	b580      	push	{r7, lr}
   a22ca:	b092      	sub	sp, #72	; 0x48
   a22cc:	af00      	add	r7, sp, #0
   a22ce:	4603      	mov	r3, r0
   a22d0:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a22d2:	2300      	movs	r3, #0
   a22d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   a22d8:	2300      	movs	r3, #0
   a22da:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a22de:	2351      	movs	r3, #81	; 0x51
   a22e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a22e4:	2300      	movs	r3, #0
   a22e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	Cl_Uint8Type data = 0;
   a22e8:	2300      	movs	r3, #0
   a22ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   a22ee:	2300      	movs	r3, #0
   a22f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   a22f4:	2300      	movs	r3, #0
   a22f6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   a22fa:	2300      	movs	r3, #0
   a22fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   a2300:	2300      	movs	r3, #0
   a2302:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a2306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a230a:	2200      	movs	r2, #0
   a230c:	601a      	str	r2, [r3, #0]
   a230e:	711a      	strb	r2, [r3, #4]


cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   a2310:	f107 0241 	add.w	r2, r7, #65	; 0x41
   a2314:	79fb      	ldrb	r3, [r7, #7]
   a2316:	4611      	mov	r1, r2
   a2318:	4618      	mov	r0, r3
   a231a:	4bab      	ldr	r3, [pc, #684]	; (a25c8 <Cl_Rinse_Controller+0x300>)
   a231c:	4798      	blx	r3

switch(cl_rinseevent)
   a231e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a2322:	3b21      	subs	r3, #33	; 0x21
   a2324:	2b3b      	cmp	r3, #59	; 0x3b
   a2326:	f200 8147 	bhi.w	a25b8 <Cl_Rinse_Controller+0x2f0>
   a232a:	a201      	add	r2, pc, #4	; (adr r2, a2330 <Cl_Rinse_Controller+0x68>)
   a232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2330:	000a2421 	.word	0x000a2421
   a2334:	000a2439 	.word	0x000a2439
   a2338:	000a2451 	.word	0x000a2451
   a233c:	000a248f 	.word	0x000a248f
   a2340:	000a24ef 	.word	0x000a24ef
   a2344:	000a24f9 	.word	0x000a24f9
   a2348:	000a25b9 	.word	0x000a25b9
   a234c:	000a25b9 	.word	0x000a25b9
   a2350:	000a25b9 	.word	0x000a25b9
   a2354:	000a25b9 	.word	0x000a25b9
   a2358:	000a25b9 	.word	0x000a25b9
   a235c:	000a25b9 	.word	0x000a25b9
   a2360:	000a25b9 	.word	0x000a25b9
   a2364:	000a25b9 	.word	0x000a25b9
   a2368:	000a25b9 	.word	0x000a25b9
   a236c:	000a25b9 	.word	0x000a25b9
   a2370:	000a25b9 	.word	0x000a25b9
   a2374:	000a25b9 	.word	0x000a25b9
   a2378:	000a25b9 	.word	0x000a25b9
   a237c:	000a25b9 	.word	0x000a25b9
   a2380:	000a25b9 	.word	0x000a25b9
   a2384:	000a25b9 	.word	0x000a25b9
   a2388:	000a25b9 	.word	0x000a25b9
   a238c:	000a25b9 	.word	0x000a25b9
   a2390:	000a25b9 	.word	0x000a25b9
   a2394:	000a25b9 	.word	0x000a25b9
   a2398:	000a25b9 	.word	0x000a25b9
   a239c:	000a25b9 	.word	0x000a25b9
   a23a0:	000a25b9 	.word	0x000a25b9
   a23a4:	000a25b9 	.word	0x000a25b9
   a23a8:	000a25b9 	.word	0x000a25b9
   a23ac:	000a25b9 	.word	0x000a25b9
   a23b0:	000a25b9 	.word	0x000a25b9
   a23b4:	000a25b9 	.word	0x000a25b9
   a23b8:	000a25b9 	.word	0x000a25b9
   a23bc:	000a25b9 	.word	0x000a25b9
   a23c0:	000a25b9 	.word	0x000a25b9
   a23c4:	000a25b9 	.word	0x000a25b9
   a23c8:	000a25b9 	.word	0x000a25b9
   a23cc:	000a25b9 	.word	0x000a25b9
   a23d0:	000a25b9 	.word	0x000a25b9
   a23d4:	000a25b9 	.word	0x000a25b9
   a23d8:	000a25b9 	.word	0x000a25b9
   a23dc:	000a25b9 	.word	0x000a25b9
   a23e0:	000a25b9 	.word	0x000a25b9
   a23e4:	000a25b9 	.word	0x000a25b9
   a23e8:	000a25b9 	.word	0x000a25b9
   a23ec:	000a25b9 	.word	0x000a25b9
   a23f0:	000a25b9 	.word	0x000a25b9
   a23f4:	000a25b9 	.word	0x000a25b9
   a23f8:	000a25b9 	.word	0x000a25b9
   a23fc:	000a25b9 	.word	0x000a25b9
   a2400:	000a25b9 	.word	0x000a25b9
   a2404:	000a25b9 	.word	0x000a25b9
   a2408:	000a25b9 	.word	0x000a25b9
   a240c:	000a25b9 	.word	0x000a25b9
   a2410:	000a25b9 	.word	0x000a25b9
   a2414:	000a25b9 	.word	0x000a25b9
   a2418:	000a2503 	.word	0x000a2503
   a241c:	000a255f 	.word	0x000a255f
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   a2420:	2101      	movs	r1, #1
   a2422:	2001      	movs	r0, #1
   a2424:	4b69      	ldr	r3, [pc, #420]	; (a25cc <Cl_Rinse_Controller+0x304>)
   a2426:	4798      	blx	r3
   a2428:	4603      	mov	r3, r0
   a242a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   a242e:	2100      	movs	r1, #0
   a2430:	2002      	movs	r0, #2
   a2432:	4b67      	ldr	r3, [pc, #412]	; (a25d0 <Cl_Rinse_Controller+0x308>)
   a2434:	4798      	blx	r3
	break;
   a2436:	e0d6      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a2438:	2100      	movs	r1, #0
   a243a:	2001      	movs	r0, #1
   a243c:	4b63      	ldr	r3, [pc, #396]	; (a25cc <Cl_Rinse_Controller+0x304>)
   a243e:	4798      	blx	r3
   a2440:	4603      	mov	r3, r0
   a2442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   a2446:	2100      	movs	r1, #0
   a2448:	2004      	movs	r0, #4
   a244a:	4b61      	ldr	r3, [pc, #388]	; (a25d0 <Cl_Rinse_Controller+0x308>)
   a244c:	4798      	blx	r3
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   a244e:	e0ca      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   a2450:	4b60      	ldr	r3, [pc, #384]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a2452:	7e1b      	ldrb	r3, [r3, #24]
   a2454:	2b00      	cmp	r3, #0
   a2456:	f000 80b1 	beq.w	a25bc <Cl_Rinse_Controller+0x2f4>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a245a:	4b5e      	ldr	r3, [pc, #376]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a245c:	791b      	ldrb	r3, [r3, #4]
   a245e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a2462:	4b5c      	ldr	r3, [pc, #368]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a2464:	795b      	ldrb	r3, [r3, #5]
   a2466:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a246a:	4b5a      	ldr	r3, [pc, #360]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a246c:	799b      	ldrb	r3, [r3, #6]
   a246e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a2472:	4b58      	ldr	r3, [pc, #352]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a2474:	79db      	ldrb	r3, [r3, #7]
   a2476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a247a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a247c:	4619      	mov	r1, r3
   a247e:	2001      	movs	r0, #1
   a2480:	4b53      	ldr	r3, [pc, #332]	; (a25d0 <Cl_Rinse_Controller+0x308>)
   a2482:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a2484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a2486:	461a      	mov	r2, r3
   a2488:	4b53      	ldr	r3, [pc, #332]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a248a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   a248c:	e096      	b.n	a25bc <Cl_Rinse_Controller+0x2f4>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   a248e:	4b51      	ldr	r3, [pc, #324]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a2490:	7e1b      	ldrb	r3, [r3, #24]
   a2492:	2b00      	cmp	r3, #0
   a2494:	f000 8094 	beq.w	a25c0 <Cl_Rinse_Controller+0x2f8>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a2498:	4b4e      	ldr	r3, [pc, #312]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a249a:	795b      	ldrb	r3, [r3, #5]
   a249c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a24a0:	4b4c      	ldr	r3, [pc, #304]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24a2:	799b      	ldrb	r3, [r3, #6]
   a24a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a24a8:	4b4a      	ldr	r3, [pc, #296]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24aa:	79db      	ldrb	r3, [r3, #7]
   a24ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a24b0:	4b48      	ldr	r3, [pc, #288]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24b2:	7a1b      	ldrb	r3, [r3, #8]
   a24b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a24b8:	4b46      	ldr	r3, [pc, #280]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24ba:	791b      	ldrb	r3, [r3, #4]
   a24bc:	2b01      	cmp	r3, #1
   a24be:	d104      	bne.n	a24ca <Cl_Rinse_Controller+0x202>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a24c0:	2100      	movs	r1, #0
   a24c2:	2001      	movs	r0, #1
   a24c4:	4b45      	ldr	r3, [pc, #276]	; (a25dc <Cl_Rinse_Controller+0x314>)
   a24c6:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a24c8:	e07a      	b.n	a25c0 <Cl_Rinse_Controller+0x2f8>
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a24ca:	4b42      	ldr	r3, [pc, #264]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24cc:	791b      	ldrb	r3, [r3, #4]
   a24ce:	2b02      	cmp	r3, #2
   a24d0:	d104      	bne.n	a24dc <Cl_Rinse_Controller+0x214>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   a24d2:	2100      	movs	r1, #0
   a24d4:	2004      	movs	r0, #4
   a24d6:	4b41      	ldr	r3, [pc, #260]	; (a25dc <Cl_Rinse_Controller+0x314>)
   a24d8:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a24da:	e071      	b.n	a25c0 <Cl_Rinse_Controller+0x2f8>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a24dc:	4b3d      	ldr	r3, [pc, #244]	; (a25d4 <Cl_Rinse_Controller+0x30c>)
   a24de:	791b      	ldrb	r3, [r3, #4]
   a24e0:	2b00      	cmp	r3, #0
   a24e2:	d16d      	bne.n	a25c0 <Cl_Rinse_Controller+0x2f8>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   a24e4:	2100      	movs	r1, #0
   a24e6:	200a      	movs	r0, #10
   a24e8:	4b3c      	ldr	r3, [pc, #240]	; (a25dc <Cl_Rinse_Controller+0x314>)
   a24ea:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a24ec:	e068      	b.n	a25c0 <Cl_Rinse_Controller+0x2f8>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   a24ee:	2100      	movs	r1, #0
   a24f0:	200c      	movs	r0, #12
   a24f2:	4b3a      	ldr	r3, [pc, #232]	; (a25dc <Cl_Rinse_Controller+0x314>)
   a24f4:	4798      	blx	r3
	break;
   a24f6:	e076      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a24f8:	2100      	movs	r1, #0
   a24fa:	2007      	movs	r0, #7
   a24fc:	4b37      	ldr	r3, [pc, #220]	; (a25dc <Cl_Rinse_Controller+0x314>)
   a24fe:	4798      	blx	r3
	break;
   a2500:	e071      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
	
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   a2502:	4b35      	ldr	r3, [pc, #212]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2506:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a250a:	d85b      	bhi.n	a25c4 <Cl_Rinse_Controller+0x2fc>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a250c:	4b32      	ldr	r3, [pc, #200]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2510:	330a      	adds	r3, #10
   a2512:	4a31      	ldr	r2, [pc, #196]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2514:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a2516:	4b30      	ldr	r3, [pc, #192]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a251a:	4619      	mov	r1, r3
   a251c:	2001      	movs	r0, #1
   a251e:	4b2c      	ldr	r3, [pc, #176]	; (a25d0 <Cl_Rinse_Controller+0x308>)
   a2520:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a2522:	230f      	movs	r3, #15
   a2524:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a2528:	4b2b      	ldr	r3, [pc, #172]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a252c:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a252e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a2532:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a2536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a253a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a253e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a2542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a2546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a254a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a254e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a2552:	2205      	movs	r2, #5
   a2554:	4619      	mov	r1, r3
   a2556:	202a      	movs	r0, #42	; 0x2a
   a2558:	4b21      	ldr	r3, [pc, #132]	; (a25e0 <Cl_Rinse_Controller+0x318>)
   a255a:	4798      	blx	r3
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a255c:	e032      	b.n	a25c4 <Cl_Rinse_Controller+0x2fc>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   a255e:	4b1e      	ldr	r3, [pc, #120]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2562:	2b63      	cmp	r3, #99	; 0x63
   a2564:	d93e      	bls.n	a25e4 <Cl_Rinse_Controller+0x31c>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a2566:	4b1c      	ldr	r3, [pc, #112]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a256a:	3b0a      	subs	r3, #10
   a256c:	4a1a      	ldr	r2, [pc, #104]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a256e:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a2570:	4b19      	ldr	r3, [pc, #100]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2574:	4619      	mov	r1, r3
   a2576:	2001      	movs	r0, #1
   a2578:	4b15      	ldr	r3, [pc, #84]	; (a25d0 <Cl_Rinse_Controller+0x308>)
   a257a:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a257c:	230f      	movs	r3, #15
   a257e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a2582:	4b15      	ldr	r3, [pc, #84]	; (a25d8 <Cl_Rinse_Controller+0x310>)
   a2584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2586:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a2588:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a258c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a2590:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a2594:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a2598:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a259c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a25a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a25a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a25a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a25ac:	2205      	movs	r2, #5
   a25ae:	4619      	mov	r1, r3
   a25b0:	202a      	movs	r0, #42	; 0x2a
   a25b2:	4b0b      	ldr	r3, [pc, #44]	; (a25e0 <Cl_Rinse_Controller+0x318>)
   a25b4:	4798      	blx	r3
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a25b6:	e015      	b.n	a25e4 <Cl_Rinse_Controller+0x31c>
		
	
	
	default:break;	
   a25b8:	bf00      	nop
   a25ba:	e014      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
	}
	break;
   a25bc:	bf00      	nop
   a25be:	e012      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
		}
				
	}
			
			
	break;
   a25c0:	bf00      	nop
   a25c2:	e010      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a25c4:	bf00      	nop
   a25c6:	e00e      	b.n	a25e6 <Cl_Rinse_Controller+0x31e>
   a25c8:	000a3749 	.word	0x000a3749
   a25cc:	00082de1 	.word	0x00082de1
   a25d0:	0009316d 	.word	0x0009316d
   a25d4:	200723e8 	.word	0x200723e8
   a25d8:	20072654 	.word	0x20072654
   a25dc:	00093861 	.word	0x00093861
   a25e0:	0009b805 	.word	0x0009b805
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a25e4:	bf00      	nop
	
	
	default:break;	
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   a25e6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a25ea:	2b12      	cmp	r3, #18
   a25ec:	d10f      	bne.n	a260e <Cl_Rinse_Controller+0x346>
{
	Rinsestatedummy = cl_rinsestate;
   a25ee:	4bc5      	ldr	r3, [pc, #788]	; (a2904 <Cl_Rinse_Controller+0x63c>)
   a25f0:	781a      	ldrb	r2, [r3, #0]
   a25f2:	4bc5      	ldr	r3, [pc, #788]	; (a2908 <Cl_Rinse_Controller+0x640>)
   a25f4:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   a25f6:	203d      	movs	r0, #61	; 0x3d
   a25f8:	4bc4      	ldr	r3, [pc, #784]	; (a290c <Cl_Rinse_Controller+0x644>)
   a25fa:	4798      	blx	r3
   a25fc:	4603      	mov	r3, r0
   a25fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   a2602:	203e      	movs	r0, #62	; 0x3e
   a2604:	4bc1      	ldr	r3, [pc, #772]	; (a290c <Cl_Rinse_Controller+0x644>)
   a2606:	4798      	blx	r3
   a2608:	4603      	mov	r3, r0
   a260a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   a260e:	4bbd      	ldr	r3, [pc, #756]	; (a2904 <Cl_Rinse_Controller+0x63c>)
   a2610:	781b      	ldrb	r3, [r3, #0]
   a2612:	2b09      	cmp	r3, #9
   a2614:	f200 87fe 	bhi.w	a3614 <Cl_Rinse_Controller+0x134c>
   a2618:	a201      	add	r2, pc, #4	; (adr r2, a2620 <Cl_Rinse_Controller+0x358>)
   a261a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a261e:	bf00      	nop
   a2620:	000a2649 	.word	0x000a2649
   a2624:	000a3725 	.word	0x000a3725
   a2628:	000a3615 	.word	0x000a3615
   a262c:	000a2843 	.word	0x000a2843
   a2630:	000a2843 	.word	0x000a2843
   a2634:	000a2843 	.word	0x000a2843
   a2638:	000a2f1d 	.word	0x000a2f1d
   a263c:	000a3615 	.word	0x000a3615
   a2640:	000a3615 	.word	0x000a3615
   a2644:	000a31f3 	.word	0x000a31f3
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   a2648:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a264c:	3b02      	subs	r3, #2
   a264e:	2b15      	cmp	r3, #21
   a2650:	f200 80f1 	bhi.w	a2836 <Cl_Rinse_Controller+0x56e>
   a2654:	a201      	add	r2, pc, #4	; (adr r2, a265c <Cl_Rinse_Controller+0x394>)
   a2656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a265a:	bf00      	nop
   a265c:	000a277b 	.word	0x000a277b
   a2660:	000a2837 	.word	0x000a2837
   a2664:	000a2807 	.word	0x000a2807
   a2668:	000a2819 	.word	0x000a2819
   a266c:	000a2837 	.word	0x000a2837
   a2670:	000a2837 	.word	0x000a2837
   a2674:	000a2837 	.word	0x000a2837
   a2678:	000a2837 	.word	0x000a2837
   a267c:	000a2837 	.word	0x000a2837
   a2680:	000a2837 	.word	0x000a2837
   a2684:	000a2837 	.word	0x000a2837
   a2688:	000a2837 	.word	0x000a2837
   a268c:	000a2837 	.word	0x000a2837
   a2690:	000a2837 	.word	0x000a2837
   a2694:	000a2837 	.word	0x000a2837
   a2698:	000a2837 	.word	0x000a2837
   a269c:	000a2837 	.word	0x000a2837
   a26a0:	000a2837 	.word	0x000a2837
   a26a4:	000a2837 	.word	0x000a2837
   a26a8:	000a2837 	.word	0x000a2837
   a26ac:	000a282b 	.word	0x000a282b
   a26b0:	000a26b5 	.word	0x000a26b5
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   a26b4:	4b96      	ldr	r3, [pc, #600]	; (a2910 <Cl_Rinse_Controller+0x648>)
   a26b6:	7e1b      	ldrb	r3, [r3, #24]
   a26b8:	2b00      	cmp	r3, #0
   a26ba:	f000 80bf 	beq.w	a283c <Cl_Rinse_Controller+0x574>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   a26be:	4b94      	ldr	r3, [pc, #592]	; (a2910 <Cl_Rinse_Controller+0x648>)
   a26c0:	791b      	ldrb	r3, [r3, #4]
   a26c2:	2b02      	cmp	r3, #2
   a26c4:	d020      	beq.n	a2708 <Cl_Rinse_Controller+0x440>
   a26c6:	2b21      	cmp	r3, #33	; 0x21
   a26c8:	d03a      	beq.n	a2740 <Cl_Rinse_Controller+0x478>
   a26ca:	2b01      	cmp	r3, #1
   a26cc:	d000      	beq.n	a26d0 <Cl_Rinse_Controller+0x408>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   a26ce:	e053      	b.n	a2778 <Cl_Rinse_Controller+0x4b0>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a26d0:	2316      	movs	r3, #22
   a26d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a26d6:	2301      	movs	r3, #1
   a26d8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a26dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a26e0:	3301      	adds	r3, #1
   a26e2:	4619      	mov	r1, r3
   a26e4:	2001      	movs	r0, #1
   a26e6:	4b8b      	ldr	r3, [pc, #556]	; (a2914 <Cl_Rinse_Controller+0x64c>)
   a26e8:	4798      	blx	r3
   a26ea:	4603      	mov	r3, r0
   a26ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a26f0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a26f4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a26f8:	2202      	movs	r2, #2
   a26fa:	4618      	mov	r0, r3
   a26fc:	4b86      	ldr	r3, [pc, #536]	; (a2918 <Cl_Rinse_Controller+0x650>)
   a26fe:	4798      	blx	r3
   a2700:	4603      	mov	r3, r0
   a2702:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   a2706:	e037      	b.n	a2778 <Cl_Rinse_Controller+0x4b0>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a2708:	2316      	movs	r3, #22
   a270a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a270e:	2302      	movs	r3, #2
   a2710:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a2714:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2718:	3301      	adds	r3, #1
   a271a:	4619      	mov	r1, r3
   a271c:	2002      	movs	r0, #2
   a271e:	4b7d      	ldr	r3, [pc, #500]	; (a2914 <Cl_Rinse_Controller+0x64c>)
   a2720:	4798      	blx	r3
   a2722:	4603      	mov	r3, r0
   a2724:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a2728:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a272c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a2730:	2202      	movs	r2, #2
   a2732:	4618      	mov	r0, r3
   a2734:	4b78      	ldr	r3, [pc, #480]	; (a2918 <Cl_Rinse_Controller+0x650>)
   a2736:	4798      	blx	r3
   a2738:	4603      	mov	r3, r0
   a273a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   a273e:	e01b      	b.n	a2778 <Cl_Rinse_Controller+0x4b0>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a2740:	2316      	movs	r3, #22
   a2742:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a2746:	2323      	movs	r3, #35	; 0x23
   a2748:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a274c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2750:	3301      	adds	r3, #1
   a2752:	4619      	mov	r1, r3
   a2754:	2028      	movs	r0, #40	; 0x28
   a2756:	4b6f      	ldr	r3, [pc, #444]	; (a2914 <Cl_Rinse_Controller+0x64c>)
   a2758:	4798      	blx	r3
   a275a:	4603      	mov	r3, r0
   a275c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a2760:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a2764:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a2768:	2202      	movs	r2, #2
   a276a:	4618      	mov	r0, r3
   a276c:	4b6a      	ldr	r3, [pc, #424]	; (a2918 <Cl_Rinse_Controller+0x650>)
   a276e:	4798      	blx	r3
   a2770:	4603      	mov	r3, r0
   a2772:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   a2776:	bf00      	nop
								default:
								break;
							}
						}
				break;
   a2778:	e060      	b.n	a283c <Cl_Rinse_Controller+0x574>
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a277a:	4b65      	ldr	r3, [pc, #404]	; (a2910 <Cl_Rinse_Controller+0x648>)
   a277c:	7e1b      	ldrb	r3, [r3, #24]
   a277e:	2b00      	cmp	r3, #0
   a2780:	d00e      	beq.n	a27a0 <Cl_Rinse_Controller+0x4d8>
					{
//						cl_Datastreamtype cl_temp  ;

						cl_local.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a2782:	4b63      	ldr	r3, [pc, #396]	; (a2910 <Cl_Rinse_Controller+0x648>)
   a2784:	791a      	ldrb	r2, [r3, #4]
   a2786:	4b65      	ldr	r3, [pc, #404]	; (a291c <Cl_Rinse_Controller+0x654>)
   a2788:	701a      	strb	r2, [r3, #0]
						if (cl_local.bytearray[0] == 1)
   a278a:	4b64      	ldr	r3, [pc, #400]	; (a291c <Cl_Rinse_Controller+0x654>)
   a278c:	781b      	ldrb	r3, [r3, #0]
   a278e:	2b01      	cmp	r3, #1
   a2790:	d006      	beq.n	a27a0 <Cl_Rinse_Controller+0x4d8>
						{
						
						}
						else if (cl_local.bytearray[0] == 2)
   a2792:	4b62      	ldr	r3, [pc, #392]	; (a291c <Cl_Rinse_Controller+0x654>)
   a2794:	781b      	ldrb	r3, [r3, #0]
   a2796:	2b02      	cmp	r3, #2
   a2798:	d102      	bne.n	a27a0 <Cl_Rinse_Controller+0x4d8>
						{
							hotrinse_flag = 1;
   a279a:	4b61      	ldr	r3, [pc, #388]	; (a2920 <Cl_Rinse_Controller+0x658>)
   a279c:	2201      	movs	r2, #1
   a279e:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   a27a0:	4b60      	ldr	r3, [pc, #384]	; (a2924 <Cl_Rinse_Controller+0x65c>)
   a27a2:	4798      	blx	r3
   a27a4:	4603      	mov	r3, r0
   a27a6:	2b00      	cmp	r3, #0
   a27a8:	d12a      	bne.n	a2800 <Cl_Rinse_Controller+0x538>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   a27aa:	2308      	movs	r3, #8
   a27ac:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a27b0:	2301      	movs	r3, #1
   a27b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a27b6:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a27ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a27be:	2201      	movs	r2, #1
   a27c0:	4618      	mov	r0, r3
   a27c2:	4b55      	ldr	r3, [pc, #340]	; (a2918 <Cl_Rinse_Controller+0x650>)
   a27c4:	4798      	blx	r3
   a27c6:	4603      	mov	r3, r0
   a27c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   a27cc:	2309      	movs	r3, #9
   a27ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a27d2:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a27d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a27da:	2200      	movs	r2, #0
   a27dc:	4618      	mov	r0, r3
   a27de:	4b4e      	ldr	r3, [pc, #312]	; (a2918 <Cl_Rinse_Controller+0x650>)
   a27e0:	4798      	blx	r3
   a27e2:	4603      	mov	r3, r0
   a27e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a27e8:	4b4f      	ldr	r3, [pc, #316]	; (a2928 <Cl_Rinse_Controller+0x660>)
   a27ea:	4798      	blx	r3
   a27ec:	4603      	mov	r3, r0
   a27ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a27f2:	4b44      	ldr	r3, [pc, #272]	; (a2904 <Cl_Rinse_Controller+0x63c>)
   a27f4:	2203      	movs	r2, #3
   a27f6:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a27f8:	4b4c      	ldr	r3, [pc, #304]	; (a292c <Cl_Rinse_Controller+0x664>)
   a27fa:	2201      	movs	r2, #1
   a27fc:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   a27fe:	e01e      	b.n	a283e <Cl_Rinse_Controller+0x576>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   a2800:	2303      	movs	r3, #3
   a2802:	f000 bf94 	b.w	a372e <Cl_Rinse_Controller+0x1466>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   a2806:	4b47      	ldr	r3, [pc, #284]	; (a2924 <Cl_Rinse_Controller+0x65c>)
   a2808:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a280a:	4b3e      	ldr	r3, [pc, #248]	; (a2904 <Cl_Rinse_Controller+0x63c>)
   a280c:	2204      	movs	r2, #4
   a280e:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2810:	4b46      	ldr	r3, [pc, #280]	; (a292c <Cl_Rinse_Controller+0x664>)
   a2812:	2201      	movs	r2, #1
   a2814:	701a      	strb	r2, [r3, #0]
				break;
   a2816:	e012      	b.n	a283e <Cl_Rinse_Controller+0x576>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a2818:	4b42      	ldr	r3, [pc, #264]	; (a2924 <Cl_Rinse_Controller+0x65c>)
   a281a:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a281c:	4b39      	ldr	r3, [pc, #228]	; (a2904 <Cl_Rinse_Controller+0x63c>)
   a281e:	2205      	movs	r2, #5
   a2820:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2822:	4b42      	ldr	r3, [pc, #264]	; (a292c <Cl_Rinse_Controller+0x664>)
   a2824:	2201      	movs	r2, #1
   a2826:	701a      	strb	r2, [r3, #0]
				break;
   a2828:	e009      	b.n	a283e <Cl_Rinse_Controller+0x576>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a282a:	4b41      	ldr	r3, [pc, #260]	; (a2930 <Cl_Rinse_Controller+0x668>)
   a282c:	4798      	blx	r3
   a282e:	4603      	mov	r3, r0
   a2830:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   a2834:	e003      	b.n	a283e <Cl_Rinse_Controller+0x576>
				default:
				break;
   a2836:	bf00      	nop
   a2838:	f000 bf77 	b.w	a372a <Cl_Rinse_Controller+0x1462>
								break;							
								default:
								break;
							}
						}
				break;
   a283c:	bf00      	nop
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
				break;
				default:
				break;
			}                                 	
		break;
   a283e:	f000 bf74 	b.w	a372a <Cl_Rinse_Controller+0x1462>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   a2842:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a2846:	3b06      	subs	r3, #6
   a2848:	2b21      	cmp	r3, #33	; 0x21
   a284a:	f200 876d 	bhi.w	a3728 <Cl_Rinse_Controller+0x1460>
   a284e:	a201      	add	r2, pc, #4	; (adr r2, a2854 <Cl_Rinse_Controller+0x58c>)
   a2850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2854:	000a2cfd 	.word	0x000a2cfd
   a2858:	000a3729 	.word	0x000a3729
   a285c:	000a3729 	.word	0x000a3729
   a2860:	000a3729 	.word	0x000a3729
   a2864:	000a3729 	.word	0x000a3729
   a2868:	000a3729 	.word	0x000a3729
   a286c:	000a3729 	.word	0x000a3729
   a2870:	000a3729 	.word	0x000a3729
   a2874:	000a3729 	.word	0x000a3729
   a2878:	000a28dd 	.word	0x000a28dd
   a287c:	000a3729 	.word	0x000a3729
   a2880:	000a2939 	.word	0x000a2939
   a2884:	000a29b5 	.word	0x000a29b5
   a2888:	000a2bf9 	.word	0x000a2bf9
   a288c:	000a2ce7 	.word	0x000a2ce7
   a2890:	000a2d0f 	.word	0x000a2d0f
   a2894:	000a2d03 	.word	0x000a2d03
   a2898:	000a3729 	.word	0x000a3729
   a289c:	000a3729 	.word	0x000a3729
   a28a0:	000a2dc5 	.word	0x000a2dc5
   a28a4:	000a2d43 	.word	0x000a2d43
   a28a8:	000a2d5d 	.word	0x000a2d5d
   a28ac:	000a2e37 	.word	0x000a2e37
   a28b0:	000a2e41 	.word	0x000a2e41
   a28b4:	000a2e4b 	.word	0x000a2e4b
   a28b8:	000a2d6d 	.word	0x000a2d6d
   a28bc:	000a2d91 	.word	0x000a2d91
   a28c0:	000a2da5 	.word	0x000a2da5
   a28c4:	000a2db5 	.word	0x000a2db5
   a28c8:	000a3729 	.word	0x000a3729
   a28cc:	000a3729 	.word	0x000a3729
   a28d0:	000a3729 	.word	0x000a3729
   a28d4:	000a3729 	.word	0x000a3729
   a28d8:	000a2e79 	.word	0x000a2e79
// 										break;
// 									}
// 								}
// 						break;
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   a28dc:	4b13      	ldr	r3, [pc, #76]	; (a292c <Cl_Rinse_Controller+0x664>)
   a28de:	781b      	ldrb	r3, [r3, #0]
   a28e0:	2b02      	cmp	r3, #2
   a28e2:	f040 82cd 	bne.w	a2e80 <Cl_Rinse_Controller+0xbb8>
						{
									cl_50ms_timer++;
   a28e6:	4b13      	ldr	r3, [pc, #76]	; (a2934 <Cl_Rinse_Controller+0x66c>)
   a28e8:	881b      	ldrh	r3, [r3, #0]
   a28ea:	3301      	adds	r3, #1
   a28ec:	b29a      	uxth	r2, r3
   a28ee:	4b11      	ldr	r3, [pc, #68]	; (a2934 <Cl_Rinse_Controller+0x66c>)
   a28f0:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   a28f2:	4b10      	ldr	r3, [pc, #64]	; (a2934 <Cl_Rinse_Controller+0x66c>)
   a28f4:	881b      	ldrh	r3, [r3, #0]
   a28f6:	2b02      	cmp	r3, #2
   a28f8:	f040 82c2 	bne.w	a2e80 <Cl_Rinse_Controller+0xbb8>
									{
										cl_50ms_timer =0;
   a28fc:	4b0d      	ldr	r3, [pc, #52]	; (a2934 <Cl_Rinse_Controller+0x66c>)
   a28fe:	2200      	movs	r2, #0
   a2900:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a2902:	e2bd      	b.n	a2e80 <Cl_Rinse_Controller+0xbb8>
   a2904:	20071c8e 	.word	0x20071c8e
   a2908:	200725b6 	.word	0x200725b6
   a290c:	00082ed5 	.word	0x00082ed5
   a2910:	200723e8 	.word	0x200723e8
   a2914:	0009a331 	.word	0x0009a331
   a2918:	0009b805 	.word	0x0009b805
   a291c:	20072820 	.word	0x20072820
   a2920:	20071cb1 	.word	0x20071cb1
   a2924:	000a4505 	.word	0x000a4505
   a2928:	000a3abd 	.word	0x000a3abd
   a292c:	20071c8f 	.word	0x20071c8f
   a2930:	000a3d51 	.word	0x000a3d51
   a2934:	20071cae 	.word	0x20071cae
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   a2938:	4b91      	ldr	r3, [pc, #580]	; (a2b80 <Cl_Rinse_Controller+0x8b8>)
   a293a:	681a      	ldr	r2, [r3, #0]
   a293c:	4b91      	ldr	r3, [pc, #580]	; (a2b84 <Cl_Rinse_Controller+0x8bc>)
   a293e:	4992      	ldr	r1, [pc, #584]	; (a2b88 <Cl_Rinse_Controller+0x8c0>)
   a2940:	4610      	mov	r0, r2
   a2942:	4798      	blx	r3
   a2944:	4603      	mov	r3, r0
   a2946:	2b00      	cmp	r3, #0
   a2948:	d00d      	beq.n	a2966 <Cl_Rinse_Controller+0x69e>
   a294a:	4b8d      	ldr	r3, [pc, #564]	; (a2b80 <Cl_Rinse_Controller+0x8b8>)
   a294c:	681a      	ldr	r2, [r3, #0]
   a294e:	4b8f      	ldr	r3, [pc, #572]	; (a2b8c <Cl_Rinse_Controller+0x8c4>)
   a2950:	498f      	ldr	r1, [pc, #572]	; (a2b90 <Cl_Rinse_Controller+0x8c8>)
   a2952:	4610      	mov	r0, r2
   a2954:	4798      	blx	r3
   a2956:	4603      	mov	r3, r0
   a2958:	2b00      	cmp	r3, #0
   a295a:	d004      	beq.n	a2966 <Cl_Rinse_Controller+0x69e>
							{
								sv_cntrl_decheater(2200);
   a295c:	f640 0098 	movw	r0, #2200	; 0x898
   a2960:	4b8c      	ldr	r3, [pc, #560]	; (a2b94 <Cl_Rinse_Controller+0x8cc>)
   a2962:	4798      	blx	r3
   a2964:	e025      	b.n	a29b2 <Cl_Rinse_Controller+0x6ea>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   a2966:	4b86      	ldr	r3, [pc, #536]	; (a2b80 <Cl_Rinse_Controller+0x8b8>)
   a2968:	681a      	ldr	r2, [r3, #0]
   a296a:	4b86      	ldr	r3, [pc, #536]	; (a2b84 <Cl_Rinse_Controller+0x8bc>)
   a296c:	4988      	ldr	r1, [pc, #544]	; (a2b90 <Cl_Rinse_Controller+0x8c8>)
   a296e:	4610      	mov	r0, r2
   a2970:	4798      	blx	r3
   a2972:	4603      	mov	r3, r0
   a2974:	2b00      	cmp	r3, #0
   a2976:	d00d      	beq.n	a2994 <Cl_Rinse_Controller+0x6cc>
   a2978:	4b81      	ldr	r3, [pc, #516]	; (a2b80 <Cl_Rinse_Controller+0x8b8>)
   a297a:	681a      	ldr	r2, [r3, #0]
   a297c:	4b83      	ldr	r3, [pc, #524]	; (a2b8c <Cl_Rinse_Controller+0x8c4>)
   a297e:	4986      	ldr	r1, [pc, #536]	; (a2b98 <Cl_Rinse_Controller+0x8d0>)
   a2980:	4610      	mov	r0, r2
   a2982:	4798      	blx	r3
   a2984:	4603      	mov	r3, r0
   a2986:	2b00      	cmp	r3, #0
   a2988:	d004      	beq.n	a2994 <Cl_Rinse_Controller+0x6cc>
							{
								sv_cntrl_decheater(2000);
   a298a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   a298e:	4b81      	ldr	r3, [pc, #516]	; (a2b94 <Cl_Rinse_Controller+0x8cc>)
   a2990:	4798      	blx	r3
   a2992:	e00e      	b.n	a29b2 <Cl_Rinse_Controller+0x6ea>
							}
							else if (avgtemp2_dummy > 77)
   a2994:	4b7a      	ldr	r3, [pc, #488]	; (a2b80 <Cl_Rinse_Controller+0x8b8>)
   a2996:	681a      	ldr	r2, [r3, #0]
   a2998:	4b7a      	ldr	r3, [pc, #488]	; (a2b84 <Cl_Rinse_Controller+0x8bc>)
   a299a:	497f      	ldr	r1, [pc, #508]	; (a2b98 <Cl_Rinse_Controller+0x8d0>)
   a299c:	4610      	mov	r0, r2
   a299e:	4798      	blx	r3
   a29a0:	4603      	mov	r3, r0
   a29a2:	2b00      	cmp	r3, #0
   a29a4:	d100      	bne.n	a29a8 <Cl_Rinse_Controller+0x6e0>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   a29a6:	e27b      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   a29a8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   a29ac:	4b79      	ldr	r3, [pc, #484]	; (a2b94 <Cl_Rinse_Controller+0x8cc>)
   a29ae:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   a29b0:	e276      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
   a29b2:	e275      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a29b4:	4b79      	ldr	r3, [pc, #484]	; (a2b9c <Cl_Rinse_Controller+0x8d4>)
   a29b6:	781b      	ldrb	r3, [r3, #0]
   a29b8:	2b03      	cmp	r3, #3
   a29ba:	d101      	bne.n	a29c0 <Cl_Rinse_Controller+0x6f8>
						{
							Cl_Rinse_SendRinseStateData();	
   a29bc:	4b78      	ldr	r3, [pc, #480]	; (a2ba0 <Cl_Rinse_Controller+0x8d8>)
   a29be:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   a29c0:	4b78      	ldr	r3, [pc, #480]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a29c2:	681b      	ldr	r3, [r3, #0]
   a29c4:	3301      	adds	r3, #1
   a29c6:	4a77      	ldr	r2, [pc, #476]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a29c8:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 40){ // activate flow alarms only after 30 seconds into rinse
   a29ca:	4b76      	ldr	r3, [pc, #472]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a29cc:	681b      	ldr	r3, [r3, #0]
   a29ce:	2b28      	cmp	r3, #40	; 0x28
   a29d0:	d114      	bne.n	a29fc <Cl_Rinse_Controller+0x734>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a29d2:	2101      	movs	r1, #1
   a29d4:	200c      	movs	r0, #12
   a29d6:	4b74      	ldr	r3, [pc, #464]	; (a2ba8 <Cl_Rinse_Controller+0x8e0>)
   a29d8:	4798      	blx	r3
   a29da:	4603      	mov	r3, r0
   a29dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a29e0:	2101      	movs	r1, #1
   a29e2:	200d      	movs	r0, #13
   a29e4:	4b70      	ldr	r3, [pc, #448]	; (a2ba8 <Cl_Rinse_Controller+0x8e0>)
   a29e6:	4798      	blx	r3
   a29e8:	4603      	mov	r3, r0
   a29ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a29ee:	2101      	movs	r1, #1
   a29f0:	200e      	movs	r0, #14
   a29f2:	4b6d      	ldr	r3, [pc, #436]	; (a2ba8 <Cl_Rinse_Controller+0x8e0>)
   a29f4:	4798      	blx	r3
   a29f6:	4603      	mov	r3, r0
   a29f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   a29fc:	4b69      	ldr	r3, [pc, #420]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a29fe:	681b      	ldr	r3, [r3, #0]
   a2a00:	2b0a      	cmp	r3, #10
   a2a02:	d118      	bne.n	a2a36 <Cl_Rinse_Controller+0x76e>
   a2a04:	4b69      	ldr	r3, [pc, #420]	; (a2bac <Cl_Rinse_Controller+0x8e4>)
   a2a06:	781b      	ldrb	r3, [r3, #0]
   a2a08:	b2db      	uxtb	r3, r3
   a2a0a:	2b01      	cmp	r3, #1
   a2a0c:	d113      	bne.n	a2a36 <Cl_Rinse_Controller+0x76e>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   a2a0e:	2206      	movs	r2, #6
   a2a10:	4967      	ldr	r1, [pc, #412]	; (a2bb0 <Cl_Rinse_Controller+0x8e8>)
   a2a12:	2018      	movs	r0, #24
   a2a14:	4b67      	ldr	r3, [pc, #412]	; (a2bb4 <Cl_Rinse_Controller+0x8ec>)
   a2a16:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   a2a18:	2004      	movs	r0, #4
   a2a1a:	4b67      	ldr	r3, [pc, #412]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2a1c:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   a2a1e:	2001      	movs	r0, #1
   a2a20:	4b66      	ldr	r3, [pc, #408]	; (a2bbc <Cl_Rinse_Controller+0x8f4>)
   a2a22:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   a2a24:	2013      	movs	r0, #19
   a2a26:	4b66      	ldr	r3, [pc, #408]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2a28:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   a2a2a:	2014      	movs	r0, #20
   a2a2c:	4b64      	ldr	r3, [pc, #400]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2a2e:	4798      	blx	r3
							rinse2=1;
   a2a30:	4b64      	ldr	r3, [pc, #400]	; (a2bc4 <Cl_Rinse_Controller+0x8fc>)
   a2a32:	2201      	movs	r2, #1
   a2a34:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   a2a36:	4b5b      	ldr	r3, [pc, #364]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a2a38:	681b      	ldr	r3, [r3, #0]
   a2a3a:	2b1e      	cmp	r3, #30
   a2a3c:	d129      	bne.n	a2a92 <Cl_Rinse_Controller+0x7ca>
   a2a3e:	4b5b      	ldr	r3, [pc, #364]	; (a2bac <Cl_Rinse_Controller+0x8e4>)
   a2a40:	781b      	ldrb	r3, [r3, #0]
   a2a42:	b2db      	uxtb	r3, r3
   a2a44:	2b01      	cmp	r3, #1
   a2a46:	d124      	bne.n	a2a92 <Cl_Rinse_Controller+0x7ca>
   a2a48:	4b5e      	ldr	r3, [pc, #376]	; (a2bc4 <Cl_Rinse_Controller+0x8fc>)
   a2a4a:	781b      	ldrb	r3, [r3, #0]
   a2a4c:	b2db      	uxtb	r3, r3
   a2a4e:	2b01      	cmp	r3, #1
   a2a50:	d11f      	bne.n	a2a92 <Cl_Rinse_Controller+0x7ca>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   a2a52:	2206      	movs	r2, #6
   a2a54:	495c      	ldr	r1, [pc, #368]	; (a2bc8 <Cl_Rinse_Controller+0x900>)
   a2a56:	2018      	movs	r0, #24
   a2a58:	4b56      	ldr	r3, [pc, #344]	; (a2bb4 <Cl_Rinse_Controller+0x8ec>)
   a2a5a:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   a2a5c:	2002      	movs	r0, #2
   a2a5e:	4b57      	ldr	r3, [pc, #348]	; (a2bbc <Cl_Rinse_Controller+0x8f4>)
   a2a60:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID19);
   a2a62:	2013      	movs	r0, #19
   a2a64:	4b54      	ldr	r3, [pc, #336]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2a66:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID20);
   a2a68:	2014      	movs	r0, #20
   a2a6a:	4b53      	ldr	r3, [pc, #332]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2a6c:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR1);
   a2a6e:	2001      	movs	r0, #1
   a2a70:	4b56      	ldr	r3, [pc, #344]	; (a2bcc <Cl_Rinse_Controller+0x904>)
   a2a72:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   a2a74:	2002      	movs	r0, #2
   a2a76:	4b55      	ldr	r3, [pc, #340]	; (a2bcc <Cl_Rinse_Controller+0x904>)
   a2a78:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   a2a7a:	2006      	movs	r0, #6
   a2a7c:	4b50      	ldr	r3, [pc, #320]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2a7e:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   a2a80:	2008      	movs	r0, #8
   a2a82:	4b4f      	ldr	r3, [pc, #316]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2a84:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   a2a86:	2011      	movs	r0, #17
   a2a88:	4b4d      	ldr	r3, [pc, #308]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2a8a:	4798      	blx	r3
							rinse3=1;
   a2a8c:	4b50      	ldr	r3, [pc, #320]	; (a2bd0 <Cl_Rinse_Controller+0x908>)
   a2a8e:	2201      	movs	r2, #1
   a2a90:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   a2a92:	4b44      	ldr	r3, [pc, #272]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a2a94:	681b      	ldr	r3, [r3, #0]
   a2a96:	2b37      	cmp	r3, #55	; 0x37
   a2a98:	d11c      	bne.n	a2ad4 <Cl_Rinse_Controller+0x80c>
   a2a9a:	4b44      	ldr	r3, [pc, #272]	; (a2bac <Cl_Rinse_Controller+0x8e4>)
   a2a9c:	781b      	ldrb	r3, [r3, #0]
   a2a9e:	b2db      	uxtb	r3, r3
   a2aa0:	2b01      	cmp	r3, #1
   a2aa2:	d117      	bne.n	a2ad4 <Cl_Rinse_Controller+0x80c>
   a2aa4:	4b47      	ldr	r3, [pc, #284]	; (a2bc4 <Cl_Rinse_Controller+0x8fc>)
   a2aa6:	781b      	ldrb	r3, [r3, #0]
   a2aa8:	b2db      	uxtb	r3, r3
   a2aaa:	2b01      	cmp	r3, #1
   a2aac:	d112      	bne.n	a2ad4 <Cl_Rinse_Controller+0x80c>
   a2aae:	4b48      	ldr	r3, [pc, #288]	; (a2bd0 <Cl_Rinse_Controller+0x908>)
   a2ab0:	781b      	ldrb	r3, [r3, #0]
   a2ab2:	b2db      	uxtb	r3, r3
   a2ab4:	2b01      	cmp	r3, #1
   a2ab6:	d10d      	bne.n	a2ad4 <Cl_Rinse_Controller+0x80c>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   a2ab8:	2206      	movs	r2, #6
   a2aba:	4946      	ldr	r1, [pc, #280]	; (a2bd4 <Cl_Rinse_Controller+0x90c>)
   a2abc:	2018      	movs	r0, #24
   a2abe:	4b3d      	ldr	r3, [pc, #244]	; (a2bb4 <Cl_Rinse_Controller+0x8ec>)
   a2ac0:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   a2ac2:	2004      	movs	r0, #4
   a2ac4:	4b3e      	ldr	r3, [pc, #248]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2ac6:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   a2ac8:	2011      	movs	r0, #17
   a2aca:	4b3b      	ldr	r3, [pc, #236]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2acc:	4798      	blx	r3
							rinse4=1;
   a2ace:	4b42      	ldr	r3, [pc, #264]	; (a2bd8 <Cl_Rinse_Controller+0x910>)
   a2ad0:	2201      	movs	r2, #1
   a2ad2:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   a2ad4:	4b33      	ldr	r3, [pc, #204]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a2ad6:	681b      	ldr	r3, [r3, #0]
   a2ad8:	2b3c      	cmp	r3, #60	; 0x3c
   a2ada:	f040 81d4 	bne.w	a2e86 <Cl_Rinse_Controller+0xbbe>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   a2ade:	2100      	movs	r1, #0
   a2ae0:	2004      	movs	r0, #4
   a2ae2:	4b3e      	ldr	r3, [pc, #248]	; (a2bdc <Cl_Rinse_Controller+0x914>)
   a2ae4:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   a2ae6:	4b2f      	ldr	r3, [pc, #188]	; (a2ba4 <Cl_Rinse_Controller+0x8dc>)
   a2ae8:	2200      	movs	r2, #0
   a2aea:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   a2aec:	4b3c      	ldr	r3, [pc, #240]	; (a2be0 <Cl_Rinse_Controller+0x918>)
   a2aee:	681b      	ldr	r3, [r3, #0]
   a2af0:	3301      	adds	r3, #1
   a2af2:	4a3b      	ldr	r2, [pc, #236]	; (a2be0 <Cl_Rinse_Controller+0x918>)
   a2af4:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   a2af6:	4b3a      	ldr	r3, [pc, #232]	; (a2be0 <Cl_Rinse_Controller+0x918>)
   a2af8:	681b      	ldr	r3, [r3, #0]
   a2afa:	2b01      	cmp	r3, #1
   a2afc:	d10d      	bne.n	a2b1a <Cl_Rinse_Controller+0x852>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   a2afe:	2206      	movs	r2, #6
   a2b00:	4938      	ldr	r1, [pc, #224]	; (a2be4 <Cl_Rinse_Controller+0x91c>)
   a2b02:	2018      	movs	r0, #24
   a2b04:	4b2b      	ldr	r3, [pc, #172]	; (a2bb4 <Cl_Rinse_Controller+0x8ec>)
   a2b06:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   a2b08:	2004      	movs	r0, #4
   a2b0a:	4b2d      	ldr	r3, [pc, #180]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2b0c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   a2b0e:	2011      	movs	r0, #17
   a2b10:	4b29      	ldr	r3, [pc, #164]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2b12:	4798      	blx	r3
								rinse1=1;
   a2b14:	4b25      	ldr	r3, [pc, #148]	; (a2bac <Cl_Rinse_Controller+0x8e4>)
   a2b16:	2201      	movs	r2, #1
   a2b18:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == CL_BC_OPENFILL_TIMEOUT )  // earlier 2 min
   a2b1a:	4b31      	ldr	r3, [pc, #196]	; (a2be0 <Cl_Rinse_Controller+0x918>)
   a2b1c:	681b      	ldr	r3, [r3, #0]
   a2b1e:	2b05      	cmp	r3, #5
   a2b20:	d11e      	bne.n	a2b60 <Cl_Rinse_Controller+0x898>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   a2b22:	2206      	movs	r2, #6
   a2b24:	4930      	ldr	r1, [pc, #192]	; (a2be8 <Cl_Rinse_Controller+0x920>)
   a2b26:	2018      	movs	r0, #24
   a2b28:	4b22      	ldr	r3, [pc, #136]	; (a2bb4 <Cl_Rinse_Controller+0x8ec>)
   a2b2a:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   a2b2c:	2004      	movs	r0, #4
   a2b2e:	4b22      	ldr	r3, [pc, #136]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2b30:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   a2b32:	2011      	movs	r0, #17
   a2b34:	4b22      	ldr	r3, [pc, #136]	; (a2bc0 <Cl_Rinse_Controller+0x8f8>)
   a2b36:	4798      	blx	r3
								sv_prop_stopopenfill();
   a2b38:	4b2c      	ldr	r3, [pc, #176]	; (a2bec <Cl_Rinse_Controller+0x924>)
   a2b3a:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   a2b3c:	2002      	movs	r0, #2
   a2b3e:	4b1e      	ldr	r3, [pc, #120]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2b40:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   a2b42:	2003      	movs	r0, #3
   a2b44:	4b1c      	ldr	r3, [pc, #112]	; (a2bb8 <Cl_Rinse_Controller+0x8f0>)
   a2b46:	4798      	blx	r3
								
								rinse1=0;
   a2b48:	4b18      	ldr	r3, [pc, #96]	; (a2bac <Cl_Rinse_Controller+0x8e4>)
   a2b4a:	2200      	movs	r2, #0
   a2b4c:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   a2b4e:	4b1d      	ldr	r3, [pc, #116]	; (a2bc4 <Cl_Rinse_Controller+0x8fc>)
   a2b50:	2200      	movs	r2, #0
   a2b52:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   a2b54:	4b1e      	ldr	r3, [pc, #120]	; (a2bd0 <Cl_Rinse_Controller+0x908>)
   a2b56:	2200      	movs	r2, #0
   a2b58:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   a2b5a:	4b1f      	ldr	r3, [pc, #124]	; (a2bd8 <Cl_Rinse_Controller+0x910>)
   a2b5c:	2200      	movs	r2, #0
   a2b5e:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   a2b60:	4b23      	ldr	r3, [pc, #140]	; (a2bf0 <Cl_Rinse_Controller+0x928>)
   a2b62:	681b      	ldr	r3, [r3, #0]
   a2b64:	3301      	adds	r3, #1
   a2b66:	4a22      	ldr	r2, [pc, #136]	; (a2bf0 <Cl_Rinse_Controller+0x928>)
   a2b68:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a2b6a:	4b0c      	ldr	r3, [pc, #48]	; (a2b9c <Cl_Rinse_Controller+0x8d4>)
   a2b6c:	781b      	ldrb	r3, [r3, #0]
   a2b6e:	2b03      	cmp	r3, #3
   a2b70:	f040 8189 	bne.w	a2e86 <Cl_Rinse_Controller+0xbbe>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a2b74:	4b1f      	ldr	r3, [pc, #124]	; (a2bf4 <Cl_Rinse_Controller+0x92c>)
   a2b76:	4798      	blx	r3
   a2b78:	4603      	mov	r3, r0
   a2b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a2b7e:	e182      	b.n	a2e86 <Cl_Rinse_Controller+0xbbe>
   a2b80:	20071a08 	.word	0x20071a08
   a2b84:	000a6909 	.word	0x000a6909
   a2b88:	42960000 	.word	0x42960000
   a2b8c:	000a68cd 	.word	0x000a68cd
   a2b90:	42980000 	.word	0x42980000
   a2b94:	00099bd1 	.word	0x00099bd1
   a2b98:	429a0000 	.word	0x429a0000
   a2b9c:	20071c8e 	.word	0x20071c8e
   a2ba0:	000a425d 	.word	0x000a425d
   a2ba4:	20071c90 	.word	0x20071c90
   a2ba8:	00082de1 	.word	0x00082de1
   a2bac:	20071c8a 	.word	0x20071c8a
   a2bb0:	000a8a48 	.word	0x000a8a48
   a2bb4:	0009b805 	.word	0x0009b805
   a2bb8:	00099ac9 	.word	0x00099ac9
   a2bbc:	00099a45 	.word	0x00099a45
   a2bc0:	00099aa9 	.word	0x00099aa9
   a2bc4:	20071c8b 	.word	0x20071c8b
   a2bc8:	000a8a50 	.word	0x000a8a50
   a2bcc:	00099a09 	.word	0x00099a09
   a2bd0:	20071c8c 	.word	0x20071c8c
   a2bd4:	000a8a58 	.word	0x000a8a58
   a2bd8:	20071c8d 	.word	0x20071c8d
   a2bdc:	00095bbd 	.word	0x00095bbd
   a2be0:	20071c94 	.word	0x20071c94
   a2be4:	000a8a60 	.word	0x000a8a60
   a2be8:	000a8a68 	.word	0x000a8a68
   a2bec:	00099f35 	.word	0x00099f35
   a2bf0:	20071ca0 	.word	0x20071ca0
   a2bf4:	000a3abd 	.word	0x000a3abd
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   a2bf8:	4baa      	ldr	r3, [pc, #680]	; (a2ea4 <Cl_Rinse_Controller+0xbdc>)
   a2bfa:	781b      	ldrb	r3, [r3, #0]
   a2bfc:	b2db      	uxtb	r3, r3
   a2bfe:	3301      	adds	r3, #1
   a2c00:	b2da      	uxtb	r2, r3
   a2c02:	4ba8      	ldr	r3, [pc, #672]	; (a2ea4 <Cl_Rinse_Controller+0xbdc>)
   a2c04:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   a2c06:	4ba7      	ldr	r3, [pc, #668]	; (a2ea4 <Cl_Rinse_Controller+0xbdc>)
   a2c08:	781b      	ldrb	r3, [r3, #0]
   a2c0a:	b2db      	uxtb	r3, r3
   a2c0c:	2b1e      	cmp	r3, #30
   a2c0e:	d905      	bls.n	a2c1c <Cl_Rinse_Controller+0x954>
							{
								sv_cntrl_poweroffheater();
   a2c10:	4ba5      	ldr	r3, [pc, #660]	; (a2ea8 <Cl_Rinse_Controller+0xbe0>)
   a2c12:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a2c14:	4ba5      	ldr	r3, [pc, #660]	; (a2eac <Cl_Rinse_Controller+0xbe4>)
   a2c16:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   a2c18:	4ba5      	ldr	r3, [pc, #660]	; (a2eb0 <Cl_Rinse_Controller+0xbe8>)
   a2c1a:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   a2c1c:	4ba5      	ldr	r3, [pc, #660]	; (a2eb4 <Cl_Rinse_Controller+0xbec>)
   a2c1e:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   a2c20:	4ba5      	ldr	r3, [pc, #660]	; (a2eb8 <Cl_Rinse_Controller+0xbf0>)
   a2c22:	4798      	blx	r3
   a2c24:	4603      	mov	r3, r0
   a2c26:	2b00      	cmp	r3, #0
   a2c28:	f040 8130 	bne.w	a2e8c <Cl_Rinse_Controller+0xbc4>
							{
								sv_cntrl_setgreenalarm();
   a2c2c:	4ba3      	ldr	r3, [pc, #652]	; (a2ebc <Cl_Rinse_Controller+0xbf4>)
   a2c2e:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   a2c30:	2001      	movs	r0, #1
   a2c32:	4ba3      	ldr	r3, [pc, #652]	; (a2ec0 <Cl_Rinse_Controller+0xbf8>)
   a2c34:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   a2c36:	2002      	movs	r0, #2
   a2c38:	4ba1      	ldr	r3, [pc, #644]	; (a2ec0 <Cl_Rinse_Controller+0xbf8>)
   a2c3a:	4798      	blx	r3
							//	sv_prop_stopopenfill();
							//	sv_prop_startpropeo_aligning();
							//	sv_cntrl_deactivate_valve(VALVE_ID2);
							//	sv_cntrl_deactivate_valve(VALVE_ID3);
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   a2c3c:	4ba1      	ldr	r3, [pc, #644]	; (a2ec4 <Cl_Rinse_Controller+0xbfc>)
   a2c3e:	4798      	blx	r3
   a2c40:	4603      	mov	r3, r0
   a2c42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a2c46:	2100      	movs	r1, #0
   a2c48:	200c      	movs	r0, #12
   a2c4a:	4b9f      	ldr	r3, [pc, #636]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c4c:	4798      	blx	r3
   a2c4e:	4603      	mov	r3, r0
   a2c50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a2c54:	2100      	movs	r1, #0
   a2c56:	200d      	movs	r0, #13
   a2c58:	4b9b      	ldr	r3, [pc, #620]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c5a:	4798      	blx	r3
   a2c5c:	4603      	mov	r3, r0
   a2c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a2c62:	2100      	movs	r1, #0
   a2c64:	200e      	movs	r0, #14
   a2c66:	4b98      	ldr	r3, [pc, #608]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c68:	4798      	blx	r3
   a2c6a:	4603      	mov	r3, r0
   a2c6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a2c70:	2100      	movs	r1, #0
   a2c72:	2029      	movs	r0, #41	; 0x29
   a2c74:	4b94      	ldr	r3, [pc, #592]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c76:	4798      	blx	r3
   a2c78:	4603      	mov	r3, r0
   a2c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a2c7e:	2100      	movs	r1, #0
   a2c80:	202b      	movs	r0, #43	; 0x2b
   a2c82:	4b91      	ldr	r3, [pc, #580]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c84:	4798      	blx	r3
   a2c86:	4603      	mov	r3, r0
   a2c88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a2c8c:	2100      	movs	r1, #0
   a2c8e:	2003      	movs	r0, #3
   a2c90:	4b8d      	ldr	r3, [pc, #564]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2c92:	4798      	blx	r3
   a2c94:	4603      	mov	r3, r0
   a2c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a2c9a:	2100      	movs	r1, #0
   a2c9c:	2004      	movs	r0, #4
   a2c9e:	4b8a      	ldr	r3, [pc, #552]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2ca0:	4798      	blx	r3
   a2ca2:	4603      	mov	r3, r0
   a2ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a2ca8:	4b88      	ldr	r3, [pc, #544]	; (a2ecc <Cl_Rinse_Controller+0xc04>)
   a2caa:	2209      	movs	r2, #9
   a2cac:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   a2cae:	f107 0322 	add.w	r3, r7, #34	; 0x22
   a2cb2:	4619      	mov	r1, r3
   a2cb4:	2012      	movs	r0, #18
   a2cb6:	4b86      	ldr	r3, [pc, #536]	; (a2ed0 <Cl_Rinse_Controller+0xc08>)
   a2cb8:	4798      	blx	r3
// 												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 												res_temp_lookuptable(cal_data);
// 												 uint16_t temp = res_temp_value /10;
// 												
// 					//							temp = temp - 25 +12 + 2.5;
										uint16_t temp = sensordata /10;
   a2cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a2cbc:	4a85      	ldr	r2, [pc, #532]	; (a2ed4 <Cl_Rinse_Controller+0xc0c>)
   a2cbe:	fba2 2303 	umull	r2, r3, r2, r3
   a2cc2:	08db      	lsrs	r3, r3, #3
   a2cc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   a2cc8:	2300      	movs	r3, #0
   a2cca:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   a2ccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   a2cd0:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   a2cd2:	230b      	movs	r3, #11
   a2cd4:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   a2cd6:	f107 031c 	add.w	r3, r7, #28
   a2cda:	2204      	movs	r2, #4
   a2cdc:	4619      	mov	r1, r3
   a2cde:	2037      	movs	r0, #55	; 0x37
   a2ce0:	4b7d      	ldr	r3, [pc, #500]	; (a2ed8 <Cl_Rinse_Controller+0xc10>)
   a2ce2:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a2ce4:	e0d2      	b.n	a2e8c <Cl_Rinse_Controller+0xbc4>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   a2ce6:	4b7d      	ldr	r3, [pc, #500]	; (a2edc <Cl_Rinse_Controller+0xc14>)
   a2ce8:	681b      	ldr	r3, [r3, #0]
   a2cea:	3301      	adds	r3, #1
   a2cec:	4a7b      	ldr	r2, [pc, #492]	; (a2edc <Cl_Rinse_Controller+0xc14>)
   a2cee:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   a2cf0:	4b7b      	ldr	r3, [pc, #492]	; (a2ee0 <Cl_Rinse_Controller+0xc18>)
   a2cf2:	681b      	ldr	r3, [r3, #0]
   a2cf4:	3301      	adds	r3, #1
   a2cf6:	4a7a      	ldr	r2, [pc, #488]	; (a2ee0 <Cl_Rinse_Controller+0xc18>)
   a2cf8:	6013      	str	r3, [r2, #0]
						break;
   a2cfa:	e0d1      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   a2cfc:	4b79      	ldr	r3, [pc, #484]	; (a2ee4 <Cl_Rinse_Controller+0xc1c>)
   a2cfe:	4798      	blx	r3
						break;
   a2d00:	e0ce      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a2d02:	4b79      	ldr	r3, [pc, #484]	; (a2ee8 <Cl_Rinse_Controller+0xc20>)
   a2d04:	4798      	blx	r3
   a2d06:	4603      	mov	r3, r0
   a2d08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   a2d0c:	e0c8      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a2d0e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   a2d12:	4619      	mov	r1, r3
   a2d14:	203c      	movs	r0, #60	; 0x3c
   a2d16:	4b75      	ldr	r3, [pc, #468]	; (a2eec <Cl_Rinse_Controller+0xc24>)
   a2d18:	4798      	blx	r3
							if(alarmstatus1)
   a2d1a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   a2d1e:	2b00      	cmp	r3, #0
   a2d20:	d002      	beq.n	a2d28 <Cl_Rinse_Controller+0xa60>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   a2d22:	4b73      	ldr	r3, [pc, #460]	; (a2ef0 <Cl_Rinse_Controller+0xc28>)
   a2d24:	2201      	movs	r2, #1
   a2d26:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   a2d28:	f107 0339 	add.w	r3, r7, #57	; 0x39
   a2d2c:	4619      	mov	r1, r3
   a2d2e:	2013      	movs	r0, #19
   a2d30:	4b6e      	ldr	r3, [pc, #440]	; (a2eec <Cl_Rinse_Controller+0xc24>)
   a2d32:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a2d34:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a2d38:	4619      	mov	r1, r3
   a2d3a:	200c      	movs	r0, #12
   a2d3c:	4b6b      	ldr	r3, [pc, #428]	; (a2eec <Cl_Rinse_Controller+0xc24>)
   a2d3e:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   a2d40:	e0ae      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   a2d42:	4b6c      	ldr	r3, [pc, #432]	; (a2ef4 <Cl_Rinse_Controller+0xc2c>)
   a2d44:	2201      	movs	r2, #1
   a2d46:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   a2d48:	4b6b      	ldr	r3, [pc, #428]	; (a2ef8 <Cl_Rinse_Controller+0xc30>)
   a2d4a:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2d4c:	4b6b      	ldr	r3, [pc, #428]	; (a2efc <Cl_Rinse_Controller+0xc34>)
   a2d4e:	2200      	movs	r2, #0
   a2d50:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a2d52:	2100      	movs	r1, #0
   a2d54:	2001      	movs	r0, #1
   a2d56:	4b6a      	ldr	r3, [pc, #424]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2d58:	4798      	blx	r3
						}
						
						break;
   a2d5a:	e0a1      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   a2d5c:	4b65      	ldr	r3, [pc, #404]	; (a2ef4 <Cl_Rinse_Controller+0xc2c>)
   a2d5e:	2200      	movs	r2, #0
   a2d60:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a2d62:	2100      	movs	r1, #0
   a2d64:	2002      	movs	r0, #2
   a2d66:	4b66      	ldr	r3, [pc, #408]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2d68:	4798      	blx	r3
						break;
   a2d6a:	e099      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a2d6c:	4b65      	ldr	r3, [pc, #404]	; (a2f04 <Cl_Rinse_Controller+0xc3c>)
   a2d6e:	781b      	ldrb	r3, [r3, #0]
   a2d70:	2b01      	cmp	r3, #1
   a2d72:	f000 808e 	beq.w	a2e92 <Cl_Rinse_Controller+0xbca>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a2d76:	2206      	movs	r2, #6
   a2d78:	4963      	ldr	r1, [pc, #396]	; (a2f08 <Cl_Rinse_Controller+0xc40>)
   a2d7a:	2018      	movs	r0, #24
   a2d7c:	4b56      	ldr	r3, [pc, #344]	; (a2ed8 <Cl_Rinse_Controller+0xc10>)
   a2d7e:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a2d80:	2100      	movs	r1, #0
   a2d82:	2005      	movs	r0, #5
   a2d84:	4b5e      	ldr	r3, [pc, #376]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2d86:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2d88:	4b5c      	ldr	r3, [pc, #368]	; (a2efc <Cl_Rinse_Controller+0xc34>)
   a2d8a:	2200      	movs	r2, #0
   a2d8c:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a2d8e:	e080      	b.n	a2e92 <Cl_Rinse_Controller+0xbca>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a2d90:	2206      	movs	r2, #6
   a2d92:	495e      	ldr	r1, [pc, #376]	; (a2f0c <Cl_Rinse_Controller+0xc44>)
   a2d94:	2018      	movs	r0, #24
   a2d96:	4b50      	ldr	r3, [pc, #320]	; (a2ed8 <Cl_Rinse_Controller+0xc10>)
   a2d98:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a2d9a:	2100      	movs	r1, #0
   a2d9c:	2006      	movs	r0, #6
   a2d9e:	4b58      	ldr	r3, [pc, #352]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2da0:	4798      	blx	r3

						
						break;
   a2da2:	e07d      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   a2da4:	2100      	movs	r1, #0
   a2da6:	2002      	movs	r0, #2
   a2da8:	4b59      	ldr	r3, [pc, #356]	; (a2f10 <Cl_Rinse_Controller+0xc48>)
   a2daa:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   a2dac:	4b53      	ldr	r3, [pc, #332]	; (a2efc <Cl_Rinse_Controller+0xc34>)
   a2dae:	2201      	movs	r2, #1
   a2db0:	709a      	strb	r2, [r3, #2]
						break;
   a2db2:	e075      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   a2db4:	2100      	movs	r1, #0
   a2db6:	2004      	movs	r0, #4
   a2db8:	4b55      	ldr	r3, [pc, #340]	; (a2f10 <Cl_Rinse_Controller+0xc48>)
   a2dba:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   a2dbc:	4b4f      	ldr	r3, [pc, #316]	; (a2efc <Cl_Rinse_Controller+0xc34>)
   a2dbe:	2200      	movs	r2, #0
   a2dc0:	709a      	strb	r2, [r3, #2]
						break;
   a2dc2:	e06d      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a2dc4:	4b41      	ldr	r3, [pc, #260]	; (a2ecc <Cl_Rinse_Controller+0xc04>)
   a2dc6:	781b      	ldrb	r3, [r3, #0]
   a2dc8:	2b09      	cmp	r3, #9
   a2dca:	d065      	beq.n	a2e98 <Cl_Rinse_Controller+0xbd0>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a2dcc:	2100      	movs	r1, #0
   a2dce:	200c      	movs	r0, #12
   a2dd0:	4b3d      	ldr	r3, [pc, #244]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2dd2:	4798      	blx	r3
   a2dd4:	4603      	mov	r3, r0
   a2dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a2dda:	2100      	movs	r1, #0
   a2ddc:	200d      	movs	r0, #13
   a2dde:	4b3a      	ldr	r3, [pc, #232]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2de0:	4798      	blx	r3
   a2de2:	4603      	mov	r3, r0
   a2de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a2de8:	2100      	movs	r1, #0
   a2dea:	200e      	movs	r0, #14
   a2dec:	4b36      	ldr	r3, [pc, #216]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2dee:	4798      	blx	r3
   a2df0:	4603      	mov	r3, r0
   a2df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a2df6:	2100      	movs	r1, #0
   a2df8:	2029      	movs	r0, #41	; 0x29
   a2dfa:	4b33      	ldr	r3, [pc, #204]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2dfc:	4798      	blx	r3
   a2dfe:	4603      	mov	r3, r0
   a2e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a2e04:	2100      	movs	r1, #0
   a2e06:	202b      	movs	r0, #43	; 0x2b
   a2e08:	4b2f      	ldr	r3, [pc, #188]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2e0a:	4798      	blx	r3
   a2e0c:	4603      	mov	r3, r0
   a2e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a2e12:	2100      	movs	r1, #0
   a2e14:	2003      	movs	r0, #3
   a2e16:	4b2c      	ldr	r3, [pc, #176]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2e18:	4798      	blx	r3
   a2e1a:	4603      	mov	r3, r0
   a2e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a2e20:	2100      	movs	r1, #0
   a2e22:	2004      	movs	r0, #4
   a2e24:	4b28      	ldr	r3, [pc, #160]	; (a2ec8 <Cl_Rinse_Controller+0xc00>)
   a2e26:	4798      	blx	r3
   a2e28:	4603      	mov	r3, r0
   a2e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a2e2e:	4b27      	ldr	r3, [pc, #156]	; (a2ecc <Cl_Rinse_Controller+0xc04>)
   a2e30:	2209      	movs	r2, #9
   a2e32:	701a      	strb	r2, [r3, #0]
						}
						break;
   a2e34:	e030      	b.n	a2e98 <Cl_Rinse_Controller+0xbd0>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   a2e36:	2100      	movs	r1, #0
   a2e38:	200c      	movs	r0, #12
   a2e3a:	4b31      	ldr	r3, [pc, #196]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2e3c:	4798      	blx	r3
						break;
   a2e3e:	e02f      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   a2e40:	2100      	movs	r1, #0
   a2e42:	200d      	movs	r0, #13
   a2e44:	4b2e      	ldr	r3, [pc, #184]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2e46:	4798      	blx	r3
						break;
   a2e48:	e02a      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a2e4a:	4b32      	ldr	r3, [pc, #200]	; (a2f14 <Cl_Rinse_Controller+0xc4c>)
   a2e4c:	7e1b      	ldrb	r3, [r3, #24]
   a2e4e:	2b00      	cmp	r3, #0
   a2e50:	d025      	beq.n	a2e9e <Cl_Rinse_Controller+0xbd6>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a2e52:	4b30      	ldr	r3, [pc, #192]	; (a2f14 <Cl_Rinse_Controller+0xc4c>)
   a2e54:	791b      	ldrb	r3, [r3, #4]
   a2e56:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a2e58:	4b2e      	ldr	r3, [pc, #184]	; (a2f14 <Cl_Rinse_Controller+0xc4c>)
   a2e5a:	791b      	ldrb	r3, [r3, #4]
   a2e5c:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a2e5e:	4b2d      	ldr	r3, [pc, #180]	; (a2f14 <Cl_Rinse_Controller+0xc4c>)
   a2e60:	791b      	ldrb	r3, [r3, #4]
   a2e62:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a2e64:	4b2b      	ldr	r3, [pc, #172]	; (a2f14 <Cl_Rinse_Controller+0xc4c>)
   a2e66:	791b      	ldrb	r3, [r3, #4]
   a2e68:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a2e6a:	8b3b      	ldrh	r3, [r7, #24]
   a2e6c:	b21b      	sxth	r3, r3
   a2e6e:	4619      	mov	r1, r3
   a2e70:	200e      	movs	r0, #14
   a2e72:	4b23      	ldr	r3, [pc, #140]	; (a2f00 <Cl_Rinse_Controller+0xc38>)
   a2e74:	4798      	blx	r3
						}
						break;
   a2e76:	e012      	b.n	a2e9e <Cl_Rinse_Controller+0xbd6>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   a2e78:	4b27      	ldr	r3, [pc, #156]	; (a2f18 <Cl_Rinse_Controller+0xc50>)
   a2e7a:	2202      	movs	r2, #2
   a2e7c:	701a      	strb	r2, [r3, #0]
						break;
   a2e7e:	e00f      	b.n	a2ea0 <Cl_Rinse_Controller+0xbd8>
										cl_50ms_timer =0;
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a2e80:	bf00      	nop
   a2e82:	f000 bc51 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a2e86:	bf00      	nop
   a2e88:	f000 bc4e 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
										cl_tdata.bytearray[2] = 11;
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a2e8c:	bf00      	nop
   a2e8e:	f000 bc4b 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						}
						
						break;
   a2e92:	bf00      	nop
   a2e94:	f000 bc48 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
						}
						break;
   a2e98:	bf00      	nop
   a2e9a:	f000 bc45 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
						break;
   a2e9e:	bf00      	nop
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a2ea0:	f000 bc42 	b.w	a3728 <Cl_Rinse_Controller+0x1460>
   a2ea4:	20071cb2 	.word	0x20071cb2
   a2ea8:	00099a95 	.word	0x00099a95
   a2eac:	00099c39 	.word	0x00099c39
   a2eb0:	00099c55 	.word	0x00099c55
   a2eb4:	000a3d79 	.word	0x000a3d79
   a2eb8:	000a3b09 	.word	0x000a3b09
   a2ebc:	00099d29 	.word	0x00099d29
   a2ec0:	00099a45 	.word	0x00099a45
   a2ec4:	000a3ba1 	.word	0x000a3ba1
   a2ec8:	00082de1 	.word	0x00082de1
   a2ecc:	20071c8e 	.word	0x20071c8e
   a2ed0:	0008e6a1 	.word	0x0008e6a1
   a2ed4:	cccccccd 	.word	0xcccccccd
   a2ed8:	0009b805 	.word	0x0009b805
   a2edc:	20071c98 	.word	0x20071c98
   a2ee0:	20071ca4 	.word	0x20071ca4
   a2ee4:	000a4999 	.word	0x000a4999
   a2ee8:	000a3d51 	.word	0x000a3d51
   a2eec:	00082fbd 	.word	0x00082fbd
   a2ef0:	20071cae 	.word	0x20071cae
   a2ef4:	20071c88 	.word	0x20071c88
   a2ef8:	00088e5d 	.word	0x00088e5d
   a2efc:	20070cbc 	.word	0x20070cbc
   a2f00:	000883f1 	.word	0x000883f1
   a2f04:	20071984 	.word	0x20071984
   a2f08:	000a8a70 	.word	0x000a8a70
   a2f0c:	000a8a78 	.word	0x000a8a78
   a2f10:	0009316d 	.word	0x0009316d
   a2f14:	200723e8 	.word	0x200723e8
   a2f18:	20071c8f 	.word	0x20071c8f
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a2f1c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a2f20:	3b01      	subs	r3, #1
   a2f22:	2b1d      	cmp	r3, #29
   a2f24:	f200 815f 	bhi.w	a31e6 <Cl_Rinse_Controller+0xf1e>
   a2f28:	a201      	add	r2, pc, #4	; (adr r2, a2f30 <Cl_Rinse_Controller+0xc68>)
   a2f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2f2e:	bf00      	nop
   a2f30:	000a314f 	.word	0x000a314f
   a2f34:	000a2fa9 	.word	0x000a2fa9
   a2f38:	000a31e7 	.word	0x000a31e7
   a2f3c:	000a2ff9 	.word	0x000a2ff9
   a2f40:	000a300b 	.word	0x000a300b
   a2f44:	000a301d 	.word	0x000a301d
   a2f48:	000a31e7 	.word	0x000a31e7
   a2f4c:	000a31e7 	.word	0x000a31e7
   a2f50:	000a31e7 	.word	0x000a31e7
   a2f54:	000a31e7 	.word	0x000a31e7
   a2f58:	000a31e7 	.word	0x000a31e7
   a2f5c:	000a31e7 	.word	0x000a31e7
   a2f60:	000a31e7 	.word	0x000a31e7
   a2f64:	000a31e7 	.word	0x000a31e7
   a2f68:	000a31e7 	.word	0x000a31e7
   a2f6c:	000a31e7 	.word	0x000a31e7
   a2f70:	000a31e7 	.word	0x000a31e7
   a2f74:	000a30b9 	.word	0x000a30b9
   a2f78:	000a31e7 	.word	0x000a31e7
   a2f7c:	000a31e7 	.word	0x000a31e7
   a2f80:	000a31e7 	.word	0x000a31e7
   a2f84:	000a30ad 	.word	0x000a30ad
   a2f88:	000a3023 	.word	0x000a3023
   a2f8c:	000a31e7 	.word	0x000a31e7
   a2f90:	000a31e7 	.word	0x000a31e7
   a2f94:	000a31e7 	.word	0x000a31e7
   a2f98:	000a31e7 	.word	0x000a31e7
   a2f9c:	000a31e7 	.word	0x000a31e7
   a2fa0:	000a31e7 	.word	0x000a31e7
   a2fa4:	000a31b9 	.word	0x000a31b9
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a2fa8:	4bb8      	ldr	r3, [pc, #736]	; (a328c <Cl_Rinse_Controller+0xfc4>)
   a2faa:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a2fac:	2308      	movs	r3, #8
   a2fae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a2fb2:	2301      	movs	r3, #1
   a2fb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a2fb8:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a2fbc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a2fc0:	2201      	movs	r2, #1
   a2fc2:	4618      	mov	r0, r3
   a2fc4:	4bb2      	ldr	r3, [pc, #712]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a2fc6:	4798      	blx	r3
   a2fc8:	4603      	mov	r3, r0
   a2fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a2fce:	2309      	movs	r3, #9
   a2fd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a2fd4:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a2fd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a2fdc:	2200      	movs	r2, #0
   a2fde:	4618      	mov	r0, r3
   a2fe0:	4bab      	ldr	r3, [pc, #684]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a2fe2:	4798      	blx	r3
   a2fe4:	4603      	mov	r3, r0
   a2fe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a2fea:	4baa      	ldr	r3, [pc, #680]	; (a3294 <Cl_Rinse_Controller+0xfcc>)
   a2fec:	2203      	movs	r2, #3
   a2fee:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2ff0:	4ba9      	ldr	r3, [pc, #676]	; (a3298 <Cl_Rinse_Controller+0xfd0>)
   a2ff2:	2201      	movs	r2, #1
   a2ff4:	701a      	strb	r2, [r3, #0]
					break;
   a2ff6:	e0fb      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a2ff8:	4ba4      	ldr	r3, [pc, #656]	; (a328c <Cl_Rinse_Controller+0xfc4>)
   a2ffa:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a2ffc:	4ba5      	ldr	r3, [pc, #660]	; (a3294 <Cl_Rinse_Controller+0xfcc>)
   a2ffe:	2204      	movs	r2, #4
   a3000:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3002:	4ba5      	ldr	r3, [pc, #660]	; (a3298 <Cl_Rinse_Controller+0xfd0>)
   a3004:	2201      	movs	r2, #1
   a3006:	701a      	strb	r2, [r3, #0]
					break;
   a3008:	e0f2      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a300a:	4ba0      	ldr	r3, [pc, #640]	; (a328c <Cl_Rinse_Controller+0xfc4>)
   a300c:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a300e:	4ba1      	ldr	r3, [pc, #644]	; (a3294 <Cl_Rinse_Controller+0xfcc>)
   a3010:	2205      	movs	r2, #5
   a3012:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3014:	4ba0      	ldr	r3, [pc, #640]	; (a3298 <Cl_Rinse_Controller+0xfd0>)
   a3016:	2201      	movs	r2, #1
   a3018:	701a      	strb	r2, [r3, #0]
					break;
   a301a:	e0e9      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a301c:	4b9f      	ldr	r3, [pc, #636]	; (a329c <Cl_Rinse_Controller+0xfd4>)
   a301e:	4798      	blx	r3
					break;
   a3020:	e0e6      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a3022:	4b9f      	ldr	r3, [pc, #636]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a3024:	7e1b      	ldrb	r3, [r3, #24]
   a3026:	2b00      	cmp	r3, #0
   a3028:	f000 80df 	beq.w	a31ea <Cl_Rinse_Controller+0xf22>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a302c:	4b9c      	ldr	r3, [pc, #624]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a302e:	791b      	ldrb	r3, [r3, #4]
   a3030:	2b01      	cmp	r3, #1
   a3032:	d002      	beq.n	a303a <Cl_Rinse_Controller+0xd72>
   a3034:	2b21      	cmp	r3, #33	; 0x21
   a3036:	d01c      	beq.n	a3072 <Cl_Rinse_Controller+0xdaa>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   a3038:	e037      	b.n	a30aa <Cl_Rinse_Controller+0xde2>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a303a:	2316      	movs	r3, #22
   a303c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a3040:	2301      	movs	r3, #1
   a3042:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a3046:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a304a:	3301      	adds	r3, #1
   a304c:	4619      	mov	r1, r3
   a304e:	2001      	movs	r0, #1
   a3050:	4b94      	ldr	r3, [pc, #592]	; (a32a4 <Cl_Rinse_Controller+0xfdc>)
   a3052:	4798      	blx	r3
   a3054:	4603      	mov	r3, r0
   a3056:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a305a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a305e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3062:	2202      	movs	r2, #2
   a3064:	4618      	mov	r0, r3
   a3066:	4b8a      	ldr	r3, [pc, #552]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a3068:	4798      	blx	r3
   a306a:	4603      	mov	r3, r0
   a306c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
							break;
   a3070:	e01b      	b.n	a30aa <Cl_Rinse_Controller+0xde2>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a3072:	2316      	movs	r3, #22
   a3074:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a3078:	2323      	movs	r3, #35	; 0x23
   a307a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a307e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3082:	3301      	adds	r3, #1
   a3084:	4619      	mov	r1, r3
   a3086:	2028      	movs	r0, #40	; 0x28
   a3088:	4b86      	ldr	r3, [pc, #536]	; (a32a4 <Cl_Rinse_Controller+0xfdc>)
   a308a:	4798      	blx	r3
   a308c:	4603      	mov	r3, r0
   a308e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a3092:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3096:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a309a:	2202      	movs	r2, #2
   a309c:	4618      	mov	r0, r3
   a309e:	4b7c      	ldr	r3, [pc, #496]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a30a0:	4798      	blx	r3
   a30a2:	4603      	mov	r3, r0
   a30a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a30a8:	bf00      	nop
							default:
							break;
						}
					}
					break;
   a30aa:	e09e      	b.n	a31ea <Cl_Rinse_Controller+0xf22>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a30ac:	4b7e      	ldr	r3, [pc, #504]	; (a32a8 <Cl_Rinse_Controller+0xfe0>)
   a30ae:	4798      	blx	r3
   a30b0:	4603      	mov	r3, r0
   a30b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a30b6:	e09b      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a30b8:	4b7c      	ldr	r3, [pc, #496]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a30ba:	2200      	movs	r2, #0
   a30bc:	801a      	strh	r2, [r3, #0]
   a30be:	e041      	b.n	a3144 <Cl_Rinse_Controller+0xe7c>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a30c0:	4b7a      	ldr	r3, [pc, #488]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a30c2:	881b      	ldrh	r3, [r3, #0]
   a30c4:	461a      	mov	r2, r3
   a30c6:	4b7a      	ldr	r3, [pc, #488]	; (a32b0 <Cl_Rinse_Controller+0xfe8>)
   a30c8:	f813 0032 	ldrb.w	r0, [r3, r2, lsl #3]
   a30cc:	4b77      	ldr	r3, [pc, #476]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a30ce:	881b      	ldrh	r3, [r3, #0]
   a30d0:	00db      	lsls	r3, r3, #3
   a30d2:	4a77      	ldr	r2, [pc, #476]	; (a32b0 <Cl_Rinse_Controller+0xfe8>)
   a30d4:	4413      	add	r3, r2
   a30d6:	3302      	adds	r3, #2
   a30d8:	4619      	mov	r1, r3
   a30da:	4b76      	ldr	r3, [pc, #472]	; (a32b4 <Cl_Rinse_Controller+0xfec>)
   a30dc:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a30de:	4b73      	ldr	r3, [pc, #460]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a30e0:	881b      	ldrh	r3, [r3, #0]
   a30e2:	4a73      	ldr	r2, [pc, #460]	; (a32b0 <Cl_Rinse_Controller+0xfe8>)
   a30e4:	00db      	lsls	r3, r3, #3
   a30e6:	4413      	add	r3, r2
   a30e8:	789b      	ldrb	r3, [r3, #2]
   a30ea:	2b00      	cmp	r3, #0
   a30ec:	d00e      	beq.n	a310c <Cl_Rinse_Controller+0xe44>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a30ee:	2208      	movs	r2, #8
   a30f0:	4971      	ldr	r1, [pc, #452]	; (a32b8 <Cl_Rinse_Controller+0xff0>)
   a30f2:	2018      	movs	r0, #24
   a30f4:	4b66      	ldr	r3, [pc, #408]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a30f6:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a30f8:	4b68      	ldr	r3, [pc, #416]	; (a329c <Cl_Rinse_Controller+0xfd4>)
   a30fa:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a30fc:	4b65      	ldr	r3, [pc, #404]	; (a3294 <Cl_Rinse_Controller+0xfcc>)
   a30fe:	2206      	movs	r2, #6
   a3100:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a3102:	4b6a      	ldr	r3, [pc, #424]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a3104:	2200      	movs	r2, #0
   a3106:	801a      	strh	r2, [r3, #0]
										break;	
   a3108:	bf00      	nop
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a310a:	e071      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
										Cl_Rinse_StopRinse();
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
										tempcount=0;
										break;	
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a310c:	4b67      	ldr	r3, [pc, #412]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a310e:	881b      	ldrh	r3, [r3, #0]
   a3110:	2b19      	cmp	r3, #25
   a3112:	d111      	bne.n	a3138 <Cl_Rinse_Controller+0xe70>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a3114:	4b65      	ldr	r3, [pc, #404]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a3116:	881b      	ldrh	r3, [r3, #0]
   a3118:	4a65      	ldr	r2, [pc, #404]	; (a32b0 <Cl_Rinse_Controller+0xfe8>)
   a311a:	00db      	lsls	r3, r3, #3
   a311c:	4413      	add	r3, r2
   a311e:	789b      	ldrb	r3, [r3, #2]
   a3120:	f083 0301 	eor.w	r3, r3, #1
   a3124:	b2db      	uxtb	r3, r3
   a3126:	2b00      	cmp	r3, #0
   a3128:	d006      	beq.n	a3138 <Cl_Rinse_Controller+0xe70>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a312a:	2208      	movs	r2, #8
   a312c:	4963      	ldr	r1, [pc, #396]	; (a32bc <Cl_Rinse_Controller+0xff4>)
   a312e:	2018      	movs	r0, #24
   a3130:	4b57      	ldr	r3, [pc, #348]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a3132:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a3134:	4b62      	ldr	r3, [pc, #392]	; (a32c0 <Cl_Rinse_Controller+0xff8>)
   a3136:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a3138:	4b5c      	ldr	r3, [pc, #368]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a313a:	881b      	ldrh	r3, [r3, #0]
   a313c:	3301      	adds	r3, #1
   a313e:	b29a      	uxth	r2, r3
   a3140:	4b5a      	ldr	r3, [pc, #360]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a3142:	801a      	strh	r2, [r3, #0]
   a3144:	4b59      	ldr	r3, [pc, #356]	; (a32ac <Cl_Rinse_Controller+0xfe4>)
   a3146:	881b      	ldrh	r3, [r3, #0]
   a3148:	2b19      	cmp	r3, #25
   a314a:	d9b9      	bls.n	a30c0 <Cl_Rinse_Controller+0xdf8>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a314c:	e050      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVENT_RINSE_CLR_ALARM:
										sv_cntrl_resetyellowalarm();
   a314e:	4b5d      	ldr	r3, [pc, #372]	; (a32c4 <Cl_Rinse_Controller+0xffc>)
   a3150:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a3152:	4b5d      	ldr	r3, [pc, #372]	; (a32c8 <Cl_Rinse_Controller+0x1000>)
   a3154:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a3156:	4b5d      	ldr	r3, [pc, #372]	; (a32cc <Cl_Rinse_Controller+0x1004>)
   a3158:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a315a:	4b59      	ldr	r3, [pc, #356]	; (a32c0 <Cl_Rinse_Controller+0xff8>)
   a315c:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   a315e:	4b4b      	ldr	r3, [pc, #300]	; (a328c <Cl_Rinse_Controller+0xfc4>)
   a3160:	4798      	blx	r3
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a3162:	2308      	movs	r3, #8
   a3164:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a3168:	2301      	movs	r3, #1
   a316a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a316e:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a3172:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3176:	2201      	movs	r2, #1
   a3178:	4618      	mov	r0, r3
   a317a:	4b45      	ldr	r3, [pc, #276]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a317c:	4798      	blx	r3
   a317e:	4603      	mov	r3, r0
   a3180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   a3184:	2309      	movs	r3, #9
   a3186:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a318a:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a318e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3192:	2200      	movs	r2, #0
   a3194:	4618      	mov	r0, r3
   a3196:	4b3e      	ldr	r3, [pc, #248]	; (a3290 <Cl_Rinse_Controller+0xfc8>)
   a3198:	4798      	blx	r3
   a319a:	4603      	mov	r3, r0
   a319c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a31a0:	4b4b      	ldr	r3, [pc, #300]	; (a32d0 <Cl_Rinse_Controller+0x1008>)
   a31a2:	4798      	blx	r3
   a31a4:	4603      	mov	r3, r0
   a31a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a31aa:	4b3a      	ldr	r3, [pc, #232]	; (a3294 <Cl_Rinse_Controller+0xfcc>)
   a31ac:	2203      	movs	r2, #3
   a31ae:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a31b0:	4b39      	ldr	r3, [pc, #228]	; (a3298 <Cl_Rinse_Controller+0xfd0>)
   a31b2:	2201      	movs	r2, #1
   a31b4:	701a      	strb	r2, [r3, #0]
						
						
						//alarm_flag = 1;
						break;
   a31b6:	e01b      	b.n	a31f0 <Cl_Rinse_Controller+0xf28>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a31b8:	4b39      	ldr	r3, [pc, #228]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a31ba:	7e1b      	ldrb	r3, [r3, #24]
   a31bc:	2b00      	cmp	r3, #0
   a31be:	d016      	beq.n	a31ee <Cl_Rinse_Controller+0xf26>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a31c0:	4b37      	ldr	r3, [pc, #220]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a31c2:	791b      	ldrb	r3, [r3, #4]
   a31c4:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a31c6:	4b36      	ldr	r3, [pc, #216]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a31c8:	791b      	ldrb	r3, [r3, #4]
   a31ca:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a31cc:	4b34      	ldr	r3, [pc, #208]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a31ce:	791b      	ldrb	r3, [r3, #4]
   a31d0:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a31d2:	4b33      	ldr	r3, [pc, #204]	; (a32a0 <Cl_Rinse_Controller+0xfd8>)
   a31d4:	791b      	ldrb	r3, [r3, #4]
   a31d6:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a31d8:	8abb      	ldrh	r3, [r7, #20]
   a31da:	b21b      	sxth	r3, r3
   a31dc:	4619      	mov	r1, r3
   a31de:	200e      	movs	r0, #14
   a31e0:	4b3c      	ldr	r3, [pc, #240]	; (a32d4 <Cl_Rinse_Controller+0x100c>)
   a31e2:	4798      	blx	r3
						}
					break;
   a31e4:	e003      	b.n	a31ee <Cl_Rinse_Controller+0xf26>
					default:break;
   a31e6:	bf00      	nop
   a31e8:	e29f      	b.n	a372a <Cl_Rinse_Controller+0x1462>
							break;
							default:
							break;
						}
					}
					break;
   a31ea:	bf00      	nop
   a31ec:	e29d      	b.n	a372a <Cl_Rinse_Controller+0x1462>
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
						}
					break;
   a31ee:	bf00      	nop
					default:break;
				}
		break;
   a31f0:	e29b      	b.n	a372a <Cl_Rinse_Controller+0x1462>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a31f2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a31f6:	3b02      	subs	r3, #2
   a31f8:	2b1e      	cmp	r3, #30
   a31fa:	f200 81e3 	bhi.w	a35c4 <Cl_Rinse_Controller+0x12fc>
   a31fe:	a201      	add	r2, pc, #4	; (adr r2, a3204 <Cl_Rinse_Controller+0xf3c>)
   a3200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3204:	000a32d9 	.word	0x000a32d9
   a3208:	000a35c5 	.word	0x000a35c5
   a320c:	000a3353 	.word	0x000a3353
   a3210:	000a336f 	.word	0x000a336f
   a3214:	000a35c5 	.word	0x000a35c5
   a3218:	000a35c5 	.word	0x000a35c5
   a321c:	000a35c5 	.word	0x000a35c5
   a3220:	000a35c5 	.word	0x000a35c5
   a3224:	000a35c5 	.word	0x000a35c5
   a3228:	000a35c5 	.word	0x000a35c5
   a322c:	000a35c5 	.word	0x000a35c5
   a3230:	000a35c5 	.word	0x000a35c5
   a3234:	000a35c5 	.word	0x000a35c5
   a3238:	000a35c5 	.word	0x000a35c5
   a323c:	000a35c5 	.word	0x000a35c5
   a3240:	000a35c5 	.word	0x000a35c5
   a3244:	000a35c5 	.word	0x000a35c5
   a3248:	000a35c5 	.word	0x000a35c5
   a324c:	000a35c5 	.word	0x000a35c5
   a3250:	000a35c5 	.word	0x000a35c5
   a3254:	000a3281 	.word	0x000a3281
   a3258:	000a338b 	.word	0x000a338b
   a325c:	000a35c5 	.word	0x000a35c5
   a3260:	000a3593 	.word	0x000a3593
   a3264:	000a352d 	.word	0x000a352d
   a3268:	000a3553 	.word	0x000a3553
   a326c:	000a35c5 	.word	0x000a35c5
   a3270:	000a35c5 	.word	0x000a35c5
   a3274:	000a3597 	.word	0x000a3597
   a3278:	000a355d 	.word	0x000a355d
   a327c:	000a357f 	.word	0x000a357f
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a3280:	4b09      	ldr	r3, [pc, #36]	; (a32a8 <Cl_Rinse_Controller+0xfe0>)
   a3282:	4798      	blx	r3
   a3284:	4603      	mov	r3, r0
   a3286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a328a:	e1a4      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
   a328c:	000a4505 	.word	0x000a4505
   a3290:	0009b805 	.word	0x0009b805
   a3294:	20071c8e 	.word	0x20071c8e
   a3298:	20071c8f 	.word	0x20071c8f
   a329c:	000a4999 	.word	0x000a4999
   a32a0:	200723e8 	.word	0x200723e8
   a32a4:	0009a331 	.word	0x0009a331
   a32a8:	000a3d51 	.word	0x000a3d51
   a32ac:	20072814 	.word	0x20072814
   a32b0:	20070cbc 	.word	0x20070cbc
   a32b4:	00082fbd 	.word	0x00082fbd
   a32b8:	000a8a84 	.word	0x000a8a84
   a32bc:	000a8a8c 	.word	0x000a8a8c
   a32c0:	000a3d79 	.word	0x000a3d79
   a32c4:	00099d65 	.word	0x00099d65
   a32c8:	00099d51 	.word	0x00099d51
   a32cc:	00099d8d 	.word	0x00099d8d
   a32d0:	000a3abd 	.word	0x000a3abd
   a32d4:	000883f1 	.word	0x000883f1
					
					case EVENT_START_RINSE:
					
					if(Cl_ConsoleRxMsg.msgready == true)
   a32d8:	4bbf      	ldr	r3, [pc, #764]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a32da:	7e1b      	ldrb	r3, [r3, #24]
   a32dc:	2b00      	cmp	r3, #0
   a32de:	d00b      	beq.n	a32f8 <Cl_Rinse_Controller+0x1030>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a32e0:	4bbd      	ldr	r3, [pc, #756]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a32e2:	791b      	ldrb	r3, [r3, #4]
   a32e4:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   a32e6:	7c3b      	ldrb	r3, [r7, #16]
   a32e8:	2b01      	cmp	r3, #1
   a32ea:	d005      	beq.n	a32f8 <Cl_Rinse_Controller+0x1030>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a32ec:	7c3b      	ldrb	r3, [r7, #16]
   a32ee:	2b02      	cmp	r3, #2
   a32f0:	d102      	bne.n	a32f8 <Cl_Rinse_Controller+0x1030>
					{
						hotrinse_flag = 1;
   a32f2:	4bba      	ldr	r3, [pc, #744]	; (a35dc <Cl_Rinse_Controller+0x1314>)
   a32f4:	2201      	movs	r2, #1
   a32f6:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a32f8:	4bb9      	ldr	r3, [pc, #740]	; (a35e0 <Cl_Rinse_Controller+0x1318>)
   a32fa:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a32fc:	2308      	movs	r3, #8
   a32fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a3302:	2301      	movs	r3, #1
   a3304:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a3308:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a330c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3310:	2201      	movs	r2, #1
   a3312:	4618      	mov	r0, r3
   a3314:	4bb3      	ldr	r3, [pc, #716]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a3316:	4798      	blx	r3
   a3318:	4603      	mov	r3, r0
   a331a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a331e:	2309      	movs	r3, #9
   a3320:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a3324:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   a3328:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a332c:	2200      	movs	r2, #0
   a332e:	4618      	mov	r0, r3
   a3330:	4bac      	ldr	r3, [pc, #688]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a3332:	4798      	blx	r3
   a3334:	4603      	mov	r3, r0
   a3336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a333a:	4bab      	ldr	r3, [pc, #684]	; (a35e8 <Cl_Rinse_Controller+0x1320>)
   a333c:	4798      	blx	r3
   a333e:	4603      	mov	r3, r0
   a3340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a3344:	4ba9      	ldr	r3, [pc, #676]	; (a35ec <Cl_Rinse_Controller+0x1324>)
   a3346:	2203      	movs	r2, #3
   a3348:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a334a:	4ba9      	ldr	r3, [pc, #676]	; (a35f0 <Cl_Rinse_Controller+0x1328>)
   a334c:	2201      	movs	r2, #1
   a334e:	701a      	strb	r2, [r3, #0]
					break;
   a3350:	e141      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a3352:	4ba3      	ldr	r3, [pc, #652]	; (a35e0 <Cl_Rinse_Controller+0x1318>)
   a3354:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a3356:	4ba4      	ldr	r3, [pc, #656]	; (a35e8 <Cl_Rinse_Controller+0x1320>)
   a3358:	4798      	blx	r3
   a335a:	4603      	mov	r3, r0
   a335c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a3360:	4ba2      	ldr	r3, [pc, #648]	; (a35ec <Cl_Rinse_Controller+0x1324>)
   a3362:	2204      	movs	r2, #4
   a3364:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3366:	4ba2      	ldr	r3, [pc, #648]	; (a35f0 <Cl_Rinse_Controller+0x1328>)
   a3368:	2201      	movs	r2, #1
   a336a:	701a      	strb	r2, [r3, #0]
					break;
   a336c:	e133      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a336e:	4b9c      	ldr	r3, [pc, #624]	; (a35e0 <Cl_Rinse_Controller+0x1318>)
   a3370:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a3372:	4b9d      	ldr	r3, [pc, #628]	; (a35e8 <Cl_Rinse_Controller+0x1320>)
   a3374:	4798      	blx	r3
   a3376:	4603      	mov	r3, r0
   a3378:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a337c:	4b9b      	ldr	r3, [pc, #620]	; (a35ec <Cl_Rinse_Controller+0x1324>)
   a337e:	2205      	movs	r2, #5
   a3380:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3382:	4b9b      	ldr	r3, [pc, #620]	; (a35f0 <Cl_Rinse_Controller+0x1328>)
   a3384:	2201      	movs	r2, #1
   a3386:	701a      	strb	r2, [r3, #0]
					break;
   a3388:	e125      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a338a:	4b93      	ldr	r3, [pc, #588]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a338c:	7e1b      	ldrb	r3, [r3, #24]
   a338e:	2b00      	cmp	r3, #0
   a3390:	f000 811a 	beq.w	a35c8 <Cl_Rinse_Controller+0x1300>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a3394:	4b90      	ldr	r3, [pc, #576]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a3396:	791b      	ldrb	r3, [r3, #4]
   a3398:	3b01      	subs	r3, #1
   a339a:	2b20      	cmp	r3, #32
   a339c:	f200 80c4 	bhi.w	a3528 <Cl_Rinse_Controller+0x1260>
   a33a0:	a201      	add	r2, pc, #4	; (adr r2, a33a8 <Cl_Rinse_Controller+0x10e0>)
   a33a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a33a6:	bf00      	nop
   a33a8:	000a342d 	.word	0x000a342d
   a33ac:	000a3465 	.word	0x000a3465
   a33b0:	000a3529 	.word	0x000a3529
   a33b4:	000a3529 	.word	0x000a3529
   a33b8:	000a3529 	.word	0x000a3529
   a33bc:	000a3529 	.word	0x000a3529
   a33c0:	000a3529 	.word	0x000a3529
   a33c4:	000a3529 	.word	0x000a3529
   a33c8:	000a3529 	.word	0x000a3529
   a33cc:	000a3529 	.word	0x000a3529
   a33d0:	000a3529 	.word	0x000a3529
   a33d4:	000a3529 	.word	0x000a3529
   a33d8:	000a3529 	.word	0x000a3529
   a33dc:	000a3529 	.word	0x000a3529
   a33e0:	000a3529 	.word	0x000a3529
   a33e4:	000a3529 	.word	0x000a3529
   a33e8:	000a3529 	.word	0x000a3529
   a33ec:	000a3529 	.word	0x000a3529
   a33f0:	000a3529 	.word	0x000a3529
   a33f4:	000a3529 	.word	0x000a3529
   a33f8:	000a3529 	.word	0x000a3529
   a33fc:	000a3529 	.word	0x000a3529
   a3400:	000a3529 	.word	0x000a3529
   a3404:	000a3529 	.word	0x000a3529
   a3408:	000a3529 	.word	0x000a3529
   a340c:	000a3529 	.word	0x000a3529
   a3410:	000a3529 	.word	0x000a3529
   a3414:	000a3529 	.word	0x000a3529
   a3418:	000a3529 	.word	0x000a3529
   a341c:	000a349d 	.word	0x000a349d
   a3420:	000a3529 	.word	0x000a3529
   a3424:	000a34c7 	.word	0x000a34c7
   a3428:	000a34f1 	.word	0x000a34f1
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a342c:	2316      	movs	r3, #22
   a342e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a3432:	2301      	movs	r3, #1
   a3434:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a3438:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a343c:	3301      	adds	r3, #1
   a343e:	4619      	mov	r1, r3
   a3440:	2001      	movs	r0, #1
   a3442:	4b6c      	ldr	r3, [pc, #432]	; (a35f4 <Cl_Rinse_Controller+0x132c>)
   a3444:	4798      	blx	r3
   a3446:	4603      	mov	r3, r0
   a3448:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a344c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3450:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3454:	2202      	movs	r2, #2
   a3456:	4618      	mov	r0, r3
   a3458:	4b62      	ldr	r3, [pc, #392]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a345a:	4798      	blx	r3
   a345c:	4603      	mov	r3, r0
   a345e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a3462:	e062      	b.n	a352a <Cl_Rinse_Controller+0x1262>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a3464:	2316      	movs	r3, #22
   a3466:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a346a:	2302      	movs	r3, #2
   a346c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a3470:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3474:	3301      	adds	r3, #1
   a3476:	4619      	mov	r1, r3
   a3478:	2002      	movs	r0, #2
   a347a:	4b5e      	ldr	r3, [pc, #376]	; (a35f4 <Cl_Rinse_Controller+0x132c>)
   a347c:	4798      	blx	r3
   a347e:	4603      	mov	r3, r0
   a3480:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a3484:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3488:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a348c:	2202      	movs	r2, #2
   a348e:	4618      	mov	r0, r3
   a3490:	4b54      	ldr	r3, [pc, #336]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a3492:	4798      	blx	r3
   a3494:	4603      	mov	r3, r0
   a3496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a349a:	e046      	b.n	a352a <Cl_Rinse_Controller+0x1262>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a349c:	2316      	movs	r3, #22
   a349e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   a34a2:	2320      	movs	r3, #32
   a34a4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a34a8:	2300      	movs	r3, #0
   a34aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a34ae:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a34b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a34b6:	2202      	movs	r2, #2
   a34b8:	4618      	mov	r0, r3
   a34ba:	4b4a      	ldr	r3, [pc, #296]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a34bc:	4798      	blx	r3
   a34be:	4603      	mov	r3, r0
   a34c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a34c4:	e031      	b.n	a352a <Cl_Rinse_Controller+0x1262>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a34c6:	2316      	movs	r3, #22
   a34c8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a34cc:	2321      	movs	r3, #33	; 0x21
   a34ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a34d2:	2300      	movs	r3, #0
   a34d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a34d8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a34dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a34e0:	2202      	movs	r2, #2
   a34e2:	4618      	mov	r0, r3
   a34e4:	4b3f      	ldr	r3, [pc, #252]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a34e6:	4798      	blx	r3
   a34e8:	4603      	mov	r3, r0
   a34ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a34ee:	e01c      	b.n	a352a <Cl_Rinse_Controller+0x1262>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a34f0:	2316      	movs	r3, #22
   a34f2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a34f6:	2323      	movs	r3, #35	; 0x23
   a34f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a34fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3500:	3301      	adds	r3, #1
   a3502:	4619      	mov	r1, r3
   a3504:	2028      	movs	r0, #40	; 0x28
   a3506:	4b3b      	ldr	r3, [pc, #236]	; (a35f4 <Cl_Rinse_Controller+0x132c>)
   a3508:	4798      	blx	r3
   a350a:	4603      	mov	r3, r0
   a350c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a3510:	f107 013c 	add.w	r1, r7, #60	; 0x3c
   a3514:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
   a3518:	2202      	movs	r2, #2
   a351a:	4618      	mov	r0, r3
   a351c:	4b31      	ldr	r3, [pc, #196]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a351e:	4798      	blx	r3
   a3520:	4603      	mov	r3, r0
   a3522:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a3526:	e000      	b.n	a352a <Cl_Rinse_Controller+0x1262>
							
							default:
							break;
   a3528:	bf00      	nop
						}
					}
					break;
   a352a:	e04d      	b.n	a35c8 <Cl_Rinse_Controller+0x1300>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a352c:	4b32      	ldr	r3, [pc, #200]	; (a35f8 <Cl_Rinse_Controller+0x1330>)
   a352e:	781b      	ldrb	r3, [r3, #0]
   a3530:	2b01      	cmp	r3, #1
   a3532:	d04b      	beq.n	a35cc <Cl_Rinse_Controller+0x1304>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a3534:	2206      	movs	r2, #6
   a3536:	4931      	ldr	r1, [pc, #196]	; (a35fc <Cl_Rinse_Controller+0x1334>)
   a3538:	2018      	movs	r0, #24
   a353a:	4b2a      	ldr	r3, [pc, #168]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a353c:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a353e:	4b30      	ldr	r3, [pc, #192]	; (a3600 <Cl_Rinse_Controller+0x1338>)
   a3540:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3542:	4b30      	ldr	r3, [pc, #192]	; (a3604 <Cl_Rinse_Controller+0x133c>)
   a3544:	2200      	movs	r2, #0
   a3546:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a3548:	2100      	movs	r1, #0
   a354a:	2001      	movs	r0, #1
   a354c:	4b2e      	ldr	r3, [pc, #184]	; (a3608 <Cl_Rinse_Controller+0x1340>)
   a354e:	4798      	blx	r3
					}
						
					break;
   a3550:	e03c      	b.n	a35cc <Cl_Rinse_Controller+0x1304>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a3552:	2100      	movs	r1, #0
   a3554:	2002      	movs	r0, #2
   a3556:	4b2c      	ldr	r3, [pc, #176]	; (a3608 <Cl_Rinse_Controller+0x1340>)
   a3558:	4798      	blx	r3
					break;
   a355a:	e03c      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a355c:	4b26      	ldr	r3, [pc, #152]	; (a35f8 <Cl_Rinse_Controller+0x1330>)
   a355e:	781b      	ldrb	r3, [r3, #0]
   a3560:	2b01      	cmp	r3, #1
   a3562:	d035      	beq.n	a35d0 <Cl_Rinse_Controller+0x1308>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a3564:	2206      	movs	r2, #6
   a3566:	4929      	ldr	r1, [pc, #164]	; (a360c <Cl_Rinse_Controller+0x1344>)
   a3568:	2018      	movs	r0, #24
   a356a:	4b1e      	ldr	r3, [pc, #120]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a356c:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a356e:	2100      	movs	r1, #0
   a3570:	2005      	movs	r0, #5
   a3572:	4b25      	ldr	r3, [pc, #148]	; (a3608 <Cl_Rinse_Controller+0x1340>)
   a3574:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3576:	4b23      	ldr	r3, [pc, #140]	; (a3604 <Cl_Rinse_Controller+0x133c>)
   a3578:	2200      	movs	r2, #0
   a357a:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a357c:	e028      	b.n	a35d0 <Cl_Rinse_Controller+0x1308>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a357e:	2206      	movs	r2, #6
   a3580:	4923      	ldr	r1, [pc, #140]	; (a3610 <Cl_Rinse_Controller+0x1348>)
   a3582:	2018      	movs	r0, #24
   a3584:	4b17      	ldr	r3, [pc, #92]	; (a35e4 <Cl_Rinse_Controller+0x131c>)
   a3586:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a3588:	2100      	movs	r1, #0
   a358a:	2006      	movs	r0, #6
   a358c:	4b1e      	ldr	r3, [pc, #120]	; (a3608 <Cl_Rinse_Controller+0x1340>)
   a358e:	4798      	blx	r3

						
					break;
   a3590:	e021      	b.n	a35d6 <Cl_Rinse_Controller+0x130e>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a3592:	2300      	movs	r3, #0
   a3594:	e0cb      	b.n	a372e <Cl_Rinse_Controller+0x1466>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a3596:	4b10      	ldr	r3, [pc, #64]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a3598:	7e1b      	ldrb	r3, [r3, #24]
   a359a:	2b00      	cmp	r3, #0
   a359c:	d01a      	beq.n	a35d4 <Cl_Rinse_Controller+0x130c>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a359e:	4b0e      	ldr	r3, [pc, #56]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a35a0:	791b      	ldrb	r3, [r3, #4]
   a35a2:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a35a4:	4b0c      	ldr	r3, [pc, #48]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a35a6:	791b      	ldrb	r3, [r3, #4]
   a35a8:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a35aa:	4b0b      	ldr	r3, [pc, #44]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a35ac:	791b      	ldrb	r3, [r3, #4]
   a35ae:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a35b0:	4b09      	ldr	r3, [pc, #36]	; (a35d8 <Cl_Rinse_Controller+0x1310>)
   a35b2:	791b      	ldrb	r3, [r3, #4]
   a35b4:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a35b6:	89bb      	ldrh	r3, [r7, #12]
   a35b8:	b21b      	sxth	r3, r3
   a35ba:	4619      	mov	r1, r3
   a35bc:	200e      	movs	r0, #14
   a35be:	4b12      	ldr	r3, [pc, #72]	; (a3608 <Cl_Rinse_Controller+0x1340>)
   a35c0:	4798      	blx	r3
					}
					break;
   a35c2:	e007      	b.n	a35d4 <Cl_Rinse_Controller+0x130c>
					default: 
					
					return(CL_REJECTED);
   a35c4:	2303      	movs	r3, #3
   a35c6:	e0b2      	b.n	a372e <Cl_Rinse_Controller+0x1466>
							
							default:
							break;
						}
					}
					break;
   a35c8:	bf00      	nop
   a35ca:	e0ae      	b.n	a372a <Cl_Rinse_Controller+0x1462>
						cl_dprep_activate_prime_related_alarms();
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
					}
						
					break;
   a35cc:	bf00      	nop
   a35ce:	e0ac      	b.n	a372a <Cl_Rinse_Controller+0x1462>
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
					}
						
					break;
   a35d0:	bf00      	nop
   a35d2:	e0aa      	b.n	a372a <Cl_Rinse_Controller+0x1462>
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
					}
					break;
   a35d4:	bf00      	nop
					
					return(CL_REJECTED);
					break;
				}
					
		break;
   a35d6:	e0a8      	b.n	a372a <Cl_Rinse_Controller+0x1462>
   a35d8:	200723e8 	.word	0x200723e8
   a35dc:	20071cb1 	.word	0x20071cb1
   a35e0:	000a4505 	.word	0x000a4505
   a35e4:	0009b805 	.word	0x0009b805
   a35e8:	000a3abd 	.word	0x000a3abd
   a35ec:	20071c8e 	.word	0x20071c8e
   a35f0:	20071c8f 	.word	0x20071c8f
   a35f4:	0009a331 	.word	0x0009a331
   a35f8:	20071984 	.word	0x20071984
   a35fc:	000a8a94 	.word	0x000a8a94
   a3600:	00088e5d 	.word	0x00088e5d
   a3604:	20070cbc 	.word	0x20070cbc
   a3608:	000883f1 	.word	0x000883f1
   a360c:	000a8a70 	.word	0x000a8a70
   a3610:	000a8a78 	.word	0x000a8a78

	
	default:
			switch(cl_rinseevent)
   a3614:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3618:	3b02      	subs	r3, #2
   a361a:	2b17      	cmp	r3, #23
   a361c:	d87c      	bhi.n	a3718 <Cl_Rinse_Controller+0x1450>
   a361e:	a201      	add	r2, pc, #4	; (adr r2, a3624 <Cl_Rinse_Controller+0x135c>)
   a3620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3624:	000a3719 	.word	0x000a3719
   a3628:	000a3719 	.word	0x000a3719
   a362c:	000a3719 	.word	0x000a3719
   a3630:	000a3719 	.word	0x000a3719
   a3634:	000a3685 	.word	0x000a3685
   a3638:	000a3719 	.word	0x000a3719
   a363c:	000a3719 	.word	0x000a3719
   a3640:	000a3719 	.word	0x000a3719
   a3644:	000a3719 	.word	0x000a3719
   a3648:	000a3719 	.word	0x000a3719
   a364c:	000a3719 	.word	0x000a3719
   a3650:	000a3719 	.word	0x000a3719
   a3654:	000a3709 	.word	0x000a3709
   a3658:	000a3719 	.word	0x000a3719
   a365c:	000a3719 	.word	0x000a3719
   a3660:	000a3719 	.word	0x000a3719
   a3664:	000a3719 	.word	0x000a3719
   a3668:	000a3719 	.word	0x000a3719
   a366c:	000a3719 	.word	0x000a3719
   a3670:	000a3719 	.word	0x000a3719
   a3674:	000a368b 	.word	0x000a368b
   a3678:	000a3719 	.word	0x000a3719
   a367c:	000a3719 	.word	0x000a3719
   a3680:	000a3697 	.word	0x000a3697
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a3684:	4b2c      	ldr	r3, [pc, #176]	; (a3738 <Cl_Rinse_Controller+0x1470>)
   a3686:	4798      	blx	r3
				break;
   a3688:	e04b      	b.n	a3722 <Cl_Rinse_Controller+0x145a>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a368a:	4b2c      	ldr	r3, [pc, #176]	; (a373c <Cl_Rinse_Controller+0x1474>)
   a368c:	4798      	blx	r3
   a368e:	4603      	mov	r3, r0
   a3690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   a3694:	e045      	b.n	a3722 <Cl_Rinse_Controller+0x145a>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a3696:	4b2a      	ldr	r3, [pc, #168]	; (a3740 <Cl_Rinse_Controller+0x1478>)
   a3698:	781b      	ldrb	r3, [r3, #0]
   a369a:	2b09      	cmp	r3, #9
   a369c:	d03e      	beq.n	a371c <Cl_Rinse_Controller+0x1454>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a369e:	2100      	movs	r1, #0
   a36a0:	200c      	movs	r0, #12
   a36a2:	4b28      	ldr	r3, [pc, #160]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36a4:	4798      	blx	r3
   a36a6:	4603      	mov	r3, r0
   a36a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a36ac:	2100      	movs	r1, #0
   a36ae:	200d      	movs	r0, #13
   a36b0:	4b24      	ldr	r3, [pc, #144]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36b2:	4798      	blx	r3
   a36b4:	4603      	mov	r3, r0
   a36b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a36ba:	2100      	movs	r1, #0
   a36bc:	200e      	movs	r0, #14
   a36be:	4b21      	ldr	r3, [pc, #132]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36c0:	4798      	blx	r3
   a36c2:	4603      	mov	r3, r0
   a36c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a36c8:	2100      	movs	r1, #0
   a36ca:	2029      	movs	r0, #41	; 0x29
   a36cc:	4b1d      	ldr	r3, [pc, #116]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36ce:	4798      	blx	r3
   a36d0:	4603      	mov	r3, r0
   a36d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a36d6:	2100      	movs	r1, #0
   a36d8:	202b      	movs	r0, #43	; 0x2b
   a36da:	4b1a      	ldr	r3, [pc, #104]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36dc:	4798      	blx	r3
   a36de:	4603      	mov	r3, r0
   a36e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a36e4:	2100      	movs	r1, #0
   a36e6:	2003      	movs	r0, #3
   a36e8:	4b16      	ldr	r3, [pc, #88]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36ea:	4798      	blx	r3
   a36ec:	4603      	mov	r3, r0
   a36ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a36f2:	2100      	movs	r1, #0
   a36f4:	2004      	movs	r0, #4
   a36f6:	4b13      	ldr	r3, [pc, #76]	; (a3744 <Cl_Rinse_Controller+0x147c>)
   a36f8:	4798      	blx	r3
   a36fa:	4603      	mov	r3, r0
   a36fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a3700:	4b0f      	ldr	r3, [pc, #60]	; (a3740 <Cl_Rinse_Controller+0x1478>)
   a3702:	2209      	movs	r2, #9
   a3704:	701a      	strb	r2, [r3, #0]
				}
				break;
   a3706:	e009      	b.n	a371c <Cl_Rinse_Controller+0x1454>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a3708:	4b0d      	ldr	r3, [pc, #52]	; (a3740 <Cl_Rinse_Controller+0x1478>)
   a370a:	781b      	ldrb	r3, [r3, #0]
   a370c:	2b09      	cmp	r3, #9
   a370e:	d007      	beq.n	a3720 <Cl_Rinse_Controller+0x1458>
				{
					Cl_rinseretcode = CL_ERROR;
   a3710:	2304      	movs	r3, #4
   a3712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   a3716:	e003      	b.n	a3720 <Cl_Rinse_Controller+0x1458>
				default:
				break;
   a3718:	bf00      	nop
   a371a:	e006      	b.n	a372a <Cl_Rinse_Controller+0x1462>
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
				}
				break;
   a371c:	bf00      	nop
   a371e:	e004      	b.n	a372a <Cl_Rinse_Controller+0x1462>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
				{
					Cl_rinseretcode = CL_ERROR;
				}
				break;
   a3720:	bf00      	nop
				default:
				break;
			}
	break;
   a3722:	e002      	b.n	a372a <Cl_Rinse_Controller+0x1462>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a3724:	bf00      	nop
   a3726:	e000      	b.n	a372a <Cl_Rinse_Controller+0x1462>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a3728:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a372a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   a372e:	4618      	mov	r0, r3
   a3730:	3748      	adds	r7, #72	; 0x48
   a3732:	46bd      	mov	sp, r7
   a3734:	bd80      	pop	{r7, pc}
   a3736:	bf00      	nop
   a3738:	000a4999 	.word	0x000a4999
   a373c:	000a3d51 	.word	0x000a3d51
   a3740:	20071c8e 	.word	0x20071c8e
   a3744:	00082de1 	.word	0x00082de1

000a3748 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a3748:	b480      	push	{r7}
   a374a:	b083      	sub	sp, #12
   a374c:	af00      	add	r7, sp, #0
   a374e:	4603      	mov	r3, r0
   a3750:	6039      	str	r1, [r7, #0]
   a3752:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a3754:	79fb      	ldrb	r3, [r7, #7]
   a3756:	3b07      	subs	r3, #7
   a3758:	2b55      	cmp	r3, #85	; 0x55
   a375a:	f200 8127 	bhi.w	a39ac <cl_rinse_translatemacevent+0x264>
   a375e:	a201      	add	r2, pc, #4	; (adr r2, a3764 <cl_rinse_translatemacevent+0x1c>)
   a3760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3764:	000a38dd 	.word	0x000a38dd
   a3768:	000a38f5 	.word	0x000a38f5
   a376c:	000a390d 	.word	0x000a390d
   a3770:	000a3985 	.word	0x000a3985
   a3774:	000a398d 	.word	0x000a398d
   a3778:	000a3995 	.word	0x000a3995
   a377c:	000a3955 	.word	0x000a3955
   a3780:	000a395d 	.word	0x000a395d
   a3784:	000a3965 	.word	0x000a3965
   a3788:	000a396d 	.word	0x000a396d
   a378c:	000a39ad 	.word	0x000a39ad
   a3790:	000a39ad 	.word	0x000a39ad
   a3794:	000a39ad 	.word	0x000a39ad
   a3798:	000a39ad 	.word	0x000a39ad
   a379c:	000a39ad 	.word	0x000a39ad
   a37a0:	000a39ad 	.word	0x000a39ad
   a37a4:	000a39ad 	.word	0x000a39ad
   a37a8:	000a39ad 	.word	0x000a39ad
   a37ac:	000a39ad 	.word	0x000a39ad
   a37b0:	000a39ad 	.word	0x000a39ad
   a37b4:	000a39ad 	.word	0x000a39ad
   a37b8:	000a39ad 	.word	0x000a39ad
   a37bc:	000a39ad 	.word	0x000a39ad
   a37c0:	000a39ad 	.word	0x000a39ad
   a37c4:	000a3975 	.word	0x000a3975
   a37c8:	000a397d 	.word	0x000a397d
   a37cc:	000a39ad 	.word	0x000a39ad
   a37d0:	000a39ad 	.word	0x000a39ad
   a37d4:	000a39ad 	.word	0x000a39ad
   a37d8:	000a39ad 	.word	0x000a39ad
   a37dc:	000a39ad 	.word	0x000a39ad
   a37e0:	000a38cd 	.word	0x000a38cd
   a37e4:	000a38bd 	.word	0x000a38bd
   a37e8:	000a38c5 	.word	0x000a38c5
   a37ec:	000a38d5 	.word	0x000a38d5
   a37f0:	000a39ad 	.word	0x000a39ad
   a37f4:	000a39ad 	.word	0x000a39ad
   a37f8:	000a39ad 	.word	0x000a39ad
   a37fc:	000a394d 	.word	0x000a394d
   a3800:	000a3945 	.word	0x000a3945
   a3804:	000a39ad 	.word	0x000a39ad
   a3808:	000a39ad 	.word	0x000a39ad
   a380c:	000a39ad 	.word	0x000a39ad
   a3810:	000a39ad 	.word	0x000a39ad
   a3814:	000a39ad 	.word	0x000a39ad
   a3818:	000a39ad 	.word	0x000a39ad
   a381c:	000a39ad 	.word	0x000a39ad
   a3820:	000a39ad 	.word	0x000a39ad
   a3824:	000a39ad 	.word	0x000a39ad
   a3828:	000a3915 	.word	0x000a3915
   a382c:	000a391d 	.word	0x000a391d
   a3830:	000a3925 	.word	0x000a3925
   a3834:	000a392d 	.word	0x000a392d
   a3838:	000a3935 	.word	0x000a3935
   a383c:	000a393d 	.word	0x000a393d
   a3840:	000a39ad 	.word	0x000a39ad
   a3844:	000a39ad 	.word	0x000a39ad
   a3848:	000a39ad 	.word	0x000a39ad
   a384c:	000a39ad 	.word	0x000a39ad
   a3850:	000a39ad 	.word	0x000a39ad
   a3854:	000a39ad 	.word	0x000a39ad
   a3858:	000a38e5 	.word	0x000a38e5
   a385c:	000a38ed 	.word	0x000a38ed
   a3860:	000a39ad 	.word	0x000a39ad
   a3864:	000a39ad 	.word	0x000a39ad
   a3868:	000a38fd 	.word	0x000a38fd
   a386c:	000a39ad 	.word	0x000a39ad
   a3870:	000a39ad 	.word	0x000a39ad
   a3874:	000a39ad 	.word	0x000a39ad
   a3878:	000a39ad 	.word	0x000a39ad
   a387c:	000a39ad 	.word	0x000a39ad
   a3880:	000a39ad 	.word	0x000a39ad
   a3884:	000a39ad 	.word	0x000a39ad
   a3888:	000a39ad 	.word	0x000a39ad
   a388c:	000a3905 	.word	0x000a3905
   a3890:	000a39ad 	.word	0x000a39ad
   a3894:	000a39ad 	.word	0x000a39ad
   a3898:	000a39ad 	.word	0x000a39ad
   a389c:	000a39ad 	.word	0x000a39ad
   a38a0:	000a39ad 	.word	0x000a39ad
   a38a4:	000a39ad 	.word	0x000a39ad
   a38a8:	000a39ad 	.word	0x000a39ad
   a38ac:	000a39ad 	.word	0x000a39ad
   a38b0:	000a39ad 	.word	0x000a39ad
   a38b4:	000a399d 	.word	0x000a399d
   a38b8:	000a39a5 	.word	0x000a39a5
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a38bc:	683b      	ldr	r3, [r7, #0]
   a38be:	2224      	movs	r2, #36	; 0x24
   a38c0:	701a      	strb	r2, [r3, #0]
		break;
   a38c2:	e074      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a38c4:	683b      	ldr	r3, [r7, #0]
   a38c6:	2225      	movs	r2, #37	; 0x25
   a38c8:	701a      	strb	r2, [r3, #0]
		break;
   a38ca:	e070      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a38cc:	683b      	ldr	r3, [r7, #0]
   a38ce:	2226      	movs	r2, #38	; 0x26
   a38d0:	701a      	strb	r2, [r3, #0]
		break;
   a38d2:	e06c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a38d4:	683b      	ldr	r3, [r7, #0]
   a38d6:	2201      	movs	r2, #1
   a38d8:	701a      	strb	r2, [r3, #0]
		break;
   a38da:	e068      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a38dc:	683b      	ldr	r3, [r7, #0]
   a38de:	2202      	movs	r2, #2
   a38e0:	701a      	strb	r2, [r3, #0]
		break;
   a38e2:	e064      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a38e4:	683b      	ldr	r3, [r7, #0]
   a38e6:	2204      	movs	r2, #4
   a38e8:	701a      	strb	r2, [r3, #0]
		break;
   a38ea:	e060      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a38ec:	683b      	ldr	r3, [r7, #0]
   a38ee:	2205      	movs	r2, #5
   a38f0:	701a      	strb	r2, [r3, #0]
		break;
   a38f2:	e05c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a38f4:	683b      	ldr	r3, [r7, #0]
   a38f6:	2206      	movs	r2, #6
   a38f8:	701a      	strb	r2, [r3, #0]
		break;
   a38fa:	e058      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a38fc:	683b      	ldr	r3, [r7, #0]
   a38fe:	2219      	movs	r2, #25
   a3900:	701a      	strb	r2, [r3, #0]
		break;
   a3902:	e054      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a3904:	683b      	ldr	r3, [r7, #0]
   a3906:	2227      	movs	r2, #39	; 0x27
   a3908:	701a      	strb	r2, [r3, #0]
		break;
   a390a:	e050      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a390c:	683b      	ldr	r3, [r7, #0]
   a390e:	220e      	movs	r2, #14
   a3910:	701a      	strb	r2, [r3, #0]
		break; 
   a3912:	e04c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a3914:	683b      	ldr	r3, [r7, #0]
   a3916:	220f      	movs	r2, #15
   a3918:	701a      	strb	r2, [r3, #0]
		break;
   a391a:	e048      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a391c:	683b      	ldr	r3, [r7, #0]
   a391e:	2210      	movs	r2, #16
   a3920:	701a      	strb	r2, [r3, #0]
		break;
   a3922:	e044      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a3924:	683b      	ldr	r3, [r7, #0]
   a3926:	2211      	movs	r2, #17
   a3928:	701a      	strb	r2, [r3, #0]
		break;
   a392a:	e040      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a392c:	683b      	ldr	r3, [r7, #0]
   a392e:	2212      	movs	r2, #18
   a3930:	701a      	strb	r2, [r3, #0]
		break;
   a3932:	e03c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a3934:	683b      	ldr	r3, [r7, #0]
   a3936:	2213      	movs	r2, #19
   a3938:	701a      	strb	r2, [r3, #0]
		break;			 
   a393a:	e038      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a393c:	683b      	ldr	r3, [r7, #0]
   a393e:	2214      	movs	r2, #20
   a3940:	701a      	strb	r2, [r3, #0]
		break;
   a3942:	e034      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a3944:	683b      	ldr	r3, [r7, #0]
   a3946:	2216      	movs	r2, #22
   a3948:	701a      	strb	r2, [r3, #0]
		break;
   a394a:	e030      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a394c:	683b      	ldr	r3, [r7, #0]
   a394e:	2215      	movs	r2, #21
   a3950:	701a      	strb	r2, [r3, #0]
		break;
   a3952:	e02c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a3954:	683b      	ldr	r3, [r7, #0]
   a3956:	2218      	movs	r2, #24
   a3958:	701a      	strb	r2, [r3, #0]
		break;
   a395a:	e028      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a395c:	683b      	ldr	r3, [r7, #0]
   a395e:	2217      	movs	r2, #23
   a3960:	701a      	strb	r2, [r3, #0]
		break;
   a3962:	e024      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a3964:	683b      	ldr	r3, [r7, #0]
   a3966:	221a      	movs	r2, #26
   a3968:	701a      	strb	r2, [r3, #0]
		break;
   a396a:	e020      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a396c:	683b      	ldr	r3, [r7, #0]
   a396e:	221b      	movs	r2, #27
   a3970:	701a      	strb	r2, [r3, #0]
		break;
   a3972:	e01c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a3974:	683b      	ldr	r3, [r7, #0]
   a3976:	221f      	movs	r2, #31
   a3978:	701a      	strb	r2, [r3, #0]
		break;
   a397a:	e018      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a397c:	683b      	ldr	r3, [r7, #0]
   a397e:	2220      	movs	r2, #32
   a3980:	701a      	strb	r2, [r3, #0]
		break;
   a3982:	e014      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a3984:	683b      	ldr	r3, [r7, #0]
   a3986:	2221      	movs	r2, #33	; 0x21
   a3988:	701a      	strb	r2, [r3, #0]
		break;
   a398a:	e010      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a398c:	683b      	ldr	r3, [r7, #0]
   a398e:	2222      	movs	r2, #34	; 0x22
   a3990:	701a      	strb	r2, [r3, #0]
		break;
   a3992:	e00c      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a3994:	683b      	ldr	r3, [r7, #0]
   a3996:	2223      	movs	r2, #35	; 0x23
   a3998:	701a      	strb	r2, [r3, #0]
		break;
   a399a:	e008      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a399c:	683b      	ldr	r3, [r7, #0]
   a399e:	225b      	movs	r2, #91	; 0x5b
   a39a0:	701a      	strb	r2, [r3, #0]
		break;
   a39a2:	e004      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a39a4:	683b      	ldr	r3, [r7, #0]
   a39a6:	225c      	movs	r2, #92	; 0x5c
   a39a8:	701a      	strb	r2, [r3, #0]
		break;
   a39aa:	e000      	b.n	a39ae <cl_rinse_translatemacevent+0x266>
		default:
		break;
   a39ac:	bf00      	nop
	}
		 return CL_OK;
   a39ae:	2300      	movs	r3, #0
}
   a39b0:	4618      	mov	r0, r3
   a39b2:	370c      	adds	r7, #12
   a39b4:	46bd      	mov	sp, r7
   a39b6:	bc80      	pop	{r7}
   a39b8:	4770      	bx	lr
   a39ba:	bf00      	nop

000a39bc <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a39bc:	b480      	push	{r7}
   a39be:	af00      	add	r7, sp, #0
		tempcount = 0;
   a39c0:	4b26      	ldr	r3, [pc, #152]	; (a3a5c <Cl_rinse_init+0xa0>)
   a39c2:	2200      	movs	r2, #0
   a39c4:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a39c6:	4b26      	ldr	r3, [pc, #152]	; (a3a60 <Cl_rinse_init+0xa4>)
   a39c8:	2200      	movs	r2, #0
   a39ca:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a39cc:	4b25      	ldr	r3, [pc, #148]	; (a3a64 <Cl_rinse_init+0xa8>)
   a39ce:	2200      	movs	r2, #0
   a39d0:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a39d2:	4b25      	ldr	r3, [pc, #148]	; (a3a68 <Cl_rinse_init+0xac>)
   a39d4:	2200      	movs	r2, #0
   a39d6:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a39d8:	4b24      	ldr	r3, [pc, #144]	; (a3a6c <Cl_rinse_init+0xb0>)
   a39da:	2200      	movs	r2, #0
   a39dc:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a39de:	4b24      	ldr	r3, [pc, #144]	; (a3a70 <Cl_rinse_init+0xb4>)
   a39e0:	2200      	movs	r2, #0
   a39e2:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a39e4:	4b23      	ldr	r3, [pc, #140]	; (a3a74 <Cl_rinse_init+0xb8>)
   a39e6:	2200      	movs	r2, #0
   a39e8:	701a      	strb	r2, [r3, #0]
	 
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a39ea:	4b23      	ldr	r3, [pc, #140]	; (a3a78 <Cl_rinse_init+0xbc>)
   a39ec:	2200      	movs	r2, #0
   a39ee:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a39f0:	4b22      	ldr	r3, [pc, #136]	; (a3a7c <Cl_rinse_init+0xc0>)
   a39f2:	2200      	movs	r2, #0
   a39f4:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a39f6:	4b22      	ldr	r3, [pc, #136]	; (a3a80 <Cl_rinse_init+0xc4>)
   a39f8:	2200      	movs	r2, #0
   a39fa:	601a      	str	r2, [r3, #0]
   a39fc:	4b21      	ldr	r3, [pc, #132]	; (a3a84 <Cl_rinse_init+0xc8>)
   a39fe:	2200      	movs	r2, #0
   a3a00:	601a      	str	r2, [r3, #0]
   a3a02:	4b21      	ldr	r3, [pc, #132]	; (a3a88 <Cl_rinse_init+0xcc>)
   a3a04:	2200      	movs	r2, #0
   a3a06:	601a      	str	r2, [r3, #0]
   a3a08:	4b20      	ldr	r3, [pc, #128]	; (a3a8c <Cl_rinse_init+0xd0>)
   a3a0a:	2200      	movs	r2, #0
   a3a0c:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a3a0e:	4b20      	ldr	r3, [pc, #128]	; (a3a90 <Cl_rinse_init+0xd4>)
   a3a10:	2200      	movs	r2, #0
   a3a12:	601a      	str	r2, [r3, #0]
   a3a14:	4b1f      	ldr	r3, [pc, #124]	; (a3a94 <Cl_rinse_init+0xd8>)
   a3a16:	2200      	movs	r2, #0
   a3a18:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a3a1a:	4b1f      	ldr	r3, [pc, #124]	; (a3a98 <Cl_rinse_init+0xdc>)
   a3a1c:	2200      	movs	r2, #0
   a3a1e:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a3a20:	4b1e      	ldr	r3, [pc, #120]	; (a3a9c <Cl_rinse_init+0xe0>)
   a3a22:	2200      	movs	r2, #0
   a3a24:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a3a26:	4b1e      	ldr	r3, [pc, #120]	; (a3aa0 <Cl_rinse_init+0xe4>)
   a3a28:	2200      	movs	r2, #0
   a3a2a:	801a      	strh	r2, [r3, #0]
   a3a2c:	4b1d      	ldr	r3, [pc, #116]	; (a3aa4 <Cl_rinse_init+0xe8>)
   a3a2e:	2200      	movs	r2, #0
   a3a30:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a3a32:	4b1d      	ldr	r3, [pc, #116]	; (a3aa8 <Cl_rinse_init+0xec>)
   a3a34:	2200      	movs	r2, #0
   a3a36:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a3a38:	4b1c      	ldr	r3, [pc, #112]	; (a3aac <Cl_rinse_init+0xf0>)
   a3a3a:	2200      	movs	r2, #0
   a3a3c:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a3a3e:	4b1c      	ldr	r3, [pc, #112]	; (a3ab0 <Cl_rinse_init+0xf4>)
   a3a40:	2200      	movs	r2, #0
   a3a42:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a3a44:	4b1b      	ldr	r3, [pc, #108]	; (a3ab4 <Cl_rinse_init+0xf8>)
   a3a46:	2200      	movs	r2, #0
   a3a48:	701a      	strb	r2, [r3, #0]
   a3a4a:	4b1b      	ldr	r3, [pc, #108]	; (a3ab8 <Cl_rinse_init+0xfc>)
   a3a4c:	2200      	movs	r2, #0
   a3a4e:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a3a50:	2300      	movs	r3, #0
 }
   a3a52:	4618      	mov	r0, r3
   a3a54:	46bd      	mov	sp, r7
   a3a56:	bc80      	pop	{r7}
   a3a58:	4770      	bx	lr
   a3a5a:	bf00      	nop
   a3a5c:	20072814 	.word	0x20072814
   a3a60:	20071c88 	.word	0x20071c88
   a3a64:	20071c89 	.word	0x20071c89
   a3a68:	20071c8a 	.word	0x20071c8a
   a3a6c:	20071c8b 	.word	0x20071c8b
   a3a70:	20071c8c 	.word	0x20071c8c
   a3a74:	20071c8d 	.word	0x20071c8d
   a3a78:	20071c8e 	.word	0x20071c8e
   a3a7c:	20071c8f 	.word	0x20071c8f
   a3a80:	20071c90 	.word	0x20071c90
   a3a84:	20071c94 	.word	0x20071c94
   a3a88:	20071c98 	.word	0x20071c98
   a3a8c:	20071c9c 	.word	0x20071c9c
   a3a90:	20071ca0 	.word	0x20071ca0
   a3a94:	20071ca4 	.word	0x20071ca4
   a3a98:	20071ca8 	.word	0x20071ca8
   a3a9c:	20071ca9 	.word	0x20071ca9
   a3aa0:	20071caa 	.word	0x20071caa
   a3aa4:	20071cac 	.word	0x20071cac
   a3aa8:	20071cae 	.word	0x20071cae
   a3aac:	20071cb0 	.word	0x20071cb0
   a3ab0:	20072825 	.word	0x20072825
   a3ab4:	20071cb1 	.word	0x20071cb1
   a3ab8:	20071cb2 	.word	0x20071cb2

000a3abc <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a3abc:	b580      	push	{r7, lr}
   a3abe:	b084      	sub	sp, #16
   a3ac0:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a3ac2:	2304      	movs	r3, #4
   a3ac4:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3ac6:	2351      	movs	r3, #81	; 0x51
   a3ac8:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a3aca:	1d3b      	adds	r3, r7, #4
   a3acc:	2200      	movs	r2, #0
   a3ace:	601a      	str	r2, [r3, #0]
   a3ad0:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a3ad4:	230a      	movs	r3, #10
   a3ad6:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a3ad8:	2301      	movs	r3, #1
   a3ada:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a3adc:	4b08      	ldr	r3, [pc, #32]	; (a3b00 <Cl_Rinse_UpdateTimeInfo+0x44>)
   a3ade:	681b      	ldr	r3, [r3, #0]
   a3ae0:	b2db      	uxtb	r3, r3
   a3ae2:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a3ae4:	1d39      	adds	r1, r7, #4
   a3ae6:	7bbb      	ldrb	r3, [r7, #14]
   a3ae8:	2202      	movs	r2, #2
   a3aea:	4618      	mov	r0, r3
   a3aec:	4b05      	ldr	r3, [pc, #20]	; (a3b04 <Cl_Rinse_UpdateTimeInfo+0x48>)
   a3aee:	4798      	blx	r3
   a3af0:	4603      	mov	r3, r0
   a3af2:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a3af4:	2300      	movs	r3, #0
	
 }
   a3af6:	4618      	mov	r0, r3
   a3af8:	3710      	adds	r7, #16
   a3afa:	46bd      	mov	sp, r7
   a3afc:	bd80      	pop	{r7, pc}
   a3afe:	bf00      	nop
   a3b00:	20071ca0 	.word	0x20071ca0
   a3b04:	0009b805 	.word	0x0009b805

000a3b08 <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a3b08:	b580      	push	{r7, lr}
   a3b0a:	b082      	sub	sp, #8
   a3b0c:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a3b0e:	2304      	movs	r3, #4
   a3b10:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a3b12:	4b1b      	ldr	r3, [pc, #108]	; (a3b80 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a3b14:	781b      	ldrb	r3, [r3, #0]
   a3b16:	2b00      	cmp	r3, #0
   a3b18:	d007      	beq.n	a3b2a <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a3b1a:	4b1a      	ldr	r3, [pc, #104]	; (a3b84 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3b1c:	681b      	ldr	r3, [r3, #0]
   a3b1e:	2b05      	cmp	r3, #5
   a3b20:	dd01      	ble.n	a3b26 <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a3b22:	2300      	movs	r3, #0
   a3b24:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a3b26:	79fb      	ldrb	r3, [r7, #7]
   a3b28:	e025      	b.n	a3b76 <Cl_Rinse_CheckforRinseCompletion+0x6e>
	 }
	if (hotrinse_flag == 1)
   a3b2a:	4b17      	ldr	r3, [pc, #92]	; (a3b88 <Cl_Rinse_CheckforRinseCompletion+0x80>)
   a3b2c:	781b      	ldrb	r3, [r3, #0]
   a3b2e:	b2db      	uxtb	r3, r3
   a3b30:	2b01      	cmp	r3, #1
   a3b32:	d117      	bne.n	a3b64 <Cl_Rinse_CheckforRinseCompletion+0x5c>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN ) )
   a3b34:	4b13      	ldr	r3, [pc, #76]	; (a3b84 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3b36:	681b      	ldr	r3, [r3, #0]
   a3b38:	2b18      	cmp	r3, #24
   a3b3a:	dd1b      	ble.n	a3b74 <Cl_Rinse_CheckforRinseCompletion+0x6c>
		{
			sv_cntrl_poweroffheater();
   a3b3c:	4b13      	ldr	r3, [pc, #76]	; (a3b8c <Cl_Rinse_CheckforRinseCompletion+0x84>)
   a3b3e:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a3b40:	4b13      	ldr	r3, [pc, #76]	; (a3b90 <Cl_Rinse_CheckforRinseCompletion+0x88>)
   a3b42:	4798      	blx	r3
			
			SetHeaterState(CL_HEATER_STATE_OFF);
   a3b44:	2004      	movs	r0, #4
   a3b46:	4b13      	ldr	r3, [pc, #76]	; (a3b94 <Cl_Rinse_CheckforRinseCompletion+0x8c>)
   a3b48:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_STOP);
   a3b4a:	2005      	movs	r0, #5
   a3b4c:	4b12      	ldr	r3, [pc, #72]	; (a3b98 <Cl_Rinse_CheckforRinseCompletion+0x90>)
   a3b4e:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_START);
   a3b50:	2004      	movs	r0, #4
   a3b52:	4b11      	ldr	r3, [pc, #68]	; (a3b98 <Cl_Rinse_CheckforRinseCompletion+0x90>)
   a3b54:	4798      	blx	r3
			Cl_RinseTotalMinutescounter = 0;	
   a3b56:	4b0b      	ldr	r3, [pc, #44]	; (a3b84 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3b58:	2200      	movs	r2, #0
   a3b5a:	601a      	str	r2, [r3, #0]
			//Cl_rinseretcode = CL_OK;
			hotrinse_flag = 0;
   a3b5c:	4b0a      	ldr	r3, [pc, #40]	; (a3b88 <Cl_Rinse_CheckforRinseCompletion+0x80>)
   a3b5e:	2200      	movs	r2, #0
   a3b60:	701a      	strb	r2, [r3, #0]
   a3b62:	e007      	b.n	a3b74 <Cl_Rinse_CheckforRinseCompletion+0x6c>
// 			Cl_rinseretcode = CL_OK;
// 			hotrinse_flag = 0;
// 			return Cl_rinseretcode;
// 		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a3b64:	4b07      	ldr	r3, [pc, #28]	; (a3b84 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3b66:	681b      	ldr	r3, [r3, #0]
   a3b68:	2b09      	cmp	r3, #9
   a3b6a:	dd03      	ble.n	a3b74 <Cl_Rinse_CheckforRinseCompletion+0x6c>
	{
		sv_cntrl_setgreenalarm();
   a3b6c:	4b0b      	ldr	r3, [pc, #44]	; (a3b9c <Cl_Rinse_CheckforRinseCompletion+0x94>)
   a3b6e:	4798      	blx	r3
	//	sv_cntrl_buzzer();	
		Cl_rinseretcode = CL_OK;
   a3b70:	2300      	movs	r3, #0
   a3b72:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a3b74:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a3b76:	4618      	mov	r0, r3
   a3b78:	3708      	adds	r7, #8
   a3b7a:	46bd      	mov	sp, r7
   a3b7c:	bd80      	pop	{r7, pc}
   a3b7e:	bf00      	nop
   a3b80:	20071a62 	.word	0x20071a62
   a3b84:	20071ca0 	.word	0x20071ca0
   a3b88:	20071cb1 	.word	0x20071cb1
   a3b8c:	00099a95 	.word	0x00099a95
   a3b90:	00099c39 	.word	0x00099c39
   a3b94:	00089385 	.word	0x00089385
   a3b98:	000832a1 	.word	0x000832a1
   a3b9c:	00099d29 	.word	0x00099d29

000a3ba0 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a3ba0:	b580      	push	{r7, lr}
   a3ba2:	b082      	sub	sp, #8
   a3ba4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a3ba6:	2300      	movs	r3, #0
   a3ba8:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a3baa:	2300      	movs	r3, #0
   a3bac:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a3bae:	4b26      	ldr	r3, [pc, #152]	; (a3c48 <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a3bb0:	4798      	blx	r3
	Cl_RinseFlowOff();
   a3bb2:	4b26      	ldr	r3, [pc, #152]	; (a3c4c <cl_rinse_notifydacandgotorinsestandby+0xac>)
   a3bb4:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a3bb6:	4b26      	ldr	r3, [pc, #152]	; (a3c50 <cl_rinse_notifydacandgotorinsestandby+0xb0>)
   a3bb8:	2200      	movs	r2, #0
   a3bba:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a3bbc:	4b25      	ldr	r3, [pc, #148]	; (a3c54 <cl_rinse_notifydacandgotorinsestandby+0xb4>)
   a3bbe:	2200      	movs	r2, #0
   a3bc0:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a3bc2:	4b25      	ldr	r3, [pc, #148]	; (a3c58 <cl_rinse_notifydacandgotorinsestandby+0xb8>)
   a3bc4:	2200      	movs	r2, #0
   a3bc6:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a3bc8:	4b24      	ldr	r3, [pc, #144]	; (a3c5c <cl_rinse_notifydacandgotorinsestandby+0xbc>)
   a3bca:	2200      	movs	r2, #0
   a3bcc:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a3bce:	4b24      	ldr	r3, [pc, #144]	; (a3c60 <cl_rinse_notifydacandgotorinsestandby+0xc0>)
   a3bd0:	2200      	movs	r2, #0
   a3bd2:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a3bd4:	2301      	movs	r3, #1
   a3bd6:	71bb      	strb	r3, [r7, #6]
	cl_wait(5);
   a3bd8:	2005      	movs	r0, #5
   a3bda:	4b22      	ldr	r3, [pc, #136]	; (a3c64 <cl_rinse_notifydacandgotorinsestandby+0xc4>)
   a3bdc:	4798      	blx	r3
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a3bde:	4b22      	ldr	r3, [pc, #136]	; (a3c68 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3be0:	781b      	ldrb	r3, [r3, #0]
   a3be2:	2b03      	cmp	r3, #3
   a3be4:	d114      	bne.n	a3c10 <cl_rinse_notifydacandgotorinsestandby+0x70>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a3be6:	1dbb      	adds	r3, r7, #6
   a3be8:	2201      	movs	r2, #1
   a3bea:	4619      	mov	r1, r3
   a3bec:	2001      	movs	r0, #1
   a3bee:	4b1f      	ldr	r3, [pc, #124]	; (a3c6c <cl_rinse_notifydacandgotorinsestandby+0xcc>)
   a3bf0:	4798      	blx	r3
   a3bf2:	4603      	mov	r3, r0
   a3bf4:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a3bf6:	1dbb      	adds	r3, r7, #6
   a3bf8:	2200      	movs	r2, #0
   a3bfa:	4619      	mov	r1, r3
   a3bfc:	200b      	movs	r0, #11
   a3bfe:	4b1c      	ldr	r3, [pc, #112]	; (a3c70 <cl_rinse_notifydacandgotorinsestandby+0xd0>)
   a3c00:	4798      	blx	r3
   a3c02:	4603      	mov	r3, r0
   a3c04:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a3c06:	2048      	movs	r0, #72	; 0x48
   a3c08:	4b1a      	ldr	r3, [pc, #104]	; (a3c74 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3c0a:	4798      	blx	r3
   a3c0c:	4603      	mov	r3, r0
   a3c0e:	71fb      	strb	r3, [r7, #7]
		
	}
	if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   a3c10:	4b15      	ldr	r3, [pc, #84]	; (a3c68 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3c12:	781b      	ldrb	r3, [r3, #0]
   a3c14:	2b04      	cmp	r3, #4
   a3c16:	d105      	bne.n	a3c24 <cl_rinse_notifydacandgotorinsestandby+0x84>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   a3c18:	2052      	movs	r0, #82	; 0x52
   a3c1a:	4b16      	ldr	r3, [pc, #88]	; (a3c74 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3c1c:	4798      	blx	r3
   a3c1e:	4603      	mov	r3, r0
   a3c20:	71fb      	strb	r3, [r7, #7]
   a3c22:	e008      	b.n	a3c36 <cl_rinse_notifydacandgotorinsestandby+0x96>
	}
	else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   a3c24:	4b10      	ldr	r3, [pc, #64]	; (a3c68 <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3c26:	781b      	ldrb	r3, [r3, #0]
   a3c28:	2b05      	cmp	r3, #5
   a3c2a:	d104      	bne.n	a3c36 <cl_rinse_notifydacandgotorinsestandby+0x96>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   a3c2c:	2053      	movs	r0, #83	; 0x53
   a3c2e:	4b11      	ldr	r3, [pc, #68]	; (a3c74 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3c30:	4798      	blx	r3
   a3c32:	4603      	mov	r3, r0
   a3c34:	71fb      	strb	r3, [r7, #7]
	}
	
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a3c36:	2002      	movs	r0, #2
   a3c38:	4b0f      	ldr	r3, [pc, #60]	; (a3c78 <cl_rinse_notifydacandgotorinsestandby+0xd8>)
   a3c3a:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a3c3c:	79fb      	ldrb	r3, [r7, #7]
}
   a3c3e:	4618      	mov	r0, r3
   a3c40:	3708      	adds	r7, #8
   a3c42:	46bd      	mov	sp, r7
   a3c44:	bd80      	pop	{r7, pc}
   a3c46:	bf00      	nop
   a3c48:	000a4235 	.word	0x000a4235
   a3c4c:	000a420d 	.word	0x000a420d
   a3c50:	20071c90 	.word	0x20071c90
   a3c54:	20071c94 	.word	0x20071c94
   a3c58:	20071c98 	.word	0x20071c98
   a3c5c:	20071ca0 	.word	0x20071ca0
   a3c60:	20071ca4 	.word	0x20071ca4
   a3c64:	00093009 	.word	0x00093009
   a3c68:	20071c8e 	.word	0x20071c8e
   a3c6c:	0009a369 	.word	0x0009a369
   a3c70:	0009b805 	.word	0x0009b805
   a3c74:	0008ba55 	.word	0x0008ba55
   a3c78:	00093665 	.word	0x00093665

000a3c7c <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a3c7c:	b580      	push	{r7, lr}
   a3c7e:	b086      	sub	sp, #24
   a3c80:	af00      	add	r7, sp, #0
   a3c82:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a3c84:	2300      	movs	r3, #0
   a3c86:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a3c88:	2300      	movs	r3, #0
   a3c8a:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a3c8c:	f107 030c 	add.w	r3, r7, #12
   a3c90:	2100      	movs	r1, #0
   a3c92:	460a      	mov	r2, r1
   a3c94:	801a      	strh	r2, [r3, #0]
   a3c96:	460a      	mov	r2, r1
   a3c98:	709a      	strb	r2, [r3, #2]
   a3c9a:	2300      	movs	r3, #0
   a3c9c:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3c9e:	2351      	movs	r3, #81	; 0x51
   a3ca0:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a3ca2:	2300      	movs	r3, #0
   a3ca4:	75bb      	strb	r3, [r7, #22]
   a3ca6:	e045      	b.n	a3d34 <Cl_Rinse_UpdateAlarmTable+0xb8>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a3ca8:	7dbb      	ldrb	r3, [r7, #22]
   a3caa:	4a26      	ldr	r2, [pc, #152]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3cac:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   a3cb0:	7dbb      	ldrb	r3, [r7, #22]
   a3cb2:	00db      	lsls	r3, r3, #3
   a3cb4:	4a23      	ldr	r2, [pc, #140]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3cb6:	4413      	add	r3, r2
   a3cb8:	3302      	adds	r3, #2
   a3cba:	4619      	mov	r1, r3
   a3cbc:	4b22      	ldr	r3, [pc, #136]	; (a3d48 <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a3cbe:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a3cc0:	7dbb      	ldrb	r3, [r7, #22]
   a3cc2:	4a20      	ldr	r2, [pc, #128]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3cc4:	00db      	lsls	r3, r3, #3
   a3cc6:	4413      	add	r3, r2
   a3cc8:	789b      	ldrb	r3, [r3, #2]
   a3cca:	2b00      	cmp	r3, #0
   a3ccc:	d019      	beq.n	a3d02 <Cl_Rinse_UpdateAlarmTable+0x86>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a3cce:	7dbb      	ldrb	r3, [r7, #22]
   a3cd0:	4a1c      	ldr	r2, [pc, #112]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3cd2:	00db      	lsls	r3, r3, #3
   a3cd4:	4413      	add	r3, r2
   a3cd6:	78db      	ldrb	r3, [r3, #3]
   a3cd8:	f083 0301 	eor.w	r3, r3, #1
   a3cdc:	b2db      	uxtb	r3, r3
   a3cde:	2b00      	cmp	r3, #0
   a3ce0:	d025      	beq.n	a3d2e <Cl_Rinse_UpdateAlarmTable+0xb2>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a3ce2:	7dbb      	ldrb	r3, [r7, #22]
   a3ce4:	4a17      	ldr	r2, [pc, #92]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3ce6:	00db      	lsls	r3, r3, #3
   a3ce8:	4413      	add	r3, r2
   a3cea:	2201      	movs	r2, #1
   a3cec:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a3cee:	7dbb      	ldrb	r3, [r7, #22]
   a3cf0:	4a14      	ldr	r2, [pc, #80]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3cf2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a3cf6:	4618      	mov	r0, r3
   a3cf8:	4b14      	ldr	r3, [pc, #80]	; (a3d4c <Cl_Rinse_UpdateAlarmTable+0xd0>)
   a3cfa:	4798      	blx	r3
   a3cfc:	4603      	mov	r3, r0
   a3cfe:	75fb      	strb	r3, [r7, #23]
   a3d00:	e015      	b.n	a3d2e <Cl_Rinse_UpdateAlarmTable+0xb2>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a3d02:	7dbb      	ldrb	r3, [r7, #22]
   a3d04:	4a0f      	ldr	r2, [pc, #60]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3d06:	00db      	lsls	r3, r3, #3
   a3d08:	4413      	add	r3, r2
   a3d0a:	78db      	ldrb	r3, [r3, #3]
   a3d0c:	2b00      	cmp	r3, #0
   a3d0e:	d00e      	beq.n	a3d2e <Cl_Rinse_UpdateAlarmTable+0xb2>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a3d10:	7dbb      	ldrb	r3, [r7, #22]
   a3d12:	4a0c      	ldr	r2, [pc, #48]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3d14:	00db      	lsls	r3, r3, #3
   a3d16:	4413      	add	r3, r2
   a3d18:	2200      	movs	r2, #0
   a3d1a:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a3d1c:	2307      	movs	r3, #7
   a3d1e:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a3d20:	7dbb      	ldrb	r3, [r7, #22]
   a3d22:	4a08      	ldr	r2, [pc, #32]	; (a3d44 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a3d24:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a3d28:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a3d2a:	2300      	movs	r3, #0
   a3d2c:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a3d2e:	7dbb      	ldrb	r3, [r7, #22]
   a3d30:	3301      	adds	r3, #1
   a3d32:	75bb      	strb	r3, [r7, #22]
   a3d34:	7dbb      	ldrb	r3, [r7, #22]
   a3d36:	2b19      	cmp	r3, #25
   a3d38:	d9b6      	bls.n	a3ca8 <Cl_Rinse_UpdateAlarmTable+0x2c>
			}
		//}

	}

return (Cl_rinseretcode );
   a3d3a:	7dfb      	ldrb	r3, [r7, #23]
}
   a3d3c:	4618      	mov	r0, r3
   a3d3e:	3718      	adds	r7, #24
   a3d40:	46bd      	mov	sp, r7
   a3d42:	bd80      	pop	{r7, pc}
   a3d44:	20070cbc 	.word	0x20070cbc
   a3d48:	00082fbd 	.word	0x00082fbd
   a3d4c:	000a3eb1 	.word	0x000a3eb1

000a3d50 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a3d50:	b580      	push	{r7, lr}
   a3d52:	b082      	sub	sp, #8
   a3d54:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a3d56:	2300      	movs	r3, #0
   a3d58:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3d5a:	2351      	movs	r3, #81	; 0x51
   a3d5c:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a3d5e:	1d7b      	adds	r3, r7, #5
   a3d60:	4618      	mov	r0, r3
   a3d62:	4b04      	ldr	r3, [pc, #16]	; (a3d74 <Cl_Rinse_ProcessAlarms+0x24>)
   a3d64:	4798      	blx	r3
   a3d66:	4603      	mov	r3, r0
   a3d68:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a3d6a:	79fb      	ldrb	r3, [r7, #7]
}
   a3d6c:	4618      	mov	r0, r3
   a3d6e:	3708      	adds	r7, #8
   a3d70:	46bd      	mov	sp, r7
   a3d72:	bd80      	pop	{r7, pc}
   a3d74:	000a3c7d 	.word	0x000a3c7d

000a3d78 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a3d78:	b580      	push	{r7, lr}
   a3d7a:	b082      	sub	sp, #8
   a3d7c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a3d7e:	2300      	movs	r3, #0
   a3d80:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3d82:	2351      	movs	r3, #81	; 0x51
   a3d84:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3d86:	4b48      	ldr	r3, [pc, #288]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3d88:	2200      	movs	r2, #0
   a3d8a:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a3d8c:	4b46      	ldr	r3, [pc, #280]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3d8e:	781b      	ldrb	r3, [r3, #0]
   a3d90:	4618      	mov	r0, r3
   a3d92:	4b46      	ldr	r3, [pc, #280]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3d94:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a3d96:	4b44      	ldr	r3, [pc, #272]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3d98:	2200      	movs	r2, #0
   a3d9a:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a3d9c:	2029      	movs	r0, #41	; 0x29
   a3d9e:	4b43      	ldr	r3, [pc, #268]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3da0:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a3da2:	4b41      	ldr	r3, [pc, #260]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3da4:	2200      	movs	r2, #0
   a3da6:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a3da8:	202b      	movs	r0, #43	; 0x2b
   a3daa:	4b40      	ldr	r3, [pc, #256]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3dac:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a3dae:	4b3e      	ldr	r3, [pc, #248]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3db0:	2200      	movs	r2, #0
   a3db2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a3db6:	2008      	movs	r0, #8
   a3db8:	4b3c      	ldr	r3, [pc, #240]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3dba:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a3dbc:	4b3a      	ldr	r3, [pc, #232]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3dbe:	2200      	movs	r2, #0
   a3dc0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a3dc4:	4b38      	ldr	r3, [pc, #224]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3dc6:	2200      	movs	r2, #0
   a3dc8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a3dcc:	2015      	movs	r0, #21
   a3dce:	4b37      	ldr	r3, [pc, #220]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3dd0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a3dd2:	2016      	movs	r0, #22
   a3dd4:	4b35      	ldr	r3, [pc, #212]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3dd6:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a3dd8:	4b33      	ldr	r3, [pc, #204]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3dda:	2200      	movs	r2, #0
   a3ddc:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a3de0:	4b31      	ldr	r3, [pc, #196]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3de2:	2200      	movs	r2, #0
   a3de4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a3de8:	2017      	movs	r0, #23
   a3dea:	4b30      	ldr	r3, [pc, #192]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3dec:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a3dee:	2018      	movs	r0, #24
   a3df0:	4b2e      	ldr	r3, [pc, #184]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3df2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a3df4:	4b2c      	ldr	r3, [pc, #176]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3df6:	2200      	movs	r2, #0
   a3df8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a3dfc:	4b2a      	ldr	r3, [pc, #168]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3dfe:	2200      	movs	r2, #0
   a3e00:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a3e04:	2028      	movs	r0, #40	; 0x28
   a3e06:	4b29      	ldr	r3, [pc, #164]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e08:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a3e0a:	2027      	movs	r0, #39	; 0x27
   a3e0c:	4b27      	ldr	r3, [pc, #156]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e0e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a3e10:	4b25      	ldr	r3, [pc, #148]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e12:	2200      	movs	r2, #0
   a3e14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a3e18:	2012      	movs	r0, #18
   a3e1a:	4b24      	ldr	r3, [pc, #144]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e1c:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a3e1e:	2011      	movs	r0, #17
   a3e20:	4b22      	ldr	r3, [pc, #136]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e22:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a3e24:	4b20      	ldr	r3, [pc, #128]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e26:	2200      	movs	r2, #0
   a3e28:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a3e2c:	4b1e      	ldr	r3, [pc, #120]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e2e:	2200      	movs	r2, #0
   a3e30:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a3e34:	2013      	movs	r0, #19
   a3e36:	4b1d      	ldr	r3, [pc, #116]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e38:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a3e3a:	2014      	movs	r0, #20
   a3e3c:	4b1b      	ldr	r3, [pc, #108]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e3e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a3e40:	4b19      	ldr	r3, [pc, #100]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e42:	2200      	movs	r2, #0
   a3e44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a3e48:	2003      	movs	r0, #3
   a3e4a:	4b18      	ldr	r3, [pc, #96]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e4c:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a3e4e:	4b16      	ldr	r3, [pc, #88]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e50:	2200      	movs	r2, #0
   a3e52:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a3e56:	2004      	movs	r0, #4
   a3e58:	4b14      	ldr	r3, [pc, #80]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e5a:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_POWER_FAILURE].IsRaised = false;
   a3e5c:	4b12      	ldr	r3, [pc, #72]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e5e:	2200      	movs	r2, #0
   a3e60:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	Cl_AlarmResetAlarm(POWER_FAILURE);
   a3e64:	201d      	movs	r0, #29
   a3e66:	4b11      	ldr	r3, [pc, #68]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e68:	4798      	blx	r3
	
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a3e6a:	4b0f      	ldr	r3, [pc, #60]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e6c:	2200      	movs	r2, #0
   a3e6e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a3e72:	4b0d      	ldr	r3, [pc, #52]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e74:	2200      	movs	r2, #0
   a3e76:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a3e7a:	4b0b      	ldr	r3, [pc, #44]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e7c:	2200      	movs	r2, #0
   a3e7e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a3e82:	4b09      	ldr	r3, [pc, #36]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e84:	2200      	movs	r2, #0
   a3e86:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a3e8a:	2010      	movs	r0, #16
   a3e8c:	4b07      	ldr	r3, [pc, #28]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e8e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a3e90:	4b05      	ldr	r3, [pc, #20]	; (a3ea8 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a3e92:	2200      	movs	r2, #0
   a3e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a3e98:	200f      	movs	r0, #15
   a3e9a:	4b04      	ldr	r3, [pc, #16]	; (a3eac <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a3e9c:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a3e9e:	79fb      	ldrb	r3, [r7, #7]
}
   a3ea0:	4618      	mov	r0, r3
   a3ea2:	3708      	adds	r7, #8
   a3ea4:	46bd      	mov	sp, r7
   a3ea6:	bd80      	pop	{r7, pc}
   a3ea8:	20070cbc 	.word	0x20070cbc
   a3eac:	00082ed5 	.word	0x00082ed5

000a3eb0 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a3eb0:	b580      	push	{r7, lr}
   a3eb2:	b086      	sub	sp, #24
   a3eb4:	af00      	add	r7, sp, #0
   a3eb6:	4603      	mov	r3, r0
   a3eb8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a3eba:	2300      	movs	r3, #0
   a3ebc:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a3ebe:	f107 0308 	add.w	r3, r7, #8
   a3ec2:	2100      	movs	r1, #0
   a3ec4:	460a      	mov	r2, r1
   a3ec6:	801a      	strh	r2, [r3, #0]
   a3ec8:	460a      	mov	r2, r1
   a3eca:	709a      	strb	r2, [r3, #2]
   a3ecc:	2300      	movs	r3, #0
   a3ece:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3ed0:	2351      	movs	r3, #81	; 0x51
   a3ed2:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a3ed4:	2300      	movs	r3, #0
   a3ed6:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a3ed8:	2300      	movs	r3, #0
   a3eda:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a3edc:	79fb      	ldrb	r3, [r7, #7]
   a3ede:	3b01      	subs	r3, #1
   a3ee0:	2b3a      	cmp	r3, #58	; 0x3a
   a3ee2:	f200 810e 	bhi.w	a4102 <CL_RinseAlarmActon+0x252>
   a3ee6:	a201      	add	r2, pc, #4	; (adr r2, a3eec <CL_RinseAlarmActon+0x3c>)
   a3ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3eec:	000a3fe9 	.word	0x000a3fe9
   a3ef0:	000a4103 	.word	0x000a4103
   a3ef4:	000a4017 	.word	0x000a4017
   a3ef8:	000a4027 	.word	0x000a4027
   a3efc:	000a4103 	.word	0x000a4103
   a3f00:	000a4103 	.word	0x000a4103
   a3f04:	000a4103 	.word	0x000a4103
   a3f08:	000a40ab 	.word	0x000a40ab
   a3f0c:	000a4103 	.word	0x000a4103
   a3f10:	000a4103 	.word	0x000a4103
   a3f14:	000a4103 	.word	0x000a4103
   a3f18:	000a40bb 	.word	0x000a40bb
   a3f1c:	000a40c7 	.word	0x000a40c7
   a3f20:	000a40d3 	.word	0x000a40d3
   a3f24:	000a4037 	.word	0x000a4037
   a3f28:	000a4037 	.word	0x000a4037
   a3f2c:	000a4047 	.word	0x000a4047
   a3f30:	000a4047 	.word	0x000a4047
   a3f34:	000a4057 	.word	0x000a4057
   a3f38:	000a406b 	.word	0x000a406b
   a3f3c:	000a407b 	.word	0x000a407b
   a3f40:	000a407b 	.word	0x000a407b
   a3f44:	000a408b 	.word	0x000a408b
   a3f48:	000a408b 	.word	0x000a408b
   a3f4c:	000a4103 	.word	0x000a4103
   a3f50:	000a40f7 	.word	0x000a40f7
   a3f54:	000a4109 	.word	0x000a4109
   a3f58:	000a4109 	.word	0x000a4109
   a3f5c:	000a3fd9 	.word	0x000a3fd9
   a3f60:	000a4103 	.word	0x000a4103
   a3f64:	000a4109 	.word	0x000a4109
   a3f68:	000a4103 	.word	0x000a4103
   a3f6c:	000a4103 	.word	0x000a4103
   a3f70:	000a4103 	.word	0x000a4103
   a3f74:	000a4103 	.word	0x000a4103
   a3f78:	000a4103 	.word	0x000a4103
   a3f7c:	000a4103 	.word	0x000a4103
   a3f80:	000a4103 	.word	0x000a4103
   a3f84:	000a409b 	.word	0x000a409b
   a3f88:	000a409b 	.word	0x000a409b
   a3f8c:	000a3ff7 	.word	0x000a3ff7
   a3f90:	000a4103 	.word	0x000a4103
   a3f94:	000a4007 	.word	0x000a4007
   a3f98:	000a4103 	.word	0x000a4103
   a3f9c:	000a4109 	.word	0x000a4109
   a3fa0:	000a4109 	.word	0x000a4109
   a3fa4:	000a4103 	.word	0x000a4103
   a3fa8:	000a4103 	.word	0x000a4103
   a3fac:	000a4103 	.word	0x000a4103
   a3fb0:	000a40df 	.word	0x000a40df
   a3fb4:	000a40df 	.word	0x000a40df
   a3fb8:	000a4103 	.word	0x000a4103
   a3fbc:	000a4103 	.word	0x000a4103
   a3fc0:	000a4103 	.word	0x000a4103
   a3fc4:	000a4103 	.word	0x000a4103
   a3fc8:	000a4103 	.word	0x000a4103
   a3fcc:	000a40eb 	.word	0x000a40eb
   a3fd0:	000a40eb 	.word	0x000a40eb
   a3fd4:	000a40eb 	.word	0x000a40eb
		{
			
			case POWER_FAILURE:
			
		//	sv_cntrl_setredalarm();
			sv_cntrl_buzzer();
   a3fd8:	4b5b      	ldr	r3, [pc, #364]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a3fda:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a3fdc:	4b5b      	ldr	r3, [pc, #364]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a3fde:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a3fe0:	4b5b      	ldr	r3, [pc, #364]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a3fe2:	2206      	movs	r2, #6
   a3fe4:	701a      	strb	r2, [r3, #0]
			break;
   a3fe6:	e090      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case BLOODDOOR_STATUS_OPEN:
				//	sv_cntrl_setredalarm();
					sv_cntrl_buzzer();
   a3fe8:	4b57      	ldr	r3, [pc, #348]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a3fea:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a3fec:	2100      	movs	r1, #0
   a3fee:	2004      	movs	r0, #4
   a3ff0:	4b58      	ldr	r3, [pc, #352]	; (a4154 <CL_RinseAlarmActon+0x2a4>)
   a3ff2:	4798      	blx	r3
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a3ff4:	e089      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case ACID_IN_OPEN:
	//		sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a3ff6:	4b54      	ldr	r3, [pc, #336]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a3ff8:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a3ffa:	4b54      	ldr	r3, [pc, #336]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a3ffc:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a3ffe:	4b54      	ldr	r3, [pc, #336]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4000:	2206      	movs	r2, #6
   a4002:	701a      	strb	r2, [r3, #0]
			break;
   a4004:	e081      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case BICARB_IN_OPEN:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a4006:	4b50      	ldr	r3, [pc, #320]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4008:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a400a:	4b50      	ldr	r3, [pc, #320]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a400c:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a400e:	4b50      	ldr	r3, [pc, #320]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4010:	2206      	movs	r2, #6
   a4012:	701a      	strb	r2, [r3, #0]
			break;
   a4014:	e079      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case HOLDER1STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4016:	4b4c      	ldr	r3, [pc, #304]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4018:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a401a:	4b4c      	ldr	r3, [pc, #304]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a401c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a401e:	4b4c      	ldr	r3, [pc, #304]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4020:	2206      	movs	r2, #6
   a4022:	701a      	strb	r2, [r3, #0]
			break;
   a4024:	e071      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case HOLDER2STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4026:	4b48      	ldr	r3, [pc, #288]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4028:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a402a:	4b48      	ldr	r3, [pc, #288]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a402c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a402e:	4b48      	ldr	r3, [pc, #288]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4030:	2206      	movs	r2, #6
   a4032:	701a      	strb	r2, [r3, #0]
			break;
   a4034:	e069      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4036:	4b44      	ldr	r3, [pc, #272]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4038:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a403a:	4b44      	ldr	r3, [pc, #272]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a403c:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a403e:	4b44      	ldr	r3, [pc, #272]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4040:	2206      	movs	r2, #6
   a4042:	701a      	strb	r2, [r3, #0]
			break;
   a4044:	e061      	b.n	a410a <CL_RinseAlarmActon+0x25a>
		//	cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
		//	break;
			
			case TEMP2_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a4046:	4b40      	ldr	r3, [pc, #256]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4048:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a404a:	4b40      	ldr	r3, [pc, #256]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a404c:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a404e:	4b40      	ldr	r3, [pc, #256]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4050:	2206      	movs	r2, #6
   a4052:	701a      	strb	r2, [r3, #0]
			break;
   a4054:	e059      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case TEMP3_HIGH_THRESHOLD:
			//		sv_cntrl_setyellowalarm();
					sv_cntrl_buzzer();
   a4056:	4b3c      	ldr	r3, [pc, #240]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a4058:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a405a:	4b3c      	ldr	r3, [pc, #240]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a405c:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a405e:	4b3b      	ldr	r3, [pc, #236]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a4060:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4062:	4b3b      	ldr	r3, [pc, #236]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4064:	2206      	movs	r2, #6
   a4066:	701a      	strb	r2, [r3, #0]
			break;
   a4068:	e04f      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			case TEMP3_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a406a:	4b37      	ldr	r3, [pc, #220]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a406c:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a406e:	4b37      	ldr	r3, [pc, #220]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a4070:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4072:	4b37      	ldr	r3, [pc, #220]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4074:	2206      	movs	r2, #6
   a4076:	701a      	strb	r2, [r3, #0]
			break;
   a4078:	e047      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a407a:	4b33      	ldr	r3, [pc, #204]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a407c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a407e:	4b33      	ldr	r3, [pc, #204]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a4080:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4082:	4b33      	ldr	r3, [pc, #204]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4084:	2206      	movs	r2, #6
   a4086:	701a      	strb	r2, [r3, #0]
			break;
   a4088:	e03f      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a408a:	4b2f      	ldr	r3, [pc, #188]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a408c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a408e:	4b2f      	ldr	r3, [pc, #188]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a4090:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4092:	4b2f      	ldr	r3, [pc, #188]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a4094:	2206      	movs	r2, #6
   a4096:	701a      	strb	r2, [r3, #0]
			break;
   a4098:	e037      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a409a:	4b2b      	ldr	r3, [pc, #172]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a409c:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a409e:	4b2b      	ldr	r3, [pc, #172]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40a0:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40a2:	4b2b      	ldr	r3, [pc, #172]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40a4:	2206      	movs	r2, #6
   a40a6:	701a      	strb	r2, [r3, #0]
			break;
   a40a8:	e02f      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case COND_STATUS_HIGH:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a40aa:	4b27      	ldr	r3, [pc, #156]	; (a4148 <CL_RinseAlarmActon+0x298>)
   a40ac:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a40ae:	4b27      	ldr	r3, [pc, #156]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40b0:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40b2:	4b27      	ldr	r3, [pc, #156]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40b4:	2206      	movs	r2, #6
   a40b6:	701a      	strb	r2, [r3, #0]
			break;
   a40b8:	e027      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   a40ba:	4b24      	ldr	r3, [pc, #144]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40bc:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40be:	4b24      	ldr	r3, [pc, #144]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40c0:	2206      	movs	r2, #6
   a40c2:	701a      	strb	r2, [r3, #0]
			break;
   a40c4:	e021      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   a40c6:	4b21      	ldr	r3, [pc, #132]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40c8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40ca:	4b21      	ldr	r3, [pc, #132]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40cc:	2206      	movs	r2, #6
   a40ce:	701a      	strb	r2, [r3, #0]
			break;
   a40d0:	e01b      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   a40d2:	4b1e      	ldr	r3, [pc, #120]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40d4:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40d6:	4b1e      	ldr	r3, [pc, #120]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40d8:	2206      	movs	r2, #6
   a40da:	701a      	strb	r2, [r3, #0]
			break;
   a40dc:	e015      	b.n	a410a <CL_RinseAlarmActon+0x25a>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   a40de:	4b1b      	ldr	r3, [pc, #108]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40e0:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40e2:	4b1b      	ldr	r3, [pc, #108]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40e4:	2206      	movs	r2, #6
   a40e6:	701a      	strb	r2, [r3, #0]
			break;
   a40e8:	e00f      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
			//	sv_cntrl_setyellowalarm();                              // updated on 17.03.17
					Cl_Rinse_StopRinse();
   a40ea:	4b18      	ldr	r3, [pc, #96]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40ec:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40ee:	4b18      	ldr	r3, [pc, #96]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40f0:	2206      	movs	r2, #6
   a40f2:	701a      	strb	r2, [r3, #0]
			break;
   a40f4:	e009      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			break;

			case BC_ALARM:
			
		//	sv_cntrl_setyellowalarm();                             
			Cl_Rinse_StopRinse();
   a40f6:	4b15      	ldr	r3, [pc, #84]	; (a414c <CL_RinseAlarmActon+0x29c>)
   a40f8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a40fa:	4b15      	ldr	r3, [pc, #84]	; (a4150 <CL_RinseAlarmActon+0x2a0>)
   a40fc:	2206      	movs	r2, #6
   a40fe:	701a      	strb	r2, [r3, #0]
			
			break;
   a4100:	e003      	b.n	a410a <CL_RinseAlarmActon+0x25a>
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a4102:	2300      	movs	r3, #0
   a4104:	71fb      	strb	r3, [r7, #7]
			break;
   a4106:	e000      	b.n	a410a <CL_RinseAlarmActon+0x25a>
// 					Cl_Rinse_StopRinse();
// 					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
// 			break;

			case DE_CHAMBER_LOW: //23
			break;
   a4108:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a410a:	79fb      	ldrb	r3, [r7, #7]
   a410c:	2b00      	cmp	r3, #0
   a410e:	d013      	beq.n	a4138 <CL_RinseAlarmActon+0x288>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a4110:	79fb      	ldrb	r3, [r7, #7]
   a4112:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a4114:	2301      	movs	r3, #1
   a4116:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a4118:	2302      	movs	r3, #2
   a411a:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a411c:	2307      	movs	r3, #7
   a411e:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a4120:	f107 0108 	add.w	r1, r7, #8
   a4124:	7bfb      	ldrb	r3, [r7, #15]
   a4126:	2203      	movs	r2, #3
   a4128:	4618      	mov	r0, r3
   a412a:	4b0b      	ldr	r3, [pc, #44]	; (a4158 <CL_RinseAlarmActon+0x2a8>)
   a412c:	4798      	blx	r3
   a412e:	4603      	mov	r3, r0
   a4130:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a4132:	200a      	movs	r0, #10
   a4134:	4b09      	ldr	r3, [pc, #36]	; (a415c <CL_RinseAlarmActon+0x2ac>)
   a4136:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a4138:	4a09      	ldr	r2, [pc, #36]	; (a4160 <CL_RinseAlarmActon+0x2b0>)
   a413a:	79fb      	ldrb	r3, [r7, #7]
   a413c:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a413e:	2300      	movs	r3, #0
}
   a4140:	4618      	mov	r0, r3
   a4142:	3718      	adds	r7, #24
   a4144:	46bd      	mov	sp, r7
   a4146:	bd80      	pop	{r7, pc}
   a4148:	00099d3d 	.word	0x00099d3d
   a414c:	000a4999 	.word	0x000a4999
   a4150:	20071c8e 	.word	0x20071c8e
   a4154:	0009316d 	.word	0x0009316d
   a4158:	0009b805 	.word	0x0009b805
   a415c:	00093009 	.word	0x00093009
   a4160:	20071cb0 	.word	0x20071cb0

000a4164 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a4164:	b580      	push	{r7, lr}
   a4166:	b086      	sub	sp, #24
   a4168:	af00      	add	r7, sp, #0
   a416a:	4603      	mov	r3, r0
   a416c:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a416e:	2300      	movs	r3, #0
   a4170:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a4172:	f107 030c 	add.w	r3, r7, #12
   a4176:	2100      	movs	r1, #0
   a4178:	460a      	mov	r2, r1
   a417a:	801a      	strh	r2, [r3, #0]
   a417c:	460a      	mov	r2, r1
   a417e:	709a      	strb	r2, [r3, #2]
   a4180:	2300      	movs	r3, #0
   a4182:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a4184:	2351      	movs	r3, #81	; 0x51
   a4186:	73fb      	strb	r3, [r7, #15]
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4188:	4b11      	ldr	r3, [pc, #68]	; (a41d0 <Cl_RinseSendAlarm+0x6c>)
   a418a:	2206      	movs	r2, #6
   a418c:	701a      	strb	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a418e:	4b11      	ldr	r3, [pc, #68]	; (a41d4 <Cl_RinseSendAlarm+0x70>)
   a4190:	4798      	blx	r3
			sv_cntrl_buzzer();
   a4192:	4b11      	ldr	r3, [pc, #68]	; (a41d8 <Cl_RinseSendAlarm+0x74>)
   a4194:	4798      	blx	r3
			if(cl_rinsealarmId != _NO_ALARM)
   a4196:	79fb      	ldrb	r3, [r7, #7]
   a4198:	2b00      	cmp	r3, #0
   a419a:	d013      	beq.n	a41c4 <Cl_RinseSendAlarm+0x60>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a419c:	79fb      	ldrb	r3, [r7, #7]
   a419e:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a41a0:	2301      	movs	r3, #1
   a41a2:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a41a4:	2302      	movs	r3, #2
   a41a6:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a41a8:	2307      	movs	r3, #7
   a41aa:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a41ac:	f107 010c 	add.w	r1, r7, #12
   a41b0:	7bfb      	ldrb	r3, [r7, #15]
   a41b2:	2203      	movs	r2, #3
   a41b4:	4618      	mov	r0, r3
   a41b6:	4b09      	ldr	r3, [pc, #36]	; (a41dc <Cl_RinseSendAlarm+0x78>)
   a41b8:	4798      	blx	r3
   a41ba:	4603      	mov	r3, r0
   a41bc:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a41be:	200a      	movs	r0, #10
   a41c0:	4b07      	ldr	r3, [pc, #28]	; (a41e0 <Cl_RinseSendAlarm+0x7c>)
   a41c2:	4798      	blx	r3

			 }
}
   a41c4:	bf00      	nop
   a41c6:	4618      	mov	r0, r3
   a41c8:	3718      	adds	r7, #24
   a41ca:	46bd      	mov	sp, r7
   a41cc:	bd80      	pop	{r7, pc}
   a41ce:	bf00      	nop
   a41d0:	20071c8e 	.word	0x20071c8e
   a41d4:	00099d01 	.word	0x00099d01
   a41d8:	00099d3d 	.word	0x00099d3d
   a41dc:	0009b805 	.word	0x0009b805
   a41e0:	00093009 	.word	0x00093009

000a41e4 <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a41e4:	b580      	push	{r7, lr}
   a41e6:	b082      	sub	sp, #8
   a41e8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a41ea:	2300      	movs	r3, #0
   a41ec:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a41ee:	2001      	movs	r0, #1
   a41f0:	4b04      	ldr	r3, [pc, #16]	; (a4204 <Cl_RinseFlowOn+0x20>)
   a41f2:	4798      	blx	r3
	cl_gfillinprogress = true;
   a41f4:	4b04      	ldr	r3, [pc, #16]	; (a4208 <Cl_RinseFlowOn+0x24>)
   a41f6:	2201      	movs	r2, #1
   a41f8:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a41fa:	79fb      	ldrb	r3, [r7, #7]
	
}
   a41fc:	4618      	mov	r0, r3
   a41fe:	3708      	adds	r7, #8
   a4200:	46bd      	mov	sp, r7
   a4202:	bd80      	pop	{r7, pc}
   a4204:	00099aa9 	.word	0x00099aa9
   a4208:	20071ca9 	.word	0x20071ca9

000a420c <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a420c:	b580      	push	{r7, lr}
   a420e:	b082      	sub	sp, #8
   a4210:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a4212:	2300      	movs	r3, #0
   a4214:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a4216:	2001      	movs	r0, #1
   a4218:	4b04      	ldr	r3, [pc, #16]	; (a422c <Cl_RinseFlowOff+0x20>)
   a421a:	4798      	blx	r3
	cl_gfillinprogress = false;
   a421c:	4b04      	ldr	r3, [pc, #16]	; (a4230 <Cl_RinseFlowOff+0x24>)
   a421e:	2200      	movs	r2, #0
   a4220:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a4222:	79fb      	ldrb	r3, [r7, #7]
	
}
   a4224:	4618      	mov	r0, r3
   a4226:	3708      	adds	r7, #8
   a4228:	46bd      	mov	sp, r7
   a422a:	bd80      	pop	{r7, pc}
   a422c:	00099ac9 	.word	0x00099ac9
   a4230:	20071ca9 	.word	0x20071ca9

000a4234 <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a4234:	b580      	push	{r7, lr}
   a4236:	b082      	sub	sp, #8
   a4238:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a423a:	2300      	movs	r3, #0
   a423c:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a423e:	2005      	movs	r0, #5
   a4240:	4b04      	ldr	r3, [pc, #16]	; (a4254 <Cl_RinseStop+0x20>)
   a4242:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a4244:	4b04      	ldr	r3, [pc, #16]	; (a4258 <Cl_RinseStop+0x24>)
   a4246:	4798      	blx	r3
	return Cl_RetVal;
   a4248:	79fb      	ldrb	r3, [r7, #7]
	
}
   a424a:	4618      	mov	r0, r3
   a424c:	3708      	adds	r7, #8
   a424e:	46bd      	mov	sp, r7
   a4250:	bd80      	pop	{r7, pc}
   a4252:	bf00      	nop
   a4254:	000832a1 	.word	0x000832a1
   a4258:	00099a95 	.word	0x00099a95

000a425c <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a425c:	b580      	push	{r7, lr}
   a425e:	b08a      	sub	sp, #40	; 0x28
   a4260:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a4262:	2300      	movs	r3, #0
   a4264:	77fb      	strb	r3, [r7, #31]
	StateDatatype data;
	Cl_Uint8Type count=0;
   a4266:	2300      	movs	r3, #0
   a4268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0;
   a426c:	2300      	movs	r3, #0
   a426e:	81fb      	strh	r3, [r7, #14]
   a4270:	2300      	movs	r3, #0
   a4272:	83bb      	strh	r3, [r7, #28]
   a4274:	2300      	movs	r3, #0
   a4276:	81bb      	strh	r3, [r7, #12]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a4278:	463b      	mov	r3, r7
   a427a:	2200      	movs	r2, #0
   a427c:	601a      	str	r2, [r3, #0]
   a427e:	605a      	str	r2, [r3, #4]
   a4280:	609a      	str	r2, [r3, #8]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a4282:	4b90      	ldr	r3, [pc, #576]	; (a44c4 <Cl_Rinse_SendRinseStateData+0x268>)
   a4284:	681b      	ldr	r3, [r3, #0]
   a4286:	3301      	adds	r3, #1
   a4288:	4a8e      	ldr	r2, [pc, #568]	; (a44c4 <Cl_Rinse_SendRinseStateData+0x268>)
   a428a:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a428c:	4b8d      	ldr	r3, [pc, #564]	; (a44c4 <Cl_Rinse_SendRinseStateData+0x268>)
   a428e:	681b      	ldr	r3, [r3, #0]
   a4290:	2b04      	cmp	r3, #4
   a4292:	f340 8112 	ble.w	a44ba <Cl_Rinse_SendRinseStateData+0x25e>
	{
		return;
	}
	else
	{
		timecount = 0;
   a4296:	4b8b      	ldr	r3, [pc, #556]	; (a44c4 <Cl_Rinse_SendRinseStateData+0x268>)
   a4298:	2200      	movs	r2, #0
   a429a:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a429c:	2301      	movs	r3, #1
   a429e:	703b      	strb	r3, [r7, #0]
	count++;
   a42a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a42a4:	3301      	adds	r3, #1
   a42a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a42aa:	f107 030c 	add.w	r3, r7, #12
   a42ae:	4619      	mov	r1, r3
   a42b0:	2014      	movs	r0, #20
   a42b2:	4b85      	ldr	r3, [pc, #532]	; (a44c8 <Cl_Rinse_SendRinseStateData+0x26c>)
   a42b4:	4798      	blx	r3
		{
			tmp3 = (float)sensordata /10;
   a42b6:	89ba      	ldrh	r2, [r7, #12]
   a42b8:	4b84      	ldr	r3, [pc, #528]	; (a44cc <Cl_Rinse_SendRinseStateData+0x270>)
   a42ba:	4610      	mov	r0, r2
   a42bc:	4798      	blx	r3
   a42be:	4602      	mov	r2, r0
   a42c0:	4b83      	ldr	r3, [pc, #524]	; (a44d0 <Cl_Rinse_SendRinseStateData+0x274>)
   a42c2:	4984      	ldr	r1, [pc, #528]	; (a44d4 <Cl_Rinse_SendRinseStateData+0x278>)
   a42c4:	4610      	mov	r0, r2
   a42c6:	4798      	blx	r3
   a42c8:	4603      	mov	r3, r0
   a42ca:	461a      	mov	r2, r3
   a42cc:	4b82      	ldr	r3, [pc, #520]	; (a44d8 <Cl_Rinse_SendRinseStateData+0x27c>)
   a42ce:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a42d0:	f107 030e 	add.w	r3, r7, #14
   a42d4:	4619      	mov	r1, r3
   a42d6:	2007      	movs	r0, #7
   a42d8:	4b7b      	ldr	r3, [pc, #492]	; (a44c8 <Cl_Rinse_SendRinseStateData+0x26c>)
   a42da:	4798      	blx	r3
		{
 			
			float conductivity_CS3, avg_conductivity,avgcond;
			conductivity_CS3 = cl_utilities_CalConductivity(temp,tmp3);
   a42dc:	89fa      	ldrh	r2, [r7, #14]
   a42de:	4b7e      	ldr	r3, [pc, #504]	; (a44d8 <Cl_Rinse_SendRinseStateData+0x27c>)
   a42e0:	681b      	ldr	r3, [r3, #0]
   a42e2:	4619      	mov	r1, r3
   a42e4:	4610      	mov	r0, r2
   a42e6:	4b7d      	ldr	r3, [pc, #500]	; (a44dc <Cl_Rinse_SendRinseStateData+0x280>)
   a42e8:	4798      	blx	r3
   a42ea:	61b8      	str	r0, [r7, #24]
			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
   a42ec:	4b7c      	ldr	r3, [pc, #496]	; (a44e0 <Cl_Rinse_SendRinseStateData+0x284>)
   a42ee:	497d      	ldr	r1, [pc, #500]	; (a44e4 <Cl_Rinse_SendRinseStateData+0x288>)
   a42f0:	6a38      	ldr	r0, [r7, #32]
   a42f2:	4798      	blx	r3
   a42f4:	4603      	mov	r3, r0
   a42f6:	461a      	mov	r2, r3
   a42f8:	4b7b      	ldr	r3, [pc, #492]	; (a44e8 <Cl_Rinse_SendRinseStateData+0x28c>)
   a42fa:	69b9      	ldr	r1, [r7, #24]
   a42fc:	4610      	mov	r0, r2
   a42fe:	4798      	blx	r3
   a4300:	4603      	mov	r3, r0
   a4302:	461a      	mov	r2, r3
   a4304:	4b72      	ldr	r3, [pc, #456]	; (a44d0 <Cl_Rinse_SendRinseStateData+0x274>)
   a4306:	4973      	ldr	r1, [pc, #460]	; (a44d4 <Cl_Rinse_SendRinseStateData+0x278>)
   a4308:	4610      	mov	r0, r2
   a430a:	4798      	blx	r3
   a430c:	4603      	mov	r3, r0
   a430e:	623b      	str	r3, [r7, #32]
			avgcond = avgcond + conductivity_CS3;
   a4310:	4b75      	ldr	r3, [pc, #468]	; (a44e8 <Cl_Rinse_SendRinseStateData+0x28c>)
   a4312:	69b9      	ldr	r1, [r7, #24]
   a4314:	6978      	ldr	r0, [r7, #20]
   a4316:	4798      	blx	r3
   a4318:	4603      	mov	r3, r0
   a431a:	617b      	str	r3, [r7, #20]
			
			if (count % 20)
   a431c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a4320:	4b72      	ldr	r3, [pc, #456]	; (a44ec <Cl_Rinse_SendRinseStateData+0x290>)
   a4322:	fba3 1302 	umull	r1, r3, r3, r2
   a4326:	0919      	lsrs	r1, r3, #4
   a4328:	460b      	mov	r3, r1
   a432a:	009b      	lsls	r3, r3, #2
   a432c:	440b      	add	r3, r1
   a432e:	009b      	lsls	r3, r3, #2
   a4330:	1ad3      	subs	r3, r2, r3
   a4332:	b2db      	uxtb	r3, r3
   a4334:	2b00      	cmp	r3, #0
   a4336:	d007      	beq.n	a4348 <Cl_Rinse_SendRinseStateData+0xec>
			{
				avgcond = avgcond/20;
   a4338:	4b65      	ldr	r3, [pc, #404]	; (a44d0 <Cl_Rinse_SendRinseStateData+0x274>)
   a433a:	496d      	ldr	r1, [pc, #436]	; (a44f0 <Cl_Rinse_SendRinseStateData+0x294>)
   a433c:	6978      	ldr	r0, [r7, #20]
   a433e:	4798      	blx	r3
   a4340:	4603      	mov	r3, r0
   a4342:	617b      	str	r3, [r7, #20]
				
				avg_conductivity = avgcond;
   a4344:	697b      	ldr	r3, [r7, #20]
   a4346:	623b      	str	r3, [r7, #32]

			}
			if (avg_conductivity >0)
   a4348:	4b6a      	ldr	r3, [pc, #424]	; (a44f4 <Cl_Rinse_SendRinseStateData+0x298>)
   a434a:	f04f 0100 	mov.w	r1, #0
   a434e:	6a38      	ldr	r0, [r7, #32]
   a4350:	4798      	blx	r3
   a4352:	4603      	mov	r3, r0
   a4354:	2b00      	cmp	r3, #0
   a4356:	d031      	beq.n	a43bc <Cl_Rinse_SendRinseStateData+0x160>
			{
				data.fourbytedata = avg_conductivity;
   a4358:	4b67      	ldr	r3, [pc, #412]	; (a44f8 <Cl_Rinse_SendRinseStateData+0x29c>)
   a435a:	6a38      	ldr	r0, [r7, #32]
   a435c:	4798      	blx	r3
   a435e:	4603      	mov	r3, r0
   a4360:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a4362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4366:	1c5a      	adds	r2, r3, #1
   a4368:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a436c:	7c3a      	ldrb	r2, [r7, #16]
   a436e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4372:	440b      	add	r3, r1
   a4374:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a4378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a437c:	1c5a      	adds	r2, r3, #1
   a437e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4382:	7c7a      	ldrb	r2, [r7, #17]
   a4384:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4388:	440b      	add	r3, r1
   a438a:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a438e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4392:	1c5a      	adds	r2, r3, #1
   a4394:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4398:	7cba      	ldrb	r2, [r7, #18]
   a439a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a439e:	440b      	add	r3, r1
   a43a0:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a43a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a43a8:	1c5a      	adds	r2, r3, #1
   a43aa:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a43ae:	7cfa      	ldrb	r2, [r7, #19]
   a43b0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a43b4:	440b      	add	r3, r1
   a43b6:	f803 2c28 	strb.w	r2, [r3, #-40]
   a43ba:	e02d      	b.n	a4418 <Cl_Rinse_SendRinseStateData+0x1bc>
				}
			else
			{
				data.fourbytedata = 0;
   a43bc:	2300      	movs	r3, #0
   a43be:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a43c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a43c4:	1c5a      	adds	r2, r3, #1
   a43c6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a43ca:	7c3a      	ldrb	r2, [r7, #16]
   a43cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a43d0:	440b      	add	r3, r1
   a43d2:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a43d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a43da:	1c5a      	adds	r2, r3, #1
   a43dc:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a43e0:	7c7a      	ldrb	r2, [r7, #17]
   a43e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a43e6:	440b      	add	r3, r1
   a43e8:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a43ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a43f0:	1c5a      	adds	r2, r3, #1
   a43f2:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a43f6:	7cba      	ldrb	r2, [r7, #18]
   a43f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a43fc:	440b      	add	r3, r1
   a43fe:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a4402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4406:	1c5a      	adds	r2, r3, #1
   a4408:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a440c:	7cfa      	ldrb	r2, [r7, #19]
   a440e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4412:	440b      	add	r3, r1
   a4414:	f803 2c28 	strb.w	r2, [r3, #-40]
			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a4418:	f107 030c 	add.w	r3, r7, #12
   a441c:	4619      	mov	r1, r3
   a441e:	2014      	movs	r0, #20
   a4420:	4b29      	ldr	r3, [pc, #164]	; (a44c8 <Cl_Rinse_SendRinseStateData+0x26c>)
   a4422:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;
				tmp3 = sensordata /10;
   a4424:	89bb      	ldrh	r3, [r7, #12]
   a4426:	4a31      	ldr	r2, [pc, #196]	; (a44ec <Cl_Rinse_SendRinseStateData+0x290>)
   a4428:	fba2 2303 	umull	r2, r3, r2, r3
   a442c:	08db      	lsrs	r3, r3, #3
   a442e:	b29b      	uxth	r3, r3
   a4430:	461a      	mov	r2, r3
   a4432:	4b32      	ldr	r3, [pc, #200]	; (a44fc <Cl_Rinse_SendRinseStateData+0x2a0>)
   a4434:	4610      	mov	r0, r2
   a4436:	4798      	blx	r3
   a4438:	4602      	mov	r2, r0
   a443a:	4b27      	ldr	r3, [pc, #156]	; (a44d8 <Cl_Rinse_SendRinseStateData+0x27c>)
   a443c:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a443e:	4b26      	ldr	r3, [pc, #152]	; (a44d8 <Cl_Rinse_SendRinseStateData+0x27c>)
   a4440:	681a      	ldr	r2, [r3, #0]
   a4442:	4b2d      	ldr	r3, [pc, #180]	; (a44f8 <Cl_Rinse_SendRinseStateData+0x29c>)
   a4444:	4610      	mov	r0, r2
   a4446:	4798      	blx	r3
   a4448:	4603      	mov	r3, r0
   a444a:	b29b      	uxth	r3, r3
   a444c:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a444e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4452:	1c5a      	adds	r2, r3, #1
   a4454:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4458:	7c3a      	ldrb	r2, [r7, #16]
   a445a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a445e:	440b      	add	r3, r1
   a4460:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a4464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4468:	1c5a      	adds	r2, r3, #1
   a446a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a446e:	7c7a      	ldrb	r2, [r7, #17]
   a4470:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4474:	440b      	add	r3, r1
   a4476:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a447a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a447e:	1c5a      	adds	r2, r3, #1
   a4480:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4484:	7cba      	ldrb	r2, [r7, #18]
   a4486:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a448a:	440b      	add	r3, r1
   a448c:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a4490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4494:	1c5a      	adds	r2, r3, #1
   a4496:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a449a:	7cfa      	ldrb	r2, [r7, #19]
   a449c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a44a0:	440b      	add	r3, r1
   a44a2:	f803 2c28 	strb.w	r2, [r3, #-40]
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a44a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a44aa:	463b      	mov	r3, r7
   a44ac:	4619      	mov	r1, r3
   a44ae:	202a      	movs	r0, #42	; 0x2a
   a44b0:	4b13      	ldr	r3, [pc, #76]	; (a4500 <Cl_Rinse_SendRinseStateData+0x2a4>)
   a44b2:	4798      	blx	r3
   a44b4:	4603      	mov	r3, r0
   a44b6:	77fb      	strb	r3, [r7, #31]
   a44b8:	e000      	b.n	a44bc <Cl_Rinse_SendRinseStateData+0x260>
	
	timecount++;

	if (timecount < 5)
	{
		return;
   a44ba:	bf00      	nop
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
		

}
   a44bc:	4618      	mov	r0, r3
   a44be:	3728      	adds	r7, #40	; 0x28
   a44c0:	46bd      	mov	sp, r7
   a44c2:	bd80      	pop	{r7, pc}
   a44c4:	20071cb4 	.word	0x20071cb4
   a44c8:	0008e6a1 	.word	0x0008e6a1
   a44cc:	000a64e1 	.word	0x000a64e1
   a44d0:	000a66f9 	.word	0x000a66f9
   a44d4:	41200000 	.word	0x41200000
   a44d8:	20071cb8 	.word	0x20071cb8
   a44dc:	00093091 	.word	0x00093091
   a44e0:	000a6591 	.word	0x000a6591
   a44e4:	41100000 	.word	0x41100000
   a44e8:	000a6381 	.word	0x000a6381
   a44ec:	cccccccd 	.word	0xcccccccd
   a44f0:	41a00000 	.word	0x41a00000
   a44f4:	000a6909 	.word	0x000a6909
   a44f8:	000a6969 	.word	0x000a6969
   a44fc:	000a64e9 	.word	0x000a64e9
   a4500:	0009b805 	.word	0x0009b805

000a4504 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a4504:	b590      	push	{r4, r7, lr}
   a4506:	b089      	sub	sp, #36	; 0x24
   a4508:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a450a:	2300      	movs	r3, #0
   a450c:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a450e:	2351      	movs	r3, #81	; 0x51
   a4510:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a4512:	2300      	movs	r3, #0
   a4514:	60bb      	str	r3, [r7, #8]
				
				Cl_Uint8Type data = 0;
   a4516:	2300      	movs	r3, #0
   a4518:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a451a:	2300      	movs	r3, #0
   a451c:	80fb      	strh	r3, [r7, #6]
   a451e:	2300      	movs	r3, #0
   a4520:	80bb      	strh	r3, [r7, #4]
   a4522:	2300      	movs	r3, #0
   a4524:	807b      	strh	r3, [r7, #2]
   a4526:	2300      	movs	r3, #0
   a4528:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a452a:	2301      	movs	r3, #1
   a452c:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();

Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a452e:	2100      	movs	r1, #0
   a4530:	200d      	movs	r0, #13
   a4532:	4b29      	ldr	r3, [pc, #164]	; (a45d8 <Cl_Rinse_StartRinse+0xd4>)
   a4534:	4798      	blx	r3
   a4536:	4603      	mov	r3, r0
   a4538:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a453a:	2100      	movs	r1, #0
   a453c:	200c      	movs	r0, #12
   a453e:	4b26      	ldr	r3, [pc, #152]	; (a45d8 <Cl_Rinse_StartRinse+0xd4>)
   a4540:	4798      	blx	r3
   a4542:	4603      	mov	r3, r0
   a4544:	75bb      	strb	r3, [r7, #22]
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4546:	2100      	movs	r1, #0
   a4548:	200d      	movs	r0, #13
   a454a:	4b23      	ldr	r3, [pc, #140]	; (a45d8 <Cl_Rinse_StartRinse+0xd4>)
   a454c:	4798      	blx	r3
   a454e:	4603      	mov	r3, r0
   a4550:	75bb      	strb	r3, [r7, #22]


				SetHeaterState(CL_HEATER_STATE_OFF);
   a4552:	2004      	movs	r0, #4
   a4554:	4b21      	ldr	r3, [pc, #132]	; (a45dc <Cl_Rinse_StartRinse+0xd8>)
   a4556:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a4558:	2001      	movs	r0, #1
   a455a:	4b21      	ldr	r3, [pc, #132]	; (a45e0 <Cl_Rinse_StartRinse+0xdc>)
   a455c:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a455e:	1dbb      	adds	r3, r7, #6
   a4560:	4619      	mov	r1, r3
   a4562:	2020      	movs	r0, #32
   a4564:	4b1f      	ldr	r3, [pc, #124]	; (a45e4 <Cl_Rinse_StartRinse+0xe0>)
   a4566:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a4568:	1d3b      	adds	r3, r7, #4
   a456a:	4619      	mov	r1, r3
   a456c:	2021      	movs	r0, #33	; 0x21
   a456e:	4b1d      	ldr	r3, [pc, #116]	; (a45e4 <Cl_Rinse_StartRinse+0xe0>)
   a4570:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a4572:	1cbb      	adds	r3, r7, #2
   a4574:	4619      	mov	r1, r3
   a4576:	2003      	movs	r0, #3
   a4578:	4b1a      	ldr	r3, [pc, #104]	; (a45e4 <Cl_Rinse_StartRinse+0xe0>)
   a457a:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a457c:	463b      	mov	r3, r7
   a457e:	4619      	mov	r1, r3
   a4580:	2004      	movs	r0, #4
   a4582:	4b18      	ldr	r3, [pc, #96]	; (a45e4 <Cl_Rinse_StartRinse+0xe0>)
   a4584:	4798      	blx	r3
				
				//DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )
   a4586:	88fb      	ldrh	r3, [r7, #6]
   a4588:	2b00      	cmp	r3, #0
   a458a:	d104      	bne.n	a4596 <Cl_Rinse_StartRinse+0x92>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a458c:	2029      	movs	r0, #41	; 0x29
   a458e:	4b16      	ldr	r3, [pc, #88]	; (a45e8 <Cl_Rinse_StartRinse+0xe4>)
   a4590:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a4592:	2300      	movs	r3, #0
   a4594:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a4596:	88bb      	ldrh	r3, [r7, #4]
   a4598:	2b00      	cmp	r3, #0
   a459a:	d104      	bne.n	a45a6 <Cl_Rinse_StartRinse+0xa2>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a459c:	202b      	movs	r0, #43	; 0x2b
   a459e:	4b12      	ldr	r3, [pc, #72]	; (a45e8 <Cl_Rinse_StartRinse+0xe4>)
   a45a0:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a45a2:	2300      	movs	r3, #0
   a45a4:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a45a6:	887b      	ldrh	r3, [r7, #2]
   a45a8:	2b01      	cmp	r3, #1
   a45aa:	d104      	bne.n	a45b6 <Cl_Rinse_StartRinse+0xb2>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a45ac:	2003      	movs	r0, #3
   a45ae:	4b0e      	ldr	r3, [pc, #56]	; (a45e8 <Cl_Rinse_StartRinse+0xe4>)
   a45b0:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a45b2:	2300      	movs	r3, #0
   a45b4:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a45b6:	883b      	ldrh	r3, [r7, #0]
   a45b8:	2b01      	cmp	r3, #1
   a45ba:	d104      	bne.n	a45c6 <Cl_Rinse_StartRinse+0xc2>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a45bc:	2004      	movs	r0, #4
   a45be:	4b0a      	ldr	r3, [pc, #40]	; (a45e8 <Cl_Rinse_StartRinse+0xe4>)
   a45c0:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a45c2:	2300      	movs	r3, #0
   a45c4:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a45c6:	7dfb      	ldrb	r3, [r7, #23]
   a45c8:	f083 0301 	eor.w	r3, r3, #1
   a45cc:	b2db      	uxtb	r3, r3
   a45ce:	2b00      	cmp	r3, #0
   a45d0:	d00c      	beq.n	a45ec <Cl_Rinse_StartRinse+0xe8>
				 {
					 return CL_REJECTED;
   a45d2:	2303      	movs	r3, #3
   a45d4:	e1d6      	b.n	a4984 <Cl_Rinse_StartRinse+0x480>
   a45d6:	bf00      	nop
   a45d8:	00082de1 	.word	0x00082de1
   a45dc:	00089385 	.word	0x00089385
   a45e0:	00093665 	.word	0x00093665
   a45e4:	0008e6a1 	.word	0x0008e6a1
   a45e8:	000a4165 	.word	0x000a4165
				 }
				 
				sv_cntrl_resetgreenalarm();
   a45ec:	4bb6      	ldr	r3, [pc, #728]	; (a48c8 <Cl_Rinse_StartRinse+0x3c4>)
   a45ee:	4798      	blx	r3
// 				sv_cntrl_resetyellowalarm();
// 				sv_cntrl_resetredalarm();
 				sv_cntrl_nobuzzer();
   a45f0:	4bb6      	ldr	r3, [pc, #728]	; (a48cc <Cl_Rinse_StartRinse+0x3c8>)
   a45f2:	4798      	blx	r3
// 				

	sv_cntrl_resetredalarm();
   a45f4:	4bb6      	ldr	r3, [pc, #728]	; (a48d0 <Cl_Rinse_StartRinse+0x3cc>)
   a45f6:	4798      	blx	r3
//	sv_cntrl_setgreenalarm();
				Cl_RinseFlowOn();
   a45f8:	4bb6      	ldr	r3, [pc, #728]	; (a48d4 <Cl_Rinse_StartRinse+0x3d0>)
   a45fa:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a45fc:	2002      	movs	r0, #2
   a45fe:	4bb6      	ldr	r3, [pc, #728]	; (a48d8 <Cl_Rinse_StartRinse+0x3d4>)
   a4600:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a4602:	2003      	movs	r0, #3
   a4604:	4bb4      	ldr	r3, [pc, #720]	; (a48d8 <Cl_Rinse_StartRinse+0x3d4>)
   a4606:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a4608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a460c:	2002      	movs	r0, #2
   a460e:	4bb3      	ldr	r3, [pc, #716]	; (a48dc <Cl_Rinse_StartRinse+0x3d8>)
   a4610:	4798      	blx	r3
   a4612:	4603      	mov	r3, r0
   a4614:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a4616:	f240 414c 	movw	r1, #1100	; 0x44c
   a461a:	2001      	movs	r0, #1
   a461c:	4baf      	ldr	r3, [pc, #700]	; (a48dc <Cl_Rinse_StartRinse+0x3d8>)
   a461e:	4798      	blx	r3
   a4620:	4603      	mov	r3, r0
   a4622:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a4624:	2001      	movs	r0, #1
   a4626:	4bae      	ldr	r3, [pc, #696]	; (a48e0 <Cl_Rinse_StartRinse+0x3dc>)
   a4628:	4798      	blx	r3
   a462a:	4603      	mov	r3, r0
   a462c:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a462e:	2002      	movs	r0, #2
   a4630:	4bab      	ldr	r3, [pc, #684]	; (a48e0 <Cl_Rinse_StartRinse+0x3dc>)
   a4632:	4798      	blx	r3
   a4634:	4603      	mov	r3, r0
   a4636:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a4638:	2300      	movs	r3, #0
   a463a:	827b      	strh	r3, [r7, #18]
				potvalue = (900* 1024)/10000;                                 // 600
   a463c:	235c      	movs	r3, #92	; 0x5c
   a463e:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a4640:	8a7b      	ldrh	r3, [r7, #18]
   a4642:	4618      	mov	r0, r3
   a4644:	4ba7      	ldr	r3, [pc, #668]	; (a48e4 <Cl_Rinse_StartRinse+0x3e0>)
   a4646:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a4648:	4ba7      	ldr	r3, [pc, #668]	; (a48e8 <Cl_Rinse_StartRinse+0x3e4>)
   a464a:	695b      	ldr	r3, [r3, #20]
   a464c:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a464e:	4aa7      	ldr	r2, [pc, #668]	; (a48ec <Cl_Rinse_StartRinse+0x3e8>)
   a4650:	68fb      	ldr	r3, [r7, #12]
   a4652:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a4654:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a4658:	2001      	movs	r0, #1
   a465a:	4ba5      	ldr	r3, [pc, #660]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a465c:	4798      	blx	r3
					cl_wait(100);
   a465e:	2064      	movs	r0, #100	; 0x64
   a4660:	4ba4      	ldr	r3, [pc, #656]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a4662:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a4664:	2100      	movs	r1, #0
   a4666:	2002      	movs	r0, #2
   a4668:	4ba1      	ldr	r3, [pc, #644]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a466a:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a466c:	4ba2      	ldr	r3, [pc, #648]	; (a48f8 <Cl_Rinse_StartRinse+0x3f4>)
   a466e:	4798      	blx	r3
					cl_wait(100);
   a4670:	2064      	movs	r0, #100	; 0x64
   a4672:	4ba0      	ldr	r3, [pc, #640]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a4674:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a4676:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a467a:	2001      	movs	r0, #1
   a467c:	4b9c      	ldr	r3, [pc, #624]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a467e:	4798      	blx	r3
					cl_wait(100);
   a4680:	2064      	movs	r0, #100	; 0x64
   a4682:	4b9c      	ldr	r3, [pc, #624]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a4684:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a4686:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a468a:	2001      	movs	r0, #1
   a468c:	4b98      	ldr	r3, [pc, #608]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a468e:	4798      	blx	r3
					cl_wait(100);
   a4690:	2064      	movs	r0, #100	; 0x64
   a4692:	4b98      	ldr	r3, [pc, #608]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a4694:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,6000);
   a4696:	f241 7170 	movw	r1, #6000	; 0x1770
   a469a:	2001      	movs	r0, #1
   a469c:	4b94      	ldr	r3, [pc, #592]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a469e:	4798      	blx	r3
					cl_wait(100);
   a46a0:	2064      	movs	r0, #100	; 0x64
   a46a2:	4b94      	ldr	r3, [pc, #592]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a46a4:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   a46a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   a46aa:	2001      	movs	r0, #1
   a46ac:	4b90      	ldr	r3, [pc, #576]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a46ae:	4798      	blx	r3
					cl_wait(100);
   a46b0:	2064      	movs	r0, #100	; 0x64
   a46b2:	4b90      	ldr	r3, [pc, #576]	; (a48f4 <Cl_Rinse_StartRinse+0x3f0>)
   a46b4:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,500);
   a46b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   a46ba:	2001      	movs	r0, #1
   a46bc:	4b8c      	ldr	r3, [pc, #560]	; (a48f0 <Cl_Rinse_StartRinse+0x3ec>)
   a46be:	4798      	blx	r3
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a46c0:	2000      	movs	r0, #0
   a46c2:	4b8e      	ldr	r3, [pc, #568]	; (a48fc <Cl_Rinse_StartRinse+0x3f8>)
   a46c4:	4798      	blx	r3
   a46c6:	4603      	mov	r3, r0
   a46c8:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a46ca:	2004      	movs	r0, #4
   a46cc:	4b8c      	ldr	r3, [pc, #560]	; (a4900 <Cl_Rinse_StartRinse+0x3fc>)
   a46ce:	4798      	blx	r3
   a46d0:	4603      	mov	r3, r0
   a46d2:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a46d4:	4b8b      	ldr	r3, [pc, #556]	; (a4904 <Cl_Rinse_StartRinse+0x400>)
   a46d6:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a46d8:	7dbb      	ldrb	r3, [r7, #22]
   a46da:	2b00      	cmp	r3, #0
   a46dc:	f040 8151 	bne.w	a4982 <Cl_Rinse_StartRinse+0x47e>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a46e0:	4b89      	ldr	r3, [pc, #548]	; (a4908 <Cl_Rinse_StartRinse+0x404>)
   a46e2:	2200      	movs	r2, #0
   a46e4:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a46e6:	4b89      	ldr	r3, [pc, #548]	; (a490c <Cl_Rinse_StartRinse+0x408>)
   a46e8:	2200      	movs	r2, #0
   a46ea:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a46ec:	4b88      	ldr	r3, [pc, #544]	; (a4910 <Cl_Rinse_StartRinse+0x40c>)
   a46ee:	2200      	movs	r2, #0
   a46f0:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a46f2:	4b88      	ldr	r3, [pc, #544]	; (a4914 <Cl_Rinse_StartRinse+0x410>)
   a46f4:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a46f6:	2001      	movs	r0, #1
   a46f8:	4b87      	ldr	r3, [pc, #540]	; (a4918 <Cl_Rinse_StartRinse+0x414>)
   a46fa:	4798      	blx	r3
   a46fc:	4603      	mov	r3, r0
   a46fe:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a4700:	2300      	movs	r3, #0
   a4702:	9300      	str	r3, [sp, #0]
   a4704:	f04f 0300 	mov.w	r3, #0
   a4708:	f04f 0200 	mov.w	r2, #0
   a470c:	2101      	movs	r1, #1
   a470e:	2001      	movs	r0, #1
   a4710:	4c82      	ldr	r4, [pc, #520]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4712:	47a0      	blx	r4
   a4714:	4603      	mov	r3, r0
   a4716:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a4718:	2300      	movs	r3, #0
   a471a:	9300      	str	r3, [sp, #0]
   a471c:	f04f 0300 	mov.w	r3, #0
   a4720:	f04f 0200 	mov.w	r2, #0
   a4724:	2100      	movs	r1, #0
   a4726:	2029      	movs	r0, #41	; 0x29
   a4728:	4c7c      	ldr	r4, [pc, #496]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a472a:	47a0      	blx	r4
   a472c:	4603      	mov	r3, r0
   a472e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a4730:	2300      	movs	r3, #0
   a4732:	9300      	str	r3, [sp, #0]
   a4734:	f04f 0300 	mov.w	r3, #0
   a4738:	f04f 0200 	mov.w	r2, #0
   a473c:	2100      	movs	r1, #0
   a473e:	202b      	movs	r0, #43	; 0x2b
   a4740:	4c76      	ldr	r4, [pc, #472]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4742:	47a0      	blx	r4
   a4744:	4603      	mov	r3, r0
   a4746:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a4748:	2300      	movs	r3, #0
   a474a:	9300      	str	r3, [sp, #0]
   a474c:	f04f 0300 	mov.w	r3, #0
   a4750:	f04f 0200 	mov.w	r2, #0
   a4754:	2101      	movs	r1, #1
   a4756:	2003      	movs	r0, #3
   a4758:	4c70      	ldr	r4, [pc, #448]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a475a:	47a0      	blx	r4
   a475c:	4603      	mov	r3, r0
   a475e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a4760:	2300      	movs	r3, #0
   a4762:	9300      	str	r3, [sp, #0]
   a4764:	f04f 0300 	mov.w	r3, #0
   a4768:	f04f 0200 	mov.w	r2, #0
   a476c:	2101      	movs	r1, #1
   a476e:	2004      	movs	r0, #4
   a4770:	4c6a      	ldr	r4, [pc, #424]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4772:	47a0      	blx	r4
   a4774:	4603      	mov	r3, r0
   a4776:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a4778:	2300      	movs	r3, #0
   a477a:	9300      	str	r3, [sp, #0]
   a477c:	f04f 0300 	mov.w	r3, #0
   a4780:	f04f 0200 	mov.w	r2, #0
   a4784:	2100      	movs	r1, #0
   a4786:	203d      	movs	r0, #61	; 0x3d
   a4788:	4c64      	ldr	r4, [pc, #400]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a478a:	47a0      	blx	r4
   a478c:	4603      	mov	r3, r0
   a478e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a4790:	2300      	movs	r3, #0
   a4792:	9300      	str	r3, [sp, #0]
   a4794:	f04f 0300 	mov.w	r3, #0
   a4798:	f04f 0200 	mov.w	r2, #0
   a479c:	2101      	movs	r1, #1
   a479e:	203e      	movs	r0, #62	; 0x3e
   a47a0:	4c5e      	ldr	r4, [pc, #376]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a47a2:	47a0      	blx	r4
   a47a4:	4603      	mov	r3, r0
   a47a6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a47a8:	2300      	movs	r3, #0
   a47aa:	9300      	str	r3, [sp, #0]
   a47ac:	f04f 0300 	mov.w	r3, #0
   a47b0:	f04f 0200 	mov.w	r2, #0
   a47b4:	2100      	movs	r1, #0
   a47b6:	201a      	movs	r0, #26
   a47b8:	4c58      	ldr	r4, [pc, #352]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a47ba:	47a0      	blx	r4
   a47bc:	4603      	mov	r3, r0
   a47be:	75bb      	strb	r3, [r7, #22]
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(POWER_FAILURE,LOGIC_HIGH,0,0,0);
   a47c0:	2300      	movs	r3, #0
   a47c2:	9300      	str	r3, [sp, #0]
   a47c4:	f04f 0300 	mov.w	r3, #0
   a47c8:	f04f 0200 	mov.w	r2, #0
   a47cc:	2101      	movs	r1, #1
   a47ce:	201d      	movs	r0, #29
   a47d0:	4c52      	ldr	r4, [pc, #328]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a47d2:	47a0      	blx	r4
   a47d4:	4603      	mov	r3, r0
   a47d6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a47d8:	2300      	movs	r3, #0
   a47da:	9300      	str	r3, [sp, #0]
   a47dc:	f04f 0300 	mov.w	r3, #0
   a47e0:	f04f 0200 	mov.w	r2, #0
   a47e4:	2100      	movs	r1, #0
   a47e6:	200d      	movs	r0, #13
   a47e8:	4c4c      	ldr	r4, [pc, #304]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a47ea:	47a0      	blx	r4
   a47ec:	4603      	mov	r3, r0
   a47ee:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a47f0:	2300      	movs	r3, #0
   a47f2:	9300      	str	r3, [sp, #0]
   a47f4:	f04f 0300 	mov.w	r3, #0
   a47f8:	f04f 0200 	mov.w	r2, #0
   a47fc:	2100      	movs	r1, #0
   a47fe:	200c      	movs	r0, #12
   a4800:	4c46      	ldr	r4, [pc, #280]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4802:	47a0      	blx	r4
   a4804:	4603      	mov	r3, r0
   a4806:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a4808:	2300      	movs	r3, #0
   a480a:	9300      	str	r3, [sp, #0]
   a480c:	f04f 0300 	mov.w	r3, #0
   a4810:	4a43      	ldr	r2, [pc, #268]	; (a4920 <Cl_Rinse_StartRinse+0x41c>)
   a4812:	2100      	movs	r1, #0
   a4814:	200e      	movs	r0, #14
   a4816:	4c41      	ldr	r4, [pc, #260]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4818:	47a0      	blx	r4
   a481a:	4603      	mov	r3, r0
   a481c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,0,450,150,0);
   a481e:	2300      	movs	r3, #0
   a4820:	9300      	str	r3, [sp, #0]
   a4822:	4b40      	ldr	r3, [pc, #256]	; (a4924 <Cl_Rinse_StartRinse+0x420>)
   a4824:	4a40      	ldr	r2, [pc, #256]	; (a4928 <Cl_Rinse_StartRinse+0x424>)
   a4826:	2100      	movs	r1, #0
   a4828:	200f      	movs	r0, #15
   a482a:	4c3c      	ldr	r4, [pc, #240]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a482c:	47a0      	blx	r4
   a482e:	4603      	mov	r3, r0
   a4830:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,0,150,0,0);
   a4832:	2300      	movs	r3, #0
   a4834:	9300      	str	r3, [sp, #0]
   a4836:	f04f 0300 	mov.w	r3, #0
   a483a:	4a3a      	ldr	r2, [pc, #232]	; (a4924 <Cl_Rinse_StartRinse+0x420>)
   a483c:	2100      	movs	r1, #0
   a483e:	2010      	movs	r0, #16
   a4840:	4c36      	ldr	r4, [pc, #216]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4842:	47a0      	blx	r4
   a4844:	4603      	mov	r3, r0
   a4846:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,0,850,150,0);
   a4848:	2300      	movs	r3, #0
   a484a:	9300      	str	r3, [sp, #0]
   a484c:	4b35      	ldr	r3, [pc, #212]	; (a4924 <Cl_Rinse_StartRinse+0x420>)
   a484e:	4a37      	ldr	r2, [pc, #220]	; (a492c <Cl_Rinse_StartRinse+0x428>)
   a4850:	2100      	movs	r1, #0
   a4852:	2011      	movs	r0, #17
   a4854:	4c31      	ldr	r4, [pc, #196]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a4856:	47a0      	blx	r4
   a4858:	4603      	mov	r3, r0
   a485a:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,0,150,0,0);
   a485c:	2300      	movs	r3, #0
   a485e:	9300      	str	r3, [sp, #0]
   a4860:	f04f 0300 	mov.w	r3, #0
   a4864:	4a2f      	ldr	r2, [pc, #188]	; (a4924 <Cl_Rinse_StartRinse+0x420>)
   a4866:	2100      	movs	r1, #0
   a4868:	2012      	movs	r0, #18
   a486a:	4c2c      	ldr	r4, [pc, #176]	; (a491c <Cl_Rinse_StartRinse+0x418>)
   a486c:	47a0      	blx	r4
   a486e:	4603      	mov	r3, r0
   a4870:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				
				   Cl_rinseretcode =  Cl_AlarmActivateAlarms(POWER_FAILURE,true);
   a4872:	2101      	movs	r1, #1
   a4874:	201d      	movs	r0, #29
   a4876:	4b2e      	ldr	r3, [pc, #184]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a4878:	4798      	blx	r3
   a487a:	4603      	mov	r3, r0
   a487c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a487e:	2101      	movs	r1, #1
   a4880:	203d      	movs	r0, #61	; 0x3d
   a4882:	4b2b      	ldr	r3, [pc, #172]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a4884:	4798      	blx	r3
   a4886:	4603      	mov	r3, r0
   a4888:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a488a:	2101      	movs	r1, #1
   a488c:	203e      	movs	r0, #62	; 0x3e
   a488e:	4b28      	ldr	r3, [pc, #160]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a4890:	4798      	blx	r3
   a4892:	4603      	mov	r3, r0
   a4894:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   a4896:	2101      	movs	r1, #1
   a4898:	2029      	movs	r0, #41	; 0x29
   a489a:	4b25      	ldr	r3, [pc, #148]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a489c:	4798      	blx	r3
   a489e:	4603      	mov	r3, r0
   a48a0:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   a48a2:	2101      	movs	r1, #1
   a48a4:	202b      	movs	r0, #43	; 0x2b
   a48a6:	4b22      	ldr	r3, [pc, #136]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a48a8:	4798      	blx	r3
   a48aa:	4603      	mov	r3, r0
   a48ac:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a48ae:	2101      	movs	r1, #1
   a48b0:	2003      	movs	r0, #3
   a48b2:	4b1f      	ldr	r3, [pc, #124]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a48b4:	4798      	blx	r3
   a48b6:	4603      	mov	r3, r0
   a48b8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a48ba:	2101      	movs	r1, #1
   a48bc:	2004      	movs	r0, #4
   a48be:	4b1c      	ldr	r3, [pc, #112]	; (a4930 <Cl_Rinse_StartRinse+0x42c>)
   a48c0:	4798      	blx	r3
   a48c2:	4603      	mov	r3, r0
   a48c4:	e036      	b.n	a4934 <Cl_Rinse_StartRinse+0x430>
   a48c6:	bf00      	nop
   a48c8:	00099d79 	.word	0x00099d79
   a48cc:	00099d8d 	.word	0x00099d8d
   a48d0:	00099d51 	.word	0x00099d51
   a48d4:	000a41e5 	.word	0x000a41e5
   a48d8:	00099aa9 	.word	0x00099aa9
   a48dc:	00099b21 	.word	0x00099b21
   a48e0:	00099a09 	.word	0x00099a09
   a48e4:	00099f5d 	.word	0x00099f5d
   a48e8:	20072654 	.word	0x20072654
   a48ec:	20071944 	.word	0x20071944
   a48f0:	00095bbd 	.word	0x00095bbd
   a48f4:	00093009 	.word	0x00093009
   a48f8:	00095b75 	.word	0x00095b75
   a48fc:	000935a5 	.word	0x000935a5
   a4900:	000832a1 	.word	0x000832a1
   a4904:	00099f0d 	.word	0x00099f0d
   a4908:	20071c94 	.word	0x20071c94
   a490c:	20071ca0 	.word	0x20071ca0
   a4910:	20071ca8 	.word	0x20071ca8
   a4914:	00099bf5 	.word	0x00099bf5
   a4918:	00093665 	.word	0x00093665
   a491c:	00082d85 	.word	0x00082d85
   a4920:	44bb8000 	.word	0x44bb8000
   a4924:	43160000 	.word	0x43160000
   a4928:	43e10000 	.word	0x43e10000
   a492c:	44548000 	.word	0x44548000
   a4930:	00082de1 	.word	0x00082de1
   a4934:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a4936:	2101      	movs	r1, #1
   a4938:	2011      	movs	r0, #17
   a493a:	4b14      	ldr	r3, [pc, #80]	; (a498c <Cl_Rinse_StartRinse+0x488>)
   a493c:	4798      	blx	r3
   a493e:	4603      	mov	r3, r0
   a4940:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a4942:	2101      	movs	r1, #1
   a4944:	2012      	movs	r0, #18
   a4946:	4b11      	ldr	r3, [pc, #68]	; (a498c <Cl_Rinse_StartRinse+0x488>)
   a4948:	4798      	blx	r3
   a494a:	4603      	mov	r3, r0
   a494c:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a494e:	2101      	movs	r1, #1
   a4950:	2010      	movs	r0, #16
   a4952:	4b0e      	ldr	r3, [pc, #56]	; (a498c <Cl_Rinse_StartRinse+0x488>)
   a4954:	4798      	blx	r3
   a4956:	4603      	mov	r3, r0
   a4958:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a495a:	2101      	movs	r1, #1
   a495c:	200f      	movs	r0, #15
   a495e:	4b0b      	ldr	r3, [pc, #44]	; (a498c <Cl_Rinse_StartRinse+0x488>)
   a4960:	4798      	blx	r3
   a4962:	4603      	mov	r3, r0
   a4964:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a4966:	4b0a      	ldr	r3, [pc, #40]	; (a4990 <Cl_Rinse_StartRinse+0x48c>)
   a4968:	781b      	ldrb	r3, [r3, #0]
   a496a:	2b00      	cmp	r3, #0
   a496c:	d005      	beq.n	a497a <Cl_Rinse_StartRinse+0x476>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a496e:	2101      	movs	r1, #1
   a4970:	203c      	movs	r0, #60	; 0x3c
   a4972:	4b06      	ldr	r3, [pc, #24]	; (a498c <Cl_Rinse_StartRinse+0x488>)
   a4974:	4798      	blx	r3
   a4976:	4603      	mov	r3, r0
   a4978:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a497a:	4b06      	ldr	r3, [pc, #24]	; (a4994 <Cl_Rinse_StartRinse+0x490>)
   a497c:	4798      	blx	r3
   a497e:	4603      	mov	r3, r0
   a4980:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a4982:	2300      	movs	r3, #0
}
   a4984:	4618      	mov	r0, r3
   a4986:	371c      	adds	r7, #28
   a4988:	46bd      	mov	sp, r7
   a498a:	bd90      	pop	{r4, r7, pc}
   a498c:	00082de1 	.word	0x00082de1
   a4990:	20070a2a 	.word	0x20070a2a
   a4994:	000a3d79 	.word	0x000a3d79

000a4998 <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a4998:	b580      	push	{r7, lr}
   a499a:	b082      	sub	sp, #8
   a499c:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a499e:	2300      	movs	r3, #0
   a49a0:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				sv_cntrl_setredalarm();
   a49a2:	4b3e      	ldr	r3, [pc, #248]	; (a4a9c <Cl_Rinse_StopRinse+0x104>)
   a49a4:	4798      	blx	r3
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a49a6:	2100      	movs	r1, #0
   a49a8:	2001      	movs	r0, #1
   a49aa:	4b3d      	ldr	r3, [pc, #244]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49ac:	4798      	blx	r3
   a49ae:	4603      	mov	r3, r0
   a49b0:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a49b2:	2100      	movs	r1, #0
   a49b4:	203d      	movs	r0, #61	; 0x3d
   a49b6:	4b3a      	ldr	r3, [pc, #232]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49b8:	4798      	blx	r3
   a49ba:	4603      	mov	r3, r0
   a49bc:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a49be:	2100      	movs	r1, #0
   a49c0:	203e      	movs	r0, #62	; 0x3e
   a49c2:	4b37      	ldr	r3, [pc, #220]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49c4:	4798      	blx	r3
   a49c6:	4603      	mov	r3, r0
   a49c8:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a49ca:	2100      	movs	r1, #0
   a49cc:	200d      	movs	r0, #13
   a49ce:	4b34      	ldr	r3, [pc, #208]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49d0:	4798      	blx	r3
   a49d2:	4603      	mov	r3, r0
   a49d4:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a49d6:	2100      	movs	r1, #0
   a49d8:	200c      	movs	r0, #12
   a49da:	4b31      	ldr	r3, [pc, #196]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49dc:	4798      	blx	r3
   a49de:	4603      	mov	r3, r0
   a49e0:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a49e2:	2100      	movs	r1, #0
   a49e4:	200d      	movs	r0, #13
   a49e6:	4b2e      	ldr	r3, [pc, #184]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49e8:	4798      	blx	r3
   a49ea:	4603      	mov	r3, r0
   a49ec:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a49ee:	2100      	movs	r1, #0
   a49f0:	2029      	movs	r0, #41	; 0x29
   a49f2:	4b2b      	ldr	r3, [pc, #172]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a49f4:	4798      	blx	r3
   a49f6:	4603      	mov	r3, r0
   a49f8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a49fa:	2100      	movs	r1, #0
   a49fc:	202b      	movs	r0, #43	; 0x2b
   a49fe:	4b28      	ldr	r3, [pc, #160]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a4a00:	4798      	blx	r3
   a4a02:	4603      	mov	r3, r0
   a4a04:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a4a06:	2100      	movs	r1, #0
   a4a08:	2003      	movs	r0, #3
   a4a0a:	4b25      	ldr	r3, [pc, #148]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a4a0c:	4798      	blx	r3
   a4a0e:	4603      	mov	r3, r0
   a4a10:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a4a12:	2100      	movs	r1, #0
   a4a14:	2004      	movs	r0, #4
   a4a16:	4b22      	ldr	r3, [pc, #136]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a4a18:	4798      	blx	r3
   a4a1a:	4603      	mov	r3, r0
   a4a1c:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a4a1e:	2100      	movs	r1, #0
   a4a20:	201a      	movs	r0, #26
   a4a22:	4b1f      	ldr	r3, [pc, #124]	; (a4aa0 <Cl_Rinse_StopRinse+0x108>)
   a4a24:	4798      	blx	r3
   a4a26:	4603      	mov	r3, r0
   a4a28:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a4a2a:	4b1e      	ldr	r3, [pc, #120]	; (a4aa4 <Cl_Rinse_StopRinse+0x10c>)
   a4a2c:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a4a2e:	4b1e      	ldr	r3, [pc, #120]	; (a4aa8 <Cl_Rinse_StopRinse+0x110>)
   a4a30:	781b      	ldrb	r3, [r3, #0]
   a4a32:	2b00      	cmp	r3, #0
   a4a34:	d02c      	beq.n	a4a90 <Cl_Rinse_StopRinse+0xf8>
   a4a36:	4b1c      	ldr	r3, [pc, #112]	; (a4aa8 <Cl_Rinse_StopRinse+0x110>)
   a4a38:	781b      	ldrb	r3, [r3, #0]
   a4a3a:	2b08      	cmp	r3, #8
   a4a3c:	d028      	beq.n	a4a90 <Cl_Rinse_StopRinse+0xf8>
   a4a3e:	4b1a      	ldr	r3, [pc, #104]	; (a4aa8 <Cl_Rinse_StopRinse+0x110>)
   a4a40:	781b      	ldrb	r3, [r3, #0]
   a4a42:	2b06      	cmp	r3, #6
   a4a44:	d024      	beq.n	a4a90 <Cl_Rinse_StopRinse+0xf8>
// 					}
// 					else{
// 						
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a4a46:	4b19      	ldr	r3, [pc, #100]	; (a4aac <Cl_Rinse_StopRinse+0x114>)
   a4a48:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a4a4a:	4b19      	ldr	r3, [pc, #100]	; (a4ab0 <Cl_Rinse_StopRinse+0x118>)
   a4a4c:	2200      	movs	r2, #0
   a4a4e:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a4a50:	4b18      	ldr	r3, [pc, #96]	; (a4ab4 <Cl_Rinse_StopRinse+0x11c>)
   a4a52:	2200      	movs	r2, #0
   a4a54:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a4a56:	4b18      	ldr	r3, [pc, #96]	; (a4ab8 <Cl_Rinse_StopRinse+0x120>)
   a4a58:	2200      	movs	r2, #0
   a4a5a:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a4a5c:	4b17      	ldr	r3, [pc, #92]	; (a4abc <Cl_Rinse_StopRinse+0x124>)
   a4a5e:	2200      	movs	r2, #0
   a4a60:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a4a62:	2005      	movs	r0, #5
   a4a64:	4b16      	ldr	r3, [pc, #88]	; (a4ac0 <Cl_Rinse_StopRinse+0x128>)
   a4a66:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a4a68:	200d      	movs	r0, #13
   a4a6a:	4b15      	ldr	r3, [pc, #84]	; (a4ac0 <Cl_Rinse_StopRinse+0x128>)
   a4a6c:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a4a6e:	2100      	movs	r1, #0
   a4a70:	2004      	movs	r0, #4
   a4a72:	4b14      	ldr	r3, [pc, #80]	; (a4ac4 <Cl_Rinse_StopRinse+0x12c>)
   a4a74:	4798      	blx	r3
				sv_prop_stopmixing();
   a4a76:	4b14      	ldr	r3, [pc, #80]	; (a4ac8 <Cl_Rinse_StopRinse+0x130>)
   a4a78:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a4a7a:	4b0b      	ldr	r3, [pc, #44]	; (a4aa8 <Cl_Rinse_StopRinse+0x110>)
   a4a7c:	2200      	movs	r2, #0
   a4a7e:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a4a80:	1dbb      	adds	r3, r7, #6
   a4a82:	2200      	movs	r2, #0
   a4a84:	4619      	mov	r1, r3
   a4a86:	2022      	movs	r0, #34	; 0x22
   a4a88:	4b10      	ldr	r3, [pc, #64]	; (a4acc <Cl_Rinse_StopRinse+0x134>)
   a4a8a:	4798      	blx	r3
   a4a8c:	4603      	mov	r3, r0
   a4a8e:	71fb      	strb	r3, [r7, #7]
//					}
					
				}
			
				return Cl_rinseretcode;
   a4a90:	79fb      	ldrb	r3, [r7, #7]
}
   a4a92:	4618      	mov	r0, r3
   a4a94:	3708      	adds	r7, #8
   a4a96:	46bd      	mov	sp, r7
   a4a98:	bd80      	pop	{r7, pc}
   a4a9a:	bf00      	nop
   a4a9c:	00099d01 	.word	0x00099d01
   a4aa0:	00082de1 	.word	0x00082de1
   a4aa4:	000a3d79 	.word	0x000a3d79
   a4aa8:	20071c8e 	.word	0x20071c8e
   a4aac:	00099bf5 	.word	0x00099bf5
   a4ab0:	20071c90 	.word	0x20071c90
   a4ab4:	20071c94 	.word	0x20071c94
   a4ab8:	20071ca0 	.word	0x20071ca0
   a4abc:	20071ca4 	.word	0x20071ca4
   a4ac0:	000832a1 	.word	0x000832a1
   a4ac4:	00095bbd 	.word	0x00095bbd
   a4ac8:	00099ea9 	.word	0x00099ea9
   a4acc:	0009b805 	.word	0x0009b805

000a4ad0 <Cl_Standby_Controller>:
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a4ad0:	b580      	push	{r7, lr}
   a4ad2:	b08a      	sub	sp, #40	; 0x28
   a4ad4:	af00      	add	r7, sp, #0
   a4ad6:	4603      	mov	r3, r0
   a4ad8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a4ada:	2351      	movs	r3, #81	; 0x51
   a4adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_Uint8Type data =0;
   a4ae0:	2300      	movs	r3, #0
   a4ae2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		Cl_Uint8Type dataarray[4];
		ClStbyAlarmIdType ClstbyAlarmId;
						STBStateDatatype abfdata;
						Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a4ae6:	f107 0310 	add.w	r3, r7, #16
   a4aea:	2200      	movs	r2, #0
   a4aec:	601a      	str	r2, [r3, #0]
   a4aee:	711a      	strb	r2, [r3, #4]

		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a4af0:	f107 0225 	add.w	r2, r7, #37	; 0x25
   a4af4:	79fb      	ldrb	r3, [r7, #7]
   a4af6:	4611      	mov	r1, r2
   a4af8:	4618      	mov	r0, r3
   a4afa:	4b9d      	ldr	r3, [pc, #628]	; (a4d70 <Cl_Standby_Controller+0x2a0>)
   a4afc:	4798      	blx	r3
   a4afe:	4603      	mov	r3, r0
   a4b00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		switch(cl_stbystate)
   a4b04:	4b9b      	ldr	r3, [pc, #620]	; (a4d74 <Cl_Standby_Controller+0x2a4>)
   a4b06:	781b      	ldrb	r3, [r3, #0]
   a4b08:	2b0a      	cmp	r3, #10
   a4b0a:	f200 849a 	bhi.w	a5442 <Cl_Standby_Controller+0x972>
   a4b0e:	a201      	add	r2, pc, #4	; (adr r2, a4b14 <Cl_Standby_Controller+0x44>)
   a4b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4b14:	000a5443 	.word	0x000a5443
   a4b18:	000a4b41 	.word	0x000a4b41
   a4b1c:	000a4c81 	.word	0x000a4c81
   a4b20:	000a4f47 	.word	0x000a4f47
   a4b24:	000a50b9 	.word	0x000a50b9
   a4b28:	000a51b5 	.word	0x000a51b5
   a4b2c:	000a5253 	.word	0x000a5253
   a4b30:	000a52ef 	.word	0x000a52ef
   a4b34:	000a53a5 	.word	0x000a53a5
   a4b38:	000a5443 	.word	0x000a5443
   a4b3c:	000a5443 	.word	0x000a5443
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a4b40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a4b44:	2b0f      	cmp	r3, #15
   a4b46:	d02a      	beq.n	a4b9e <Cl_Standby_Controller+0xce>
   a4b48:	2b0f      	cmp	r3, #15
   a4b4a:	dc04      	bgt.n	a4b56 <Cl_Standby_Controller+0x86>
   a4b4c:	2b01      	cmp	r3, #1
   a4b4e:	d009      	beq.n	a4b64 <Cl_Standby_Controller+0x94>
   a4b50:	2b0e      	cmp	r3, #14
   a4b52:	d01c      	beq.n	a4b8e <Cl_Standby_Controller+0xbe>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a4b54:	e093      	b.n	a4c7e <Cl_Standby_Controller+0x1ae>
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a4b56:	2b5b      	cmp	r3, #91	; 0x5b
   a4b58:	d043      	beq.n	a4be2 <Cl_Standby_Controller+0x112>
   a4b5a:	2b5c      	cmp	r3, #92	; 0x5c
   a4b5c:	d066      	beq.n	a4c2c <Cl_Standby_Controller+0x15c>
   a4b5e:	2b10      	cmp	r3, #16
   a4b60:	d025      	beq.n	a4bae <Cl_Standby_Controller+0xde>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a4b62:	e08c      	b.n	a4c7e <Cl_Standby_Controller+0x1ae>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a4b64:	2316      	movs	r3, #22
   a4b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a4b6a:	2311      	movs	r3, #17
   a4b6c:	f887 3020 	strb.w	r3, [r7, #32]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a4b70:	230e      	movs	r3, #14
   a4b72:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a4b76:	f107 0120 	add.w	r1, r7, #32
   a4b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4b7e:	2202      	movs	r2, #2
   a4b80:	4618      	mov	r0, r3
   a4b82:	4b7d      	ldr	r3, [pc, #500]	; (a4d78 <Cl_Standby_Controller+0x2a8>)
   a4b84:	4798      	blx	r3
   a4b86:	4603      	mov	r3, r0
   a4b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a4b8c:	e077      	b.n	a4c7e <Cl_Standby_Controller+0x1ae>
				case EVENT_STBY_SET_BLDPMP_ON:
				prev_bpstate = 1;
   a4b8e:	4b7b      	ldr	r3, [pc, #492]	; (a4d7c <Cl_Standby_Controller+0x2ac>)
   a4b90:	2201      	movs	r2, #1
   a4b92:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_START,0);
   a4b94:	2100      	movs	r1, #0
   a4b96:	2002      	movs	r0, #2
   a4b98:	4b79      	ldr	r3, [pc, #484]	; (a4d80 <Cl_Standby_Controller+0x2b0>)
   a4b9a:	4798      	blx	r3
				break;
   a4b9c:	e06f      	b.n	a4c7e <Cl_Standby_Controller+0x1ae>
				case EVENT_STBY_SET_BLDPMP_OFF:
				prev_bpstate = 0;
   a4b9e:	4b77      	ldr	r3, [pc, #476]	; (a4d7c <Cl_Standby_Controller+0x2ac>)
   a4ba0:	2200      	movs	r2, #0
   a4ba2:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a4ba4:	2100      	movs	r1, #0
   a4ba6:	2004      	movs	r0, #4
   a4ba8:	4b75      	ldr	r3, [pc, #468]	; (a4d80 <Cl_Standby_Controller+0x2b0>)
   a4baa:	4798      	blx	r3
				break;
   a4bac:	e067      	b.n	a4c7e <Cl_Standby_Controller+0x1ae>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a4bae:	4b75      	ldr	r3, [pc, #468]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4bb0:	7e1b      	ldrb	r3, [r3, #24]
   a4bb2:	2b00      	cmp	r3, #0
   a4bb4:	d05e      	beq.n	a4c74 <Cl_Standby_Controller+0x1a4>
					{
						
						
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4bb6:	4b73      	ldr	r3, [pc, #460]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4bb8:	791b      	ldrb	r3, [r3, #4]
   a4bba:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a4bbc:	4b71      	ldr	r3, [pc, #452]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4bbe:	795b      	ldrb	r3, [r3, #5]
   a4bc0:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a4bc2:	4b70      	ldr	r3, [pc, #448]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4bc4:	799b      	ldrb	r3, [r3, #6]
   a4bc6:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a4bc8:	4b6e      	ldr	r3, [pc, #440]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4bca:	79db      	ldrb	r3, [r3, #7]
   a4bcc:	73fb      	strb	r3, [r7, #15]
						
						Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a4bce:	89bb      	ldrh	r3, [r7, #12]
   a4bd0:	461a      	mov	r2, r3
   a4bd2:	4b6d      	ldr	r3, [pc, #436]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4bd4:	63da      	str	r2, [r3, #60]	; 0x3c
						
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a4bd6:	89bb      	ldrh	r3, [r7, #12]
   a4bd8:	4619      	mov	r1, r3
   a4bda:	2001      	movs	r0, #1
   a4bdc:	4b68      	ldr	r3, [pc, #416]	; (a4d80 <Cl_Standby_Controller+0x2b0>)
   a4bde:	4798      	blx	r3
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4be0:	e048      	b.n	a4c74 <Cl_Standby_Controller+0x1a4>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
				
				if(Treatdata[ID_bloodrate] <= 450){
   a4be2:	4b69      	ldr	r3, [pc, #420]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4be6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a4bea:	d845      	bhi.n	a4c78 <Cl_Standby_Controller+0x1a8>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a4bec:	4b66      	ldr	r3, [pc, #408]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4bf0:	330a      	adds	r3, #10
   a4bf2:	4a65      	ldr	r2, [pc, #404]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4bf4:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a4bf6:	4b64      	ldr	r3, [pc, #400]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4bfa:	4619      	mov	r1, r3
   a4bfc:	2001      	movs	r0, #1
   a4bfe:	4b60      	ldr	r3, [pc, #384]	; (a4d80 <Cl_Standby_Controller+0x2b0>)
   a4c00:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a4c02:	230f      	movs	r3, #15
   a4c04:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a4c06:	4b60      	ldr	r3, [pc, #384]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4c0a:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a4c0c:	7e3b      	ldrb	r3, [r7, #24]
   a4c0e:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a4c10:	7e7b      	ldrb	r3, [r7, #25]
   a4c12:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a4c14:	7ebb      	ldrb	r3, [r7, #26]
   a4c16:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a4c18:	7efb      	ldrb	r3, [r7, #27]
   a4c1a:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a4c1c:	f107 0310 	add.w	r3, r7, #16
   a4c20:	2205      	movs	r2, #5
   a4c22:	4619      	mov	r1, r3
   a4c24:	202a      	movs	r0, #42	; 0x2a
   a4c26:	4b54      	ldr	r3, [pc, #336]	; (a4d78 <Cl_Standby_Controller+0x2a8>)
   a4c28:	4798      	blx	r3
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4c2a:	e025      	b.n	a4c78 <Cl_Standby_Controller+0x1a8>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
				
				if(Treatdata[ID_bloodrate] >= 100){
   a4c2c:	4b56      	ldr	r3, [pc, #344]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4c30:	2b63      	cmp	r3, #99	; 0x63
   a4c32:	d923      	bls.n	a4c7c <Cl_Standby_Controller+0x1ac>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a4c34:	4b54      	ldr	r3, [pc, #336]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4c38:	3b0a      	subs	r3, #10
   a4c3a:	4a53      	ldr	r2, [pc, #332]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c3c:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a4c3e:	4b52      	ldr	r3, [pc, #328]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4c42:	4619      	mov	r1, r3
   a4c44:	2001      	movs	r0, #1
   a4c46:	4b4e      	ldr	r3, [pc, #312]	; (a4d80 <Cl_Standby_Controller+0x2b0>)
   a4c48:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a4c4a:	230f      	movs	r3, #15
   a4c4c:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a4c4e:	4b4e      	ldr	r3, [pc, #312]	; (a4d88 <Cl_Standby_Controller+0x2b8>)
   a4c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4c52:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a4c54:	7e3b      	ldrb	r3, [r7, #24]
   a4c56:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a4c58:	7e7b      	ldrb	r3, [r7, #25]
   a4c5a:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a4c5c:	7ebb      	ldrb	r3, [r7, #26]
   a4c5e:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a4c60:	7efb      	ldrb	r3, [r7, #27]
   a4c62:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a4c64:	f107 0310 	add.w	r3, r7, #16
   a4c68:	2205      	movs	r2, #5
   a4c6a:	4619      	mov	r1, r3
   a4c6c:	202a      	movs	r0, #42	; 0x2a
   a4c6e:	4b42      	ldr	r3, [pc, #264]	; (a4d78 <Cl_Standby_Controller+0x2a8>)
   a4c70:	4798      	blx	r3
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4c72:	e003      	b.n	a4c7c <Cl_Standby_Controller+0x1ac>
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4c74:	bf00      	nop
   a4c76:	e3e5      	b.n	a5444 <Cl_Standby_Controller+0x974>
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4c78:	bf00      	nop
   a4c7a:	e3e3      	b.n	a5444 <Cl_Standby_Controller+0x974>
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4c7c:	bf00      	nop
				default:
				break;	
				}


				break;
   a4c7e:	e3e1      	b.n	a5444 <Cl_Standby_Controller+0x974>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a4c80:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a4c84:	3b01      	subs	r3, #1
   a4c86:	2b0c      	cmp	r3, #12
   a4c88:	f200 8157 	bhi.w	a4f3a <Cl_Standby_Controller+0x46a>
   a4c8c:	a201      	add	r2, pc, #4	; (adr r2, a4c94 <Cl_Standby_Controller+0x1c4>)
   a4c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4c92:	bf00      	nop
   a4c94:	000a4ef1 	.word	0x000a4ef1
   a4c98:	000a4f3b 	.word	0x000a4f3b
   a4c9c:	000a4f3b 	.word	0x000a4f3b
   a4ca0:	000a4f3b 	.word	0x000a4f3b
   a4ca4:	000a4f3b 	.word	0x000a4f3b
   a4ca8:	000a4f17 	.word	0x000a4f17
   a4cac:	000a4f2d 	.word	0x000a4f2d
   a4cb0:	000a4f3b 	.word	0x000a4f3b
   a4cb4:	000a4ef9 	.word	0x000a4ef9
   a4cb8:	000a4cd1 	.word	0x000a4cd1
   a4cbc:	000a4d91 	.word	0x000a4d91
   a4cc0:	000a4cc9 	.word	0x000a4cc9
   a4cc4:	000a4f3b 	.word	0x000a4f3b
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a4cc8:	4b2a      	ldr	r3, [pc, #168]	; (a4d74 <Cl_Standby_Controller+0x2a4>)
   a4cca:	2201      	movs	r2, #1
   a4ccc:	701a      	strb	r2, [r3, #0]
					break;
   a4cce:	e139      	b.n	a4f44 <Cl_Standby_Controller+0x474>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a4cd0:	4b2c      	ldr	r3, [pc, #176]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4cd2:	7e1b      	ldrb	r3, [r3, #24]
   a4cd4:	2b00      	cmp	r3, #0
   a4cd6:	f000 8132 	beq.w	a4f3e <Cl_Standby_Controller+0x46e>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a4cda:	4b2a      	ldr	r3, [pc, #168]	; (a4d84 <Cl_Standby_Controller+0x2b4>)
   a4cdc:	791b      	ldrb	r3, [r3, #4]
   a4cde:	2b01      	cmp	r3, #1
   a4ce0:	d002      	beq.n	a4ce8 <Cl_Standby_Controller+0x218>
   a4ce2:	2b21      	cmp	r3, #33	; 0x21
   a4ce4:	d01c      	beq.n	a4d20 <Cl_Standby_Controller+0x250>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a4ce6:	e041      	b.n	a4d6c <Cl_Standby_Controller+0x29c>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a4ce8:	2316      	movs	r3, #22
   a4cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a4cee:	2301      	movs	r3, #1
   a4cf0:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a4cf4:	f107 0320 	add.w	r3, r7, #32
   a4cf8:	3301      	adds	r3, #1
   a4cfa:	4619      	mov	r1, r3
   a4cfc:	2001      	movs	r0, #1
   a4cfe:	4b23      	ldr	r3, [pc, #140]	; (a4d8c <Cl_Standby_Controller+0x2bc>)
   a4d00:	4798      	blx	r3
   a4d02:	4603      	mov	r3, r0
   a4d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a4d08:	f107 0120 	add.w	r1, r7, #32
   a4d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4d10:	2202      	movs	r2, #2
   a4d12:	4618      	mov	r0, r3
   a4d14:	4b18      	ldr	r3, [pc, #96]	; (a4d78 <Cl_Standby_Controller+0x2a8>)
   a4d16:	4798      	blx	r3
   a4d18:	4603      	mov	r3, r0
   a4d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//cl_wait(100);
							break;
   a4d1e:	e025      	b.n	a4d6c <Cl_Standby_Controller+0x29c>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a4d20:	2316      	movs	r3, #22
   a4d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a4d26:	2323      	movs	r3, #35	; 0x23
   a4d28:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a4d2c:	f107 0320 	add.w	r3, r7, #32
   a4d30:	3301      	adds	r3, #1
   a4d32:	4619      	mov	r1, r3
   a4d34:	2001      	movs	r0, #1
   a4d36:	4b15      	ldr	r3, [pc, #84]	; (a4d8c <Cl_Standby_Controller+0x2bc>)
   a4d38:	4798      	blx	r3
   a4d3a:	4603      	mov	r3, r0
   a4d3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a4d40:	f107 0320 	add.w	r3, r7, #32
   a4d44:	3301      	adds	r3, #1
   a4d46:	4619      	mov	r1, r3
   a4d48:	2028      	movs	r0, #40	; 0x28
   a4d4a:	4b10      	ldr	r3, [pc, #64]	; (a4d8c <Cl_Standby_Controller+0x2bc>)
   a4d4c:	4798      	blx	r3
   a4d4e:	4603      	mov	r3, r0
   a4d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a4d54:	f107 0120 	add.w	r1, r7, #32
   a4d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4d5c:	2202      	movs	r2, #2
   a4d5e:	4618      	mov	r0, r3
   a4d60:	4b05      	ldr	r3, [pc, #20]	; (a4d78 <Cl_Standby_Controller+0x2a8>)
   a4d62:	4798      	blx	r3
   a4d64:	4603      	mov	r3, r0
   a4d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

							break;
   a4d6a:	bf00      	nop
							break;
						}

					}
				}
				break;
   a4d6c:	e0e7      	b.n	a4f3e <Cl_Standby_Controller+0x46e>
   a4d6e:	bf00      	nop
   a4d70:	000a545d 	.word	0x000a545d
   a4d74:	20070db0 	.word	0x20070db0
   a4d78:	0009b805 	.word	0x0009b805
   a4d7c:	20071990 	.word	0x20071990
   a4d80:	0009316d 	.word	0x0009316d
   a4d84:	200723e8 	.word	0x200723e8
   a4d88:	20072654 	.word	0x20072654
   a4d8c:	0009a331 	.word	0x0009a331
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a4d90:	4bb3      	ldr	r3, [pc, #716]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4d92:	7e1b      	ldrb	r3, [r3, #24]
   a4d94:	2b00      	cmp	r3, #0
   a4d96:	f000 80d4 	beq.w	a4f42 <Cl_Standby_Controller+0x472>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a4d9a:	4bb1      	ldr	r3, [pc, #708]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4d9c:	795b      	ldrb	r3, [r3, #5]
   a4d9e:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a4da0:	4baf      	ldr	r3, [pc, #700]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4da2:	799b      	ldrb	r3, [r3, #6]
   a4da4:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a4da6:	4bae      	ldr	r3, [pc, #696]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4da8:	79db      	ldrb	r3, [r3, #7]
   a4daa:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a4dac:	4bac      	ldr	r3, [pc, #688]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4dae:	7a1b      	ldrb	r3, [r3, #8]
   a4db0:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a4db2:	4bab      	ldr	r3, [pc, #684]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4db4:	791b      	ldrb	r3, [r3, #4]
   a4db6:	3b05      	subs	r3, #5
   a4db8:	2b20      	cmp	r3, #32
   a4dba:	f200 8097 	bhi.w	a4eec <Cl_Standby_Controller+0x41c>
   a4dbe:	a201      	add	r2, pc, #4	; (adr r2, a4dc4 <Cl_Standby_Controller+0x2f4>)
   a4dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4dc4:	000a4eed 	.word	0x000a4eed
   a4dc8:	000a4eed 	.word	0x000a4eed
   a4dcc:	000a4eed 	.word	0x000a4eed
   a4dd0:	000a4eed 	.word	0x000a4eed
   a4dd4:	000a4eed 	.word	0x000a4eed
   a4dd8:	000a4eed 	.word	0x000a4eed
   a4ddc:	000a4eed 	.word	0x000a4eed
   a4de0:	000a4eed 	.word	0x000a4eed
   a4de4:	000a4eed 	.word	0x000a4eed
   a4de8:	000a4eed 	.word	0x000a4eed
   a4dec:	000a4eed 	.word	0x000a4eed
   a4df0:	000a4eed 	.word	0x000a4eed
   a4df4:	000a4eed 	.word	0x000a4eed
   a4df8:	000a4eed 	.word	0x000a4eed
   a4dfc:	000a4eed 	.word	0x000a4eed
   a4e00:	000a4eed 	.word	0x000a4eed
   a4e04:	000a4eed 	.word	0x000a4eed
   a4e08:	000a4eed 	.word	0x000a4eed
   a4e0c:	000a4eed 	.word	0x000a4eed
   a4e10:	000a4e49 	.word	0x000a4e49
   a4e14:	000a4e61 	.word	0x000a4e61
   a4e18:	000a4e79 	.word	0x000a4e79
   a4e1c:	000a4e89 	.word	0x000a4e89
   a4e20:	000a4e99 	.word	0x000a4e99
   a4e24:	000a4ea9 	.word	0x000a4ea9
   a4e28:	000a4eed 	.word	0x000a4eed
   a4e2c:	000a4eed 	.word	0x000a4eed
   a4e30:	000a4eed 	.word	0x000a4eed
   a4e34:	000a4eed 	.word	0x000a4eed
   a4e38:	000a4eb9 	.word	0x000a4eb9
   a4e3c:	000a4ec3 	.word	0x000a4ec3
   a4e40:	000a4ecd 	.word	0x000a4ecd
   a4e44:	000a4edd 	.word	0x000a4edd
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a4e48:	68bb      	ldr	r3, [r7, #8]
   a4e4a:	4a86      	ldr	r2, [pc, #536]	; (a5064 <Cl_Standby_Controller+0x594>)
   a4e4c:	fba2 2303 	umull	r2, r3, r2, r3
   a4e50:	08da      	lsrs	r2, r3, #3
   a4e52:	4b85      	ldr	r3, [pc, #532]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4e54:	4610      	mov	r0, r2
   a4e56:	4798      	blx	r3
   a4e58:	4602      	mov	r2, r0
   a4e5a:	4b84      	ldr	r3, [pc, #528]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4e5c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a4e5e:	e046      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a4e60:	68bb      	ldr	r3, [r7, #8]
   a4e62:	4a80      	ldr	r2, [pc, #512]	; (a5064 <Cl_Standby_Controller+0x594>)
   a4e64:	fba2 2303 	umull	r2, r3, r2, r3
   a4e68:	08da      	lsrs	r2, r3, #3
   a4e6a:	4b7f      	ldr	r3, [pc, #508]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4e6c:	4610      	mov	r0, r2
   a4e6e:	4798      	blx	r3
   a4e70:	4602      	mov	r2, r0
   a4e72:	4b7e      	ldr	r3, [pc, #504]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4e74:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a4e76:	e03a      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a4e78:	68ba      	ldr	r2, [r7, #8]
   a4e7a:	4b7b      	ldr	r3, [pc, #492]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4e7c:	4610      	mov	r0, r2
   a4e7e:	4798      	blx	r3
   a4e80:	4602      	mov	r2, r0
   a4e82:	4b7a      	ldr	r3, [pc, #488]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4e84:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a4e86:	e032      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a4e88:	68ba      	ldr	r2, [r7, #8]
   a4e8a:	4b77      	ldr	r3, [pc, #476]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4e8c:	4610      	mov	r0, r2
   a4e8e:	4798      	blx	r3
   a4e90:	4602      	mov	r2, r0
   a4e92:	4b76      	ldr	r3, [pc, #472]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4e94:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a4e96:	e02a      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a4e98:	68ba      	ldr	r2, [r7, #8]
   a4e9a:	4b73      	ldr	r3, [pc, #460]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4e9c:	4610      	mov	r0, r2
   a4e9e:	4798      	blx	r3
   a4ea0:	4602      	mov	r2, r0
   a4ea2:	4b72      	ldr	r3, [pc, #456]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4ea4:	615a      	str	r2, [r3, #20]
						break;
   a4ea6:	e022      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a4ea8:	68ba      	ldr	r2, [r7, #8]
   a4eaa:	4b6f      	ldr	r3, [pc, #444]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4eac:	4610      	mov	r0, r2
   a4eae:	4798      	blx	r3
   a4eb0:	4602      	mov	r2, r0
   a4eb2:	4b6e      	ldr	r3, [pc, #440]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4eb4:	611a      	str	r2, [r3, #16]
						break;
   a4eb6:	e01a      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a4eb8:	68bb      	ldr	r3, [r7, #8]
   a4eba:	b21a      	sxth	r2, r3
   a4ebc:	4b6b      	ldr	r3, [pc, #428]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4ebe:	801a      	strh	r2, [r3, #0]
						break;
   a4ec0:	e015      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a4ec2:	68bb      	ldr	r3, [r7, #8]
   a4ec4:	b21a      	sxth	r2, r3
   a4ec6:	4b69      	ldr	r3, [pc, #420]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4ec8:	805a      	strh	r2, [r3, #2]
						break;
   a4eca:	e010      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a4ecc:	68ba      	ldr	r2, [r7, #8]
   a4ece:	4b66      	ldr	r3, [pc, #408]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4ed0:	4610      	mov	r0, r2
   a4ed2:	4798      	blx	r3
   a4ed4:	4602      	mov	r2, r0
   a4ed6:	4b65      	ldr	r3, [pc, #404]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4ed8:	60da      	str	r2, [r3, #12]
						break;
   a4eda:	e008      	b.n	a4eee <Cl_Standby_Controller+0x41e>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a4edc:	68ba      	ldr	r2, [r7, #8]
   a4ede:	4b62      	ldr	r3, [pc, #392]	; (a5068 <Cl_Standby_Controller+0x598>)
   a4ee0:	4610      	mov	r0, r2
   a4ee2:	4798      	blx	r3
   a4ee4:	4602      	mov	r2, r0
   a4ee6:	4b61      	ldr	r3, [pc, #388]	; (a506c <Cl_Standby_Controller+0x59c>)
   a4ee8:	609a      	str	r2, [r3, #8]
						break;
   a4eea:	e000      	b.n	a4eee <Cl_Standby_Controller+0x41e>

						default:break;
   a4eec:	bf00      	nop
					}
				}
				break;
   a4eee:	e028      	b.n	a4f42 <Cl_Standby_Controller+0x472>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a4ef0:	4b5f      	ldr	r3, [pc, #380]	; (a5070 <Cl_Standby_Controller+0x5a0>)
   a4ef2:	2201      	movs	r2, #1
   a4ef4:	701a      	strb	r2, [r3, #0]

				break;
   a4ef6:	e025      	b.n	a4f44 <Cl_Standby_Controller+0x474>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a4ef8:	2307      	movs	r3, #7
   a4efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a4efe:	f107 0124 	add.w	r1, r7, #36	; 0x24
   a4f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4f06:	2200      	movs	r2, #0
   a4f08:	4618      	mov	r0, r3
   a4f0a:	4b5a      	ldr	r3, [pc, #360]	; (a5074 <Cl_Standby_Controller+0x5a4>)
   a4f0c:	4798      	blx	r3
   a4f0e:	4603      	mov	r3, r0
   a4f10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a4f14:	e016      	b.n	a4f44 <Cl_Standby_Controller+0x474>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a4f16:	4b58      	ldr	r3, [pc, #352]	; (a5078 <Cl_Standby_Controller+0x5a8>)
   a4f18:	681b      	ldr	r3, [r3, #0]
   a4f1a:	3301      	adds	r3, #1
   a4f1c:	4a56      	ldr	r2, [pc, #344]	; (a5078 <Cl_Standby_Controller+0x5a8>)
   a4f1e:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a4f20:	4b56      	ldr	r3, [pc, #344]	; (a507c <Cl_Standby_Controller+0x5ac>)
   a4f22:	4798      	blx	r3
   a4f24:	4603      	mov	r3, r0
   a4f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a4f2a:	e00b      	b.n	a4f44 <Cl_Standby_Controller+0x474>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a4f2c:	4b52      	ldr	r3, [pc, #328]	; (a5078 <Cl_Standby_Controller+0x5a8>)
   a4f2e:	2200      	movs	r2, #0
   a4f30:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a4f32:	4b4f      	ldr	r3, [pc, #316]	; (a5070 <Cl_Standby_Controller+0x5a0>)
   a4f34:	2201      	movs	r2, #1
   a4f36:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a4f38:	e004      	b.n	a4f44 <Cl_Standby_Controller+0x474>
			//	printf("H");
				break;

				
				default:
				break;
   a4f3a:	bf00      	nop
   a4f3c:	e282      	b.n	a5444 <Cl_Standby_Controller+0x974>
							break;
						}

					}
				}
				break;
   a4f3e:	bf00      	nop
   a4f40:	e280      	b.n	a5444 <Cl_Standby_Controller+0x974>
						break;

						default:break;
					}
				}
				break;
   a4f42:	bf00      	nop

				
				default:
				break;
			}
			break;
   a4f44:	e27e      	b.n	a5444 <Cl_Standby_Controller+0x974>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a4f46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a4f4a:	3b06      	subs	r3, #6
   a4f4c:	2b07      	cmp	r3, #7
   a4f4e:	f200 80ad 	bhi.w	a50ac <Cl_Standby_Controller+0x5dc>
   a4f52:	a201      	add	r2, pc, #4	; (adr r2, a4f58 <Cl_Standby_Controller+0x488>)
   a4f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4f58:	000a5089 	.word	0x000a5089
   a4f5c:	000a50a5 	.word	0x000a50a5
   a4f60:	000a50ad 	.word	0x000a50ad
   a4f64:	000a504f 	.word	0x000a504f
   a4f68:	000a4f79 	.word	0x000a4f79
   a4f6c:	000a5003 	.word	0x000a5003
   a4f70:	000a50ad 	.word	0x000a50ad
   a4f74:	000a50ad 	.word	0x000a50ad
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a4f78:	4b39      	ldr	r3, [pc, #228]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4f7a:	7e1b      	ldrb	r3, [r3, #24]
   a4f7c:	2b00      	cmp	r3, #0
   a4f7e:	f000 8097 	beq.w	a50b0 <Cl_Standby_Controller+0x5e0>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a4f82:	4b37      	ldr	r3, [pc, #220]	; (a5060 <Cl_Standby_Controller+0x590>)
   a4f84:	791b      	ldrb	r3, [r3, #4]
   a4f86:	2b01      	cmp	r3, #1
   a4f88:	d002      	beq.n	a4f90 <Cl_Standby_Controller+0x4c0>
   a4f8a:	2b21      	cmp	r3, #33	; 0x21
   a4f8c:	d01c      	beq.n	a4fc8 <Cl_Standby_Controller+0x4f8>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a4f8e:	e037      	b.n	a5000 <Cl_Standby_Controller+0x530>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a4f90:	2316      	movs	r3, #22
   a4f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a4f96:	2301      	movs	r3, #1
   a4f98:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a4f9c:	f107 0320 	add.w	r3, r7, #32
   a4fa0:	3301      	adds	r3, #1
   a4fa2:	4619      	mov	r1, r3
   a4fa4:	2001      	movs	r0, #1
   a4fa6:	4b36      	ldr	r3, [pc, #216]	; (a5080 <Cl_Standby_Controller+0x5b0>)
   a4fa8:	4798      	blx	r3
   a4faa:	4603      	mov	r3, r0
   a4fac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a4fb0:	f107 0120 	add.w	r1, r7, #32
   a4fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4fb8:	2202      	movs	r2, #2
   a4fba:	4618      	mov	r0, r3
   a4fbc:	4b2d      	ldr	r3, [pc, #180]	; (a5074 <Cl_Standby_Controller+0x5a4>)
   a4fbe:	4798      	blx	r3
   a4fc0:	4603      	mov	r3, r0
   a4fc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//	cl_wait(
										break;
   a4fc6:	e01b      	b.n	a5000 <Cl_Standby_Controller+0x530>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a4fc8:	2316      	movs	r3, #22
   a4fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a4fce:	2323      	movs	r3, #35	; 0x23
   a4fd0:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a4fd4:	f107 0320 	add.w	r3, r7, #32
   a4fd8:	3301      	adds	r3, #1
   a4fda:	4619      	mov	r1, r3
   a4fdc:	2001      	movs	r0, #1
   a4fde:	4b28      	ldr	r3, [pc, #160]	; (a5080 <Cl_Standby_Controller+0x5b0>)
   a4fe0:	4798      	blx	r3
   a4fe2:	4603      	mov	r3, r0
   a4fe4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a4fe8:	f107 0120 	add.w	r1, r7, #32
   a4fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4ff0:	2202      	movs	r2, #2
   a4ff2:	4618      	mov	r0, r3
   a4ff4:	4b1f      	ldr	r3, [pc, #124]	; (a5074 <Cl_Standby_Controller+0x5a4>)
   a4ff6:	4798      	blx	r3
   a4ff8:	4603      	mov	r3, r0
   a4ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
						break;
   a4ffe:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a5000:	e056      	b.n	a50b0 <Cl_Standby_Controller+0x5e0>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a5002:	4b17      	ldr	r3, [pc, #92]	; (a5060 <Cl_Standby_Controller+0x590>)
   a5004:	7e1b      	ldrb	r3, [r3, #24]
   a5006:	2b00      	cmp	r3, #0
   a5008:	d054      	beq.n	a50b4 <Cl_Standby_Controller+0x5e4>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a500a:	4b15      	ldr	r3, [pc, #84]	; (a5060 <Cl_Standby_Controller+0x590>)
   a500c:	791b      	ldrb	r3, [r3, #4]
   a500e:	2b01      	cmp	r3, #1
   a5010:	d000      	beq.n	a5014 <Cl_Standby_Controller+0x544>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a5012:	e01b      	b.n	a504c <Cl_Standby_Controller+0x57c>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a5014:	2316      	movs	r3, #22
   a5016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a501a:	2301      	movs	r3, #1
   a501c:	f887 3020 	strb.w	r3, [r7, #32]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5020:	f107 0320 	add.w	r3, r7, #32
   a5024:	3301      	adds	r3, #1
   a5026:	4619      	mov	r1, r3
   a5028:	2001      	movs	r0, #1
   a502a:	4b15      	ldr	r3, [pc, #84]	; (a5080 <Cl_Standby_Controller+0x5b0>)
   a502c:	4798      	blx	r3
   a502e:	4603      	mov	r3, r0
   a5030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5034:	f107 0120 	add.w	r1, r7, #32
   a5038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a503c:	2202      	movs	r2, #2
   a503e:	4618      	mov	r0, r3
   a5040:	4b0c      	ldr	r3, [pc, #48]	; (a5074 <Cl_Standby_Controller+0x5a4>)
   a5042:	4798      	blx	r3
   a5044:	4603      	mov	r3, r0
   a5046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//cl_wait(10);
						break;
   a504a:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a504c:	e032      	b.n	a50b4 <Cl_Standby_Controller+0x5e4>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a504e:	2307      	movs	r3, #7
   a5050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a5054:	4b0b      	ldr	r3, [pc, #44]	; (a5084 <Cl_Standby_Controller+0x5b4>)
   a5056:	4798      	blx	r3
   a5058:	4603      	mov	r3, r0
   a505a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a505e:	e02a      	b.n	a50b6 <Cl_Standby_Controller+0x5e6>
   a5060:	200723e8 	.word	0x200723e8
   a5064:	cccccccd 	.word	0xcccccccd
   a5068:	000a64e1 	.word	0x000a64e1
   a506c:	200720f4 	.word	0x200720f4
   a5070:	20070db0 	.word	0x20070db0
   a5074:	0009b805 	.word	0x0009b805
   a5078:	20071cbc 	.word	0x20071cbc
   a507c:	000a56f5 	.word	0x000a56f5
   a5080:	0009a331 	.word	0x0009a331
   a5084:	000a5781 	.word	0x000a5781
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a5088:	4bc0      	ldr	r3, [pc, #768]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a508a:	681b      	ldr	r3, [r3, #0]
   a508c:	3301      	adds	r3, #1
   a508e:	4abf      	ldr	r2, [pc, #764]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a5090:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a5092:	f107 031f 	add.w	r3, r7, #31
   a5096:	4618      	mov	r0, r3
   a5098:	4bbd      	ldr	r3, [pc, #756]	; (a5390 <Cl_Standby_Controller+0x8c0>)
   a509a:	4798      	blx	r3
   a509c:	4603      	mov	r3, r0
   a509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
				
				break;
   a50a2:	e008      	b.n	a50b6 <Cl_Standby_Controller+0x5e6>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a50a4:	4bb9      	ldr	r3, [pc, #740]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a50a6:	2200      	movs	r2, #0
   a50a8:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a50aa:	e004      	b.n	a50b6 <Cl_Standby_Controller+0x5e6>
			//	printf("H");
				break;

				
				default:
				break;
   a50ac:	bf00      	nop
   a50ae:	e1c9      	b.n	a5444 <Cl_Standby_Controller+0x974>
										default:
										break;
									}
								}

				break;
   a50b0:	bf00      	nop
   a50b2:	e1c7      	b.n	a5444 <Cl_Standby_Controller+0x974>
						default:
						break;
					}
					
				}
				break;
   a50b4:	bf00      	nop

				
				default:
				break;
			}
			break;
   a50b6:	e1c5      	b.n	a5444 <Cl_Standby_Controller+0x974>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a50b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a50bc:	3b06      	subs	r3, #6
   a50be:	2b07      	cmp	r3, #7
   a50c0:	d874      	bhi.n	a51ac <Cl_Standby_Controller+0x6dc>
   a50c2:	a201      	add	r2, pc, #4	; (adr r2, a50c8 <Cl_Standby_Controller+0x5f8>)
   a50c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a50c8:	000a518f 	.word	0x000a518f
   a50cc:	000a51a5 	.word	0x000a51a5
   a50d0:	000a51ad 	.word	0x000a51ad
   a50d4:	000a5171 	.word	0x000a5171
   a50d8:	000a50e9 	.word	0x000a50e9
   a50dc:	000a51ad 	.word	0x000a51ad
   a50e0:	000a51ad 	.word	0x000a51ad
   a50e4:	000a51ad 	.word	0x000a51ad
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a50e8:	4baa      	ldr	r3, [pc, #680]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a50ea:	7e1b      	ldrb	r3, [r3, #24]
   a50ec:	2b00      	cmp	r3, #0
   a50ee:	d05f      	beq.n	a51b0 <Cl_Standby_Controller+0x6e0>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a50f0:	4ba8      	ldr	r3, [pc, #672]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a50f2:	791b      	ldrb	r3, [r3, #4]
   a50f4:	2b01      	cmp	r3, #1
   a50f6:	d002      	beq.n	a50fe <Cl_Standby_Controller+0x62e>
   a50f8:	2b21      	cmp	r3, #33	; 0x21
   a50fa:	d01c      	beq.n	a5136 <Cl_Standby_Controller+0x666>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a50fc:	e037      	b.n	a516e <Cl_Standby_Controller+0x69e>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a50fe:	2316      	movs	r3, #22
   a5100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a5104:	2301      	movs	r3, #1
   a5106:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a510a:	f107 0320 	add.w	r3, r7, #32
   a510e:	3301      	adds	r3, #1
   a5110:	4619      	mov	r1, r3
   a5112:	2001      	movs	r0, #1
   a5114:	4ba0      	ldr	r3, [pc, #640]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a5116:	4798      	blx	r3
   a5118:	4603      	mov	r3, r0
   a511a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a511e:	f107 0120 	add.w	r1, r7, #32
   a5122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a5126:	2202      	movs	r2, #2
   a5128:	4618      	mov	r0, r3
   a512a:	4b9c      	ldr	r3, [pc, #624]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a512c:	4798      	blx	r3
   a512e:	4603      	mov	r3, r0
   a5130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a5134:	e01b      	b.n	a516e <Cl_Standby_Controller+0x69e>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a5136:	2316      	movs	r3, #22
   a5138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a513c:	2323      	movs	r3, #35	; 0x23
   a513e:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5142:	f107 0320 	add.w	r3, r7, #32
   a5146:	3301      	adds	r3, #1
   a5148:	4619      	mov	r1, r3
   a514a:	2001      	movs	r0, #1
   a514c:	4b92      	ldr	r3, [pc, #584]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a514e:	4798      	blx	r3
   a5150:	4603      	mov	r3, r0
   a5152:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5156:	f107 0120 	add.w	r1, r7, #32
   a515a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a515e:	2202      	movs	r2, #2
   a5160:	4618      	mov	r0, r3
   a5162:	4b8e      	ldr	r3, [pc, #568]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a5164:	4798      	blx	r3
   a5166:	4603      	mov	r3, r0
   a5168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a516c:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a516e:	e01f      	b.n	a51b0 <Cl_Standby_Controller+0x6e0>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a5170:	2307      	movs	r3, #7
   a5172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a5176:	f107 0124 	add.w	r1, r7, #36	; 0x24
   a517a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a517e:	2200      	movs	r2, #0
   a5180:	4618      	mov	r0, r3
   a5182:	4b86      	ldr	r3, [pc, #536]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a5184:	4798      	blx	r3
   a5186:	4603      	mov	r3, r0
   a5188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a518c:	e011      	b.n	a51b2 <Cl_Standby_Controller+0x6e2>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a518e:	4b7f      	ldr	r3, [pc, #508]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a5190:	681b      	ldr	r3, [r3, #0]
   a5192:	3301      	adds	r3, #1
   a5194:	4a7d      	ldr	r2, [pc, #500]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a5196:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a5198:	4b81      	ldr	r3, [pc, #516]	; (a53a0 <Cl_Standby_Controller+0x8d0>)
   a519a:	4798      	blx	r3
   a519c:	4603      	mov	r3, r0
   a519e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a51a2:	e006      	b.n	a51b2 <Cl_Standby_Controller+0x6e2>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a51a4:	4b79      	ldr	r3, [pc, #484]	; (a538c <Cl_Standby_Controller+0x8bc>)
   a51a6:	2200      	movs	r2, #0
   a51a8:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a51aa:	e002      	b.n	a51b2 <Cl_Standby_Controller+0x6e2>
			//	printf("H");
				break;

				
				default:
				break;
   a51ac:	bf00      	nop
   a51ae:	e149      	b.n	a5444 <Cl_Standby_Controller+0x974>
										break;
										default:
										break;
									}
								}
				break;
   a51b0:	bf00      	nop

				
				default:
				break;
			}
			break;
   a51b2:	e147      	b.n	a5444 <Cl_Standby_Controller+0x974>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a51b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a51b8:	2b0a      	cmp	r3, #10
   a51ba:	d002      	beq.n	a51c2 <Cl_Standby_Controller+0x6f2>
   a51bc:	2b0d      	cmp	r3, #13
   a51be:	d044      	beq.n	a524a <Cl_Standby_Controller+0x77a>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a51c0:	e046      	b.n	a5250 <Cl_Standby_Controller+0x780>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a51c2:	4b74      	ldr	r3, [pc, #464]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a51c4:	7e1b      	ldrb	r3, [r3, #24]
   a51c6:	2b00      	cmp	r3, #0
   a51c8:	d041      	beq.n	a524e <Cl_Standby_Controller+0x77e>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a51ca:	4b72      	ldr	r3, [pc, #456]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a51cc:	791b      	ldrb	r3, [r3, #4]
   a51ce:	2b01      	cmp	r3, #1
   a51d0:	d002      	beq.n	a51d8 <Cl_Standby_Controller+0x708>
   a51d2:	2b21      	cmp	r3, #33	; 0x21
   a51d4:	d01c      	beq.n	a5210 <Cl_Standby_Controller+0x740>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a51d6:	e037      	b.n	a5248 <Cl_Standby_Controller+0x778>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a51d8:	2316      	movs	r3, #22
   a51da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a51de:	2301      	movs	r3, #1
   a51e0:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a51e4:	f107 0320 	add.w	r3, r7, #32
   a51e8:	3301      	adds	r3, #1
   a51ea:	4619      	mov	r1, r3
   a51ec:	2001      	movs	r0, #1
   a51ee:	4b6a      	ldr	r3, [pc, #424]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a51f0:	4798      	blx	r3
   a51f2:	4603      	mov	r3, r0
   a51f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a51f8:	f107 0120 	add.w	r1, r7, #32
   a51fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a5200:	2202      	movs	r2, #2
   a5202:	4618      	mov	r0, r3
   a5204:	4b65      	ldr	r3, [pc, #404]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a5206:	4798      	blx	r3
   a5208:	4603      	mov	r3, r0
   a520a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(10);
												break;
   a520e:	e01b      	b.n	a5248 <Cl_Standby_Controller+0x778>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a5210:	2316      	movs	r3, #22
   a5212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a5216:	2323      	movs	r3, #35	; 0x23
   a5218:	f887 3020 	strb.w	r3, [r7, #32]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a521c:	f107 0320 	add.w	r3, r7, #32
   a5220:	3301      	adds	r3, #1
   a5222:	4619      	mov	r1, r3
   a5224:	2001      	movs	r0, #1
   a5226:	4b5c      	ldr	r3, [pc, #368]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a5228:	4798      	blx	r3
   a522a:	4603      	mov	r3, r0
   a522c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5230:	f107 0120 	add.w	r1, r7, #32
   a5234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a5238:	2202      	movs	r2, #2
   a523a:	4618      	mov	r0, r3
   a523c:	4b57      	ldr	r3, [pc, #348]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a523e:	4798      	blx	r3
   a5240:	4603      	mov	r3, r0
   a5242:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
														//cl_wait(100);
												break;
   a5246:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a5248:	e001      	b.n	a524e <Cl_Standby_Controller+0x77e>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a524a:	bf00      	nop
   a524c:	e0fa      	b.n	a5444 <Cl_Standby_Controller+0x974>
												break;
												default:
												break;
											}
										}
							break;
   a524e:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a5250:	e0f8      	b.n	a5444 <Cl_Standby_Controller+0x974>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a5252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5256:	2b0a      	cmp	r3, #10
   a5258:	d002      	beq.n	a5260 <Cl_Standby_Controller+0x790>
   a525a:	2b0d      	cmp	r3, #13
   a525c:	d044      	beq.n	a52e8 <Cl_Standby_Controller+0x818>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a525e:	e046      	b.n	a52ee <Cl_Standby_Controller+0x81e>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a5260:	4b4c      	ldr	r3, [pc, #304]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a5262:	7e1b      	ldrb	r3, [r3, #24]
   a5264:	2b00      	cmp	r3, #0
   a5266:	d041      	beq.n	a52ec <Cl_Standby_Controller+0x81c>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a5268:	4b4a      	ldr	r3, [pc, #296]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a526a:	791b      	ldrb	r3, [r3, #4]
   a526c:	2b01      	cmp	r3, #1
   a526e:	d002      	beq.n	a5276 <Cl_Standby_Controller+0x7a6>
   a5270:	2b21      	cmp	r3, #33	; 0x21
   a5272:	d01c      	beq.n	a52ae <Cl_Standby_Controller+0x7de>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a5274:	e037      	b.n	a52e6 <Cl_Standby_Controller+0x816>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a5276:	2316      	movs	r3, #22
   a5278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a527c:	2301      	movs	r3, #1
   a527e:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5282:	f107 0320 	add.w	r3, r7, #32
   a5286:	3301      	adds	r3, #1
   a5288:	4619      	mov	r1, r3
   a528a:	2001      	movs	r0, #1
   a528c:	4b42      	ldr	r3, [pc, #264]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a528e:	4798      	blx	r3
   a5290:	4603      	mov	r3, r0
   a5292:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5296:	f107 0120 	add.w	r1, r7, #32
   a529a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a529e:	2202      	movs	r2, #2
   a52a0:	4618      	mov	r0, r3
   a52a2:	4b3e      	ldr	r3, [pc, #248]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a52a4:	4798      	blx	r3
   a52a6:	4603      	mov	r3, r0
   a52a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a52ac:	e01b      	b.n	a52e6 <Cl_Standby_Controller+0x816>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a52ae:	2316      	movs	r3, #22
   a52b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a52b4:	2323      	movs	r3, #35	; 0x23
   a52b6:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a52ba:	f107 0320 	add.w	r3, r7, #32
   a52be:	3301      	adds	r3, #1
   a52c0:	4619      	mov	r1, r3
   a52c2:	2001      	movs	r0, #1
   a52c4:	4b34      	ldr	r3, [pc, #208]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a52c6:	4798      	blx	r3
   a52c8:	4603      	mov	r3, r0
   a52ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a52ce:	f107 0120 	add.w	r1, r7, #32
   a52d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a52d6:	2202      	movs	r2, #2
   a52d8:	4618      	mov	r0, r3
   a52da:	4b30      	ldr	r3, [pc, #192]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a52dc:	4798      	blx	r3
   a52de:	4603      	mov	r3, r0
   a52e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a52e4:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a52e6:	e001      	b.n	a52ec <Cl_Standby_Controller+0x81c>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a52e8:	bf00      	nop
   a52ea:	e000      	b.n	a52ee <Cl_Standby_Controller+0x81e>
										break;
										default:
										break;
									}
								}
							break;
   a52ec:	bf00      	nop
							break;
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a52ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a52f2:	2b0a      	cmp	r3, #10
   a52f4:	d002      	beq.n	a52fc <Cl_Standby_Controller+0x82c>
   a52f6:	2b0d      	cmp	r3, #13
   a52f8:	d044      	beq.n	a5384 <Cl_Standby_Controller+0x8b4>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a52fa:	e046      	b.n	a538a <Cl_Standby_Controller+0x8ba>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a52fc:	4b25      	ldr	r3, [pc, #148]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a52fe:	7e1b      	ldrb	r3, [r3, #24]
   a5300:	2b00      	cmp	r3, #0
   a5302:	d041      	beq.n	a5388 <Cl_Standby_Controller+0x8b8>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a5304:	4b23      	ldr	r3, [pc, #140]	; (a5394 <Cl_Standby_Controller+0x8c4>)
   a5306:	791b      	ldrb	r3, [r3, #4]
   a5308:	2b01      	cmp	r3, #1
   a530a:	d002      	beq.n	a5312 <Cl_Standby_Controller+0x842>
   a530c:	2b21      	cmp	r3, #33	; 0x21
   a530e:	d01c      	beq.n	a534a <Cl_Standby_Controller+0x87a>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a5310:	e037      	b.n	a5382 <Cl_Standby_Controller+0x8b2>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a5312:	2316      	movs	r3, #22
   a5314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a5318:	2301      	movs	r3, #1
   a531a:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a531e:	f107 0320 	add.w	r3, r7, #32
   a5322:	3301      	adds	r3, #1
   a5324:	4619      	mov	r1, r3
   a5326:	2001      	movs	r0, #1
   a5328:	4b1b      	ldr	r3, [pc, #108]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a532a:	4798      	blx	r3
   a532c:	4603      	mov	r3, r0
   a532e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5332:	f107 0120 	add.w	r1, r7, #32
   a5336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a533a:	2202      	movs	r2, #2
   a533c:	4618      	mov	r0, r3
   a533e:	4b17      	ldr	r3, [pc, #92]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a5340:	4798      	blx	r3
   a5342:	4603      	mov	r3, r0
   a5344:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a5348:	e01b      	b.n	a5382 <Cl_Standby_Controller+0x8b2>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a534a:	2316      	movs	r3, #22
   a534c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a5350:	2323      	movs	r3, #35	; 0x23
   a5352:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5356:	f107 0320 	add.w	r3, r7, #32
   a535a:	3301      	adds	r3, #1
   a535c:	4619      	mov	r1, r3
   a535e:	2001      	movs	r0, #1
   a5360:	4b0d      	ldr	r3, [pc, #52]	; (a5398 <Cl_Standby_Controller+0x8c8>)
   a5362:	4798      	blx	r3
   a5364:	4603      	mov	r3, r0
   a5366:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a536a:	f107 0120 	add.w	r1, r7, #32
   a536e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a5372:	2202      	movs	r2, #2
   a5374:	4618      	mov	r0, r3
   a5376:	4b09      	ldr	r3, [pc, #36]	; (a539c <Cl_Standby_Controller+0x8cc>)
   a5378:	4798      	blx	r3
   a537a:	4603      	mov	r3, r0
   a537c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a5380:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a5382:	e001      	b.n	a5388 <Cl_Standby_Controller+0x8b8>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a5384:	bf00      	nop
   a5386:	e05d      	b.n	a5444 <Cl_Standby_Controller+0x974>
										break;
										default:
										break;
									}
								}
							break;
   a5388:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a538a:	e05b      	b.n	a5444 <Cl_Standby_Controller+0x974>
   a538c:	20071cbc 	.word	0x20071cbc
   a5390:	000a57ed 	.word	0x000a57ed
   a5394:	200723e8 	.word	0x200723e8
   a5398:	0009a331 	.word	0x0009a331
   a539c:	0009b805 	.word	0x0009b805
   a53a0:	000a56f5 	.word	0x000a56f5
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a53a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a53a8:	2b0a      	cmp	r3, #10
   a53aa:	d002      	beq.n	a53b2 <Cl_Standby_Controller+0x8e2>
   a53ac:	2b0d      	cmp	r3, #13
   a53ae:	d044      	beq.n	a543a <Cl_Standby_Controller+0x96a>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a53b0:	e046      	b.n	a5440 <Cl_Standby_Controller+0x970>
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a53b2:	4b27      	ldr	r3, [pc, #156]	; (a5450 <Cl_Standby_Controller+0x980>)
   a53b4:	7e1b      	ldrb	r3, [r3, #24]
   a53b6:	2b00      	cmp	r3, #0
   a53b8:	d041      	beq.n	a543e <Cl_Standby_Controller+0x96e>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a53ba:	4b25      	ldr	r3, [pc, #148]	; (a5450 <Cl_Standby_Controller+0x980>)
   a53bc:	791b      	ldrb	r3, [r3, #4]
   a53be:	2b01      	cmp	r3, #1
   a53c0:	d002      	beq.n	a53c8 <Cl_Standby_Controller+0x8f8>
   a53c2:	2b21      	cmp	r3, #33	; 0x21
   a53c4:	d01c      	beq.n	a5400 <Cl_Standby_Controller+0x930>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a53c6:	e037      	b.n	a5438 <Cl_Standby_Controller+0x968>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a53c8:	2316      	movs	r3, #22
   a53ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a53ce:	2301      	movs	r3, #1
   a53d0:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a53d4:	f107 0320 	add.w	r3, r7, #32
   a53d8:	3301      	adds	r3, #1
   a53da:	4619      	mov	r1, r3
   a53dc:	2001      	movs	r0, #1
   a53de:	4b1d      	ldr	r3, [pc, #116]	; (a5454 <Cl_Standby_Controller+0x984>)
   a53e0:	4798      	blx	r3
   a53e2:	4603      	mov	r3, r0
   a53e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a53e8:	f107 0120 	add.w	r1, r7, #32
   a53ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a53f0:	2202      	movs	r2, #2
   a53f2:	4618      	mov	r0, r3
   a53f4:	4b18      	ldr	r3, [pc, #96]	; (a5458 <Cl_Standby_Controller+0x988>)
   a53f6:	4798      	blx	r3
   a53f8:	4603      	mov	r3, r0
   a53fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a53fe:	e01b      	b.n	a5438 <Cl_Standby_Controller+0x968>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a5400:	2316      	movs	r3, #22
   a5402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a5406:	2323      	movs	r3, #35	; 0x23
   a5408:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a540c:	f107 0320 	add.w	r3, r7, #32
   a5410:	3301      	adds	r3, #1
   a5412:	4619      	mov	r1, r3
   a5414:	2001      	movs	r0, #1
   a5416:	4b0f      	ldr	r3, [pc, #60]	; (a5454 <Cl_Standby_Controller+0x984>)
   a5418:	4798      	blx	r3
   a541a:	4603      	mov	r3, r0
   a541c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5420:	f107 0120 	add.w	r1, r7, #32
   a5424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a5428:	2202      	movs	r2, #2
   a542a:	4618      	mov	r0, r3
   a542c:	4b0a      	ldr	r3, [pc, #40]	; (a5458 <Cl_Standby_Controller+0x988>)
   a542e:	4798      	blx	r3
   a5430:	4603      	mov	r3, r0
   a5432:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a5436:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a5438:	e001      	b.n	a543e <Cl_Standby_Controller+0x96e>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a543a:	bf00      	nop
   a543c:	e002      	b.n	a5444 <Cl_Standby_Controller+0x974>
										break;
										default:
										break;
									}
								}
							break;
   a543e:	bf00      	nop
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
						}
			break;
   a5440:	e000      	b.n	a5444 <Cl_Standby_Controller+0x974>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a5442:	bf00      	nop
		}

	
return CL_OK;
   a5444:	2300      	movs	r3, #0
}
   a5446:	4618      	mov	r0, r3
   a5448:	3728      	adds	r7, #40	; 0x28
   a544a:	46bd      	mov	sp, r7
   a544c:	bd80      	pop	{r7, pc}
   a544e:	bf00      	nop
   a5450:	200723e8 	.word	0x200723e8
   a5454:	0009a331 	.word	0x0009a331
   a5458:	0009b805 	.word	0x0009b805

000a545c <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a545c:	b480      	push	{r7}
   a545e:	b083      	sub	sp, #12
   a5460:	af00      	add	r7, sp, #0
   a5462:	4603      	mov	r3, r0
   a5464:	6039      	str	r1, [r7, #0]
   a5466:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a5468:	683b      	ldr	r3, [r7, #0]
   a546a:	2200      	movs	r2, #0
   a546c:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a546e:	79fb      	ldrb	r3, [r7, #7]
   a5470:	3b07      	subs	r3, #7
   a5472:	2b55      	cmp	r3, #85	; 0x55
   a5474:	f200 80e8 	bhi.w	a5648 <cl_stby_translatemacevent+0x1ec>
   a5478:	a201      	add	r2, pc, #4	; (adr r2, a5480 <cl_stby_translatemacevent+0x24>)
   a547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a547e:	bf00      	nop
   a5480:	000a5609 	.word	0x000a5609
   a5484:	000a5649 	.word	0x000a5649
   a5488:	000a5611 	.word	0x000a5611
   a548c:	000a5619 	.word	0x000a5619
   a5490:	000a5621 	.word	0x000a5621
   a5494:	000a5629 	.word	0x000a5629
   a5498:	000a5649 	.word	0x000a5649
   a549c:	000a5601 	.word	0x000a5601
   a54a0:	000a5649 	.word	0x000a5649
   a54a4:	000a5631 	.word	0x000a5631
   a54a8:	000a5649 	.word	0x000a5649
   a54ac:	000a5649 	.word	0x000a5649
   a54b0:	000a5649 	.word	0x000a5649
   a54b4:	000a5649 	.word	0x000a5649
   a54b8:	000a5649 	.word	0x000a5649
   a54bc:	000a5649 	.word	0x000a5649
   a54c0:	000a5649 	.word	0x000a5649
   a54c4:	000a5649 	.word	0x000a5649
   a54c8:	000a5649 	.word	0x000a5649
   a54cc:	000a5649 	.word	0x000a5649
   a54d0:	000a5649 	.word	0x000a5649
   a54d4:	000a5649 	.word	0x000a5649
   a54d8:	000a5649 	.word	0x000a5649
   a54dc:	000a5649 	.word	0x000a5649
   a54e0:	000a5649 	.word	0x000a5649
   a54e4:	000a5649 	.word	0x000a5649
   a54e8:	000a5649 	.word	0x000a5649
   a54ec:	000a5649 	.word	0x000a5649
   a54f0:	000a5649 	.word	0x000a5649
   a54f4:	000a5649 	.word	0x000a5649
   a54f8:	000a5649 	.word	0x000a5649
   a54fc:	000a5649 	.word	0x000a5649
   a5500:	000a5649 	.word	0x000a5649
   a5504:	000a5649 	.word	0x000a5649
   a5508:	000a5649 	.word	0x000a5649
   a550c:	000a5649 	.word	0x000a5649
   a5510:	000a55d9 	.word	0x000a55d9
   a5514:	000a5649 	.word	0x000a5649
   a5518:	000a5649 	.word	0x000a5649
   a551c:	000a55f9 	.word	0x000a55f9
   a5520:	000a5649 	.word	0x000a5649
   a5524:	000a5649 	.word	0x000a5649
   a5528:	000a5649 	.word	0x000a5649
   a552c:	000a5649 	.word	0x000a5649
   a5530:	000a5649 	.word	0x000a5649
   a5534:	000a5649 	.word	0x000a5649
   a5538:	000a5649 	.word	0x000a5649
   a553c:	000a5649 	.word	0x000a5649
   a5540:	000a5649 	.word	0x000a5649
   a5544:	000a5649 	.word	0x000a5649
   a5548:	000a55e1 	.word	0x000a55e1
   a554c:	000a5649 	.word	0x000a5649
   a5550:	000a55e9 	.word	0x000a55e9
   a5554:	000a55f1 	.word	0x000a55f1
   a5558:	000a5649 	.word	0x000a5649
   a555c:	000a5649 	.word	0x000a5649
   a5560:	000a5649 	.word	0x000a5649
   a5564:	000a5649 	.word	0x000a5649
   a5568:	000a5649 	.word	0x000a5649
   a556c:	000a5649 	.word	0x000a5649
   a5570:	000a5649 	.word	0x000a5649
   a5574:	000a5649 	.word	0x000a5649
   a5578:	000a5649 	.word	0x000a5649
   a557c:	000a5649 	.word	0x000a5649
   a5580:	000a5649 	.word	0x000a5649
   a5584:	000a5649 	.word	0x000a5649
   a5588:	000a5649 	.word	0x000a5649
   a558c:	000a5649 	.word	0x000a5649
   a5590:	000a5649 	.word	0x000a5649
   a5594:	000a5649 	.word	0x000a5649
   a5598:	000a5649 	.word	0x000a5649
   a559c:	000a5649 	.word	0x000a5649
   a55a0:	000a5649 	.word	0x000a5649
   a55a4:	000a5649 	.word	0x000a5649
   a55a8:	000a5649 	.word	0x000a5649
   a55ac:	000a5649 	.word	0x000a5649
   a55b0:	000a5649 	.word	0x000a5649
   a55b4:	000a5649 	.word	0x000a5649
   a55b8:	000a5649 	.word	0x000a5649
   a55bc:	000a5649 	.word	0x000a5649
   a55c0:	000a5649 	.word	0x000a5649
   a55c4:	000a5649 	.word	0x000a5649
   a55c8:	000a5649 	.word	0x000a5649
   a55cc:	000a5649 	.word	0x000a5649
   a55d0:	000a5639 	.word	0x000a5639
   a55d4:	000a5641 	.word	0x000a5641
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a55d8:	683b      	ldr	r3, [r7, #0]
   a55da:	2201      	movs	r2, #1
   a55dc:	701a      	strb	r2, [r3, #0]
		break;
   a55de:	e034      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a55e0:	683b      	ldr	r3, [r7, #0]
   a55e2:	2204      	movs	r2, #4
   a55e4:	701a      	strb	r2, [r3, #0]
		break;
   a55e6:	e030      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a55e8:	683b      	ldr	r3, [r7, #0]
   a55ea:	2206      	movs	r2, #6
   a55ec:	701a      	strb	r2, [r3, #0]
		break;
   a55ee:	e02c      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a55f0:	683b      	ldr	r3, [r7, #0]
   a55f2:	2207      	movs	r2, #7
   a55f4:	701a      	strb	r2, [r3, #0]
		break;
   a55f6:	e028      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a55f8:	683b      	ldr	r3, [r7, #0]
   a55fa:	2209      	movs	r2, #9
   a55fc:	701a      	strb	r2, [r3, #0]
		break;
   a55fe:	e024      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a5600:	683b      	ldr	r3, [r7, #0]
   a5602:	220a      	movs	r2, #10
   a5604:	701a      	strb	r2, [r3, #0]
		break;
   a5606:	e020      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a5608:	683b      	ldr	r3, [r7, #0]
   a560a:	220c      	movs	r2, #12
   a560c:	701a      	strb	r2, [r3, #0]
		break;
   a560e:	e01c      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a5610:	683b      	ldr	r3, [r7, #0]
   a5612:	220d      	movs	r2, #13
   a5614:	701a      	strb	r2, [r3, #0]
		break; 
   a5616:	e018      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a5618:	683b      	ldr	r3, [r7, #0]
   a561a:	220e      	movs	r2, #14
   a561c:	701a      	strb	r2, [r3, #0]
		break;
   a561e:	e014      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a5620:	683b      	ldr	r3, [r7, #0]
   a5622:	220f      	movs	r2, #15
   a5624:	701a      	strb	r2, [r3, #0]
		break;
   a5626:	e010      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a5628:	683b      	ldr	r3, [r7, #0]
   a562a:	2210      	movs	r2, #16
   a562c:	701a      	strb	r2, [r3, #0]
		break;
   a562e:	e00c      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a5630:	683b      	ldr	r3, [r7, #0]
   a5632:	2210      	movs	r2, #16
   a5634:	701a      	strb	r2, [r3, #0]
		break;
   a5636:	e008      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a5638:	683b      	ldr	r3, [r7, #0]
   a563a:	225b      	movs	r2, #91	; 0x5b
   a563c:	701a      	strb	r2, [r3, #0]
		break;
   a563e:	e004      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a5640:	683b      	ldr	r3, [r7, #0]
   a5642:	225c      	movs	r2, #92	; 0x5c
   a5644:	701a      	strb	r2, [r3, #0]
		break;
   a5646:	e000      	b.n	a564a <cl_stby_translatemacevent+0x1ee>
		default:
		break;
   a5648:	bf00      	nop
	}
	return CL_OK;
   a564a:	2300      	movs	r3, #0
}
   a564c:	4618      	mov	r0, r3
   a564e:	370c      	adds	r7, #12
   a5650:	46bd      	mov	sp, r7
   a5652:	bc80      	pop	{r7}
   a5654:	4770      	bx	lr
   a5656:	bf00      	nop

000a5658 <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a5658:	b580      	push	{r7, lr}
   a565a:	b082      	sub	sp, #8
   a565c:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a565e:	2304      	movs	r3, #4
   a5660:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a5662:	2301      	movs	r3, #1
   a5664:	80fb      	strh	r3, [r7, #6]
   a5666:	e00a      	b.n	a567e <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a5668:	88fb      	ldrh	r3, [r7, #6]
   a566a:	b2db      	uxtb	r3, r3
   a566c:	4618      	mov	r0, r3
   a566e:	4b1b      	ldr	r3, [pc, #108]	; (a56dc <Cl_stby_init+0x84>)
   a5670:	4798      	blx	r3
				cl_wait(10);
   a5672:	200a      	movs	r0, #10
   a5674:	4b1a      	ldr	r3, [pc, #104]	; (a56e0 <Cl_stby_init+0x88>)
   a5676:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a5678:	88fb      	ldrh	r3, [r7, #6]
   a567a:	3301      	adds	r3, #1
   a567c:	80fb      	strh	r3, [r7, #6]
   a567e:	88fb      	ldrh	r3, [r7, #6]
   a5680:	2b14      	cmp	r3, #20
   a5682:	d9f1      	bls.n	a5668 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a5684:	2001      	movs	r0, #1
   a5686:	4b17      	ldr	r3, [pc, #92]	; (a56e4 <Cl_stby_init+0x8c>)
   a5688:	4798      	blx	r3
   a568a:	4603      	mov	r3, r0
   a568c:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a568e:	2002      	movs	r0, #2
   a5690:	4b14      	ldr	r3, [pc, #80]	; (a56e4 <Cl_stby_init+0x8c>)
   a5692:	4798      	blx	r3
   a5694:	4603      	mov	r3, r0
   a5696:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a5698:	2004      	movs	r0, #4
   a569a:	4b12      	ldr	r3, [pc, #72]	; (a56e4 <Cl_stby_init+0x8c>)
   a569c:	4798      	blx	r3
   a569e:	4603      	mov	r3, r0
   a56a0:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a56a2:	2005      	movs	r0, #5
   a56a4:	4b0f      	ldr	r3, [pc, #60]	; (a56e4 <Cl_stby_init+0x8c>)
   a56a6:	4798      	blx	r3
   a56a8:	4603      	mov	r3, r0
   a56aa:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a56ac:	2006      	movs	r0, #6
   a56ae:	4b0d      	ldr	r3, [pc, #52]	; (a56e4 <Cl_stby_init+0x8c>)
   a56b0:	4798      	blx	r3
   a56b2:	4603      	mov	r3, r0
   a56b4:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   a56b6:	4b0c      	ldr	r3, [pc, #48]	; (a56e8 <Cl_stby_init+0x90>)
   a56b8:	4798      	blx	r3
   a56ba:	4603      	mov	r3, r0
   a56bc:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a56be:	20e1      	movs	r0, #225	; 0xe1
   a56c0:	4b0a      	ldr	r3, [pc, #40]	; (a56ec <Cl_stby_init+0x94>)
   a56c2:	4798      	blx	r3
   a56c4:	4603      	mov	r3, r0
   a56c6:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a56c8:	2000      	movs	r0, #0
   a56ca:	4b09      	ldr	r3, [pc, #36]	; (a56f0 <Cl_stby_init+0x98>)
   a56cc:	4798      	blx	r3
   a56ce:	4603      	mov	r3, r0
   a56d0:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a56d2:	2300      	movs	r3, #0
 }
   a56d4:	4618      	mov	r0, r3
   a56d6:	3708      	adds	r7, #8
   a56d8:	46bd      	mov	sp, r7
   a56da:	bd80      	pop	{r7, pc}
   a56dc:	00099ac9 	.word	0x00099ac9
   a56e0:	00093009 	.word	0x00093009
   a56e4:	00099a45 	.word	0x00099a45
   a56e8:	00099a95 	.word	0x00099a95
   a56ec:	00099f5d 	.word	0x00099f5d
   a56f0:	0008f759 	.word	0x0008f759

000a56f4 <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a56f4:	b580      	push	{r7, lr}
   a56f6:	b084      	sub	sp, #16
   a56f8:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a56fa:	2304      	movs	r3, #4
   a56fc:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a56fe:	2351      	movs	r3, #81	; 0x51
   a5700:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a5702:	1d3b      	adds	r3, r7, #4
   a5704:	2200      	movs	r2, #0
   a5706:	601a      	str	r2, [r3, #0]
   a5708:	f8c3 2003 	str.w	r2, [r3, #3]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a570c:	230a      	movs	r3, #10
   a570e:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a5710:	2300      	movs	r3, #0
   a5712:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a5714:	4b16      	ldr	r3, [pc, #88]	; (a5770 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a5716:	681b      	ldr	r3, [r3, #0]
   a5718:	b2db      	uxtb	r3, r3
   a571a:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a571c:	4b15      	ldr	r3, [pc, #84]	; (a5774 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a571e:	681b      	ldr	r3, [r3, #0]
   a5720:	b2db      	uxtb	r3, r3
   a5722:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a5724:	4b14      	ldr	r3, [pc, #80]	; (a5778 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a5726:	681b      	ldr	r3, [r3, #0]
   a5728:	b2db      	uxtb	r3, r3
   a572a:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a572c:	4b10      	ldr	r3, [pc, #64]	; (a5770 <Cl_StabyRinse_UpdateTimeInfo+0x7c>)
   a572e:	681b      	ldr	r3, [r3, #0]
   a5730:	b2db      	uxtb	r3, r3
   a5732:	425b      	negs	r3, r3
   a5734:	b2db      	uxtb	r3, r3
   a5736:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a5738:	4b0e      	ldr	r3, [pc, #56]	; (a5774 <Cl_StabyRinse_UpdateTimeInfo+0x80>)
   a573a:	681b      	ldr	r3, [r3, #0]
   a573c:	b2db      	uxtb	r3, r3
   a573e:	f1c3 0308 	rsb	r3, r3, #8
   a5742:	b2db      	uxtb	r3, r3
   a5744:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a5746:	4b0c      	ldr	r3, [pc, #48]	; (a5778 <Cl_StabyRinse_UpdateTimeInfo+0x84>)
   a5748:	681b      	ldr	r3, [r3, #0]
   a574a:	b2db      	uxtb	r3, r3
   a574c:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a5750:	b2db      	uxtb	r3, r3
   a5752:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a5754:	1d39      	adds	r1, r7, #4
   a5756:	7bbb      	ldrb	r3, [r7, #14]
   a5758:	2207      	movs	r2, #7
   a575a:	4618      	mov	r0, r3
   a575c:	4b07      	ldr	r3, [pc, #28]	; (a577c <Cl_StabyRinse_UpdateTimeInfo+0x88>)
   a575e:	4798      	blx	r3
   a5760:	4603      	mov	r3, r0
   a5762:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a5764:	2300      	movs	r3, #0
	
 }
   a5766:	4618      	mov	r0, r3
   a5768:	3710      	adds	r7, #16
   a576a:	46bd      	mov	sp, r7
   a576c:	bd80      	pop	{r7, pc}
   a576e:	bf00      	nop
   a5770:	20071cc4 	.word	0x20071cc4
   a5774:	20071cc0 	.word	0x20071cc0
   a5778:	20071cbc 	.word	0x20071cbc
   a577c:	0009b805 	.word	0x0009b805

000a5780 <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a5780:	b580      	push	{r7, lr}
   a5782:	b082      	sub	sp, #8
   a5784:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a5786:	2300      	movs	r3, #0
   a5788:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a578a:	2300      	movs	r3, #0
   a578c:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a578e:	2351      	movs	r3, #81	; 0x51
   a5790:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5792:	2300      	movs	r3, #0
   a5794:	71fb      	strb	r3, [r7, #7]
   a5796:	e01c      	b.n	a57d2 <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a5798:	79fa      	ldrb	r2, [r7, #7]
   a579a:	4912      	ldr	r1, [pc, #72]	; (a57e4 <Cl_standby_ProcessAlarms+0x64>)
   a579c:	4613      	mov	r3, r2
   a579e:	00db      	lsls	r3, r3, #3
   a57a0:	4413      	add	r3, r2
   a57a2:	440b      	add	r3, r1
   a57a4:	7818      	ldrb	r0, [r3, #0]
   a57a6:	79fa      	ldrb	r2, [r7, #7]
   a57a8:	4613      	mov	r3, r2
   a57aa:	00db      	lsls	r3, r3, #3
   a57ac:	4413      	add	r3, r2
   a57ae:	4a0d      	ldr	r2, [pc, #52]	; (a57e4 <Cl_standby_ProcessAlarms+0x64>)
   a57b0:	4413      	add	r3, r2
   a57b2:	3304      	adds	r3, #4
   a57b4:	4619      	mov	r1, r3
   a57b6:	4b0c      	ldr	r3, [pc, #48]	; (a57e8 <Cl_standby_ProcessAlarms+0x68>)
   a57b8:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a57ba:	79fa      	ldrb	r2, [r7, #7]
   a57bc:	4909      	ldr	r1, [pc, #36]	; (a57e4 <Cl_standby_ProcessAlarms+0x64>)
   a57be:	4613      	mov	r3, r2
   a57c0:	00db      	lsls	r3, r3, #3
   a57c2:	4413      	add	r3, r2
   a57c4:	440b      	add	r3, r1
   a57c6:	3304      	adds	r3, #4
   a57c8:	781b      	ldrb	r3, [r3, #0]
   a57ca:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a57cc:	79fb      	ldrb	r3, [r7, #7]
   a57ce:	3301      	adds	r3, #1
   a57d0:	71fb      	strb	r3, [r7, #7]
   a57d2:	79fb      	ldrb	r3, [r7, #7]
   a57d4:	2b03      	cmp	r3, #3
   a57d6:	d9df      	bls.n	a5798 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a57d8:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a57da:	4618      	mov	r0, r3
   a57dc:	3708      	adds	r7, #8
   a57de:	46bd      	mov	sp, r7
   a57e0:	bd80      	pop	{r7, pc}
   a57e2:	bf00      	nop
   a57e4:	20070d8c 	.word	0x20070d8c
   a57e8:	00082fbd 	.word	0x00082fbd

000a57ec <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a57ec:	b580      	push	{r7, lr}
   a57ee:	b084      	sub	sp, #16
   a57f0:	af00      	add	r7, sp, #0
   a57f2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a57f4:	2300      	movs	r3, #0
   a57f6:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a57f8:	2300      	movs	r3, #0
   a57fa:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a57fc:	2351      	movs	r3, #81	; 0x51
   a57fe:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5800:	2300      	movs	r3, #0
   a5802:	73bb      	strb	r3, [r7, #14]
   a5804:	e0bc      	b.n	a5980 <Cl_standby_UpdateAlarmTable+0x194>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a5806:	7bba      	ldrb	r2, [r7, #14]
   a5808:	4962      	ldr	r1, [pc, #392]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a580a:	4613      	mov	r3, r2
   a580c:	00db      	lsls	r3, r3, #3
   a580e:	4413      	add	r3, r2
   a5810:	440b      	add	r3, r1
   a5812:	7818      	ldrb	r0, [r3, #0]
   a5814:	7bba      	ldrb	r2, [r7, #14]
   a5816:	4613      	mov	r3, r2
   a5818:	00db      	lsls	r3, r3, #3
   a581a:	4413      	add	r3, r2
   a581c:	4a5d      	ldr	r2, [pc, #372]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a581e:	4413      	add	r3, r2
   a5820:	3304      	adds	r3, #4
   a5822:	4619      	mov	r1, r3
   a5824:	4b5c      	ldr	r3, [pc, #368]	; (a5998 <Cl_standby_UpdateAlarmTable+0x1ac>)
   a5826:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a5828:	7bba      	ldrb	r2, [r7, #14]
   a582a:	495a      	ldr	r1, [pc, #360]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a582c:	4613      	mov	r3, r2
   a582e:	00db      	lsls	r3, r3, #3
   a5830:	4413      	add	r3, r2
   a5832:	440b      	add	r3, r1
   a5834:	3304      	adds	r3, #4
   a5836:	781b      	ldrb	r3, [r3, #0]
   a5838:	2b00      	cmp	r3, #0
   a583a:	d076      	beq.n	a592a <Cl_standby_UpdateAlarmTable+0x13e>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a583c:	7bba      	ldrb	r2, [r7, #14]
   a583e:	4955      	ldr	r1, [pc, #340]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5840:	4613      	mov	r3, r2
   a5842:	00db      	lsls	r3, r3, #3
   a5844:	4413      	add	r3, r2
   a5846:	440b      	add	r3, r1
   a5848:	3305      	adds	r3, #5
   a584a:	781b      	ldrb	r3, [r3, #0]
   a584c:	f083 0301 	eor.w	r3, r3, #1
   a5850:	b2db      	uxtb	r3, r3
   a5852:	2b00      	cmp	r3, #0
   a5854:	d01e      	beq.n	a5894 <Cl_standby_UpdateAlarmTable+0xa8>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a5856:	7bba      	ldrb	r2, [r7, #14]
   a5858:	494e      	ldr	r1, [pc, #312]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a585a:	4613      	mov	r3, r2
   a585c:	00db      	lsls	r3, r3, #3
   a585e:	4413      	add	r3, r2
   a5860:	440b      	add	r3, r1
   a5862:	781b      	ldrb	r3, [r3, #0]
   a5864:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a5866:	2301      	movs	r3, #1
   a5868:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a586a:	2307      	movs	r3, #7
   a586c:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a586e:	f107 0108 	add.w	r1, r7, #8
   a5872:	7b7b      	ldrb	r3, [r7, #13]
   a5874:	2202      	movs	r2, #2
   a5876:	4618      	mov	r0, r3
   a5878:	4b48      	ldr	r3, [pc, #288]	; (a599c <Cl_standby_UpdateAlarmTable+0x1b0>)
   a587a:	4798      	blx	r3
   a587c:	4603      	mov	r3, r0
   a587e:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a5880:	7bba      	ldrb	r2, [r7, #14]
   a5882:	4944      	ldr	r1, [pc, #272]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5884:	4613      	mov	r3, r2
   a5886:	00db      	lsls	r3, r3, #3
   a5888:	4413      	add	r3, r2
   a588a:	440b      	add	r3, r1
   a588c:	3305      	adds	r3, #5
   a588e:	2201      	movs	r2, #1
   a5890:	701a      	strb	r2, [r3, #0]
   a5892:	e072      	b.n	a597a <Cl_standby_UpdateAlarmTable+0x18e>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a5894:	7bba      	ldrb	r2, [r7, #14]
   a5896:	493f      	ldr	r1, [pc, #252]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5898:	4613      	mov	r3, r2
   a589a:	00db      	lsls	r3, r3, #3
   a589c:	4413      	add	r3, r2
   a589e:	440b      	add	r3, r1
   a58a0:	3301      	adds	r3, #1
   a58a2:	781b      	ldrb	r3, [r3, #0]
   a58a4:	3301      	adds	r3, #1
   a58a6:	b2d8      	uxtb	r0, r3
   a58a8:	493a      	ldr	r1, [pc, #232]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a58aa:	4613      	mov	r3, r2
   a58ac:	00db      	lsls	r3, r3, #3
   a58ae:	4413      	add	r3, r2
   a58b0:	440b      	add	r3, r1
   a58b2:	3301      	adds	r3, #1
   a58b4:	4602      	mov	r2, r0
   a58b6:	701a      	strb	r2, [r3, #0]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a58b8:	7bba      	ldrb	r2, [r7, #14]
   a58ba:	4936      	ldr	r1, [pc, #216]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a58bc:	4613      	mov	r3, r2
   a58be:	00db      	lsls	r3, r3, #3
   a58c0:	4413      	add	r3, r2
   a58c2:	440b      	add	r3, r1
   a58c4:	3303      	adds	r3, #3
   a58c6:	781b      	ldrb	r3, [r3, #0]
   a58c8:	3301      	adds	r3, #1
   a58ca:	b2d8      	uxtb	r0, r3
   a58cc:	4931      	ldr	r1, [pc, #196]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a58ce:	4613      	mov	r3, r2
   a58d0:	00db      	lsls	r3, r3, #3
   a58d2:	4413      	add	r3, r2
   a58d4:	440b      	add	r3, r1
   a58d6:	3303      	adds	r3, #3
   a58d8:	4602      	mov	r2, r0
   a58da:	701a      	strb	r2, [r3, #0]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a58dc:	7bba      	ldrb	r2, [r7, #14]
   a58de:	492d      	ldr	r1, [pc, #180]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a58e0:	4613      	mov	r3, r2
   a58e2:	00db      	lsls	r3, r3, #3
   a58e4:	4413      	add	r3, r2
   a58e6:	440b      	add	r3, r1
   a58e8:	3301      	adds	r3, #1
   a58ea:	781b      	ldrb	r3, [r3, #0]
   a58ec:	2b05      	cmp	r3, #5
   a58ee:	d908      	bls.n	a5902 <Cl_standby_UpdateAlarmTable+0x116>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a58f0:	7bba      	ldrb	r2, [r7, #14]
   a58f2:	4928      	ldr	r1, [pc, #160]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a58f4:	4613      	mov	r3, r2
   a58f6:	00db      	lsls	r3, r3, #3
   a58f8:	4413      	add	r3, r2
   a58fa:	440b      	add	r3, r1
   a58fc:	3303      	adds	r3, #3
   a58fe:	2200      	movs	r2, #0
   a5900:	701a      	strb	r2, [r3, #0]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a5902:	7bba      	ldrb	r2, [r7, #14]
   a5904:	4923      	ldr	r1, [pc, #140]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5906:	4613      	mov	r3, r2
   a5908:	00db      	lsls	r3, r3, #3
   a590a:	4413      	add	r3, r2
   a590c:	440b      	add	r3, r1
   a590e:	3301      	adds	r3, #1
   a5910:	781b      	ldrb	r3, [r3, #0]
   a5912:	2b3b      	cmp	r3, #59	; 0x3b
   a5914:	d931      	bls.n	a597a <Cl_standby_UpdateAlarmTable+0x18e>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a5916:	7bba      	ldrb	r2, [r7, #14]
   a5918:	491e      	ldr	r1, [pc, #120]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a591a:	4613      	mov	r3, r2
   a591c:	00db      	lsls	r3, r3, #3
   a591e:	4413      	add	r3, r2
   a5920:	440b      	add	r3, r1
   a5922:	3301      	adds	r3, #1
   a5924:	2200      	movs	r2, #0
   a5926:	701a      	strb	r2, [r3, #0]
   a5928:	e027      	b.n	a597a <Cl_standby_UpdateAlarmTable+0x18e>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a592a:	7bba      	ldrb	r2, [r7, #14]
   a592c:	4919      	ldr	r1, [pc, #100]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a592e:	4613      	mov	r3, r2
   a5930:	00db      	lsls	r3, r3, #3
   a5932:	4413      	add	r3, r2
   a5934:	440b      	add	r3, r1
   a5936:	3305      	adds	r3, #5
   a5938:	781b      	ldrb	r3, [r3, #0]
   a593a:	2b00      	cmp	r3, #0
   a593c:	d01d      	beq.n	a597a <Cl_standby_UpdateAlarmTable+0x18e>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a593e:	7bba      	ldrb	r2, [r7, #14]
   a5940:	4914      	ldr	r1, [pc, #80]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5942:	4613      	mov	r3, r2
   a5944:	00db      	lsls	r3, r3, #3
   a5946:	4413      	add	r3, r2
   a5948:	440b      	add	r3, r1
   a594a:	3305      	adds	r3, #5
   a594c:	2200      	movs	r2, #0
   a594e:	701a      	strb	r2, [r3, #0]
				command = CON_TX_COMMAND_ALARM;
   a5950:	2307      	movs	r3, #7
   a5952:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a5954:	7bba      	ldrb	r2, [r7, #14]
   a5956:	490f      	ldr	r1, [pc, #60]	; (a5994 <Cl_standby_UpdateAlarmTable+0x1a8>)
   a5958:	4613      	mov	r3, r2
   a595a:	00db      	lsls	r3, r3, #3
   a595c:	4413      	add	r3, r2
   a595e:	440b      	add	r3, r1
   a5960:	781b      	ldrb	r3, [r3, #0]
   a5962:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a5964:	2300      	movs	r3, #0
   a5966:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a5968:	f107 0108 	add.w	r1, r7, #8
   a596c:	7b7b      	ldrb	r3, [r7, #13]
   a596e:	2202      	movs	r2, #2
   a5970:	4618      	mov	r0, r3
   a5972:	4b0a      	ldr	r3, [pc, #40]	; (a599c <Cl_standby_UpdateAlarmTable+0x1b0>)
   a5974:	4798      	blx	r3
   a5976:	4603      	mov	r3, r0
   a5978:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a597a:	7bbb      	ldrb	r3, [r7, #14]
   a597c:	3301      	adds	r3, #1
   a597e:	73bb      	strb	r3, [r7, #14]
   a5980:	7bbb      	ldrb	r3, [r7, #14]
   a5982:	2b03      	cmp	r3, #3
   a5984:	f67f af3f 	bls.w	a5806 <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a5988:	7bfb      	ldrb	r3, [r7, #15]
}
   a598a:	4618      	mov	r0, r3
   a598c:	3710      	adds	r7, #16
   a598e:	46bd      	mov	sp, r7
   a5990:	bd80      	pop	{r7, pc}
   a5992:	bf00      	nop
   a5994:	20070d8c 	.word	0x20070d8c
   a5998:	00082fbd 	.word	0x00082fbd
   a599c:	0009b805 	.word	0x0009b805

000a59a0 <__aeabi_drsub>:
   a59a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a59a4:	e002      	b.n	a59ac <__adddf3>
   a59a6:	bf00      	nop

000a59a8 <__aeabi_dsub>:
   a59a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a59ac <__adddf3>:
   a59ac:	b530      	push	{r4, r5, lr}
   a59ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a59b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a59b6:	ea94 0f05 	teq	r4, r5
   a59ba:	bf08      	it	eq
   a59bc:	ea90 0f02 	teqeq	r0, r2
   a59c0:	bf1f      	itttt	ne
   a59c2:	ea54 0c00 	orrsne.w	ip, r4, r0
   a59c6:	ea55 0c02 	orrsne.w	ip, r5, r2
   a59ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a59ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a59d2:	f000 80e2 	beq.w	a5b9a <__adddf3+0x1ee>
   a59d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a59da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a59de:	bfb8      	it	lt
   a59e0:	426d      	neglt	r5, r5
   a59e2:	dd0c      	ble.n	a59fe <__adddf3+0x52>
   a59e4:	442c      	add	r4, r5
   a59e6:	ea80 0202 	eor.w	r2, r0, r2
   a59ea:	ea81 0303 	eor.w	r3, r1, r3
   a59ee:	ea82 0000 	eor.w	r0, r2, r0
   a59f2:	ea83 0101 	eor.w	r1, r3, r1
   a59f6:	ea80 0202 	eor.w	r2, r0, r2
   a59fa:	ea81 0303 	eor.w	r3, r1, r3
   a59fe:	2d36      	cmp	r5, #54	; 0x36
   a5a00:	bf88      	it	hi
   a5a02:	bd30      	pophi	{r4, r5, pc}
   a5a04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a5a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a5a0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a5a10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a5a14:	d002      	beq.n	a5a1c <__adddf3+0x70>
   a5a16:	4240      	negs	r0, r0
   a5a18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a5a1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a5a20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a5a24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a5a28:	d002      	beq.n	a5a30 <__adddf3+0x84>
   a5a2a:	4252      	negs	r2, r2
   a5a2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a5a30:	ea94 0f05 	teq	r4, r5
   a5a34:	f000 80a7 	beq.w	a5b86 <__adddf3+0x1da>
   a5a38:	f1a4 0401 	sub.w	r4, r4, #1
   a5a3c:	f1d5 0e20 	rsbs	lr, r5, #32
   a5a40:	db0d      	blt.n	a5a5e <__adddf3+0xb2>
   a5a42:	fa02 fc0e 	lsl.w	ip, r2, lr
   a5a46:	fa22 f205 	lsr.w	r2, r2, r5
   a5a4a:	1880      	adds	r0, r0, r2
   a5a4c:	f141 0100 	adc.w	r1, r1, #0
   a5a50:	fa03 f20e 	lsl.w	r2, r3, lr
   a5a54:	1880      	adds	r0, r0, r2
   a5a56:	fa43 f305 	asr.w	r3, r3, r5
   a5a5a:	4159      	adcs	r1, r3
   a5a5c:	e00e      	b.n	a5a7c <__adddf3+0xd0>
   a5a5e:	f1a5 0520 	sub.w	r5, r5, #32
   a5a62:	f10e 0e20 	add.w	lr, lr, #32
   a5a66:	2a01      	cmp	r2, #1
   a5a68:	fa03 fc0e 	lsl.w	ip, r3, lr
   a5a6c:	bf28      	it	cs
   a5a6e:	f04c 0c02 	orrcs.w	ip, ip, #2
   a5a72:	fa43 f305 	asr.w	r3, r3, r5
   a5a76:	18c0      	adds	r0, r0, r3
   a5a78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a5a7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a5a80:	d507      	bpl.n	a5a92 <__adddf3+0xe6>
   a5a82:	f04f 0e00 	mov.w	lr, #0
   a5a86:	f1dc 0c00 	rsbs	ip, ip, #0
   a5a8a:	eb7e 0000 	sbcs.w	r0, lr, r0
   a5a8e:	eb6e 0101 	sbc.w	r1, lr, r1
   a5a92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a5a96:	d31b      	bcc.n	a5ad0 <__adddf3+0x124>
   a5a98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a5a9c:	d30c      	bcc.n	a5ab8 <__adddf3+0x10c>
   a5a9e:	0849      	lsrs	r1, r1, #1
   a5aa0:	ea5f 0030 	movs.w	r0, r0, rrx
   a5aa4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a5aa8:	f104 0401 	add.w	r4, r4, #1
   a5aac:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a5ab0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a5ab4:	f080 809a 	bcs.w	a5bec <__adddf3+0x240>
   a5ab8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a5abc:	bf08      	it	eq
   a5abe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a5ac2:	f150 0000 	adcs.w	r0, r0, #0
   a5ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a5aca:	ea41 0105 	orr.w	r1, r1, r5
   a5ace:	bd30      	pop	{r4, r5, pc}
   a5ad0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a5ad4:	4140      	adcs	r0, r0
   a5ad6:	eb41 0101 	adc.w	r1, r1, r1
   a5ada:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a5ade:	f1a4 0401 	sub.w	r4, r4, #1
   a5ae2:	d1e9      	bne.n	a5ab8 <__adddf3+0x10c>
   a5ae4:	f091 0f00 	teq	r1, #0
   a5ae8:	bf04      	itt	eq
   a5aea:	4601      	moveq	r1, r0
   a5aec:	2000      	moveq	r0, #0
   a5aee:	fab1 f381 	clz	r3, r1
   a5af2:	bf08      	it	eq
   a5af4:	3320      	addeq	r3, #32
   a5af6:	f1a3 030b 	sub.w	r3, r3, #11
   a5afa:	f1b3 0220 	subs.w	r2, r3, #32
   a5afe:	da0c      	bge.n	a5b1a <__adddf3+0x16e>
   a5b00:	320c      	adds	r2, #12
   a5b02:	dd08      	ble.n	a5b16 <__adddf3+0x16a>
   a5b04:	f102 0c14 	add.w	ip, r2, #20
   a5b08:	f1c2 020c 	rsb	r2, r2, #12
   a5b0c:	fa01 f00c 	lsl.w	r0, r1, ip
   a5b10:	fa21 f102 	lsr.w	r1, r1, r2
   a5b14:	e00c      	b.n	a5b30 <__adddf3+0x184>
   a5b16:	f102 0214 	add.w	r2, r2, #20
   a5b1a:	bfd8      	it	le
   a5b1c:	f1c2 0c20 	rsble	ip, r2, #32
   a5b20:	fa01 f102 	lsl.w	r1, r1, r2
   a5b24:	fa20 fc0c 	lsr.w	ip, r0, ip
   a5b28:	bfdc      	itt	le
   a5b2a:	ea41 010c 	orrle.w	r1, r1, ip
   a5b2e:	4090      	lslle	r0, r2
   a5b30:	1ae4      	subs	r4, r4, r3
   a5b32:	bfa2      	ittt	ge
   a5b34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a5b38:	4329      	orrge	r1, r5
   a5b3a:	bd30      	popge	{r4, r5, pc}
   a5b3c:	ea6f 0404 	mvn.w	r4, r4
   a5b40:	3c1f      	subs	r4, #31
   a5b42:	da1c      	bge.n	a5b7e <__adddf3+0x1d2>
   a5b44:	340c      	adds	r4, #12
   a5b46:	dc0e      	bgt.n	a5b66 <__adddf3+0x1ba>
   a5b48:	f104 0414 	add.w	r4, r4, #20
   a5b4c:	f1c4 0220 	rsb	r2, r4, #32
   a5b50:	fa20 f004 	lsr.w	r0, r0, r4
   a5b54:	fa01 f302 	lsl.w	r3, r1, r2
   a5b58:	ea40 0003 	orr.w	r0, r0, r3
   a5b5c:	fa21 f304 	lsr.w	r3, r1, r4
   a5b60:	ea45 0103 	orr.w	r1, r5, r3
   a5b64:	bd30      	pop	{r4, r5, pc}
   a5b66:	f1c4 040c 	rsb	r4, r4, #12
   a5b6a:	f1c4 0220 	rsb	r2, r4, #32
   a5b6e:	fa20 f002 	lsr.w	r0, r0, r2
   a5b72:	fa01 f304 	lsl.w	r3, r1, r4
   a5b76:	ea40 0003 	orr.w	r0, r0, r3
   a5b7a:	4629      	mov	r1, r5
   a5b7c:	bd30      	pop	{r4, r5, pc}
   a5b7e:	fa21 f004 	lsr.w	r0, r1, r4
   a5b82:	4629      	mov	r1, r5
   a5b84:	bd30      	pop	{r4, r5, pc}
   a5b86:	f094 0f00 	teq	r4, #0
   a5b8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a5b8e:	bf06      	itte	eq
   a5b90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a5b94:	3401      	addeq	r4, #1
   a5b96:	3d01      	subne	r5, #1
   a5b98:	e74e      	b.n	a5a38 <__adddf3+0x8c>
   a5b9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a5b9e:	bf18      	it	ne
   a5ba0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a5ba4:	d029      	beq.n	a5bfa <__adddf3+0x24e>
   a5ba6:	ea94 0f05 	teq	r4, r5
   a5baa:	bf08      	it	eq
   a5bac:	ea90 0f02 	teqeq	r0, r2
   a5bb0:	d005      	beq.n	a5bbe <__adddf3+0x212>
   a5bb2:	ea54 0c00 	orrs.w	ip, r4, r0
   a5bb6:	bf04      	itt	eq
   a5bb8:	4619      	moveq	r1, r3
   a5bba:	4610      	moveq	r0, r2
   a5bbc:	bd30      	pop	{r4, r5, pc}
   a5bbe:	ea91 0f03 	teq	r1, r3
   a5bc2:	bf1e      	ittt	ne
   a5bc4:	2100      	movne	r1, #0
   a5bc6:	2000      	movne	r0, #0
   a5bc8:	bd30      	popne	{r4, r5, pc}
   a5bca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a5bce:	d105      	bne.n	a5bdc <__adddf3+0x230>
   a5bd0:	0040      	lsls	r0, r0, #1
   a5bd2:	4149      	adcs	r1, r1
   a5bd4:	bf28      	it	cs
   a5bd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a5bda:	bd30      	pop	{r4, r5, pc}
   a5bdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a5be0:	bf3c      	itt	cc
   a5be2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a5be6:	bd30      	popcc	{r4, r5, pc}
   a5be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a5bec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a5bf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a5bf4:	f04f 0000 	mov.w	r0, #0
   a5bf8:	bd30      	pop	{r4, r5, pc}
   a5bfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a5bfe:	bf1a      	itte	ne
   a5c00:	4619      	movne	r1, r3
   a5c02:	4610      	movne	r0, r2
   a5c04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a5c08:	bf1c      	itt	ne
   a5c0a:	460b      	movne	r3, r1
   a5c0c:	4602      	movne	r2, r0
   a5c0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a5c12:	bf06      	itte	eq
   a5c14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a5c18:	ea91 0f03 	teqeq	r1, r3
   a5c1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a5c20:	bd30      	pop	{r4, r5, pc}
   a5c22:	bf00      	nop

000a5c24 <__aeabi_ui2d>:
   a5c24:	f090 0f00 	teq	r0, #0
   a5c28:	bf04      	itt	eq
   a5c2a:	2100      	moveq	r1, #0
   a5c2c:	4770      	bxeq	lr
   a5c2e:	b530      	push	{r4, r5, lr}
   a5c30:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a5c34:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a5c38:	f04f 0500 	mov.w	r5, #0
   a5c3c:	f04f 0100 	mov.w	r1, #0
   a5c40:	e750      	b.n	a5ae4 <__adddf3+0x138>
   a5c42:	bf00      	nop

000a5c44 <__aeabi_i2d>:
   a5c44:	f090 0f00 	teq	r0, #0
   a5c48:	bf04      	itt	eq
   a5c4a:	2100      	moveq	r1, #0
   a5c4c:	4770      	bxeq	lr
   a5c4e:	b530      	push	{r4, r5, lr}
   a5c50:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a5c54:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a5c58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a5c5c:	bf48      	it	mi
   a5c5e:	4240      	negmi	r0, r0
   a5c60:	f04f 0100 	mov.w	r1, #0
   a5c64:	e73e      	b.n	a5ae4 <__adddf3+0x138>
   a5c66:	bf00      	nop

000a5c68 <__aeabi_f2d>:
   a5c68:	0042      	lsls	r2, r0, #1
   a5c6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a5c6e:	ea4f 0131 	mov.w	r1, r1, rrx
   a5c72:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a5c76:	bf1f      	itttt	ne
   a5c78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a5c7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a5c80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a5c84:	4770      	bxne	lr
   a5c86:	f092 0f00 	teq	r2, #0
   a5c8a:	bf14      	ite	ne
   a5c8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a5c90:	4770      	bxeq	lr
   a5c92:	b530      	push	{r4, r5, lr}
   a5c94:	f44f 7460 	mov.w	r4, #896	; 0x380
   a5c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a5c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a5ca0:	e720      	b.n	a5ae4 <__adddf3+0x138>
   a5ca2:	bf00      	nop

000a5ca4 <__aeabi_ul2d>:
   a5ca4:	ea50 0201 	orrs.w	r2, r0, r1
   a5ca8:	bf08      	it	eq
   a5caa:	4770      	bxeq	lr
   a5cac:	b530      	push	{r4, r5, lr}
   a5cae:	f04f 0500 	mov.w	r5, #0
   a5cb2:	e00a      	b.n	a5cca <__aeabi_l2d+0x16>

000a5cb4 <__aeabi_l2d>:
   a5cb4:	ea50 0201 	orrs.w	r2, r0, r1
   a5cb8:	bf08      	it	eq
   a5cba:	4770      	bxeq	lr
   a5cbc:	b530      	push	{r4, r5, lr}
   a5cbe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a5cc2:	d502      	bpl.n	a5cca <__aeabi_l2d+0x16>
   a5cc4:	4240      	negs	r0, r0
   a5cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a5cca:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a5cce:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a5cd2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a5cd6:	f43f aedc 	beq.w	a5a92 <__adddf3+0xe6>
   a5cda:	f04f 0203 	mov.w	r2, #3
   a5cde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a5ce2:	bf18      	it	ne
   a5ce4:	3203      	addne	r2, #3
   a5ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a5cea:	bf18      	it	ne
   a5cec:	3203      	addne	r2, #3
   a5cee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a5cf2:	f1c2 0320 	rsb	r3, r2, #32
   a5cf6:	fa00 fc03 	lsl.w	ip, r0, r3
   a5cfa:	fa20 f002 	lsr.w	r0, r0, r2
   a5cfe:	fa01 fe03 	lsl.w	lr, r1, r3
   a5d02:	ea40 000e 	orr.w	r0, r0, lr
   a5d06:	fa21 f102 	lsr.w	r1, r1, r2
   a5d0a:	4414      	add	r4, r2
   a5d0c:	e6c1      	b.n	a5a92 <__adddf3+0xe6>
   a5d0e:	bf00      	nop

000a5d10 <__aeabi_dmul>:
   a5d10:	b570      	push	{r4, r5, r6, lr}
   a5d12:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a5d16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a5d1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a5d1e:	bf1d      	ittte	ne
   a5d20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a5d24:	ea94 0f0c 	teqne	r4, ip
   a5d28:	ea95 0f0c 	teqne	r5, ip
   a5d2c:	f000 f8de 	bleq	a5eec <__aeabi_dmul+0x1dc>
   a5d30:	442c      	add	r4, r5
   a5d32:	ea81 0603 	eor.w	r6, r1, r3
   a5d36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a5d3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a5d3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a5d42:	bf18      	it	ne
   a5d44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a5d48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a5d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a5d50:	d038      	beq.n	a5dc4 <__aeabi_dmul+0xb4>
   a5d52:	fba0 ce02 	umull	ip, lr, r0, r2
   a5d56:	f04f 0500 	mov.w	r5, #0
   a5d5a:	fbe1 e502 	umlal	lr, r5, r1, r2
   a5d5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a5d62:	fbe0 e503 	umlal	lr, r5, r0, r3
   a5d66:	f04f 0600 	mov.w	r6, #0
   a5d6a:	fbe1 5603 	umlal	r5, r6, r1, r3
   a5d6e:	f09c 0f00 	teq	ip, #0
   a5d72:	bf18      	it	ne
   a5d74:	f04e 0e01 	orrne.w	lr, lr, #1
   a5d78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a5d7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a5d80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a5d84:	d204      	bcs.n	a5d90 <__aeabi_dmul+0x80>
   a5d86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a5d8a:	416d      	adcs	r5, r5
   a5d8c:	eb46 0606 	adc.w	r6, r6, r6
   a5d90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a5d94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a5d98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a5d9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a5da0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a5da4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a5da8:	bf88      	it	hi
   a5daa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a5dae:	d81e      	bhi.n	a5dee <__aeabi_dmul+0xde>
   a5db0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a5db4:	bf08      	it	eq
   a5db6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a5dba:	f150 0000 	adcs.w	r0, r0, #0
   a5dbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a5dc2:	bd70      	pop	{r4, r5, r6, pc}
   a5dc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a5dc8:	ea46 0101 	orr.w	r1, r6, r1
   a5dcc:	ea40 0002 	orr.w	r0, r0, r2
   a5dd0:	ea81 0103 	eor.w	r1, r1, r3
   a5dd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a5dd8:	bfc2      	ittt	gt
   a5dda:	ebd4 050c 	rsbsgt	r5, r4, ip
   a5dde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a5de2:	bd70      	popgt	{r4, r5, r6, pc}
   a5de4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a5de8:	f04f 0e00 	mov.w	lr, #0
   a5dec:	3c01      	subs	r4, #1
   a5dee:	f300 80ab 	bgt.w	a5f48 <__aeabi_dmul+0x238>
   a5df2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a5df6:	bfde      	ittt	le
   a5df8:	2000      	movle	r0, #0
   a5dfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a5dfe:	bd70      	pople	{r4, r5, r6, pc}
   a5e00:	f1c4 0400 	rsb	r4, r4, #0
   a5e04:	3c20      	subs	r4, #32
   a5e06:	da35      	bge.n	a5e74 <__aeabi_dmul+0x164>
   a5e08:	340c      	adds	r4, #12
   a5e0a:	dc1b      	bgt.n	a5e44 <__aeabi_dmul+0x134>
   a5e0c:	f104 0414 	add.w	r4, r4, #20
   a5e10:	f1c4 0520 	rsb	r5, r4, #32
   a5e14:	fa00 f305 	lsl.w	r3, r0, r5
   a5e18:	fa20 f004 	lsr.w	r0, r0, r4
   a5e1c:	fa01 f205 	lsl.w	r2, r1, r5
   a5e20:	ea40 0002 	orr.w	r0, r0, r2
   a5e24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a5e28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a5e2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a5e30:	fa21 f604 	lsr.w	r6, r1, r4
   a5e34:	eb42 0106 	adc.w	r1, r2, r6
   a5e38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a5e3c:	bf08      	it	eq
   a5e3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a5e42:	bd70      	pop	{r4, r5, r6, pc}
   a5e44:	f1c4 040c 	rsb	r4, r4, #12
   a5e48:	f1c4 0520 	rsb	r5, r4, #32
   a5e4c:	fa00 f304 	lsl.w	r3, r0, r4
   a5e50:	fa20 f005 	lsr.w	r0, r0, r5
   a5e54:	fa01 f204 	lsl.w	r2, r1, r4
   a5e58:	ea40 0002 	orr.w	r0, r0, r2
   a5e5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a5e60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a5e64:	f141 0100 	adc.w	r1, r1, #0
   a5e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a5e6c:	bf08      	it	eq
   a5e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a5e72:	bd70      	pop	{r4, r5, r6, pc}
   a5e74:	f1c4 0520 	rsb	r5, r4, #32
   a5e78:	fa00 f205 	lsl.w	r2, r0, r5
   a5e7c:	ea4e 0e02 	orr.w	lr, lr, r2
   a5e80:	fa20 f304 	lsr.w	r3, r0, r4
   a5e84:	fa01 f205 	lsl.w	r2, r1, r5
   a5e88:	ea43 0302 	orr.w	r3, r3, r2
   a5e8c:	fa21 f004 	lsr.w	r0, r1, r4
   a5e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a5e94:	fa21 f204 	lsr.w	r2, r1, r4
   a5e98:	ea20 0002 	bic.w	r0, r0, r2
   a5e9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a5ea0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a5ea4:	bf08      	it	eq
   a5ea6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a5eaa:	bd70      	pop	{r4, r5, r6, pc}
   a5eac:	f094 0f00 	teq	r4, #0
   a5eb0:	d10f      	bne.n	a5ed2 <__aeabi_dmul+0x1c2>
   a5eb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a5eb6:	0040      	lsls	r0, r0, #1
   a5eb8:	eb41 0101 	adc.w	r1, r1, r1
   a5ebc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a5ec0:	bf08      	it	eq
   a5ec2:	3c01      	subeq	r4, #1
   a5ec4:	d0f7      	beq.n	a5eb6 <__aeabi_dmul+0x1a6>
   a5ec6:	ea41 0106 	orr.w	r1, r1, r6
   a5eca:	f095 0f00 	teq	r5, #0
   a5ece:	bf18      	it	ne
   a5ed0:	4770      	bxne	lr
   a5ed2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a5ed6:	0052      	lsls	r2, r2, #1
   a5ed8:	eb43 0303 	adc.w	r3, r3, r3
   a5edc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a5ee0:	bf08      	it	eq
   a5ee2:	3d01      	subeq	r5, #1
   a5ee4:	d0f7      	beq.n	a5ed6 <__aeabi_dmul+0x1c6>
   a5ee6:	ea43 0306 	orr.w	r3, r3, r6
   a5eea:	4770      	bx	lr
   a5eec:	ea94 0f0c 	teq	r4, ip
   a5ef0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a5ef4:	bf18      	it	ne
   a5ef6:	ea95 0f0c 	teqne	r5, ip
   a5efa:	d00c      	beq.n	a5f16 <__aeabi_dmul+0x206>
   a5efc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a5f00:	bf18      	it	ne
   a5f02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a5f06:	d1d1      	bne.n	a5eac <__aeabi_dmul+0x19c>
   a5f08:	ea81 0103 	eor.w	r1, r1, r3
   a5f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a5f10:	f04f 0000 	mov.w	r0, #0
   a5f14:	bd70      	pop	{r4, r5, r6, pc}
   a5f16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a5f1a:	bf06      	itte	eq
   a5f1c:	4610      	moveq	r0, r2
   a5f1e:	4619      	moveq	r1, r3
   a5f20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a5f24:	d019      	beq.n	a5f5a <__aeabi_dmul+0x24a>
   a5f26:	ea94 0f0c 	teq	r4, ip
   a5f2a:	d102      	bne.n	a5f32 <__aeabi_dmul+0x222>
   a5f2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a5f30:	d113      	bne.n	a5f5a <__aeabi_dmul+0x24a>
   a5f32:	ea95 0f0c 	teq	r5, ip
   a5f36:	d105      	bne.n	a5f44 <__aeabi_dmul+0x234>
   a5f38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a5f3c:	bf1c      	itt	ne
   a5f3e:	4610      	movne	r0, r2
   a5f40:	4619      	movne	r1, r3
   a5f42:	d10a      	bne.n	a5f5a <__aeabi_dmul+0x24a>
   a5f44:	ea81 0103 	eor.w	r1, r1, r3
   a5f48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a5f4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a5f50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a5f54:	f04f 0000 	mov.w	r0, #0
   a5f58:	bd70      	pop	{r4, r5, r6, pc}
   a5f5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a5f5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a5f62:	bd70      	pop	{r4, r5, r6, pc}

000a5f64 <__aeabi_ddiv>:
   a5f64:	b570      	push	{r4, r5, r6, lr}
   a5f66:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a5f6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a5f6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a5f72:	bf1d      	ittte	ne
   a5f74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a5f78:	ea94 0f0c 	teqne	r4, ip
   a5f7c:	ea95 0f0c 	teqne	r5, ip
   a5f80:	f000 f8a7 	bleq	a60d2 <__aeabi_ddiv+0x16e>
   a5f84:	eba4 0405 	sub.w	r4, r4, r5
   a5f88:	ea81 0e03 	eor.w	lr, r1, r3
   a5f8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a5f90:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a5f94:	f000 8088 	beq.w	a60a8 <__aeabi_ddiv+0x144>
   a5f98:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a5f9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a5fa0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a5fa4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a5fa8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a5fac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a5fb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a5fb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a5fb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a5fbc:	429d      	cmp	r5, r3
   a5fbe:	bf08      	it	eq
   a5fc0:	4296      	cmpeq	r6, r2
   a5fc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a5fc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a5fca:	d202      	bcs.n	a5fd2 <__aeabi_ddiv+0x6e>
   a5fcc:	085b      	lsrs	r3, r3, #1
   a5fce:	ea4f 0232 	mov.w	r2, r2, rrx
   a5fd2:	1ab6      	subs	r6, r6, r2
   a5fd4:	eb65 0503 	sbc.w	r5, r5, r3
   a5fd8:	085b      	lsrs	r3, r3, #1
   a5fda:	ea4f 0232 	mov.w	r2, r2, rrx
   a5fde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a5fe2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a5fe6:	ebb6 0e02 	subs.w	lr, r6, r2
   a5fea:	eb75 0e03 	sbcs.w	lr, r5, r3
   a5fee:	bf22      	ittt	cs
   a5ff0:	1ab6      	subcs	r6, r6, r2
   a5ff2:	4675      	movcs	r5, lr
   a5ff4:	ea40 000c 	orrcs.w	r0, r0, ip
   a5ff8:	085b      	lsrs	r3, r3, #1
   a5ffa:	ea4f 0232 	mov.w	r2, r2, rrx
   a5ffe:	ebb6 0e02 	subs.w	lr, r6, r2
   a6002:	eb75 0e03 	sbcs.w	lr, r5, r3
   a6006:	bf22      	ittt	cs
   a6008:	1ab6      	subcs	r6, r6, r2
   a600a:	4675      	movcs	r5, lr
   a600c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a6010:	085b      	lsrs	r3, r3, #1
   a6012:	ea4f 0232 	mov.w	r2, r2, rrx
   a6016:	ebb6 0e02 	subs.w	lr, r6, r2
   a601a:	eb75 0e03 	sbcs.w	lr, r5, r3
   a601e:	bf22      	ittt	cs
   a6020:	1ab6      	subcs	r6, r6, r2
   a6022:	4675      	movcs	r5, lr
   a6024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a6028:	085b      	lsrs	r3, r3, #1
   a602a:	ea4f 0232 	mov.w	r2, r2, rrx
   a602e:	ebb6 0e02 	subs.w	lr, r6, r2
   a6032:	eb75 0e03 	sbcs.w	lr, r5, r3
   a6036:	bf22      	ittt	cs
   a6038:	1ab6      	subcs	r6, r6, r2
   a603a:	4675      	movcs	r5, lr
   a603c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a6040:	ea55 0e06 	orrs.w	lr, r5, r6
   a6044:	d018      	beq.n	a6078 <__aeabi_ddiv+0x114>
   a6046:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a604a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a604e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a6052:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a6056:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a605a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a605e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a6062:	d1c0      	bne.n	a5fe6 <__aeabi_ddiv+0x82>
   a6064:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a6068:	d10b      	bne.n	a6082 <__aeabi_ddiv+0x11e>
   a606a:	ea41 0100 	orr.w	r1, r1, r0
   a606e:	f04f 0000 	mov.w	r0, #0
   a6072:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a6076:	e7b6      	b.n	a5fe6 <__aeabi_ddiv+0x82>
   a6078:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a607c:	bf04      	itt	eq
   a607e:	4301      	orreq	r1, r0
   a6080:	2000      	moveq	r0, #0
   a6082:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a6086:	bf88      	it	hi
   a6088:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a608c:	f63f aeaf 	bhi.w	a5dee <__aeabi_dmul+0xde>
   a6090:	ebb5 0c03 	subs.w	ip, r5, r3
   a6094:	bf04      	itt	eq
   a6096:	ebb6 0c02 	subseq.w	ip, r6, r2
   a609a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a609e:	f150 0000 	adcs.w	r0, r0, #0
   a60a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a60a6:	bd70      	pop	{r4, r5, r6, pc}
   a60a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a60ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a60b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a60b4:	bfc2      	ittt	gt
   a60b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   a60ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a60be:	bd70      	popgt	{r4, r5, r6, pc}
   a60c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a60c4:	f04f 0e00 	mov.w	lr, #0
   a60c8:	3c01      	subs	r4, #1
   a60ca:	e690      	b.n	a5dee <__aeabi_dmul+0xde>
   a60cc:	ea45 0e06 	orr.w	lr, r5, r6
   a60d0:	e68d      	b.n	a5dee <__aeabi_dmul+0xde>
   a60d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a60d6:	ea94 0f0c 	teq	r4, ip
   a60da:	bf08      	it	eq
   a60dc:	ea95 0f0c 	teqeq	r5, ip
   a60e0:	f43f af3b 	beq.w	a5f5a <__aeabi_dmul+0x24a>
   a60e4:	ea94 0f0c 	teq	r4, ip
   a60e8:	d10a      	bne.n	a6100 <__aeabi_ddiv+0x19c>
   a60ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a60ee:	f47f af34 	bne.w	a5f5a <__aeabi_dmul+0x24a>
   a60f2:	ea95 0f0c 	teq	r5, ip
   a60f6:	f47f af25 	bne.w	a5f44 <__aeabi_dmul+0x234>
   a60fa:	4610      	mov	r0, r2
   a60fc:	4619      	mov	r1, r3
   a60fe:	e72c      	b.n	a5f5a <__aeabi_dmul+0x24a>
   a6100:	ea95 0f0c 	teq	r5, ip
   a6104:	d106      	bne.n	a6114 <__aeabi_ddiv+0x1b0>
   a6106:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a610a:	f43f aefd 	beq.w	a5f08 <__aeabi_dmul+0x1f8>
   a610e:	4610      	mov	r0, r2
   a6110:	4619      	mov	r1, r3
   a6112:	e722      	b.n	a5f5a <__aeabi_dmul+0x24a>
   a6114:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a6118:	bf18      	it	ne
   a611a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a611e:	f47f aec5 	bne.w	a5eac <__aeabi_dmul+0x19c>
   a6122:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a6126:	f47f af0d 	bne.w	a5f44 <__aeabi_dmul+0x234>
   a612a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a612e:	f47f aeeb 	bne.w	a5f08 <__aeabi_dmul+0x1f8>
   a6132:	e712      	b.n	a5f5a <__aeabi_dmul+0x24a>

000a6134 <__gedf2>:
   a6134:	f04f 3cff 	mov.w	ip, #4294967295
   a6138:	e006      	b.n	a6148 <__cmpdf2+0x4>
   a613a:	bf00      	nop

000a613c <__ledf2>:
   a613c:	f04f 0c01 	mov.w	ip, #1
   a6140:	e002      	b.n	a6148 <__cmpdf2+0x4>
   a6142:	bf00      	nop

000a6144 <__cmpdf2>:
   a6144:	f04f 0c01 	mov.w	ip, #1
   a6148:	f84d cd04 	str.w	ip, [sp, #-4]!
   a614c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a6150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a6154:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a6158:	bf18      	it	ne
   a615a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a615e:	d01b      	beq.n	a6198 <__cmpdf2+0x54>
   a6160:	b001      	add	sp, #4
   a6162:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a6166:	bf0c      	ite	eq
   a6168:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a616c:	ea91 0f03 	teqne	r1, r3
   a6170:	bf02      	ittt	eq
   a6172:	ea90 0f02 	teqeq	r0, r2
   a6176:	2000      	moveq	r0, #0
   a6178:	4770      	bxeq	lr
   a617a:	f110 0f00 	cmn.w	r0, #0
   a617e:	ea91 0f03 	teq	r1, r3
   a6182:	bf58      	it	pl
   a6184:	4299      	cmppl	r1, r3
   a6186:	bf08      	it	eq
   a6188:	4290      	cmpeq	r0, r2
   a618a:	bf2c      	ite	cs
   a618c:	17d8      	asrcs	r0, r3, #31
   a618e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a6192:	f040 0001 	orr.w	r0, r0, #1
   a6196:	4770      	bx	lr
   a6198:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a619c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a61a0:	d102      	bne.n	a61a8 <__cmpdf2+0x64>
   a61a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a61a6:	d107      	bne.n	a61b8 <__cmpdf2+0x74>
   a61a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a61ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a61b0:	d1d6      	bne.n	a6160 <__cmpdf2+0x1c>
   a61b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a61b6:	d0d3      	beq.n	a6160 <__cmpdf2+0x1c>
   a61b8:	f85d 0b04 	ldr.w	r0, [sp], #4
   a61bc:	4770      	bx	lr
   a61be:	bf00      	nop

000a61c0 <__aeabi_cdrcmple>:
   a61c0:	4684      	mov	ip, r0
   a61c2:	4610      	mov	r0, r2
   a61c4:	4662      	mov	r2, ip
   a61c6:	468c      	mov	ip, r1
   a61c8:	4619      	mov	r1, r3
   a61ca:	4663      	mov	r3, ip
   a61cc:	e000      	b.n	a61d0 <__aeabi_cdcmpeq>
   a61ce:	bf00      	nop

000a61d0 <__aeabi_cdcmpeq>:
   a61d0:	b501      	push	{r0, lr}
   a61d2:	f7ff ffb7 	bl	a6144 <__cmpdf2>
   a61d6:	2800      	cmp	r0, #0
   a61d8:	bf48      	it	mi
   a61da:	f110 0f00 	cmnmi.w	r0, #0
   a61de:	bd01      	pop	{r0, pc}

000a61e0 <__aeabi_dcmpeq>:
   a61e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a61e4:	f7ff fff4 	bl	a61d0 <__aeabi_cdcmpeq>
   a61e8:	bf0c      	ite	eq
   a61ea:	2001      	moveq	r0, #1
   a61ec:	2000      	movne	r0, #0
   a61ee:	f85d fb08 	ldr.w	pc, [sp], #8
   a61f2:	bf00      	nop

000a61f4 <__aeabi_dcmplt>:
   a61f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a61f8:	f7ff ffea 	bl	a61d0 <__aeabi_cdcmpeq>
   a61fc:	bf34      	ite	cc
   a61fe:	2001      	movcc	r0, #1
   a6200:	2000      	movcs	r0, #0
   a6202:	f85d fb08 	ldr.w	pc, [sp], #8
   a6206:	bf00      	nop

000a6208 <__aeabi_dcmple>:
   a6208:	f84d ed08 	str.w	lr, [sp, #-8]!
   a620c:	f7ff ffe0 	bl	a61d0 <__aeabi_cdcmpeq>
   a6210:	bf94      	ite	ls
   a6212:	2001      	movls	r0, #1
   a6214:	2000      	movhi	r0, #0
   a6216:	f85d fb08 	ldr.w	pc, [sp], #8
   a621a:	bf00      	nop

000a621c <__aeabi_dcmpge>:
   a621c:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6220:	f7ff ffce 	bl	a61c0 <__aeabi_cdrcmple>
   a6224:	bf94      	ite	ls
   a6226:	2001      	movls	r0, #1
   a6228:	2000      	movhi	r0, #0
   a622a:	f85d fb08 	ldr.w	pc, [sp], #8
   a622e:	bf00      	nop

000a6230 <__aeabi_dcmpgt>:
   a6230:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6234:	f7ff ffc4 	bl	a61c0 <__aeabi_cdrcmple>
   a6238:	bf34      	ite	cc
   a623a:	2001      	movcc	r0, #1
   a623c:	2000      	movcs	r0, #0
   a623e:	f85d fb08 	ldr.w	pc, [sp], #8
   a6242:	bf00      	nop

000a6244 <__aeabi_d2iz>:
   a6244:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a6248:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a624c:	d215      	bcs.n	a627a <__aeabi_d2iz+0x36>
   a624e:	d511      	bpl.n	a6274 <__aeabi_d2iz+0x30>
   a6250:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a6254:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a6258:	d912      	bls.n	a6280 <__aeabi_d2iz+0x3c>
   a625a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a625e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a6262:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a6266:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a626a:	fa23 f002 	lsr.w	r0, r3, r2
   a626e:	bf18      	it	ne
   a6270:	4240      	negne	r0, r0
   a6272:	4770      	bx	lr
   a6274:	f04f 0000 	mov.w	r0, #0
   a6278:	4770      	bx	lr
   a627a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a627e:	d105      	bne.n	a628c <__aeabi_d2iz+0x48>
   a6280:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a6284:	bf08      	it	eq
   a6286:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a628a:	4770      	bx	lr
   a628c:	f04f 0000 	mov.w	r0, #0
   a6290:	4770      	bx	lr
   a6292:	bf00      	nop

000a6294 <__aeabi_d2uiz>:
   a6294:	004a      	lsls	r2, r1, #1
   a6296:	d211      	bcs.n	a62bc <__aeabi_d2uiz+0x28>
   a6298:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a629c:	d211      	bcs.n	a62c2 <__aeabi_d2uiz+0x2e>
   a629e:	d50d      	bpl.n	a62bc <__aeabi_d2uiz+0x28>
   a62a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a62a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a62a8:	d40e      	bmi.n	a62c8 <__aeabi_d2uiz+0x34>
   a62aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a62ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a62b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a62b6:	fa23 f002 	lsr.w	r0, r3, r2
   a62ba:	4770      	bx	lr
   a62bc:	f04f 0000 	mov.w	r0, #0
   a62c0:	4770      	bx	lr
   a62c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a62c6:	d102      	bne.n	a62ce <__aeabi_d2uiz+0x3a>
   a62c8:	f04f 30ff 	mov.w	r0, #4294967295
   a62cc:	4770      	bx	lr
   a62ce:	f04f 0000 	mov.w	r0, #0
   a62d2:	4770      	bx	lr

000a62d4 <__aeabi_d2f>:
   a62d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a62d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a62dc:	bf24      	itt	cs
   a62de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a62e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a62e6:	d90d      	bls.n	a6304 <__aeabi_d2f+0x30>
   a62e8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a62ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a62f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a62f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a62f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a62fc:	bf08      	it	eq
   a62fe:	f020 0001 	biceq.w	r0, r0, #1
   a6302:	4770      	bx	lr
   a6304:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a6308:	d121      	bne.n	a634e <__aeabi_d2f+0x7a>
   a630a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a630e:	bfbc      	itt	lt
   a6310:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a6314:	4770      	bxlt	lr
   a6316:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a631a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a631e:	f1c2 0218 	rsb	r2, r2, #24
   a6322:	f1c2 0c20 	rsb	ip, r2, #32
   a6326:	fa10 f30c 	lsls.w	r3, r0, ip
   a632a:	fa20 f002 	lsr.w	r0, r0, r2
   a632e:	bf18      	it	ne
   a6330:	f040 0001 	orrne.w	r0, r0, #1
   a6334:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a6338:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a633c:	fa03 fc0c 	lsl.w	ip, r3, ip
   a6340:	ea40 000c 	orr.w	r0, r0, ip
   a6344:	fa23 f302 	lsr.w	r3, r3, r2
   a6348:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a634c:	e7cc      	b.n	a62e8 <__aeabi_d2f+0x14>
   a634e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a6352:	d107      	bne.n	a6364 <__aeabi_d2f+0x90>
   a6354:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a6358:	bf1e      	ittt	ne
   a635a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a635e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a6362:	4770      	bxne	lr
   a6364:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a6368:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a636c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6370:	4770      	bx	lr
   a6372:	bf00      	nop

000a6374 <__aeabi_frsub>:
   a6374:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a6378:	e002      	b.n	a6380 <__addsf3>
   a637a:	bf00      	nop

000a637c <__aeabi_fsub>:
   a637c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a6380 <__addsf3>:
   a6380:	0042      	lsls	r2, r0, #1
   a6382:	bf1f      	itttt	ne
   a6384:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a6388:	ea92 0f03 	teqne	r2, r3
   a638c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a6390:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a6394:	d06a      	beq.n	a646c <__addsf3+0xec>
   a6396:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a639a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a639e:	bfc1      	itttt	gt
   a63a0:	18d2      	addgt	r2, r2, r3
   a63a2:	4041      	eorgt	r1, r0
   a63a4:	4048      	eorgt	r0, r1
   a63a6:	4041      	eorgt	r1, r0
   a63a8:	bfb8      	it	lt
   a63aa:	425b      	neglt	r3, r3
   a63ac:	2b19      	cmp	r3, #25
   a63ae:	bf88      	it	hi
   a63b0:	4770      	bxhi	lr
   a63b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a63b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a63ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a63be:	bf18      	it	ne
   a63c0:	4240      	negne	r0, r0
   a63c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a63c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a63ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a63ce:	bf18      	it	ne
   a63d0:	4249      	negne	r1, r1
   a63d2:	ea92 0f03 	teq	r2, r3
   a63d6:	d03f      	beq.n	a6458 <__addsf3+0xd8>
   a63d8:	f1a2 0201 	sub.w	r2, r2, #1
   a63dc:	fa41 fc03 	asr.w	ip, r1, r3
   a63e0:	eb10 000c 	adds.w	r0, r0, ip
   a63e4:	f1c3 0320 	rsb	r3, r3, #32
   a63e8:	fa01 f103 	lsl.w	r1, r1, r3
   a63ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a63f0:	d502      	bpl.n	a63f8 <__addsf3+0x78>
   a63f2:	4249      	negs	r1, r1
   a63f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a63f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a63fc:	d313      	bcc.n	a6426 <__addsf3+0xa6>
   a63fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a6402:	d306      	bcc.n	a6412 <__addsf3+0x92>
   a6404:	0840      	lsrs	r0, r0, #1
   a6406:	ea4f 0131 	mov.w	r1, r1, rrx
   a640a:	f102 0201 	add.w	r2, r2, #1
   a640e:	2afe      	cmp	r2, #254	; 0xfe
   a6410:	d251      	bcs.n	a64b6 <__addsf3+0x136>
   a6412:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a6416:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a641a:	bf08      	it	eq
   a641c:	f020 0001 	biceq.w	r0, r0, #1
   a6420:	ea40 0003 	orr.w	r0, r0, r3
   a6424:	4770      	bx	lr
   a6426:	0049      	lsls	r1, r1, #1
   a6428:	eb40 0000 	adc.w	r0, r0, r0
   a642c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a6430:	f1a2 0201 	sub.w	r2, r2, #1
   a6434:	d1ed      	bne.n	a6412 <__addsf3+0x92>
   a6436:	fab0 fc80 	clz	ip, r0
   a643a:	f1ac 0c08 	sub.w	ip, ip, #8
   a643e:	ebb2 020c 	subs.w	r2, r2, ip
   a6442:	fa00 f00c 	lsl.w	r0, r0, ip
   a6446:	bfaa      	itet	ge
   a6448:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a644c:	4252      	neglt	r2, r2
   a644e:	4318      	orrge	r0, r3
   a6450:	bfbc      	itt	lt
   a6452:	40d0      	lsrlt	r0, r2
   a6454:	4318      	orrlt	r0, r3
   a6456:	4770      	bx	lr
   a6458:	f092 0f00 	teq	r2, #0
   a645c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a6460:	bf06      	itte	eq
   a6462:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a6466:	3201      	addeq	r2, #1
   a6468:	3b01      	subne	r3, #1
   a646a:	e7b5      	b.n	a63d8 <__addsf3+0x58>
   a646c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a6470:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a6474:	bf18      	it	ne
   a6476:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a647a:	d021      	beq.n	a64c0 <__addsf3+0x140>
   a647c:	ea92 0f03 	teq	r2, r3
   a6480:	d004      	beq.n	a648c <__addsf3+0x10c>
   a6482:	f092 0f00 	teq	r2, #0
   a6486:	bf08      	it	eq
   a6488:	4608      	moveq	r0, r1
   a648a:	4770      	bx	lr
   a648c:	ea90 0f01 	teq	r0, r1
   a6490:	bf1c      	itt	ne
   a6492:	2000      	movne	r0, #0
   a6494:	4770      	bxne	lr
   a6496:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a649a:	d104      	bne.n	a64a6 <__addsf3+0x126>
   a649c:	0040      	lsls	r0, r0, #1
   a649e:	bf28      	it	cs
   a64a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a64a4:	4770      	bx	lr
   a64a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a64aa:	bf3c      	itt	cc
   a64ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a64b0:	4770      	bxcc	lr
   a64b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a64b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a64ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a64be:	4770      	bx	lr
   a64c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a64c4:	bf16      	itet	ne
   a64c6:	4608      	movne	r0, r1
   a64c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a64cc:	4601      	movne	r1, r0
   a64ce:	0242      	lsls	r2, r0, #9
   a64d0:	bf06      	itte	eq
   a64d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a64d6:	ea90 0f01 	teqeq	r0, r1
   a64da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a64de:	4770      	bx	lr

000a64e0 <__aeabi_ui2f>:
   a64e0:	f04f 0300 	mov.w	r3, #0
   a64e4:	e004      	b.n	a64f0 <__aeabi_i2f+0x8>
   a64e6:	bf00      	nop

000a64e8 <__aeabi_i2f>:
   a64e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a64ec:	bf48      	it	mi
   a64ee:	4240      	negmi	r0, r0
   a64f0:	ea5f 0c00 	movs.w	ip, r0
   a64f4:	bf08      	it	eq
   a64f6:	4770      	bxeq	lr
   a64f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a64fc:	4601      	mov	r1, r0
   a64fe:	f04f 0000 	mov.w	r0, #0
   a6502:	e01c      	b.n	a653e <__aeabi_l2f+0x2a>

000a6504 <__aeabi_ul2f>:
   a6504:	ea50 0201 	orrs.w	r2, r0, r1
   a6508:	bf08      	it	eq
   a650a:	4770      	bxeq	lr
   a650c:	f04f 0300 	mov.w	r3, #0
   a6510:	e00a      	b.n	a6528 <__aeabi_l2f+0x14>
   a6512:	bf00      	nop

000a6514 <__aeabi_l2f>:
   a6514:	ea50 0201 	orrs.w	r2, r0, r1
   a6518:	bf08      	it	eq
   a651a:	4770      	bxeq	lr
   a651c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a6520:	d502      	bpl.n	a6528 <__aeabi_l2f+0x14>
   a6522:	4240      	negs	r0, r0
   a6524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a6528:	ea5f 0c01 	movs.w	ip, r1
   a652c:	bf02      	ittt	eq
   a652e:	4684      	moveq	ip, r0
   a6530:	4601      	moveq	r1, r0
   a6532:	2000      	moveq	r0, #0
   a6534:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a6538:	bf08      	it	eq
   a653a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a653e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a6542:	fabc f28c 	clz	r2, ip
   a6546:	3a08      	subs	r2, #8
   a6548:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a654c:	db10      	blt.n	a6570 <__aeabi_l2f+0x5c>
   a654e:	fa01 fc02 	lsl.w	ip, r1, r2
   a6552:	4463      	add	r3, ip
   a6554:	fa00 fc02 	lsl.w	ip, r0, r2
   a6558:	f1c2 0220 	rsb	r2, r2, #32
   a655c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a6560:	fa20 f202 	lsr.w	r2, r0, r2
   a6564:	eb43 0002 	adc.w	r0, r3, r2
   a6568:	bf08      	it	eq
   a656a:	f020 0001 	biceq.w	r0, r0, #1
   a656e:	4770      	bx	lr
   a6570:	f102 0220 	add.w	r2, r2, #32
   a6574:	fa01 fc02 	lsl.w	ip, r1, r2
   a6578:	f1c2 0220 	rsb	r2, r2, #32
   a657c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a6580:	fa21 f202 	lsr.w	r2, r1, r2
   a6584:	eb43 0002 	adc.w	r0, r3, r2
   a6588:	bf08      	it	eq
   a658a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a658e:	4770      	bx	lr

000a6590 <__aeabi_fmul>:
   a6590:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a6594:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a6598:	bf1e      	ittt	ne
   a659a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a659e:	ea92 0f0c 	teqne	r2, ip
   a65a2:	ea93 0f0c 	teqne	r3, ip
   a65a6:	d06f      	beq.n	a6688 <__aeabi_fmul+0xf8>
   a65a8:	441a      	add	r2, r3
   a65aa:	ea80 0c01 	eor.w	ip, r0, r1
   a65ae:	0240      	lsls	r0, r0, #9
   a65b0:	bf18      	it	ne
   a65b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a65b6:	d01e      	beq.n	a65f6 <__aeabi_fmul+0x66>
   a65b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a65bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a65c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a65c4:	fba0 3101 	umull	r3, r1, r0, r1
   a65c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a65cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a65d0:	bf3e      	ittt	cc
   a65d2:	0049      	lslcc	r1, r1, #1
   a65d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a65d8:	005b      	lslcc	r3, r3, #1
   a65da:	ea40 0001 	orr.w	r0, r0, r1
   a65de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a65e2:	2afd      	cmp	r2, #253	; 0xfd
   a65e4:	d81d      	bhi.n	a6622 <__aeabi_fmul+0x92>
   a65e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a65ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a65ee:	bf08      	it	eq
   a65f0:	f020 0001 	biceq.w	r0, r0, #1
   a65f4:	4770      	bx	lr
   a65f6:	f090 0f00 	teq	r0, #0
   a65fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a65fe:	bf08      	it	eq
   a6600:	0249      	lsleq	r1, r1, #9
   a6602:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a6606:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a660a:	3a7f      	subs	r2, #127	; 0x7f
   a660c:	bfc2      	ittt	gt
   a660e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a6612:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a6616:	4770      	bxgt	lr
   a6618:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a661c:	f04f 0300 	mov.w	r3, #0
   a6620:	3a01      	subs	r2, #1
   a6622:	dc5d      	bgt.n	a66e0 <__aeabi_fmul+0x150>
   a6624:	f112 0f19 	cmn.w	r2, #25
   a6628:	bfdc      	itt	le
   a662a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a662e:	4770      	bxle	lr
   a6630:	f1c2 0200 	rsb	r2, r2, #0
   a6634:	0041      	lsls	r1, r0, #1
   a6636:	fa21 f102 	lsr.w	r1, r1, r2
   a663a:	f1c2 0220 	rsb	r2, r2, #32
   a663e:	fa00 fc02 	lsl.w	ip, r0, r2
   a6642:	ea5f 0031 	movs.w	r0, r1, rrx
   a6646:	f140 0000 	adc.w	r0, r0, #0
   a664a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a664e:	bf08      	it	eq
   a6650:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a6654:	4770      	bx	lr
   a6656:	f092 0f00 	teq	r2, #0
   a665a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a665e:	bf02      	ittt	eq
   a6660:	0040      	lsleq	r0, r0, #1
   a6662:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a6666:	3a01      	subeq	r2, #1
   a6668:	d0f9      	beq.n	a665e <__aeabi_fmul+0xce>
   a666a:	ea40 000c 	orr.w	r0, r0, ip
   a666e:	f093 0f00 	teq	r3, #0
   a6672:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a6676:	bf02      	ittt	eq
   a6678:	0049      	lsleq	r1, r1, #1
   a667a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a667e:	3b01      	subeq	r3, #1
   a6680:	d0f9      	beq.n	a6676 <__aeabi_fmul+0xe6>
   a6682:	ea41 010c 	orr.w	r1, r1, ip
   a6686:	e78f      	b.n	a65a8 <__aeabi_fmul+0x18>
   a6688:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a668c:	ea92 0f0c 	teq	r2, ip
   a6690:	bf18      	it	ne
   a6692:	ea93 0f0c 	teqne	r3, ip
   a6696:	d00a      	beq.n	a66ae <__aeabi_fmul+0x11e>
   a6698:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a669c:	bf18      	it	ne
   a669e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a66a2:	d1d8      	bne.n	a6656 <__aeabi_fmul+0xc6>
   a66a4:	ea80 0001 	eor.w	r0, r0, r1
   a66a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a66ac:	4770      	bx	lr
   a66ae:	f090 0f00 	teq	r0, #0
   a66b2:	bf17      	itett	ne
   a66b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a66b8:	4608      	moveq	r0, r1
   a66ba:	f091 0f00 	teqne	r1, #0
   a66be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a66c2:	d014      	beq.n	a66ee <__aeabi_fmul+0x15e>
   a66c4:	ea92 0f0c 	teq	r2, ip
   a66c8:	d101      	bne.n	a66ce <__aeabi_fmul+0x13e>
   a66ca:	0242      	lsls	r2, r0, #9
   a66cc:	d10f      	bne.n	a66ee <__aeabi_fmul+0x15e>
   a66ce:	ea93 0f0c 	teq	r3, ip
   a66d2:	d103      	bne.n	a66dc <__aeabi_fmul+0x14c>
   a66d4:	024b      	lsls	r3, r1, #9
   a66d6:	bf18      	it	ne
   a66d8:	4608      	movne	r0, r1
   a66da:	d108      	bne.n	a66ee <__aeabi_fmul+0x15e>
   a66dc:	ea80 0001 	eor.w	r0, r0, r1
   a66e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a66e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a66e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a66ec:	4770      	bx	lr
   a66ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a66f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a66f6:	4770      	bx	lr

000a66f8 <__aeabi_fdiv>:
   a66f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a66fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a6700:	bf1e      	ittt	ne
   a6702:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a6706:	ea92 0f0c 	teqne	r2, ip
   a670a:	ea93 0f0c 	teqne	r3, ip
   a670e:	d069      	beq.n	a67e4 <__aeabi_fdiv+0xec>
   a6710:	eba2 0203 	sub.w	r2, r2, r3
   a6714:	ea80 0c01 	eor.w	ip, r0, r1
   a6718:	0249      	lsls	r1, r1, #9
   a671a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a671e:	d037      	beq.n	a6790 <__aeabi_fdiv+0x98>
   a6720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a6724:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a6728:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a672c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a6730:	428b      	cmp	r3, r1
   a6732:	bf38      	it	cc
   a6734:	005b      	lslcc	r3, r3, #1
   a6736:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a673a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a673e:	428b      	cmp	r3, r1
   a6740:	bf24      	itt	cs
   a6742:	1a5b      	subcs	r3, r3, r1
   a6744:	ea40 000c 	orrcs.w	r0, r0, ip
   a6748:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a674c:	bf24      	itt	cs
   a674e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a6752:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a6756:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a675a:	bf24      	itt	cs
   a675c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a6760:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a6764:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a6768:	bf24      	itt	cs
   a676a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a676e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a6772:	011b      	lsls	r3, r3, #4
   a6774:	bf18      	it	ne
   a6776:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a677a:	d1e0      	bne.n	a673e <__aeabi_fdiv+0x46>
   a677c:	2afd      	cmp	r2, #253	; 0xfd
   a677e:	f63f af50 	bhi.w	a6622 <__aeabi_fmul+0x92>
   a6782:	428b      	cmp	r3, r1
   a6784:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a6788:	bf08      	it	eq
   a678a:	f020 0001 	biceq.w	r0, r0, #1
   a678e:	4770      	bx	lr
   a6790:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a6794:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a6798:	327f      	adds	r2, #127	; 0x7f
   a679a:	bfc2      	ittt	gt
   a679c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a67a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a67a4:	4770      	bxgt	lr
   a67a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a67aa:	f04f 0300 	mov.w	r3, #0
   a67ae:	3a01      	subs	r2, #1
   a67b0:	e737      	b.n	a6622 <__aeabi_fmul+0x92>
   a67b2:	f092 0f00 	teq	r2, #0
   a67b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a67ba:	bf02      	ittt	eq
   a67bc:	0040      	lsleq	r0, r0, #1
   a67be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a67c2:	3a01      	subeq	r2, #1
   a67c4:	d0f9      	beq.n	a67ba <__aeabi_fdiv+0xc2>
   a67c6:	ea40 000c 	orr.w	r0, r0, ip
   a67ca:	f093 0f00 	teq	r3, #0
   a67ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a67d2:	bf02      	ittt	eq
   a67d4:	0049      	lsleq	r1, r1, #1
   a67d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a67da:	3b01      	subeq	r3, #1
   a67dc:	d0f9      	beq.n	a67d2 <__aeabi_fdiv+0xda>
   a67de:	ea41 010c 	orr.w	r1, r1, ip
   a67e2:	e795      	b.n	a6710 <__aeabi_fdiv+0x18>
   a67e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a67e8:	ea92 0f0c 	teq	r2, ip
   a67ec:	d108      	bne.n	a6800 <__aeabi_fdiv+0x108>
   a67ee:	0242      	lsls	r2, r0, #9
   a67f0:	f47f af7d 	bne.w	a66ee <__aeabi_fmul+0x15e>
   a67f4:	ea93 0f0c 	teq	r3, ip
   a67f8:	f47f af70 	bne.w	a66dc <__aeabi_fmul+0x14c>
   a67fc:	4608      	mov	r0, r1
   a67fe:	e776      	b.n	a66ee <__aeabi_fmul+0x15e>
   a6800:	ea93 0f0c 	teq	r3, ip
   a6804:	d104      	bne.n	a6810 <__aeabi_fdiv+0x118>
   a6806:	024b      	lsls	r3, r1, #9
   a6808:	f43f af4c 	beq.w	a66a4 <__aeabi_fmul+0x114>
   a680c:	4608      	mov	r0, r1
   a680e:	e76e      	b.n	a66ee <__aeabi_fmul+0x15e>
   a6810:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a6814:	bf18      	it	ne
   a6816:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a681a:	d1ca      	bne.n	a67b2 <__aeabi_fdiv+0xba>
   a681c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a6820:	f47f af5c 	bne.w	a66dc <__aeabi_fmul+0x14c>
   a6824:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a6828:	f47f af3c 	bne.w	a66a4 <__aeabi_fmul+0x114>
   a682c:	e75f      	b.n	a66ee <__aeabi_fmul+0x15e>
   a682e:	bf00      	nop

000a6830 <__gesf2>:
   a6830:	f04f 3cff 	mov.w	ip, #4294967295
   a6834:	e006      	b.n	a6844 <__cmpsf2+0x4>
   a6836:	bf00      	nop

000a6838 <__lesf2>:
   a6838:	f04f 0c01 	mov.w	ip, #1
   a683c:	e002      	b.n	a6844 <__cmpsf2+0x4>
   a683e:	bf00      	nop

000a6840 <__cmpsf2>:
   a6840:	f04f 0c01 	mov.w	ip, #1
   a6844:	f84d cd04 	str.w	ip, [sp, #-4]!
   a6848:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a684c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a6850:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a6854:	bf18      	it	ne
   a6856:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a685a:	d011      	beq.n	a6880 <__cmpsf2+0x40>
   a685c:	b001      	add	sp, #4
   a685e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a6862:	bf18      	it	ne
   a6864:	ea90 0f01 	teqne	r0, r1
   a6868:	bf58      	it	pl
   a686a:	ebb2 0003 	subspl.w	r0, r2, r3
   a686e:	bf88      	it	hi
   a6870:	17c8      	asrhi	r0, r1, #31
   a6872:	bf38      	it	cc
   a6874:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a6878:	bf18      	it	ne
   a687a:	f040 0001 	orrne.w	r0, r0, #1
   a687e:	4770      	bx	lr
   a6880:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a6884:	d102      	bne.n	a688c <__cmpsf2+0x4c>
   a6886:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a688a:	d105      	bne.n	a6898 <__cmpsf2+0x58>
   a688c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a6890:	d1e4      	bne.n	a685c <__cmpsf2+0x1c>
   a6892:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a6896:	d0e1      	beq.n	a685c <__cmpsf2+0x1c>
   a6898:	f85d 0b04 	ldr.w	r0, [sp], #4
   a689c:	4770      	bx	lr
   a689e:	bf00      	nop

000a68a0 <__aeabi_cfrcmple>:
   a68a0:	4684      	mov	ip, r0
   a68a2:	4608      	mov	r0, r1
   a68a4:	4661      	mov	r1, ip
   a68a6:	e7ff      	b.n	a68a8 <__aeabi_cfcmpeq>

000a68a8 <__aeabi_cfcmpeq>:
   a68a8:	b50f      	push	{r0, r1, r2, r3, lr}
   a68aa:	f7ff ffc9 	bl	a6840 <__cmpsf2>
   a68ae:	2800      	cmp	r0, #0
   a68b0:	bf48      	it	mi
   a68b2:	f110 0f00 	cmnmi.w	r0, #0
   a68b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a68b8 <__aeabi_fcmpeq>:
   a68b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a68bc:	f7ff fff4 	bl	a68a8 <__aeabi_cfcmpeq>
   a68c0:	bf0c      	ite	eq
   a68c2:	2001      	moveq	r0, #1
   a68c4:	2000      	movne	r0, #0
   a68c6:	f85d fb08 	ldr.w	pc, [sp], #8
   a68ca:	bf00      	nop

000a68cc <__aeabi_fcmplt>:
   a68cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a68d0:	f7ff ffea 	bl	a68a8 <__aeabi_cfcmpeq>
   a68d4:	bf34      	ite	cc
   a68d6:	2001      	movcc	r0, #1
   a68d8:	2000      	movcs	r0, #0
   a68da:	f85d fb08 	ldr.w	pc, [sp], #8
   a68de:	bf00      	nop

000a68e0 <__aeabi_fcmple>:
   a68e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a68e4:	f7ff ffe0 	bl	a68a8 <__aeabi_cfcmpeq>
   a68e8:	bf94      	ite	ls
   a68ea:	2001      	movls	r0, #1
   a68ec:	2000      	movhi	r0, #0
   a68ee:	f85d fb08 	ldr.w	pc, [sp], #8
   a68f2:	bf00      	nop

000a68f4 <__aeabi_fcmpge>:
   a68f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a68f8:	f7ff ffd2 	bl	a68a0 <__aeabi_cfrcmple>
   a68fc:	bf94      	ite	ls
   a68fe:	2001      	movls	r0, #1
   a6900:	2000      	movhi	r0, #0
   a6902:	f85d fb08 	ldr.w	pc, [sp], #8
   a6906:	bf00      	nop

000a6908 <__aeabi_fcmpgt>:
   a6908:	f84d ed08 	str.w	lr, [sp, #-8]!
   a690c:	f7ff ffc8 	bl	a68a0 <__aeabi_cfrcmple>
   a6910:	bf34      	ite	cc
   a6912:	2001      	movcc	r0, #1
   a6914:	2000      	movcs	r0, #0
   a6916:	f85d fb08 	ldr.w	pc, [sp], #8
   a691a:	bf00      	nop

000a691c <__aeabi_f2iz>:
   a691c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a6920:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a6924:	d30f      	bcc.n	a6946 <__aeabi_f2iz+0x2a>
   a6926:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a692a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a692e:	d90d      	bls.n	a694c <__aeabi_f2iz+0x30>
   a6930:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a6934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a6938:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a693c:	fa23 f002 	lsr.w	r0, r3, r2
   a6940:	bf18      	it	ne
   a6942:	4240      	negne	r0, r0
   a6944:	4770      	bx	lr
   a6946:	f04f 0000 	mov.w	r0, #0
   a694a:	4770      	bx	lr
   a694c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a6950:	d101      	bne.n	a6956 <__aeabi_f2iz+0x3a>
   a6952:	0242      	lsls	r2, r0, #9
   a6954:	d105      	bne.n	a6962 <__aeabi_f2iz+0x46>
   a6956:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a695a:	bf08      	it	eq
   a695c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a6960:	4770      	bx	lr
   a6962:	f04f 0000 	mov.w	r0, #0
   a6966:	4770      	bx	lr

000a6968 <__aeabi_f2uiz>:
   a6968:	0042      	lsls	r2, r0, #1
   a696a:	d20e      	bcs.n	a698a <__aeabi_f2uiz+0x22>
   a696c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a6970:	d30b      	bcc.n	a698a <__aeabi_f2uiz+0x22>
   a6972:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a6976:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a697a:	d409      	bmi.n	a6990 <__aeabi_f2uiz+0x28>
   a697c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a6980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a6984:	fa23 f002 	lsr.w	r0, r3, r2
   a6988:	4770      	bx	lr
   a698a:	f04f 0000 	mov.w	r0, #0
   a698e:	4770      	bx	lr
   a6990:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a6994:	d101      	bne.n	a699a <__aeabi_f2uiz+0x32>
   a6996:	0242      	lsls	r2, r0, #9
   a6998:	d102      	bne.n	a69a0 <__aeabi_f2uiz+0x38>
   a699a:	f04f 30ff 	mov.w	r0, #4294967295
   a699e:	4770      	bx	lr
   a69a0:	f04f 0000 	mov.w	r0, #0
   a69a4:	4770      	bx	lr
   a69a6:	bf00      	nop

000a69a8 <__libc_init_array>:
   a69a8:	b570      	push	{r4, r5, r6, lr}
   a69aa:	4e0f      	ldr	r6, [pc, #60]	; (a69e8 <__libc_init_array+0x40>)
   a69ac:	4d0f      	ldr	r5, [pc, #60]	; (a69ec <__libc_init_array+0x44>)
   a69ae:	1b76      	subs	r6, r6, r5
   a69b0:	10b6      	asrs	r6, r6, #2
   a69b2:	bf18      	it	ne
   a69b4:	2400      	movne	r4, #0
   a69b6:	d005      	beq.n	a69c4 <__libc_init_array+0x1c>
   a69b8:	3401      	adds	r4, #1
   a69ba:	f855 3b04 	ldr.w	r3, [r5], #4
   a69be:	4798      	blx	r3
   a69c0:	42a6      	cmp	r6, r4
   a69c2:	d1f9      	bne.n	a69b8 <__libc_init_array+0x10>
   a69c4:	4e0a      	ldr	r6, [pc, #40]	; (a69f0 <__libc_init_array+0x48>)
   a69c6:	4d0b      	ldr	r5, [pc, #44]	; (a69f4 <__libc_init_array+0x4c>)
   a69c8:	f002 f86e 	bl	a8aa8 <_init>
   a69cc:	1b76      	subs	r6, r6, r5
   a69ce:	10b6      	asrs	r6, r6, #2
   a69d0:	bf18      	it	ne
   a69d2:	2400      	movne	r4, #0
   a69d4:	d006      	beq.n	a69e4 <__libc_init_array+0x3c>
   a69d6:	3401      	adds	r4, #1
   a69d8:	f855 3b04 	ldr.w	r3, [r5], #4
   a69dc:	4798      	blx	r3
   a69de:	42a6      	cmp	r6, r4
   a69e0:	d1f9      	bne.n	a69d6 <__libc_init_array+0x2e>
   a69e2:	bd70      	pop	{r4, r5, r6, pc}
   a69e4:	bd70      	pop	{r4, r5, r6, pc}
   a69e6:	bf00      	nop
   a69e8:	000a8ab4 	.word	0x000a8ab4
   a69ec:	000a8ab4 	.word	0x000a8ab4
   a69f0:	000a8abc 	.word	0x000a8abc
   a69f4:	000a8ab4 	.word	0x000a8ab4

000a69f8 <memcpy>:
   a69f8:	4684      	mov	ip, r0
   a69fa:	ea41 0300 	orr.w	r3, r1, r0
   a69fe:	f013 0303 	ands.w	r3, r3, #3
   a6a02:	d149      	bne.n	a6a98 <memcpy+0xa0>
   a6a04:	3a40      	subs	r2, #64	; 0x40
   a6a06:	d323      	bcc.n	a6a50 <memcpy+0x58>
   a6a08:	680b      	ldr	r3, [r1, #0]
   a6a0a:	6003      	str	r3, [r0, #0]
   a6a0c:	684b      	ldr	r3, [r1, #4]
   a6a0e:	6043      	str	r3, [r0, #4]
   a6a10:	688b      	ldr	r3, [r1, #8]
   a6a12:	6083      	str	r3, [r0, #8]
   a6a14:	68cb      	ldr	r3, [r1, #12]
   a6a16:	60c3      	str	r3, [r0, #12]
   a6a18:	690b      	ldr	r3, [r1, #16]
   a6a1a:	6103      	str	r3, [r0, #16]
   a6a1c:	694b      	ldr	r3, [r1, #20]
   a6a1e:	6143      	str	r3, [r0, #20]
   a6a20:	698b      	ldr	r3, [r1, #24]
   a6a22:	6183      	str	r3, [r0, #24]
   a6a24:	69cb      	ldr	r3, [r1, #28]
   a6a26:	61c3      	str	r3, [r0, #28]
   a6a28:	6a0b      	ldr	r3, [r1, #32]
   a6a2a:	6203      	str	r3, [r0, #32]
   a6a2c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a6a2e:	6243      	str	r3, [r0, #36]	; 0x24
   a6a30:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a6a32:	6283      	str	r3, [r0, #40]	; 0x28
   a6a34:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a6a36:	62c3      	str	r3, [r0, #44]	; 0x2c
   a6a38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a6a3a:	6303      	str	r3, [r0, #48]	; 0x30
   a6a3c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a6a3e:	6343      	str	r3, [r0, #52]	; 0x34
   a6a40:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a6a42:	6383      	str	r3, [r0, #56]	; 0x38
   a6a44:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a6a46:	63c3      	str	r3, [r0, #60]	; 0x3c
   a6a48:	3040      	adds	r0, #64	; 0x40
   a6a4a:	3140      	adds	r1, #64	; 0x40
   a6a4c:	3a40      	subs	r2, #64	; 0x40
   a6a4e:	d2db      	bcs.n	a6a08 <memcpy+0x10>
   a6a50:	3230      	adds	r2, #48	; 0x30
   a6a52:	d30b      	bcc.n	a6a6c <memcpy+0x74>
   a6a54:	680b      	ldr	r3, [r1, #0]
   a6a56:	6003      	str	r3, [r0, #0]
   a6a58:	684b      	ldr	r3, [r1, #4]
   a6a5a:	6043      	str	r3, [r0, #4]
   a6a5c:	688b      	ldr	r3, [r1, #8]
   a6a5e:	6083      	str	r3, [r0, #8]
   a6a60:	68cb      	ldr	r3, [r1, #12]
   a6a62:	60c3      	str	r3, [r0, #12]
   a6a64:	3010      	adds	r0, #16
   a6a66:	3110      	adds	r1, #16
   a6a68:	3a10      	subs	r2, #16
   a6a6a:	d2f3      	bcs.n	a6a54 <memcpy+0x5c>
   a6a6c:	320c      	adds	r2, #12
   a6a6e:	d305      	bcc.n	a6a7c <memcpy+0x84>
   a6a70:	f851 3b04 	ldr.w	r3, [r1], #4
   a6a74:	f840 3b04 	str.w	r3, [r0], #4
   a6a78:	3a04      	subs	r2, #4
   a6a7a:	d2f9      	bcs.n	a6a70 <memcpy+0x78>
   a6a7c:	3204      	adds	r2, #4
   a6a7e:	d008      	beq.n	a6a92 <memcpy+0x9a>
   a6a80:	07d2      	lsls	r2, r2, #31
   a6a82:	bf1c      	itt	ne
   a6a84:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a6a88:	f800 3b01 	strbne.w	r3, [r0], #1
   a6a8c:	d301      	bcc.n	a6a92 <memcpy+0x9a>
   a6a8e:	880b      	ldrh	r3, [r1, #0]
   a6a90:	8003      	strh	r3, [r0, #0]
   a6a92:	4660      	mov	r0, ip
   a6a94:	4770      	bx	lr
   a6a96:	bf00      	nop
   a6a98:	2a08      	cmp	r2, #8
   a6a9a:	d313      	bcc.n	a6ac4 <memcpy+0xcc>
   a6a9c:	078b      	lsls	r3, r1, #30
   a6a9e:	d0b1      	beq.n	a6a04 <memcpy+0xc>
   a6aa0:	f010 0303 	ands.w	r3, r0, #3
   a6aa4:	d0ae      	beq.n	a6a04 <memcpy+0xc>
   a6aa6:	f1c3 0304 	rsb	r3, r3, #4
   a6aaa:	1ad2      	subs	r2, r2, r3
   a6aac:	07db      	lsls	r3, r3, #31
   a6aae:	bf1c      	itt	ne
   a6ab0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a6ab4:	f800 3b01 	strbne.w	r3, [r0], #1
   a6ab8:	d3a4      	bcc.n	a6a04 <memcpy+0xc>
   a6aba:	f831 3b02 	ldrh.w	r3, [r1], #2
   a6abe:	f820 3b02 	strh.w	r3, [r0], #2
   a6ac2:	e79f      	b.n	a6a04 <memcpy+0xc>
   a6ac4:	3a04      	subs	r2, #4
   a6ac6:	d3d9      	bcc.n	a6a7c <memcpy+0x84>
   a6ac8:	3a01      	subs	r2, #1
   a6aca:	f811 3b01 	ldrb.w	r3, [r1], #1
   a6ace:	f800 3b01 	strb.w	r3, [r0], #1
   a6ad2:	d2f9      	bcs.n	a6ac8 <memcpy+0xd0>
   a6ad4:	780b      	ldrb	r3, [r1, #0]
   a6ad6:	7003      	strb	r3, [r0, #0]
   a6ad8:	784b      	ldrb	r3, [r1, #1]
   a6ada:	7043      	strb	r3, [r0, #1]
   a6adc:	788b      	ldrb	r3, [r1, #2]
   a6ade:	7083      	strb	r3, [r0, #2]
   a6ae0:	4660      	mov	r0, ip
   a6ae2:	4770      	bx	lr

000a6ae4 <memset>:
   a6ae4:	b470      	push	{r4, r5, r6}
   a6ae6:	0784      	lsls	r4, r0, #30
   a6ae8:	d046      	beq.n	a6b78 <memset+0x94>
   a6aea:	1e54      	subs	r4, r2, #1
   a6aec:	2a00      	cmp	r2, #0
   a6aee:	d041      	beq.n	a6b74 <memset+0x90>
   a6af0:	b2cd      	uxtb	r5, r1
   a6af2:	4603      	mov	r3, r0
   a6af4:	e002      	b.n	a6afc <memset+0x18>
   a6af6:	1e62      	subs	r2, r4, #1
   a6af8:	b3e4      	cbz	r4, a6b74 <memset+0x90>
   a6afa:	4614      	mov	r4, r2
   a6afc:	f803 5b01 	strb.w	r5, [r3], #1
   a6b00:	079a      	lsls	r2, r3, #30
   a6b02:	d1f8      	bne.n	a6af6 <memset+0x12>
   a6b04:	2c03      	cmp	r4, #3
   a6b06:	d92e      	bls.n	a6b66 <memset+0x82>
   a6b08:	b2cd      	uxtb	r5, r1
   a6b0a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a6b0e:	2c0f      	cmp	r4, #15
   a6b10:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a6b14:	d919      	bls.n	a6b4a <memset+0x66>
   a6b16:	4626      	mov	r6, r4
   a6b18:	f103 0210 	add.w	r2, r3, #16
   a6b1c:	3e10      	subs	r6, #16
   a6b1e:	2e0f      	cmp	r6, #15
   a6b20:	f842 5c10 	str.w	r5, [r2, #-16]
   a6b24:	f842 5c0c 	str.w	r5, [r2, #-12]
   a6b28:	f842 5c08 	str.w	r5, [r2, #-8]
   a6b2c:	f842 5c04 	str.w	r5, [r2, #-4]
   a6b30:	f102 0210 	add.w	r2, r2, #16
   a6b34:	d8f2      	bhi.n	a6b1c <memset+0x38>
   a6b36:	f1a4 0210 	sub.w	r2, r4, #16
   a6b3a:	f022 020f 	bic.w	r2, r2, #15
   a6b3e:	f004 040f 	and.w	r4, r4, #15
   a6b42:	3210      	adds	r2, #16
   a6b44:	2c03      	cmp	r4, #3
   a6b46:	4413      	add	r3, r2
   a6b48:	d90d      	bls.n	a6b66 <memset+0x82>
   a6b4a:	461e      	mov	r6, r3
   a6b4c:	4622      	mov	r2, r4
   a6b4e:	3a04      	subs	r2, #4
   a6b50:	2a03      	cmp	r2, #3
   a6b52:	f846 5b04 	str.w	r5, [r6], #4
   a6b56:	d8fa      	bhi.n	a6b4e <memset+0x6a>
   a6b58:	1f22      	subs	r2, r4, #4
   a6b5a:	f022 0203 	bic.w	r2, r2, #3
   a6b5e:	3204      	adds	r2, #4
   a6b60:	4413      	add	r3, r2
   a6b62:	f004 0403 	and.w	r4, r4, #3
   a6b66:	b12c      	cbz	r4, a6b74 <memset+0x90>
   a6b68:	b2c9      	uxtb	r1, r1
   a6b6a:	441c      	add	r4, r3
   a6b6c:	f803 1b01 	strb.w	r1, [r3], #1
   a6b70:	42a3      	cmp	r3, r4
   a6b72:	d1fb      	bne.n	a6b6c <memset+0x88>
   a6b74:	bc70      	pop	{r4, r5, r6}
   a6b76:	4770      	bx	lr
   a6b78:	4614      	mov	r4, r2
   a6b7a:	4603      	mov	r3, r0
   a6b7c:	e7c2      	b.n	a6b04 <memset+0x20>
   a6b7e:	bf00      	nop

000a6b80 <_puts_r>:
   a6b80:	b5f0      	push	{r4, r5, r6, r7, lr}
   a6b82:	4605      	mov	r5, r0
   a6b84:	b089      	sub	sp, #36	; 0x24
   a6b86:	4608      	mov	r0, r1
   a6b88:	460c      	mov	r4, r1
   a6b8a:	f000 f8e5 	bl	a6d58 <strlen>
   a6b8e:	1c43      	adds	r3, r0, #1
   a6b90:	4f14      	ldr	r7, [pc, #80]	; (a6be4 <_puts_r+0x64>)
   a6b92:	9303      	str	r3, [sp, #12]
   a6b94:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a6b96:	2601      	movs	r6, #1
   a6b98:	a904      	add	r1, sp, #16
   a6b9a:	2202      	movs	r2, #2
   a6b9c:	9404      	str	r4, [sp, #16]
   a6b9e:	9005      	str	r0, [sp, #20]
   a6ba0:	68ac      	ldr	r4, [r5, #8]
   a6ba2:	9706      	str	r7, [sp, #24]
   a6ba4:	9607      	str	r6, [sp, #28]
   a6ba6:	9101      	str	r1, [sp, #4]
   a6ba8:	9202      	str	r2, [sp, #8]
   a6baa:	b1b3      	cbz	r3, a6bda <_puts_r+0x5a>
   a6bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a6bb0:	049a      	lsls	r2, r3, #18
   a6bb2:	d406      	bmi.n	a6bc2 <_puts_r+0x42>
   a6bb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   a6bb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a6bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   a6bbe:	81a3      	strh	r3, [r4, #12]
   a6bc0:	6662      	str	r2, [r4, #100]	; 0x64
   a6bc2:	4621      	mov	r1, r4
   a6bc4:	4628      	mov	r0, r5
   a6bc6:	aa01      	add	r2, sp, #4
   a6bc8:	f000 fbf4 	bl	a73b4 <__sfvwrite_r>
   a6bcc:	2800      	cmp	r0, #0
   a6bce:	bf14      	ite	ne
   a6bd0:	f04f 30ff 	movne.w	r0, #4294967295
   a6bd4:	200a      	moveq	r0, #10
   a6bd6:	b009      	add	sp, #36	; 0x24
   a6bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a6bda:	4628      	mov	r0, r5
   a6bdc:	f000 fa96 	bl	a710c <__sinit>
   a6be0:	e7e4      	b.n	a6bac <_puts_r+0x2c>
   a6be2:	bf00      	nop
   a6be4:	000a8aa4 	.word	0x000a8aa4

000a6be8 <puts>:
   a6be8:	4b02      	ldr	r3, [pc, #8]	; (a6bf4 <puts+0xc>)
   a6bea:	4601      	mov	r1, r0
   a6bec:	6818      	ldr	r0, [r3, #0]
   a6bee:	f7ff bfc7 	b.w	a6b80 <_puts_r>
   a6bf2:	bf00      	nop
   a6bf4:	200711e0 	.word	0x200711e0

000a6bf8 <setbuf>:
   a6bf8:	2900      	cmp	r1, #0
   a6bfa:	bf0c      	ite	eq
   a6bfc:	2202      	moveq	r2, #2
   a6bfe:	2200      	movne	r2, #0
   a6c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a6c04:	f000 b800 	b.w	a6c08 <setvbuf>

000a6c08 <setvbuf>:
   a6c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   a6c0c:	4d51      	ldr	r5, [pc, #324]	; (a6d54 <setvbuf+0x14c>)
   a6c0e:	b083      	sub	sp, #12
   a6c10:	682d      	ldr	r5, [r5, #0]
   a6c12:	4604      	mov	r4, r0
   a6c14:	460f      	mov	r7, r1
   a6c16:	4690      	mov	r8, r2
   a6c18:	461e      	mov	r6, r3
   a6c1a:	b115      	cbz	r5, a6c22 <setvbuf+0x1a>
   a6c1c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a6c1e:	2b00      	cmp	r3, #0
   a6c20:	d079      	beq.n	a6d16 <setvbuf+0x10e>
   a6c22:	f1b8 0f02 	cmp.w	r8, #2
   a6c26:	d004      	beq.n	a6c32 <setvbuf+0x2a>
   a6c28:	f1b8 0f01 	cmp.w	r8, #1
   a6c2c:	d87f      	bhi.n	a6d2e <setvbuf+0x126>
   a6c2e:	2e00      	cmp	r6, #0
   a6c30:	db7d      	blt.n	a6d2e <setvbuf+0x126>
   a6c32:	4621      	mov	r1, r4
   a6c34:	4628      	mov	r0, r5
   a6c36:	f000 f9d5 	bl	a6fe4 <_fflush_r>
   a6c3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a6c3c:	b141      	cbz	r1, a6c50 <setvbuf+0x48>
   a6c3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a6c42:	4299      	cmp	r1, r3
   a6c44:	d002      	beq.n	a6c4c <setvbuf+0x44>
   a6c46:	4628      	mov	r0, r5
   a6c48:	f000 facc 	bl	a71e4 <_free_r>
   a6c4c:	2300      	movs	r3, #0
   a6c4e:	6323      	str	r3, [r4, #48]	; 0x30
   a6c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a6c54:	2200      	movs	r2, #0
   a6c56:	61a2      	str	r2, [r4, #24]
   a6c58:	6062      	str	r2, [r4, #4]
   a6c5a:	061a      	lsls	r2, r3, #24
   a6c5c:	d454      	bmi.n	a6d08 <setvbuf+0x100>
   a6c5e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   a6c62:	f023 0303 	bic.w	r3, r3, #3
   a6c66:	f1b8 0f02 	cmp.w	r8, #2
   a6c6a:	81a3      	strh	r3, [r4, #12]
   a6c6c:	d039      	beq.n	a6ce2 <setvbuf+0xda>
   a6c6e:	ab01      	add	r3, sp, #4
   a6c70:	466a      	mov	r2, sp
   a6c72:	4621      	mov	r1, r4
   a6c74:	4628      	mov	r0, r5
   a6c76:	f000 fd49 	bl	a770c <__swhatbuf_r>
   a6c7a:	89a3      	ldrh	r3, [r4, #12]
   a6c7c:	4318      	orrs	r0, r3
   a6c7e:	81a0      	strh	r0, [r4, #12]
   a6c80:	b326      	cbz	r6, a6ccc <setvbuf+0xc4>
   a6c82:	b327      	cbz	r7, a6cce <setvbuf+0xc6>
   a6c84:	6bab      	ldr	r3, [r5, #56]	; 0x38
   a6c86:	2b00      	cmp	r3, #0
   a6c88:	d04d      	beq.n	a6d26 <setvbuf+0x11e>
   a6c8a:	9b00      	ldr	r3, [sp, #0]
   a6c8c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   a6c90:	429e      	cmp	r6, r3
   a6c92:	bf1c      	itt	ne
   a6c94:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   a6c98:	81a0      	strhne	r0, [r4, #12]
   a6c9a:	f1b8 0f01 	cmp.w	r8, #1
   a6c9e:	bf08      	it	eq
   a6ca0:	f040 0001 	orreq.w	r0, r0, #1
   a6ca4:	b283      	uxth	r3, r0
   a6ca6:	bf08      	it	eq
   a6ca8:	81a0      	strheq	r0, [r4, #12]
   a6caa:	f003 0008 	and.w	r0, r3, #8
   a6cae:	b280      	uxth	r0, r0
   a6cb0:	6027      	str	r7, [r4, #0]
   a6cb2:	6127      	str	r7, [r4, #16]
   a6cb4:	6166      	str	r6, [r4, #20]
   a6cb6:	b318      	cbz	r0, a6d00 <setvbuf+0xf8>
   a6cb8:	f013 0001 	ands.w	r0, r3, #1
   a6cbc:	d02f      	beq.n	a6d1e <setvbuf+0x116>
   a6cbe:	2000      	movs	r0, #0
   a6cc0:	4276      	negs	r6, r6
   a6cc2:	61a6      	str	r6, [r4, #24]
   a6cc4:	60a0      	str	r0, [r4, #8]
   a6cc6:	b003      	add	sp, #12
   a6cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a6ccc:	9e00      	ldr	r6, [sp, #0]
   a6cce:	4630      	mov	r0, r6
   a6cd0:	f000 fd90 	bl	a77f4 <malloc>
   a6cd4:	4607      	mov	r7, r0
   a6cd6:	b368      	cbz	r0, a6d34 <setvbuf+0x12c>
   a6cd8:	89a3      	ldrh	r3, [r4, #12]
   a6cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a6cde:	81a3      	strh	r3, [r4, #12]
   a6ce0:	e7d0      	b.n	a6c84 <setvbuf+0x7c>
   a6ce2:	2000      	movs	r0, #0
   a6ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a6ce8:	f043 0302 	orr.w	r3, r3, #2
   a6cec:	2500      	movs	r5, #0
   a6cee:	2101      	movs	r1, #1
   a6cf0:	81a3      	strh	r3, [r4, #12]
   a6cf2:	60a5      	str	r5, [r4, #8]
   a6cf4:	6022      	str	r2, [r4, #0]
   a6cf6:	6122      	str	r2, [r4, #16]
   a6cf8:	6161      	str	r1, [r4, #20]
   a6cfa:	b003      	add	sp, #12
   a6cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a6d00:	60a0      	str	r0, [r4, #8]
   a6d02:	b003      	add	sp, #12
   a6d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a6d08:	6921      	ldr	r1, [r4, #16]
   a6d0a:	4628      	mov	r0, r5
   a6d0c:	f000 fa6a 	bl	a71e4 <_free_r>
   a6d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a6d14:	e7a3      	b.n	a6c5e <setvbuf+0x56>
   a6d16:	4628      	mov	r0, r5
   a6d18:	f000 f9f8 	bl	a710c <__sinit>
   a6d1c:	e781      	b.n	a6c22 <setvbuf+0x1a>
   a6d1e:	60a6      	str	r6, [r4, #8]
   a6d20:	b003      	add	sp, #12
   a6d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   a6d26:	4628      	mov	r0, r5
   a6d28:	f000 f9f0 	bl	a710c <__sinit>
   a6d2c:	e7ad      	b.n	a6c8a <setvbuf+0x82>
   a6d2e:	f04f 30ff 	mov.w	r0, #4294967295
   a6d32:	e7e2      	b.n	a6cfa <setvbuf+0xf2>
   a6d34:	f8dd 9000 	ldr.w	r9, [sp]
   a6d38:	45b1      	cmp	r9, r6
   a6d3a:	d006      	beq.n	a6d4a <setvbuf+0x142>
   a6d3c:	4648      	mov	r0, r9
   a6d3e:	f000 fd59 	bl	a77f4 <malloc>
   a6d42:	4607      	mov	r7, r0
   a6d44:	b108      	cbz	r0, a6d4a <setvbuf+0x142>
   a6d46:	464e      	mov	r6, r9
   a6d48:	e7c6      	b.n	a6cd8 <setvbuf+0xd0>
   a6d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a6d4e:	f04f 30ff 	mov.w	r0, #4294967295
   a6d52:	e7c7      	b.n	a6ce4 <setvbuf+0xdc>
   a6d54:	200711e0 	.word	0x200711e0

000a6d58 <strlen>:
   a6d58:	f020 0103 	bic.w	r1, r0, #3
   a6d5c:	f010 0003 	ands.w	r0, r0, #3
   a6d60:	f1c0 0000 	rsb	r0, r0, #0
   a6d64:	f851 3b04 	ldr.w	r3, [r1], #4
   a6d68:	f100 0c04 	add.w	ip, r0, #4
   a6d6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a6d70:	f06f 0200 	mvn.w	r2, #0
   a6d74:	bf1c      	itt	ne
   a6d76:	fa22 f20c 	lsrne.w	r2, r2, ip
   a6d7a:	4313      	orrne	r3, r2
   a6d7c:	f04f 0c01 	mov.w	ip, #1
   a6d80:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a6d84:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a6d88:	eba3 020c 	sub.w	r2, r3, ip
   a6d8c:	ea22 0203 	bic.w	r2, r2, r3
   a6d90:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a6d94:	bf04      	itt	eq
   a6d96:	f851 3b04 	ldreq.w	r3, [r1], #4
   a6d9a:	3004      	addeq	r0, #4
   a6d9c:	d0f4      	beq.n	a6d88 <strlen+0x30>
   a6d9e:	f1c2 0100 	rsb	r1, r2, #0
   a6da2:	ea02 0201 	and.w	r2, r2, r1
   a6da6:	fab2 f282 	clz	r2, r2
   a6daa:	f1c2 021f 	rsb	r2, r2, #31
   a6dae:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a6db2:	4770      	bx	lr

000a6db4 <__swsetup_r>:
   a6db4:	b538      	push	{r3, r4, r5, lr}
   a6db6:	4b30      	ldr	r3, [pc, #192]	; (a6e78 <__swsetup_r+0xc4>)
   a6db8:	4605      	mov	r5, r0
   a6dba:	6818      	ldr	r0, [r3, #0]
   a6dbc:	460c      	mov	r4, r1
   a6dbe:	b110      	cbz	r0, a6dc6 <__swsetup_r+0x12>
   a6dc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a6dc2:	2b00      	cmp	r3, #0
   a6dc4:	d038      	beq.n	a6e38 <__swsetup_r+0x84>
   a6dc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a6dca:	b293      	uxth	r3, r2
   a6dcc:	0718      	lsls	r0, r3, #28
   a6dce:	d50c      	bpl.n	a6dea <__swsetup_r+0x36>
   a6dd0:	6920      	ldr	r0, [r4, #16]
   a6dd2:	b1a8      	cbz	r0, a6e00 <__swsetup_r+0x4c>
   a6dd4:	f013 0201 	ands.w	r2, r3, #1
   a6dd8:	d01e      	beq.n	a6e18 <__swsetup_r+0x64>
   a6dda:	6963      	ldr	r3, [r4, #20]
   a6ddc:	2200      	movs	r2, #0
   a6dde:	425b      	negs	r3, r3
   a6de0:	61a3      	str	r3, [r4, #24]
   a6de2:	60a2      	str	r2, [r4, #8]
   a6de4:	b1f0      	cbz	r0, a6e24 <__swsetup_r+0x70>
   a6de6:	2000      	movs	r0, #0
   a6de8:	bd38      	pop	{r3, r4, r5, pc}
   a6dea:	06d9      	lsls	r1, r3, #27
   a6dec:	d53b      	bpl.n	a6e66 <__swsetup_r+0xb2>
   a6dee:	0758      	lsls	r0, r3, #29
   a6df0:	d425      	bmi.n	a6e3e <__swsetup_r+0x8a>
   a6df2:	6920      	ldr	r0, [r4, #16]
   a6df4:	f042 0308 	orr.w	r3, r2, #8
   a6df8:	81a3      	strh	r3, [r4, #12]
   a6dfa:	b29b      	uxth	r3, r3
   a6dfc:	2800      	cmp	r0, #0
   a6dfe:	d1e9      	bne.n	a6dd4 <__swsetup_r+0x20>
   a6e00:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a6e04:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a6e08:	d0e4      	beq.n	a6dd4 <__swsetup_r+0x20>
   a6e0a:	4628      	mov	r0, r5
   a6e0c:	4621      	mov	r1, r4
   a6e0e:	f000 fcad 	bl	a776c <__smakebuf_r>
   a6e12:	89a3      	ldrh	r3, [r4, #12]
   a6e14:	6920      	ldr	r0, [r4, #16]
   a6e16:	e7dd      	b.n	a6dd4 <__swsetup_r+0x20>
   a6e18:	0799      	lsls	r1, r3, #30
   a6e1a:	bf58      	it	pl
   a6e1c:	6962      	ldrpl	r2, [r4, #20]
   a6e1e:	60a2      	str	r2, [r4, #8]
   a6e20:	2800      	cmp	r0, #0
   a6e22:	d1e0      	bne.n	a6de6 <__swsetup_r+0x32>
   a6e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a6e28:	061a      	lsls	r2, r3, #24
   a6e2a:	d5dd      	bpl.n	a6de8 <__swsetup_r+0x34>
   a6e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a6e30:	81a3      	strh	r3, [r4, #12]
   a6e32:	f04f 30ff 	mov.w	r0, #4294967295
   a6e36:	bd38      	pop	{r3, r4, r5, pc}
   a6e38:	f000 f968 	bl	a710c <__sinit>
   a6e3c:	e7c3      	b.n	a6dc6 <__swsetup_r+0x12>
   a6e3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a6e40:	b151      	cbz	r1, a6e58 <__swsetup_r+0xa4>
   a6e42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a6e46:	4299      	cmp	r1, r3
   a6e48:	d004      	beq.n	a6e54 <__swsetup_r+0xa0>
   a6e4a:	4628      	mov	r0, r5
   a6e4c:	f000 f9ca 	bl	a71e4 <_free_r>
   a6e50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   a6e54:	2300      	movs	r3, #0
   a6e56:	6323      	str	r3, [r4, #48]	; 0x30
   a6e58:	6920      	ldr	r0, [r4, #16]
   a6e5a:	2300      	movs	r3, #0
   a6e5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a6e60:	e884 0009 	stmia.w	r4, {r0, r3}
   a6e64:	e7c6      	b.n	a6df4 <__swsetup_r+0x40>
   a6e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a6e6a:	2309      	movs	r3, #9
   a6e6c:	602b      	str	r3, [r5, #0]
   a6e6e:	f04f 30ff 	mov.w	r0, #4294967295
   a6e72:	81a2      	strh	r2, [r4, #12]
   a6e74:	bd38      	pop	{r3, r4, r5, pc}
   a6e76:	bf00      	nop
   a6e78:	200711e0 	.word	0x200711e0

000a6e7c <register_fini>:
   a6e7c:	4b02      	ldr	r3, [pc, #8]	; (a6e88 <register_fini+0xc>)
   a6e7e:	b113      	cbz	r3, a6e86 <register_fini+0xa>
   a6e80:	4802      	ldr	r0, [pc, #8]	; (a6e8c <register_fini+0x10>)
   a6e82:	f000 b805 	b.w	a6e90 <atexit>
   a6e86:	4770      	bx	lr
   a6e88:	00000000 	.word	0x00000000
   a6e8c:	000a7121 	.word	0x000a7121

000a6e90 <atexit>:
   a6e90:	2300      	movs	r3, #0
   a6e92:	4601      	mov	r1, r0
   a6e94:	461a      	mov	r2, r3
   a6e96:	4618      	mov	r0, r3
   a6e98:	f001 ba64 	b.w	a8364 <__register_exitproc>

000a6e9c <__sflush_r>:
   a6e9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   a6ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a6ea4:	b29a      	uxth	r2, r3
   a6ea6:	460d      	mov	r5, r1
   a6ea8:	0711      	lsls	r1, r2, #28
   a6eaa:	4680      	mov	r8, r0
   a6eac:	d43c      	bmi.n	a6f28 <__sflush_r+0x8c>
   a6eae:	686a      	ldr	r2, [r5, #4]
   a6eb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a6eb4:	2a00      	cmp	r2, #0
   a6eb6:	81ab      	strh	r3, [r5, #12]
   a6eb8:	dd73      	ble.n	a6fa2 <__sflush_r+0x106>
   a6eba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a6ebc:	2c00      	cmp	r4, #0
   a6ebe:	d04b      	beq.n	a6f58 <__sflush_r+0xbc>
   a6ec0:	b29b      	uxth	r3, r3
   a6ec2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a6ec6:	2100      	movs	r1, #0
   a6ec8:	b292      	uxth	r2, r2
   a6eca:	f8d8 6000 	ldr.w	r6, [r8]
   a6ece:	f8c8 1000 	str.w	r1, [r8]
   a6ed2:	2a00      	cmp	r2, #0
   a6ed4:	d069      	beq.n	a6faa <__sflush_r+0x10e>
   a6ed6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a6ed8:	075f      	lsls	r7, r3, #29
   a6eda:	d505      	bpl.n	a6ee8 <__sflush_r+0x4c>
   a6edc:	6869      	ldr	r1, [r5, #4]
   a6ede:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a6ee0:	1a52      	subs	r2, r2, r1
   a6ee2:	b10b      	cbz	r3, a6ee8 <__sflush_r+0x4c>
   a6ee4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a6ee6:	1ad2      	subs	r2, r2, r3
   a6ee8:	2300      	movs	r3, #0
   a6eea:	69e9      	ldr	r1, [r5, #28]
   a6eec:	4640      	mov	r0, r8
   a6eee:	47a0      	blx	r4
   a6ef0:	1c44      	adds	r4, r0, #1
   a6ef2:	d03c      	beq.n	a6f6e <__sflush_r+0xd2>
   a6ef4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a6ef8:	6929      	ldr	r1, [r5, #16]
   a6efa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a6efe:	2200      	movs	r2, #0
   a6f00:	81ab      	strh	r3, [r5, #12]
   a6f02:	04db      	lsls	r3, r3, #19
   a6f04:	e885 0006 	stmia.w	r5, {r1, r2}
   a6f08:	d449      	bmi.n	a6f9e <__sflush_r+0x102>
   a6f0a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a6f0c:	f8c8 6000 	str.w	r6, [r8]
   a6f10:	b311      	cbz	r1, a6f58 <__sflush_r+0xbc>
   a6f12:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a6f16:	4299      	cmp	r1, r3
   a6f18:	d002      	beq.n	a6f20 <__sflush_r+0x84>
   a6f1a:	4640      	mov	r0, r8
   a6f1c:	f000 f962 	bl	a71e4 <_free_r>
   a6f20:	2000      	movs	r0, #0
   a6f22:	6328      	str	r0, [r5, #48]	; 0x30
   a6f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a6f28:	692e      	ldr	r6, [r5, #16]
   a6f2a:	b1ae      	cbz	r6, a6f58 <__sflush_r+0xbc>
   a6f2c:	0790      	lsls	r0, r2, #30
   a6f2e:	682c      	ldr	r4, [r5, #0]
   a6f30:	bf0c      	ite	eq
   a6f32:	696b      	ldreq	r3, [r5, #20]
   a6f34:	2300      	movne	r3, #0
   a6f36:	602e      	str	r6, [r5, #0]
   a6f38:	1ba4      	subs	r4, r4, r6
   a6f3a:	60ab      	str	r3, [r5, #8]
   a6f3c:	e00a      	b.n	a6f54 <__sflush_r+0xb8>
   a6f3e:	4623      	mov	r3, r4
   a6f40:	4632      	mov	r2, r6
   a6f42:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a6f44:	69e9      	ldr	r1, [r5, #28]
   a6f46:	4640      	mov	r0, r8
   a6f48:	47b8      	blx	r7
   a6f4a:	2800      	cmp	r0, #0
   a6f4c:	eba4 0400 	sub.w	r4, r4, r0
   a6f50:	4406      	add	r6, r0
   a6f52:	dd04      	ble.n	a6f5e <__sflush_r+0xc2>
   a6f54:	2c00      	cmp	r4, #0
   a6f56:	dcf2      	bgt.n	a6f3e <__sflush_r+0xa2>
   a6f58:	2000      	movs	r0, #0
   a6f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a6f5e:	89ab      	ldrh	r3, [r5, #12]
   a6f60:	f04f 30ff 	mov.w	r0, #4294967295
   a6f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a6f68:	81ab      	strh	r3, [r5, #12]
   a6f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a6f6e:	f8d8 2000 	ldr.w	r2, [r8]
   a6f72:	2a1d      	cmp	r2, #29
   a6f74:	d8f3      	bhi.n	a6f5e <__sflush_r+0xc2>
   a6f76:	4b1a      	ldr	r3, [pc, #104]	; (a6fe0 <__sflush_r+0x144>)
   a6f78:	40d3      	lsrs	r3, r2
   a6f7a:	f003 0301 	and.w	r3, r3, #1
   a6f7e:	f083 0401 	eor.w	r4, r3, #1
   a6f82:	2b00      	cmp	r3, #0
   a6f84:	d0eb      	beq.n	a6f5e <__sflush_r+0xc2>
   a6f86:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   a6f8a:	6929      	ldr	r1, [r5, #16]
   a6f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a6f90:	6029      	str	r1, [r5, #0]
   a6f92:	04d9      	lsls	r1, r3, #19
   a6f94:	606c      	str	r4, [r5, #4]
   a6f96:	81ab      	strh	r3, [r5, #12]
   a6f98:	d5b7      	bpl.n	a6f0a <__sflush_r+0x6e>
   a6f9a:	2a00      	cmp	r2, #0
   a6f9c:	d1b5      	bne.n	a6f0a <__sflush_r+0x6e>
   a6f9e:	6528      	str	r0, [r5, #80]	; 0x50
   a6fa0:	e7b3      	b.n	a6f0a <__sflush_r+0x6e>
   a6fa2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a6fa4:	2a00      	cmp	r2, #0
   a6fa6:	dc88      	bgt.n	a6eba <__sflush_r+0x1e>
   a6fa8:	e7d6      	b.n	a6f58 <__sflush_r+0xbc>
   a6faa:	2301      	movs	r3, #1
   a6fac:	69e9      	ldr	r1, [r5, #28]
   a6fae:	4640      	mov	r0, r8
   a6fb0:	47a0      	blx	r4
   a6fb2:	1c43      	adds	r3, r0, #1
   a6fb4:	4602      	mov	r2, r0
   a6fb6:	d002      	beq.n	a6fbe <__sflush_r+0x122>
   a6fb8:	89ab      	ldrh	r3, [r5, #12]
   a6fba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   a6fbc:	e78c      	b.n	a6ed8 <__sflush_r+0x3c>
   a6fbe:	f8d8 3000 	ldr.w	r3, [r8]
   a6fc2:	2b00      	cmp	r3, #0
   a6fc4:	d0f8      	beq.n	a6fb8 <__sflush_r+0x11c>
   a6fc6:	2b1d      	cmp	r3, #29
   a6fc8:	d001      	beq.n	a6fce <__sflush_r+0x132>
   a6fca:	2b16      	cmp	r3, #22
   a6fcc:	d102      	bne.n	a6fd4 <__sflush_r+0x138>
   a6fce:	f8c8 6000 	str.w	r6, [r8]
   a6fd2:	e7c1      	b.n	a6f58 <__sflush_r+0xbc>
   a6fd4:	89ab      	ldrh	r3, [r5, #12]
   a6fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a6fda:	81ab      	strh	r3, [r5, #12]
   a6fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a6fe0:	20400001 	.word	0x20400001

000a6fe4 <_fflush_r>:
   a6fe4:	b510      	push	{r4, lr}
   a6fe6:	4604      	mov	r4, r0
   a6fe8:	b082      	sub	sp, #8
   a6fea:	b108      	cbz	r0, a6ff0 <_fflush_r+0xc>
   a6fec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a6fee:	b153      	cbz	r3, a7006 <_fflush_r+0x22>
   a6ff0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a6ff4:	b908      	cbnz	r0, a6ffa <_fflush_r+0x16>
   a6ff6:	b002      	add	sp, #8
   a6ff8:	bd10      	pop	{r4, pc}
   a6ffa:	4620      	mov	r0, r4
   a6ffc:	b002      	add	sp, #8
   a6ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a7002:	f7ff bf4b 	b.w	a6e9c <__sflush_r>
   a7006:	9101      	str	r1, [sp, #4]
   a7008:	f000 f880 	bl	a710c <__sinit>
   a700c:	9901      	ldr	r1, [sp, #4]
   a700e:	e7ef      	b.n	a6ff0 <_fflush_r+0xc>

000a7010 <_cleanup_r>:
   a7010:	4901      	ldr	r1, [pc, #4]	; (a7018 <_cleanup_r+0x8>)
   a7012:	f000 bb53 	b.w	a76bc <_fwalk_reent>
   a7016:	bf00      	nop
   a7018:	000a842d 	.word	0x000a842d

000a701c <__sinit.part.1>:
   a701c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7020:	4607      	mov	r7, r0
   a7022:	4835      	ldr	r0, [pc, #212]	; (a70f8 <__sinit.part.1+0xdc>)
   a7024:	687d      	ldr	r5, [r7, #4]
   a7026:	2400      	movs	r4, #0
   a7028:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a702c:	2304      	movs	r3, #4
   a702e:	2103      	movs	r1, #3
   a7030:	63f8      	str	r0, [r7, #60]	; 0x3c
   a7032:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a7036:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a703a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a703e:	b083      	sub	sp, #12
   a7040:	602c      	str	r4, [r5, #0]
   a7042:	606c      	str	r4, [r5, #4]
   a7044:	60ac      	str	r4, [r5, #8]
   a7046:	666c      	str	r4, [r5, #100]	; 0x64
   a7048:	81ec      	strh	r4, [r5, #14]
   a704a:	612c      	str	r4, [r5, #16]
   a704c:	616c      	str	r4, [r5, #20]
   a704e:	61ac      	str	r4, [r5, #24]
   a7050:	81ab      	strh	r3, [r5, #12]
   a7052:	4621      	mov	r1, r4
   a7054:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a7058:	2208      	movs	r2, #8
   a705a:	f7ff fd43 	bl	a6ae4 <memset>
   a705e:	f8df b09c 	ldr.w	fp, [pc, #156]	; a70fc <__sinit.part.1+0xe0>
   a7062:	68be      	ldr	r6, [r7, #8]
   a7064:	f8df a098 	ldr.w	sl, [pc, #152]	; a7100 <__sinit.part.1+0xe4>
   a7068:	f8df 9098 	ldr.w	r9, [pc, #152]	; a7104 <__sinit.part.1+0xe8>
   a706c:	f8df 8098 	ldr.w	r8, [pc, #152]	; a7108 <__sinit.part.1+0xec>
   a7070:	2301      	movs	r3, #1
   a7072:	2209      	movs	r2, #9
   a7074:	f8c5 b020 	str.w	fp, [r5, #32]
   a7078:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a707c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a7080:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a7084:	61ed      	str	r5, [r5, #28]
   a7086:	4621      	mov	r1, r4
   a7088:	81f3      	strh	r3, [r6, #14]
   a708a:	81b2      	strh	r2, [r6, #12]
   a708c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a7090:	6034      	str	r4, [r6, #0]
   a7092:	6074      	str	r4, [r6, #4]
   a7094:	60b4      	str	r4, [r6, #8]
   a7096:	6674      	str	r4, [r6, #100]	; 0x64
   a7098:	6134      	str	r4, [r6, #16]
   a709a:	6174      	str	r4, [r6, #20]
   a709c:	61b4      	str	r4, [r6, #24]
   a709e:	2208      	movs	r2, #8
   a70a0:	9301      	str	r3, [sp, #4]
   a70a2:	f7ff fd1f 	bl	a6ae4 <memset>
   a70a6:	68fd      	ldr	r5, [r7, #12]
   a70a8:	2012      	movs	r0, #18
   a70aa:	2202      	movs	r2, #2
   a70ac:	61f6      	str	r6, [r6, #28]
   a70ae:	f8c6 b020 	str.w	fp, [r6, #32]
   a70b2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a70b6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a70ba:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a70be:	4621      	mov	r1, r4
   a70c0:	81a8      	strh	r0, [r5, #12]
   a70c2:	81ea      	strh	r2, [r5, #14]
   a70c4:	602c      	str	r4, [r5, #0]
   a70c6:	606c      	str	r4, [r5, #4]
   a70c8:	60ac      	str	r4, [r5, #8]
   a70ca:	666c      	str	r4, [r5, #100]	; 0x64
   a70cc:	612c      	str	r4, [r5, #16]
   a70ce:	616c      	str	r4, [r5, #20]
   a70d0:	61ac      	str	r4, [r5, #24]
   a70d2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a70d6:	2208      	movs	r2, #8
   a70d8:	f7ff fd04 	bl	a6ae4 <memset>
   a70dc:	9b01      	ldr	r3, [sp, #4]
   a70de:	61ed      	str	r5, [r5, #28]
   a70e0:	f8c5 b020 	str.w	fp, [r5, #32]
   a70e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a70e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a70ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a70f0:	63bb      	str	r3, [r7, #56]	; 0x38
   a70f2:	b003      	add	sp, #12
   a70f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a70f8:	000a7011 	.word	0x000a7011
   a70fc:	000a82b1 	.word	0x000a82b1
   a7100:	000a82d5 	.word	0x000a82d5
   a7104:	000a8311 	.word	0x000a8311
   a7108:	000a8331 	.word	0x000a8331

000a710c <__sinit>:
   a710c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a710e:	b103      	cbz	r3, a7112 <__sinit+0x6>
   a7110:	4770      	bx	lr
   a7112:	f7ff bf83 	b.w	a701c <__sinit.part.1>
   a7116:	bf00      	nop

000a7118 <__sfp_lock_acquire>:
   a7118:	4770      	bx	lr
   a711a:	bf00      	nop

000a711c <__sfp_lock_release>:
   a711c:	4770      	bx	lr
   a711e:	bf00      	nop

000a7120 <__libc_fini_array>:
   a7120:	b538      	push	{r3, r4, r5, lr}
   a7122:	4d07      	ldr	r5, [pc, #28]	; (a7140 <__libc_fini_array+0x20>)
   a7124:	4c07      	ldr	r4, [pc, #28]	; (a7144 <__libc_fini_array+0x24>)
   a7126:	1b2c      	subs	r4, r5, r4
   a7128:	10a4      	asrs	r4, r4, #2
   a712a:	d005      	beq.n	a7138 <__libc_fini_array+0x18>
   a712c:	3c01      	subs	r4, #1
   a712e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a7132:	4798      	blx	r3
   a7134:	2c00      	cmp	r4, #0
   a7136:	d1f9      	bne.n	a712c <__libc_fini_array+0xc>
   a7138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a713c:	f001 bcbe 	b.w	a8abc <_fini>
   a7140:	000a8acc 	.word	0x000a8acc
   a7144:	000a8ac8 	.word	0x000a8ac8

000a7148 <_malloc_trim_r>:
   a7148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a714a:	460c      	mov	r4, r1
   a714c:	4f22      	ldr	r7, [pc, #136]	; (a71d8 <_malloc_trim_r+0x90>)
   a714e:	4606      	mov	r6, r0
   a7150:	f000 feae 	bl	a7eb0 <__malloc_lock>
   a7154:	68bb      	ldr	r3, [r7, #8]
   a7156:	685d      	ldr	r5, [r3, #4]
   a7158:	f025 0503 	bic.w	r5, r5, #3
   a715c:	1b29      	subs	r1, r5, r4
   a715e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a7162:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a7166:	f021 010f 	bic.w	r1, r1, #15
   a716a:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a716e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a7172:	db07      	blt.n	a7184 <_malloc_trim_r+0x3c>
   a7174:	2100      	movs	r1, #0
   a7176:	4630      	mov	r0, r6
   a7178:	f001 f888 	bl	a828c <_sbrk_r>
   a717c:	68bb      	ldr	r3, [r7, #8]
   a717e:	442b      	add	r3, r5
   a7180:	4298      	cmp	r0, r3
   a7182:	d004      	beq.n	a718e <_malloc_trim_r+0x46>
   a7184:	4630      	mov	r0, r6
   a7186:	f000 fe95 	bl	a7eb4 <__malloc_unlock>
   a718a:	2000      	movs	r0, #0
   a718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a718e:	4261      	negs	r1, r4
   a7190:	4630      	mov	r0, r6
   a7192:	f001 f87b 	bl	a828c <_sbrk_r>
   a7196:	3001      	adds	r0, #1
   a7198:	d00d      	beq.n	a71b6 <_malloc_trim_r+0x6e>
   a719a:	4b10      	ldr	r3, [pc, #64]	; (a71dc <_malloc_trim_r+0x94>)
   a719c:	68ba      	ldr	r2, [r7, #8]
   a719e:	6819      	ldr	r1, [r3, #0]
   a71a0:	1b2d      	subs	r5, r5, r4
   a71a2:	f045 0501 	orr.w	r5, r5, #1
   a71a6:	4630      	mov	r0, r6
   a71a8:	1b09      	subs	r1, r1, r4
   a71aa:	6055      	str	r5, [r2, #4]
   a71ac:	6019      	str	r1, [r3, #0]
   a71ae:	f000 fe81 	bl	a7eb4 <__malloc_unlock>
   a71b2:	2001      	movs	r0, #1
   a71b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a71b6:	2100      	movs	r1, #0
   a71b8:	4630      	mov	r0, r6
   a71ba:	f001 f867 	bl	a828c <_sbrk_r>
   a71be:	68ba      	ldr	r2, [r7, #8]
   a71c0:	1a83      	subs	r3, r0, r2
   a71c2:	2b0f      	cmp	r3, #15
   a71c4:	ddde      	ble.n	a7184 <_malloc_trim_r+0x3c>
   a71c6:	4c06      	ldr	r4, [pc, #24]	; (a71e0 <_malloc_trim_r+0x98>)
   a71c8:	4904      	ldr	r1, [pc, #16]	; (a71dc <_malloc_trim_r+0x94>)
   a71ca:	6824      	ldr	r4, [r4, #0]
   a71cc:	f043 0301 	orr.w	r3, r3, #1
   a71d0:	1b00      	subs	r0, r0, r4
   a71d2:	6053      	str	r3, [r2, #4]
   a71d4:	6008      	str	r0, [r1, #0]
   a71d6:	e7d5      	b.n	a7184 <_malloc_trim_r+0x3c>
   a71d8:	200711e4 	.word	0x200711e4
   a71dc:	20071cd4 	.word	0x20071cd4
   a71e0:	200715f0 	.word	0x200715f0

000a71e4 <_free_r>:
   a71e4:	2900      	cmp	r1, #0
   a71e6:	d045      	beq.n	a7274 <_free_r+0x90>
   a71e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a71ec:	460d      	mov	r5, r1
   a71ee:	4680      	mov	r8, r0
   a71f0:	f000 fe5e 	bl	a7eb0 <__malloc_lock>
   a71f4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   a71f8:	496a      	ldr	r1, [pc, #424]	; (a73a4 <_free_r+0x1c0>)
   a71fa:	f1a5 0408 	sub.w	r4, r5, #8
   a71fe:	f027 0301 	bic.w	r3, r7, #1
   a7202:	18e2      	adds	r2, r4, r3
   a7204:	688e      	ldr	r6, [r1, #8]
   a7206:	6850      	ldr	r0, [r2, #4]
   a7208:	42b2      	cmp	r2, r6
   a720a:	f020 0003 	bic.w	r0, r0, #3
   a720e:	d062      	beq.n	a72d6 <_free_r+0xf2>
   a7210:	07fe      	lsls	r6, r7, #31
   a7212:	6050      	str	r0, [r2, #4]
   a7214:	d40b      	bmi.n	a722e <_free_r+0x4a>
   a7216:	f855 7c08 	ldr.w	r7, [r5, #-8]
   a721a:	f101 0e08 	add.w	lr, r1, #8
   a721e:	1be4      	subs	r4, r4, r7
   a7220:	68a5      	ldr	r5, [r4, #8]
   a7222:	443b      	add	r3, r7
   a7224:	4575      	cmp	r5, lr
   a7226:	d06f      	beq.n	a7308 <_free_r+0x124>
   a7228:	68e7      	ldr	r7, [r4, #12]
   a722a:	60ef      	str	r7, [r5, #12]
   a722c:	60bd      	str	r5, [r7, #8]
   a722e:	1815      	adds	r5, r2, r0
   a7230:	686d      	ldr	r5, [r5, #4]
   a7232:	07ed      	lsls	r5, r5, #31
   a7234:	d542      	bpl.n	a72bc <_free_r+0xd8>
   a7236:	f043 0201 	orr.w	r2, r3, #1
   a723a:	6062      	str	r2, [r4, #4]
   a723c:	50e3      	str	r3, [r4, r3]
   a723e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a7242:	d218      	bcs.n	a7276 <_free_r+0x92>
   a7244:	08db      	lsrs	r3, r3, #3
   a7246:	6848      	ldr	r0, [r1, #4]
   a7248:	109d      	asrs	r5, r3, #2
   a724a:	2201      	movs	r2, #1
   a724c:	3301      	adds	r3, #1
   a724e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   a7252:	fa02 f505 	lsl.w	r5, r2, r5
   a7256:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   a725a:	4328      	orrs	r0, r5
   a725c:	3a08      	subs	r2, #8
   a725e:	60e2      	str	r2, [r4, #12]
   a7260:	60a7      	str	r7, [r4, #8]
   a7262:	6048      	str	r0, [r1, #4]
   a7264:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a7268:	60fc      	str	r4, [r7, #12]
   a726a:	4640      	mov	r0, r8
   a726c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a7270:	f000 be20 	b.w	a7eb4 <__malloc_unlock>
   a7274:	4770      	bx	lr
   a7276:	0a5a      	lsrs	r2, r3, #9
   a7278:	2a04      	cmp	r2, #4
   a727a:	d853      	bhi.n	a7324 <_free_r+0x140>
   a727c:	099a      	lsrs	r2, r3, #6
   a727e:	f102 0739 	add.w	r7, r2, #57	; 0x39
   a7282:	007f      	lsls	r7, r7, #1
   a7284:	f102 0538 	add.w	r5, r2, #56	; 0x38
   a7288:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   a728c:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   a7290:	3808      	subs	r0, #8
   a7292:	4290      	cmp	r0, r2
   a7294:	4943      	ldr	r1, [pc, #268]	; (a73a4 <_free_r+0x1c0>)
   a7296:	d04d      	beq.n	a7334 <_free_r+0x150>
   a7298:	6851      	ldr	r1, [r2, #4]
   a729a:	f021 0103 	bic.w	r1, r1, #3
   a729e:	428b      	cmp	r3, r1
   a72a0:	d202      	bcs.n	a72a8 <_free_r+0xc4>
   a72a2:	6892      	ldr	r2, [r2, #8]
   a72a4:	4290      	cmp	r0, r2
   a72a6:	d1f7      	bne.n	a7298 <_free_r+0xb4>
   a72a8:	68d0      	ldr	r0, [r2, #12]
   a72aa:	60e0      	str	r0, [r4, #12]
   a72ac:	60a2      	str	r2, [r4, #8]
   a72ae:	6084      	str	r4, [r0, #8]
   a72b0:	60d4      	str	r4, [r2, #12]
   a72b2:	4640      	mov	r0, r8
   a72b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a72b8:	f000 bdfc 	b.w	a7eb4 <__malloc_unlock>
   a72bc:	6895      	ldr	r5, [r2, #8]
   a72be:	4f3a      	ldr	r7, [pc, #232]	; (a73a8 <_free_r+0x1c4>)
   a72c0:	4403      	add	r3, r0
   a72c2:	42bd      	cmp	r5, r7
   a72c4:	d03f      	beq.n	a7346 <_free_r+0x162>
   a72c6:	68d0      	ldr	r0, [r2, #12]
   a72c8:	f043 0201 	orr.w	r2, r3, #1
   a72cc:	60e8      	str	r0, [r5, #12]
   a72ce:	6085      	str	r5, [r0, #8]
   a72d0:	6062      	str	r2, [r4, #4]
   a72d2:	50e3      	str	r3, [r4, r3]
   a72d4:	e7b3      	b.n	a723e <_free_r+0x5a>
   a72d6:	07ff      	lsls	r7, r7, #31
   a72d8:	4403      	add	r3, r0
   a72da:	d407      	bmi.n	a72ec <_free_r+0x108>
   a72dc:	f855 5c08 	ldr.w	r5, [r5, #-8]
   a72e0:	1b64      	subs	r4, r4, r5
   a72e2:	68e2      	ldr	r2, [r4, #12]
   a72e4:	68a0      	ldr	r0, [r4, #8]
   a72e6:	442b      	add	r3, r5
   a72e8:	60c2      	str	r2, [r0, #12]
   a72ea:	6090      	str	r0, [r2, #8]
   a72ec:	4a2f      	ldr	r2, [pc, #188]	; (a73ac <_free_r+0x1c8>)
   a72ee:	f043 0001 	orr.w	r0, r3, #1
   a72f2:	6812      	ldr	r2, [r2, #0]
   a72f4:	6060      	str	r0, [r4, #4]
   a72f6:	4293      	cmp	r3, r2
   a72f8:	608c      	str	r4, [r1, #8]
   a72fa:	d3b6      	bcc.n	a726a <_free_r+0x86>
   a72fc:	4b2c      	ldr	r3, [pc, #176]	; (a73b0 <_free_r+0x1cc>)
   a72fe:	4640      	mov	r0, r8
   a7300:	6819      	ldr	r1, [r3, #0]
   a7302:	f7ff ff21 	bl	a7148 <_malloc_trim_r>
   a7306:	e7b0      	b.n	a726a <_free_r+0x86>
   a7308:	1811      	adds	r1, r2, r0
   a730a:	6849      	ldr	r1, [r1, #4]
   a730c:	07c9      	lsls	r1, r1, #31
   a730e:	d444      	bmi.n	a739a <_free_r+0x1b6>
   a7310:	6891      	ldr	r1, [r2, #8]
   a7312:	4403      	add	r3, r0
   a7314:	68d2      	ldr	r2, [r2, #12]
   a7316:	f043 0001 	orr.w	r0, r3, #1
   a731a:	60ca      	str	r2, [r1, #12]
   a731c:	6091      	str	r1, [r2, #8]
   a731e:	6060      	str	r0, [r4, #4]
   a7320:	50e3      	str	r3, [r4, r3]
   a7322:	e7a2      	b.n	a726a <_free_r+0x86>
   a7324:	2a14      	cmp	r2, #20
   a7326:	d817      	bhi.n	a7358 <_free_r+0x174>
   a7328:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   a732c:	007f      	lsls	r7, r7, #1
   a732e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   a7332:	e7a9      	b.n	a7288 <_free_r+0xa4>
   a7334:	10aa      	asrs	r2, r5, #2
   a7336:	684b      	ldr	r3, [r1, #4]
   a7338:	2501      	movs	r5, #1
   a733a:	fa05 f202 	lsl.w	r2, r5, r2
   a733e:	4313      	orrs	r3, r2
   a7340:	604b      	str	r3, [r1, #4]
   a7342:	4602      	mov	r2, r0
   a7344:	e7b1      	b.n	a72aa <_free_r+0xc6>
   a7346:	f043 0201 	orr.w	r2, r3, #1
   a734a:	614c      	str	r4, [r1, #20]
   a734c:	610c      	str	r4, [r1, #16]
   a734e:	60e5      	str	r5, [r4, #12]
   a7350:	60a5      	str	r5, [r4, #8]
   a7352:	6062      	str	r2, [r4, #4]
   a7354:	50e3      	str	r3, [r4, r3]
   a7356:	e788      	b.n	a726a <_free_r+0x86>
   a7358:	2a54      	cmp	r2, #84	; 0x54
   a735a:	d806      	bhi.n	a736a <_free_r+0x186>
   a735c:	0b1a      	lsrs	r2, r3, #12
   a735e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   a7362:	007f      	lsls	r7, r7, #1
   a7364:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   a7368:	e78e      	b.n	a7288 <_free_r+0xa4>
   a736a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a736e:	d806      	bhi.n	a737e <_free_r+0x19a>
   a7370:	0bda      	lsrs	r2, r3, #15
   a7372:	f102 0778 	add.w	r7, r2, #120	; 0x78
   a7376:	007f      	lsls	r7, r7, #1
   a7378:	f102 0577 	add.w	r5, r2, #119	; 0x77
   a737c:	e784      	b.n	a7288 <_free_r+0xa4>
   a737e:	f240 5054 	movw	r0, #1364	; 0x554
   a7382:	4282      	cmp	r2, r0
   a7384:	d806      	bhi.n	a7394 <_free_r+0x1b0>
   a7386:	0c9a      	lsrs	r2, r3, #18
   a7388:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   a738c:	007f      	lsls	r7, r7, #1
   a738e:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   a7392:	e779      	b.n	a7288 <_free_r+0xa4>
   a7394:	27fe      	movs	r7, #254	; 0xfe
   a7396:	257e      	movs	r5, #126	; 0x7e
   a7398:	e776      	b.n	a7288 <_free_r+0xa4>
   a739a:	f043 0201 	orr.w	r2, r3, #1
   a739e:	6062      	str	r2, [r4, #4]
   a73a0:	50e3      	str	r3, [r4, r3]
   a73a2:	e762      	b.n	a726a <_free_r+0x86>
   a73a4:	200711e4 	.word	0x200711e4
   a73a8:	200711ec 	.word	0x200711ec
   a73ac:	200715ec 	.word	0x200715ec
   a73b0:	20071cd0 	.word	0x20071cd0

000a73b4 <__sfvwrite_r>:
   a73b4:	6893      	ldr	r3, [r2, #8]
   a73b6:	2b00      	cmp	r3, #0
   a73b8:	f000 80ab 	beq.w	a7512 <__sfvwrite_r+0x15e>
   a73bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a73c0:	898b      	ldrh	r3, [r1, #12]
   a73c2:	b085      	sub	sp, #20
   a73c4:	460c      	mov	r4, r1
   a73c6:	0719      	lsls	r1, r3, #28
   a73c8:	9002      	str	r0, [sp, #8]
   a73ca:	4616      	mov	r6, r2
   a73cc:	d528      	bpl.n	a7420 <__sfvwrite_r+0x6c>
   a73ce:	6922      	ldr	r2, [r4, #16]
   a73d0:	b332      	cbz	r2, a7420 <__sfvwrite_r+0x6c>
   a73d2:	f003 0802 	and.w	r8, r3, #2
   a73d6:	fa1f f088 	uxth.w	r0, r8
   a73da:	6835      	ldr	r5, [r6, #0]
   a73dc:	b378      	cbz	r0, a743e <__sfvwrite_r+0x8a>
   a73de:	f04f 0900 	mov.w	r9, #0
   a73e2:	46c8      	mov	r8, r9
   a73e4:	f8df a2d0 	ldr.w	sl, [pc, #720]	; a76b8 <__sfvwrite_r+0x304>
   a73e8:	f1b8 0f00 	cmp.w	r8, #0
   a73ec:	f000 808b 	beq.w	a7506 <__sfvwrite_r+0x152>
   a73f0:	45d0      	cmp	r8, sl
   a73f2:	4643      	mov	r3, r8
   a73f4:	464a      	mov	r2, r9
   a73f6:	bf28      	it	cs
   a73f8:	4653      	movcs	r3, sl
   a73fa:	69e1      	ldr	r1, [r4, #28]
   a73fc:	9802      	ldr	r0, [sp, #8]
   a73fe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a7400:	47b8      	blx	r7
   a7402:	2800      	cmp	r0, #0
   a7404:	f340 80a5 	ble.w	a7552 <__sfvwrite_r+0x19e>
   a7408:	68b3      	ldr	r3, [r6, #8]
   a740a:	4481      	add	r9, r0
   a740c:	1a1b      	subs	r3, r3, r0
   a740e:	ebc0 0808 	rsb	r8, r0, r8
   a7412:	60b3      	str	r3, [r6, #8]
   a7414:	2b00      	cmp	r3, #0
   a7416:	d1e7      	bne.n	a73e8 <__sfvwrite_r+0x34>
   a7418:	2000      	movs	r0, #0
   a741a:	b005      	add	sp, #20
   a741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7420:	4621      	mov	r1, r4
   a7422:	9802      	ldr	r0, [sp, #8]
   a7424:	f7ff fcc6 	bl	a6db4 <__swsetup_r>
   a7428:	2800      	cmp	r0, #0
   a742a:	f040 813c 	bne.w	a76a6 <__sfvwrite_r+0x2f2>
   a742e:	89a3      	ldrh	r3, [r4, #12]
   a7430:	6835      	ldr	r5, [r6, #0]
   a7432:	f003 0802 	and.w	r8, r3, #2
   a7436:	fa1f f088 	uxth.w	r0, r8
   a743a:	2800      	cmp	r0, #0
   a743c:	d1cf      	bne.n	a73de <__sfvwrite_r+0x2a>
   a743e:	f013 0901 	ands.w	r9, r3, #1
   a7442:	f040 8090 	bne.w	a7566 <__sfvwrite_r+0x1b2>
   a7446:	464f      	mov	r7, r9
   a7448:	9601      	str	r6, [sp, #4]
   a744a:	2f00      	cmp	r7, #0
   a744c:	d056      	beq.n	a74fc <__sfvwrite_r+0x148>
   a744e:	059a      	lsls	r2, r3, #22
   a7450:	f8d4 8008 	ldr.w	r8, [r4, #8]
   a7454:	d55f      	bpl.n	a7516 <__sfvwrite_r+0x162>
   a7456:	4547      	cmp	r7, r8
   a7458:	46c2      	mov	sl, r8
   a745a:	f0c0 80bf 	bcc.w	a75dc <__sfvwrite_r+0x228>
   a745e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   a7462:	f000 80bd 	beq.w	a75e0 <__sfvwrite_r+0x22c>
   a7466:	6962      	ldr	r2, [r4, #20]
   a7468:	6820      	ldr	r0, [r4, #0]
   a746a:	6921      	ldr	r1, [r4, #16]
   a746c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   a7470:	ebc1 0a00 	rsb	sl, r1, r0
   a7474:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   a7478:	f10a 0001 	add.w	r0, sl, #1
   a747c:	ea4f 0868 	mov.w	r8, r8, asr #1
   a7480:	4438      	add	r0, r7
   a7482:	4540      	cmp	r0, r8
   a7484:	4642      	mov	r2, r8
   a7486:	bf84      	itt	hi
   a7488:	4680      	movhi	r8, r0
   a748a:	4642      	movhi	r2, r8
   a748c:	055b      	lsls	r3, r3, #21
   a748e:	f140 80f2 	bpl.w	a7676 <__sfvwrite_r+0x2c2>
   a7492:	4611      	mov	r1, r2
   a7494:	9802      	ldr	r0, [sp, #8]
   a7496:	f000 f9b5 	bl	a7804 <_malloc_r>
   a749a:	4683      	mov	fp, r0
   a749c:	2800      	cmp	r0, #0
   a749e:	f000 8105 	beq.w	a76ac <__sfvwrite_r+0x2f8>
   a74a2:	4652      	mov	r2, sl
   a74a4:	6921      	ldr	r1, [r4, #16]
   a74a6:	f7ff faa7 	bl	a69f8 <memcpy>
   a74aa:	89a3      	ldrh	r3, [r4, #12]
   a74ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   a74b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a74b4:	81a3      	strh	r3, [r4, #12]
   a74b6:	ebca 0308 	rsb	r3, sl, r8
   a74ba:	eb0b 000a 	add.w	r0, fp, sl
   a74be:	f8c4 8014 	str.w	r8, [r4, #20]
   a74c2:	46ba      	mov	sl, r7
   a74c4:	46b8      	mov	r8, r7
   a74c6:	f8c4 b010 	str.w	fp, [r4, #16]
   a74ca:	6020      	str	r0, [r4, #0]
   a74cc:	60a3      	str	r3, [r4, #8]
   a74ce:	4652      	mov	r2, sl
   a74d0:	4649      	mov	r1, r9
   a74d2:	f000 fc89 	bl	a7de8 <memmove>
   a74d6:	68a0      	ldr	r0, [r4, #8]
   a74d8:	6823      	ldr	r3, [r4, #0]
   a74da:	ebc8 0000 	rsb	r0, r8, r0
   a74de:	60a0      	str	r0, [r4, #8]
   a74e0:	4638      	mov	r0, r7
   a74e2:	4453      	add	r3, sl
   a74e4:	6023      	str	r3, [r4, #0]
   a74e6:	9a01      	ldr	r2, [sp, #4]
   a74e8:	4481      	add	r9, r0
   a74ea:	6893      	ldr	r3, [r2, #8]
   a74ec:	1a3f      	subs	r7, r7, r0
   a74ee:	1a1b      	subs	r3, r3, r0
   a74f0:	6093      	str	r3, [r2, #8]
   a74f2:	2b00      	cmp	r3, #0
   a74f4:	d090      	beq.n	a7418 <__sfvwrite_r+0x64>
   a74f6:	89a3      	ldrh	r3, [r4, #12]
   a74f8:	2f00      	cmp	r7, #0
   a74fa:	d1a8      	bne.n	a744e <__sfvwrite_r+0x9a>
   a74fc:	f8d5 9000 	ldr.w	r9, [r5]
   a7500:	686f      	ldr	r7, [r5, #4]
   a7502:	3508      	adds	r5, #8
   a7504:	e7a1      	b.n	a744a <__sfvwrite_r+0x96>
   a7506:	f8d5 9000 	ldr.w	r9, [r5]
   a750a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a750e:	3508      	adds	r5, #8
   a7510:	e76a      	b.n	a73e8 <__sfvwrite_r+0x34>
   a7512:	2000      	movs	r0, #0
   a7514:	4770      	bx	lr
   a7516:	6820      	ldr	r0, [r4, #0]
   a7518:	6923      	ldr	r3, [r4, #16]
   a751a:	4298      	cmp	r0, r3
   a751c:	d803      	bhi.n	a7526 <__sfvwrite_r+0x172>
   a751e:	6962      	ldr	r2, [r4, #20]
   a7520:	4297      	cmp	r7, r2
   a7522:	f080 8083 	bcs.w	a762c <__sfvwrite_r+0x278>
   a7526:	45b8      	cmp	r8, r7
   a7528:	bf28      	it	cs
   a752a:	46b8      	movcs	r8, r7
   a752c:	4649      	mov	r1, r9
   a752e:	4642      	mov	r2, r8
   a7530:	f000 fc5a 	bl	a7de8 <memmove>
   a7534:	68a3      	ldr	r3, [r4, #8]
   a7536:	6822      	ldr	r2, [r4, #0]
   a7538:	ebc8 0303 	rsb	r3, r8, r3
   a753c:	4442      	add	r2, r8
   a753e:	60a3      	str	r3, [r4, #8]
   a7540:	6022      	str	r2, [r4, #0]
   a7542:	2b00      	cmp	r3, #0
   a7544:	d148      	bne.n	a75d8 <__sfvwrite_r+0x224>
   a7546:	4621      	mov	r1, r4
   a7548:	9802      	ldr	r0, [sp, #8]
   a754a:	f7ff fd4b 	bl	a6fe4 <_fflush_r>
   a754e:	2800      	cmp	r0, #0
   a7550:	d042      	beq.n	a75d8 <__sfvwrite_r+0x224>
   a7552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a7556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a755a:	f04f 30ff 	mov.w	r0, #4294967295
   a755e:	81a3      	strh	r3, [r4, #12]
   a7560:	b005      	add	sp, #20
   a7562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7566:	4680      	mov	r8, r0
   a7568:	4682      	mov	sl, r0
   a756a:	4681      	mov	r9, r0
   a756c:	9001      	str	r0, [sp, #4]
   a756e:	f1b9 0f00 	cmp.w	r9, #0
   a7572:	d029      	beq.n	a75c8 <__sfvwrite_r+0x214>
   a7574:	9b01      	ldr	r3, [sp, #4]
   a7576:	2b00      	cmp	r3, #0
   a7578:	d04b      	beq.n	a7612 <__sfvwrite_r+0x25e>
   a757a:	45c8      	cmp	r8, r9
   a757c:	46c3      	mov	fp, r8
   a757e:	bf28      	it	cs
   a7580:	46cb      	movcs	fp, r9
   a7582:	6820      	ldr	r0, [r4, #0]
   a7584:	6923      	ldr	r3, [r4, #16]
   a7586:	465f      	mov	r7, fp
   a7588:	4298      	cmp	r0, r3
   a758a:	6962      	ldr	r2, [r4, #20]
   a758c:	d903      	bls.n	a7596 <__sfvwrite_r+0x1e2>
   a758e:	68a3      	ldr	r3, [r4, #8]
   a7590:	4413      	add	r3, r2
   a7592:	459b      	cmp	fp, r3
   a7594:	dc5c      	bgt.n	a7650 <__sfvwrite_r+0x29c>
   a7596:	4593      	cmp	fp, r2
   a7598:	db24      	blt.n	a75e4 <__sfvwrite_r+0x230>
   a759a:	4613      	mov	r3, r2
   a759c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a759e:	4652      	mov	r2, sl
   a75a0:	69e1      	ldr	r1, [r4, #28]
   a75a2:	9802      	ldr	r0, [sp, #8]
   a75a4:	47b8      	blx	r7
   a75a6:	1e07      	subs	r7, r0, #0
   a75a8:	ddd3      	ble.n	a7552 <__sfvwrite_r+0x19e>
   a75aa:	ebb8 0807 	subs.w	r8, r8, r7
   a75ae:	d027      	beq.n	a7600 <__sfvwrite_r+0x24c>
   a75b0:	68b3      	ldr	r3, [r6, #8]
   a75b2:	44ba      	add	sl, r7
   a75b4:	1bdb      	subs	r3, r3, r7
   a75b6:	ebc7 0909 	rsb	r9, r7, r9
   a75ba:	60b3      	str	r3, [r6, #8]
   a75bc:	2b00      	cmp	r3, #0
   a75be:	f43f af2b 	beq.w	a7418 <__sfvwrite_r+0x64>
   a75c2:	f1b9 0f00 	cmp.w	r9, #0
   a75c6:	d1d5      	bne.n	a7574 <__sfvwrite_r+0x1c0>
   a75c8:	2300      	movs	r3, #0
   a75ca:	f8d5 a000 	ldr.w	sl, [r5]
   a75ce:	f8d5 9004 	ldr.w	r9, [r5, #4]
   a75d2:	9301      	str	r3, [sp, #4]
   a75d4:	3508      	adds	r5, #8
   a75d6:	e7ca      	b.n	a756e <__sfvwrite_r+0x1ba>
   a75d8:	4640      	mov	r0, r8
   a75da:	e784      	b.n	a74e6 <__sfvwrite_r+0x132>
   a75dc:	46b8      	mov	r8, r7
   a75de:	46ba      	mov	sl, r7
   a75e0:	6820      	ldr	r0, [r4, #0]
   a75e2:	e774      	b.n	a74ce <__sfvwrite_r+0x11a>
   a75e4:	465a      	mov	r2, fp
   a75e6:	4651      	mov	r1, sl
   a75e8:	f000 fbfe 	bl	a7de8 <memmove>
   a75ec:	68a2      	ldr	r2, [r4, #8]
   a75ee:	6823      	ldr	r3, [r4, #0]
   a75f0:	ebcb 0202 	rsb	r2, fp, r2
   a75f4:	445b      	add	r3, fp
   a75f6:	ebb8 0807 	subs.w	r8, r8, r7
   a75fa:	60a2      	str	r2, [r4, #8]
   a75fc:	6023      	str	r3, [r4, #0]
   a75fe:	d1d7      	bne.n	a75b0 <__sfvwrite_r+0x1fc>
   a7600:	4621      	mov	r1, r4
   a7602:	9802      	ldr	r0, [sp, #8]
   a7604:	f7ff fcee 	bl	a6fe4 <_fflush_r>
   a7608:	2800      	cmp	r0, #0
   a760a:	d1a2      	bne.n	a7552 <__sfvwrite_r+0x19e>
   a760c:	f8cd 8004 	str.w	r8, [sp, #4]
   a7610:	e7ce      	b.n	a75b0 <__sfvwrite_r+0x1fc>
   a7612:	464a      	mov	r2, r9
   a7614:	210a      	movs	r1, #10
   a7616:	4650      	mov	r0, sl
   a7618:	f000 fba0 	bl	a7d5c <memchr>
   a761c:	2800      	cmp	r0, #0
   a761e:	d03d      	beq.n	a769c <__sfvwrite_r+0x2e8>
   a7620:	3001      	adds	r0, #1
   a7622:	2301      	movs	r3, #1
   a7624:	ebca 0800 	rsb	r8, sl, r0
   a7628:	9301      	str	r3, [sp, #4]
   a762a:	e7a6      	b.n	a757a <__sfvwrite_r+0x1c6>
   a762c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a7630:	42bb      	cmp	r3, r7
   a7632:	bf28      	it	cs
   a7634:	463b      	movcs	r3, r7
   a7636:	fb93 f3f2 	sdiv	r3, r3, r2
   a763a:	69e1      	ldr	r1, [r4, #28]
   a763c:	fb02 f303 	mul.w	r3, r2, r3
   a7640:	9802      	ldr	r0, [sp, #8]
   a7642:	464a      	mov	r2, r9
   a7644:	6a66      	ldr	r6, [r4, #36]	; 0x24
   a7646:	47b0      	blx	r6
   a7648:	2800      	cmp	r0, #0
   a764a:	f73f af4c 	bgt.w	a74e6 <__sfvwrite_r+0x132>
   a764e:	e780      	b.n	a7552 <__sfvwrite_r+0x19e>
   a7650:	461a      	mov	r2, r3
   a7652:	4651      	mov	r1, sl
   a7654:	9303      	str	r3, [sp, #12]
   a7656:	f000 fbc7 	bl	a7de8 <memmove>
   a765a:	6822      	ldr	r2, [r4, #0]
   a765c:	9b03      	ldr	r3, [sp, #12]
   a765e:	4621      	mov	r1, r4
   a7660:	441a      	add	r2, r3
   a7662:	6022      	str	r2, [r4, #0]
   a7664:	9802      	ldr	r0, [sp, #8]
   a7666:	f7ff fcbd 	bl	a6fe4 <_fflush_r>
   a766a:	9b03      	ldr	r3, [sp, #12]
   a766c:	2800      	cmp	r0, #0
   a766e:	f47f af70 	bne.w	a7552 <__sfvwrite_r+0x19e>
   a7672:	461f      	mov	r7, r3
   a7674:	e799      	b.n	a75aa <__sfvwrite_r+0x1f6>
   a7676:	9802      	ldr	r0, [sp, #8]
   a7678:	f000 fc1e 	bl	a7eb8 <_realloc_r>
   a767c:	4683      	mov	fp, r0
   a767e:	2800      	cmp	r0, #0
   a7680:	f47f af19 	bne.w	a74b6 <__sfvwrite_r+0x102>
   a7684:	9d02      	ldr	r5, [sp, #8]
   a7686:	6921      	ldr	r1, [r4, #16]
   a7688:	4628      	mov	r0, r5
   a768a:	f7ff fdab 	bl	a71e4 <_free_r>
   a768e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a7692:	220c      	movs	r2, #12
   a7694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a7698:	602a      	str	r2, [r5, #0]
   a769a:	e75c      	b.n	a7556 <__sfvwrite_r+0x1a2>
   a769c:	2301      	movs	r3, #1
   a769e:	f109 0801 	add.w	r8, r9, #1
   a76a2:	9301      	str	r3, [sp, #4]
   a76a4:	e769      	b.n	a757a <__sfvwrite_r+0x1c6>
   a76a6:	f04f 30ff 	mov.w	r0, #4294967295
   a76aa:	e6b6      	b.n	a741a <__sfvwrite_r+0x66>
   a76ac:	9a02      	ldr	r2, [sp, #8]
   a76ae:	230c      	movs	r3, #12
   a76b0:	6013      	str	r3, [r2, #0]
   a76b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a76b6:	e74e      	b.n	a7556 <__sfvwrite_r+0x1a2>
   a76b8:	7ffffc00 	.word	0x7ffffc00

000a76bc <_fwalk_reent>:
   a76bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a76c0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a76c4:	d01e      	beq.n	a7704 <_fwalk_reent+0x48>
   a76c6:	4688      	mov	r8, r1
   a76c8:	4607      	mov	r7, r0
   a76ca:	f04f 0900 	mov.w	r9, #0
   a76ce:	6875      	ldr	r5, [r6, #4]
   a76d0:	68b4      	ldr	r4, [r6, #8]
   a76d2:	3d01      	subs	r5, #1
   a76d4:	d410      	bmi.n	a76f8 <_fwalk_reent+0x3c>
   a76d6:	89a3      	ldrh	r3, [r4, #12]
   a76d8:	3d01      	subs	r5, #1
   a76da:	2b01      	cmp	r3, #1
   a76dc:	d908      	bls.n	a76f0 <_fwalk_reent+0x34>
   a76de:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a76e2:	3301      	adds	r3, #1
   a76e4:	d004      	beq.n	a76f0 <_fwalk_reent+0x34>
   a76e6:	4621      	mov	r1, r4
   a76e8:	4638      	mov	r0, r7
   a76ea:	47c0      	blx	r8
   a76ec:	ea49 0900 	orr.w	r9, r9, r0
   a76f0:	1c6b      	adds	r3, r5, #1
   a76f2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a76f6:	d1ee      	bne.n	a76d6 <_fwalk_reent+0x1a>
   a76f8:	6836      	ldr	r6, [r6, #0]
   a76fa:	2e00      	cmp	r6, #0
   a76fc:	d1e7      	bne.n	a76ce <_fwalk_reent+0x12>
   a76fe:	4648      	mov	r0, r9
   a7700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a7704:	46b1      	mov	r9, r6
   a7706:	4648      	mov	r0, r9
   a7708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a770c <__swhatbuf_r>:
   a770c:	b570      	push	{r4, r5, r6, lr}
   a770e:	460e      	mov	r6, r1
   a7710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a7714:	b090      	sub	sp, #64	; 0x40
   a7716:	2900      	cmp	r1, #0
   a7718:	4614      	mov	r4, r2
   a771a:	461d      	mov	r5, r3
   a771c:	db14      	blt.n	a7748 <__swhatbuf_r+0x3c>
   a771e:	aa01      	add	r2, sp, #4
   a7720:	f000 fec6 	bl	a84b0 <_fstat_r>
   a7724:	2800      	cmp	r0, #0
   a7726:	db0f      	blt.n	a7748 <__swhatbuf_r+0x3c>
   a7728:	9a02      	ldr	r2, [sp, #8]
   a772a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a772e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   a7732:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   a7736:	fab2 f282 	clz	r2, r2
   a773a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   a773e:	0952      	lsrs	r2, r2, #5
   a7740:	602a      	str	r2, [r5, #0]
   a7742:	6023      	str	r3, [r4, #0]
   a7744:	b010      	add	sp, #64	; 0x40
   a7746:	bd70      	pop	{r4, r5, r6, pc}
   a7748:	89b2      	ldrh	r2, [r6, #12]
   a774a:	2000      	movs	r0, #0
   a774c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   a7750:	b292      	uxth	r2, r2
   a7752:	6028      	str	r0, [r5, #0]
   a7754:	b11a      	cbz	r2, a775e <__swhatbuf_r+0x52>
   a7756:	2340      	movs	r3, #64	; 0x40
   a7758:	6023      	str	r3, [r4, #0]
   a775a:	b010      	add	sp, #64	; 0x40
   a775c:	bd70      	pop	{r4, r5, r6, pc}
   a775e:	4610      	mov	r0, r2
   a7760:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a7764:	6023      	str	r3, [r4, #0]
   a7766:	b010      	add	sp, #64	; 0x40
   a7768:	bd70      	pop	{r4, r5, r6, pc}
   a776a:	bf00      	nop

000a776c <__smakebuf_r>:
   a776c:	898a      	ldrh	r2, [r1, #12]
   a776e:	460b      	mov	r3, r1
   a7770:	0792      	lsls	r2, r2, #30
   a7772:	d506      	bpl.n	a7782 <__smakebuf_r+0x16>
   a7774:	f101 0243 	add.w	r2, r1, #67	; 0x43
   a7778:	2101      	movs	r1, #1
   a777a:	601a      	str	r2, [r3, #0]
   a777c:	611a      	str	r2, [r3, #16]
   a777e:	6159      	str	r1, [r3, #20]
   a7780:	4770      	bx	lr
   a7782:	b5f0      	push	{r4, r5, r6, r7, lr}
   a7784:	b083      	sub	sp, #12
   a7786:	ab01      	add	r3, sp, #4
   a7788:	466a      	mov	r2, sp
   a778a:	460c      	mov	r4, r1
   a778c:	4605      	mov	r5, r0
   a778e:	f7ff ffbd 	bl	a770c <__swhatbuf_r>
   a7792:	9900      	ldr	r1, [sp, #0]
   a7794:	4606      	mov	r6, r0
   a7796:	4628      	mov	r0, r5
   a7798:	f000 f834 	bl	a7804 <_malloc_r>
   a779c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a77a0:	b1d0      	cbz	r0, a77d8 <__smakebuf_r+0x6c>
   a77a2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   a77a6:	4f12      	ldr	r7, [pc, #72]	; (a77f0 <__smakebuf_r+0x84>)
   a77a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a77ac:	63ef      	str	r7, [r5, #60]	; 0x3c
   a77ae:	81a3      	strh	r3, [r4, #12]
   a77b0:	6020      	str	r0, [r4, #0]
   a77b2:	6120      	str	r0, [r4, #16]
   a77b4:	6161      	str	r1, [r4, #20]
   a77b6:	b91a      	cbnz	r2, a77c0 <__smakebuf_r+0x54>
   a77b8:	4333      	orrs	r3, r6
   a77ba:	81a3      	strh	r3, [r4, #12]
   a77bc:	b003      	add	sp, #12
   a77be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a77c0:	4628      	mov	r0, r5
   a77c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a77c6:	f000 fe87 	bl	a84d8 <_isatty_r>
   a77ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a77ce:	2800      	cmp	r0, #0
   a77d0:	d0f2      	beq.n	a77b8 <__smakebuf_r+0x4c>
   a77d2:	f043 0301 	orr.w	r3, r3, #1
   a77d6:	e7ef      	b.n	a77b8 <__smakebuf_r+0x4c>
   a77d8:	059a      	lsls	r2, r3, #22
   a77da:	d4ef      	bmi.n	a77bc <__smakebuf_r+0x50>
   a77dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a77e0:	f043 0302 	orr.w	r3, r3, #2
   a77e4:	2101      	movs	r1, #1
   a77e6:	81a3      	strh	r3, [r4, #12]
   a77e8:	6022      	str	r2, [r4, #0]
   a77ea:	6122      	str	r2, [r4, #16]
   a77ec:	6161      	str	r1, [r4, #20]
   a77ee:	e7e5      	b.n	a77bc <__smakebuf_r+0x50>
   a77f0:	000a7011 	.word	0x000a7011

000a77f4 <malloc>:
   a77f4:	4b02      	ldr	r3, [pc, #8]	; (a7800 <malloc+0xc>)
   a77f6:	4601      	mov	r1, r0
   a77f8:	6818      	ldr	r0, [r3, #0]
   a77fa:	f000 b803 	b.w	a7804 <_malloc_r>
   a77fe:	bf00      	nop
   a7800:	200711e0 	.word	0x200711e0

000a7804 <_malloc_r>:
   a7804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7808:	f101 050b 	add.w	r5, r1, #11
   a780c:	2d16      	cmp	r5, #22
   a780e:	b083      	sub	sp, #12
   a7810:	4606      	mov	r6, r0
   a7812:	f240 80a0 	bls.w	a7956 <_malloc_r+0x152>
   a7816:	f035 0507 	bics.w	r5, r5, #7
   a781a:	f100 80c0 	bmi.w	a799e <_malloc_r+0x19a>
   a781e:	42a9      	cmp	r1, r5
   a7820:	f200 80bd 	bhi.w	a799e <_malloc_r+0x19a>
   a7824:	f000 fb44 	bl	a7eb0 <__malloc_lock>
   a7828:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a782c:	f0c0 8290 	bcc.w	a7d50 <_malloc_r+0x54c>
   a7830:	0a6b      	lsrs	r3, r5, #9
   a7832:	f000 80bb 	beq.w	a79ac <_malloc_r+0x1a8>
   a7836:	2b04      	cmp	r3, #4
   a7838:	f200 8177 	bhi.w	a7b2a <_malloc_r+0x326>
   a783c:	09a8      	lsrs	r0, r5, #6
   a783e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   a7842:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a7846:	3038      	adds	r0, #56	; 0x38
   a7848:	4fbe      	ldr	r7, [pc, #760]	; (a7b44 <_malloc_r+0x340>)
   a784a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a784e:	684c      	ldr	r4, [r1, #4]
   a7850:	3908      	subs	r1, #8
   a7852:	42a1      	cmp	r1, r4
   a7854:	d107      	bne.n	a7866 <_malloc_r+0x62>
   a7856:	e0ae      	b.n	a79b6 <_malloc_r+0x1b2>
   a7858:	2a00      	cmp	r2, #0
   a785a:	f280 80ae 	bge.w	a79ba <_malloc_r+0x1b6>
   a785e:	68e4      	ldr	r4, [r4, #12]
   a7860:	42a1      	cmp	r1, r4
   a7862:	f000 80a8 	beq.w	a79b6 <_malloc_r+0x1b2>
   a7866:	6863      	ldr	r3, [r4, #4]
   a7868:	f023 0303 	bic.w	r3, r3, #3
   a786c:	1b5a      	subs	r2, r3, r5
   a786e:	2a0f      	cmp	r2, #15
   a7870:	ddf2      	ble.n	a7858 <_malloc_r+0x54>
   a7872:	49b4      	ldr	r1, [pc, #720]	; (a7b44 <_malloc_r+0x340>)
   a7874:	693c      	ldr	r4, [r7, #16]
   a7876:	f101 0e08 	add.w	lr, r1, #8
   a787a:	4574      	cmp	r4, lr
   a787c:	f000 81a8 	beq.w	a7bd0 <_malloc_r+0x3cc>
   a7880:	6863      	ldr	r3, [r4, #4]
   a7882:	f023 0303 	bic.w	r3, r3, #3
   a7886:	1b5a      	subs	r2, r3, r5
   a7888:	2a0f      	cmp	r2, #15
   a788a:	f300 818e 	bgt.w	a7baa <_malloc_r+0x3a6>
   a788e:	2a00      	cmp	r2, #0
   a7890:	f8c1 e014 	str.w	lr, [r1, #20]
   a7894:	f8c1 e010 	str.w	lr, [r1, #16]
   a7898:	f280 8093 	bge.w	a79c2 <_malloc_r+0x1be>
   a789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a78a0:	f080 815c 	bcs.w	a7b5c <_malloc_r+0x358>
   a78a4:	08db      	lsrs	r3, r3, #3
   a78a6:	684a      	ldr	r2, [r1, #4]
   a78a8:	ea4f 09a3 	mov.w	r9, r3, asr #2
   a78ac:	f04f 0c01 	mov.w	ip, #1
   a78b0:	3301      	adds	r3, #1
   a78b2:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   a78b6:	fa0c f909 	lsl.w	r9, ip, r9
   a78ba:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   a78be:	ea49 0202 	orr.w	r2, r9, r2
   a78c2:	f1ac 0c08 	sub.w	ip, ip, #8
   a78c6:	f8c4 c00c 	str.w	ip, [r4, #12]
   a78ca:	f8c4 8008 	str.w	r8, [r4, #8]
   a78ce:	604a      	str	r2, [r1, #4]
   a78d0:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   a78d4:	f8c8 400c 	str.w	r4, [r8, #12]
   a78d8:	1083      	asrs	r3, r0, #2
   a78da:	2401      	movs	r4, #1
   a78dc:	409c      	lsls	r4, r3
   a78de:	4294      	cmp	r4, r2
   a78e0:	d87c      	bhi.n	a79dc <_malloc_r+0x1d8>
   a78e2:	4214      	tst	r4, r2
   a78e4:	d106      	bne.n	a78f4 <_malloc_r+0xf0>
   a78e6:	f020 0003 	bic.w	r0, r0, #3
   a78ea:	0064      	lsls	r4, r4, #1
   a78ec:	4214      	tst	r4, r2
   a78ee:	f100 0004 	add.w	r0, r0, #4
   a78f2:	d0fa      	beq.n	a78ea <_malloc_r+0xe6>
   a78f4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   a78f8:	46cc      	mov	ip, r9
   a78fa:	4680      	mov	r8, r0
   a78fc:	f8dc 100c 	ldr.w	r1, [ip, #12]
   a7900:	458c      	cmp	ip, r1
   a7902:	d107      	bne.n	a7914 <_malloc_r+0x110>
   a7904:	e166      	b.n	a7bd4 <_malloc_r+0x3d0>
   a7906:	2a00      	cmp	r2, #0
   a7908:	f280 8174 	bge.w	a7bf4 <_malloc_r+0x3f0>
   a790c:	68c9      	ldr	r1, [r1, #12]
   a790e:	458c      	cmp	ip, r1
   a7910:	f000 8160 	beq.w	a7bd4 <_malloc_r+0x3d0>
   a7914:	684b      	ldr	r3, [r1, #4]
   a7916:	f023 0303 	bic.w	r3, r3, #3
   a791a:	1b5a      	subs	r2, r3, r5
   a791c:	2a0f      	cmp	r2, #15
   a791e:	ddf2      	ble.n	a7906 <_malloc_r+0x102>
   a7920:	460c      	mov	r4, r1
   a7922:	68cb      	ldr	r3, [r1, #12]
   a7924:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a7928:	f045 0801 	orr.w	r8, r5, #1
   a792c:	f8c1 8004 	str.w	r8, [r1, #4]
   a7930:	440d      	add	r5, r1
   a7932:	f042 0101 	orr.w	r1, r2, #1
   a7936:	f8cc 300c 	str.w	r3, [ip, #12]
   a793a:	4630      	mov	r0, r6
   a793c:	f8c3 c008 	str.w	ip, [r3, #8]
   a7940:	617d      	str	r5, [r7, #20]
   a7942:	613d      	str	r5, [r7, #16]
   a7944:	f8c5 e00c 	str.w	lr, [r5, #12]
   a7948:	f8c5 e008 	str.w	lr, [r5, #8]
   a794c:	6069      	str	r1, [r5, #4]
   a794e:	50aa      	str	r2, [r5, r2]
   a7950:	f000 fab0 	bl	a7eb4 <__malloc_unlock>
   a7954:	e01f      	b.n	a7996 <_malloc_r+0x192>
   a7956:	2910      	cmp	r1, #16
   a7958:	d821      	bhi.n	a799e <_malloc_r+0x19a>
   a795a:	f000 faa9 	bl	a7eb0 <__malloc_lock>
   a795e:	2510      	movs	r5, #16
   a7960:	2306      	movs	r3, #6
   a7962:	2002      	movs	r0, #2
   a7964:	4f77      	ldr	r7, [pc, #476]	; (a7b44 <_malloc_r+0x340>)
   a7966:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   a796a:	685c      	ldr	r4, [r3, #4]
   a796c:	f1a3 0208 	sub.w	r2, r3, #8
   a7970:	4294      	cmp	r4, r2
   a7972:	f000 8138 	beq.w	a7be6 <_malloc_r+0x3e2>
   a7976:	6863      	ldr	r3, [r4, #4]
   a7978:	68e1      	ldr	r1, [r4, #12]
   a797a:	f023 0303 	bic.w	r3, r3, #3
   a797e:	4423      	add	r3, r4
   a7980:	685a      	ldr	r2, [r3, #4]
   a7982:	68a5      	ldr	r5, [r4, #8]
   a7984:	f042 0201 	orr.w	r2, r2, #1
   a7988:	60e9      	str	r1, [r5, #12]
   a798a:	4630      	mov	r0, r6
   a798c:	608d      	str	r5, [r1, #8]
   a798e:	605a      	str	r2, [r3, #4]
   a7990:	f000 fa90 	bl	a7eb4 <__malloc_unlock>
   a7994:	3408      	adds	r4, #8
   a7996:	4620      	mov	r0, r4
   a7998:	b003      	add	sp, #12
   a799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a799e:	2400      	movs	r4, #0
   a79a0:	4620      	mov	r0, r4
   a79a2:	230c      	movs	r3, #12
   a79a4:	6033      	str	r3, [r6, #0]
   a79a6:	b003      	add	sp, #12
   a79a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a79ac:	2180      	movs	r1, #128	; 0x80
   a79ae:	f04f 0e40 	mov.w	lr, #64	; 0x40
   a79b2:	203f      	movs	r0, #63	; 0x3f
   a79b4:	e748      	b.n	a7848 <_malloc_r+0x44>
   a79b6:	4670      	mov	r0, lr
   a79b8:	e75b      	b.n	a7872 <_malloc_r+0x6e>
   a79ba:	4423      	add	r3, r4
   a79bc:	685a      	ldr	r2, [r3, #4]
   a79be:	68e1      	ldr	r1, [r4, #12]
   a79c0:	e7df      	b.n	a7982 <_malloc_r+0x17e>
   a79c2:	4423      	add	r3, r4
   a79c4:	685a      	ldr	r2, [r3, #4]
   a79c6:	4630      	mov	r0, r6
   a79c8:	f042 0201 	orr.w	r2, r2, #1
   a79cc:	605a      	str	r2, [r3, #4]
   a79ce:	3408      	adds	r4, #8
   a79d0:	f000 fa70 	bl	a7eb4 <__malloc_unlock>
   a79d4:	4620      	mov	r0, r4
   a79d6:	b003      	add	sp, #12
   a79d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a79dc:	68bc      	ldr	r4, [r7, #8]
   a79de:	6863      	ldr	r3, [r4, #4]
   a79e0:	f023 0803 	bic.w	r8, r3, #3
   a79e4:	45a8      	cmp	r8, r5
   a79e6:	d304      	bcc.n	a79f2 <_malloc_r+0x1ee>
   a79e8:	ebc5 0308 	rsb	r3, r5, r8
   a79ec:	2b0f      	cmp	r3, #15
   a79ee:	f300 808c 	bgt.w	a7b0a <_malloc_r+0x306>
   a79f2:	4b55      	ldr	r3, [pc, #340]	; (a7b48 <_malloc_r+0x344>)
   a79f4:	f8df 9160 	ldr.w	r9, [pc, #352]	; a7b58 <_malloc_r+0x354>
   a79f8:	681a      	ldr	r2, [r3, #0]
   a79fa:	f8d9 3000 	ldr.w	r3, [r9]
   a79fe:	442a      	add	r2, r5
   a7a00:	3301      	adds	r3, #1
   a7a02:	eb04 0a08 	add.w	sl, r4, r8
   a7a06:	f000 8160 	beq.w	a7cca <_malloc_r+0x4c6>
   a7a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a7a0e:	320f      	adds	r2, #15
   a7a10:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a7a14:	f022 020f 	bic.w	r2, r2, #15
   a7a18:	4611      	mov	r1, r2
   a7a1a:	4630      	mov	r0, r6
   a7a1c:	9201      	str	r2, [sp, #4]
   a7a1e:	f000 fc35 	bl	a828c <_sbrk_r>
   a7a22:	f1b0 3fff 	cmp.w	r0, #4294967295
   a7a26:	4683      	mov	fp, r0
   a7a28:	9a01      	ldr	r2, [sp, #4]
   a7a2a:	f000 8158 	beq.w	a7cde <_malloc_r+0x4da>
   a7a2e:	4582      	cmp	sl, r0
   a7a30:	f200 80fc 	bhi.w	a7c2c <_malloc_r+0x428>
   a7a34:	4b45      	ldr	r3, [pc, #276]	; (a7b4c <_malloc_r+0x348>)
   a7a36:	45da      	cmp	sl, fp
   a7a38:	6819      	ldr	r1, [r3, #0]
   a7a3a:	4411      	add	r1, r2
   a7a3c:	6019      	str	r1, [r3, #0]
   a7a3e:	f000 8153 	beq.w	a7ce8 <_malloc_r+0x4e4>
   a7a42:	f8d9 0000 	ldr.w	r0, [r9]
   a7a46:	f8df e110 	ldr.w	lr, [pc, #272]	; a7b58 <_malloc_r+0x354>
   a7a4a:	3001      	adds	r0, #1
   a7a4c:	bf1b      	ittet	ne
   a7a4e:	ebca 0a0b 	rsbne	sl, sl, fp
   a7a52:	4451      	addne	r1, sl
   a7a54:	f8ce b000 	streq.w	fp, [lr]
   a7a58:	6019      	strne	r1, [r3, #0]
   a7a5a:	f01b 0107 	ands.w	r1, fp, #7
   a7a5e:	f000 8117 	beq.w	a7c90 <_malloc_r+0x48c>
   a7a62:	f1c1 0008 	rsb	r0, r1, #8
   a7a66:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a7a6a:	4483      	add	fp, r0
   a7a6c:	3108      	adds	r1, #8
   a7a6e:	445a      	add	r2, fp
   a7a70:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a7a74:	ebc2 0901 	rsb	r9, r2, r1
   a7a78:	4649      	mov	r1, r9
   a7a7a:	4630      	mov	r0, r6
   a7a7c:	9301      	str	r3, [sp, #4]
   a7a7e:	f000 fc05 	bl	a828c <_sbrk_r>
   a7a82:	1c43      	adds	r3, r0, #1
   a7a84:	9b01      	ldr	r3, [sp, #4]
   a7a86:	f000 813f 	beq.w	a7d08 <_malloc_r+0x504>
   a7a8a:	ebcb 0200 	rsb	r2, fp, r0
   a7a8e:	444a      	add	r2, r9
   a7a90:	f042 0201 	orr.w	r2, r2, #1
   a7a94:	6819      	ldr	r1, [r3, #0]
   a7a96:	42bc      	cmp	r4, r7
   a7a98:	4449      	add	r1, r9
   a7a9a:	f8c7 b008 	str.w	fp, [r7, #8]
   a7a9e:	6019      	str	r1, [r3, #0]
   a7aa0:	f8cb 2004 	str.w	r2, [fp, #4]
   a7aa4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; a7b4c <_malloc_r+0x348>
   a7aa8:	d016      	beq.n	a7ad8 <_malloc_r+0x2d4>
   a7aaa:	f1b8 0f0f 	cmp.w	r8, #15
   a7aae:	f240 80fd 	bls.w	a7cac <_malloc_r+0x4a8>
   a7ab2:	6862      	ldr	r2, [r4, #4]
   a7ab4:	f1a8 030c 	sub.w	r3, r8, #12
   a7ab8:	f023 0307 	bic.w	r3, r3, #7
   a7abc:	f002 0201 	and.w	r2, r2, #1
   a7ac0:	18e0      	adds	r0, r4, r3
   a7ac2:	f04f 0e05 	mov.w	lr, #5
   a7ac6:	431a      	orrs	r2, r3
   a7ac8:	2b0f      	cmp	r3, #15
   a7aca:	6062      	str	r2, [r4, #4]
   a7acc:	f8c0 e004 	str.w	lr, [r0, #4]
   a7ad0:	f8c0 e008 	str.w	lr, [r0, #8]
   a7ad4:	f200 811c 	bhi.w	a7d10 <_malloc_r+0x50c>
   a7ad8:	4b1d      	ldr	r3, [pc, #116]	; (a7b50 <_malloc_r+0x34c>)
   a7ada:	68bc      	ldr	r4, [r7, #8]
   a7adc:	681a      	ldr	r2, [r3, #0]
   a7ade:	4291      	cmp	r1, r2
   a7ae0:	bf88      	it	hi
   a7ae2:	6019      	strhi	r1, [r3, #0]
   a7ae4:	4b1b      	ldr	r3, [pc, #108]	; (a7b54 <_malloc_r+0x350>)
   a7ae6:	681a      	ldr	r2, [r3, #0]
   a7ae8:	4291      	cmp	r1, r2
   a7aea:	6862      	ldr	r2, [r4, #4]
   a7aec:	bf88      	it	hi
   a7aee:	6019      	strhi	r1, [r3, #0]
   a7af0:	f022 0203 	bic.w	r2, r2, #3
   a7af4:	4295      	cmp	r5, r2
   a7af6:	eba2 0305 	sub.w	r3, r2, r5
   a7afa:	d801      	bhi.n	a7b00 <_malloc_r+0x2fc>
   a7afc:	2b0f      	cmp	r3, #15
   a7afe:	dc04      	bgt.n	a7b0a <_malloc_r+0x306>
   a7b00:	4630      	mov	r0, r6
   a7b02:	f000 f9d7 	bl	a7eb4 <__malloc_unlock>
   a7b06:	2400      	movs	r4, #0
   a7b08:	e745      	b.n	a7996 <_malloc_r+0x192>
   a7b0a:	f045 0201 	orr.w	r2, r5, #1
   a7b0e:	f043 0301 	orr.w	r3, r3, #1
   a7b12:	4425      	add	r5, r4
   a7b14:	6062      	str	r2, [r4, #4]
   a7b16:	4630      	mov	r0, r6
   a7b18:	60bd      	str	r5, [r7, #8]
   a7b1a:	3408      	adds	r4, #8
   a7b1c:	606b      	str	r3, [r5, #4]
   a7b1e:	f000 f9c9 	bl	a7eb4 <__malloc_unlock>
   a7b22:	4620      	mov	r0, r4
   a7b24:	b003      	add	sp, #12
   a7b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7b2a:	2b14      	cmp	r3, #20
   a7b2c:	d971      	bls.n	a7c12 <_malloc_r+0x40e>
   a7b2e:	2b54      	cmp	r3, #84	; 0x54
   a7b30:	f200 80a4 	bhi.w	a7c7c <_malloc_r+0x478>
   a7b34:	0b28      	lsrs	r0, r5, #12
   a7b36:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   a7b3a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a7b3e:	306e      	adds	r0, #110	; 0x6e
   a7b40:	e682      	b.n	a7848 <_malloc_r+0x44>
   a7b42:	bf00      	nop
   a7b44:	200711e4 	.word	0x200711e4
   a7b48:	20071cd0 	.word	0x20071cd0
   a7b4c:	20071cd4 	.word	0x20071cd4
   a7b50:	20071ccc 	.word	0x20071ccc
   a7b54:	20071cc8 	.word	0x20071cc8
   a7b58:	200715f0 	.word	0x200715f0
   a7b5c:	0a5a      	lsrs	r2, r3, #9
   a7b5e:	2a04      	cmp	r2, #4
   a7b60:	d95e      	bls.n	a7c20 <_malloc_r+0x41c>
   a7b62:	2a14      	cmp	r2, #20
   a7b64:	f200 80b3 	bhi.w	a7cce <_malloc_r+0x4ca>
   a7b68:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   a7b6c:	0049      	lsls	r1, r1, #1
   a7b6e:	325b      	adds	r2, #91	; 0x5b
   a7b70:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   a7b74:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   a7b78:	f1ac 0c08 	sub.w	ip, ip, #8
   a7b7c:	458c      	cmp	ip, r1
   a7b7e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; a7d58 <_malloc_r+0x554>
   a7b82:	f000 8088 	beq.w	a7c96 <_malloc_r+0x492>
   a7b86:	684a      	ldr	r2, [r1, #4]
   a7b88:	f022 0203 	bic.w	r2, r2, #3
   a7b8c:	4293      	cmp	r3, r2
   a7b8e:	d202      	bcs.n	a7b96 <_malloc_r+0x392>
   a7b90:	6889      	ldr	r1, [r1, #8]
   a7b92:	458c      	cmp	ip, r1
   a7b94:	d1f7      	bne.n	a7b86 <_malloc_r+0x382>
   a7b96:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   a7b9a:	687a      	ldr	r2, [r7, #4]
   a7b9c:	f8c4 c00c 	str.w	ip, [r4, #12]
   a7ba0:	60a1      	str	r1, [r4, #8]
   a7ba2:	f8cc 4008 	str.w	r4, [ip, #8]
   a7ba6:	60cc      	str	r4, [r1, #12]
   a7ba8:	e696      	b.n	a78d8 <_malloc_r+0xd4>
   a7baa:	f045 0701 	orr.w	r7, r5, #1
   a7bae:	f042 0301 	orr.w	r3, r2, #1
   a7bb2:	4425      	add	r5, r4
   a7bb4:	6067      	str	r7, [r4, #4]
   a7bb6:	4630      	mov	r0, r6
   a7bb8:	614d      	str	r5, [r1, #20]
   a7bba:	610d      	str	r5, [r1, #16]
   a7bbc:	f8c5 e00c 	str.w	lr, [r5, #12]
   a7bc0:	f8c5 e008 	str.w	lr, [r5, #8]
   a7bc4:	606b      	str	r3, [r5, #4]
   a7bc6:	50aa      	str	r2, [r5, r2]
   a7bc8:	3408      	adds	r4, #8
   a7bca:	f000 f973 	bl	a7eb4 <__malloc_unlock>
   a7bce:	e6e2      	b.n	a7996 <_malloc_r+0x192>
   a7bd0:	684a      	ldr	r2, [r1, #4]
   a7bd2:	e681      	b.n	a78d8 <_malloc_r+0xd4>
   a7bd4:	f108 0801 	add.w	r8, r8, #1
   a7bd8:	f018 0f03 	tst.w	r8, #3
   a7bdc:	f10c 0c08 	add.w	ip, ip, #8
   a7be0:	f47f ae8c 	bne.w	a78fc <_malloc_r+0xf8>
   a7be4:	e030      	b.n	a7c48 <_malloc_r+0x444>
   a7be6:	68dc      	ldr	r4, [r3, #12]
   a7be8:	42a3      	cmp	r3, r4
   a7bea:	bf08      	it	eq
   a7bec:	3002      	addeq	r0, #2
   a7bee:	f43f ae40 	beq.w	a7872 <_malloc_r+0x6e>
   a7bf2:	e6c0      	b.n	a7976 <_malloc_r+0x172>
   a7bf4:	460c      	mov	r4, r1
   a7bf6:	440b      	add	r3, r1
   a7bf8:	685a      	ldr	r2, [r3, #4]
   a7bfa:	68c9      	ldr	r1, [r1, #12]
   a7bfc:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a7c00:	f042 0201 	orr.w	r2, r2, #1
   a7c04:	605a      	str	r2, [r3, #4]
   a7c06:	4630      	mov	r0, r6
   a7c08:	60e9      	str	r1, [r5, #12]
   a7c0a:	608d      	str	r5, [r1, #8]
   a7c0c:	f000 f952 	bl	a7eb4 <__malloc_unlock>
   a7c10:	e6c1      	b.n	a7996 <_malloc_r+0x192>
   a7c12:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   a7c16:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   a7c1a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a7c1e:	e613      	b.n	a7848 <_malloc_r+0x44>
   a7c20:	099a      	lsrs	r2, r3, #6
   a7c22:	f102 0139 	add.w	r1, r2, #57	; 0x39
   a7c26:	0049      	lsls	r1, r1, #1
   a7c28:	3238      	adds	r2, #56	; 0x38
   a7c2a:	e7a1      	b.n	a7b70 <_malloc_r+0x36c>
   a7c2c:	42bc      	cmp	r4, r7
   a7c2e:	4b4a      	ldr	r3, [pc, #296]	; (a7d58 <_malloc_r+0x554>)
   a7c30:	f43f af00 	beq.w	a7a34 <_malloc_r+0x230>
   a7c34:	689c      	ldr	r4, [r3, #8]
   a7c36:	6862      	ldr	r2, [r4, #4]
   a7c38:	f022 0203 	bic.w	r2, r2, #3
   a7c3c:	e75a      	b.n	a7af4 <_malloc_r+0x2f0>
   a7c3e:	f859 3908 	ldr.w	r3, [r9], #-8
   a7c42:	4599      	cmp	r9, r3
   a7c44:	f040 8082 	bne.w	a7d4c <_malloc_r+0x548>
   a7c48:	f010 0f03 	tst.w	r0, #3
   a7c4c:	f100 30ff 	add.w	r0, r0, #4294967295
   a7c50:	d1f5      	bne.n	a7c3e <_malloc_r+0x43a>
   a7c52:	687b      	ldr	r3, [r7, #4]
   a7c54:	ea23 0304 	bic.w	r3, r3, r4
   a7c58:	607b      	str	r3, [r7, #4]
   a7c5a:	0064      	lsls	r4, r4, #1
   a7c5c:	429c      	cmp	r4, r3
   a7c5e:	f63f aebd 	bhi.w	a79dc <_malloc_r+0x1d8>
   a7c62:	2c00      	cmp	r4, #0
   a7c64:	f43f aeba 	beq.w	a79dc <_malloc_r+0x1d8>
   a7c68:	421c      	tst	r4, r3
   a7c6a:	4640      	mov	r0, r8
   a7c6c:	f47f ae42 	bne.w	a78f4 <_malloc_r+0xf0>
   a7c70:	0064      	lsls	r4, r4, #1
   a7c72:	421c      	tst	r4, r3
   a7c74:	f100 0004 	add.w	r0, r0, #4
   a7c78:	d0fa      	beq.n	a7c70 <_malloc_r+0x46c>
   a7c7a:	e63b      	b.n	a78f4 <_malloc_r+0xf0>
   a7c7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a7c80:	d818      	bhi.n	a7cb4 <_malloc_r+0x4b0>
   a7c82:	0be8      	lsrs	r0, r5, #15
   a7c84:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   a7c88:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a7c8c:	3077      	adds	r0, #119	; 0x77
   a7c8e:	e5db      	b.n	a7848 <_malloc_r+0x44>
   a7c90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a7c94:	e6eb      	b.n	a7a6e <_malloc_r+0x26a>
   a7c96:	2101      	movs	r1, #1
   a7c98:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a7c9c:	1092      	asrs	r2, r2, #2
   a7c9e:	fa01 f202 	lsl.w	r2, r1, r2
   a7ca2:	431a      	orrs	r2, r3
   a7ca4:	f8c8 2004 	str.w	r2, [r8, #4]
   a7ca8:	4661      	mov	r1, ip
   a7caa:	e777      	b.n	a7b9c <_malloc_r+0x398>
   a7cac:	2301      	movs	r3, #1
   a7cae:	f8cb 3004 	str.w	r3, [fp, #4]
   a7cb2:	e725      	b.n	a7b00 <_malloc_r+0x2fc>
   a7cb4:	f240 5254 	movw	r2, #1364	; 0x554
   a7cb8:	4293      	cmp	r3, r2
   a7cba:	d820      	bhi.n	a7cfe <_malloc_r+0x4fa>
   a7cbc:	0ca8      	lsrs	r0, r5, #18
   a7cbe:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   a7cc2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   a7cc6:	307c      	adds	r0, #124	; 0x7c
   a7cc8:	e5be      	b.n	a7848 <_malloc_r+0x44>
   a7cca:	3210      	adds	r2, #16
   a7ccc:	e6a4      	b.n	a7a18 <_malloc_r+0x214>
   a7cce:	2a54      	cmp	r2, #84	; 0x54
   a7cd0:	d826      	bhi.n	a7d20 <_malloc_r+0x51c>
   a7cd2:	0b1a      	lsrs	r2, r3, #12
   a7cd4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   a7cd8:	0049      	lsls	r1, r1, #1
   a7cda:	326e      	adds	r2, #110	; 0x6e
   a7cdc:	e748      	b.n	a7b70 <_malloc_r+0x36c>
   a7cde:	68bc      	ldr	r4, [r7, #8]
   a7ce0:	6862      	ldr	r2, [r4, #4]
   a7ce2:	f022 0203 	bic.w	r2, r2, #3
   a7ce6:	e705      	b.n	a7af4 <_malloc_r+0x2f0>
   a7ce8:	f3ca 000b 	ubfx	r0, sl, #0, #12
   a7cec:	2800      	cmp	r0, #0
   a7cee:	f47f aea8 	bne.w	a7a42 <_malloc_r+0x23e>
   a7cf2:	4442      	add	r2, r8
   a7cf4:	68bb      	ldr	r3, [r7, #8]
   a7cf6:	f042 0201 	orr.w	r2, r2, #1
   a7cfa:	605a      	str	r2, [r3, #4]
   a7cfc:	e6ec      	b.n	a7ad8 <_malloc_r+0x2d4>
   a7cfe:	21fe      	movs	r1, #254	; 0xfe
   a7d00:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   a7d04:	207e      	movs	r0, #126	; 0x7e
   a7d06:	e59f      	b.n	a7848 <_malloc_r+0x44>
   a7d08:	2201      	movs	r2, #1
   a7d0a:	f04f 0900 	mov.w	r9, #0
   a7d0e:	e6c1      	b.n	a7a94 <_malloc_r+0x290>
   a7d10:	f104 0108 	add.w	r1, r4, #8
   a7d14:	4630      	mov	r0, r6
   a7d16:	f7ff fa65 	bl	a71e4 <_free_r>
   a7d1a:	f8d9 1000 	ldr.w	r1, [r9]
   a7d1e:	e6db      	b.n	a7ad8 <_malloc_r+0x2d4>
   a7d20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a7d24:	d805      	bhi.n	a7d32 <_malloc_r+0x52e>
   a7d26:	0bda      	lsrs	r2, r3, #15
   a7d28:	f102 0178 	add.w	r1, r2, #120	; 0x78
   a7d2c:	0049      	lsls	r1, r1, #1
   a7d2e:	3277      	adds	r2, #119	; 0x77
   a7d30:	e71e      	b.n	a7b70 <_malloc_r+0x36c>
   a7d32:	f240 5154 	movw	r1, #1364	; 0x554
   a7d36:	428a      	cmp	r2, r1
   a7d38:	d805      	bhi.n	a7d46 <_malloc_r+0x542>
   a7d3a:	0c9a      	lsrs	r2, r3, #18
   a7d3c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   a7d40:	0049      	lsls	r1, r1, #1
   a7d42:	327c      	adds	r2, #124	; 0x7c
   a7d44:	e714      	b.n	a7b70 <_malloc_r+0x36c>
   a7d46:	21fe      	movs	r1, #254	; 0xfe
   a7d48:	227e      	movs	r2, #126	; 0x7e
   a7d4a:	e711      	b.n	a7b70 <_malloc_r+0x36c>
   a7d4c:	687b      	ldr	r3, [r7, #4]
   a7d4e:	e784      	b.n	a7c5a <_malloc_r+0x456>
   a7d50:	08e8      	lsrs	r0, r5, #3
   a7d52:	1c43      	adds	r3, r0, #1
   a7d54:	005b      	lsls	r3, r3, #1
   a7d56:	e605      	b.n	a7964 <_malloc_r+0x160>
   a7d58:	200711e4 	.word	0x200711e4

000a7d5c <memchr>:
   a7d5c:	0783      	lsls	r3, r0, #30
   a7d5e:	b470      	push	{r4, r5, r6}
   a7d60:	b2cd      	uxtb	r5, r1
   a7d62:	d03d      	beq.n	a7de0 <memchr+0x84>
   a7d64:	1e53      	subs	r3, r2, #1
   a7d66:	b302      	cbz	r2, a7daa <memchr+0x4e>
   a7d68:	7802      	ldrb	r2, [r0, #0]
   a7d6a:	42aa      	cmp	r2, r5
   a7d6c:	d01e      	beq.n	a7dac <memchr+0x50>
   a7d6e:	1c42      	adds	r2, r0, #1
   a7d70:	e004      	b.n	a7d7c <memchr+0x20>
   a7d72:	b1d3      	cbz	r3, a7daa <memchr+0x4e>
   a7d74:	7804      	ldrb	r4, [r0, #0]
   a7d76:	3b01      	subs	r3, #1
   a7d78:	42ac      	cmp	r4, r5
   a7d7a:	d017      	beq.n	a7dac <memchr+0x50>
   a7d7c:	f012 0f03 	tst.w	r2, #3
   a7d80:	4610      	mov	r0, r2
   a7d82:	f102 0201 	add.w	r2, r2, #1
   a7d86:	d1f4      	bne.n	a7d72 <memchr+0x16>
   a7d88:	2b03      	cmp	r3, #3
   a7d8a:	d811      	bhi.n	a7db0 <memchr+0x54>
   a7d8c:	b353      	cbz	r3, a7de4 <memchr+0x88>
   a7d8e:	7802      	ldrb	r2, [r0, #0]
   a7d90:	42aa      	cmp	r2, r5
   a7d92:	d00b      	beq.n	a7dac <memchr+0x50>
   a7d94:	4403      	add	r3, r0
   a7d96:	1c42      	adds	r2, r0, #1
   a7d98:	e002      	b.n	a7da0 <memchr+0x44>
   a7d9a:	7801      	ldrb	r1, [r0, #0]
   a7d9c:	42a9      	cmp	r1, r5
   a7d9e:	d005      	beq.n	a7dac <memchr+0x50>
   a7da0:	4293      	cmp	r3, r2
   a7da2:	4610      	mov	r0, r2
   a7da4:	f102 0201 	add.w	r2, r2, #1
   a7da8:	d1f7      	bne.n	a7d9a <memchr+0x3e>
   a7daa:	2000      	movs	r0, #0
   a7dac:	bc70      	pop	{r4, r5, r6}
   a7dae:	4770      	bx	lr
   a7db0:	4604      	mov	r4, r0
   a7db2:	020e      	lsls	r6, r1, #8
   a7db4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   a7db8:	432e      	orrs	r6, r5
   a7dba:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a7dbe:	6822      	ldr	r2, [r4, #0]
   a7dc0:	4620      	mov	r0, r4
   a7dc2:	4072      	eors	r2, r6
   a7dc4:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   a7dc8:	ea21 0202 	bic.w	r2, r1, r2
   a7dcc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   a7dd0:	f104 0404 	add.w	r4, r4, #4
   a7dd4:	d1db      	bne.n	a7d8e <memchr+0x32>
   a7dd6:	3b04      	subs	r3, #4
   a7dd8:	2b03      	cmp	r3, #3
   a7dda:	4620      	mov	r0, r4
   a7ddc:	d8ef      	bhi.n	a7dbe <memchr+0x62>
   a7dde:	e7d5      	b.n	a7d8c <memchr+0x30>
   a7de0:	4613      	mov	r3, r2
   a7de2:	e7d1      	b.n	a7d88 <memchr+0x2c>
   a7de4:	4618      	mov	r0, r3
   a7de6:	e7e1      	b.n	a7dac <memchr+0x50>

000a7de8 <memmove>:
   a7de8:	4288      	cmp	r0, r1
   a7dea:	b5f0      	push	{r4, r5, r6, r7, lr}
   a7dec:	d90d      	bls.n	a7e0a <memmove+0x22>
   a7dee:	188b      	adds	r3, r1, r2
   a7df0:	4298      	cmp	r0, r3
   a7df2:	d20a      	bcs.n	a7e0a <memmove+0x22>
   a7df4:	1881      	adds	r1, r0, r2
   a7df6:	2a00      	cmp	r2, #0
   a7df8:	d051      	beq.n	a7e9e <memmove+0xb6>
   a7dfa:	1a9a      	subs	r2, r3, r2
   a7dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a7e00:	4293      	cmp	r3, r2
   a7e02:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a7e06:	d1f9      	bne.n	a7dfc <memmove+0x14>
   a7e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a7e0a:	2a0f      	cmp	r2, #15
   a7e0c:	d948      	bls.n	a7ea0 <memmove+0xb8>
   a7e0e:	ea41 0300 	orr.w	r3, r1, r0
   a7e12:	079b      	lsls	r3, r3, #30
   a7e14:	d146      	bne.n	a7ea4 <memmove+0xbc>
   a7e16:	4615      	mov	r5, r2
   a7e18:	f100 0410 	add.w	r4, r0, #16
   a7e1c:	f101 0310 	add.w	r3, r1, #16
   a7e20:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a7e24:	3d10      	subs	r5, #16
   a7e26:	f844 6c10 	str.w	r6, [r4, #-16]
   a7e2a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a7e2e:	2d0f      	cmp	r5, #15
   a7e30:	f844 6c0c 	str.w	r6, [r4, #-12]
   a7e34:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a7e38:	f104 0410 	add.w	r4, r4, #16
   a7e3c:	f844 6c18 	str.w	r6, [r4, #-24]
   a7e40:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a7e44:	f103 0310 	add.w	r3, r3, #16
   a7e48:	f844 6c14 	str.w	r6, [r4, #-20]
   a7e4c:	d8e8      	bhi.n	a7e20 <memmove+0x38>
   a7e4e:	f1a2 0310 	sub.w	r3, r2, #16
   a7e52:	f023 030f 	bic.w	r3, r3, #15
   a7e56:	f002 0e0f 	and.w	lr, r2, #15
   a7e5a:	3310      	adds	r3, #16
   a7e5c:	f1be 0f03 	cmp.w	lr, #3
   a7e60:	4419      	add	r1, r3
   a7e62:	4403      	add	r3, r0
   a7e64:	d921      	bls.n	a7eaa <memmove+0xc2>
   a7e66:	460e      	mov	r6, r1
   a7e68:	4674      	mov	r4, lr
   a7e6a:	1f1d      	subs	r5, r3, #4
   a7e6c:	f856 7b04 	ldr.w	r7, [r6], #4
   a7e70:	3c04      	subs	r4, #4
   a7e72:	2c03      	cmp	r4, #3
   a7e74:	f845 7f04 	str.w	r7, [r5, #4]!
   a7e78:	d8f8      	bhi.n	a7e6c <memmove+0x84>
   a7e7a:	f1ae 0404 	sub.w	r4, lr, #4
   a7e7e:	f024 0403 	bic.w	r4, r4, #3
   a7e82:	3404      	adds	r4, #4
   a7e84:	4423      	add	r3, r4
   a7e86:	4421      	add	r1, r4
   a7e88:	f002 0203 	and.w	r2, r2, #3
   a7e8c:	b162      	cbz	r2, a7ea8 <memmove+0xc0>
   a7e8e:	3b01      	subs	r3, #1
   a7e90:	440a      	add	r2, r1
   a7e92:	f811 4b01 	ldrb.w	r4, [r1], #1
   a7e96:	428a      	cmp	r2, r1
   a7e98:	f803 4f01 	strb.w	r4, [r3, #1]!
   a7e9c:	d1f9      	bne.n	a7e92 <memmove+0xaa>
   a7e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a7ea0:	4603      	mov	r3, r0
   a7ea2:	e7f3      	b.n	a7e8c <memmove+0xa4>
   a7ea4:	4603      	mov	r3, r0
   a7ea6:	e7f2      	b.n	a7e8e <memmove+0xa6>
   a7ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a7eaa:	4672      	mov	r2, lr
   a7eac:	e7ee      	b.n	a7e8c <memmove+0xa4>
   a7eae:	bf00      	nop

000a7eb0 <__malloc_lock>:
   a7eb0:	4770      	bx	lr
   a7eb2:	bf00      	nop

000a7eb4 <__malloc_unlock>:
   a7eb4:	4770      	bx	lr
   a7eb6:	bf00      	nop

000a7eb8 <_realloc_r>:
   a7eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7ebc:	4617      	mov	r7, r2
   a7ebe:	b083      	sub	sp, #12
   a7ec0:	2900      	cmp	r1, #0
   a7ec2:	f000 808f 	beq.w	a7fe4 <_realloc_r+0x12c>
   a7ec6:	460d      	mov	r5, r1
   a7ec8:	4681      	mov	r9, r0
   a7eca:	f107 040b 	add.w	r4, r7, #11
   a7ece:	f7ff ffef 	bl	a7eb0 <__malloc_lock>
   a7ed2:	f855 ec04 	ldr.w	lr, [r5, #-4]
   a7ed6:	2c16      	cmp	r4, #22
   a7ed8:	f02e 0603 	bic.w	r6, lr, #3
   a7edc:	f1a5 0808 	sub.w	r8, r5, #8
   a7ee0:	d83c      	bhi.n	a7f5c <_realloc_r+0xa4>
   a7ee2:	2210      	movs	r2, #16
   a7ee4:	4614      	mov	r4, r2
   a7ee6:	42a7      	cmp	r7, r4
   a7ee8:	d83d      	bhi.n	a7f66 <_realloc_r+0xae>
   a7eea:	4296      	cmp	r6, r2
   a7eec:	da42      	bge.n	a7f74 <_realloc_r+0xbc>
   a7eee:	4bc6      	ldr	r3, [pc, #792]	; (a8208 <_realloc_r+0x350>)
   a7ef0:	eb08 0006 	add.w	r0, r8, r6
   a7ef4:	6899      	ldr	r1, [r3, #8]
   a7ef6:	4288      	cmp	r0, r1
   a7ef8:	6841      	ldr	r1, [r0, #4]
   a7efa:	f000 80d7 	beq.w	a80ac <_realloc_r+0x1f4>
   a7efe:	f021 0301 	bic.w	r3, r1, #1
   a7f02:	4403      	add	r3, r0
   a7f04:	685b      	ldr	r3, [r3, #4]
   a7f06:	07db      	lsls	r3, r3, #31
   a7f08:	d54c      	bpl.n	a7fa4 <_realloc_r+0xec>
   a7f0a:	f01e 0f01 	tst.w	lr, #1
   a7f0e:	f000 809d 	beq.w	a804c <_realloc_r+0x194>
   a7f12:	4639      	mov	r1, r7
   a7f14:	4648      	mov	r0, r9
   a7f16:	f7ff fc75 	bl	a7804 <_malloc_r>
   a7f1a:	4607      	mov	r7, r0
   a7f1c:	2800      	cmp	r0, #0
   a7f1e:	d03a      	beq.n	a7f96 <_realloc_r+0xde>
   a7f20:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a7f24:	f1a0 0208 	sub.w	r2, r0, #8
   a7f28:	f023 0301 	bic.w	r3, r3, #1
   a7f2c:	4443      	add	r3, r8
   a7f2e:	429a      	cmp	r2, r3
   a7f30:	f000 813e 	beq.w	a81b0 <_realloc_r+0x2f8>
   a7f34:	1f32      	subs	r2, r6, #4
   a7f36:	2a24      	cmp	r2, #36	; 0x24
   a7f38:	f200 812b 	bhi.w	a8192 <_realloc_r+0x2da>
   a7f3c:	2a13      	cmp	r2, #19
   a7f3e:	f200 80ff 	bhi.w	a8140 <_realloc_r+0x288>
   a7f42:	4603      	mov	r3, r0
   a7f44:	462a      	mov	r2, r5
   a7f46:	6811      	ldr	r1, [r2, #0]
   a7f48:	6019      	str	r1, [r3, #0]
   a7f4a:	6851      	ldr	r1, [r2, #4]
   a7f4c:	6059      	str	r1, [r3, #4]
   a7f4e:	6892      	ldr	r2, [r2, #8]
   a7f50:	609a      	str	r2, [r3, #8]
   a7f52:	4629      	mov	r1, r5
   a7f54:	4648      	mov	r0, r9
   a7f56:	f7ff f945 	bl	a71e4 <_free_r>
   a7f5a:	e01c      	b.n	a7f96 <_realloc_r+0xde>
   a7f5c:	f024 0407 	bic.w	r4, r4, #7
   a7f60:	2c00      	cmp	r4, #0
   a7f62:	4622      	mov	r2, r4
   a7f64:	dabf      	bge.n	a7ee6 <_realloc_r+0x2e>
   a7f66:	230c      	movs	r3, #12
   a7f68:	2000      	movs	r0, #0
   a7f6a:	f8c9 3000 	str.w	r3, [r9]
   a7f6e:	b003      	add	sp, #12
   a7f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7f74:	462f      	mov	r7, r5
   a7f76:	1b33      	subs	r3, r6, r4
   a7f78:	2b0f      	cmp	r3, #15
   a7f7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   a7f7e:	d81d      	bhi.n	a7fbc <_realloc_r+0x104>
   a7f80:	f002 0201 	and.w	r2, r2, #1
   a7f84:	4332      	orrs	r2, r6
   a7f86:	eb08 0106 	add.w	r1, r8, r6
   a7f8a:	f8c8 2004 	str.w	r2, [r8, #4]
   a7f8e:	684b      	ldr	r3, [r1, #4]
   a7f90:	f043 0301 	orr.w	r3, r3, #1
   a7f94:	604b      	str	r3, [r1, #4]
   a7f96:	4648      	mov	r0, r9
   a7f98:	f7ff ff8c 	bl	a7eb4 <__malloc_unlock>
   a7f9c:	4638      	mov	r0, r7
   a7f9e:	b003      	add	sp, #12
   a7fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7fa4:	f021 0103 	bic.w	r1, r1, #3
   a7fa8:	4431      	add	r1, r6
   a7faa:	4291      	cmp	r1, r2
   a7fac:	db20      	blt.n	a7ff0 <_realloc_r+0x138>
   a7fae:	68c3      	ldr	r3, [r0, #12]
   a7fb0:	6882      	ldr	r2, [r0, #8]
   a7fb2:	462f      	mov	r7, r5
   a7fb4:	60d3      	str	r3, [r2, #12]
   a7fb6:	460e      	mov	r6, r1
   a7fb8:	609a      	str	r2, [r3, #8]
   a7fba:	e7dc      	b.n	a7f76 <_realloc_r+0xbe>
   a7fbc:	f002 0201 	and.w	r2, r2, #1
   a7fc0:	eb08 0104 	add.w	r1, r8, r4
   a7fc4:	4314      	orrs	r4, r2
   a7fc6:	f043 0201 	orr.w	r2, r3, #1
   a7fca:	f8c8 4004 	str.w	r4, [r8, #4]
   a7fce:	440b      	add	r3, r1
   a7fd0:	604a      	str	r2, [r1, #4]
   a7fd2:	685a      	ldr	r2, [r3, #4]
   a7fd4:	3108      	adds	r1, #8
   a7fd6:	f042 0201 	orr.w	r2, r2, #1
   a7fda:	605a      	str	r2, [r3, #4]
   a7fdc:	4648      	mov	r0, r9
   a7fde:	f7ff f901 	bl	a71e4 <_free_r>
   a7fe2:	e7d8      	b.n	a7f96 <_realloc_r+0xde>
   a7fe4:	4611      	mov	r1, r2
   a7fe6:	b003      	add	sp, #12
   a7fe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7fec:	f7ff bc0a 	b.w	a7804 <_malloc_r>
   a7ff0:	f01e 0f01 	tst.w	lr, #1
   a7ff4:	d18d      	bne.n	a7f12 <_realloc_r+0x5a>
   a7ff6:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a7ffa:	ebc3 0a08 	rsb	sl, r3, r8
   a7ffe:	f8da 3004 	ldr.w	r3, [sl, #4]
   a8002:	f023 0c03 	bic.w	ip, r3, #3
   a8006:	eb01 0e0c 	add.w	lr, r1, ip
   a800a:	4596      	cmp	lr, r2
   a800c:	db26      	blt.n	a805c <_realloc_r+0x1a4>
   a800e:	4657      	mov	r7, sl
   a8010:	68c3      	ldr	r3, [r0, #12]
   a8012:	6881      	ldr	r1, [r0, #8]
   a8014:	1f32      	subs	r2, r6, #4
   a8016:	60cb      	str	r3, [r1, #12]
   a8018:	6099      	str	r1, [r3, #8]
   a801a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a801e:	f8da 300c 	ldr.w	r3, [sl, #12]
   a8022:	2a24      	cmp	r2, #36	; 0x24
   a8024:	60cb      	str	r3, [r1, #12]
   a8026:	6099      	str	r1, [r3, #8]
   a8028:	f200 80c9 	bhi.w	a81be <_realloc_r+0x306>
   a802c:	2a13      	cmp	r2, #19
   a802e:	f240 8092 	bls.w	a8156 <_realloc_r+0x29e>
   a8032:	682b      	ldr	r3, [r5, #0]
   a8034:	2a1b      	cmp	r2, #27
   a8036:	f8ca 3008 	str.w	r3, [sl, #8]
   a803a:	686b      	ldr	r3, [r5, #4]
   a803c:	f8ca 300c 	str.w	r3, [sl, #12]
   a8040:	f200 80cd 	bhi.w	a81de <_realloc_r+0x326>
   a8044:	3508      	adds	r5, #8
   a8046:	f10a 0310 	add.w	r3, sl, #16
   a804a:	e085      	b.n	a8158 <_realloc_r+0x2a0>
   a804c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a8050:	ebc3 0a08 	rsb	sl, r3, r8
   a8054:	f8da 3004 	ldr.w	r3, [sl, #4]
   a8058:	f023 0c03 	bic.w	ip, r3, #3
   a805c:	eb06 030c 	add.w	r3, r6, ip
   a8060:	4293      	cmp	r3, r2
   a8062:	f6ff af56 	blt.w	a7f12 <_realloc_r+0x5a>
   a8066:	4657      	mov	r7, sl
   a8068:	f8da 100c 	ldr.w	r1, [sl, #12]
   a806c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a8070:	1f32      	subs	r2, r6, #4
   a8072:	2a24      	cmp	r2, #36	; 0x24
   a8074:	60c1      	str	r1, [r0, #12]
   a8076:	6088      	str	r0, [r1, #8]
   a8078:	f200 80aa 	bhi.w	a81d0 <_realloc_r+0x318>
   a807c:	2a13      	cmp	r2, #19
   a807e:	f240 80a5 	bls.w	a81cc <_realloc_r+0x314>
   a8082:	6829      	ldr	r1, [r5, #0]
   a8084:	2a1b      	cmp	r2, #27
   a8086:	f8ca 1008 	str.w	r1, [sl, #8]
   a808a:	6869      	ldr	r1, [r5, #4]
   a808c:	f8ca 100c 	str.w	r1, [sl, #12]
   a8090:	f200 80bc 	bhi.w	a820c <_realloc_r+0x354>
   a8094:	3508      	adds	r5, #8
   a8096:	f10a 0210 	add.w	r2, sl, #16
   a809a:	6829      	ldr	r1, [r5, #0]
   a809c:	461e      	mov	r6, r3
   a809e:	6011      	str	r1, [r2, #0]
   a80a0:	6869      	ldr	r1, [r5, #4]
   a80a2:	46d0      	mov	r8, sl
   a80a4:	6051      	str	r1, [r2, #4]
   a80a6:	68ab      	ldr	r3, [r5, #8]
   a80a8:	6093      	str	r3, [r2, #8]
   a80aa:	e764      	b.n	a7f76 <_realloc_r+0xbe>
   a80ac:	f021 0b03 	bic.w	fp, r1, #3
   a80b0:	f104 0010 	add.w	r0, r4, #16
   a80b4:	44b3      	add	fp, r6
   a80b6:	4583      	cmp	fp, r0
   a80b8:	da57      	bge.n	a816a <_realloc_r+0x2b2>
   a80ba:	f01e 0f01 	tst.w	lr, #1
   a80be:	f47f af28 	bne.w	a7f12 <_realloc_r+0x5a>
   a80c2:	f855 1c08 	ldr.w	r1, [r5, #-8]
   a80c6:	ebc1 0a08 	rsb	sl, r1, r8
   a80ca:	f8da 1004 	ldr.w	r1, [sl, #4]
   a80ce:	f021 0c03 	bic.w	ip, r1, #3
   a80d2:	44e3      	add	fp, ip
   a80d4:	4558      	cmp	r0, fp
   a80d6:	dcc1      	bgt.n	a805c <_realloc_r+0x1a4>
   a80d8:	4657      	mov	r7, sl
   a80da:	f8da 100c 	ldr.w	r1, [sl, #12]
   a80de:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a80e2:	1f32      	subs	r2, r6, #4
   a80e4:	2a24      	cmp	r2, #36	; 0x24
   a80e6:	60c1      	str	r1, [r0, #12]
   a80e8:	6088      	str	r0, [r1, #8]
   a80ea:	f200 80b1 	bhi.w	a8250 <_realloc_r+0x398>
   a80ee:	2a13      	cmp	r2, #19
   a80f0:	f240 80a2 	bls.w	a8238 <_realloc_r+0x380>
   a80f4:	6829      	ldr	r1, [r5, #0]
   a80f6:	2a1b      	cmp	r2, #27
   a80f8:	f8ca 1008 	str.w	r1, [sl, #8]
   a80fc:	6869      	ldr	r1, [r5, #4]
   a80fe:	f8ca 100c 	str.w	r1, [sl, #12]
   a8102:	f200 80ac 	bhi.w	a825e <_realloc_r+0x3a6>
   a8106:	3508      	adds	r5, #8
   a8108:	f10a 0210 	add.w	r2, sl, #16
   a810c:	6829      	ldr	r1, [r5, #0]
   a810e:	6011      	str	r1, [r2, #0]
   a8110:	6869      	ldr	r1, [r5, #4]
   a8112:	6051      	str	r1, [r2, #4]
   a8114:	68a9      	ldr	r1, [r5, #8]
   a8116:	6091      	str	r1, [r2, #8]
   a8118:	ebc4 020b 	rsb	r2, r4, fp
   a811c:	eb0a 0104 	add.w	r1, sl, r4
   a8120:	f042 0201 	orr.w	r2, r2, #1
   a8124:	6099      	str	r1, [r3, #8]
   a8126:	604a      	str	r2, [r1, #4]
   a8128:	f8da 3004 	ldr.w	r3, [sl, #4]
   a812c:	4648      	mov	r0, r9
   a812e:	f003 0301 	and.w	r3, r3, #1
   a8132:	431c      	orrs	r4, r3
   a8134:	f8ca 4004 	str.w	r4, [sl, #4]
   a8138:	f7ff febc 	bl	a7eb4 <__malloc_unlock>
   a813c:	4638      	mov	r0, r7
   a813e:	e72e      	b.n	a7f9e <_realloc_r+0xe6>
   a8140:	682b      	ldr	r3, [r5, #0]
   a8142:	2a1b      	cmp	r2, #27
   a8144:	6003      	str	r3, [r0, #0]
   a8146:	686b      	ldr	r3, [r5, #4]
   a8148:	6043      	str	r3, [r0, #4]
   a814a:	d826      	bhi.n	a819a <_realloc_r+0x2e2>
   a814c:	f100 0308 	add.w	r3, r0, #8
   a8150:	f105 0208 	add.w	r2, r5, #8
   a8154:	e6f7      	b.n	a7f46 <_realloc_r+0x8e>
   a8156:	463b      	mov	r3, r7
   a8158:	682a      	ldr	r2, [r5, #0]
   a815a:	4676      	mov	r6, lr
   a815c:	601a      	str	r2, [r3, #0]
   a815e:	686a      	ldr	r2, [r5, #4]
   a8160:	46d0      	mov	r8, sl
   a8162:	605a      	str	r2, [r3, #4]
   a8164:	68aa      	ldr	r2, [r5, #8]
   a8166:	609a      	str	r2, [r3, #8]
   a8168:	e705      	b.n	a7f76 <_realloc_r+0xbe>
   a816a:	ebc4 0b0b 	rsb	fp, r4, fp
   a816e:	eb08 0104 	add.w	r1, r8, r4
   a8172:	f04b 0201 	orr.w	r2, fp, #1
   a8176:	6099      	str	r1, [r3, #8]
   a8178:	604a      	str	r2, [r1, #4]
   a817a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a817e:	4648      	mov	r0, r9
   a8180:	f003 0301 	and.w	r3, r3, #1
   a8184:	431c      	orrs	r4, r3
   a8186:	f845 4c04 	str.w	r4, [r5, #-4]
   a818a:	f7ff fe93 	bl	a7eb4 <__malloc_unlock>
   a818e:	4628      	mov	r0, r5
   a8190:	e705      	b.n	a7f9e <_realloc_r+0xe6>
   a8192:	4629      	mov	r1, r5
   a8194:	f7ff fe28 	bl	a7de8 <memmove>
   a8198:	e6db      	b.n	a7f52 <_realloc_r+0x9a>
   a819a:	68ab      	ldr	r3, [r5, #8]
   a819c:	2a24      	cmp	r2, #36	; 0x24
   a819e:	6083      	str	r3, [r0, #8]
   a81a0:	68eb      	ldr	r3, [r5, #12]
   a81a2:	60c3      	str	r3, [r0, #12]
   a81a4:	d027      	beq.n	a81f6 <_realloc_r+0x33e>
   a81a6:	f100 0310 	add.w	r3, r0, #16
   a81aa:	f105 0210 	add.w	r2, r5, #16
   a81ae:	e6ca      	b.n	a7f46 <_realloc_r+0x8e>
   a81b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   a81b4:	462f      	mov	r7, r5
   a81b6:	f023 0303 	bic.w	r3, r3, #3
   a81ba:	441e      	add	r6, r3
   a81bc:	e6db      	b.n	a7f76 <_realloc_r+0xbe>
   a81be:	4629      	mov	r1, r5
   a81c0:	4638      	mov	r0, r7
   a81c2:	4676      	mov	r6, lr
   a81c4:	46d0      	mov	r8, sl
   a81c6:	f7ff fe0f 	bl	a7de8 <memmove>
   a81ca:	e6d4      	b.n	a7f76 <_realloc_r+0xbe>
   a81cc:	463a      	mov	r2, r7
   a81ce:	e764      	b.n	a809a <_realloc_r+0x1e2>
   a81d0:	4629      	mov	r1, r5
   a81d2:	4638      	mov	r0, r7
   a81d4:	461e      	mov	r6, r3
   a81d6:	46d0      	mov	r8, sl
   a81d8:	f7ff fe06 	bl	a7de8 <memmove>
   a81dc:	e6cb      	b.n	a7f76 <_realloc_r+0xbe>
   a81de:	68ab      	ldr	r3, [r5, #8]
   a81e0:	2a24      	cmp	r2, #36	; 0x24
   a81e2:	f8ca 3010 	str.w	r3, [sl, #16]
   a81e6:	68eb      	ldr	r3, [r5, #12]
   a81e8:	f8ca 3014 	str.w	r3, [sl, #20]
   a81ec:	d01a      	beq.n	a8224 <_realloc_r+0x36c>
   a81ee:	3510      	adds	r5, #16
   a81f0:	f10a 0318 	add.w	r3, sl, #24
   a81f4:	e7b0      	b.n	a8158 <_realloc_r+0x2a0>
   a81f6:	692a      	ldr	r2, [r5, #16]
   a81f8:	f100 0318 	add.w	r3, r0, #24
   a81fc:	6102      	str	r2, [r0, #16]
   a81fe:	6969      	ldr	r1, [r5, #20]
   a8200:	f105 0218 	add.w	r2, r5, #24
   a8204:	6141      	str	r1, [r0, #20]
   a8206:	e69e      	b.n	a7f46 <_realloc_r+0x8e>
   a8208:	200711e4 	.word	0x200711e4
   a820c:	68a9      	ldr	r1, [r5, #8]
   a820e:	2a24      	cmp	r2, #36	; 0x24
   a8210:	f8ca 1010 	str.w	r1, [sl, #16]
   a8214:	68e9      	ldr	r1, [r5, #12]
   a8216:	f8ca 1014 	str.w	r1, [sl, #20]
   a821a:	d00f      	beq.n	a823c <_realloc_r+0x384>
   a821c:	3510      	adds	r5, #16
   a821e:	f10a 0218 	add.w	r2, sl, #24
   a8222:	e73a      	b.n	a809a <_realloc_r+0x1e2>
   a8224:	692a      	ldr	r2, [r5, #16]
   a8226:	f10a 0320 	add.w	r3, sl, #32
   a822a:	f8ca 2018 	str.w	r2, [sl, #24]
   a822e:	696a      	ldr	r2, [r5, #20]
   a8230:	3518      	adds	r5, #24
   a8232:	f8ca 201c 	str.w	r2, [sl, #28]
   a8236:	e78f      	b.n	a8158 <_realloc_r+0x2a0>
   a8238:	463a      	mov	r2, r7
   a823a:	e767      	b.n	a810c <_realloc_r+0x254>
   a823c:	6929      	ldr	r1, [r5, #16]
   a823e:	f10a 0220 	add.w	r2, sl, #32
   a8242:	f8ca 1018 	str.w	r1, [sl, #24]
   a8246:	6969      	ldr	r1, [r5, #20]
   a8248:	3518      	adds	r5, #24
   a824a:	f8ca 101c 	str.w	r1, [sl, #28]
   a824e:	e724      	b.n	a809a <_realloc_r+0x1e2>
   a8250:	4629      	mov	r1, r5
   a8252:	4638      	mov	r0, r7
   a8254:	9301      	str	r3, [sp, #4]
   a8256:	f7ff fdc7 	bl	a7de8 <memmove>
   a825a:	9b01      	ldr	r3, [sp, #4]
   a825c:	e75c      	b.n	a8118 <_realloc_r+0x260>
   a825e:	68a9      	ldr	r1, [r5, #8]
   a8260:	2a24      	cmp	r2, #36	; 0x24
   a8262:	f8ca 1010 	str.w	r1, [sl, #16]
   a8266:	68e9      	ldr	r1, [r5, #12]
   a8268:	f8ca 1014 	str.w	r1, [sl, #20]
   a826c:	d003      	beq.n	a8276 <_realloc_r+0x3be>
   a826e:	3510      	adds	r5, #16
   a8270:	f10a 0218 	add.w	r2, sl, #24
   a8274:	e74a      	b.n	a810c <_realloc_r+0x254>
   a8276:	6929      	ldr	r1, [r5, #16]
   a8278:	f10a 0220 	add.w	r2, sl, #32
   a827c:	f8ca 1018 	str.w	r1, [sl, #24]
   a8280:	6969      	ldr	r1, [r5, #20]
   a8282:	3518      	adds	r5, #24
   a8284:	f8ca 101c 	str.w	r1, [sl, #28]
   a8288:	e740      	b.n	a810c <_realloc_r+0x254>
   a828a:	bf00      	nop

000a828c <_sbrk_r>:
   a828c:	b538      	push	{r3, r4, r5, lr}
   a828e:	4c07      	ldr	r4, [pc, #28]	; (a82ac <_sbrk_r+0x20>)
   a8290:	2300      	movs	r3, #0
   a8292:	4605      	mov	r5, r0
   a8294:	4608      	mov	r0, r1
   a8296:	6023      	str	r3, [r4, #0]
   a8298:	f7f3 f88e 	bl	9b3b8 <_sbrk>
   a829c:	1c43      	adds	r3, r0, #1
   a829e:	d000      	beq.n	a82a2 <_sbrk_r+0x16>
   a82a0:	bd38      	pop	{r3, r4, r5, pc}
   a82a2:	6823      	ldr	r3, [r4, #0]
   a82a4:	2b00      	cmp	r3, #0
   a82a6:	d0fb      	beq.n	a82a0 <_sbrk_r+0x14>
   a82a8:	602b      	str	r3, [r5, #0]
   a82aa:	bd38      	pop	{r3, r4, r5, pc}
   a82ac:	20072828 	.word	0x20072828

000a82b0 <__sread>:
   a82b0:	b510      	push	{r4, lr}
   a82b2:	460c      	mov	r4, r1
   a82b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a82b8:	f000 f936 	bl	a8528 <_read_r>
   a82bc:	2800      	cmp	r0, #0
   a82be:	db03      	blt.n	a82c8 <__sread+0x18>
   a82c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a82c2:	4403      	add	r3, r0
   a82c4:	6523      	str	r3, [r4, #80]	; 0x50
   a82c6:	bd10      	pop	{r4, pc}
   a82c8:	89a3      	ldrh	r3, [r4, #12]
   a82ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a82ce:	81a3      	strh	r3, [r4, #12]
   a82d0:	bd10      	pop	{r4, pc}
   a82d2:	bf00      	nop

000a82d4 <__swrite>:
   a82d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a82d8:	460c      	mov	r4, r1
   a82da:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   a82de:	461f      	mov	r7, r3
   a82e0:	05cb      	lsls	r3, r1, #23
   a82e2:	4616      	mov	r6, r2
   a82e4:	4605      	mov	r5, r0
   a82e6:	d507      	bpl.n	a82f8 <__swrite+0x24>
   a82e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a82ec:	2302      	movs	r3, #2
   a82ee:	2200      	movs	r2, #0
   a82f0:	f000 f904 	bl	a84fc <_lseek_r>
   a82f4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   a82f8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a82fc:	81a1      	strh	r1, [r4, #12]
   a82fe:	463b      	mov	r3, r7
   a8300:	4632      	mov	r2, r6
   a8302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a8306:	4628      	mov	r0, r5
   a8308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a830c:	f000 b814 	b.w	a8338 <_write_r>

000a8310 <__sseek>:
   a8310:	b510      	push	{r4, lr}
   a8312:	460c      	mov	r4, r1
   a8314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a8318:	f000 f8f0 	bl	a84fc <_lseek_r>
   a831c:	89a3      	ldrh	r3, [r4, #12]
   a831e:	1c42      	adds	r2, r0, #1
   a8320:	bf0e      	itee	eq
   a8322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a8326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a832a:	6520      	strne	r0, [r4, #80]	; 0x50
   a832c:	81a3      	strh	r3, [r4, #12]
   a832e:	bd10      	pop	{r4, pc}

000a8330 <__sclose>:
   a8330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a8334:	f000 b868 	b.w	a8408 <_close_r>

000a8338 <_write_r>:
   a8338:	b570      	push	{r4, r5, r6, lr}
   a833a:	460d      	mov	r5, r1
   a833c:	4c08      	ldr	r4, [pc, #32]	; (a8360 <_write_r+0x28>)
   a833e:	4611      	mov	r1, r2
   a8340:	4606      	mov	r6, r0
   a8342:	461a      	mov	r2, r3
   a8344:	4628      	mov	r0, r5
   a8346:	2300      	movs	r3, #0
   a8348:	6023      	str	r3, [r4, #0]
   a834a:	f7f2 f845 	bl	9a3d8 <_write>
   a834e:	1c43      	adds	r3, r0, #1
   a8350:	d000      	beq.n	a8354 <_write_r+0x1c>
   a8352:	bd70      	pop	{r4, r5, r6, pc}
   a8354:	6823      	ldr	r3, [r4, #0]
   a8356:	2b00      	cmp	r3, #0
   a8358:	d0fb      	beq.n	a8352 <_write_r+0x1a>
   a835a:	6033      	str	r3, [r6, #0]
   a835c:	bd70      	pop	{r4, r5, r6, pc}
   a835e:	bf00      	nop
   a8360:	20072828 	.word	0x20072828

000a8364 <__register_exitproc>:
   a8364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a8368:	4c25      	ldr	r4, [pc, #148]	; (a8400 <__register_exitproc+0x9c>)
   a836a:	4606      	mov	r6, r0
   a836c:	6825      	ldr	r5, [r4, #0]
   a836e:	4688      	mov	r8, r1
   a8370:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a8374:	4692      	mov	sl, r2
   a8376:	4699      	mov	r9, r3
   a8378:	b3c4      	cbz	r4, a83ec <__register_exitproc+0x88>
   a837a:	6860      	ldr	r0, [r4, #4]
   a837c:	281f      	cmp	r0, #31
   a837e:	dc17      	bgt.n	a83b0 <__register_exitproc+0x4c>
   a8380:	1c41      	adds	r1, r0, #1
   a8382:	b176      	cbz	r6, a83a2 <__register_exitproc+0x3e>
   a8384:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a8388:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a838c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a8390:	2201      	movs	r2, #1
   a8392:	4082      	lsls	r2, r0
   a8394:	4315      	orrs	r5, r2
   a8396:	2e02      	cmp	r6, #2
   a8398:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a839c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a83a0:	d01e      	beq.n	a83e0 <__register_exitproc+0x7c>
   a83a2:	1c83      	adds	r3, r0, #2
   a83a4:	6061      	str	r1, [r4, #4]
   a83a6:	2000      	movs	r0, #0
   a83a8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a83ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a83b0:	4b14      	ldr	r3, [pc, #80]	; (a8404 <__register_exitproc+0xa0>)
   a83b2:	b303      	cbz	r3, a83f6 <__register_exitproc+0x92>
   a83b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a83b8:	f7ff fa1c 	bl	a77f4 <malloc>
   a83bc:	4604      	mov	r4, r0
   a83be:	b1d0      	cbz	r0, a83f6 <__register_exitproc+0x92>
   a83c0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a83c4:	2700      	movs	r7, #0
   a83c6:	e884 0088 	stmia.w	r4, {r3, r7}
   a83ca:	4638      	mov	r0, r7
   a83cc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a83d0:	2101      	movs	r1, #1
   a83d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a83d6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a83da:	2e00      	cmp	r6, #0
   a83dc:	d0e1      	beq.n	a83a2 <__register_exitproc+0x3e>
   a83de:	e7d1      	b.n	a8384 <__register_exitproc+0x20>
   a83e0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a83e4:	431a      	orrs	r2, r3
   a83e6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a83ea:	e7da      	b.n	a83a2 <__register_exitproc+0x3e>
   a83ec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a83f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a83f4:	e7c1      	b.n	a837a <__register_exitproc+0x16>
   a83f6:	f04f 30ff 	mov.w	r0, #4294967295
   a83fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a83fe:	bf00      	nop
   a8400:	000a8aa0 	.word	0x000a8aa0
   a8404:	000a77f5 	.word	0x000a77f5

000a8408 <_close_r>:
   a8408:	b538      	push	{r3, r4, r5, lr}
   a840a:	4c07      	ldr	r4, [pc, #28]	; (a8428 <_close_r+0x20>)
   a840c:	2300      	movs	r3, #0
   a840e:	4605      	mov	r5, r0
   a8410:	4608      	mov	r0, r1
   a8412:	6023      	str	r3, [r4, #0]
   a8414:	f7f2 ffee 	bl	9b3f4 <_close>
   a8418:	1c43      	adds	r3, r0, #1
   a841a:	d000      	beq.n	a841e <_close_r+0x16>
   a841c:	bd38      	pop	{r3, r4, r5, pc}
   a841e:	6823      	ldr	r3, [r4, #0]
   a8420:	2b00      	cmp	r3, #0
   a8422:	d0fb      	beq.n	a841c <_close_r+0x14>
   a8424:	602b      	str	r3, [r5, #0]
   a8426:	bd38      	pop	{r3, r4, r5, pc}
   a8428:	20072828 	.word	0x20072828

000a842c <_fclose_r>:
   a842c:	2900      	cmp	r1, #0
   a842e:	d03d      	beq.n	a84ac <_fclose_r+0x80>
   a8430:	b570      	push	{r4, r5, r6, lr}
   a8432:	4605      	mov	r5, r0
   a8434:	460c      	mov	r4, r1
   a8436:	b108      	cbz	r0, a843c <_fclose_r+0x10>
   a8438:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a843a:	b37b      	cbz	r3, a849c <_fclose_r+0x70>
   a843c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a8440:	b90b      	cbnz	r3, a8446 <_fclose_r+0x1a>
   a8442:	2000      	movs	r0, #0
   a8444:	bd70      	pop	{r4, r5, r6, pc}
   a8446:	4621      	mov	r1, r4
   a8448:	4628      	mov	r0, r5
   a844a:	f7fe fd27 	bl	a6e9c <__sflush_r>
   a844e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a8450:	4606      	mov	r6, r0
   a8452:	b133      	cbz	r3, a8462 <_fclose_r+0x36>
   a8454:	69e1      	ldr	r1, [r4, #28]
   a8456:	4628      	mov	r0, r5
   a8458:	4798      	blx	r3
   a845a:	2800      	cmp	r0, #0
   a845c:	bfb8      	it	lt
   a845e:	f04f 36ff 	movlt.w	r6, #4294967295
   a8462:	89a3      	ldrh	r3, [r4, #12]
   a8464:	061b      	lsls	r3, r3, #24
   a8466:	d41c      	bmi.n	a84a2 <_fclose_r+0x76>
   a8468:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a846a:	b141      	cbz	r1, a847e <_fclose_r+0x52>
   a846c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a8470:	4299      	cmp	r1, r3
   a8472:	d002      	beq.n	a847a <_fclose_r+0x4e>
   a8474:	4628      	mov	r0, r5
   a8476:	f7fe feb5 	bl	a71e4 <_free_r>
   a847a:	2300      	movs	r3, #0
   a847c:	6323      	str	r3, [r4, #48]	; 0x30
   a847e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a8480:	b121      	cbz	r1, a848c <_fclose_r+0x60>
   a8482:	4628      	mov	r0, r5
   a8484:	f7fe feae 	bl	a71e4 <_free_r>
   a8488:	2300      	movs	r3, #0
   a848a:	6463      	str	r3, [r4, #68]	; 0x44
   a848c:	f7fe fe44 	bl	a7118 <__sfp_lock_acquire>
   a8490:	2300      	movs	r3, #0
   a8492:	81a3      	strh	r3, [r4, #12]
   a8494:	f7fe fe42 	bl	a711c <__sfp_lock_release>
   a8498:	4630      	mov	r0, r6
   a849a:	bd70      	pop	{r4, r5, r6, pc}
   a849c:	f7fe fe36 	bl	a710c <__sinit>
   a84a0:	e7cc      	b.n	a843c <_fclose_r+0x10>
   a84a2:	6921      	ldr	r1, [r4, #16]
   a84a4:	4628      	mov	r0, r5
   a84a6:	f7fe fe9d 	bl	a71e4 <_free_r>
   a84aa:	e7dd      	b.n	a8468 <_fclose_r+0x3c>
   a84ac:	2000      	movs	r0, #0
   a84ae:	4770      	bx	lr

000a84b0 <_fstat_r>:
   a84b0:	b538      	push	{r3, r4, r5, lr}
   a84b2:	460b      	mov	r3, r1
   a84b4:	4c07      	ldr	r4, [pc, #28]	; (a84d4 <_fstat_r+0x24>)
   a84b6:	4605      	mov	r5, r0
   a84b8:	4611      	mov	r1, r2
   a84ba:	4618      	mov	r0, r3
   a84bc:	2300      	movs	r3, #0
   a84be:	6023      	str	r3, [r4, #0]
   a84c0:	f7f2 ffa4 	bl	9b40c <_fstat>
   a84c4:	1c43      	adds	r3, r0, #1
   a84c6:	d000      	beq.n	a84ca <_fstat_r+0x1a>
   a84c8:	bd38      	pop	{r3, r4, r5, pc}
   a84ca:	6823      	ldr	r3, [r4, #0]
   a84cc:	2b00      	cmp	r3, #0
   a84ce:	d0fb      	beq.n	a84c8 <_fstat_r+0x18>
   a84d0:	602b      	str	r3, [r5, #0]
   a84d2:	bd38      	pop	{r3, r4, r5, pc}
   a84d4:	20072828 	.word	0x20072828

000a84d8 <_isatty_r>:
   a84d8:	b538      	push	{r3, r4, r5, lr}
   a84da:	4c07      	ldr	r4, [pc, #28]	; (a84f8 <_isatty_r+0x20>)
   a84dc:	2300      	movs	r3, #0
   a84de:	4605      	mov	r5, r0
   a84e0:	4608      	mov	r0, r1
   a84e2:	6023      	str	r3, [r4, #0]
   a84e4:	f7f2 ffa2 	bl	9b42c <_isatty>
   a84e8:	1c43      	adds	r3, r0, #1
   a84ea:	d000      	beq.n	a84ee <_isatty_r+0x16>
   a84ec:	bd38      	pop	{r3, r4, r5, pc}
   a84ee:	6823      	ldr	r3, [r4, #0]
   a84f0:	2b00      	cmp	r3, #0
   a84f2:	d0fb      	beq.n	a84ec <_isatty_r+0x14>
   a84f4:	602b      	str	r3, [r5, #0]
   a84f6:	bd38      	pop	{r3, r4, r5, pc}
   a84f8:	20072828 	.word	0x20072828

000a84fc <_lseek_r>:
   a84fc:	b570      	push	{r4, r5, r6, lr}
   a84fe:	460d      	mov	r5, r1
   a8500:	4c08      	ldr	r4, [pc, #32]	; (a8524 <_lseek_r+0x28>)
   a8502:	4611      	mov	r1, r2
   a8504:	4606      	mov	r6, r0
   a8506:	461a      	mov	r2, r3
   a8508:	4628      	mov	r0, r5
   a850a:	2300      	movs	r3, #0
   a850c:	6023      	str	r3, [r4, #0]
   a850e:	f7f2 ff97 	bl	9b440 <_lseek>
   a8512:	1c43      	adds	r3, r0, #1
   a8514:	d000      	beq.n	a8518 <_lseek_r+0x1c>
   a8516:	bd70      	pop	{r4, r5, r6, pc}
   a8518:	6823      	ldr	r3, [r4, #0]
   a851a:	2b00      	cmp	r3, #0
   a851c:	d0fb      	beq.n	a8516 <_lseek_r+0x1a>
   a851e:	6033      	str	r3, [r6, #0]
   a8520:	bd70      	pop	{r4, r5, r6, pc}
   a8522:	bf00      	nop
   a8524:	20072828 	.word	0x20072828

000a8528 <_read_r>:
   a8528:	b570      	push	{r4, r5, r6, lr}
   a852a:	460d      	mov	r5, r1
   a852c:	4c08      	ldr	r4, [pc, #32]	; (a8550 <_read_r+0x28>)
   a852e:	4611      	mov	r1, r2
   a8530:	4606      	mov	r6, r0
   a8532:	461a      	mov	r2, r3
   a8534:	4628      	mov	r0, r5
   a8536:	2300      	movs	r3, #0
   a8538:	6023      	str	r3, [r4, #0]
   a853a:	f7f1 ff23 	bl	9a384 <_read>
   a853e:	1c43      	adds	r3, r0, #1
   a8540:	d000      	beq.n	a8544 <_read_r+0x1c>
   a8542:	bd70      	pop	{r4, r5, r6, pc}
   a8544:	6823      	ldr	r3, [r4, #0]
   a8546:	2b00      	cmp	r3, #0
   a8548:	d0fb      	beq.n	a8542 <_read_r+0x1a>
   a854a:	6033      	str	r3, [r6, #0]
   a854c:	bd70      	pop	{r4, r5, r6, pc}
   a854e:	bf00      	nop
   a8550:	20072828 	.word	0x20072828
   a8554:	54534554 	.word	0x54534554
   a8558:	00315350 	.word	0x00315350
   a855c:	54534554 	.word	0x54534554
   a8560:	00325350 	.word	0x00325350
   a8564:	54534554 	.word	0x54534554
   a8568:	00335350 	.word	0x00335350
   a856c:	54534554 	.word	0x54534554
   a8570:	00545041 	.word	0x00545041
   a8574:	54534554 	.word	0x54534554
   a8578:	00003154 	.word	0x00003154
   a857c:	54534554 	.word	0x54534554
   a8580:	00003254 	.word	0x00003254
   a8584:	54534554 	.word	0x54534554
   a8588:	444e4f43 	.word	0x444e4f43
   a858c:	00000000 	.word	0x00000000
   a8590:	45544544 	.word	0x45544544
   a8594:	4c5f5443 	.word	0x4c5f5443
   a8598:	0000574f 	.word	0x0000574f
   a859c:	48545056 	.word	0x48545056
   a85a0:	00484749 	.word	0x00484749
   a85a4:	4f4f4c42 	.word	0x4f4f4c42
   a85a8:	4c445f44 	.word	0x4c445f44
   a85ac:	00000000 	.word	0x00000000
   a85b0:	00545041 	.word	0x00545041
   a85b4:	45544e45 	.word	0x45544e45
   a85b8:	00325f52 	.word	0x00325f52
   a85bc:	45544e45 	.word	0x45544e45
   a85c0:	00335f52 	.word	0x00335f52
   a85c4:	45544e45 	.word	0x45544e45
   a85c8:	00345f52 	.word	0x00345f52
   a85cc:	00303035 	.word	0x00303035
   a85d0:	41505942 	.word	0x41505942
   a85d4:	00005353 	.word	0x00005353
   a85d8:	4d495250 	.word	0x4d495250
   a85dc:	00003245 	.word	0x00003245
   a85e0:	52494352 	.word	0x52494352
   a85e4:	00003243 	.word	0x00003243
   a85e8:	4f5f4548 	.word	0x4f5f4548
   a85ec:	0000004e 	.word	0x0000004e
   a85f0:	4f5f4548 	.word	0x4f5f4548
   a85f4:	00004646 	.word	0x00004646
   a85f8:	4f5f5046 	.word	0x4f5f5046
   a85fc:	0000004e 	.word	0x0000004e
   a8600:	4f5f5046 	.word	0x4f5f5046
   a8604:	00004646 	.word	0x00004646
   a8608:	505f5343 	.word	0x505f5343
   a860c:	535f544f 	.word	0x535f544f
   a8610:	00005445 	.word	0x00005445
   a8614:	525f5046 	.word	0x525f5046
   a8618:	00455441 	.word	0x00455441
   a861c:	465f5046 	.word	0x465f5046
   a8620:	00005152 	.word	0x00005152
   a8624:	5f504744 	.word	0x5f504744
   a8628:	00004e4f 	.word	0x00004e4f
   a862c:	5f504744 	.word	0x5f504744
   a8630:	0046464f 	.word	0x0046464f
   a8634:	5f504744 	.word	0x5f504744
   a8638:	45544152 	.word	0x45544152
   a863c:	00000000 	.word	0x00000000
   a8640:	5f504744 	.word	0x5f504744
   a8644:	00515246 	.word	0x00515246
   a8648:	545f5350 	.word	0x545f5350
   a864c:	00000000 	.word	0x00000000
   a8650:	5f504655 	.word	0x5f504655
   a8654:	0046464f 	.word	0x0046464f
   a8658:	5f504655 	.word	0x5f504655
   a865c:	45544152 	.word	0x45544152
   a8660:	00000000 	.word	0x00000000
   a8664:	5f414c56 	.word	0x5f414c56
   a8668:	504d5550 	.word	0x504d5550
   a866c:	004e4f5f 	.word	0x004e4f5f
   a8670:	5f414c56 	.word	0x5f414c56
   a8674:	504d5550 	.word	0x504d5550
   a8678:	46464f5f 	.word	0x46464f5f
   a867c:	00000000 	.word	0x00000000
   a8680:	525f5042 	.word	0x525f5042
   a8684:	00455441 	.word	0x00455441
   a8688:	4f5f4356 	.word	0x4f5f4356
   a868c:	00004646 	.word	0x00004646
   a8690:	4f5f4957 	.word	0x4f5f4957
   a8694:	0000004e 	.word	0x0000004e
   a8698:	4f5f4957 	.word	0x4f5f4957
   a869c:	00004646 	.word	0x00004646
   a86a0:	49415244 	.word	0x49415244
   a86a4:	4e4f5f4e 	.word	0x4e4f5f4e
   a86a8:	00000000 	.word	0x00000000
   a86ac:	49415244 	.word	0x49415244
   a86b0:	464f5f4e 	.word	0x464f5f4e
   a86b4:	00000046 	.word	0x00000046
   a86b8:	504f5f56 	.word	0x504f5f56
   a86bc:	00004e45 	.word	0x00004e45
   a86c0:	4c435f56 	.word	0x4c435f56
   a86c4:	0045534f 	.word	0x0045534f
   a86c8:	4c415f56 	.word	0x4c415f56
   a86cc:	45504f4c 	.word	0x45504f4c
   a86d0:	0000004e 	.word	0x0000004e
   a86d4:	4f5f5048 	.word	0x4f5f5048
   a86d8:	0000004e 	.word	0x0000004e
   a86dc:	4f5f5048 	.word	0x4f5f5048
   a86e0:	00004646 	.word	0x00004646
   a86e4:	525f5048 	.word	0x525f5048
   a86e8:	00455441 	.word	0x00455441
   a86ec:	565f4342 	.word	0x565f4342
   a86f0:	45532031 	.word	0x45532031
   a86f4:	00000054 	.word	0x00000054
   a86f8:	565f4342 	.word	0x565f4342
   a86fc:	45532032 	.word	0x45532032
   a8700:	00000054 	.word	0x00000054
   a8704:	565f4342 	.word	0x565f4342
   a8708:	33315f31 	.word	0x33315f31
   a870c:	53203431 	.word	0x53203431
   a8710:	00005445 	.word	0x00005445
   a8714:	565f4342 	.word	0x565f4342
   a8718:	33315f32 	.word	0x33315f32
   a871c:	53203431 	.word	0x53203431
   a8720:	00005445 	.word	0x00005445
   a8724:	565f4342 	.word	0x565f4342
   a8728:	20345f31 	.word	0x20345f31
   a872c:	00544553 	.word	0x00544553
   a8730:	565f4342 	.word	0x565f4342
   a8734:	20345f32 	.word	0x20345f32
   a8738:	00544553 	.word	0x00544553
   a873c:	525f4342 	.word	0x525f4342
   a8740:	54455345 	.word	0x54455345
   a8744:	00000000 	.word	0x00000000
   a8748:	465f4342 	.word	0x465f4342
   a874c:	5a454552 	.word	0x5a454552
   a8750:	00000045 	.word	0x00000045
   a8754:	555f4342 	.word	0x555f4342
   a8758:	4552464e 	.word	0x4552464e
   a875c:	00455a45 	.word	0x00455a45
   a8760:	4e45504f 	.word	0x4e45504f
   a8764:	4c4c4946 	.word	0x4c4c4946
   a8768:	00000000 	.word	0x00000000
   a876c:	0052544a 	.word	0x0052544a
   a8770:	4f5f4356 	.word	0x4f5f4356
   a8774:	0000004e 	.word	0x0000004e
   a8778:	545f5343 	.word	0x545f5343
   a877c:	47474952 	.word	0x47474952
   a8780:	00005245 	.word	0x00005245
   a8784:	545f5350 	.word	0x545f5350
   a8788:	47474952 	.word	0x47474952
   a878c:	00005245 	.word	0x00005245
   a8790:	3a726556 	.word	0x3a726556
   a8794:	00342e54 	.word	0x00342e54
   a8798:	574f4c46 	.word	0x574f4c46
   a879c:	004e455f 	.word	0x004e455f
   a87a0:	574f4c46 	.word	0x574f4c46
   a87a4:	5349445f 	.word	0x5349445f
   a87a8:	00000000 	.word	0x00000000
   a87ac:	504d4554 	.word	0x504d4554
   a87b0:	49485f31 	.word	0x49485f31
   a87b4:	00004847 	.word	0x00004847
   a87b8:	504d4554 	.word	0x504d4554
   a87bc:	4f4c5f31 	.word	0x4f4c5f31
   a87c0:	00000057 	.word	0x00000057
   a87c4:	504d4554 	.word	0x504d4554
   a87c8:	00000031 	.word	0x00000031
   a87cc:	504d4554 	.word	0x504d4554
   a87d0:	49485f32 	.word	0x49485f32
   a87d4:	00004847 	.word	0x00004847
   a87d8:	504d4554 	.word	0x504d4554
   a87dc:	4f4c5f32 	.word	0x4f4c5f32
   a87e0:	00000057 	.word	0x00000057
   a87e4:	54534554 	.word	0x54534554
   a87e8:	00000000 	.word	0x00000000
   a87ec:	504d4554 	.word	0x504d4554
   a87f0:	00000032 	.word	0x00000032
   a87f4:	504d4554 	.word	0x504d4554
   a87f8:	4749485f 	.word	0x4749485f
   a87fc:	00000048 	.word	0x00000048
   a8800:	504d4554 	.word	0x504d4554
   a8804:	574f4c5f 	.word	0x574f4c5f
   a8808:	00000000 	.word	0x00000000
   a880c:	504d4554 	.word	0x504d4554
   a8810:	00000033 	.word	0x00000033
   a8814:	5f545041 	.word	0x5f545041
   a8818:	48474948 	.word	0x48474948
   a881c:	00000000 	.word	0x00000000
   a8820:	5f545041 	.word	0x5f545041
   a8824:	3d574f4c 	.word	0x3d574f4c
   a8828:	292d2820 	.word	0x292d2820
   a882c:	00000000 	.word	0x00000000
   a8830:	5f545041 	.word	0x5f545041
   a8834:	00574f4c 	.word	0x00574f4c
   a8838:	5f545056 	.word	0x5f545056
   a883c:	48474948 	.word	0x48474948
   a8840:	00000000 	.word	0x00000000
   a8844:	5f545056 	.word	0x5f545056
   a8848:	3d574f4c 	.word	0x3d574f4c
   a884c:	292d2820 	.word	0x292d2820
   a8850:	00000000 	.word	0x00000000
   a8854:	5f325350 	.word	0x5f325350
   a8858:	00574f4c 	.word	0x00574f4c
   a885c:	444e4f43 	.word	0x444e4f43
   a8860:	4749485f 	.word	0x4749485f
   a8864:	00000048 	.word	0x00000048
   a8868:	444e4f43 	.word	0x444e4f43
   a886c:	574f4c5f 	.word	0x574f4c5f
   a8870:	00000000 	.word	0x00000000
   a8874:	5f4e4f43 	.word	0x5f4e4f43
   a8878:	00574f4c 	.word	0x00574f4c
   a887c:	5f315350 	.word	0x5f315350
   a8880:	48474948 	.word	0x48474948
   a8884:	00000000 	.word	0x00000000
   a8888:	5f315350 	.word	0x5f315350
   a888c:	3d574f4c 	.word	0x3d574f4c
   a8890:	292d2820 	.word	0x292d2820
   a8894:	00000000 	.word	0x00000000
   a8898:	00325350 	.word	0x00325350
   a889c:	5f325350 	.word	0x5f325350
   a88a0:	3d574f4c 	.word	0x3d574f4c
   a88a4:	292d2820 	.word	0x292d2820
   a88a8:	00000000 	.word	0x00000000
   a88ac:	00335350 	.word	0x00335350
   a88b0:	5f335350 	.word	0x5f335350
   a88b4:	3d574f4c 	.word	0x3d574f4c
   a88b8:	292d2820 	.word	0x292d2820
   a88bc:	00000000 	.word	0x00000000
   a88c0:	5f335350 	.word	0x5f335350
   a88c4:	00574f4c 	.word	0x00574f4c
   a88c8:	535f5048 	.word	0x535f5048
   a88cc:	54524154 	.word	0x54524154
   a88d0:	0000003d 	.word	0x0000003d
   a88d4:	455f5048 	.word	0x455f5048
   a88d8:	003d444e 	.word	0x003d444e
   a88dc:	3d315350 	.word	0x3d315350
   a88e0:	00000000 	.word	0x00000000
   a88e4:	3d325350 	.word	0x3d325350
   a88e8:	00000000 	.word	0x00000000
   a88ec:	3d335350 	.word	0x3d335350
   a88f0:	00000000 	.word	0x00000000
   a88f4:	3d545041 	.word	0x3d545041
   a88f8:	00000000 	.word	0x00000000
   a88fc:	3d545056 	.word	0x3d545056
   a8900:	00000000 	.word	0x00000000
   a8904:	31504d54 	.word	0x31504d54
   a8908:	0000003d 	.word	0x0000003d
   a890c:	32504d54 	.word	0x32504d54
   a8910:	0000003d 	.word	0x0000003d
   a8914:	504d4554 	.word	0x504d4554
   a8918:	00003d31 	.word	0x00003d31
   a891c:	504d4554 	.word	0x504d4554
   a8920:	00003d32 	.word	0x00003d32
   a8924:	504d4554 	.word	0x504d4554
   a8928:	00003d33 	.word	0x00003d33
   a892c:	544e4328 	.word	0x544e4328
   a8930:	00000029 	.word	0x00000029

000a8934 <can_bit_time>:
   a8934:	02020308 02094b03 43020303 0303030a     .....K.....C....
   a8944:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   a8954:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   a8964:	05050510 06114504 47040505 06060512     .....E.....G....
   a8974:	06134304 44040606 06060714 08154604     .C.....D.....F..
   a8984:	47040606 07070716 08174404 46040708     ...G.....D.....F
   a8994:	08080718 08194304 44040808 00006325     .....C.....D%c..
   a89a4:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   a89b4:	74737953 206b6369 666e6f63 72756769     Systick configur
   a89c4:	6f697461 7265206e 0d726f72 00000000     ation error.....

000a89d4 <uart_serial_options>:
   a89d4:	0001c200 00000000 00000800 00000001     ................
   a89e4:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a89f4:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a8a04:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   a8a14:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   a8a24:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   a8a34:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   a8a44:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   a8a54:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   a8a64:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   a8a74:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   a8a84:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a8a94:	4d495250 00003145 00000043              PRIME1..C...

000a8aa0 <_global_impure_ptr>:
   a8aa0:	20070db8 0000000a                       ... ....

000a8aa8 <_init>:
   a8aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8aaa:	bf00      	nop
   a8aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a8aae:	bc08      	pop	{r3}
   a8ab0:	469e      	mov	lr, r3
   a8ab2:	4770      	bx	lr

000a8ab4 <__init_array_start>:
   a8ab4:	000a6e7d 	.word	0x000a6e7d

000a8ab8 <__frame_dummy_init_array_entry>:
   a8ab8:	00080119                                ....

000a8abc <_fini>:
   a8abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8abe:	bf00      	nop
   a8ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a8ac2:	bc08      	pop	{r3}
   a8ac4:	469e      	mov	lr, r3
   a8ac6:	4770      	bx	lr

000a8ac8 <__fini_array_start>:
   a8ac8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a27      	ldr	r2, [pc, #156]	; (200700b0 <efc_perform_read_sequence+0xb0>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00

200700b4 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b4:	b480      	push	{r7}
200700b6:	b083      	sub	sp, #12
200700b8:	af00      	add	r7, sp, #0
200700ba:	6078      	str	r0, [r7, #4]
200700bc:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700be:	687b      	ldr	r3, [r7, #4]
200700c0:	683a      	ldr	r2, [r7, #0]
200700c2:	601a      	str	r2, [r3, #0]
}
200700c4:	bf00      	nop
200700c6:	370c      	adds	r7, #12
200700c8:	46bd      	mov	sp, r7
200700ca:	bc80      	pop	{r7}
200700cc:	4770      	bx	lr
200700ce:	bf00      	nop

200700d0 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d0:	b480      	push	{r7}
200700d2:	b085      	sub	sp, #20
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
200700d8:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700da:	687b      	ldr	r3, [r7, #4]
200700dc:	683a      	ldr	r2, [r7, #0]
200700de:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e0:	687b      	ldr	r3, [r7, #4]
200700e2:	689b      	ldr	r3, [r3, #8]
200700e4:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700e6:	68fb      	ldr	r3, [r7, #12]
200700e8:	f003 0301 	and.w	r3, r3, #1
200700ec:	2b00      	cmp	r3, #0
200700ee:	d0f7      	beq.n	200700e0 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f0:	68fb      	ldr	r3, [r7, #12]
200700f2:	f003 0306 	and.w	r3, r3, #6
}
200700f6:	4618      	mov	r0, r3
200700f8:	3714      	adds	r7, #20
200700fa:	46bd      	mov	sp, r7
200700fc:	bc80      	pop	{r7}
200700fe:	4770      	bx	lr

20070100 <levelswitchprevstatus>:
20070100:	0001                                        ..

20070102 <ps3_threshold>:
20070102:	1000                                        ..

20070104 <cl_flowpathtable>:
20070104:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

2007011c <hp>:
2007011c:	000a 006a 0009 0023 0008 002d 0007 0037     ..j...#...-...7.
2007012c:	0006 0041 0005 0050 0004 0064 0002 0212     ..A...P...d.....
2007013c:	0001 0424 0032 0bb8 001e 157c 0000 0000     ..$.2.....|.....
	...

200701e4 <apt2>:
200701e4:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
200701f4:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
20070204:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
20070214:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
20070224:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
20070234:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
20070244:	0168 12e1 01a4 1630                         h.....0.

2007024c <vpt2>:
2007024c:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
2007025c:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007026c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007027c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007028c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007029c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200702ac:	0168 12e1 01a4 1630                         h.....0.

200702b4 <ufp>:
200702b4:	0028 05dc 003c 041a 0046 02bc 0050 028a     (...<...F...P...
200702c4:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
200702d4:	0082 0190 0096 015e 00aa 012c 00c8 00fa     ......^...,.....
200702e4:	00fa 00c8 0154 0096                         ....T...

200702ec <ps_1_2>:
200702ec:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200702fc:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
2007030c:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
2007031c:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
2007032c:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
2007033c:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007034c:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070358 <ps_2_2>:
20070358:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
20070368:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
20070378:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
20070388:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
20070398:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200703a8:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200703b8:	02ee 1612 0320 1900 0000 0000               .... .......

200703c4 <ps_3_2>:
200703c4:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200703d4:	ff38 df0d ff6a e172 ff9c e563 ffce e769     8...j.r...c...i.
200703e4:	0000 eb06 0032 ed32 0064 f08a 0096 f3fb     ....2.2.d.......
200703f4:	00c8 f6ce 00fa f941 012c fc1b 015e ff10     ......A.,...^...
20070404:	0190 026c 01c2 053f 01da 06a4 01f4 0708     ..l...?.........
20070414:	0226 0ab7 0258 0e10 028a 1004 02bc 13ec     &...X...........
20070424:	02ee 1676 0320 1964 0352 1c6d 0384 1f40     ..v. .d.R.m...@.
20070434:	03b6 2260 03e8 25e4 041a 29cc 044c 2db4     ..`"...%...)L..-
20070444:	047e 3200 04b0 36b0 04e2 3b60 0514 4074     ~..2...6..`;..t@
20070454:	0546 4588 0578 4b00 05aa 50dc 05dc 571c     F..Ex..K...P...W

20070464 <Cl_DlsisAlarmTable>:
20070464:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
20070474:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
20070484:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070494:	1500 0001 0000 0000 0116 0000 0000 1700     ................
200704a4:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
200704b4:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
200704c4:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
200704d4:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
200704e4:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
200704f4:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070504:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070514:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070538 <heater_duty>:
20070538:	0555 0000                                   U...

2007053c <prescribed_temp>:
2007053c:	0000 4214                                   ...B

20070540 <wait_4_TS2Stability>:
20070540:	00b4                                        ..

20070542 <wait_4_stability>:
20070542:	00f0                                        ..

20070544 <wait_4_TS3NeuStability>:
20070544:	0078                                        x.

20070546 <Neupost_stability_count>:
20070546:	0078                                        x.

20070548 <SYSTEM_FLOW>:
20070548:	012c 0000                                   ,...

2007054c <gram_test_buffer.9554>:
2007054c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007055c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007056c:	aaaa 0000 0000 0000                         ........

20070574 <Cl_MacState>:
20070574:	0101                                             .

20070575 <ConsoleSync>:
20070575:	cc01                                             .

20070576 <cond_pot_val_2volts.9572>:
20070576:	02cc                                        ..

20070578 <res_temp>:
20070578:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
20070588:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
20070598:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
200705a8:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
200705b8:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
200705c8:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
200705d8:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
200705e8:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
200705f8:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
20070608:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
20070618:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
20070628:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
20070638:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
20070648:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
20070658:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
20070668:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
20070678:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
20070688:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
20070698:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
200706a8:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
200706b8:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
200706c8:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
200706d8:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
200706e8:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
200706f8:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
20070708:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
20070718:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
20070728:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
20070738:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
20070748:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
20070758:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
20070768:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
20070778:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
20070788:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
20070798:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
200707a8:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
200707b8:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

20070a28 <TEST_STUB_ENABLEGATE>:
20070a28:	0101                                             .

20070a29 <prev_gate_status>:
20070a29:	0101                                             .

20070a2a <Current_sense_trigger>:
20070a2a:	0001                                        ..

20070a2c <pwm_period>:
20070a2c:	00c8 0000                                   ....

20070a30 <bp_rotataion_marker>:
20070a30:	0001                                        ..

20070a32 <prev_bp_rotataion_marker>:
20070a32:	0001                                        ..

20070a34 <cl_hep_deliveryrate>:
20070a34:	0064 0000                                   d...

20070a38 <hep_rotataion_marker>:
20070a38:	0001                                        ..

20070a3a <prev_hep_rotataion_marker>:
20070a3a:	0001                                        ..

20070a3c <Cl_IsoufAlarmTable>:
20070a3c:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
20070a4c:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
20070a5c:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070a6c:	1500 0001 0000 0000 0116 0000 0000 1700     ................
20070a7c:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
20070a8c:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
20070a9c:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
20070aac:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
20070abc:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
20070acc:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070adc:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070aec:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070b10 <opt>:
20070b10:	0000 0000 86a0 0001 002c 0000               ........,...

20070b1c <nvmarray>:
	...
20070b24:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070b34:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070b70 <SystemCoreClock>:
20070b70:	0900 003d                                   ..=.

20070b74 <Cl_ConsoleState>:
20070b74:	0101                                             .

20070b75 <g_b_led0_active>:
20070b75:	0101                                             .

20070b76 <Cl_disinfOpenFillTimeOut>:
20070b76:	0001                                        ..

20070b78 <Cl_DisinfAlarmTable>:
20070b78:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070b88:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070b98:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070ba8:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070bb8:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070bc8:	0000 0000                                   ....

20070bcc <Cl_DprepAlarmTable>:
20070bcc:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070bdc:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070bec:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070bfc:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070c0c:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070c1c:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070c2c:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
20070c3c:	0122 0000 0000 2400 0001 0000 0000 0126     "......$......&.
20070c4c:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070c5c:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070c6c:	2700 0001 0000 0000 0128 0000 0000 0f00     .'......(.......
20070c7c:	0001 0000 0000 0110 0000 0000 1100 0001     ................
20070c8c:	0000 0000 0112 0000 0000 1300 0001 0000     ................
20070c9c:	0000 0114 0000 0000 3c00 0001 0000 0000     .........<......
	...

20070cbc <Cl_RinseAlarmTable>:
20070cbc:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070ccc:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070cdc:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070cec:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070cfc:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070d0c:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070d1c:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070d2c:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070d3c:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070d4c:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070d5c:	011d 0000 0000 0000 010c 0000 0000 0000     ................
20070d6c:	010d 0000 0000 0000 010e 0000 0000 0000     ................
20070d7c:	0121 0000 0000 0000 011a 0000 0000 0000     !...............

20070d8c <Cl_StandbyAlarmTable>:
20070d8c:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070d9c:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070dac:	0000 0000                                   ....

20070db0 <cl_stbystate>:
20070db0:	0001 0000 0000 0000                         ........

20070db8 <impure_data>:
20070db8:	0000 0000 10a4 2007 110c 2007 1174 2007     ....... ... t.. 
	...
20070dec:	8a9c 000a 0000 0000 0000 0000 0000 0000     ................
	...
20070e60:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070e70:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200711e0 <_impure_ptr>:
200711e0:	0db8 2007                                   ... 

200711e4 <__malloc_av_>:
	...
200711ec:	11e4 2007 11e4 2007 11ec 2007 11ec 2007     ... ... ... ... 
200711fc:	11f4 2007 11f4 2007 11fc 2007 11fc 2007     ... ... ... ... 
2007120c:	1204 2007 1204 2007 120c 2007 120c 2007     ... ... ... ... 
2007121c:	1214 2007 1214 2007 121c 2007 121c 2007     ... ... ... ... 
2007122c:	1224 2007 1224 2007 122c 2007 122c 2007     $.. $.. ,.. ,.. 
2007123c:	1234 2007 1234 2007 123c 2007 123c 2007     4.. 4.. <.. <.. 
2007124c:	1244 2007 1244 2007 124c 2007 124c 2007     D.. D.. L.. L.. 
2007125c:	1254 2007 1254 2007 125c 2007 125c 2007     T.. T.. \.. \.. 
2007126c:	1264 2007 1264 2007 126c 2007 126c 2007     d.. d.. l.. l.. 
2007127c:	1274 2007 1274 2007 127c 2007 127c 2007     t.. t.. |.. |.. 
2007128c:	1284 2007 1284 2007 128c 2007 128c 2007     ... ... ... ... 
2007129c:	1294 2007 1294 2007 129c 2007 129c 2007     ... ... ... ... 
200712ac:	12a4 2007 12a4 2007 12ac 2007 12ac 2007     ... ... ... ... 
200712bc:	12b4 2007 12b4 2007 12bc 2007 12bc 2007     ... ... ... ... 
200712cc:	12c4 2007 12c4 2007 12cc 2007 12cc 2007     ... ... ... ... 
200712dc:	12d4 2007 12d4 2007 12dc 2007 12dc 2007     ... ... ... ... 
200712ec:	12e4 2007 12e4 2007 12ec 2007 12ec 2007     ... ... ... ... 
200712fc:	12f4 2007 12f4 2007 12fc 2007 12fc 2007     ... ... ... ... 
2007130c:	1304 2007 1304 2007 130c 2007 130c 2007     ... ... ... ... 
2007131c:	1314 2007 1314 2007 131c 2007 131c 2007     ... ... ... ... 
2007132c:	1324 2007 1324 2007 132c 2007 132c 2007     $.. $.. ,.. ,.. 
2007133c:	1334 2007 1334 2007 133c 2007 133c 2007     4.. 4.. <.. <.. 
2007134c:	1344 2007 1344 2007 134c 2007 134c 2007     D.. D.. L.. L.. 
2007135c:	1354 2007 1354 2007 135c 2007 135c 2007     T.. T.. \.. \.. 
2007136c:	1364 2007 1364 2007 136c 2007 136c 2007     d.. d.. l.. l.. 
2007137c:	1374 2007 1374 2007 137c 2007 137c 2007     t.. t.. |.. |.. 
2007138c:	1384 2007 1384 2007 138c 2007 138c 2007     ... ... ... ... 
2007139c:	1394 2007 1394 2007 139c 2007 139c 2007     ... ... ... ... 
200713ac:	13a4 2007 13a4 2007 13ac 2007 13ac 2007     ... ... ... ... 
200713bc:	13b4 2007 13b4 2007 13bc 2007 13bc 2007     ... ... ... ... 
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 
2007149c:	1494 2007 1494 2007 149c 2007 149c 2007     ... ... ... ... 
200714ac:	14a4 2007 14a4 2007 14ac 2007 14ac 2007     ... ... ... ... 
200714bc:	14b4 2007 14b4 2007 14bc 2007 14bc 2007     ... ... ... ... 
200714cc:	14c4 2007 14c4 2007 14cc 2007 14cc 2007     ... ... ... ... 
200714dc:	14d4 2007 14d4 2007 14dc 2007 14dc 2007     ... ... ... ... 
200714ec:	14e4 2007 14e4 2007 14ec 2007 14ec 2007     ... ... ... ... 
200714fc:	14f4 2007 14f4 2007 14fc 2007 14fc 2007     ... ... ... ... 
2007150c:	1504 2007 1504 2007 150c 2007 150c 2007     ... ... ... ... 
2007151c:	1514 2007 1514 2007 151c 2007 151c 2007     ... ... ... ... 
2007152c:	1524 2007 1524 2007 152c 2007 152c 2007     $.. $.. ,.. ,.. 
2007153c:	1534 2007 1534 2007 153c 2007 153c 2007     4.. 4.. <.. <.. 
2007154c:	1544 2007 1544 2007 154c 2007 154c 2007     D.. D.. L.. L.. 
2007155c:	1554 2007 1554 2007 155c 2007 155c 2007     T.. T.. \.. \.. 
2007156c:	1564 2007 1564 2007 156c 2007 156c 2007     d.. d.. l.. l.. 
2007157c:	1574 2007 1574 2007 157c 2007 157c 2007     t.. t.. |.. |.. 
2007158c:	1584 2007 1584 2007 158c 2007 158c 2007     ... ... ... ... 
2007159c:	1594 2007 1594 2007 159c 2007 159c 2007     ... ... ... ... 
200715ac:	15a4 2007 15a4 2007 15ac 2007 15ac 2007     ... ... ... ... 
200715bc:	15b4 2007 15b4 2007 15bc 2007 15bc 2007     ... ... ... ... 
200715cc:	15c4 2007 15c4 2007 15cc 2007 15cc 2007     ... ... ... ... 
200715dc:	15d4 2007 15d4 2007 15dc 2007 15dc 2007     ... ... ... ... 

200715ec <__malloc_trim_threshold>:
200715ec:	0000 0002                                   ....

200715f0 <__malloc_sbrk_base>:
200715f0:	ffff ffff                                   ....
